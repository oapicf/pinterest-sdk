/* tslint:disable */
/* eslint-disable */
/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BusinessAssetMembersGet200Response,
  BusinessAssetPartnersGet200Response,
  BusinessAssetsGet200Response,
  BusinessMemberAssetsGet200Response,
  BusinessMembersAssetAccessDeleteRequest,
  BusinessPartnerAssetAccessGet200Response,
  CreateAssetGroupBody,
  CreateAssetGroupResponse,
  DeleteAssetGroupBody,
  DeleteAssetGroupResponse,
  DeleteMemberAccessResultsResponseArray,
  DeletePartnerAssetAccessBody,
  DeletePartnerAssetsResultsResponseArray,
  PartnerType,
  PermissionsWithOwner,
  UpdateAssetGroupBody,
  UpdateAssetGroupResponse,
  UpdateMemberAssetAccessBody,
  UpdateMemberAssetsResultsResponseArray,
  UpdatePartnerAssetAccessBody,
  UpdatePartnerAssetsResultsResponseArray,
} from '../models/index';
import {
    BusinessAssetMembersGet200ResponseFromJSON,
    BusinessAssetMembersGet200ResponseToJSON,
    BusinessAssetPartnersGet200ResponseFromJSON,
    BusinessAssetPartnersGet200ResponseToJSON,
    BusinessAssetsGet200ResponseFromJSON,
    BusinessAssetsGet200ResponseToJSON,
    BusinessMemberAssetsGet200ResponseFromJSON,
    BusinessMemberAssetsGet200ResponseToJSON,
    BusinessMembersAssetAccessDeleteRequestFromJSON,
    BusinessMembersAssetAccessDeleteRequestToJSON,
    BusinessPartnerAssetAccessGet200ResponseFromJSON,
    BusinessPartnerAssetAccessGet200ResponseToJSON,
    CreateAssetGroupBodyFromJSON,
    CreateAssetGroupBodyToJSON,
    CreateAssetGroupResponseFromJSON,
    CreateAssetGroupResponseToJSON,
    DeleteAssetGroupBodyFromJSON,
    DeleteAssetGroupBodyToJSON,
    DeleteAssetGroupResponseFromJSON,
    DeleteAssetGroupResponseToJSON,
    DeleteMemberAccessResultsResponseArrayFromJSON,
    DeleteMemberAccessResultsResponseArrayToJSON,
    DeletePartnerAssetAccessBodyFromJSON,
    DeletePartnerAssetAccessBodyToJSON,
    DeletePartnerAssetsResultsResponseArrayFromJSON,
    DeletePartnerAssetsResultsResponseArrayToJSON,
    PartnerTypeFromJSON,
    PartnerTypeToJSON,
    PermissionsWithOwnerFromJSON,
    PermissionsWithOwnerToJSON,
    UpdateAssetGroupBodyFromJSON,
    UpdateAssetGroupBodyToJSON,
    UpdateAssetGroupResponseFromJSON,
    UpdateAssetGroupResponseToJSON,
    UpdateMemberAssetAccessBodyFromJSON,
    UpdateMemberAssetAccessBodyToJSON,
    UpdateMemberAssetsResultsResponseArrayFromJSON,
    UpdateMemberAssetsResultsResponseArrayToJSON,
    UpdatePartnerAssetAccessBodyFromJSON,
    UpdatePartnerAssetAccessBodyToJSON,
    UpdatePartnerAssetsResultsResponseArrayFromJSON,
    UpdatePartnerAssetsResultsResponseArrayToJSON,
} from '../models/index';

export interface AssetGroupCreateRequest {
    businessId: string;
    createAssetGroupBody: CreateAssetGroupBody;
}

export interface AssetGroupDeleteRequest {
    businessId: string;
    deleteAssetGroupBody: DeleteAssetGroupBody;
}

export interface AssetGroupUpdateRequest {
    businessId: string;
    updateAssetGroupBody: UpdateAssetGroupBody;
}

export interface BusinessAssetMembersGetRequest {
    businessId: string;
    assetId: string;
    bookmark?: string;
    pageSize?: number;
    startIndex?: number;
}

export interface BusinessAssetPartnersGetRequest {
    businessId: string;
    assetId: string;
    startIndex?: number;
    bookmark?: string;
    pageSize?: number;
}

export interface BusinessAssetsGetRequest {
    businessId: string;
    permissions?: Array<PermissionsWithOwner>;
    childAssetId?: string;
    assetGroupId?: string;
    assetType?: BusinessAssetsGetAssetTypeEnum;
    startIndex?: number;
    bookmark?: string;
    pageSize?: number;
}

export interface BusinessMemberAssetsGetRequest {
    businessId: string;
    memberId: string;
    assetType?: BusinessMemberAssetsGetAssetTypeEnum;
    startIndex?: number;
    bookmark?: string;
    pageSize?: number;
}

export interface BusinessMembersAssetAccessDeleteOperationRequest {
    businessId: string;
    businessMembersAssetAccessDeleteRequest: BusinessMembersAssetAccessDeleteRequest;
}

export interface BusinessMembersAssetAccessUpdateRequest {
    businessId: string;
    updateMemberAssetAccessBody: UpdateMemberAssetAccessBody;
}

export interface BusinessPartnerAssetAccessGetRequest {
    businessId: string;
    partnerId: string;
    partnerType?: PartnerType;
    assetType?: BusinessPartnerAssetAccessGetAssetTypeEnum;
    startIndex?: number;
    pageSize?: number;
    bookmark?: string;
}

export interface DeletePartnerAssetAccessHandlerImplRequest {
    businessId: string;
    deletePartnerAssetAccessBody: DeletePartnerAssetAccessBody;
}

export interface UpdatePartnerAssetAccessHandlerImplRequest {
    businessId: string;
    updatePartnerAssetAccessBody: UpdatePartnerAssetAccessBody;
}

/**
 * 
 */
export class BusinessAccessAssetsApi extends runtime.BaseAPI {

    /**
     * Create a new asset group with the specified parameters. - An <a href=\"https://help.pinterest.com/en/business/article/asset-groups\">asset group</a> is a custom group of assets based on how you’d like to manage your accounts.
     * Create a new asset group.
     */
    async assetGroupCreateRaw(requestParameters: AssetGroupCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateAssetGroupResponse>> {
        if (requestParameters['businessId'] == null) {
            throw new runtime.RequiredError(
                'businessId',
                'Required parameter "businessId" was null or undefined when calling assetGroupCreate().'
            );
        }

        if (requestParameters['createAssetGroupBody'] == null) {
            throw new runtime.RequiredError(
                'createAssetGroupBody',
                'Required parameter "createAssetGroupBody" was null or undefined when calling assetGroupCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("pinterest_oauth2", ["biz_access:read", "biz_access:write"]);
        }

        const response = await this.request({
            path: `/businesses/{business_id}/asset_groups`.replace(`{${"business_id"}}`, encodeURIComponent(String(requestParameters['businessId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateAssetGroupBodyToJSON(requestParameters['createAssetGroupBody']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateAssetGroupResponseFromJSON(jsonValue));
    }

    /**
     * Create a new asset group with the specified parameters. - An <a href=\"https://help.pinterest.com/en/business/article/asset-groups\">asset group</a> is a custom group of assets based on how you’d like to manage your accounts.
     * Create a new asset group.
     */
    async assetGroupCreate(requestParameters: AssetGroupCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateAssetGroupResponse> {
        const response = await this.assetGroupCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a batch of asset groups.
     * Delete asset groups.
     */
    async assetGroupDeleteRaw(requestParameters: AssetGroupDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteAssetGroupResponse>> {
        if (requestParameters['businessId'] == null) {
            throw new runtime.RequiredError(
                'businessId',
                'Required parameter "businessId" was null or undefined when calling assetGroupDelete().'
            );
        }

        if (requestParameters['deleteAssetGroupBody'] == null) {
            throw new runtime.RequiredError(
                'deleteAssetGroupBody',
                'Required parameter "deleteAssetGroupBody" was null or undefined when calling assetGroupDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("pinterest_oauth2", ["biz_access:read", "biz_access:write"]);
        }

        const response = await this.request({
            path: `/businesses/{business_id}/asset_groups`.replace(`{${"business_id"}}`, encodeURIComponent(String(requestParameters['businessId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: DeleteAssetGroupBodyToJSON(requestParameters['deleteAssetGroupBody']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteAssetGroupResponseFromJSON(jsonValue));
    }

    /**
     * Delete a batch of asset groups.
     * Delete asset groups.
     */
    async assetGroupDelete(requestParameters: AssetGroupDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteAssetGroupResponse> {
        const response = await this.assetGroupDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a batch of asset groups with the specified parameters.
     * Update asset groups.
     */
    async assetGroupUpdateRaw(requestParameters: AssetGroupUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateAssetGroupResponse>> {
        if (requestParameters['businessId'] == null) {
            throw new runtime.RequiredError(
                'businessId',
                'Required parameter "businessId" was null or undefined when calling assetGroupUpdate().'
            );
        }

        if (requestParameters['updateAssetGroupBody'] == null) {
            throw new runtime.RequiredError(
                'updateAssetGroupBody',
                'Required parameter "updateAssetGroupBody" was null or undefined when calling assetGroupUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("pinterest_oauth2", ["biz_access:read", "biz_access:write"]);
        }

        const response = await this.request({
            path: `/businesses/{business_id}/asset_groups`.replace(`{${"business_id"}}`, encodeURIComponent(String(requestParameters['businessId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateAssetGroupBodyToJSON(requestParameters['updateAssetGroupBody']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateAssetGroupResponseFromJSON(jsonValue));
    }

    /**
     * Update a batch of asset groups with the specified parameters.
     * Update asset groups.
     */
    async assetGroupUpdate(requestParameters: AssetGroupUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateAssetGroupResponse> {
        const response = await this.assetGroupUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all the members the requesting business has granted access to on the given asset.
     * Get members with access to asset
     */
    async businessAssetMembersGetRaw(requestParameters: BusinessAssetMembersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BusinessAssetMembersGet200Response>> {
        if (requestParameters['businessId'] == null) {
            throw new runtime.RequiredError(
                'businessId',
                'Required parameter "businessId" was null or undefined when calling businessAssetMembersGet().'
            );
        }

        if (requestParameters['assetId'] == null) {
            throw new runtime.RequiredError(
                'assetId',
                'Required parameter "assetId" was null or undefined when calling businessAssetMembersGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['bookmark'] != null) {
            queryParameters['bookmark'] = requestParameters['bookmark'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        if (requestParameters['startIndex'] != null) {
            queryParameters['start_index'] = requestParameters['startIndex'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("pinterest_oauth2", ["biz_access:read"]);
        }

        const response = await this.request({
            path: `/businesses/{business_id}/assets/{asset_id}/members`.replace(`{${"business_id"}}`, encodeURIComponent(String(requestParameters['businessId']))).replace(`{${"asset_id"}}`, encodeURIComponent(String(requestParameters['assetId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BusinessAssetMembersGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get all the members the requesting business has granted access to on the given asset.
     * Get members with access to asset
     */
    async businessAssetMembersGet(requestParameters: BusinessAssetMembersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BusinessAssetMembersGet200Response> {
        const response = await this.businessAssetMembersGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all the partners the requesting business has granted access to on the given asset. Note: If the asset has been shared with you, an empty array will be returned. This is because an asset shared with you cannot be shared with a different partner.
     * Get partners with access to asset
     */
    async businessAssetPartnersGetRaw(requestParameters: BusinessAssetPartnersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BusinessAssetPartnersGet200Response>> {
        if (requestParameters['businessId'] == null) {
            throw new runtime.RequiredError(
                'businessId',
                'Required parameter "businessId" was null or undefined when calling businessAssetPartnersGet().'
            );
        }

        if (requestParameters['assetId'] == null) {
            throw new runtime.RequiredError(
                'assetId',
                'Required parameter "assetId" was null or undefined when calling businessAssetPartnersGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['startIndex'] != null) {
            queryParameters['start_index'] = requestParameters['startIndex'];
        }

        if (requestParameters['bookmark'] != null) {
            queryParameters['bookmark'] = requestParameters['bookmark'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("pinterest_oauth2", ["biz_access:read"]);
        }

        const response = await this.request({
            path: `/businesses/{business_id}/assets/{asset_id}/partners`.replace(`{${"business_id"}}`, encodeURIComponent(String(requestParameters['businessId']))).replace(`{${"asset_id"}}`, encodeURIComponent(String(requestParameters['assetId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BusinessAssetPartnersGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get all the partners the requesting business has granted access to on the given asset. Note: If the asset has been shared with you, an empty array will be returned. This is because an asset shared with you cannot be shared with a different partner.
     * Get partners with access to asset
     */
    async businessAssetPartnersGet(requestParameters: BusinessAssetPartnersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BusinessAssetPartnersGet200Response> {
        const response = await this.businessAssetPartnersGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all the assets the requesting business has access to. This includes assets the business owns and assets the business has access to through partnerships.
     * List business assets
     */
    async businessAssetsGetRaw(requestParameters: BusinessAssetsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BusinessAssetsGet200Response>> {
        if (requestParameters['businessId'] == null) {
            throw new runtime.RequiredError(
                'businessId',
                'Required parameter "businessId" was null or undefined when calling businessAssetsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['permissions'] != null) {
            queryParameters['permissions'] = requestParameters['permissions'];
        }

        if (requestParameters['childAssetId'] != null) {
            queryParameters['child_asset_id'] = requestParameters['childAssetId'];
        }

        if (requestParameters['assetGroupId'] != null) {
            queryParameters['asset_group_id'] = requestParameters['assetGroupId'];
        }

        if (requestParameters['assetType'] != null) {
            queryParameters['asset_type'] = requestParameters['assetType'];
        }

        if (requestParameters['startIndex'] != null) {
            queryParameters['start_index'] = requestParameters['startIndex'];
        }

        if (requestParameters['bookmark'] != null) {
            queryParameters['bookmark'] = requestParameters['bookmark'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("pinterest_oauth2", ["biz_access:read"]);
        }

        const response = await this.request({
            path: `/businesses/{business_id}/assets`.replace(`{${"business_id"}}`, encodeURIComponent(String(requestParameters['businessId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BusinessAssetsGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get all the assets the requesting business has access to. This includes assets the business owns and assets the business has access to through partnerships.
     * List business assets
     */
    async businessAssetsGet(requestParameters: BusinessAssetsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BusinessAssetsGet200Response> {
        const response = await this.businessAssetsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get assets on which you assigned asset permissions to the given member. Can be used to: - get all assets, regardless of asset type or - get assets of one asset type by using the asset_type query. The return response will include the permissions the member has to that asset and the asset type.
     * Get assets assigned to a member
     */
    async businessMemberAssetsGetRaw(requestParameters: BusinessMemberAssetsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BusinessMemberAssetsGet200Response>> {
        if (requestParameters['businessId'] == null) {
            throw new runtime.RequiredError(
                'businessId',
                'Required parameter "businessId" was null or undefined when calling businessMemberAssetsGet().'
            );
        }

        if (requestParameters['memberId'] == null) {
            throw new runtime.RequiredError(
                'memberId',
                'Required parameter "memberId" was null or undefined when calling businessMemberAssetsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['assetType'] != null) {
            queryParameters['asset_type'] = requestParameters['assetType'];
        }

        if (requestParameters['startIndex'] != null) {
            queryParameters['start_index'] = requestParameters['startIndex'];
        }

        if (requestParameters['bookmark'] != null) {
            queryParameters['bookmark'] = requestParameters['bookmark'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("pinterest_oauth2", ["biz_access:read"]);
        }

        const response = await this.request({
            path: `/businesses/{business_id}/members/{member_id}/assets`.replace(`{${"business_id"}}`, encodeURIComponent(String(requestParameters['businessId']))).replace(`{${"member_id"}}`, encodeURIComponent(String(requestParameters['memberId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BusinessMemberAssetsGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get assets on which you assigned asset permissions to the given member. Can be used to: - get all assets, regardless of asset type or - get assets of one asset type by using the asset_type query. The return response will include the permissions the member has to that asset and the asset type.
     * Get assets assigned to a member
     */
    async businessMemberAssetsGet(requestParameters: BusinessMemberAssetsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BusinessMemberAssetsGet200Response> {
        const response = await this.businessMemberAssetsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Terminate multiple members\' access to an asset.
     * Delete member access to asset
     */
    async businessMembersAssetAccessDeleteRaw(requestParameters: BusinessMembersAssetAccessDeleteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteMemberAccessResultsResponseArray>> {
        if (requestParameters['businessId'] == null) {
            throw new runtime.RequiredError(
                'businessId',
                'Required parameter "businessId" was null or undefined when calling businessMembersAssetAccessDelete().'
            );
        }

        if (requestParameters['businessMembersAssetAccessDeleteRequest'] == null) {
            throw new runtime.RequiredError(
                'businessMembersAssetAccessDeleteRequest',
                'Required parameter "businessMembersAssetAccessDeleteRequest" was null or undefined when calling businessMembersAssetAccessDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("pinterest_oauth2", ["biz_access:write"]);
        }

        const response = await this.request({
            path: `/businesses/{business_id}/members/assets/access`.replace(`{${"business_id"}}`, encodeURIComponent(String(requestParameters['businessId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: BusinessMembersAssetAccessDeleteRequestToJSON(requestParameters['businessMembersAssetAccessDeleteRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteMemberAccessResultsResponseArrayFromJSON(jsonValue));
    }

    /**
     * Terminate multiple members\' access to an asset.
     * Delete member access to asset
     */
    async businessMembersAssetAccessDelete(requestParameters: BusinessMembersAssetAccessDeleteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteMemberAccessResultsResponseArray> {
        const response = await this.businessMembersAssetAccessDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Grant multiple members access to assets and/or update multiple member\'s exisiting permissions to an asset. Note: Not all listed permissions are applicable to each asset type. For example, PROFILE_PUBLISHER would not be applicable to an asset of type AD_ACCOUNT. The permission level PROFILE_PUBLISHER is only available to an asset of the type PROFILE. 
     * Assign/Update member asset permissions
     */
    async businessMembersAssetAccessUpdateRaw(requestParameters: BusinessMembersAssetAccessUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateMemberAssetsResultsResponseArray>> {
        if (requestParameters['businessId'] == null) {
            throw new runtime.RequiredError(
                'businessId',
                'Required parameter "businessId" was null or undefined when calling businessMembersAssetAccessUpdate().'
            );
        }

        if (requestParameters['updateMemberAssetAccessBody'] == null) {
            throw new runtime.RequiredError(
                'updateMemberAssetAccessBody',
                'Required parameter "updateMemberAssetAccessBody" was null or undefined when calling businessMembersAssetAccessUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("pinterest_oauth2", ["biz_access:write"]);
        }

        const response = await this.request({
            path: `/businesses/{business_id}/members/assets/access`.replace(`{${"business_id"}}`, encodeURIComponent(String(requestParameters['businessId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateMemberAssetAccessBodyToJSON(requestParameters['updateMemberAssetAccessBody']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateMemberAssetsResultsResponseArrayFromJSON(jsonValue));
    }

    /**
     * Grant multiple members access to assets and/or update multiple member\'s exisiting permissions to an asset. Note: Not all listed permissions are applicable to each asset type. For example, PROFILE_PUBLISHER would not be applicable to an asset of type AD_ACCOUNT. The permission level PROFILE_PUBLISHER is only available to an asset of the type PROFILE. 
     * Assign/Update member asset permissions
     */
    async businessMembersAssetAccessUpdate(requestParameters: BusinessMembersAssetAccessUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateMemberAssetsResultsResponseArray> {
        const response = await this.businessMembersAssetAccessUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Can be used to get the business assets your partner has granted you access to or the business assets you have granted your partner access to. If you specify: - partner_type=INTERNAL, you will retrieve your business assets that the partner has access to. - partner_type=EXTERNAL, you will retrieve the partner\'s business assets that the partner has granted you access to.
     * Get assets assigned to a partner or assets assigned by a partner
     */
    async businessPartnerAssetAccessGetRaw(requestParameters: BusinessPartnerAssetAccessGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BusinessPartnerAssetAccessGet200Response>> {
        if (requestParameters['businessId'] == null) {
            throw new runtime.RequiredError(
                'businessId',
                'Required parameter "businessId" was null or undefined when calling businessPartnerAssetAccessGet().'
            );
        }

        if (requestParameters['partnerId'] == null) {
            throw new runtime.RequiredError(
                'partnerId',
                'Required parameter "partnerId" was null or undefined when calling businessPartnerAssetAccessGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['partnerType'] != null) {
            queryParameters['partner_type'] = requestParameters['partnerType'];
        }

        if (requestParameters['assetType'] != null) {
            queryParameters['asset_type'] = requestParameters['assetType'];
        }

        if (requestParameters['startIndex'] != null) {
            queryParameters['start_index'] = requestParameters['startIndex'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        if (requestParameters['bookmark'] != null) {
            queryParameters['bookmark'] = requestParameters['bookmark'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("pinterest_oauth2", ["biz_access:read"]);
        }

        const response = await this.request({
            path: `/businesses/{business_id}/partners/{partner_id}/assets`.replace(`{${"business_id"}}`, encodeURIComponent(String(requestParameters['businessId']))).replace(`{${"partner_id"}}`, encodeURIComponent(String(requestParameters['partnerId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BusinessPartnerAssetAccessGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Can be used to get the business assets your partner has granted you access to or the business assets you have granted your partner access to. If you specify: - partner_type=INTERNAL, you will retrieve your business assets that the partner has access to. - partner_type=EXTERNAL, you will retrieve the partner\'s business assets that the partner has granted you access to.
     * Get assets assigned to a partner or assets assigned by a partner
     */
    async businessPartnerAssetAccessGet(requestParameters: BusinessPartnerAssetAccessGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BusinessPartnerAssetAccessGet200Response> {
        const response = await this.businessPartnerAssetAccessGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Terminate multiple partners\' access to an asset. If - partner_type=INTERNAL: You will terminate a partner\'s asset access to your business assets. - partner_type=EXTERNAL: You will terminate your own access to your partner\'s business assets.
     * Delete partner access to asset
     */
    async deletePartnerAssetAccessHandlerImplRaw(requestParameters: DeletePartnerAssetAccessHandlerImplRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeletePartnerAssetsResultsResponseArray>> {
        if (requestParameters['businessId'] == null) {
            throw new runtime.RequiredError(
                'businessId',
                'Required parameter "businessId" was null or undefined when calling deletePartnerAssetAccessHandlerImpl().'
            );
        }

        if (requestParameters['deletePartnerAssetAccessBody'] == null) {
            throw new runtime.RequiredError(
                'deletePartnerAssetAccessBody',
                'Required parameter "deletePartnerAssetAccessBody" was null or undefined when calling deletePartnerAssetAccessHandlerImpl().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("pinterest_oauth2", ["biz_access:write"]);
        }

        const response = await this.request({
            path: `/businesses/{business_id}/partners/assets`.replace(`{${"business_id"}}`, encodeURIComponent(String(requestParameters['businessId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: DeletePartnerAssetAccessBodyToJSON(requestParameters['deletePartnerAssetAccessBody']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeletePartnerAssetsResultsResponseArrayFromJSON(jsonValue));
    }

    /**
     * Terminate multiple partners\' access to an asset. If - partner_type=INTERNAL: You will terminate a partner\'s asset access to your business assets. - partner_type=EXTERNAL: You will terminate your own access to your partner\'s business assets.
     * Delete partner access to asset
     */
    async deletePartnerAssetAccessHandlerImpl(requestParameters: DeletePartnerAssetAccessHandlerImplRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeletePartnerAssetsResultsResponseArray> {
        const response = await this.deletePartnerAssetAccessHandlerImplRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Grant multiple partners access to assets and/or update multiple partner\'s exisiting permissions to an asset. If your partner already had permissions on the asset, they will be overriden with the new permissions you assign to them. To learn more about permission levels, visit https://help.pinterest.com/en/business/article/business-manager-overview  Note: Not all listed permissions are applicable to each asset type. For example, PROFILE_PUBLISHER would not be applicable to an asset of type AD_ACCOUNT. The permission level PROFILE_PUBLISHER is only available to an asset of the type PROFILE.
     * Assign/Update partner asset permissions
     */
    async updatePartnerAssetAccessHandlerImplRaw(requestParameters: UpdatePartnerAssetAccessHandlerImplRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdatePartnerAssetsResultsResponseArray>> {
        if (requestParameters['businessId'] == null) {
            throw new runtime.RequiredError(
                'businessId',
                'Required parameter "businessId" was null or undefined when calling updatePartnerAssetAccessHandlerImpl().'
            );
        }

        if (requestParameters['updatePartnerAssetAccessBody'] == null) {
            throw new runtime.RequiredError(
                'updatePartnerAssetAccessBody',
                'Required parameter "updatePartnerAssetAccessBody" was null or undefined when calling updatePartnerAssetAccessHandlerImpl().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("pinterest_oauth2", ["biz_access:write"]);
        }

        const response = await this.request({
            path: `/businesses/{business_id}/partners/assets`.replace(`{${"business_id"}}`, encodeURIComponent(String(requestParameters['businessId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdatePartnerAssetAccessBodyToJSON(requestParameters['updatePartnerAssetAccessBody']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdatePartnerAssetsResultsResponseArrayFromJSON(jsonValue));
    }

    /**
     * Grant multiple partners access to assets and/or update multiple partner\'s exisiting permissions to an asset. If your partner already had permissions on the asset, they will be overriden with the new permissions you assign to them. To learn more about permission levels, visit https://help.pinterest.com/en/business/article/business-manager-overview  Note: Not all listed permissions are applicable to each asset type. For example, PROFILE_PUBLISHER would not be applicable to an asset of type AD_ACCOUNT. The permission level PROFILE_PUBLISHER is only available to an asset of the type PROFILE.
     * Assign/Update partner asset permissions
     */
    async updatePartnerAssetAccessHandlerImpl(requestParameters: UpdatePartnerAssetAccessHandlerImplRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdatePartnerAssetsResultsResponseArray> {
        const response = await this.updatePartnerAssetAccessHandlerImplRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const BusinessAssetsGetAssetTypeEnum = {
    AdAccount: 'AD_ACCOUNT',
    Profile: 'PROFILE',
    AssetGroup: 'ASSET_GROUP'
} as const;
export type BusinessAssetsGetAssetTypeEnum = typeof BusinessAssetsGetAssetTypeEnum[keyof typeof BusinessAssetsGetAssetTypeEnum];
/**
 * @export
 */
export const BusinessMemberAssetsGetAssetTypeEnum = {
    AdAccount: 'AD_ACCOUNT',
    Profile: 'PROFILE',
    AssetGroup: 'ASSET_GROUP'
} as const;
export type BusinessMemberAssetsGetAssetTypeEnum = typeof BusinessMemberAssetsGetAssetTypeEnum[keyof typeof BusinessMemberAssetsGetAssetTypeEnum];
/**
 * @export
 */
export const BusinessPartnerAssetAccessGetAssetTypeEnum = {
    AdAccount: 'AD_ACCOUNT',
    Profile: 'PROFILE',
    AssetGroup: 'ASSET_GROUP'
} as const;
export type BusinessPartnerAssetAccessGetAssetTypeEnum = typeof BusinessPartnerAssetAccessGetAssetTypeEnum[keyof typeof BusinessPartnerAssetAccessGetAssetTypeEnum];
