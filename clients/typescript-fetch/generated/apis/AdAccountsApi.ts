/* tslint:disable */
/* eslint-disable */
/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AdAccount,
  AdAccountAnalyticsResponseInner,
  AdAccountCreateRequest,
  AdAccountsList200Response,
  AdsAnalyticsCreateAsyncRequest,
  AdsAnalyticsCreateAsyncResponse,
  AdsAnalyticsGetAsyncResponse,
  AdsAnalyticsTargetingType,
  ConversionReportAttributionType,
  CreateMMMReportRequest,
  CreateMMMReportResponse,
  GetMMMReportResponse,
  Granularity,
  MetricsResponse,
  TemplatesList200Response,
} from '../models/index';
import {
    AdAccountFromJSON,
    AdAccountToJSON,
    AdAccountAnalyticsResponseInnerFromJSON,
    AdAccountAnalyticsResponseInnerToJSON,
    AdAccountCreateRequestFromJSON,
    AdAccountCreateRequestToJSON,
    AdAccountsList200ResponseFromJSON,
    AdAccountsList200ResponseToJSON,
    AdsAnalyticsCreateAsyncRequestFromJSON,
    AdsAnalyticsCreateAsyncRequestToJSON,
    AdsAnalyticsCreateAsyncResponseFromJSON,
    AdsAnalyticsCreateAsyncResponseToJSON,
    AdsAnalyticsGetAsyncResponseFromJSON,
    AdsAnalyticsGetAsyncResponseToJSON,
    AdsAnalyticsTargetingTypeFromJSON,
    AdsAnalyticsTargetingTypeToJSON,
    ConversionReportAttributionTypeFromJSON,
    ConversionReportAttributionTypeToJSON,
    CreateMMMReportRequestFromJSON,
    CreateMMMReportRequestToJSON,
    CreateMMMReportResponseFromJSON,
    CreateMMMReportResponseToJSON,
    GetMMMReportResponseFromJSON,
    GetMMMReportResponseToJSON,
    GranularityFromJSON,
    GranularityToJSON,
    MetricsResponseFromJSON,
    MetricsResponseToJSON,
    TemplatesList200ResponseFromJSON,
    TemplatesList200ResponseToJSON,
} from '../models/index';

export interface AdAccountAnalyticsRequest {
    adAccountId: string;
    startDate: Date;
    endDate: Date;
    columns: Array<AdAccountAnalyticsColumnsEnum>;
    granularity: Granularity;
    clickWindowDays?: AdAccountAnalyticsClickWindowDaysEnum;
    engagementWindowDays?: AdAccountAnalyticsEngagementWindowDaysEnum;
    viewWindowDays?: AdAccountAnalyticsViewWindowDaysEnum;
    conversionReportTime?: AdAccountAnalyticsConversionReportTimeEnum;
}

export interface AdAccountTargetingAnalyticsGetRequest {
    adAccountId: string;
    startDate: Date;
    endDate: Date;
    targetingTypes: Array<AdsAnalyticsTargetingType>;
    columns: Array<AdAccountTargetingAnalyticsGetColumnsEnum>;
    granularity: Granularity;
    clickWindowDays?: AdAccountTargetingAnalyticsGetClickWindowDaysEnum;
    engagementWindowDays?: AdAccountTargetingAnalyticsGetEngagementWindowDaysEnum;
    viewWindowDays?: AdAccountTargetingAnalyticsGetViewWindowDaysEnum;
    conversionReportTime?: AdAccountTargetingAnalyticsGetConversionReportTimeEnum;
    attributionTypes?: ConversionReportAttributionType;
}

export interface AdAccountsCreateRequest {
    adAccountCreateRequest: AdAccountCreateRequest;
}

export interface AdAccountsGetRequest {
    adAccountId: string;
}

export interface AdAccountsListRequest {
    bookmark?: string;
    pageSize?: number;
    includeSharedAccounts?: boolean;
}

export interface AnalyticsCreateMmmReportRequest {
    adAccountId: string;
    createMMMReportRequest: CreateMMMReportRequest;
}

export interface AnalyticsCreateReportRequest {
    adAccountId: string;
    adsAnalyticsCreateAsyncRequest: AdsAnalyticsCreateAsyncRequest;
}

export interface AnalyticsCreateTemplateReportRequest {
    adAccountId: string;
    templateId: string;
    startDate?: Date;
    endDate?: Date;
    granularity?: Granularity;
}

export interface AnalyticsGetMmmReportRequest {
    adAccountId: string;
    token: string;
}

export interface AnalyticsGetReportRequest {
    adAccountId: string;
    token: string;
}

export interface SandboxDeleteRequest {
    adAccountId: string;
}

export interface TemplatesListRequest {
    adAccountId: string;
    pageSize?: number;
    order?: TemplatesListOrderEnum;
    bookmark?: string;
}

/**
 * 
 */
export class AdAccountsApi extends runtime.BaseAPI {

    /**
     * Get analytics for the specified <code>ad_account_id</code>, filtered by the specified options. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager. - If granularity is not HOUR, the furthest back you can are allowed to pull data is 90 days before the current date in UTC time and the max time range supported is 90 days. - If granularity is HOUR, the furthest back you can are allowed to pull data is 8 days before the current date in UTC time.
     * Get ad account analytics
     */
    async adAccountAnalyticsRaw(requestParameters: AdAccountAnalyticsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AdAccountAnalyticsResponseInner>>> {
        if (requestParameters['adAccountId'] == null) {
            throw new runtime.RequiredError(
                'adAccountId',
                'Required parameter "adAccountId" was null or undefined when calling adAccountAnalytics().'
            );
        }

        if (requestParameters['startDate'] == null) {
            throw new runtime.RequiredError(
                'startDate',
                'Required parameter "startDate" was null or undefined when calling adAccountAnalytics().'
            );
        }

        if (requestParameters['endDate'] == null) {
            throw new runtime.RequiredError(
                'endDate',
                'Required parameter "endDate" was null or undefined when calling adAccountAnalytics().'
            );
        }

        if (requestParameters['columns'] == null) {
            throw new runtime.RequiredError(
                'columns',
                'Required parameter "columns" was null or undefined when calling adAccountAnalytics().'
            );
        }

        if (requestParameters['granularity'] == null) {
            throw new runtime.RequiredError(
                'granularity',
                'Required parameter "granularity" was null or undefined when calling adAccountAnalytics().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['startDate'] != null) {
            queryParameters['start_date'] = (requestParameters['startDate'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['end_date'] = (requestParameters['endDate'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['columns'] != null) {
            queryParameters['columns'] = requestParameters['columns']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['granularity'] != null) {
            queryParameters['granularity'] = requestParameters['granularity'];
        }

        if (requestParameters['clickWindowDays'] != null) {
            queryParameters['click_window_days'] = requestParameters['clickWindowDays'];
        }

        if (requestParameters['engagementWindowDays'] != null) {
            queryParameters['engagement_window_days'] = requestParameters['engagementWindowDays'];
        }

        if (requestParameters['viewWindowDays'] != null) {
            queryParameters['view_window_days'] = requestParameters['viewWindowDays'];
        }

        if (requestParameters['conversionReportTime'] != null) {
            queryParameters['conversion_report_time'] = requestParameters['conversionReportTime'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("pinterest_oauth2", ["ads:read"]);
        }

        const response = await this.request({
            path: `/ad_accounts/{ad_account_id}/analytics`.replace(`{${"ad_account_id"}}`, encodeURIComponent(String(requestParameters['adAccountId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AdAccountAnalyticsResponseInnerFromJSON));
    }

    /**
     * Get analytics for the specified <code>ad_account_id</code>, filtered by the specified options. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager. - If granularity is not HOUR, the furthest back you can are allowed to pull data is 90 days before the current date in UTC time and the max time range supported is 90 days. - If granularity is HOUR, the furthest back you can are allowed to pull data is 8 days before the current date in UTC time.
     * Get ad account analytics
     */
    async adAccountAnalytics(requestParameters: AdAccountAnalyticsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AdAccountAnalyticsResponseInner>> {
        const response = await this.adAccountAnalyticsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get targeting analytics for an ad account. For the requested account and metrics, the response will include the requested metric information (e.g. SPEND_IN_DOLLAR) for the requested target type (e.g. \"age_bucket\") for applicable values (e.g. \"45-49\"). <p/> - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager. - If granularity is not HOUR, the furthest back you can are allowed to pull data is 90 days before the current date in UTC time and the max time range supported is 90 days. - If granularity is HOUR, the furthest back you can are allowed to pull data is 8 days before the current date in UTC time and the max time range supported is 3 days.
     * Get targeting analytics for an ad account
     */
    async adAccountTargetingAnalyticsGetRaw(requestParameters: AdAccountTargetingAnalyticsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MetricsResponse>> {
        if (requestParameters['adAccountId'] == null) {
            throw new runtime.RequiredError(
                'adAccountId',
                'Required parameter "adAccountId" was null or undefined when calling adAccountTargetingAnalyticsGet().'
            );
        }

        if (requestParameters['startDate'] == null) {
            throw new runtime.RequiredError(
                'startDate',
                'Required parameter "startDate" was null or undefined when calling adAccountTargetingAnalyticsGet().'
            );
        }

        if (requestParameters['endDate'] == null) {
            throw new runtime.RequiredError(
                'endDate',
                'Required parameter "endDate" was null or undefined when calling adAccountTargetingAnalyticsGet().'
            );
        }

        if (requestParameters['targetingTypes'] == null) {
            throw new runtime.RequiredError(
                'targetingTypes',
                'Required parameter "targetingTypes" was null or undefined when calling adAccountTargetingAnalyticsGet().'
            );
        }

        if (requestParameters['columns'] == null) {
            throw new runtime.RequiredError(
                'columns',
                'Required parameter "columns" was null or undefined when calling adAccountTargetingAnalyticsGet().'
            );
        }

        if (requestParameters['granularity'] == null) {
            throw new runtime.RequiredError(
                'granularity',
                'Required parameter "granularity" was null or undefined when calling adAccountTargetingAnalyticsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['startDate'] != null) {
            queryParameters['start_date'] = (requestParameters['startDate'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['end_date'] = (requestParameters['endDate'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['targetingTypes'] != null) {
            queryParameters['targeting_types'] = requestParameters['targetingTypes']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['columns'] != null) {
            queryParameters['columns'] = requestParameters['columns']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['granularity'] != null) {
            queryParameters['granularity'] = requestParameters['granularity'];
        }

        if (requestParameters['clickWindowDays'] != null) {
            queryParameters['click_window_days'] = requestParameters['clickWindowDays'];
        }

        if (requestParameters['engagementWindowDays'] != null) {
            queryParameters['engagement_window_days'] = requestParameters['engagementWindowDays'];
        }

        if (requestParameters['viewWindowDays'] != null) {
            queryParameters['view_window_days'] = requestParameters['viewWindowDays'];
        }

        if (requestParameters['conversionReportTime'] != null) {
            queryParameters['conversion_report_time'] = requestParameters['conversionReportTime'];
        }

        if (requestParameters['attributionTypes'] != null) {
            queryParameters['attribution_types'] = requestParameters['attributionTypes'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("pinterest_oauth2", ["ads:read"]);
        }

        const response = await this.request({
            path: `/ad_accounts/{ad_account_id}/targeting_analytics`.replace(`{${"ad_account_id"}}`, encodeURIComponent(String(requestParameters['adAccountId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MetricsResponseFromJSON(jsonValue));
    }

    /**
     * Get targeting analytics for an ad account. For the requested account and metrics, the response will include the requested metric information (e.g. SPEND_IN_DOLLAR) for the requested target type (e.g. \"age_bucket\") for applicable values (e.g. \"45-49\"). <p/> - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager. - If granularity is not HOUR, the furthest back you can are allowed to pull data is 90 days before the current date in UTC time and the max time range supported is 90 days. - If granularity is HOUR, the furthest back you can are allowed to pull data is 8 days before the current date in UTC time and the max time range supported is 3 days.
     * Get targeting analytics for an ad account
     */
    async adAccountTargetingAnalyticsGet(requestParameters: AdAccountTargetingAnalyticsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MetricsResponse> {
        const response = await this.adAccountTargetingAnalyticsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new ad account. Different ad accounts can support different currencies, payment methods, etc. An ad account is needed to create campaigns, ad groups, and ads; other accounts (your employees or partners) can be assigned business access and appropriate roles to access an ad account. <p/> You can set up up to 50 ad accounts per user. (The user must have a business account to create an ad account.) <p/> For more, see <a class=\"reference external\" href=\"https://help.pinterest.com/en/business/article/create-an-advertiser-account\">Create an advertiser account</a>.
     * Create ad account
     */
    async adAccountsCreateRaw(requestParameters: AdAccountsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdAccount>> {
        if (requestParameters['adAccountCreateRequest'] == null) {
            throw new runtime.RequiredError(
                'adAccountCreateRequest',
                'Required parameter "adAccountCreateRequest" was null or undefined when calling adAccountsCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("pinterest_oauth2", ["ads:write"]);
        }

        const response = await this.request({
            path: `/ad_accounts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AdAccountCreateRequestToJSON(requestParameters['adAccountCreateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AdAccountFromJSON(jsonValue));
    }

    /**
     * Create a new ad account. Different ad accounts can support different currencies, payment methods, etc. An ad account is needed to create campaigns, ad groups, and ads; other accounts (your employees or partners) can be assigned business access and appropriate roles to access an ad account. <p/> You can set up up to 50 ad accounts per user. (The user must have a business account to create an ad account.) <p/> For more, see <a class=\"reference external\" href=\"https://help.pinterest.com/en/business/article/create-an-advertiser-account\">Create an advertiser account</a>.
     * Create ad account
     */
    async adAccountsCreate(requestParameters: AdAccountsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdAccount> {
        const response = await this.adAccountsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get an ad account
     * Get ad account
     */
    async adAccountsGetRaw(requestParameters: AdAccountsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdAccount>> {
        if (requestParameters['adAccountId'] == null) {
            throw new runtime.RequiredError(
                'adAccountId',
                'Required parameter "adAccountId" was null or undefined when calling adAccountsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("pinterest_oauth2", ["ads:read"]);
        }

        const response = await this.request({
            path: `/ad_accounts/{ad_account_id}`.replace(`{${"ad_account_id"}}`, encodeURIComponent(String(requestParameters['adAccountId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AdAccountFromJSON(jsonValue));
    }

    /**
     * Get an ad account
     * Get ad account
     */
    async adAccountsGet(requestParameters: AdAccountsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdAccount> {
        const response = await this.adAccountsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of the ad_accounts that the \"operation user_account\" has access to. - This includes ad_accounts they own and ad_accounts that are owned by others who have granted them <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>.
     * List ad accounts
     */
    async adAccountsListRaw(requestParameters: AdAccountsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdAccountsList200Response>> {
        const queryParameters: any = {};

        if (requestParameters['bookmark'] != null) {
            queryParameters['bookmark'] = requestParameters['bookmark'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        if (requestParameters['includeSharedAccounts'] != null) {
            queryParameters['include_shared_accounts'] = requestParameters['includeSharedAccounts'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("pinterest_oauth2", ["ads:read"]);
        }

        const response = await this.request({
            path: `/ad_accounts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AdAccountsList200ResponseFromJSON(jsonValue));
    }

    /**
     * Get a list of the ad_accounts that the \"operation user_account\" has access to. - This includes ad_accounts they own and ad_accounts that are owned by others who have granted them <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>.
     * List ad accounts
     */
    async adAccountsList(requestParameters: AdAccountsListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdAccountsList200Response> {
        const response = await this.adAccountsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This creates an asynchronous mmm report based on the given request. It returns a token that you can use to download the report when it is ready. NOTE: An additional limit of 5 queries per minute per advertiser applies to this endpoint while it\'s in beta release.
     * Create a request for a Marketing Mix Modeling (MMM) report
     */
    async analyticsCreateMmmReportRaw(requestParameters: AnalyticsCreateMmmReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateMMMReportResponse>> {
        if (requestParameters['adAccountId'] == null) {
            throw new runtime.RequiredError(
                'adAccountId',
                'Required parameter "adAccountId" was null or undefined when calling analyticsCreateMmmReport().'
            );
        }

        if (requestParameters['createMMMReportRequest'] == null) {
            throw new runtime.RequiredError(
                'createMMMReportRequest',
                'Required parameter "createMMMReportRequest" was null or undefined when calling analyticsCreateMmmReport().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("pinterest_oauth2", ["ads:read"]);
        }

        const response = await this.request({
            path: `/ad_accounts/{ad_account_id}/mmm_reports`.replace(`{${"ad_account_id"}}`, encodeURIComponent(String(requestParameters['adAccountId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateMMMReportRequestToJSON(requestParameters['createMMMReportRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateMMMReportResponseFromJSON(jsonValue));
    }

    /**
     * This creates an asynchronous mmm report based on the given request. It returns a token that you can use to download the report when it is ready. NOTE: An additional limit of 5 queries per minute per advertiser applies to this endpoint while it\'s in beta release.
     * Create a request for a Marketing Mix Modeling (MMM) report
     */
    async analyticsCreateMmmReport(requestParameters: AnalyticsCreateMmmReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateMMMReportResponse> {
        const response = await this.analyticsCreateMmmReportRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This returns a token that you can use to download the report when it is ready. Note that this endpoint requires the parameters to be passed as JSON-formatted in the request body. This endpoint does not support URL query parameters. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager. - If granularity is not HOUR, the furthest back you can are allowed to pull data is 914 days before the current date in UTC time and the max time range supported is 186 days. - If granularity is HOUR, the furthest back you can are allowed to pull data is 8 days before the current date in UTC time and the max time range supported is 3 days. - If level is PRODUCT_ITEM, the furthest back you can are allowed to pull data is 92 days before the current date in UTC time and the max time range supported is 31 days. - If level is PRODUCT_ITEM, ad_ids and ad_statuses parameters are not allowed. Any columns related to pin promotion and ad is not allowed either.
     * Create async request for an account analytics report
     */
    async analyticsCreateReportRaw(requestParameters: AnalyticsCreateReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdsAnalyticsCreateAsyncResponse>> {
        if (requestParameters['adAccountId'] == null) {
            throw new runtime.RequiredError(
                'adAccountId',
                'Required parameter "adAccountId" was null or undefined when calling analyticsCreateReport().'
            );
        }

        if (requestParameters['adsAnalyticsCreateAsyncRequest'] == null) {
            throw new runtime.RequiredError(
                'adsAnalyticsCreateAsyncRequest',
                'Required parameter "adsAnalyticsCreateAsyncRequest" was null or undefined when calling analyticsCreateReport().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("pinterest_oauth2", ["ads:read"]);
        }

        const response = await this.request({
            path: `/ad_accounts/{ad_account_id}/reports`.replace(`{${"ad_account_id"}}`, encodeURIComponent(String(requestParameters['adAccountId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AdsAnalyticsCreateAsyncRequestToJSON(requestParameters['adsAnalyticsCreateAsyncRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AdsAnalyticsCreateAsyncResponseFromJSON(jsonValue));
    }

    /**
     * This returns a token that you can use to download the report when it is ready. Note that this endpoint requires the parameters to be passed as JSON-formatted in the request body. This endpoint does not support URL query parameters. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager. - If granularity is not HOUR, the furthest back you can are allowed to pull data is 914 days before the current date in UTC time and the max time range supported is 186 days. - If granularity is HOUR, the furthest back you can are allowed to pull data is 8 days before the current date in UTC time and the max time range supported is 3 days. - If level is PRODUCT_ITEM, the furthest back you can are allowed to pull data is 92 days before the current date in UTC time and the max time range supported is 31 days. - If level is PRODUCT_ITEM, ad_ids and ad_statuses parameters are not allowed. Any columns related to pin promotion and ad is not allowed either.
     * Create async request for an account analytics report
     */
    async analyticsCreateReport(requestParameters: AnalyticsCreateReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdsAnalyticsCreateAsyncResponse> {
        const response = await this.analyticsCreateReportRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This takes a template ID and an optional custom timeframe and constructs an asynchronous report based on the template. It returns a token that you can use to download the report when it is ready.
     * Create async request for an analytics report using a template
     */
    async analyticsCreateTemplateReportRaw(requestParameters: AnalyticsCreateTemplateReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdsAnalyticsCreateAsyncResponse>> {
        if (requestParameters['adAccountId'] == null) {
            throw new runtime.RequiredError(
                'adAccountId',
                'Required parameter "adAccountId" was null or undefined when calling analyticsCreateTemplateReport().'
            );
        }

        if (requestParameters['templateId'] == null) {
            throw new runtime.RequiredError(
                'templateId',
                'Required parameter "templateId" was null or undefined when calling analyticsCreateTemplateReport().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['startDate'] != null) {
            queryParameters['start_date'] = (requestParameters['startDate'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['end_date'] = (requestParameters['endDate'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['granularity'] != null) {
            queryParameters['granularity'] = requestParameters['granularity'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("pinterest_oauth2", ["ads:read"]);
        }

        const response = await this.request({
            path: `/ad_accounts/{ad_account_id}/templates/{template_id}/reports`.replace(`{${"ad_account_id"}}`, encodeURIComponent(String(requestParameters['adAccountId']))).replace(`{${"template_id"}}`, encodeURIComponent(String(requestParameters['templateId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AdsAnalyticsCreateAsyncResponseFromJSON(jsonValue));
    }

    /**
     * This takes a template ID and an optional custom timeframe and constructs an asynchronous report based on the template. It returns a token that you can use to download the report when it is ready.
     * Create async request for an analytics report using a template
     */
    async analyticsCreateTemplateReport(requestParameters: AnalyticsCreateTemplateReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdsAnalyticsCreateAsyncResponse> {
        const response = await this.analyticsCreateTemplateReportRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get an mmm report for an ad account. This returns a URL to an mmm metrics report given a token returned from the create mmm report endpoint.
     * Get advertiser Marketing Mix Modeling (MMM) report.
     */
    async analyticsGetMmmReportRaw(requestParameters: AnalyticsGetMmmReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetMMMReportResponse>> {
        if (requestParameters['adAccountId'] == null) {
            throw new runtime.RequiredError(
                'adAccountId',
                'Required parameter "adAccountId" was null or undefined when calling analyticsGetMmmReport().'
            );
        }

        if (requestParameters['token'] == null) {
            throw new runtime.RequiredError(
                'token',
                'Required parameter "token" was null or undefined when calling analyticsGetMmmReport().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['token'] != null) {
            queryParameters['token'] = requestParameters['token'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("pinterest_oauth2", ["ads:read"]);
        }

        const response = await this.request({
            path: `/ad_accounts/{ad_account_id}/mmm_reports`.replace(`{${"ad_account_id"}}`, encodeURIComponent(String(requestParameters['adAccountId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetMMMReportResponseFromJSON(jsonValue));
    }

    /**
     * Get an mmm report for an ad account. This returns a URL to an mmm metrics report given a token returned from the create mmm report endpoint.
     * Get advertiser Marketing Mix Modeling (MMM) report.
     */
    async analyticsGetMmmReport(requestParameters: AnalyticsGetMmmReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetMMMReportResponse> {
        const response = await this.analyticsGetMmmReportRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This returns a URL to an analytics report given a token returned from the post request report creation call. You can use the URL to download the report. The link is valid for five minutes and the report is valid for one hour. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
     * Get the account analytics report created by the async call
     */
    async analyticsGetReportRaw(requestParameters: AnalyticsGetReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdsAnalyticsGetAsyncResponse>> {
        if (requestParameters['adAccountId'] == null) {
            throw new runtime.RequiredError(
                'adAccountId',
                'Required parameter "adAccountId" was null or undefined when calling analyticsGetReport().'
            );
        }

        if (requestParameters['token'] == null) {
            throw new runtime.RequiredError(
                'token',
                'Required parameter "token" was null or undefined when calling analyticsGetReport().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['token'] != null) {
            queryParameters['token'] = requestParameters['token'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("pinterest_oauth2", ["ads:read"]);
        }

        const response = await this.request({
            path: `/ad_accounts/{ad_account_id}/reports`.replace(`{${"ad_account_id"}}`, encodeURIComponent(String(requestParameters['adAccountId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AdsAnalyticsGetAsyncResponseFromJSON(jsonValue));
    }

    /**
     * This returns a URL to an analytics report given a token returned from the post request report creation call. You can use the URL to download the report. The link is valid for five minutes and the report is valid for one hour. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
     * Get the account analytics report created by the async call
     */
    async analyticsGetReport(requestParameters: AnalyticsGetReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdsAnalyticsGetAsyncResponse> {
        const response = await this.analyticsGetReportRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete an ad account and all the ads data associated with that account. A string message is returned indicating the status of the delete operation.  Note: This endpoint is only allowed in the Pinterest API Sandbox (https://api-sandbox.pinterest.com/v5). Go to /docs/developer-tools/sandbox/ for more information.
     * Delete ads data for ad account in API Sandbox
     */
    async sandboxDeleteRaw(requestParameters: SandboxDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['adAccountId'] == null) {
            throw new runtime.RequiredError(
                'adAccountId',
                'Required parameter "adAccountId" was null or undefined when calling sandboxDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("pinterest_oauth2", ["ads:write"]);
        }

        const response = await this.request({
            path: `/ad_accounts/{ad_account_id}/sandbox`.replace(`{${"ad_account_id"}}`, encodeURIComponent(String(requestParameters['adAccountId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Delete an ad account and all the ads data associated with that account. A string message is returned indicating the status of the delete operation.  Note: This endpoint is only allowed in the Pinterest API Sandbox (https://api-sandbox.pinterest.com/v5). Go to /docs/developer-tools/sandbox/ for more information.
     * Delete ads data for ad account in API Sandbox
     */
    async sandboxDelete(requestParameters: SandboxDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.sandboxDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets all Templates associated with an ad account ID.
     * List templates
     */
    async templatesListRaw(requestParameters: TemplatesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TemplatesList200Response>> {
        if (requestParameters['adAccountId'] == null) {
            throw new runtime.RequiredError(
                'adAccountId',
                'Required parameter "adAccountId" was null or undefined when calling templatesList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        if (requestParameters['order'] != null) {
            queryParameters['order'] = requestParameters['order'];
        }

        if (requestParameters['bookmark'] != null) {
            queryParameters['bookmark'] = requestParameters['bookmark'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("pinterest_oauth2", ["ads:read"]);
        }

        const response = await this.request({
            path: `/ad_accounts/{ad_account_id}/templates`.replace(`{${"ad_account_id"}}`, encodeURIComponent(String(requestParameters['adAccountId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TemplatesList200ResponseFromJSON(jsonValue));
    }

    /**
     * Gets all Templates associated with an ad account ID.
     * List templates
     */
    async templatesList(requestParameters: TemplatesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TemplatesList200Response> {
        const response = await this.templatesListRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const AdAccountAnalyticsColumnsEnum = {
    SpendInMicroDollar: 'SPEND_IN_MICRO_DOLLAR',
    PaidImpression: 'PAID_IMPRESSION',
    SpendInDollar: 'SPEND_IN_DOLLAR',
    CpcInMicroDollar: 'CPC_IN_MICRO_DOLLAR',
    EcpcInMicroDollar: 'ECPC_IN_MICRO_DOLLAR',
    EcpcInDollar: 'ECPC_IN_DOLLAR',
    Ctr: 'CTR',
    Ectr: 'ECTR',
    CampaignName: 'CAMPAIGN_NAME',
    PinId: 'PIN_ID',
    TotalEngagement: 'TOTAL_ENGAGEMENT',
    Engagement1: 'ENGAGEMENT_1',
    Engagement2: 'ENGAGEMENT_2',
    EcpeInDollar: 'ECPE_IN_DOLLAR',
    EngagementRate: 'ENGAGEMENT_RATE',
    EengagementRate: 'EENGAGEMENT_RATE',
    EcpmInMicroDollar: 'ECPM_IN_MICRO_DOLLAR',
    RepinRate: 'REPIN_RATE',
    Ctr2: 'CTR_2',
    CampaignId: 'CAMPAIGN_ID',
    AdvertiserId: 'ADVERTISER_ID',
    AdAccountId: 'AD_ACCOUNT_ID',
    PinPromotionId: 'PIN_PROMOTION_ID',
    AdId: 'AD_ID',
    AdGroupId: 'AD_GROUP_ID',
    CampaignEntityStatus: 'CAMPAIGN_ENTITY_STATUS',
    CampaignObjectiveType: 'CAMPAIGN_OBJECTIVE_TYPE',
    CpmInMicroDollar: 'CPM_IN_MICRO_DOLLAR',
    CpmInDollar: 'CPM_IN_DOLLAR',
    AdGroupEntityStatus: 'AD_GROUP_ENTITY_STATUS',
    OrderLineId: 'ORDER_LINE_ID',
    OrderLineName: 'ORDER_LINE_NAME',
    Clickthrough1: 'CLICKTHROUGH_1',
    Repin1: 'REPIN_1',
    Impression1: 'IMPRESSION_1',
    Impression1Gross: 'IMPRESSION_1_GROSS',
    Clickthrough1Gross: 'CLICKTHROUGH_1_GROSS',
    OutboundClick1: 'OUTBOUND_CLICK_1',
    Clickthrough2: 'CLICKTHROUGH_2',
    Repin2: 'REPIN_2',
    Impression2: 'IMPRESSION_2',
    OutboundClick2: 'OUTBOUND_CLICK_2',
    TotalClickthrough: 'TOTAL_CLICKTHROUGH',
    TotalImpression: 'TOTAL_IMPRESSION',
    TotalImpressionUser: 'TOTAL_IMPRESSION_USER',
    TotalImpressionFrequency: 'TOTAL_IMPRESSION_FREQUENCY',
    CostPerOutboundClickInDollar: 'COST_PER_OUTBOUND_CLICK_IN_DOLLAR',
    TotalEngagementSignup: 'TOTAL_ENGAGEMENT_SIGNUP',
    TotalEngagementCheckout: 'TOTAL_ENGAGEMENT_CHECKOUT',
    TotalEngagementLead: 'TOTAL_ENGAGEMENT_LEAD',
    TotalClickSignup: 'TOTAL_CLICK_SIGNUP',
    TotalClickCheckout: 'TOTAL_CLICK_CHECKOUT',
    TotalClickAddToCart: 'TOTAL_CLICK_ADD_TO_CART',
    TotalClickLead: 'TOTAL_CLICK_LEAD',
    TotalViewSignup: 'TOTAL_VIEW_SIGNUP',
    TotalViewCheckout: 'TOTAL_VIEW_CHECKOUT',
    TotalViewAddToCart: 'TOTAL_VIEW_ADD_TO_CART',
    TotalViewLead: 'TOTAL_VIEW_LEAD',
    TotalConversions: 'TOTAL_CONVERSIONS',
    TotalEngagementSignupValueInMicroDollar: 'TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR',
    TotalEngagementCheckoutValueInMicroDollar: 'TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalClickSignupValueInMicroDollar: 'TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR',
    TotalClickCheckoutValueInMicroDollar: 'TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalViewSignupValueInMicroDollar: 'TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR',
    TotalViewCheckoutValueInMicroDollar: 'TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalWebSessions: 'TOTAL_WEB_SESSIONS',
    WebSessions1: 'WEB_SESSIONS_1',
    WebSessions2: 'WEB_SESSIONS_2',
    CampaignLifetimeSpendCap: 'CAMPAIGN_LIFETIME_SPEND_CAP',
    CampaignDailySpendCap: 'CAMPAIGN_DAILY_SPEND_CAP',
    TotalPageVisit: 'TOTAL_PAGE_VISIT',
    TotalSignup: 'TOTAL_SIGNUP',
    TotalCheckout: 'TOTAL_CHECKOUT',
    TotalCustom: 'TOTAL_CUSTOM',
    TotalLead: 'TOTAL_LEAD',
    TotalSignupValueInMicroDollar: 'TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR',
    TotalCheckoutValueInMicroDollar: 'TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalCustomValueInMicroDollar: 'TOTAL_CUSTOM_VALUE_IN_MICRO_DOLLAR',
    PageVisitCostPerAction: 'PAGE_VISIT_COST_PER_ACTION',
    PageVisitRoas: 'PAGE_VISIT_ROAS',
    CheckoutRoas: 'CHECKOUT_ROAS',
    CustomRoas: 'CUSTOM_ROAS',
    VideoMrcViews1: 'VIDEO_MRC_VIEWS_1',
    Video3SecViews2: 'VIDEO_3SEC_VIEWS_2',
    VideoP100Complete2: 'VIDEO_P100_COMPLETE_2',
    VideoP0Combined2: 'VIDEO_P0_COMBINED_2',
    VideoP25Combined2: 'VIDEO_P25_COMBINED_2',
    VideoP50Combined2: 'VIDEO_P50_COMBINED_2',
    VideoP75Combined2: 'VIDEO_P75_COMBINED_2',
    VideoP95Combined2: 'VIDEO_P95_COMBINED_2',
    VideoMrcViews2: 'VIDEO_MRC_VIEWS_2',
    PaidVideoViewableRate: 'PAID_VIDEO_VIEWABLE_RATE',
    VideoLength: 'VIDEO_LENGTH',
    EcpvInDollar: 'ECPV_IN_DOLLAR',
    EcpcvInDollar: 'ECPCV_IN_DOLLAR',
    EcpcvP95InDollar: 'ECPCV_P95_IN_DOLLAR',
    TotalVideo3SecViews: 'TOTAL_VIDEO_3SEC_VIEWS',
    TotalVideoP100Complete: 'TOTAL_VIDEO_P100_COMPLETE',
    TotalVideoP0Combined: 'TOTAL_VIDEO_P0_COMBINED',
    TotalVideoP25Combined: 'TOTAL_VIDEO_P25_COMBINED',
    TotalVideoP50Combined: 'TOTAL_VIDEO_P50_COMBINED',
    TotalVideoP75Combined: 'TOTAL_VIDEO_P75_COMBINED',
    TotalVideoP95Combined: 'TOTAL_VIDEO_P95_COMBINED',
    TotalVideoMrcViews: 'TOTAL_VIDEO_MRC_VIEWS',
    TotalVideoAvgWatchtimeInSecond: 'TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND',
    TotalRepinRate: 'TOTAL_REPIN_RATE',
    WebCheckoutCostPerAction: 'WEB_CHECKOUT_COST_PER_ACTION',
    WebCheckoutRoas: 'WEB_CHECKOUT_ROAS',
    TotalWebCheckout: 'TOTAL_WEB_CHECKOUT',
    TotalWebCheckoutValueInMicroDollar: 'TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalWebClickCheckout: 'TOTAL_WEB_CLICK_CHECKOUT',
    TotalWebClickCheckoutValueInMicroDollar: 'TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalWebEngagementCheckout: 'TOTAL_WEB_ENGAGEMENT_CHECKOUT',
    TotalWebEngagementCheckoutValueInMicroDollar: 'TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalWebViewCheckout: 'TOTAL_WEB_VIEW_CHECKOUT',
    TotalWebViewCheckoutValueInMicroDollar: 'TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    InappCheckoutCostPerAction: 'INAPP_CHECKOUT_COST_PER_ACTION',
    TotalOfflineCheckout: 'TOTAL_OFFLINE_CHECKOUT',
    IdeaPinProductTagVisit1: 'IDEA_PIN_PRODUCT_TAG_VISIT_1',
    IdeaPinProductTagVisit2: 'IDEA_PIN_PRODUCT_TAG_VISIT_2',
    TotalIdeaPinProductTagVisit: 'TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT',
    Leads: 'LEADS',
    CostPerLead: 'COST_PER_LEAD',
    QuizCompleted: 'QUIZ_COMPLETED',
    QuizPinResultOpen: 'QUIZ_PIN_RESULT_OPEN',
    QuizCompletionRate: 'QUIZ_COMPLETION_RATE',
    ShowcasePinClickthrough: 'SHOWCASE_PIN_CLICKTHROUGH',
    ShowcaseSubpageClickthrough: 'SHOWCASE_SUBPAGE_CLICKTHROUGH',
    ShowcaseSubpinClickthrough: 'SHOWCASE_SUBPIN_CLICKTHROUGH',
    ShowcaseSubpageImpression: 'SHOWCASE_SUBPAGE_IMPRESSION',
    ShowcaseSubpinImpression: 'SHOWCASE_SUBPIN_IMPRESSION',
    ShowcaseSubpageSwipeLeft: 'SHOWCASE_SUBPAGE_SWIPE_LEFT',
    ShowcaseSubpageSwipeRight: 'SHOWCASE_SUBPAGE_SWIPE_RIGHT',
    ShowcaseSubpinSwipeLeft: 'SHOWCASE_SUBPIN_SWIPE_LEFT',
    ShowcaseSubpinSwipeRight: 'SHOWCASE_SUBPIN_SWIPE_RIGHT',
    ShowcaseSubpageRepin: 'SHOWCASE_SUBPAGE_REPIN',
    ShowcaseSubpinRepin: 'SHOWCASE_SUBPIN_REPIN',
    ShowcaseSubpageCloseup: 'SHOWCASE_SUBPAGE_CLOSEUP',
    ShowcaseCardThumbnailSwipeForward: 'SHOWCASE_CARD_THUMBNAIL_SWIPE_FORWARD',
    ShowcaseCardThumbnailSwipeBackward: 'SHOWCASE_CARD_THUMBNAIL_SWIPE_BACKWARD',
    ShowcaseAverageSubpageCloseupPerSession: 'SHOWCASE_AVERAGE_SUBPAGE_CLOSEUP_PER_SESSION',
    TotalCheckoutConversionRate: 'TOTAL_CHECKOUT_CONVERSION_RATE',
    TotalViewCategoryConversionRate: 'TOTAL_VIEW_CATEGORY_CONVERSION_RATE',
    TotalAddToCartConversionRate: 'TOTAL_ADD_TO_CART_CONVERSION_RATE',
    TotalSignupConversionRate: 'TOTAL_SIGNUP_CONVERSION_RATE',
    TotalPageVisitConversionRate: 'TOTAL_PAGE_VISIT_CONVERSION_RATE',
    TotalLeadConversionRate: 'TOTAL_LEAD_CONVERSION_RATE',
    TotalSearchConversionRate: 'TOTAL_SEARCH_CONVERSION_RATE',
    TotalWatchVideoConversionRate: 'TOTAL_WATCH_VIDEO_CONVERSION_RATE',
    TotalUnknownConversionRate: 'TOTAL_UNKNOWN_CONVERSION_RATE',
    TotalCustomConversionRate: 'TOTAL_CUSTOM_CONVERSION_RATE'
} as const;
export type AdAccountAnalyticsColumnsEnum = typeof AdAccountAnalyticsColumnsEnum[keyof typeof AdAccountAnalyticsColumnsEnum];
/**
 * @export
 */
export const AdAccountAnalyticsClickWindowDaysEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_7: 7,
    NUMBER_14: 14,
    NUMBER_30: 30,
    NUMBER_60: 60
} as const;
export type AdAccountAnalyticsClickWindowDaysEnum = typeof AdAccountAnalyticsClickWindowDaysEnum[keyof typeof AdAccountAnalyticsClickWindowDaysEnum];
/**
 * @export
 */
export const AdAccountAnalyticsEngagementWindowDaysEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_7: 7,
    NUMBER_14: 14,
    NUMBER_30: 30,
    NUMBER_60: 60
} as const;
export type AdAccountAnalyticsEngagementWindowDaysEnum = typeof AdAccountAnalyticsEngagementWindowDaysEnum[keyof typeof AdAccountAnalyticsEngagementWindowDaysEnum];
/**
 * @export
 */
export const AdAccountAnalyticsViewWindowDaysEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_7: 7,
    NUMBER_14: 14,
    NUMBER_30: 30,
    NUMBER_60: 60
} as const;
export type AdAccountAnalyticsViewWindowDaysEnum = typeof AdAccountAnalyticsViewWindowDaysEnum[keyof typeof AdAccountAnalyticsViewWindowDaysEnum];
/**
 * @export
 */
export const AdAccountAnalyticsConversionReportTimeEnum = {
    AdAction: 'TIME_OF_AD_ACTION',
    Conversion: 'TIME_OF_CONVERSION'
} as const;
export type AdAccountAnalyticsConversionReportTimeEnum = typeof AdAccountAnalyticsConversionReportTimeEnum[keyof typeof AdAccountAnalyticsConversionReportTimeEnum];
/**
 * @export
 */
export const AdAccountTargetingAnalyticsGetColumnsEnum = {
    SpendInMicroDollar: 'SPEND_IN_MICRO_DOLLAR',
    PaidImpression: 'PAID_IMPRESSION',
    SpendInDollar: 'SPEND_IN_DOLLAR',
    CpcInMicroDollar: 'CPC_IN_MICRO_DOLLAR',
    EcpcInMicroDollar: 'ECPC_IN_MICRO_DOLLAR',
    EcpcInDollar: 'ECPC_IN_DOLLAR',
    Ctr: 'CTR',
    Ectr: 'ECTR',
    CampaignName: 'CAMPAIGN_NAME',
    PinId: 'PIN_ID',
    TotalEngagement: 'TOTAL_ENGAGEMENT',
    Engagement1: 'ENGAGEMENT_1',
    Engagement2: 'ENGAGEMENT_2',
    EcpeInDollar: 'ECPE_IN_DOLLAR',
    EngagementRate: 'ENGAGEMENT_RATE',
    EengagementRate: 'EENGAGEMENT_RATE',
    EcpmInMicroDollar: 'ECPM_IN_MICRO_DOLLAR',
    RepinRate: 'REPIN_RATE',
    Ctr2: 'CTR_2',
    CampaignId: 'CAMPAIGN_ID',
    AdvertiserId: 'ADVERTISER_ID',
    AdAccountId: 'AD_ACCOUNT_ID',
    PinPromotionId: 'PIN_PROMOTION_ID',
    AdId: 'AD_ID',
    AdGroupId: 'AD_GROUP_ID',
    CampaignEntityStatus: 'CAMPAIGN_ENTITY_STATUS',
    CampaignObjectiveType: 'CAMPAIGN_OBJECTIVE_TYPE',
    CpmInMicroDollar: 'CPM_IN_MICRO_DOLLAR',
    CpmInDollar: 'CPM_IN_DOLLAR',
    AdGroupEntityStatus: 'AD_GROUP_ENTITY_STATUS',
    OrderLineId: 'ORDER_LINE_ID',
    OrderLineName: 'ORDER_LINE_NAME',
    Clickthrough1: 'CLICKTHROUGH_1',
    Repin1: 'REPIN_1',
    Impression1: 'IMPRESSION_1',
    Impression1Gross: 'IMPRESSION_1_GROSS',
    Clickthrough1Gross: 'CLICKTHROUGH_1_GROSS',
    OutboundClick1: 'OUTBOUND_CLICK_1',
    Clickthrough2: 'CLICKTHROUGH_2',
    Repin2: 'REPIN_2',
    Impression2: 'IMPRESSION_2',
    OutboundClick2: 'OUTBOUND_CLICK_2',
    TotalClickthrough: 'TOTAL_CLICKTHROUGH',
    TotalImpression: 'TOTAL_IMPRESSION',
    TotalImpressionUser: 'TOTAL_IMPRESSION_USER',
    TotalImpressionFrequency: 'TOTAL_IMPRESSION_FREQUENCY',
    CostPerOutboundClickInDollar: 'COST_PER_OUTBOUND_CLICK_IN_DOLLAR',
    TotalEngagementSignup: 'TOTAL_ENGAGEMENT_SIGNUP',
    TotalEngagementCheckout: 'TOTAL_ENGAGEMENT_CHECKOUT',
    TotalEngagementLead: 'TOTAL_ENGAGEMENT_LEAD',
    TotalClickSignup: 'TOTAL_CLICK_SIGNUP',
    TotalClickCheckout: 'TOTAL_CLICK_CHECKOUT',
    TotalClickAddToCart: 'TOTAL_CLICK_ADD_TO_CART',
    TotalClickLead: 'TOTAL_CLICK_LEAD',
    TotalViewSignup: 'TOTAL_VIEW_SIGNUP',
    TotalViewCheckout: 'TOTAL_VIEW_CHECKOUT',
    TotalViewAddToCart: 'TOTAL_VIEW_ADD_TO_CART',
    TotalViewLead: 'TOTAL_VIEW_LEAD',
    TotalConversions: 'TOTAL_CONVERSIONS',
    TotalEngagementSignupValueInMicroDollar: 'TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR',
    TotalEngagementCheckoutValueInMicroDollar: 'TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalClickSignupValueInMicroDollar: 'TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR',
    TotalClickCheckoutValueInMicroDollar: 'TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalViewSignupValueInMicroDollar: 'TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR',
    TotalViewCheckoutValueInMicroDollar: 'TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalWebSessions: 'TOTAL_WEB_SESSIONS',
    WebSessions1: 'WEB_SESSIONS_1',
    WebSessions2: 'WEB_SESSIONS_2',
    CampaignLifetimeSpendCap: 'CAMPAIGN_LIFETIME_SPEND_CAP',
    CampaignDailySpendCap: 'CAMPAIGN_DAILY_SPEND_CAP',
    TotalPageVisit: 'TOTAL_PAGE_VISIT',
    TotalSignup: 'TOTAL_SIGNUP',
    TotalCheckout: 'TOTAL_CHECKOUT',
    TotalCustom: 'TOTAL_CUSTOM',
    TotalLead: 'TOTAL_LEAD',
    TotalSignupValueInMicroDollar: 'TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR',
    TotalCheckoutValueInMicroDollar: 'TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalCustomValueInMicroDollar: 'TOTAL_CUSTOM_VALUE_IN_MICRO_DOLLAR',
    PageVisitCostPerAction: 'PAGE_VISIT_COST_PER_ACTION',
    PageVisitRoas: 'PAGE_VISIT_ROAS',
    CheckoutRoas: 'CHECKOUT_ROAS',
    CustomRoas: 'CUSTOM_ROAS',
    VideoMrcViews1: 'VIDEO_MRC_VIEWS_1',
    Video3SecViews2: 'VIDEO_3SEC_VIEWS_2',
    VideoP100Complete2: 'VIDEO_P100_COMPLETE_2',
    VideoP0Combined2: 'VIDEO_P0_COMBINED_2',
    VideoP25Combined2: 'VIDEO_P25_COMBINED_2',
    VideoP50Combined2: 'VIDEO_P50_COMBINED_2',
    VideoP75Combined2: 'VIDEO_P75_COMBINED_2',
    VideoP95Combined2: 'VIDEO_P95_COMBINED_2',
    VideoMrcViews2: 'VIDEO_MRC_VIEWS_2',
    PaidVideoViewableRate: 'PAID_VIDEO_VIEWABLE_RATE',
    VideoLength: 'VIDEO_LENGTH',
    EcpvInDollar: 'ECPV_IN_DOLLAR',
    EcpcvInDollar: 'ECPCV_IN_DOLLAR',
    EcpcvP95InDollar: 'ECPCV_P95_IN_DOLLAR',
    TotalVideo3SecViews: 'TOTAL_VIDEO_3SEC_VIEWS',
    TotalVideoP100Complete: 'TOTAL_VIDEO_P100_COMPLETE',
    TotalVideoP0Combined: 'TOTAL_VIDEO_P0_COMBINED',
    TotalVideoP25Combined: 'TOTAL_VIDEO_P25_COMBINED',
    TotalVideoP50Combined: 'TOTAL_VIDEO_P50_COMBINED',
    TotalVideoP75Combined: 'TOTAL_VIDEO_P75_COMBINED',
    TotalVideoP95Combined: 'TOTAL_VIDEO_P95_COMBINED',
    TotalVideoMrcViews: 'TOTAL_VIDEO_MRC_VIEWS',
    TotalVideoAvgWatchtimeInSecond: 'TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND',
    TotalRepinRate: 'TOTAL_REPIN_RATE',
    WebCheckoutCostPerAction: 'WEB_CHECKOUT_COST_PER_ACTION',
    WebCheckoutRoas: 'WEB_CHECKOUT_ROAS',
    TotalWebCheckout: 'TOTAL_WEB_CHECKOUT',
    TotalWebCheckoutValueInMicroDollar: 'TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalWebClickCheckout: 'TOTAL_WEB_CLICK_CHECKOUT',
    TotalWebClickCheckoutValueInMicroDollar: 'TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalWebEngagementCheckout: 'TOTAL_WEB_ENGAGEMENT_CHECKOUT',
    TotalWebEngagementCheckoutValueInMicroDollar: 'TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalWebViewCheckout: 'TOTAL_WEB_VIEW_CHECKOUT',
    TotalWebViewCheckoutValueInMicroDollar: 'TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    InappCheckoutCostPerAction: 'INAPP_CHECKOUT_COST_PER_ACTION',
    TotalOfflineCheckout: 'TOTAL_OFFLINE_CHECKOUT',
    IdeaPinProductTagVisit1: 'IDEA_PIN_PRODUCT_TAG_VISIT_1',
    IdeaPinProductTagVisit2: 'IDEA_PIN_PRODUCT_TAG_VISIT_2',
    TotalIdeaPinProductTagVisit: 'TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT',
    Leads: 'LEADS',
    CostPerLead: 'COST_PER_LEAD',
    QuizCompleted: 'QUIZ_COMPLETED',
    QuizPinResultOpen: 'QUIZ_PIN_RESULT_OPEN',
    QuizCompletionRate: 'QUIZ_COMPLETION_RATE',
    ShowcasePinClickthrough: 'SHOWCASE_PIN_CLICKTHROUGH',
    ShowcaseSubpageClickthrough: 'SHOWCASE_SUBPAGE_CLICKTHROUGH',
    ShowcaseSubpinClickthrough: 'SHOWCASE_SUBPIN_CLICKTHROUGH',
    ShowcaseSubpageImpression: 'SHOWCASE_SUBPAGE_IMPRESSION',
    ShowcaseSubpinImpression: 'SHOWCASE_SUBPIN_IMPRESSION',
    ShowcaseSubpageSwipeLeft: 'SHOWCASE_SUBPAGE_SWIPE_LEFT',
    ShowcaseSubpageSwipeRight: 'SHOWCASE_SUBPAGE_SWIPE_RIGHT',
    ShowcaseSubpinSwipeLeft: 'SHOWCASE_SUBPIN_SWIPE_LEFT',
    ShowcaseSubpinSwipeRight: 'SHOWCASE_SUBPIN_SWIPE_RIGHT',
    ShowcaseSubpageRepin: 'SHOWCASE_SUBPAGE_REPIN',
    ShowcaseSubpinRepin: 'SHOWCASE_SUBPIN_REPIN',
    ShowcaseSubpageCloseup: 'SHOWCASE_SUBPAGE_CLOSEUP',
    ShowcaseCardThumbnailSwipeForward: 'SHOWCASE_CARD_THUMBNAIL_SWIPE_FORWARD',
    ShowcaseCardThumbnailSwipeBackward: 'SHOWCASE_CARD_THUMBNAIL_SWIPE_BACKWARD',
    ShowcaseAverageSubpageCloseupPerSession: 'SHOWCASE_AVERAGE_SUBPAGE_CLOSEUP_PER_SESSION',
    TotalCheckoutConversionRate: 'TOTAL_CHECKOUT_CONVERSION_RATE',
    TotalViewCategoryConversionRate: 'TOTAL_VIEW_CATEGORY_CONVERSION_RATE',
    TotalAddToCartConversionRate: 'TOTAL_ADD_TO_CART_CONVERSION_RATE',
    TotalSignupConversionRate: 'TOTAL_SIGNUP_CONVERSION_RATE',
    TotalPageVisitConversionRate: 'TOTAL_PAGE_VISIT_CONVERSION_RATE',
    TotalLeadConversionRate: 'TOTAL_LEAD_CONVERSION_RATE',
    TotalSearchConversionRate: 'TOTAL_SEARCH_CONVERSION_RATE',
    TotalWatchVideoConversionRate: 'TOTAL_WATCH_VIDEO_CONVERSION_RATE',
    TotalUnknownConversionRate: 'TOTAL_UNKNOWN_CONVERSION_RATE',
    TotalCustomConversionRate: 'TOTAL_CUSTOM_CONVERSION_RATE'
} as const;
export type AdAccountTargetingAnalyticsGetColumnsEnum = typeof AdAccountTargetingAnalyticsGetColumnsEnum[keyof typeof AdAccountTargetingAnalyticsGetColumnsEnum];
/**
 * @export
 */
export const AdAccountTargetingAnalyticsGetClickWindowDaysEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_7: 7,
    NUMBER_14: 14,
    NUMBER_30: 30,
    NUMBER_60: 60
} as const;
export type AdAccountTargetingAnalyticsGetClickWindowDaysEnum = typeof AdAccountTargetingAnalyticsGetClickWindowDaysEnum[keyof typeof AdAccountTargetingAnalyticsGetClickWindowDaysEnum];
/**
 * @export
 */
export const AdAccountTargetingAnalyticsGetEngagementWindowDaysEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_7: 7,
    NUMBER_14: 14,
    NUMBER_30: 30,
    NUMBER_60: 60
} as const;
export type AdAccountTargetingAnalyticsGetEngagementWindowDaysEnum = typeof AdAccountTargetingAnalyticsGetEngagementWindowDaysEnum[keyof typeof AdAccountTargetingAnalyticsGetEngagementWindowDaysEnum];
/**
 * @export
 */
export const AdAccountTargetingAnalyticsGetViewWindowDaysEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_7: 7,
    NUMBER_14: 14,
    NUMBER_30: 30,
    NUMBER_60: 60
} as const;
export type AdAccountTargetingAnalyticsGetViewWindowDaysEnum = typeof AdAccountTargetingAnalyticsGetViewWindowDaysEnum[keyof typeof AdAccountTargetingAnalyticsGetViewWindowDaysEnum];
/**
 * @export
 */
export const AdAccountTargetingAnalyticsGetConversionReportTimeEnum = {
    AdAction: 'TIME_OF_AD_ACTION',
    Conversion: 'TIME_OF_CONVERSION'
} as const;
export type AdAccountTargetingAnalyticsGetConversionReportTimeEnum = typeof AdAccountTargetingAnalyticsGetConversionReportTimeEnum[keyof typeof AdAccountTargetingAnalyticsGetConversionReportTimeEnum];
/**
 * @export
 */
export const TemplatesListOrderEnum = {
    Ascending: 'ASCENDING',
    Descending: 'DESCENDING'
} as const;
export type TemplatesListOrderEnum = typeof TemplatesListOrderEnum[keyof typeof TemplatesListOrderEnum];
