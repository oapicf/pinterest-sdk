/* tslint:disable */
/* eslint-disable */
/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  MediaList200Response,
  MediaUpload,
  MediaUploadDetails,
  MediaUploadRequest,
} from '../models/index';
import {
    MediaList200ResponseFromJSON,
    MediaList200ResponseToJSON,
    MediaUploadFromJSON,
    MediaUploadToJSON,
    MediaUploadDetailsFromJSON,
    MediaUploadDetailsToJSON,
    MediaUploadRequestFromJSON,
    MediaUploadRequestToJSON,
} from '../models/index';

export interface MediaCreateRequest {
    mediaUploadRequest: MediaUploadRequest;
}

export interface MediaGetRequest {
    mediaId: string;
}

export interface MediaListRequest {
    bookmark?: string;
    pageSize?: number;
}

/**
 * 
 */
export class MediaApi extends runtime.BaseAPI {

    /**
     * Register your intent to upload media  The response includes all of the information needed to upload the media to Pinterest.  To upload the media, make an HTTP POST request (using <tt>curl</tt>, for example) to <tt>upload_url</tt> using the <tt>Content-Type</tt> header value. Send the media file\'s contents as the request\'s <tt>file</tt> parameter and also include all of the parameters from <tt>upload_parameters</tt>.  <strong><a href=\'/docs/api-features/creating-boards-and-pins/#creating-video-pins\'>Learn more</a></strong> about video Pin creation.
     * Register media upload
     */
    async mediaCreateRaw(requestParameters: MediaCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MediaUpload>> {
        if (requestParameters['mediaUploadRequest'] == null) {
            throw new runtime.RequiredError(
                'mediaUploadRequest',
                'Required parameter "mediaUploadRequest" was null or undefined when calling mediaCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("pinterest_oauth2", ["pins:read", "pins:write"]);
        }

        const response = await this.request({
            path: `/media`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MediaUploadRequestToJSON(requestParameters['mediaUploadRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MediaUploadFromJSON(jsonValue));
    }

    /**
     * Register your intent to upload media  The response includes all of the information needed to upload the media to Pinterest.  To upload the media, make an HTTP POST request (using <tt>curl</tt>, for example) to <tt>upload_url</tt> using the <tt>Content-Type</tt> header value. Send the media file\'s contents as the request\'s <tt>file</tt> parameter and also include all of the parameters from <tt>upload_parameters</tt>.  <strong><a href=\'/docs/api-features/creating-boards-and-pins/#creating-video-pins\'>Learn more</a></strong> about video Pin creation.
     * Register media upload
     */
    async mediaCreate(requestParameters: MediaCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MediaUpload> {
        const response = await this.mediaCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get details for a registered media upload, including its current status.  <strong><a href=\'/docs/api-features/creating-boards-and-pins/#creating-video-pins\'>Learn more</a></strong> about video Pin creation.
     * Get media upload details
     */
    async mediaGetRaw(requestParameters: MediaGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MediaUploadDetails>> {
        if (requestParameters['mediaId'] == null) {
            throw new runtime.RequiredError(
                'mediaId',
                'Required parameter "mediaId" was null or undefined when calling mediaGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("pinterest_oauth2", ["pins:read"]);
        }

        const response = await this.request({
            path: `/media/{media_id}`.replace(`{${"media_id"}}`, encodeURIComponent(String(requestParameters['mediaId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MediaUploadDetailsFromJSON(jsonValue));
    }

    /**
     * Get details for a registered media upload, including its current status.  <strong><a href=\'/docs/api-features/creating-boards-and-pins/#creating-video-pins\'>Learn more</a></strong> about video Pin creation.
     * Get media upload details
     */
    async mediaGet(requestParameters: MediaGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MediaUploadDetails> {
        const response = await this.mediaGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List media uploads filtered by given parameters.  <strong><a href=\'/docs/api-features/creating-boards-and-pins/#creating-video-pins\'>Learn more</a></strong> about video Pin creation.
     * List media uploads
     */
    async mediaListRaw(requestParameters: MediaListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MediaList200Response>> {
        const queryParameters: any = {};

        if (requestParameters['bookmark'] != null) {
            queryParameters['bookmark'] = requestParameters['bookmark'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("pinterest_oauth2", ["pins:read"]);
        }

        const response = await this.request({
            path: `/media`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MediaList200ResponseFromJSON(jsonValue));
    }

    /**
     * List media uploads filtered by given parameters.  <strong><a href=\'/docs/api-features/creating-boards-and-pins/#creating-video-pins\'>Learn more</a></strong> about video Pin creation.
     * List media uploads
     */
    async mediaList(requestParameters: MediaListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MediaList200Response> {
        const response = await this.mediaListRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
