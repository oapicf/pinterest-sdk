/* tslint:disable */
/* eslint-disable */
/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AdAccountsAudiencesSharedAccountsList200Response,
  AudienceAccountType,
  AudiencesList200Response,
  BusinessSharedAudience,
  BusinessSharedAudienceResponse,
  SharedAudience,
  SharedAudienceResponse,
} from '../models/index';
import {
    AdAccountsAudiencesSharedAccountsList200ResponseFromJSON,
    AdAccountsAudiencesSharedAccountsList200ResponseToJSON,
    AudienceAccountTypeFromJSON,
    AudienceAccountTypeToJSON,
    AudiencesList200ResponseFromJSON,
    AudiencesList200ResponseToJSON,
    BusinessSharedAudienceFromJSON,
    BusinessSharedAudienceToJSON,
    BusinessSharedAudienceResponseFromJSON,
    BusinessSharedAudienceResponseToJSON,
    SharedAudienceFromJSON,
    SharedAudienceToJSON,
    SharedAudienceResponseFromJSON,
    SharedAudienceResponseToJSON,
} from '../models/index';

export interface AdAccountsAudiencesSharedAccountsListRequest {
    adAccountId: string;
    audienceId: string;
    accountType: AudienceAccountType;
    pageSize?: number;
    bookmark?: string;
}

export interface BusinessAccountAudiencesSharedAccountsListRequest {
    businessId: string;
    audienceId: string;
    accountType: AudienceAccountType;
    pageSize?: number;
    bookmark?: string;
}

export interface SharedAudiencesForBusinessListRequest {
    businessId: string;
    bookmark?: string;
    order?: SharedAudiencesForBusinessListOrderEnum;
    pageSize?: number;
}

export interface UpdateAdAccountToAdAccountSharedAudienceRequest {
    adAccountId: string;
    sharedAudience: SharedAudience;
}

export interface UpdateAdAccountToBusinessSharedAudienceRequest {
    adAccountId: string;
    businessSharedAudience: BusinessSharedAudience;
}

export interface UpdateBusinessToAdAccountSharedAudienceRequest {
    businessId: string;
    sharedAudience: SharedAudience;
}

export interface UpdateBusinessToBusinessSharedAudienceRequest {
    businessId: string;
    businessSharedAudience: BusinessSharedAudience;
}

/**
 * 
 */
export class AudienceSharingApi extends runtime.BaseAPI {

    /**
     * List all ad accounts and/or businesses that have access to a specific audience. The audience must be owned by the requesting ad account.
     * List accounts with access to an audience owned by an ad account
     */
    async adAccountsAudiencesSharedAccountsListRaw(requestParameters: AdAccountsAudiencesSharedAccountsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdAccountsAudiencesSharedAccountsList200Response>> {
        if (requestParameters['adAccountId'] == null) {
            throw new runtime.RequiredError(
                'adAccountId',
                'Required parameter "adAccountId" was null or undefined when calling adAccountsAudiencesSharedAccountsList().'
            );
        }

        if (requestParameters['audienceId'] == null) {
            throw new runtime.RequiredError(
                'audienceId',
                'Required parameter "audienceId" was null or undefined when calling adAccountsAudiencesSharedAccountsList().'
            );
        }

        if (requestParameters['accountType'] == null) {
            throw new runtime.RequiredError(
                'accountType',
                'Required parameter "accountType" was null or undefined when calling adAccountsAudiencesSharedAccountsList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['audienceId'] != null) {
            queryParameters['audience_id'] = requestParameters['audienceId'];
        }

        if (requestParameters['accountType'] != null) {
            queryParameters['account_type'] = requestParameters['accountType'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        if (requestParameters['bookmark'] != null) {
            queryParameters['bookmark'] = requestParameters['bookmark'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("pinterest_oauth2", ["ads:read"]);
        }

        const response = await this.request({
            path: `/ad_accounts/{ad_account_id}/audiences/shared/accounts`.replace(`{${"ad_account_id"}}`, encodeURIComponent(String(requestParameters['adAccountId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AdAccountsAudiencesSharedAccountsList200ResponseFromJSON(jsonValue));
    }

    /**
     * List all ad accounts and/or businesses that have access to a specific audience. The audience must be owned by the requesting ad account.
     * List accounts with access to an audience owned by an ad account
     */
    async adAccountsAudiencesSharedAccountsList(requestParameters: AdAccountsAudiencesSharedAccountsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdAccountsAudiencesSharedAccountsList200Response> {
        const response = await this.adAccountsAudiencesSharedAccountsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all ad accounts and/or businesses that have access to a specific audience. The audience must either be owned by an ad account in the requesting business, or it must have been shared with the requesting business. If the requesting business is not the owner of the audience, only ad accounts owned by the requesting business will be returned.
     * List accounts with access to an audience owned by a business
     */
    async businessAccountAudiencesSharedAccountsListRaw(requestParameters: BusinessAccountAudiencesSharedAccountsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdAccountsAudiencesSharedAccountsList200Response>> {
        if (requestParameters['businessId'] == null) {
            throw new runtime.RequiredError(
                'businessId',
                'Required parameter "businessId" was null or undefined when calling businessAccountAudiencesSharedAccountsList().'
            );
        }

        if (requestParameters['audienceId'] == null) {
            throw new runtime.RequiredError(
                'audienceId',
                'Required parameter "audienceId" was null or undefined when calling businessAccountAudiencesSharedAccountsList().'
            );
        }

        if (requestParameters['accountType'] == null) {
            throw new runtime.RequiredError(
                'accountType',
                'Required parameter "accountType" was null or undefined when calling businessAccountAudiencesSharedAccountsList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['audienceId'] != null) {
            queryParameters['audience_id'] = requestParameters['audienceId'];
        }

        if (requestParameters['accountType'] != null) {
            queryParameters['account_type'] = requestParameters['accountType'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        if (requestParameters['bookmark'] != null) {
            queryParameters['bookmark'] = requestParameters['bookmark'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("pinterest_oauth2", ["biz_access:read"]);
        }

        const response = await this.request({
            path: `/businesses/{business_id}/audiences/shared/accounts`.replace(`{${"business_id"}}`, encodeURIComponent(String(requestParameters['businessId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AdAccountsAudiencesSharedAccountsList200ResponseFromJSON(jsonValue));
    }

    /**
     * List all ad accounts and/or businesses that have access to a specific audience. The audience must either be owned by an ad account in the requesting business, or it must have been shared with the requesting business. If the requesting business is not the owner of the audience, only ad accounts owned by the requesting business will be returned.
     * List accounts with access to an audience owned by a business
     */
    async businessAccountAudiencesSharedAccountsList(requestParameters: BusinessAccountAudiencesSharedAccountsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdAccountsAudiencesSharedAccountsList200Response> {
        const response = await this.businessAccountAudiencesSharedAccountsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of received audiences for the given business.
     * List received audiences for a business
     */
    async sharedAudiencesForBusinessListRaw(requestParameters: SharedAudiencesForBusinessListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AudiencesList200Response>> {
        if (requestParameters['businessId'] == null) {
            throw new runtime.RequiredError(
                'businessId',
                'Required parameter "businessId" was null or undefined when calling sharedAudiencesForBusinessList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['bookmark'] != null) {
            queryParameters['bookmark'] = requestParameters['bookmark'];
        }

        if (requestParameters['order'] != null) {
            queryParameters['order'] = requestParameters['order'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("pinterest_oauth2", ["biz_access:read"]);
        }

        const response = await this.request({
            path: `/businesses/{business_id}/audiences`.replace(`{${"business_id"}}`, encodeURIComponent(String(requestParameters['businessId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AudiencesList200ResponseFromJSON(jsonValue));
    }

    /**
     * Get a list of received audiences for the given business.
     * List received audiences for a business
     */
    async sharedAudiencesForBusinessList(requestParameters: SharedAudiencesForBusinessListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AudiencesList200Response> {
        const response = await this.sharedAudiencesForBusinessListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * From an ad account, share a specific audience with another ad account, or revoke access to a previously shared audience. Only the audience owner account can share the audience. The recipient ad account(s) must be in the same <a href=\'https://help.pinterest.com/en/business/article/create-and-manage-accounts\'>Pinterest Business Hierarchy</a> as the business owner of the ad account.<br> This endpoint is not available to all apps.<a href=\'/docs/getting-started/beta-and-advanced-access/\'>Learn more</a>.
     * Update audience sharing between ad accounts
     */
    async updateAdAccountToAdAccountSharedAudienceRaw(requestParameters: UpdateAdAccountToAdAccountSharedAudienceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SharedAudienceResponse>> {
        if (requestParameters['adAccountId'] == null) {
            throw new runtime.RequiredError(
                'adAccountId',
                'Required parameter "adAccountId" was null or undefined when calling updateAdAccountToAdAccountSharedAudience().'
            );
        }

        if (requestParameters['sharedAudience'] == null) {
            throw new runtime.RequiredError(
                'sharedAudience',
                'Required parameter "sharedAudience" was null or undefined when calling updateAdAccountToAdAccountSharedAudience().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("pinterest_oauth2", ["ads:write"]);
        }

        const response = await this.request({
            path: `/ad_accounts/{ad_account_id}/audiences/ad_accounts/shared`.replace(`{${"ad_account_id"}}`, encodeURIComponent(String(requestParameters['adAccountId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: SharedAudienceToJSON(requestParameters['sharedAudience']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SharedAudienceResponseFromJSON(jsonValue));
    }

    /**
     * From an ad account, share a specific audience with another ad account, or revoke access to a previously shared audience. Only the audience owner account can share the audience. The recipient ad account(s) must be in the same <a href=\'https://help.pinterest.com/en/business/article/create-and-manage-accounts\'>Pinterest Business Hierarchy</a> as the business owner of the ad account.<br> This endpoint is not available to all apps.<a href=\'/docs/getting-started/beta-and-advanced-access/\'>Learn more</a>.
     * Update audience sharing between ad accounts
     */
    async updateAdAccountToAdAccountSharedAudience(requestParameters: UpdateAdAccountToAdAccountSharedAudienceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SharedAudienceResponse> {
        const response = await this.updateAdAccountToAdAccountSharedAudienceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * From an ad account, share a specific audience with a business account, or revoke access to a previously shared audience. Only the audience owner account can share the audience. The recipient business account must be in the same business hierarchy as the business owner of the ad account.<br> This endpoint is not available to all apps.<a href=\'/docs/getting-started/beta-and-advanced-access/\'>Learn more</a>.
     * Update audience sharing from an ad account to businesses
     */
    async updateAdAccountToBusinessSharedAudienceRaw(requestParameters: UpdateAdAccountToBusinessSharedAudienceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BusinessSharedAudienceResponse>> {
        if (requestParameters['adAccountId'] == null) {
            throw new runtime.RequiredError(
                'adAccountId',
                'Required parameter "adAccountId" was null or undefined when calling updateAdAccountToBusinessSharedAudience().'
            );
        }

        if (requestParameters['businessSharedAudience'] == null) {
            throw new runtime.RequiredError(
                'businessSharedAudience',
                'Required parameter "businessSharedAudience" was null or undefined when calling updateAdAccountToBusinessSharedAudience().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("pinterest_oauth2", ["ads:write"]);
        }

        const response = await this.request({
            path: `/ad_accounts/{ad_account_id}/audiences/businesses/shared`.replace(`{${"ad_account_id"}}`, encodeURIComponent(String(requestParameters['adAccountId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: BusinessSharedAudienceToJSON(requestParameters['businessSharedAudience']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BusinessSharedAudienceResponseFromJSON(jsonValue));
    }

    /**
     * From an ad account, share a specific audience with a business account, or revoke access to a previously shared audience. Only the audience owner account can share the audience. The recipient business account must be in the same business hierarchy as the business owner of the ad account.<br> This endpoint is not available to all apps.<a href=\'/docs/getting-started/beta-and-advanced-access/\'>Learn more</a>.
     * Update audience sharing from an ad account to businesses
     */
    async updateAdAccountToBusinessSharedAudience(requestParameters: UpdateAdAccountToBusinessSharedAudienceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BusinessSharedAudienceResponse> {
        const response = await this.updateAdAccountToBusinessSharedAudienceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * From a business, share a specific audience with other ad account(s), or revoke access to a previously shared audience. <ul> <li>If the business is the owner of the audience, it can share with any ad account within the same business hierarchy.</li> <li>If the business is the recipient of the audience, it can share with any of its owned ad accounts.</li> </ul> This endpoint is not available to all apps.<a href=\'/docs/getting-started/beta-and-advanced-access/\'>Learn more</a>.
     * Update audience sharing from a business to ad accounts
     */
    async updateBusinessToAdAccountSharedAudienceRaw(requestParameters: UpdateBusinessToAdAccountSharedAudienceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SharedAudienceResponse>> {
        if (requestParameters['businessId'] == null) {
            throw new runtime.RequiredError(
                'businessId',
                'Required parameter "businessId" was null or undefined when calling updateBusinessToAdAccountSharedAudience().'
            );
        }

        if (requestParameters['sharedAudience'] == null) {
            throw new runtime.RequiredError(
                'sharedAudience',
                'Required parameter "sharedAudience" was null or undefined when calling updateBusinessToAdAccountSharedAudience().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("pinterest_oauth2", ["biz_access:write"]);
        }

        const response = await this.request({
            path: `/businesses/{business_id}/audiences/ad_accounts/shared`.replace(`{${"business_id"}}`, encodeURIComponent(String(requestParameters['businessId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: SharedAudienceToJSON(requestParameters['sharedAudience']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SharedAudienceResponseFromJSON(jsonValue));
    }

    /**
     * From a business, share a specific audience with other ad account(s), or revoke access to a previously shared audience. <ul> <li>If the business is the owner of the audience, it can share with any ad account within the same business hierarchy.</li> <li>If the business is the recipient of the audience, it can share with any of its owned ad accounts.</li> </ul> This endpoint is not available to all apps.<a href=\'/docs/getting-started/beta-and-advanced-access/\'>Learn more</a>.
     * Update audience sharing from a business to ad accounts
     */
    async updateBusinessToAdAccountSharedAudience(requestParameters: UpdateBusinessToAdAccountSharedAudienceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SharedAudienceResponse> {
        const response = await this.updateBusinessToAdAccountSharedAudienceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * From a business, share a specific audience with another business account, or revoke access to a previously shared audience. Only the audience owner can share the audience with other businesses, and the recipient business must be within the same business hierarchy.<br> This endpoint is not available to all apps.<a href=\'/docs/getting-started/beta-and-advanced-access/\'>Learn more</a>.
     * Update audience sharing between businesses
     */
    async updateBusinessToBusinessSharedAudienceRaw(requestParameters: UpdateBusinessToBusinessSharedAudienceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BusinessSharedAudienceResponse>> {
        if (requestParameters['businessId'] == null) {
            throw new runtime.RequiredError(
                'businessId',
                'Required parameter "businessId" was null or undefined when calling updateBusinessToBusinessSharedAudience().'
            );
        }

        if (requestParameters['businessSharedAudience'] == null) {
            throw new runtime.RequiredError(
                'businessSharedAudience',
                'Required parameter "businessSharedAudience" was null or undefined when calling updateBusinessToBusinessSharedAudience().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("pinterest_oauth2", ["biz_access:write"]);
        }

        const response = await this.request({
            path: `/businesses/{business_id}/audiences/businesses/shared`.replace(`{${"business_id"}}`, encodeURIComponent(String(requestParameters['businessId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: BusinessSharedAudienceToJSON(requestParameters['businessSharedAudience']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BusinessSharedAudienceResponseFromJSON(jsonValue));
    }

    /**
     * From a business, share a specific audience with another business account, or revoke access to a previously shared audience. Only the audience owner can share the audience with other businesses, and the recipient business must be within the same business hierarchy.<br> This endpoint is not available to all apps.<a href=\'/docs/getting-started/beta-and-advanced-access/\'>Learn more</a>.
     * Update audience sharing between businesses
     */
    async updateBusinessToBusinessSharedAudience(requestParameters: UpdateBusinessToBusinessSharedAudienceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BusinessSharedAudienceResponse> {
        const response = await this.updateBusinessToBusinessSharedAudienceRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const SharedAudiencesForBusinessListOrderEnum = {
    Ascending: 'ASCENDING',
    Descending: 'DESCENDING'
} as const;
export type SharedAudiencesForBusinessListOrderEnum = typeof SharedAudiencesForBusinessListOrderEnum[keyof typeof SharedAudiencesForBusinessListOrderEnum];
