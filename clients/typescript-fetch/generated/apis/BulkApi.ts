/* tslint:disable */
/* eslint-disable */
/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BulkDownloadRequest,
  BulkDownloadResponse,
  BulkUpsertRequest,
  BulkUpsertResponse,
  BulkUpsertStatusResponse,
} from '../models/index';
import {
    BulkDownloadRequestFromJSON,
    BulkDownloadRequestToJSON,
    BulkDownloadResponseFromJSON,
    BulkDownloadResponseToJSON,
    BulkUpsertRequestFromJSON,
    BulkUpsertRequestToJSON,
    BulkUpsertResponseFromJSON,
    BulkUpsertResponseToJSON,
    BulkUpsertStatusResponseFromJSON,
    BulkUpsertStatusResponseToJSON,
} from '../models/index';

export interface BulkDownloadCreateRequest {
    adAccountId: string;
    bulkDownloadRequest: BulkDownloadRequest;
}

export interface BulkRequestGetRequest {
    adAccountId: string;
    bulkRequestId: string;
    includeDetails?: boolean;
}

export interface BulkUpsertCreateRequest {
    adAccountId: string;
    bulkUpsertRequest: BulkUpsertRequest;
}

/**
 * 
 */
export class BulkApi extends runtime.BaseAPI {

    /**
     * Create an asynchronous report that may include information on campaigns, ad groups, product groups, ads, and/or keywords; can filter by campaigns. Though the entities may be active, archived, or paused, only active entities will return data.
     * Get advertiser entities in bulk
     */
    async bulkDownloadCreateRaw(requestParameters: BulkDownloadCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BulkDownloadResponse>> {
        if (requestParameters['adAccountId'] == null) {
            throw new runtime.RequiredError(
                'adAccountId',
                'Required parameter "adAccountId" was null or undefined when calling bulkDownloadCreate().'
            );
        }

        if (requestParameters['bulkDownloadRequest'] == null) {
            throw new runtime.RequiredError(
                'bulkDownloadRequest',
                'Required parameter "bulkDownloadRequest" was null or undefined when calling bulkDownloadCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("pinterest_oauth2", ["ads:read"]);
        }

        const response = await this.request({
            path: `/ad_accounts/{ad_account_id}/bulk/download`.replace(`{${"ad_account_id"}}`, encodeURIComponent(String(requestParameters['adAccountId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BulkDownloadRequestToJSON(requestParameters['bulkDownloadRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BulkDownloadResponseFromJSON(jsonValue));
    }

    /**
     * Create an asynchronous report that may include information on campaigns, ad groups, product groups, ads, and/or keywords; can filter by campaigns. Though the entities may be active, archived, or paused, only active entities will return data.
     * Get advertiser entities in bulk
     */
    async bulkDownloadCreate(requestParameters: BulkDownloadCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BulkDownloadResponse> {
        const response = await this.bulkDownloadCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the status of a bulk request by <code>request_id</code>, along with a download URL that will allow you to download the new or updated entity data (campaigns, ad groups, product groups, ads, or keywords).
     * Download advertiser entities in bulk
     */
    async bulkRequestGetRaw(requestParameters: BulkRequestGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BulkUpsertStatusResponse>> {
        if (requestParameters['adAccountId'] == null) {
            throw new runtime.RequiredError(
                'adAccountId',
                'Required parameter "adAccountId" was null or undefined when calling bulkRequestGet().'
            );
        }

        if (requestParameters['bulkRequestId'] == null) {
            throw new runtime.RequiredError(
                'bulkRequestId',
                'Required parameter "bulkRequestId" was null or undefined when calling bulkRequestGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['includeDetails'] != null) {
            queryParameters['include_details'] = requestParameters['includeDetails'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("pinterest_oauth2", ["ads:read"]);
        }

        const response = await this.request({
            path: `/ad_accounts/{ad_account_id}/bulk/{bulk_request_id}`.replace(`{${"ad_account_id"}}`, encodeURIComponent(String(requestParameters['adAccountId']))).replace(`{${"bulk_request_id"}}`, encodeURIComponent(String(requestParameters['bulkRequestId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BulkUpsertStatusResponseFromJSON(jsonValue));
    }

    /**
     * Get the status of a bulk request by <code>request_id</code>, along with a download URL that will allow you to download the new or updated entity data (campaigns, ad groups, product groups, ads, or keywords).
     * Download advertiser entities in bulk
     */
    async bulkRequestGet(requestParameters: BulkRequestGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BulkUpsertStatusResponse> {
        const response = await this.bulkRequestGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Either create or update any combination of campaigns, ad groups, product groups, ads, or keywords. Note that this request will be processed asynchronously; the response will include a <code>request_id</code> that can be used to obtain the status of the request.
     * Create/update ad entities in bulk
     */
    async bulkUpsertCreateRaw(requestParameters: BulkUpsertCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BulkUpsertResponse>> {
        if (requestParameters['adAccountId'] == null) {
            throw new runtime.RequiredError(
                'adAccountId',
                'Required parameter "adAccountId" was null or undefined when calling bulkUpsertCreate().'
            );
        }

        if (requestParameters['bulkUpsertRequest'] == null) {
            throw new runtime.RequiredError(
                'bulkUpsertRequest',
                'Required parameter "bulkUpsertRequest" was null or undefined when calling bulkUpsertCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("pinterest_oauth2", ["ads:write"]);
        }

        const response = await this.request({
            path: `/ad_accounts/{ad_account_id}/bulk/upsert`.replace(`{${"ad_account_id"}}`, encodeURIComponent(String(requestParameters['adAccountId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BulkUpsertRequestToJSON(requestParameters['bulkUpsertRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BulkUpsertResponseFromJSON(jsonValue));
    }

    /**
     * Either create or update any combination of campaigns, ad groups, product groups, ads, or keywords. Note that this request will be processed asynchronously; the response will include a <code>request_id</code> that can be used to obtain the status of the request.
     * Create/update ad entities in bulk
     */
    async bulkUpsertCreate(requestParameters: BulkUpsertCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BulkUpsertResponse> {
        const response = await this.bulkUpsertCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
