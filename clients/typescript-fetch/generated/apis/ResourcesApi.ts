/* tslint:disable */
/* eslint-disable */
/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AdAccountsCountryResponse,
  BookClosedResponse,
  DeliveryMetricsResponse,
  SingleInterestTargetingOptionResponse,
} from '../models/index';
import {
    AdAccountsCountryResponseFromJSON,
    AdAccountsCountryResponseToJSON,
    BookClosedResponseFromJSON,
    BookClosedResponseToJSON,
    DeliveryMetricsResponseFromJSON,
    DeliveryMetricsResponseToJSON,
    SingleInterestTargetingOptionResponseFromJSON,
    SingleInterestTargetingOptionResponseToJSON,
} from '../models/index';

export interface DeliveryMetricsGetRequest {
    reportType?: DeliveryMetricsGetReportTypeEnum;
}

export interface InterestTargetingOptionsGetRequest {
    interestId: string;
}

export interface MetricsReadyStateGetRequest {
    date: string;
}

export interface TargetingOptionsGetRequest {
    targetingType: TargetingOptionsGetTargetingTypeEnum;
    clientId?: string;
    oauthSignature?: string;
    timestamp?: string;
    adAccountId?: string;
}

/**
 * 
 */
export class ResourcesApi extends runtime.BaseAPI {

    /**
     * Get Ad Accounts countries
     * Get ad accounts countries
     */
    async adAccountCountriesGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdAccountsCountryResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("pinterest_oauth2", ["ads:read"]);
        }

        const response = await this.request({
            path: `/resources/ad_account_countries`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AdAccountsCountryResponseFromJSON(jsonValue));
    }

    /**
     * Get Ad Accounts countries
     * Get ad accounts countries
     */
    async adAccountCountriesGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdAccountsCountryResponse> {
        const response = await this.adAccountCountriesGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get the definitions for ads and organic metrics available across both synchronous and asynchronous report endpoints. The `display_name` attribute will match how the metric is named in our native tools like Ads Manager. See <a href=\'/docs/api-features/analytics-overview/\'>Organic Analytics</a> and <a href=\'/docs/api-features/ads-reporting/\'>Ads Analytics</a> for more information.
     * Get available metrics\' definitions
     */
    async deliveryMetricsGetRaw(requestParameters: DeliveryMetricsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeliveryMetricsResponse>> {
        const queryParameters: any = {};

        if (requestParameters['reportType'] != null) {
            queryParameters['report_type'] = requestParameters['reportType'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("pinterest_oauth2", ["ads:read", "pins:read", "user_accounts:read"]);
        }

        const response = await this.request({
            path: `/resources/delivery_metrics`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeliveryMetricsResponseFromJSON(jsonValue));
    }

    /**
     * Get the definitions for ads and organic metrics available across both synchronous and asynchronous report endpoints. The `display_name` attribute will match how the metric is named in our native tools like Ads Manager. See <a href=\'/docs/api-features/analytics-overview/\'>Organic Analytics</a> and <a href=\'/docs/api-features/ads-reporting/\'>Ads Analytics</a> for more information.
     * Get available metrics\' definitions
     */
    async deliveryMetricsGet(requestParameters: DeliveryMetricsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeliveryMetricsResponse> {
        const response = await this.deliveryMetricsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * <p>Get details of a specific interest given interest ID.</p> <p>Click <a href=\"https://docs.google.com/spreadsheets/d/1HxL-0Z3p2fgxis9YBP2HWC3tvPrs1hAuHDRtH-NJTIM/edit#gid=118370875\" target=\"_blank\">here</a> for a spreadsheet listing interests and their IDs.</p>
     * Get interest details
     */
    async interestTargetingOptionsGetRaw(requestParameters: InterestTargetingOptionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SingleInterestTargetingOptionResponse>> {
        if (requestParameters['interestId'] == null) {
            throw new runtime.RequiredError(
                'interestId',
                'Required parameter "interestId" was null or undefined when calling interestTargetingOptionsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("pinterest_oauth2", ["ads:read"]);
        }

        const response = await this.request({
            path: `/resources/targeting/interests/{interest_id}`.replace(`{${"interest_id"}}`, encodeURIComponent(String(requestParameters['interestId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SingleInterestTargetingOptionResponseFromJSON(jsonValue));
    }

    /**
     * <p>Get details of a specific interest given interest ID.</p> <p>Click <a href=\"https://docs.google.com/spreadsheets/d/1HxL-0Z3p2fgxis9YBP2HWC3tvPrs1hAuHDRtH-NJTIM/edit#gid=118370875\" target=\"_blank\">here</a> for a spreadsheet listing interests and their IDs.</p>
     * Get interest details
     */
    async interestTargetingOptionsGet(requestParameters: InterestTargetingOptionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SingleInterestTargetingOptionResponse> {
        const response = await this.interestTargetingOptionsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of all lead form question type names. Some questions might not be used.  <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/getting-started/beta-and-advanced-access/\'>Learn more</a>.</strong>
     * Get lead form questions
     */
    async leadFormQuestionsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("pinterest_oauth2", ["ads:read"]);
        }

        const response = await this.request({
            path: `/resources/lead_form_questions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get a list of all lead form question type names. Some questions might not be used.  <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/getting-started/beta-and-advanced-access/\'>Learn more</a>.</strong>
     * Get lead form questions
     */
    async leadFormQuestionsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.leadFormQuestionsGetRaw(initOverrides);
    }

    /**
     * Learn whether conversion or non-conversion metrics are finalized and ready to query.
     * Get metrics ready state
     */
    async metricsReadyStateGetRaw(requestParameters: MetricsReadyStateGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BookClosedResponse>> {
        if (requestParameters['date'] == null) {
            throw new runtime.RequiredError(
                'date',
                'Required parameter "date" was null or undefined when calling metricsReadyStateGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['date'] != null) {
            queryParameters['date'] = requestParameters['date'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("pinterest_oauth2", ["ads:read"]);
        }

        const response = await this.request({
            path: `/resources/metrics_ready_state`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BookClosedResponseFromJSON(jsonValue));
    }

    /**
     * Learn whether conversion or non-conversion metrics are finalized and ready to query.
     * Get metrics ready state
     */
    async metricsReadyStateGet(requestParameters: MetricsReadyStateGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BookClosedResponse> {
        const response = await this.metricsReadyStateGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * <p>You can use targeting values in ads placement to define your intended audience. </p> <p>Targeting metrics are organized around targeting specifications.</p> <p>For more information on ads targeting, see <a class=\"reference external\" href=\"https://help.pinterest.com/en/business/article/audience-targeting\" target=\"_blank\">Audience targeting</a>.</p> <p><b>Sample return:</b></p> <pre class=\"literal-block\"> [{&quot;36313&quot;: &quot;Australia: Moreton Bay - North&quot;, &quot;124735&quot;: &quot;Canada: North Battleford&quot;, &quot;36109&quot;: &quot;Australia: Murray&quot;, &quot;36108&quot;: &quot;Australia: Mid North Coast&quot;, &quot;36101&quot;: &quot;Australia: Capital Region&quot;, &quot;811&quot;: &quot;U.S.: Reno&quot;, &quot;36103&quot;: &quot;Australia: Central West&quot;, &quot;36102&quot;: &quot;Australia: Central Coast&quot;, &quot;36105&quot;: &quot;Australia: Far West and Orana&quot;, &quot;36104&quot;: &quot;Australia: Coffs Harbour - Grafton&quot;, &quot;36107&quot;: &quot;Australia: Illawarra&quot;, &quot;36106&quot;: &quot;Australia: Hunter Valley Exc Newcastle&quot;, &quot;554017&quot;: &quot;New Zealand: Wanganui&quot;, &quot;554016&quot;: &quot;New Zealand: Marlborough&quot;, &quot;554015&quot;: &quot;New Zealand: Gisborne&quot;, &quot;554014&quot;: &quot;New Zealand: Tararua&quot;, &quot;554013&quot;: &quot;New Zealand: Invercargill&quot;, &quot;GR&quot;: &quot;Greece&quot;, &quot;554011&quot;: &quot;New Zealand: Whangarei&quot;, &quot;554010&quot;: &quot;New Zealand: Far North&quot;, &quot;717&quot;: &quot;U.S.: Quincy-Hannibal-Keokuk&quot;, &quot;716&quot;: &quot;U.S.: Baton Rouge&quot;,...}] </pre>
     * Get targeting options
     */
    async targetingOptionsGetRaw(requestParameters: TargetingOptionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<object>>> {
        if (requestParameters['targetingType'] == null) {
            throw new runtime.RequiredError(
                'targetingType',
                'Required parameter "targetingType" was null or undefined when calling targetingOptionsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['clientId'] != null) {
            queryParameters['client_id'] = requestParameters['clientId'];
        }

        if (requestParameters['oauthSignature'] != null) {
            queryParameters['oauth_signature'] = requestParameters['oauthSignature'];
        }

        if (requestParameters['timestamp'] != null) {
            queryParameters['timestamp'] = requestParameters['timestamp'];
        }

        if (requestParameters['adAccountId'] != null) {
            queryParameters['ad_account_id'] = requestParameters['adAccountId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("pinterest_oauth2", ["ads:read"]);
        }

        const response = await this.request({
            path: `/resources/targeting/{targeting_type}`.replace(`{${"targeting_type"}}`, encodeURIComponent(String(requestParameters['targetingType']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * <p>You can use targeting values in ads placement to define your intended audience. </p> <p>Targeting metrics are organized around targeting specifications.</p> <p>For more information on ads targeting, see <a class=\"reference external\" href=\"https://help.pinterest.com/en/business/article/audience-targeting\" target=\"_blank\">Audience targeting</a>.</p> <p><b>Sample return:</b></p> <pre class=\"literal-block\"> [{&quot;36313&quot;: &quot;Australia: Moreton Bay - North&quot;, &quot;124735&quot;: &quot;Canada: North Battleford&quot;, &quot;36109&quot;: &quot;Australia: Murray&quot;, &quot;36108&quot;: &quot;Australia: Mid North Coast&quot;, &quot;36101&quot;: &quot;Australia: Capital Region&quot;, &quot;811&quot;: &quot;U.S.: Reno&quot;, &quot;36103&quot;: &quot;Australia: Central West&quot;, &quot;36102&quot;: &quot;Australia: Central Coast&quot;, &quot;36105&quot;: &quot;Australia: Far West and Orana&quot;, &quot;36104&quot;: &quot;Australia: Coffs Harbour - Grafton&quot;, &quot;36107&quot;: &quot;Australia: Illawarra&quot;, &quot;36106&quot;: &quot;Australia: Hunter Valley Exc Newcastle&quot;, &quot;554017&quot;: &quot;New Zealand: Wanganui&quot;, &quot;554016&quot;: &quot;New Zealand: Marlborough&quot;, &quot;554015&quot;: &quot;New Zealand: Gisborne&quot;, &quot;554014&quot;: &quot;New Zealand: Tararua&quot;, &quot;554013&quot;: &quot;New Zealand: Invercargill&quot;, &quot;GR&quot;: &quot;Greece&quot;, &quot;554011&quot;: &quot;New Zealand: Whangarei&quot;, &quot;554010&quot;: &quot;New Zealand: Far North&quot;, &quot;717&quot;: &quot;U.S.: Quincy-Hannibal-Keokuk&quot;, &quot;716&quot;: &quot;U.S.: Baton Rouge&quot;,...}] </pre>
     * Get targeting options
     */
    async targetingOptionsGet(requestParameters: TargetingOptionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<object>> {
        const response = await this.targetingOptionsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const DeliveryMetricsGetReportTypeEnum = {
    Sync: 'SYNC',
    Async: 'ASYNC'
} as const;
export type DeliveryMetricsGetReportTypeEnum = typeof DeliveryMetricsGetReportTypeEnum[keyof typeof DeliveryMetricsGetReportTypeEnum];
/**
 * @export
 */
export const TargetingOptionsGetTargetingTypeEnum = {
    Apptype: 'APPTYPE',
    Gender: 'GENDER',
    Locale: 'LOCALE',
    AgeBucket: 'AGE_BUCKET',
    Location: 'LOCATION',
    Geo: 'GEO',
    Interest: 'INTEREST',
    Keyword: 'KEYWORD',
    AudienceInclude: 'AUDIENCE_INCLUDE',
    AudienceExclude: 'AUDIENCE_EXCLUDE'
} as const;
export type TargetingOptionsGetTargetingTypeEnum = typeof TargetingOptionsGetTargetingTypeEnum[keyof typeof TargetingOptionsGetTargetingTypeEnum];
