/* tslint:disable */
/* eslint-disable */
/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Board,
  BoardSection,
  BoardSectionsList200Response,
  BoardUpdate,
  BoardsList200Response,
  BoardsListPins200Response,
} from '../models/index';
import {
    BoardFromJSON,
    BoardToJSON,
    BoardSectionFromJSON,
    BoardSectionToJSON,
    BoardSectionsList200ResponseFromJSON,
    BoardSectionsList200ResponseToJSON,
    BoardUpdateFromJSON,
    BoardUpdateToJSON,
    BoardsList200ResponseFromJSON,
    BoardsList200ResponseToJSON,
    BoardsListPins200ResponseFromJSON,
    BoardsListPins200ResponseToJSON,
} from '../models/index';

export interface BoardSectionsCreateRequest {
    boardId: string;
    boardSection: Omit<BoardSection, 'id'>;
    adAccountId?: string;
}

export interface BoardSectionsDeleteRequest {
    boardId: string;
    sectionId: string;
    adAccountId?: string;
}

export interface BoardSectionsListRequest {
    boardId: string;
    adAccountId?: string;
    bookmark?: string;
    pageSize?: number;
}

export interface BoardSectionsListPinsRequest {
    boardId: string;
    sectionId: string;
    adAccountId?: string;
    bookmark?: string;
    pageSize?: number;
}

export interface BoardSectionsUpdateRequest {
    boardId: string;
    sectionId: string;
    boardSection: Omit<BoardSection, 'id'>;
    adAccountId?: string;
}

export interface BoardsCreateRequest {
    board: Omit<Board, 'id'|'created_at'|'board_pins_modified_at'|'collaborator_count'|'pin_count'|'follower_count'|'owner'>;
    adAccountId?: string;
}

export interface BoardsDeleteRequest {
    boardId: string;
    adAccountId?: string;
}

export interface BoardsGetRequest {
    boardId: string;
    adAccountId?: string;
}

export interface BoardsListRequest {
    adAccountId?: string;
    bookmark?: string;
    pageSize?: number;
    privacy?: BoardsListPrivacyEnum;
}

export interface BoardsListPinsRequest {
    boardId: string;
    bookmark?: string;
    pageSize?: number;
    creativeTypes?: Array<BoardsListPinsCreativeTypesEnum>;
    adAccountId?: string;
    pinMetrics?: boolean;
}

export interface BoardsUpdateRequest {
    boardId: string;
    boardUpdate: BoardUpdate;
    adAccountId?: string;
}

/**
 * 
 */
export class BoardsApi extends runtime.BaseAPI {

    /**
     * Create a board section on a board owned by the \"operation user_account\" - or on a group board that has been shared with this account. Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account.
     * Create board section
     */
    async boardSectionsCreateRaw(requestParameters: BoardSectionsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BoardSection>> {
        if (requestParameters['boardId'] == null) {
            throw new runtime.RequiredError(
                'boardId',
                'Required parameter "boardId" was null or undefined when calling boardSectionsCreate().'
            );
        }

        if (requestParameters['boardSection'] == null) {
            throw new runtime.RequiredError(
                'boardSection',
                'Required parameter "boardSection" was null or undefined when calling boardSectionsCreate().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['adAccountId'] != null) {
            queryParameters['ad_account_id'] = requestParameters['adAccountId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("pinterest_oauth2", ["boards:read", "boards:write"]);
        }

        const response = await this.request({
            path: `/boards/{board_id}/sections`.replace(`{${"board_id"}}`, encodeURIComponent(String(requestParameters['boardId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BoardSectionToJSON(requestParameters['boardSection']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BoardSectionFromJSON(jsonValue));
    }

    /**
     * Create a board section on a board owned by the \"operation user_account\" - or on a group board that has been shared with this account. Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account.
     * Create board section
     */
    async boardSectionsCreate(requestParameters: BoardSectionsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BoardSection> {
        const response = await this.boardSectionsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a board section on a board owned by the \"operation user_account\" - or on a group board that has been shared with this account. Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account.
     * Delete board section
     */
    async boardSectionsDeleteRaw(requestParameters: BoardSectionsDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['boardId'] == null) {
            throw new runtime.RequiredError(
                'boardId',
                'Required parameter "boardId" was null or undefined when calling boardSectionsDelete().'
            );
        }

        if (requestParameters['sectionId'] == null) {
            throw new runtime.RequiredError(
                'sectionId',
                'Required parameter "sectionId" was null or undefined when calling boardSectionsDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['adAccountId'] != null) {
            queryParameters['ad_account_id'] = requestParameters['adAccountId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("pinterest_oauth2", ["boards:read", "boards:write"]);
        }

        const response = await this.request({
            path: `/boards/{board_id}/sections/{section_id}`.replace(`{${"board_id"}}`, encodeURIComponent(String(requestParameters['boardId']))).replace(`{${"section_id"}}`, encodeURIComponent(String(requestParameters['sectionId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a board section on a board owned by the \"operation user_account\" - or on a group board that has been shared with this account. Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account.
     * Delete board section
     */
    async boardSectionsDelete(requestParameters: BoardSectionsDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.boardSectionsDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Get a list of all board sections from a board owned by the \"operation user_account\" - or a group board that has been shared with this account. Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account.
     * List board sections
     */
    async boardSectionsListRaw(requestParameters: BoardSectionsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BoardSectionsList200Response>> {
        if (requestParameters['boardId'] == null) {
            throw new runtime.RequiredError(
                'boardId',
                'Required parameter "boardId" was null or undefined when calling boardSectionsList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['adAccountId'] != null) {
            queryParameters['ad_account_id'] = requestParameters['adAccountId'];
        }

        if (requestParameters['bookmark'] != null) {
            queryParameters['bookmark'] = requestParameters['bookmark'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("pinterest_oauth2", ["boards:read"]);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("client_credentials", ["boards:read"]);
        }

        const response = await this.request({
            path: `/boards/{board_id}/sections`.replace(`{${"board_id"}}`, encodeURIComponent(String(requestParameters['boardId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BoardSectionsList200ResponseFromJSON(jsonValue));
    }

    /**
     * Get a list of all board sections from a board owned by the \"operation user_account\" - or a group board that has been shared with this account. Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account.
     * List board sections
     */
    async boardSectionsList(requestParameters: BoardSectionsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BoardSectionsList200Response> {
        const response = await this.boardSectionsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of the Pins on a board section of a board owned by the \"operation user_account\" - or on a group board that has been shared with this account. Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account.
     * List Pins on board section
     */
    async boardSectionsListPinsRaw(requestParameters: BoardSectionsListPinsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BoardsListPins200Response>> {
        if (requestParameters['boardId'] == null) {
            throw new runtime.RequiredError(
                'boardId',
                'Required parameter "boardId" was null or undefined when calling boardSectionsListPins().'
            );
        }

        if (requestParameters['sectionId'] == null) {
            throw new runtime.RequiredError(
                'sectionId',
                'Required parameter "sectionId" was null or undefined when calling boardSectionsListPins().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['adAccountId'] != null) {
            queryParameters['ad_account_id'] = requestParameters['adAccountId'];
        }

        if (requestParameters['bookmark'] != null) {
            queryParameters['bookmark'] = requestParameters['bookmark'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("pinterest_oauth2", ["boards:read", "pins:read"]);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("client_credentials", ["boards:read", "pins:read"]);
        }

        const response = await this.request({
            path: `/boards/{board_id}/sections/{section_id}/pins`.replace(`{${"board_id"}}`, encodeURIComponent(String(requestParameters['boardId']))).replace(`{${"section_id"}}`, encodeURIComponent(String(requestParameters['sectionId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BoardsListPins200ResponseFromJSON(jsonValue));
    }

    /**
     * Get a list of the Pins on a board section of a board owned by the \"operation user_account\" - or on a group board that has been shared with this account. Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account.
     * List Pins on board section
     */
    async boardSectionsListPins(requestParameters: BoardSectionsListPinsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BoardsListPins200Response> {
        const response = await this.boardSectionsListPinsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a board section on a board owned by the \"operation user_account\" - or on a group board that has been shared with this account. Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account.
     * Update board section
     */
    async boardSectionsUpdateRaw(requestParameters: BoardSectionsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BoardSection>> {
        if (requestParameters['boardId'] == null) {
            throw new runtime.RequiredError(
                'boardId',
                'Required parameter "boardId" was null or undefined when calling boardSectionsUpdate().'
            );
        }

        if (requestParameters['sectionId'] == null) {
            throw new runtime.RequiredError(
                'sectionId',
                'Required parameter "sectionId" was null or undefined when calling boardSectionsUpdate().'
            );
        }

        if (requestParameters['boardSection'] == null) {
            throw new runtime.RequiredError(
                'boardSection',
                'Required parameter "boardSection" was null or undefined when calling boardSectionsUpdate().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['adAccountId'] != null) {
            queryParameters['ad_account_id'] = requestParameters['adAccountId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("pinterest_oauth2", ["boards:read", "boards:write"]);
        }

        const response = await this.request({
            path: `/boards/{board_id}/sections/{section_id}`.replace(`{${"board_id"}}`, encodeURIComponent(String(requestParameters['boardId']))).replace(`{${"section_id"}}`, encodeURIComponent(String(requestParameters['sectionId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: BoardSectionToJSON(requestParameters['boardSection']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BoardSectionFromJSON(jsonValue));
    }

    /**
     * Update a board section on a board owned by the \"operation user_account\" - or on a group board that has been shared with this account. Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account.
     * Update board section
     */
    async boardSectionsUpdate(requestParameters: BoardSectionsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BoardSection> {
        const response = await this.boardSectionsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a board owned by the \"operation user_account\". Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account.
     * Create board
     */
    async boardsCreateRaw(requestParameters: BoardsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Board>> {
        if (requestParameters['board'] == null) {
            throw new runtime.RequiredError(
                'board',
                'Required parameter "board" was null or undefined when calling boardsCreate().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['adAccountId'] != null) {
            queryParameters['ad_account_id'] = requestParameters['adAccountId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("pinterest_oauth2", ["boards:read", "boards:write"]);
        }

        const response = await this.request({
            path: `/boards`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BoardToJSON(requestParameters['board']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BoardFromJSON(jsonValue));
    }

    /**
     * Create a board owned by the \"operation user_account\". Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account.
     * Create board
     */
    async boardsCreate(requestParameters: BoardsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Board> {
        const response = await this.boardsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a board owned by the \"operation user_account\". - Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account.
     * Delete board
     */
    async boardsDeleteRaw(requestParameters: BoardsDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['boardId'] == null) {
            throw new runtime.RequiredError(
                'boardId',
                'Required parameter "boardId" was null or undefined when calling boardsDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['adAccountId'] != null) {
            queryParameters['ad_account_id'] = requestParameters['adAccountId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("pinterest_oauth2", ["boards:read", "boards:write"]);
        }

        const response = await this.request({
            path: `/boards/{board_id}`.replace(`{${"board_id"}}`, encodeURIComponent(String(requestParameters['boardId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a board owned by the \"operation user_account\". - Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account.
     * Delete board
     */
    async boardsDelete(requestParameters: BoardsDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.boardsDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Get a board owned by the operation user_account - or a group board that has been shared with this account. - Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account.
     * Get board
     */
    async boardsGetRaw(requestParameters: BoardsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Board>> {
        if (requestParameters['boardId'] == null) {
            throw new runtime.RequiredError(
                'boardId',
                'Required parameter "boardId" was null or undefined when calling boardsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['adAccountId'] != null) {
            queryParameters['ad_account_id'] = requestParameters['adAccountId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("pinterest_oauth2", ["boards:read"]);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("client_credentials", ["boards:read"]);
        }

        const response = await this.request({
            path: `/boards/{board_id}`.replace(`{${"board_id"}}`, encodeURIComponent(String(requestParameters['boardId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BoardFromJSON(jsonValue));
    }

    /**
     * Get a board owned by the operation user_account - or a group board that has been shared with this account. - Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account.
     * Get board
     */
    async boardsGet(requestParameters: BoardsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Board> {
        const response = await this.boardsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of the boards owned by the \"operation user_account\" + group boards where this account is a collaborator Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\". Optional: Specify a privacy type (public, protected, or secret) to indicate which boards to return. - If no privacy is specified, all boards that can be returned (based on the scopes of the token and ad_account role if applicable) will be returned.
     * List boards
     */
    async boardsListRaw(requestParameters: BoardsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BoardsList200Response>> {
        const queryParameters: any = {};

        if (requestParameters['adAccountId'] != null) {
            queryParameters['ad_account_id'] = requestParameters['adAccountId'];
        }

        if (requestParameters['bookmark'] != null) {
            queryParameters['bookmark'] = requestParameters['bookmark'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        if (requestParameters['privacy'] != null) {
            queryParameters['privacy'] = requestParameters['privacy'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("pinterest_oauth2", ["boards:read"]);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("client_credentials", ["boards:read"]);
        }

        const response = await this.request({
            path: `/boards`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BoardsList200ResponseFromJSON(jsonValue));
    }

    /**
     * Get a list of the boards owned by the \"operation user_account\" + group boards where this account is a collaborator Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\". Optional: Specify a privacy type (public, protected, or secret) to indicate which boards to return. - If no privacy is specified, all boards that can be returned (based on the scopes of the token and ad_account role if applicable) will be returned.
     * List boards
     */
    async boardsList(requestParameters: BoardsListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BoardsList200Response> {
        const response = await this.boardsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of the Pins on a board owned by the \"operation user_account\" - or on a group board that has been shared with this account. - Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account.
     * List Pins on board
     */
    async boardsListPinsRaw(requestParameters: BoardsListPinsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BoardsListPins200Response>> {
        if (requestParameters['boardId'] == null) {
            throw new runtime.RequiredError(
                'boardId',
                'Required parameter "boardId" was null or undefined when calling boardsListPins().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['bookmark'] != null) {
            queryParameters['bookmark'] = requestParameters['bookmark'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        if (requestParameters['creativeTypes'] != null) {
            queryParameters['creative_types'] = requestParameters['creativeTypes'];
        }

        if (requestParameters['adAccountId'] != null) {
            queryParameters['ad_account_id'] = requestParameters['adAccountId'];
        }

        if (requestParameters['pinMetrics'] != null) {
            queryParameters['pin_metrics'] = requestParameters['pinMetrics'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("pinterest_oauth2", ["boards:read", "pins:read"]);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("client_credentials", ["boards:read", "pins:read"]);
        }

        const response = await this.request({
            path: `/boards/{board_id}/pins`.replace(`{${"board_id"}}`, encodeURIComponent(String(requestParameters['boardId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BoardsListPins200ResponseFromJSON(jsonValue));
    }

    /**
     * Get a list of the Pins on a board owned by the \"operation user_account\" - or on a group board that has been shared with this account. - Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account.
     * List Pins on board
     */
    async boardsListPins(requestParameters: BoardsListPinsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BoardsListPins200Response> {
        const response = await this.boardsListPinsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a board owned by the \"operating user_account\". - Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account.
     * Update board
     */
    async boardsUpdateRaw(requestParameters: BoardsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Board>> {
        if (requestParameters['boardId'] == null) {
            throw new runtime.RequiredError(
                'boardId',
                'Required parameter "boardId" was null or undefined when calling boardsUpdate().'
            );
        }

        if (requestParameters['boardUpdate'] == null) {
            throw new runtime.RequiredError(
                'boardUpdate',
                'Required parameter "boardUpdate" was null or undefined when calling boardsUpdate().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['adAccountId'] != null) {
            queryParameters['ad_account_id'] = requestParameters['adAccountId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("pinterest_oauth2", ["boards:read", "boards:write"]);
        }

        const response = await this.request({
            path: `/boards/{board_id}`.replace(`{${"board_id"}}`, encodeURIComponent(String(requestParameters['boardId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: BoardUpdateToJSON(requestParameters['boardUpdate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BoardFromJSON(jsonValue));
    }

    /**
     * Update a board owned by the \"operating user_account\". - Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account.
     * Update board
     */
    async boardsUpdate(requestParameters: BoardsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Board> {
        const response = await this.boardsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const BoardsListPrivacyEnum = {
    All: 'ALL',
    Protected: 'PROTECTED',
    Public: 'PUBLIC',
    Secret: 'SECRET',
    PublicAndSecret: 'PUBLIC_AND_SECRET'
} as const;
export type BoardsListPrivacyEnum = typeof BoardsListPrivacyEnum[keyof typeof BoardsListPrivacyEnum];
/**
 * @export
 */
export const BoardsListPinsCreativeTypesEnum = {
    Regular: 'REGULAR',
    Video: 'VIDEO',
    Shopping: 'SHOPPING',
    Carousel: 'CAROUSEL',
    MaxVideo: 'MAX_VIDEO',
    ShopThePin: 'SHOP_THE_PIN',
    Collection: 'COLLECTION',
    Idea: 'IDEA'
} as const;
export type BoardsListPinsCreativeTypesEnum = typeof BoardsListPinsCreativeTypesEnum[keyof typeof BoardsListPinsCreativeTypesEnum];
