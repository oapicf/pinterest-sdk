/* tslint:disable */
/* eslint-disable */
/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AdAccountCreateSubscriptionRequest,
  AdAccountCreateSubscriptionResponse,
  AdAccountGetSubscriptionResponse,
  AdAccountsSubscriptionsGetList200Response,
} from '../models/index';
import {
    AdAccountCreateSubscriptionRequestFromJSON,
    AdAccountCreateSubscriptionRequestToJSON,
    AdAccountCreateSubscriptionResponseFromJSON,
    AdAccountCreateSubscriptionResponseToJSON,
    AdAccountGetSubscriptionResponseFromJSON,
    AdAccountGetSubscriptionResponseToJSON,
    AdAccountsSubscriptionsGetList200ResponseFromJSON,
    AdAccountsSubscriptionsGetList200ResponseToJSON,
} from '../models/index';

export interface AdAccountsSubscriptionsDelByIdRequest {
    adAccountId: string;
    subscriptionId: string;
}

export interface AdAccountsSubscriptionsGetByIdRequest {
    adAccountId: string;
    subscriptionId: string;
}

export interface AdAccountsSubscriptionsGetListRequest {
    adAccountId: string;
    pageSize?: number;
    bookmark?: string;
}

export interface AdAccountsSubscriptionsPostRequest {
    adAccountId: string;
    adAccountCreateSubscriptionRequest: AdAccountCreateSubscriptionRequest;
}

/**
 * 
 */
export class LeadAdsApi extends runtime.BaseAPI {

    /**
     * Delete an existing lead ads webhook subscription by ID. - Only requests for the OWNER or ADMIN of the ad_account will be allowed.  <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/getting-started/beta-and-advanced-access/\'>Learn more</a>.</strong>
     * Delete lead ads subscription
     */
    async adAccountsSubscriptionsDelByIdRaw(requestParameters: AdAccountsSubscriptionsDelByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['adAccountId'] == null) {
            throw new runtime.RequiredError(
                'adAccountId',
                'Required parameter "adAccountId" was null or undefined when calling adAccountsSubscriptionsDelById().'
            );
        }

        if (requestParameters['subscriptionId'] == null) {
            throw new runtime.RequiredError(
                'subscriptionId',
                'Required parameter "subscriptionId" was null or undefined when calling adAccountsSubscriptionsDelById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("pinterest_oauth2", ["ads:write"]);
        }

        const response = await this.request({
            path: `/ad_accounts/{ad_account_id}/leads/subscriptions/{subscription_id}`.replace(`{${"ad_account_id"}}`, encodeURIComponent(String(requestParameters['adAccountId']))).replace(`{${"subscription_id"}}`, encodeURIComponent(String(requestParameters['subscriptionId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete an existing lead ads webhook subscription by ID. - Only requests for the OWNER or ADMIN of the ad_account will be allowed.  <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/getting-started/beta-and-advanced-access/\'>Learn more</a>.</strong>
     * Delete lead ads subscription
     */
    async adAccountsSubscriptionsDelById(requestParameters: AdAccountsSubscriptionsDelByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adAccountsSubscriptionsDelByIdRaw(requestParameters, initOverrides);
    }

    /**
     * Get a specific lead ads subscription record. - Only requests for the OWNER or ADMIN of the ad_account will be allowed.  <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/getting-started/beta-and-advanced-access/\'>Learn more</a>.</strong>
     * Get lead ads subscription
     */
    async adAccountsSubscriptionsGetByIdRaw(requestParameters: AdAccountsSubscriptionsGetByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdAccountGetSubscriptionResponse>> {
        if (requestParameters['adAccountId'] == null) {
            throw new runtime.RequiredError(
                'adAccountId',
                'Required parameter "adAccountId" was null or undefined when calling adAccountsSubscriptionsGetById().'
            );
        }

        if (requestParameters['subscriptionId'] == null) {
            throw new runtime.RequiredError(
                'subscriptionId',
                'Required parameter "subscriptionId" was null or undefined when calling adAccountsSubscriptionsGetById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("pinterest_oauth2", ["ads:read"]);
        }

        const response = await this.request({
            path: `/ad_accounts/{ad_account_id}/leads/subscriptions/{subscription_id}`.replace(`{${"ad_account_id"}}`, encodeURIComponent(String(requestParameters['adAccountId']))).replace(`{${"subscription_id"}}`, encodeURIComponent(String(requestParameters['subscriptionId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AdAccountGetSubscriptionResponseFromJSON(jsonValue));
    }

    /**
     * Get a specific lead ads subscription record. - Only requests for the OWNER or ADMIN of the ad_account will be allowed.  <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/getting-started/beta-and-advanced-access/\'>Learn more</a>.</strong>
     * Get lead ads subscription
     */
    async adAccountsSubscriptionsGetById(requestParameters: AdAccountsSubscriptionsGetByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdAccountGetSubscriptionResponse> {
        const response = await this.adAccountsSubscriptionsGetByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the advertiser\'s list of lead ads subscriptions. - Only requests for the OWNER or ADMIN of the ad_account will be allowed.  <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/getting-started/beta-and-advanced-access/\'>Learn more</a>.</strong>
     * Get lead ads subscriptions
     */
    async adAccountsSubscriptionsGetListRaw(requestParameters: AdAccountsSubscriptionsGetListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdAccountsSubscriptionsGetList200Response>> {
        if (requestParameters['adAccountId'] == null) {
            throw new runtime.RequiredError(
                'adAccountId',
                'Required parameter "adAccountId" was null or undefined when calling adAccountsSubscriptionsGetList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        if (requestParameters['bookmark'] != null) {
            queryParameters['bookmark'] = requestParameters['bookmark'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("pinterest_oauth2", ["ads:read"]);
        }

        const response = await this.request({
            path: `/ad_accounts/{ad_account_id}/leads/subscriptions`.replace(`{${"ad_account_id"}}`, encodeURIComponent(String(requestParameters['adAccountId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AdAccountsSubscriptionsGetList200ResponseFromJSON(jsonValue));
    }

    /**
     * Get the advertiser\'s list of lead ads subscriptions. - Only requests for the OWNER or ADMIN of the ad_account will be allowed.  <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/getting-started/beta-and-advanced-access/\'>Learn more</a>.</strong>
     * Get lead ads subscriptions
     */
    async adAccountsSubscriptionsGetList(requestParameters: AdAccountsSubscriptionsGetListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdAccountsSubscriptionsGetList200Response> {
        const response = await this.adAccountsSubscriptionsGetListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a lead ads webhook subscription. Subscriptions allow Pinterest to deliver lead data from Ads Manager directly to the subscriber. Subscriptions can exist for a specific lead form or at ad account level. - Only requests for the OWNER or ADMIN of the ad_account will be allowed. - Advertisers can set up multiple integrations using ad_account_id + lead_form_id but only one integration per unique records. - For data security, egress lead data is encrypted with AES-256-GCM.  <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/getting-started/beta-and-advanced-access/\'>Learn more</a>.</strong>
     * Create lead ads subscription
     */
    async adAccountsSubscriptionsPostRaw(requestParameters: AdAccountsSubscriptionsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdAccountCreateSubscriptionResponse>> {
        if (requestParameters['adAccountId'] == null) {
            throw new runtime.RequiredError(
                'adAccountId',
                'Required parameter "adAccountId" was null or undefined when calling adAccountsSubscriptionsPost().'
            );
        }

        if (requestParameters['adAccountCreateSubscriptionRequest'] == null) {
            throw new runtime.RequiredError(
                'adAccountCreateSubscriptionRequest',
                'Required parameter "adAccountCreateSubscriptionRequest" was null or undefined when calling adAccountsSubscriptionsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("pinterest_oauth2", ["ads:write"]);
        }

        const response = await this.request({
            path: `/ad_accounts/{ad_account_id}/leads/subscriptions`.replace(`{${"ad_account_id"}}`, encodeURIComponent(String(requestParameters['adAccountId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AdAccountCreateSubscriptionRequestToJSON(requestParameters['adAccountCreateSubscriptionRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AdAccountCreateSubscriptionResponseFromJSON(jsonValue));
    }

    /**
     * Create a lead ads webhook subscription. Subscriptions allow Pinterest to deliver lead data from Ads Manager directly to the subscriber. Subscriptions can exist for a specific lead form or at ad account level. - Only requests for the OWNER or ADMIN of the ad_account will be allowed. - Advertisers can set up multiple integrations using ad_account_id + lead_form_id but only one integration per unique records. - For data security, egress lead data is encrypted with AES-256-GCM.  <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/getting-started/beta-and-advanced-access/\'>Learn more</a>.</strong>
     * Create lead ads subscription
     */
    async adAccountsSubscriptionsPost(requestParameters: AdAccountsSubscriptionsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdAccountCreateSubscriptionResponse> {
        const response = await this.adAccountsSubscriptionsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
