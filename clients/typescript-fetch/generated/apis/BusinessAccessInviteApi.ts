/* tslint:disable */
/* eslint-disable */
/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AuthRespondInvitesBody,
  CancelInvitesBody,
  CreateAssetAccessRequestBody,
  CreateAssetAccessRequestResponse,
  CreateAssetInvitesRequest,
  CreateInvitesResultsResponseArray,
  CreateMembershipOrPartnershipInvitesBody,
  DeleteInvitesResultsResponseArray,
  GetInvites200Response,
  InviteType,
  RespondToInvitesResponseArray,
  UpdateInvitesResultsResponseArray,
} from '../models/index';
import {
    AuthRespondInvitesBodyFromJSON,
    AuthRespondInvitesBodyToJSON,
    CancelInvitesBodyFromJSON,
    CancelInvitesBodyToJSON,
    CreateAssetAccessRequestBodyFromJSON,
    CreateAssetAccessRequestBodyToJSON,
    CreateAssetAccessRequestResponseFromJSON,
    CreateAssetAccessRequestResponseToJSON,
    CreateAssetInvitesRequestFromJSON,
    CreateAssetInvitesRequestToJSON,
    CreateInvitesResultsResponseArrayFromJSON,
    CreateInvitesResultsResponseArrayToJSON,
    CreateMembershipOrPartnershipInvitesBodyFromJSON,
    CreateMembershipOrPartnershipInvitesBodyToJSON,
    DeleteInvitesResultsResponseArrayFromJSON,
    DeleteInvitesResultsResponseArrayToJSON,
    GetInvites200ResponseFromJSON,
    GetInvites200ResponseToJSON,
    InviteTypeFromJSON,
    InviteTypeToJSON,
    RespondToInvitesResponseArrayFromJSON,
    RespondToInvitesResponseArrayToJSON,
    UpdateInvitesResultsResponseArrayFromJSON,
    UpdateInvitesResultsResponseArrayToJSON,
} from '../models/index';

export interface AssetAccessRequestsCreateRequest {
    businessId: string;
    createAssetAccessRequestBody: CreateAssetAccessRequestBody;
}

export interface CancelInvitesOrRequestsRequest {
    businessId: string;
    cancelInvitesBody: CancelInvitesBody;
}

export interface CreateAssetInvitesOperationRequest {
    businessId: string;
    createAssetInvitesRequest: CreateAssetInvitesRequest;
}

export interface CreateMembershipOrPartnershipInvitesRequest {
    businessId: string;
    createMembershipOrPartnershipInvitesBody: CreateMembershipOrPartnershipInvitesBody;
}

export interface GetInvitesRequest {
    businessId: string;
    isMember?: boolean;
    inviteStatus?: Array<GetInvitesInviteStatusEnum>;
    inviteType?: InviteType;
    bookmark?: string;
    pageSize?: number;
}

export interface RespondBusinessAccessInvitesRequest {
    authRespondInvitesBody: AuthRespondInvitesBody;
}

/**
 * 
 */
export class BusinessAccessInviteApi extends runtime.BaseAPI {

    /**
     * Create a request to access an existing partner\'s assets with the specified permissions. The request will be sent to the partner for approval. The assets that can be requested are ad accounts and profiles.
     * Create a request to access an existing partner\'s assets.
     */
    async assetAccessRequestsCreateRaw(requestParameters: AssetAccessRequestsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateAssetAccessRequestResponse>> {
        if (requestParameters['businessId'] == null) {
            throw new runtime.RequiredError(
                'businessId',
                'Required parameter "businessId" was null or undefined when calling assetAccessRequestsCreate().'
            );
        }

        if (requestParameters['createAssetAccessRequestBody'] == null) {
            throw new runtime.RequiredError(
                'createAssetAccessRequestBody',
                'Required parameter "createAssetAccessRequestBody" was null or undefined when calling assetAccessRequestsCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("pinterest_oauth2", ["biz_access:read", "biz_access:write"]);
        }

        const response = await this.request({
            path: `/businesses/{business_id}/requests/assets/access`.replace(`{${"business_id"}}`, encodeURIComponent(String(requestParameters['businessId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateAssetAccessRequestBodyToJSON(requestParameters['createAssetAccessRequestBody']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateAssetAccessRequestResponseFromJSON(jsonValue));
    }

    /**
     * Create a request to access an existing partner\'s assets with the specified permissions. The request will be sent to the partner for approval. The assets that can be requested are ad accounts and profiles.
     * Create a request to access an existing partner\'s assets.
     */
    async assetAccessRequestsCreate(requestParameters: AssetAccessRequestsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateAssetAccessRequestResponse> {
        const response = await this.assetAccessRequestsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Cancel membership/partnership invites and/or requests.
     * Cancel invites/requests
     */
    async cancelInvitesOrRequestsRaw(requestParameters: CancelInvitesOrRequestsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteInvitesResultsResponseArray>> {
        if (requestParameters['businessId'] == null) {
            throw new runtime.RequiredError(
                'businessId',
                'Required parameter "businessId" was null or undefined when calling cancelInvitesOrRequests().'
            );
        }

        if (requestParameters['cancelInvitesBody'] == null) {
            throw new runtime.RequiredError(
                'cancelInvitesBody',
                'Required parameter "cancelInvitesBody" was null or undefined when calling cancelInvitesOrRequests().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("pinterest_oauth2", ["biz_access:write"]);
        }

        const response = await this.request({
            path: `/businesses/{business_id}/invites`.replace(`{${"business_id"}}`, encodeURIComponent(String(requestParameters['businessId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: CancelInvitesBodyToJSON(requestParameters['cancelInvitesBody']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteInvitesResultsResponseArrayFromJSON(jsonValue));
    }

    /**
     * Cancel membership/partnership invites and/or requests.
     * Cancel invites/requests
     */
    async cancelInvitesOrRequests(requestParameters: CancelInvitesOrRequestsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteInvitesResultsResponseArray> {
        const response = await this.cancelInvitesOrRequestsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Assign asset permissions information to an existing invite/request. Can be used to: - Request access to a partner\'s asset. Note: This is only for when no existing partnership exists. If an existing   partnership exists, use \"Create a request to access an existing partner\'s assets\" to request access to your   partner\'s assets.     - invite_type=\"PARTNER_REQUEST\" - Invite a partner to access your business assets. Note: This is only for when there is no existing partnership.   If there is an existing partnership, use \"Assign/Update partner asset permissions\" to assign a partner access to   new assets.     - invite_type=\"PARTNER_INVITE\" - Invite a member to access your business assets. Note: This is only for when there is no existing membership.   If there is an existing membership, use \"Assign/Update member asset permissions\" to assign a member access to new   assets.     - invite_type=\"MEMBER_INVITE\"  To learn more about permission levels, visit https://help.pinterest.com/en/business/article/business-manager-overview.
     * Update invite/request with an asset permission
     */
    async createAssetInvitesRaw(requestParameters: CreateAssetInvitesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateInvitesResultsResponseArray>> {
        if (requestParameters['businessId'] == null) {
            throw new runtime.RequiredError(
                'businessId',
                'Required parameter "businessId" was null or undefined when calling createAssetInvites().'
            );
        }

        if (requestParameters['createAssetInvitesRequest'] == null) {
            throw new runtime.RequiredError(
                'createAssetInvitesRequest',
                'Required parameter "createAssetInvitesRequest" was null or undefined when calling createAssetInvites().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("pinterest_oauth2", ["biz_access:read", "biz_access:write"]);
        }

        const response = await this.request({
            path: `/businesses/{business_id}/invites/assets/access`.replace(`{${"business_id"}}`, encodeURIComponent(String(requestParameters['businessId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateAssetInvitesRequestToJSON(requestParameters['createAssetInvitesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateInvitesResultsResponseArrayFromJSON(jsonValue));
    }

    /**
     * Assign asset permissions information to an existing invite/request. Can be used to: - Request access to a partner\'s asset. Note: This is only for when no existing partnership exists. If an existing   partnership exists, use \"Create a request to access an existing partner\'s assets\" to request access to your   partner\'s assets.     - invite_type=\"PARTNER_REQUEST\" - Invite a partner to access your business assets. Note: This is only for when there is no existing partnership.   If there is an existing partnership, use \"Assign/Update partner asset permissions\" to assign a partner access to   new assets.     - invite_type=\"PARTNER_INVITE\" - Invite a member to access your business assets. Note: This is only for when there is no existing membership.   If there is an existing membership, use \"Assign/Update member asset permissions\" to assign a member access to new   assets.     - invite_type=\"MEMBER_INVITE\"  To learn more about permission levels, visit https://help.pinterest.com/en/business/article/business-manager-overview.
     * Update invite/request with an asset permission
     */
    async createAssetInvites(requestParameters: CreateAssetInvitesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateInvitesResultsResponseArray> {
        const response = await this.createAssetInvitesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create batch invites or requests. Can create batch invites or requests as described below. - Invite members to join the business. This would required specifying the following:     - invite_type=\"MEMBER_INVITE\"     - business_role=\"EMPLOYEE\" OR business_role=\"BIZ_ADMIN\" (To learn more about business roles, visit     https://help.pinterest.com/en/business/article/profile-permissions-in-business-access.)     - members - Invite partners to access your business assets. This would require specifying the following:     - invite_type=\"PARTNER_INVITE\"     - business_role=\"PARTNER\"     - partners - Request to be a partner so you can access their assets. This would require specifying the following:     - invite_type=\"PARTNER_REQUEST\"     - business_role=\"PARTNER\"     - partners
     * Create invites or requests
     */
    async createMembershipOrPartnershipInvitesRaw(requestParameters: CreateMembershipOrPartnershipInvitesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateInvitesResultsResponseArray>> {
        if (requestParameters['businessId'] == null) {
            throw new runtime.RequiredError(
                'businessId',
                'Required parameter "businessId" was null or undefined when calling createMembershipOrPartnershipInvites().'
            );
        }

        if (requestParameters['createMembershipOrPartnershipInvitesBody'] == null) {
            throw new runtime.RequiredError(
                'createMembershipOrPartnershipInvitesBody',
                'Required parameter "createMembershipOrPartnershipInvitesBody" was null or undefined when calling createMembershipOrPartnershipInvites().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("pinterest_oauth2", ["biz_access:write"]);
        }

        const response = await this.request({
            path: `/businesses/{business_id}/invites`.replace(`{${"business_id"}}`, encodeURIComponent(String(requestParameters['businessId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateMembershipOrPartnershipInvitesBodyToJSON(requestParameters['createMembershipOrPartnershipInvitesBody']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateInvitesResultsResponseArrayFromJSON(jsonValue));
    }

    /**
     * Create batch invites or requests. Can create batch invites or requests as described below. - Invite members to join the business. This would required specifying the following:     - invite_type=\"MEMBER_INVITE\"     - business_role=\"EMPLOYEE\" OR business_role=\"BIZ_ADMIN\" (To learn more about business roles, visit     https://help.pinterest.com/en/business/article/profile-permissions-in-business-access.)     - members - Invite partners to access your business assets. This would require specifying the following:     - invite_type=\"PARTNER_INVITE\"     - business_role=\"PARTNER\"     - partners - Request to be a partner so you can access their assets. This would require specifying the following:     - invite_type=\"PARTNER_REQUEST\"     - business_role=\"PARTNER\"     - partners
     * Create invites or requests
     */
    async createMembershipOrPartnershipInvites(requestParameters: CreateMembershipOrPartnershipInvitesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateInvitesResultsResponseArray> {
        const response = await this.createMembershipOrPartnershipInvitesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the membership/partnership invites and/or requests for the authorized user.
     * Get invites/requests
     */
    async getInvitesRaw(requestParameters: GetInvitesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetInvites200Response>> {
        if (requestParameters['businessId'] == null) {
            throw new runtime.RequiredError(
                'businessId',
                'Required parameter "businessId" was null or undefined when calling getInvites().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['isMember'] != null) {
            queryParameters['is_member'] = requestParameters['isMember'];
        }

        if (requestParameters['inviteStatus'] != null) {
            queryParameters['invite_status'] = requestParameters['inviteStatus'];
        }

        if (requestParameters['inviteType'] != null) {
            queryParameters['invite_type'] = requestParameters['inviteType'];
        }

        if (requestParameters['bookmark'] != null) {
            queryParameters['bookmark'] = requestParameters['bookmark'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("pinterest_oauth2", ["biz_access:read"]);
        }

        const response = await this.request({
            path: `/businesses/{business_id}/invites`.replace(`{${"business_id"}}`, encodeURIComponent(String(requestParameters['businessId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetInvites200ResponseFromJSON(jsonValue));
    }

    /**
     * Get the membership/partnership invites and/or requests for the authorized user.
     * Get invites/requests
     */
    async getInvites(requestParameters: GetInvitesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetInvites200Response> {
        const response = await this.getInvitesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Accept or decline invites or requests.
     * Accept or decline an invite/request
     */
    async respondBusinessAccessInvitesRaw(requestParameters: RespondBusinessAccessInvitesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RespondToInvitesResponseArray>> {
        if (requestParameters['authRespondInvitesBody'] == null) {
            throw new runtime.RequiredError(
                'authRespondInvitesBody',
                'Required parameter "authRespondInvitesBody" was null or undefined when calling respondBusinessAccessInvites().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("pinterest_oauth2", ["biz_access:read", "biz_access:write"]);
        }

        const response = await this.request({
            path: `/businesses/invites`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: AuthRespondInvitesBodyToJSON(requestParameters['authRespondInvitesBody']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RespondToInvitesResponseArrayFromJSON(jsonValue));
    }

    /**
     * Accept or decline invites or requests.
     * Accept or decline an invite/request
     */
    async respondBusinessAccessInvites(requestParameters: RespondBusinessAccessInvitesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RespondToInvitesResponseArray> {
        const response = await this.respondBusinessAccessInvitesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetInvitesInviteStatusEnum = {
    Pending: 'PENDING',
    Expired: 'EXPIRED'
} as const;
export type GetInvitesInviteStatusEnum = typeof GetInvitesInviteStatusEnum[keyof typeof GetInvitesInviteStatusEnum];
