/* tslint:disable */
/* eslint-disable */
/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PinsList200Response,
  SearchPartnerPins200Response,
  SearchUserBoardsGet200Response,
} from '../models/index';
import {
    PinsList200ResponseFromJSON,
    PinsList200ResponseToJSON,
    SearchPartnerPins200ResponseFromJSON,
    SearchPartnerPins200ResponseToJSON,
    SearchUserBoardsGet200ResponseFromJSON,
    SearchUserBoardsGet200ResponseToJSON,
} from '../models/index';

export interface SearchPartnerPinsRequest {
    term: string;
    countryCode: string;
    bookmark?: string;
    locale?: string;
    limit?: number;
}

export interface SearchUserBoardsGetRequest {
    adAccountId?: string;
    bookmark?: string;
    pageSize?: number;
    query?: string;
}

export interface SearchUserPinsListRequest {
    query: string;
    adAccountId?: string;
    bookmark?: string;
}

/**
 * 
 */
export class SearchApi extends runtime.BaseAPI {

    /**
     * <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/getting-started/beta-and-advanced-access/\'>Learn more</a>.</strong>  Get the top 10 Pins by a given search term.
     * Search pins by a given search term
     */
    async searchPartnerPinsRaw(requestParameters: SearchPartnerPinsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchPartnerPins200Response>> {
        if (requestParameters['term'] == null) {
            throw new runtime.RequiredError(
                'term',
                'Required parameter "term" was null or undefined when calling searchPartnerPins().'
            );
        }

        if (requestParameters['countryCode'] == null) {
            throw new runtime.RequiredError(
                'countryCode',
                'Required parameter "countryCode" was null or undefined when calling searchPartnerPins().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['term'] != null) {
            queryParameters['term'] = requestParameters['term'];
        }

        if (requestParameters['countryCode'] != null) {
            queryParameters['country_code'] = requestParameters['countryCode'];
        }

        if (requestParameters['bookmark'] != null) {
            queryParameters['bookmark'] = requestParameters['bookmark'];
        }

        if (requestParameters['locale'] != null) {
            queryParameters['locale'] = requestParameters['locale'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("pinterest_oauth2", ["boards:read", "pins:read"]);
        }

        const response = await this.request({
            path: `/search/partner/pins`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SearchPartnerPins200ResponseFromJSON(jsonValue));
    }

    /**
     * <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/getting-started/beta-and-advanced-access/\'>Learn more</a>.</strong>  Get the top 10 Pins by a given search term.
     * Search pins by a given search term
     */
    async searchPartnerPins(requestParameters: SearchPartnerPinsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchPartnerPins200Response> {
        const response = await this.searchPartnerPinsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search for boards for the \"operation user_account\". This includes boards of all board types. - By default, the \"operation user_account\" is the token user_account.  If using Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\". See <a href=\'/docs/getting-started/using-business-access/\'>Understanding Business Access</a> for more information.
     * Search user\'s boards
     */
    async searchUserBoardsGetRaw(requestParameters: SearchUserBoardsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchUserBoardsGet200Response>> {
        const queryParameters: any = {};

        if (requestParameters['adAccountId'] != null) {
            queryParameters['ad_account_id'] = requestParameters['adAccountId'];
        }

        if (requestParameters['bookmark'] != null) {
            queryParameters['bookmark'] = requestParameters['bookmark'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        if (requestParameters['query'] != null) {
            queryParameters['query'] = requestParameters['query'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("pinterest_oauth2", ["boards:read", "boards:read_secret"]);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("client_credentials", ["boards:read", "boards:read_secret"]);
        }

        const response = await this.request({
            path: `/search/boards`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SearchUserBoardsGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Search for boards for the \"operation user_account\". This includes boards of all board types. - By default, the \"operation user_account\" is the token user_account.  If using Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\". See <a href=\'/docs/getting-started/using-business-access/\'>Understanding Business Access</a> for more information.
     * Search user\'s boards
     */
    async searchUserBoardsGet(requestParameters: SearchUserBoardsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchUserBoardsGet200Response> {
        const response = await this.searchUserBoardsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search for pins for the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account.  If using Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\". See <a href=\'/docs/getting-started/using-business-access/\'>Understanding Business Access</a> for more information.
     * Search user\'s Pins
     */
    async searchUserPinsListRaw(requestParameters: SearchUserPinsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PinsList200Response>> {
        if (requestParameters['query'] == null) {
            throw new runtime.RequiredError(
                'query',
                'Required parameter "query" was null or undefined when calling searchUserPinsList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['adAccountId'] != null) {
            queryParameters['ad_account_id'] = requestParameters['adAccountId'];
        }

        if (requestParameters['query'] != null) {
            queryParameters['query'] = requestParameters['query'];
        }

        if (requestParameters['bookmark'] != null) {
            queryParameters['bookmark'] = requestParameters['bookmark'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("pinterest_oauth2", ["boards:read", "boards:read_secret", "pins:read", "pins:read_secret"]);
        }

        const response = await this.request({
            path: `/search/pins`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PinsList200ResponseFromJSON(jsonValue));
    }

    /**
     * Search for pins for the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account.  If using Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\". See <a href=\'/docs/getting-started/using-business-access/\'>Understanding Business Access</a> for more information.
     * Search user\'s Pins
     */
    async searchUserPinsList(requestParameters: SearchUserPinsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PinsList200Response> {
        const response = await this.searchUserPinsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
