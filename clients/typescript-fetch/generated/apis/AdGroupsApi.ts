/* tslint:disable */
/* eslint-disable */
/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AdGroupArrayResponse,
  AdGroupAudienceSizingRequest,
  AdGroupAudienceSizingResponse,
  AdGroupCreateRequest,
  AdGroupResponse,
  AdGroupUpdateRequest,
  AdGroupsAnalyticsResponseInner,
  AdGroupsList200Response,
  AdsAnalyticsTargetingType,
  BidFloor,
  BidFloorRequest,
  ConversionReportAttributionType,
  Granularity,
  MetricsResponse,
} from '../models/index';
import {
    AdGroupArrayResponseFromJSON,
    AdGroupArrayResponseToJSON,
    AdGroupAudienceSizingRequestFromJSON,
    AdGroupAudienceSizingRequestToJSON,
    AdGroupAudienceSizingResponseFromJSON,
    AdGroupAudienceSizingResponseToJSON,
    AdGroupCreateRequestFromJSON,
    AdGroupCreateRequestToJSON,
    AdGroupResponseFromJSON,
    AdGroupResponseToJSON,
    AdGroupUpdateRequestFromJSON,
    AdGroupUpdateRequestToJSON,
    AdGroupsAnalyticsResponseInnerFromJSON,
    AdGroupsAnalyticsResponseInnerToJSON,
    AdGroupsList200ResponseFromJSON,
    AdGroupsList200ResponseToJSON,
    AdsAnalyticsTargetingTypeFromJSON,
    AdsAnalyticsTargetingTypeToJSON,
    BidFloorFromJSON,
    BidFloorToJSON,
    BidFloorRequestFromJSON,
    BidFloorRequestToJSON,
    ConversionReportAttributionTypeFromJSON,
    ConversionReportAttributionTypeToJSON,
    GranularityFromJSON,
    GranularityToJSON,
    MetricsResponseFromJSON,
    MetricsResponseToJSON,
} from '../models/index';

export interface AdGroupsAnalyticsRequest {
    adAccountId: string;
    startDate: Date;
    endDate: Date;
    adGroupIds: Array<string>;
    columns: Array<AdGroupsAnalyticsColumnsEnum>;
    granularity: Granularity;
    clickWindowDays?: AdGroupsAnalyticsClickWindowDaysEnum;
    engagementWindowDays?: AdGroupsAnalyticsEngagementWindowDaysEnum;
    viewWindowDays?: AdGroupsAnalyticsViewWindowDaysEnum;
    conversionReportTime?: AdGroupsAnalyticsConversionReportTimeEnum;
}

export interface AdGroupsAudienceSizingRequest {
    adAccountId: string;
    adGroupAudienceSizingRequest?: AdGroupAudienceSizingRequest;
}

export interface AdGroupsBidFloorGetRequest {
    adAccountId: string;
    bidFloorRequest: BidFloorRequest;
}

export interface AdGroupsCreateRequest {
    adAccountId: string;
    adGroupCreateRequest: Array<AdGroupCreateRequest>;
}

export interface AdGroupsGetRequest {
    adAccountId: string;
    adGroupId: string;
}

export interface AdGroupsListRequest {
    adAccountId: string;
    campaignIds?: Array<string>;
    adGroupIds?: Array<string>;
    entityStatuses?: Array<AdGroupsListEntityStatusesEnum>;
    pageSize?: number;
    order?: AdGroupsListOrderEnum;
    bookmark?: string;
    translateInterestsToNames?: boolean;
}

export interface AdGroupsTargetingAnalyticsGetRequest {
    adAccountId: string;
    adGroupIds: Array<string>;
    startDate: Date;
    endDate: Date;
    targetingTypes: Array<AdsAnalyticsTargetingType>;
    columns: Array<AdGroupsTargetingAnalyticsGetColumnsEnum>;
    granularity: Granularity;
    clickWindowDays?: AdGroupsTargetingAnalyticsGetClickWindowDaysEnum;
    engagementWindowDays?: AdGroupsTargetingAnalyticsGetEngagementWindowDaysEnum;
    viewWindowDays?: AdGroupsTargetingAnalyticsGetViewWindowDaysEnum;
    conversionReportTime?: AdGroupsTargetingAnalyticsGetConversionReportTimeEnum;
    attributionTypes?: ConversionReportAttributionType;
}

export interface AdGroupsUpdateRequest {
    adAccountId: string;
    adGroupUpdateRequest: Array<AdGroupUpdateRequest>;
}

/**
 * 
 */
export class AdGroupsApi extends runtime.BaseAPI {

    /**
     * Get analytics for the specified ad groups in the specified <code>ad_account_id</code>, filtered by the specified options. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager. - If granularity is not HOUR, the furthest back you can are allowed to pull data is 90 days before the current date in UTC time and the max time range supported is 90 days. - If granularity is HOUR, the furthest back you can are allowed to pull data is 8 days before the current date in UTC time and the max time range supported is 3 days.
     * Get ad group analytics
     */
    async adGroupsAnalyticsRaw(requestParameters: AdGroupsAnalyticsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AdGroupsAnalyticsResponseInner>>> {
        if (requestParameters['adAccountId'] == null) {
            throw new runtime.RequiredError(
                'adAccountId',
                'Required parameter "adAccountId" was null or undefined when calling adGroupsAnalytics().'
            );
        }

        if (requestParameters['startDate'] == null) {
            throw new runtime.RequiredError(
                'startDate',
                'Required parameter "startDate" was null or undefined when calling adGroupsAnalytics().'
            );
        }

        if (requestParameters['endDate'] == null) {
            throw new runtime.RequiredError(
                'endDate',
                'Required parameter "endDate" was null or undefined when calling adGroupsAnalytics().'
            );
        }

        if (requestParameters['adGroupIds'] == null) {
            throw new runtime.RequiredError(
                'adGroupIds',
                'Required parameter "adGroupIds" was null or undefined when calling adGroupsAnalytics().'
            );
        }

        if (requestParameters['columns'] == null) {
            throw new runtime.RequiredError(
                'columns',
                'Required parameter "columns" was null or undefined when calling adGroupsAnalytics().'
            );
        }

        if (requestParameters['granularity'] == null) {
            throw new runtime.RequiredError(
                'granularity',
                'Required parameter "granularity" was null or undefined when calling adGroupsAnalytics().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['startDate'] != null) {
            queryParameters['start_date'] = (requestParameters['startDate'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['end_date'] = (requestParameters['endDate'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['adGroupIds'] != null) {
            queryParameters['ad_group_ids'] = requestParameters['adGroupIds'];
        }

        if (requestParameters['columns'] != null) {
            queryParameters['columns'] = requestParameters['columns']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['granularity'] != null) {
            queryParameters['granularity'] = requestParameters['granularity'];
        }

        if (requestParameters['clickWindowDays'] != null) {
            queryParameters['click_window_days'] = requestParameters['clickWindowDays'];
        }

        if (requestParameters['engagementWindowDays'] != null) {
            queryParameters['engagement_window_days'] = requestParameters['engagementWindowDays'];
        }

        if (requestParameters['viewWindowDays'] != null) {
            queryParameters['view_window_days'] = requestParameters['viewWindowDays'];
        }

        if (requestParameters['conversionReportTime'] != null) {
            queryParameters['conversion_report_time'] = requestParameters['conversionReportTime'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("pinterest_oauth2", ["ads:read"]);
        }

        const response = await this.request({
            path: `/ad_accounts/{ad_account_id}/ad_groups/analytics`.replace(`{${"ad_account_id"}}`, encodeURIComponent(String(requestParameters['adAccountId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AdGroupsAnalyticsResponseInnerFromJSON));
    }

    /**
     * Get analytics for the specified ad groups in the specified <code>ad_account_id</code>, filtered by the specified options. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager. - If granularity is not HOUR, the furthest back you can are allowed to pull data is 90 days before the current date in UTC time and the max time range supported is 90 days. - If granularity is HOUR, the furthest back you can are allowed to pull data is 8 days before the current date in UTC time and the max time range supported is 3 days.
     * Get ad group analytics
     */
    async adGroupsAnalytics(requestParameters: AdGroupsAnalyticsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AdGroupsAnalyticsResponseInner>> {
        const response = await this.adGroupsAnalyticsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get potential audience size for an ad group with given targeting criteria.  Potential audience size estimates the number of people you may be able to reach per month with your campaign.  It is based on historical advertising data and the targeting criteria you select. It does not guarantee results or take into account factors such as bid, budget, schedule, seasonality or product experiments.
     * Get audience sizing
     */
    async adGroupsAudienceSizingRaw(requestParameters: AdGroupsAudienceSizingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdGroupAudienceSizingResponse>> {
        if (requestParameters['adAccountId'] == null) {
            throw new runtime.RequiredError(
                'adAccountId',
                'Required parameter "adAccountId" was null or undefined when calling adGroupsAudienceSizing().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("pinterest_oauth2", ["ads:read"]);
        }

        const response = await this.request({
            path: `/ad_accounts/{ad_account_id}/ad_groups/audience_sizing`.replace(`{${"ad_account_id"}}`, encodeURIComponent(String(requestParameters['adAccountId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AdGroupAudienceSizingRequestToJSON(requestParameters['adGroupAudienceSizingRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AdGroupAudienceSizingResponseFromJSON(jsonValue));
    }

    /**
     * Get potential audience size for an ad group with given targeting criteria.  Potential audience size estimates the number of people you may be able to reach per month with your campaign.  It is based on historical advertising data and the targeting criteria you select. It does not guarantee results or take into account factors such as bid, budget, schedule, seasonality or product experiments.
     * Get audience sizing
     */
    async adGroupsAudienceSizing(requestParameters: AdGroupsAudienceSizingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdGroupAudienceSizingResponse> {
        const response = await this.adGroupsAudienceSizingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List bid floors for your campaign configuration. Bid floors are given in microcurrency values based on the currency in the bid floor specification. <p/> <p>Microcurrency is used to track very small transactions, based on the currency set in the advertiser’s profile.</p> <p>A microcurrency unit is 10^(-6) of the standard unit of currency selected in the advertiser’ s profile.</p> <p><strong>Equivalency equations</strong>, using dollars as an example currency:</p> <ul>   <li>$1 = 1,000,000 microdollars</li>   <li>1 microdollar = $0.000001 </li> </ul> <p><strong>To convert between currency and microcurrency</strong>, using dollars as an example currency:</p> <ul>   <li>To convert dollars to microdollars, mutiply dollars by 1,000,000</li>   <li>To convert microdollars to dollars, divide microdollars by 1,000,000</li>  </ul> For more on bid floors see <a class=\"reference external\" href=\"https://help.pinterest.com/en/business/article/set-your-bid\"> Set your bid</a>.
     * Get bid floors
     */
    async adGroupsBidFloorGetRaw(requestParameters: AdGroupsBidFloorGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BidFloor>> {
        if (requestParameters['adAccountId'] == null) {
            throw new runtime.RequiredError(
                'adAccountId',
                'Required parameter "adAccountId" was null or undefined when calling adGroupsBidFloorGet().'
            );
        }

        if (requestParameters['bidFloorRequest'] == null) {
            throw new runtime.RequiredError(
                'bidFloorRequest',
                'Required parameter "bidFloorRequest" was null or undefined when calling adGroupsBidFloorGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("pinterest_oauth2", ["ads:read"]);
        }

        const response = await this.request({
            path: `/ad_accounts/{ad_account_id}/bid_floor`.replace(`{${"ad_account_id"}}`, encodeURIComponent(String(requestParameters['adAccountId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BidFloorRequestToJSON(requestParameters['bidFloorRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BidFloorFromJSON(jsonValue));
    }

    /**
     * List bid floors for your campaign configuration. Bid floors are given in microcurrency values based on the currency in the bid floor specification. <p/> <p>Microcurrency is used to track very small transactions, based on the currency set in the advertiser’s profile.</p> <p>A microcurrency unit is 10^(-6) of the standard unit of currency selected in the advertiser’ s profile.</p> <p><strong>Equivalency equations</strong>, using dollars as an example currency:</p> <ul>   <li>$1 = 1,000,000 microdollars</li>   <li>1 microdollar = $0.000001 </li> </ul> <p><strong>To convert between currency and microcurrency</strong>, using dollars as an example currency:</p> <ul>   <li>To convert dollars to microdollars, mutiply dollars by 1,000,000</li>   <li>To convert microdollars to dollars, divide microdollars by 1,000,000</li>  </ul> For more on bid floors see <a class=\"reference external\" href=\"https://help.pinterest.com/en/business/article/set-your-bid\"> Set your bid</a>.
     * Get bid floors
     */
    async adGroupsBidFloorGet(requestParameters: AdGroupsBidFloorGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BidFloor> {
        const response = await this.adGroupsBidFloorGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create multiple new ad groups. All ads in a given ad group will have the same budget, bid, run dates, targeting, and placement (search, browse, other). For more information, <a href=\"https://help.pinterest.com/en/business/article/campaign-structure\" target=\"_blank\"> click here</a>.</p> <strong>Note:</strong> - \'bid_in_micro_currency\' and \'budget_in_micro_currency\' should be expressed in microcurrency amounts based on the currency field set in the advertiser\'s profile.<p/> <p>Microcurrency is used to track very small transactions, based on the currency set in the advertiser’s profile.</p> <p>A microcurrency unit is 10^(-6) of the standard unit of currency selected in the advertiser’s profile.</p>  <p><strong>Equivalency equations</strong>, using dollars as an example currency:</p> <ul>   <li>$1 = 1,000,000 microdollars</li>   <li>1 microdollar = $0.000001 </li> </ul> <p><strong>To convert between currency and microcurrency</strong>, using dollars as an example currency:</p> <ul>   <li>To convert dollars to microdollars, mutiply dollars by 1,000,000</li>   <li>To convert microdollars to dollars, divide microdollars by 1,000,000</li> </ul> - Ad groups belong to ad campaigns. Some types of campaigns (e.g. budget optimization) have limits on the number of ad groups they can hold. If you exceed those limits, you will get an error message. - Start and end time cannot be set for ad groups that belong to CBO campaigns. Currently, campaigns with the following objective types: TRAFFIC, AWARENESS, WEB_CONVERSIONS, and CATALOG_SALES will default to CBO.
     * Create ad groups
     */
    async adGroupsCreateRaw(requestParameters: AdGroupsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdGroupArrayResponse>> {
        if (requestParameters['adAccountId'] == null) {
            throw new runtime.RequiredError(
                'adAccountId',
                'Required parameter "adAccountId" was null or undefined when calling adGroupsCreate().'
            );
        }

        if (requestParameters['adGroupCreateRequest'] == null) {
            throw new runtime.RequiredError(
                'adGroupCreateRequest',
                'Required parameter "adGroupCreateRequest" was null or undefined when calling adGroupsCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("pinterest_oauth2", ["ads:write"]);
        }

        const response = await this.request({
            path: `/ad_accounts/{ad_account_id}/ad_groups`.replace(`{${"ad_account_id"}}`, encodeURIComponent(String(requestParameters['adAccountId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['adGroupCreateRequest']!.map(AdGroupCreateRequestToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AdGroupArrayResponseFromJSON(jsonValue));
    }

    /**
     * Create multiple new ad groups. All ads in a given ad group will have the same budget, bid, run dates, targeting, and placement (search, browse, other). For more information, <a href=\"https://help.pinterest.com/en/business/article/campaign-structure\" target=\"_blank\"> click here</a>.</p> <strong>Note:</strong> - \'bid_in_micro_currency\' and \'budget_in_micro_currency\' should be expressed in microcurrency amounts based on the currency field set in the advertiser\'s profile.<p/> <p>Microcurrency is used to track very small transactions, based on the currency set in the advertiser’s profile.</p> <p>A microcurrency unit is 10^(-6) of the standard unit of currency selected in the advertiser’s profile.</p>  <p><strong>Equivalency equations</strong>, using dollars as an example currency:</p> <ul>   <li>$1 = 1,000,000 microdollars</li>   <li>1 microdollar = $0.000001 </li> </ul> <p><strong>To convert between currency and microcurrency</strong>, using dollars as an example currency:</p> <ul>   <li>To convert dollars to microdollars, mutiply dollars by 1,000,000</li>   <li>To convert microdollars to dollars, divide microdollars by 1,000,000</li> </ul> - Ad groups belong to ad campaigns. Some types of campaigns (e.g. budget optimization) have limits on the number of ad groups they can hold. If you exceed those limits, you will get an error message. - Start and end time cannot be set for ad groups that belong to CBO campaigns. Currently, campaigns with the following objective types: TRAFFIC, AWARENESS, WEB_CONVERSIONS, and CATALOG_SALES will default to CBO.
     * Create ad groups
     */
    async adGroupsCreate(requestParameters: AdGroupsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdGroupArrayResponse> {
        const response = await this.adGroupsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a specific ad given the ad ID. If your pin is rejected, rejected_reasons will contain additional information from the Ad Review process. For more information about our policies and rejection reasons see the <a href=\"https://www.pinterest.com/_/_/policy/advertising-guidelines/\" target=\"_blank\">Pinterest advertising standards</a>.
     * Get ad group
     */
    async adGroupsGetRaw(requestParameters: AdGroupsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdGroupResponse>> {
        if (requestParameters['adAccountId'] == null) {
            throw new runtime.RequiredError(
                'adAccountId',
                'Required parameter "adAccountId" was null or undefined when calling adGroupsGet().'
            );
        }

        if (requestParameters['adGroupId'] == null) {
            throw new runtime.RequiredError(
                'adGroupId',
                'Required parameter "adGroupId" was null or undefined when calling adGroupsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("pinterest_oauth2", ["ads:read"]);
        }

        const response = await this.request({
            path: `/ad_accounts/{ad_account_id}/ad_groups/{ad_group_id}`.replace(`{${"ad_account_id"}}`, encodeURIComponent(String(requestParameters['adAccountId']))).replace(`{${"ad_group_id"}}`, encodeURIComponent(String(requestParameters['adGroupId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AdGroupResponseFromJSON(jsonValue));
    }

    /**
     * Get a specific ad given the ad ID. If your pin is rejected, rejected_reasons will contain additional information from the Ad Review process. For more information about our policies and rejection reasons see the <a href=\"https://www.pinterest.com/_/_/policy/advertising-guidelines/\" target=\"_blank\">Pinterest advertising standards</a>.
     * Get ad group
     */
    async adGroupsGet(requestParameters: AdGroupsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdGroupResponse> {
        const response = await this.adGroupsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List ad groups based on provided campaign IDs or ad group IDs.(campaign_ids or ad_group_ids). <p/> <strong>Note:</strong><p/> Provide only campaign_id or ad_group_id. Do not provide both.
     * List ad groups
     */
    async adGroupsListRaw(requestParameters: AdGroupsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdGroupsList200Response>> {
        if (requestParameters['adAccountId'] == null) {
            throw new runtime.RequiredError(
                'adAccountId',
                'Required parameter "adAccountId" was null or undefined when calling adGroupsList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['campaignIds'] != null) {
            queryParameters['campaign_ids'] = requestParameters['campaignIds'];
        }

        if (requestParameters['adGroupIds'] != null) {
            queryParameters['ad_group_ids'] = requestParameters['adGroupIds'];
        }

        if (requestParameters['entityStatuses'] != null) {
            queryParameters['entity_statuses'] = requestParameters['entityStatuses'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        if (requestParameters['order'] != null) {
            queryParameters['order'] = requestParameters['order'];
        }

        if (requestParameters['bookmark'] != null) {
            queryParameters['bookmark'] = requestParameters['bookmark'];
        }

        if (requestParameters['translateInterestsToNames'] != null) {
            queryParameters['translate_interests_to_names'] = requestParameters['translateInterestsToNames'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("pinterest_oauth2", ["ads:read"]);
        }

        const response = await this.request({
            path: `/ad_accounts/{ad_account_id}/ad_groups`.replace(`{${"ad_account_id"}}`, encodeURIComponent(String(requestParameters['adAccountId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AdGroupsList200ResponseFromJSON(jsonValue));
    }

    /**
     * List ad groups based on provided campaign IDs or ad group IDs.(campaign_ids or ad_group_ids). <p/> <strong>Note:</strong><p/> Provide only campaign_id or ad_group_id. Do not provide both.
     * List ad groups
     */
    async adGroupsList(requestParameters: AdGroupsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdGroupsList200Response> {
        const response = await this.adGroupsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get targeting analytics for one or more ad groups. For the requested ad group(s) and metrics, the response will include the requested metric information (e.g. SPEND_IN_DOLLAR) for the requested target type (e.g. \"age_bucket\") for applicable values (e.g. \"45-49\"). <p/> - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager. - If granularity is not HOUR, the furthest back you can are allowed to pull data is 90 days before the current date in UTC time and the max time range supported is 90 days. - If granularity is HOUR, the furthest back you can are allowed to pull data is 8 days before the current date in UTC time and the max time range supported is 3 days.
     * Get targeting analytics for ad groups
     */
    async adGroupsTargetingAnalyticsGetRaw(requestParameters: AdGroupsTargetingAnalyticsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MetricsResponse>> {
        if (requestParameters['adAccountId'] == null) {
            throw new runtime.RequiredError(
                'adAccountId',
                'Required parameter "adAccountId" was null or undefined when calling adGroupsTargetingAnalyticsGet().'
            );
        }

        if (requestParameters['adGroupIds'] == null) {
            throw new runtime.RequiredError(
                'adGroupIds',
                'Required parameter "adGroupIds" was null or undefined when calling adGroupsTargetingAnalyticsGet().'
            );
        }

        if (requestParameters['startDate'] == null) {
            throw new runtime.RequiredError(
                'startDate',
                'Required parameter "startDate" was null or undefined when calling adGroupsTargetingAnalyticsGet().'
            );
        }

        if (requestParameters['endDate'] == null) {
            throw new runtime.RequiredError(
                'endDate',
                'Required parameter "endDate" was null or undefined when calling adGroupsTargetingAnalyticsGet().'
            );
        }

        if (requestParameters['targetingTypes'] == null) {
            throw new runtime.RequiredError(
                'targetingTypes',
                'Required parameter "targetingTypes" was null or undefined when calling adGroupsTargetingAnalyticsGet().'
            );
        }

        if (requestParameters['columns'] == null) {
            throw new runtime.RequiredError(
                'columns',
                'Required parameter "columns" was null or undefined when calling adGroupsTargetingAnalyticsGet().'
            );
        }

        if (requestParameters['granularity'] == null) {
            throw new runtime.RequiredError(
                'granularity',
                'Required parameter "granularity" was null or undefined when calling adGroupsTargetingAnalyticsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['adGroupIds'] != null) {
            queryParameters['ad_group_ids'] = requestParameters['adGroupIds'];
        }

        if (requestParameters['startDate'] != null) {
            queryParameters['start_date'] = (requestParameters['startDate'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['end_date'] = (requestParameters['endDate'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['targetingTypes'] != null) {
            queryParameters['targeting_types'] = requestParameters['targetingTypes']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['columns'] != null) {
            queryParameters['columns'] = requestParameters['columns']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['granularity'] != null) {
            queryParameters['granularity'] = requestParameters['granularity'];
        }

        if (requestParameters['clickWindowDays'] != null) {
            queryParameters['click_window_days'] = requestParameters['clickWindowDays'];
        }

        if (requestParameters['engagementWindowDays'] != null) {
            queryParameters['engagement_window_days'] = requestParameters['engagementWindowDays'];
        }

        if (requestParameters['viewWindowDays'] != null) {
            queryParameters['view_window_days'] = requestParameters['viewWindowDays'];
        }

        if (requestParameters['conversionReportTime'] != null) {
            queryParameters['conversion_report_time'] = requestParameters['conversionReportTime'];
        }

        if (requestParameters['attributionTypes'] != null) {
            queryParameters['attribution_types'] = requestParameters['attributionTypes'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("pinterest_oauth2", ["ads:read"]);
        }

        const response = await this.request({
            path: `/ad_accounts/{ad_account_id}/ad_groups/targeting_analytics`.replace(`{${"ad_account_id"}}`, encodeURIComponent(String(requestParameters['adAccountId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MetricsResponseFromJSON(jsonValue));
    }

    /**
     * Get targeting analytics for one or more ad groups. For the requested ad group(s) and metrics, the response will include the requested metric information (e.g. SPEND_IN_DOLLAR) for the requested target type (e.g. \"age_bucket\") for applicable values (e.g. \"45-49\"). <p/> - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager. - If granularity is not HOUR, the furthest back you can are allowed to pull data is 90 days before the current date in UTC time and the max time range supported is 90 days. - If granularity is HOUR, the furthest back you can are allowed to pull data is 8 days before the current date in UTC time and the max time range supported is 3 days.
     * Get targeting analytics for ad groups
     */
    async adGroupsTargetingAnalyticsGet(requestParameters: AdGroupsTargetingAnalyticsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MetricsResponse> {
        const response = await this.adGroupsTargetingAnalyticsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update multiple existing ad groups.
     * Update ad groups
     */
    async adGroupsUpdateRaw(requestParameters: AdGroupsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdGroupArrayResponse>> {
        if (requestParameters['adAccountId'] == null) {
            throw new runtime.RequiredError(
                'adAccountId',
                'Required parameter "adAccountId" was null or undefined when calling adGroupsUpdate().'
            );
        }

        if (requestParameters['adGroupUpdateRequest'] == null) {
            throw new runtime.RequiredError(
                'adGroupUpdateRequest',
                'Required parameter "adGroupUpdateRequest" was null or undefined when calling adGroupsUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("pinterest_oauth2", ["ads:write"]);
        }

        const response = await this.request({
            path: `/ad_accounts/{ad_account_id}/ad_groups`.replace(`{${"ad_account_id"}}`, encodeURIComponent(String(requestParameters['adAccountId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['adGroupUpdateRequest']!.map(AdGroupUpdateRequestToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AdGroupArrayResponseFromJSON(jsonValue));
    }

    /**
     * Update multiple existing ad groups.
     * Update ad groups
     */
    async adGroupsUpdate(requestParameters: AdGroupsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdGroupArrayResponse> {
        const response = await this.adGroupsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const AdGroupsAnalyticsColumnsEnum = {
    SpendInMicroDollar: 'SPEND_IN_MICRO_DOLLAR',
    PaidImpression: 'PAID_IMPRESSION',
    SpendInDollar: 'SPEND_IN_DOLLAR',
    CpcInMicroDollar: 'CPC_IN_MICRO_DOLLAR',
    EcpcInMicroDollar: 'ECPC_IN_MICRO_DOLLAR',
    EcpcInDollar: 'ECPC_IN_DOLLAR',
    Ctr: 'CTR',
    Ectr: 'ECTR',
    CampaignName: 'CAMPAIGN_NAME',
    PinId: 'PIN_ID',
    TotalEngagement: 'TOTAL_ENGAGEMENT',
    Engagement1: 'ENGAGEMENT_1',
    Engagement2: 'ENGAGEMENT_2',
    EcpeInDollar: 'ECPE_IN_DOLLAR',
    EngagementRate: 'ENGAGEMENT_RATE',
    EengagementRate: 'EENGAGEMENT_RATE',
    EcpmInMicroDollar: 'ECPM_IN_MICRO_DOLLAR',
    RepinRate: 'REPIN_RATE',
    Ctr2: 'CTR_2',
    CampaignId: 'CAMPAIGN_ID',
    AdvertiserId: 'ADVERTISER_ID',
    AdAccountId: 'AD_ACCOUNT_ID',
    PinPromotionId: 'PIN_PROMOTION_ID',
    AdId: 'AD_ID',
    AdGroupId: 'AD_GROUP_ID',
    CampaignEntityStatus: 'CAMPAIGN_ENTITY_STATUS',
    CampaignObjectiveType: 'CAMPAIGN_OBJECTIVE_TYPE',
    CpmInMicroDollar: 'CPM_IN_MICRO_DOLLAR',
    CpmInDollar: 'CPM_IN_DOLLAR',
    AdGroupEntityStatus: 'AD_GROUP_ENTITY_STATUS',
    OrderLineId: 'ORDER_LINE_ID',
    OrderLineName: 'ORDER_LINE_NAME',
    Clickthrough1: 'CLICKTHROUGH_1',
    Repin1: 'REPIN_1',
    Impression1: 'IMPRESSION_1',
    Impression1Gross: 'IMPRESSION_1_GROSS',
    Clickthrough1Gross: 'CLICKTHROUGH_1_GROSS',
    OutboundClick1: 'OUTBOUND_CLICK_1',
    Clickthrough2: 'CLICKTHROUGH_2',
    Repin2: 'REPIN_2',
    Impression2: 'IMPRESSION_2',
    OutboundClick2: 'OUTBOUND_CLICK_2',
    TotalClickthrough: 'TOTAL_CLICKTHROUGH',
    TotalImpression: 'TOTAL_IMPRESSION',
    TotalImpressionUser: 'TOTAL_IMPRESSION_USER',
    TotalImpressionFrequency: 'TOTAL_IMPRESSION_FREQUENCY',
    CostPerOutboundClickInDollar: 'COST_PER_OUTBOUND_CLICK_IN_DOLLAR',
    TotalEngagementSignup: 'TOTAL_ENGAGEMENT_SIGNUP',
    TotalEngagementCheckout: 'TOTAL_ENGAGEMENT_CHECKOUT',
    TotalEngagementLead: 'TOTAL_ENGAGEMENT_LEAD',
    TotalClickSignup: 'TOTAL_CLICK_SIGNUP',
    TotalClickCheckout: 'TOTAL_CLICK_CHECKOUT',
    TotalClickAddToCart: 'TOTAL_CLICK_ADD_TO_CART',
    TotalClickLead: 'TOTAL_CLICK_LEAD',
    TotalViewSignup: 'TOTAL_VIEW_SIGNUP',
    TotalViewCheckout: 'TOTAL_VIEW_CHECKOUT',
    TotalViewAddToCart: 'TOTAL_VIEW_ADD_TO_CART',
    TotalViewLead: 'TOTAL_VIEW_LEAD',
    TotalConversions: 'TOTAL_CONVERSIONS',
    TotalEngagementSignupValueInMicroDollar: 'TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR',
    TotalEngagementCheckoutValueInMicroDollar: 'TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalClickSignupValueInMicroDollar: 'TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR',
    TotalClickCheckoutValueInMicroDollar: 'TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalViewSignupValueInMicroDollar: 'TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR',
    TotalViewCheckoutValueInMicroDollar: 'TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalWebSessions: 'TOTAL_WEB_SESSIONS',
    WebSessions1: 'WEB_SESSIONS_1',
    WebSessions2: 'WEB_SESSIONS_2',
    CampaignLifetimeSpendCap: 'CAMPAIGN_LIFETIME_SPEND_CAP',
    CampaignDailySpendCap: 'CAMPAIGN_DAILY_SPEND_CAP',
    TotalPageVisit: 'TOTAL_PAGE_VISIT',
    TotalSignup: 'TOTAL_SIGNUP',
    TotalCheckout: 'TOTAL_CHECKOUT',
    TotalCustom: 'TOTAL_CUSTOM',
    TotalLead: 'TOTAL_LEAD',
    TotalSignupValueInMicroDollar: 'TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR',
    TotalCheckoutValueInMicroDollar: 'TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalCustomValueInMicroDollar: 'TOTAL_CUSTOM_VALUE_IN_MICRO_DOLLAR',
    PageVisitCostPerAction: 'PAGE_VISIT_COST_PER_ACTION',
    PageVisitRoas: 'PAGE_VISIT_ROAS',
    CheckoutRoas: 'CHECKOUT_ROAS',
    CustomRoas: 'CUSTOM_ROAS',
    VideoMrcViews1: 'VIDEO_MRC_VIEWS_1',
    Video3SecViews2: 'VIDEO_3SEC_VIEWS_2',
    VideoP100Complete2: 'VIDEO_P100_COMPLETE_2',
    VideoP0Combined2: 'VIDEO_P0_COMBINED_2',
    VideoP25Combined2: 'VIDEO_P25_COMBINED_2',
    VideoP50Combined2: 'VIDEO_P50_COMBINED_2',
    VideoP75Combined2: 'VIDEO_P75_COMBINED_2',
    VideoP95Combined2: 'VIDEO_P95_COMBINED_2',
    VideoMrcViews2: 'VIDEO_MRC_VIEWS_2',
    PaidVideoViewableRate: 'PAID_VIDEO_VIEWABLE_RATE',
    VideoLength: 'VIDEO_LENGTH',
    EcpvInDollar: 'ECPV_IN_DOLLAR',
    EcpcvInDollar: 'ECPCV_IN_DOLLAR',
    EcpcvP95InDollar: 'ECPCV_P95_IN_DOLLAR',
    TotalVideo3SecViews: 'TOTAL_VIDEO_3SEC_VIEWS',
    TotalVideoP100Complete: 'TOTAL_VIDEO_P100_COMPLETE',
    TotalVideoP0Combined: 'TOTAL_VIDEO_P0_COMBINED',
    TotalVideoP25Combined: 'TOTAL_VIDEO_P25_COMBINED',
    TotalVideoP50Combined: 'TOTAL_VIDEO_P50_COMBINED',
    TotalVideoP75Combined: 'TOTAL_VIDEO_P75_COMBINED',
    TotalVideoP95Combined: 'TOTAL_VIDEO_P95_COMBINED',
    TotalVideoMrcViews: 'TOTAL_VIDEO_MRC_VIEWS',
    TotalVideoAvgWatchtimeInSecond: 'TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND',
    TotalRepinRate: 'TOTAL_REPIN_RATE',
    WebCheckoutCostPerAction: 'WEB_CHECKOUT_COST_PER_ACTION',
    WebCheckoutRoas: 'WEB_CHECKOUT_ROAS',
    TotalWebCheckout: 'TOTAL_WEB_CHECKOUT',
    TotalWebCheckoutValueInMicroDollar: 'TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalWebClickCheckout: 'TOTAL_WEB_CLICK_CHECKOUT',
    TotalWebClickCheckoutValueInMicroDollar: 'TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalWebEngagementCheckout: 'TOTAL_WEB_ENGAGEMENT_CHECKOUT',
    TotalWebEngagementCheckoutValueInMicroDollar: 'TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalWebViewCheckout: 'TOTAL_WEB_VIEW_CHECKOUT',
    TotalWebViewCheckoutValueInMicroDollar: 'TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    InappCheckoutCostPerAction: 'INAPP_CHECKOUT_COST_PER_ACTION',
    TotalOfflineCheckout: 'TOTAL_OFFLINE_CHECKOUT',
    IdeaPinProductTagVisit1: 'IDEA_PIN_PRODUCT_TAG_VISIT_1',
    IdeaPinProductTagVisit2: 'IDEA_PIN_PRODUCT_TAG_VISIT_2',
    TotalIdeaPinProductTagVisit: 'TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT',
    Leads: 'LEADS',
    CostPerLead: 'COST_PER_LEAD',
    QuizCompleted: 'QUIZ_COMPLETED',
    QuizPinResultOpen: 'QUIZ_PIN_RESULT_OPEN',
    QuizCompletionRate: 'QUIZ_COMPLETION_RATE',
    ShowcasePinClickthrough: 'SHOWCASE_PIN_CLICKTHROUGH',
    ShowcaseSubpageClickthrough: 'SHOWCASE_SUBPAGE_CLICKTHROUGH',
    ShowcaseSubpinClickthrough: 'SHOWCASE_SUBPIN_CLICKTHROUGH',
    ShowcaseSubpageImpression: 'SHOWCASE_SUBPAGE_IMPRESSION',
    ShowcaseSubpinImpression: 'SHOWCASE_SUBPIN_IMPRESSION',
    ShowcaseSubpageSwipeLeft: 'SHOWCASE_SUBPAGE_SWIPE_LEFT',
    ShowcaseSubpageSwipeRight: 'SHOWCASE_SUBPAGE_SWIPE_RIGHT',
    ShowcaseSubpinSwipeLeft: 'SHOWCASE_SUBPIN_SWIPE_LEFT',
    ShowcaseSubpinSwipeRight: 'SHOWCASE_SUBPIN_SWIPE_RIGHT',
    ShowcaseSubpageRepin: 'SHOWCASE_SUBPAGE_REPIN',
    ShowcaseSubpinRepin: 'SHOWCASE_SUBPIN_REPIN',
    ShowcaseSubpageCloseup: 'SHOWCASE_SUBPAGE_CLOSEUP',
    ShowcaseCardThumbnailSwipeForward: 'SHOWCASE_CARD_THUMBNAIL_SWIPE_FORWARD',
    ShowcaseCardThumbnailSwipeBackward: 'SHOWCASE_CARD_THUMBNAIL_SWIPE_BACKWARD',
    ShowcaseAverageSubpageCloseupPerSession: 'SHOWCASE_AVERAGE_SUBPAGE_CLOSEUP_PER_SESSION',
    TotalCheckoutConversionRate: 'TOTAL_CHECKOUT_CONVERSION_RATE',
    TotalViewCategoryConversionRate: 'TOTAL_VIEW_CATEGORY_CONVERSION_RATE',
    TotalAddToCartConversionRate: 'TOTAL_ADD_TO_CART_CONVERSION_RATE',
    TotalSignupConversionRate: 'TOTAL_SIGNUP_CONVERSION_RATE',
    TotalPageVisitConversionRate: 'TOTAL_PAGE_VISIT_CONVERSION_RATE',
    TotalLeadConversionRate: 'TOTAL_LEAD_CONVERSION_RATE',
    TotalSearchConversionRate: 'TOTAL_SEARCH_CONVERSION_RATE',
    TotalWatchVideoConversionRate: 'TOTAL_WATCH_VIDEO_CONVERSION_RATE',
    TotalUnknownConversionRate: 'TOTAL_UNKNOWN_CONVERSION_RATE',
    TotalCustomConversionRate: 'TOTAL_CUSTOM_CONVERSION_RATE'
} as const;
export type AdGroupsAnalyticsColumnsEnum = typeof AdGroupsAnalyticsColumnsEnum[keyof typeof AdGroupsAnalyticsColumnsEnum];
/**
 * @export
 */
export const AdGroupsAnalyticsClickWindowDaysEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_7: 7,
    NUMBER_14: 14,
    NUMBER_30: 30,
    NUMBER_60: 60
} as const;
export type AdGroupsAnalyticsClickWindowDaysEnum = typeof AdGroupsAnalyticsClickWindowDaysEnum[keyof typeof AdGroupsAnalyticsClickWindowDaysEnum];
/**
 * @export
 */
export const AdGroupsAnalyticsEngagementWindowDaysEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_7: 7,
    NUMBER_14: 14,
    NUMBER_30: 30,
    NUMBER_60: 60
} as const;
export type AdGroupsAnalyticsEngagementWindowDaysEnum = typeof AdGroupsAnalyticsEngagementWindowDaysEnum[keyof typeof AdGroupsAnalyticsEngagementWindowDaysEnum];
/**
 * @export
 */
export const AdGroupsAnalyticsViewWindowDaysEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_7: 7,
    NUMBER_14: 14,
    NUMBER_30: 30,
    NUMBER_60: 60
} as const;
export type AdGroupsAnalyticsViewWindowDaysEnum = typeof AdGroupsAnalyticsViewWindowDaysEnum[keyof typeof AdGroupsAnalyticsViewWindowDaysEnum];
/**
 * @export
 */
export const AdGroupsAnalyticsConversionReportTimeEnum = {
    AdAction: 'TIME_OF_AD_ACTION',
    Conversion: 'TIME_OF_CONVERSION'
} as const;
export type AdGroupsAnalyticsConversionReportTimeEnum = typeof AdGroupsAnalyticsConversionReportTimeEnum[keyof typeof AdGroupsAnalyticsConversionReportTimeEnum];
/**
 * @export
 */
export const AdGroupsListEntityStatusesEnum = {
    Active: 'ACTIVE',
    Paused: 'PAUSED',
    Archived: 'ARCHIVED',
    Draft: 'DRAFT',
    DeletedDraft: 'DELETED_DRAFT'
} as const;
export type AdGroupsListEntityStatusesEnum = typeof AdGroupsListEntityStatusesEnum[keyof typeof AdGroupsListEntityStatusesEnum];
/**
 * @export
 */
export const AdGroupsListOrderEnum = {
    Ascending: 'ASCENDING',
    Descending: 'DESCENDING'
} as const;
export type AdGroupsListOrderEnum = typeof AdGroupsListOrderEnum[keyof typeof AdGroupsListOrderEnum];
/**
 * @export
 */
export const AdGroupsTargetingAnalyticsGetColumnsEnum = {
    SpendInMicroDollar: 'SPEND_IN_MICRO_DOLLAR',
    PaidImpression: 'PAID_IMPRESSION',
    SpendInDollar: 'SPEND_IN_DOLLAR',
    CpcInMicroDollar: 'CPC_IN_MICRO_DOLLAR',
    EcpcInMicroDollar: 'ECPC_IN_MICRO_DOLLAR',
    EcpcInDollar: 'ECPC_IN_DOLLAR',
    Ctr: 'CTR',
    Ectr: 'ECTR',
    CampaignName: 'CAMPAIGN_NAME',
    PinId: 'PIN_ID',
    TotalEngagement: 'TOTAL_ENGAGEMENT',
    Engagement1: 'ENGAGEMENT_1',
    Engagement2: 'ENGAGEMENT_2',
    EcpeInDollar: 'ECPE_IN_DOLLAR',
    EngagementRate: 'ENGAGEMENT_RATE',
    EengagementRate: 'EENGAGEMENT_RATE',
    EcpmInMicroDollar: 'ECPM_IN_MICRO_DOLLAR',
    RepinRate: 'REPIN_RATE',
    Ctr2: 'CTR_2',
    CampaignId: 'CAMPAIGN_ID',
    AdvertiserId: 'ADVERTISER_ID',
    AdAccountId: 'AD_ACCOUNT_ID',
    PinPromotionId: 'PIN_PROMOTION_ID',
    AdId: 'AD_ID',
    AdGroupId: 'AD_GROUP_ID',
    CampaignEntityStatus: 'CAMPAIGN_ENTITY_STATUS',
    CampaignObjectiveType: 'CAMPAIGN_OBJECTIVE_TYPE',
    CpmInMicroDollar: 'CPM_IN_MICRO_DOLLAR',
    CpmInDollar: 'CPM_IN_DOLLAR',
    AdGroupEntityStatus: 'AD_GROUP_ENTITY_STATUS',
    OrderLineId: 'ORDER_LINE_ID',
    OrderLineName: 'ORDER_LINE_NAME',
    Clickthrough1: 'CLICKTHROUGH_1',
    Repin1: 'REPIN_1',
    Impression1: 'IMPRESSION_1',
    Impression1Gross: 'IMPRESSION_1_GROSS',
    Clickthrough1Gross: 'CLICKTHROUGH_1_GROSS',
    OutboundClick1: 'OUTBOUND_CLICK_1',
    Clickthrough2: 'CLICKTHROUGH_2',
    Repin2: 'REPIN_2',
    Impression2: 'IMPRESSION_2',
    OutboundClick2: 'OUTBOUND_CLICK_2',
    TotalClickthrough: 'TOTAL_CLICKTHROUGH',
    TotalImpression: 'TOTAL_IMPRESSION',
    TotalImpressionUser: 'TOTAL_IMPRESSION_USER',
    TotalImpressionFrequency: 'TOTAL_IMPRESSION_FREQUENCY',
    CostPerOutboundClickInDollar: 'COST_PER_OUTBOUND_CLICK_IN_DOLLAR',
    TotalEngagementSignup: 'TOTAL_ENGAGEMENT_SIGNUP',
    TotalEngagementCheckout: 'TOTAL_ENGAGEMENT_CHECKOUT',
    TotalEngagementLead: 'TOTAL_ENGAGEMENT_LEAD',
    TotalClickSignup: 'TOTAL_CLICK_SIGNUP',
    TotalClickCheckout: 'TOTAL_CLICK_CHECKOUT',
    TotalClickAddToCart: 'TOTAL_CLICK_ADD_TO_CART',
    TotalClickLead: 'TOTAL_CLICK_LEAD',
    TotalViewSignup: 'TOTAL_VIEW_SIGNUP',
    TotalViewCheckout: 'TOTAL_VIEW_CHECKOUT',
    TotalViewAddToCart: 'TOTAL_VIEW_ADD_TO_CART',
    TotalViewLead: 'TOTAL_VIEW_LEAD',
    TotalConversions: 'TOTAL_CONVERSIONS',
    TotalEngagementSignupValueInMicroDollar: 'TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR',
    TotalEngagementCheckoutValueInMicroDollar: 'TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalClickSignupValueInMicroDollar: 'TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR',
    TotalClickCheckoutValueInMicroDollar: 'TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalViewSignupValueInMicroDollar: 'TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR',
    TotalViewCheckoutValueInMicroDollar: 'TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalWebSessions: 'TOTAL_WEB_SESSIONS',
    WebSessions1: 'WEB_SESSIONS_1',
    WebSessions2: 'WEB_SESSIONS_2',
    CampaignLifetimeSpendCap: 'CAMPAIGN_LIFETIME_SPEND_CAP',
    CampaignDailySpendCap: 'CAMPAIGN_DAILY_SPEND_CAP',
    TotalPageVisit: 'TOTAL_PAGE_VISIT',
    TotalSignup: 'TOTAL_SIGNUP',
    TotalCheckout: 'TOTAL_CHECKOUT',
    TotalCustom: 'TOTAL_CUSTOM',
    TotalLead: 'TOTAL_LEAD',
    TotalSignupValueInMicroDollar: 'TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR',
    TotalCheckoutValueInMicroDollar: 'TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalCustomValueInMicroDollar: 'TOTAL_CUSTOM_VALUE_IN_MICRO_DOLLAR',
    PageVisitCostPerAction: 'PAGE_VISIT_COST_PER_ACTION',
    PageVisitRoas: 'PAGE_VISIT_ROAS',
    CheckoutRoas: 'CHECKOUT_ROAS',
    CustomRoas: 'CUSTOM_ROAS',
    VideoMrcViews1: 'VIDEO_MRC_VIEWS_1',
    Video3SecViews2: 'VIDEO_3SEC_VIEWS_2',
    VideoP100Complete2: 'VIDEO_P100_COMPLETE_2',
    VideoP0Combined2: 'VIDEO_P0_COMBINED_2',
    VideoP25Combined2: 'VIDEO_P25_COMBINED_2',
    VideoP50Combined2: 'VIDEO_P50_COMBINED_2',
    VideoP75Combined2: 'VIDEO_P75_COMBINED_2',
    VideoP95Combined2: 'VIDEO_P95_COMBINED_2',
    VideoMrcViews2: 'VIDEO_MRC_VIEWS_2',
    PaidVideoViewableRate: 'PAID_VIDEO_VIEWABLE_RATE',
    VideoLength: 'VIDEO_LENGTH',
    EcpvInDollar: 'ECPV_IN_DOLLAR',
    EcpcvInDollar: 'ECPCV_IN_DOLLAR',
    EcpcvP95InDollar: 'ECPCV_P95_IN_DOLLAR',
    TotalVideo3SecViews: 'TOTAL_VIDEO_3SEC_VIEWS',
    TotalVideoP100Complete: 'TOTAL_VIDEO_P100_COMPLETE',
    TotalVideoP0Combined: 'TOTAL_VIDEO_P0_COMBINED',
    TotalVideoP25Combined: 'TOTAL_VIDEO_P25_COMBINED',
    TotalVideoP50Combined: 'TOTAL_VIDEO_P50_COMBINED',
    TotalVideoP75Combined: 'TOTAL_VIDEO_P75_COMBINED',
    TotalVideoP95Combined: 'TOTAL_VIDEO_P95_COMBINED',
    TotalVideoMrcViews: 'TOTAL_VIDEO_MRC_VIEWS',
    TotalVideoAvgWatchtimeInSecond: 'TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND',
    TotalRepinRate: 'TOTAL_REPIN_RATE',
    WebCheckoutCostPerAction: 'WEB_CHECKOUT_COST_PER_ACTION',
    WebCheckoutRoas: 'WEB_CHECKOUT_ROAS',
    TotalWebCheckout: 'TOTAL_WEB_CHECKOUT',
    TotalWebCheckoutValueInMicroDollar: 'TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalWebClickCheckout: 'TOTAL_WEB_CLICK_CHECKOUT',
    TotalWebClickCheckoutValueInMicroDollar: 'TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalWebEngagementCheckout: 'TOTAL_WEB_ENGAGEMENT_CHECKOUT',
    TotalWebEngagementCheckoutValueInMicroDollar: 'TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalWebViewCheckout: 'TOTAL_WEB_VIEW_CHECKOUT',
    TotalWebViewCheckoutValueInMicroDollar: 'TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    InappCheckoutCostPerAction: 'INAPP_CHECKOUT_COST_PER_ACTION',
    TotalOfflineCheckout: 'TOTAL_OFFLINE_CHECKOUT',
    IdeaPinProductTagVisit1: 'IDEA_PIN_PRODUCT_TAG_VISIT_1',
    IdeaPinProductTagVisit2: 'IDEA_PIN_PRODUCT_TAG_VISIT_2',
    TotalIdeaPinProductTagVisit: 'TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT',
    Leads: 'LEADS',
    CostPerLead: 'COST_PER_LEAD',
    QuizCompleted: 'QUIZ_COMPLETED',
    QuizPinResultOpen: 'QUIZ_PIN_RESULT_OPEN',
    QuizCompletionRate: 'QUIZ_COMPLETION_RATE',
    ShowcasePinClickthrough: 'SHOWCASE_PIN_CLICKTHROUGH',
    ShowcaseSubpageClickthrough: 'SHOWCASE_SUBPAGE_CLICKTHROUGH',
    ShowcaseSubpinClickthrough: 'SHOWCASE_SUBPIN_CLICKTHROUGH',
    ShowcaseSubpageImpression: 'SHOWCASE_SUBPAGE_IMPRESSION',
    ShowcaseSubpinImpression: 'SHOWCASE_SUBPIN_IMPRESSION',
    ShowcaseSubpageSwipeLeft: 'SHOWCASE_SUBPAGE_SWIPE_LEFT',
    ShowcaseSubpageSwipeRight: 'SHOWCASE_SUBPAGE_SWIPE_RIGHT',
    ShowcaseSubpinSwipeLeft: 'SHOWCASE_SUBPIN_SWIPE_LEFT',
    ShowcaseSubpinSwipeRight: 'SHOWCASE_SUBPIN_SWIPE_RIGHT',
    ShowcaseSubpageRepin: 'SHOWCASE_SUBPAGE_REPIN',
    ShowcaseSubpinRepin: 'SHOWCASE_SUBPIN_REPIN',
    ShowcaseSubpageCloseup: 'SHOWCASE_SUBPAGE_CLOSEUP',
    ShowcaseCardThumbnailSwipeForward: 'SHOWCASE_CARD_THUMBNAIL_SWIPE_FORWARD',
    ShowcaseCardThumbnailSwipeBackward: 'SHOWCASE_CARD_THUMBNAIL_SWIPE_BACKWARD',
    ShowcaseAverageSubpageCloseupPerSession: 'SHOWCASE_AVERAGE_SUBPAGE_CLOSEUP_PER_SESSION',
    TotalCheckoutConversionRate: 'TOTAL_CHECKOUT_CONVERSION_RATE',
    TotalViewCategoryConversionRate: 'TOTAL_VIEW_CATEGORY_CONVERSION_RATE',
    TotalAddToCartConversionRate: 'TOTAL_ADD_TO_CART_CONVERSION_RATE',
    TotalSignupConversionRate: 'TOTAL_SIGNUP_CONVERSION_RATE',
    TotalPageVisitConversionRate: 'TOTAL_PAGE_VISIT_CONVERSION_RATE',
    TotalLeadConversionRate: 'TOTAL_LEAD_CONVERSION_RATE',
    TotalSearchConversionRate: 'TOTAL_SEARCH_CONVERSION_RATE',
    TotalWatchVideoConversionRate: 'TOTAL_WATCH_VIDEO_CONVERSION_RATE',
    TotalUnknownConversionRate: 'TOTAL_UNKNOWN_CONVERSION_RATE',
    TotalCustomConversionRate: 'TOTAL_CUSTOM_CONVERSION_RATE'
} as const;
export type AdGroupsTargetingAnalyticsGetColumnsEnum = typeof AdGroupsTargetingAnalyticsGetColumnsEnum[keyof typeof AdGroupsTargetingAnalyticsGetColumnsEnum];
/**
 * @export
 */
export const AdGroupsTargetingAnalyticsGetClickWindowDaysEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_7: 7,
    NUMBER_14: 14,
    NUMBER_30: 30,
    NUMBER_60: 60
} as const;
export type AdGroupsTargetingAnalyticsGetClickWindowDaysEnum = typeof AdGroupsTargetingAnalyticsGetClickWindowDaysEnum[keyof typeof AdGroupsTargetingAnalyticsGetClickWindowDaysEnum];
/**
 * @export
 */
export const AdGroupsTargetingAnalyticsGetEngagementWindowDaysEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_7: 7,
    NUMBER_14: 14,
    NUMBER_30: 30,
    NUMBER_60: 60
} as const;
export type AdGroupsTargetingAnalyticsGetEngagementWindowDaysEnum = typeof AdGroupsTargetingAnalyticsGetEngagementWindowDaysEnum[keyof typeof AdGroupsTargetingAnalyticsGetEngagementWindowDaysEnum];
/**
 * @export
 */
export const AdGroupsTargetingAnalyticsGetViewWindowDaysEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_7: 7,
    NUMBER_14: 14,
    NUMBER_30: 30,
    NUMBER_60: 60
} as const;
export type AdGroupsTargetingAnalyticsGetViewWindowDaysEnum = typeof AdGroupsTargetingAnalyticsGetViewWindowDaysEnum[keyof typeof AdGroupsTargetingAnalyticsGetViewWindowDaysEnum];
/**
 * @export
 */
export const AdGroupsTargetingAnalyticsGetConversionReportTimeEnum = {
    AdAction: 'TIME_OF_AD_ACTION',
    Conversion: 'TIME_OF_CONVERSION'
} as const;
export type AdGroupsTargetingAnalyticsGetConversionReportTimeEnum = typeof AdGroupsTargetingAnalyticsGetConversionReportTimeEnum[keyof typeof AdGroupsTargetingAnalyticsGetConversionReportTimeEnum];
