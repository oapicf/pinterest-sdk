/* tslint:disable */
/* eslint-disable */
/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { IntegrationLogsInvalidLogResponseRejectedLogsInner } from './IntegrationLogsInvalidLogResponseRejectedLogsInner';
import {
    IntegrationLogsInvalidLogResponseRejectedLogsInnerFromJSON,
    IntegrationLogsInvalidLogResponseRejectedLogsInnerFromJSONTyped,
    IntegrationLogsInvalidLogResponseRejectedLogsInnerToJSON,
    IntegrationLogsInvalidLogResponseRejectedLogsInnerToJSONTyped,
} from './IntegrationLogsInvalidLogResponseRejectedLogsInner';

/**
 * Schema describing the response when a log has invalid fields.
 * @export
 * @interface IntegrationLogsInvalidLogResponse
 */
export interface IntegrationLogsInvalidLogResponse {
    /**
     * 
     * @type {Array<IntegrationLogsInvalidLogResponseRejectedLogsInner>}
     * @memberof IntegrationLogsInvalidLogResponse
     */
    rejectedLogs?: Array<IntegrationLogsInvalidLogResponseRejectedLogsInner>;
}

/**
 * Check if a given object implements the IntegrationLogsInvalidLogResponse interface.
 */
export function instanceOfIntegrationLogsInvalidLogResponse(value: object): value is IntegrationLogsInvalidLogResponse {
    return true;
}

export function IntegrationLogsInvalidLogResponseFromJSON(json: any): IntegrationLogsInvalidLogResponse {
    return IntegrationLogsInvalidLogResponseFromJSONTyped(json, false);
}

export function IntegrationLogsInvalidLogResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): IntegrationLogsInvalidLogResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'rejectedLogs': json['rejected_logs'] == null ? undefined : ((json['rejected_logs'] as Array<any>).map(IntegrationLogsInvalidLogResponseRejectedLogsInnerFromJSON)),
    };
}

  export function IntegrationLogsInvalidLogResponseToJSON(json: any): IntegrationLogsInvalidLogResponse {
      return IntegrationLogsInvalidLogResponseToJSONTyped(json, false);
  }

  export function IntegrationLogsInvalidLogResponseToJSONTyped(value?: IntegrationLogsInvalidLogResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'rejected_logs': value['rejectedLogs'] == null ? undefined : ((value['rejectedLogs'] as Array<any>).map(IntegrationLogsInvalidLogResponseRejectedLogsInnerToJSON)),
    };
}

