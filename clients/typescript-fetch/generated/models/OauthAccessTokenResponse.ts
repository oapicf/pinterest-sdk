/* tslint:disable */
/* eslint-disable */
/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import { OauthAccessTokenResponseCode, OauthAccessTokenResponseCodeFromJSONTyped, OauthAccessTokenResponseCodeToJSON, OauthAccessTokenResponseCodeToJSONTyped } from './OauthAccessTokenResponseCode';
import { OauthAccessTokenResponseClientCredentials, OauthAccessTokenResponseClientCredentialsFromJSONTyped, OauthAccessTokenResponseClientCredentialsToJSON, OauthAccessTokenResponseClientCredentialsToJSONTyped } from './OauthAccessTokenResponseClientCredentials';
import { OauthAccessTokenResponseEverlastingRefresh, OauthAccessTokenResponseEverlastingRefreshFromJSONTyped, OauthAccessTokenResponseEverlastingRefreshToJSON, OauthAccessTokenResponseEverlastingRefreshToJSONTyped } from './OauthAccessTokenResponseEverlastingRefresh';
import { OauthAccessTokenResponseIntegrationRefresh, OauthAccessTokenResponseIntegrationRefreshFromJSONTyped, OauthAccessTokenResponseIntegrationRefreshToJSON, OauthAccessTokenResponseIntegrationRefreshToJSONTyped } from './OauthAccessTokenResponseIntegrationRefresh';
import { OauthAccessTokenResponseRefresh, OauthAccessTokenResponseRefreshFromJSONTyped, OauthAccessTokenResponseRefreshToJSON, OauthAccessTokenResponseRefreshToJSONTyped } from './OauthAccessTokenResponseRefresh';
/**
 * A successful OAuth access token response.
 * @export
 * @interface OauthAccessTokenResponse
 */
export interface OauthAccessTokenResponse {
    /**
     * 
     * @type {string}
     * @memberof OauthAccessTokenResponse
     */
    responseType?: OauthAccessTokenResponseResponseTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof OauthAccessTokenResponse
     */
    accessToken: string;
    /**
     * 
     * @type {string}
     * @memberof OauthAccessTokenResponse
     */
    tokenType: string;
    /**
     * 
     * @type {number}
     * @memberof OauthAccessTokenResponse
     */
    expiresIn: number;
    /**
     * 
     * @type {string}
     * @memberof OauthAccessTokenResponse
     */
    scope: string;
}


/**
 * @export
 */
export const OauthAccessTokenResponseResponseTypeEnum = {
    AuthorizationCode: 'authorization_code',
    RefreshToken: 'refresh_token',
    ClientCredentials: 'client_credentials'
} as const;
export type OauthAccessTokenResponseResponseTypeEnum = typeof OauthAccessTokenResponseResponseTypeEnum[keyof typeof OauthAccessTokenResponseResponseTypeEnum];


/**
 * Check if a given object implements the OauthAccessTokenResponse interface.
 */
export function instanceOfOauthAccessTokenResponse(value: object): value is OauthAccessTokenResponse {
    if (!('accessToken' in value) || value['accessToken'] === undefined) return false;
    if (!('tokenType' in value) || value['tokenType'] === undefined) return false;
    if (!('expiresIn' in value) || value['expiresIn'] === undefined) return false;
    if (!('scope' in value) || value['scope'] === undefined) return false;
    return true;
}

export function OauthAccessTokenResponseFromJSON(json: any): OauthAccessTokenResponse {
    return OauthAccessTokenResponseFromJSONTyped(json, false);
}

export function OauthAccessTokenResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): OauthAccessTokenResponse {
    if (json == null) {
        return json;
    }
    if (!ignoreDiscriminator) {
        if (json['response_type'] === 'authorization_code') {
            return OauthAccessTokenResponseCodeFromJSONTyped(json, ignoreDiscriminator);
        }
        if (json['response_type'] === 'client_credentials') {
            return OauthAccessTokenResponseClientCredentialsFromJSONTyped(json, ignoreDiscriminator);
        }
        if (json['response_type'] === 'everlasting_refresh') {
            return OauthAccessTokenResponseEverlastingRefreshFromJSONTyped(json, ignoreDiscriminator);
        }
        if (json['response_type'] === 'integration_refresh') {
            return OauthAccessTokenResponseIntegrationRefreshFromJSONTyped(json, ignoreDiscriminator);
        }
        if (json['response_type'] === 'refresh_token') {
            return OauthAccessTokenResponseRefreshFromJSONTyped(json, ignoreDiscriminator);
        }
    }
    return {
        
        'responseType': json['response_type'] == null ? undefined : json['response_type'],
        'accessToken': json['access_token'],
        'tokenType': json['token_type'],
        'expiresIn': json['expires_in'],
        'scope': json['scope'],
    };
}

  export function OauthAccessTokenResponseToJSON(json: any): OauthAccessTokenResponse {
      return OauthAccessTokenResponseToJSONTyped(json, false);
  }

  export function OauthAccessTokenResponseToJSONTyped(value?: OauthAccessTokenResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    if (!ignoreDiscriminator) {
        switch (value['responseType']) {
            case 'authorization_code':
                return OauthAccessTokenResponseCodeToJSONTyped(value as OauthAccessTokenResponseCode, ignoreDiscriminator);
            case 'client_credentials':
                return OauthAccessTokenResponseClientCredentialsToJSONTyped(value as OauthAccessTokenResponseClientCredentials, ignoreDiscriminator);
            case 'everlasting_refresh':
                return OauthAccessTokenResponseEverlastingRefreshToJSONTyped(value as OauthAccessTokenResponseEverlastingRefresh, ignoreDiscriminator);
            case 'integration_refresh':
                return OauthAccessTokenResponseIntegrationRefreshToJSONTyped(value as OauthAccessTokenResponseIntegrationRefresh, ignoreDiscriminator);
            case 'refresh_token':
                return OauthAccessTokenResponseRefreshToJSONTyped(value as OauthAccessTokenResponseRefresh, ignoreDiscriminator);
            default:
                throw new Error(`No variant of OauthAccessTokenResponse exists with 'responseType=${value['responseType']}'`);
        }
    }

    return {
        
        'response_type': value['responseType'],
        'access_token': value['accessToken'],
        'token_type': value['tokenType'],
        'expires_in': value['expiresIn'],
        'scope': value['scope'],
    };
}

