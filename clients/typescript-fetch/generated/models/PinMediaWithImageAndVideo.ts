/* tslint:disable */
/* eslint-disable */
/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { PinMedia } from './PinMedia';
import {
    PinMediaFromJSON,
    PinMediaFromJSONTyped,
    PinMediaToJSON,
    PinMediaToJSONTyped,
} from './PinMedia';
import type { PinMediaMetadata } from './PinMediaMetadata';
import {
    PinMediaMetadataFromJSON,
    PinMediaMetadataFromJSONTyped,
    PinMediaMetadataToJSON,
    PinMediaMetadataToJSONTyped,
} from './PinMediaMetadata';

/**
 * Pin with a mix of images and videos.
 * @export
 * @interface PinMediaWithImageAndVideo
 */
export interface PinMediaWithImageAndVideo extends PinMedia {
    /**
     * 
     * @type {Array<PinMediaMetadata>}
     * @memberof PinMediaWithImageAndVideo
     */
    items?: Array<PinMediaMetadata>;
}

/**
 * Check if a given object implements the PinMediaWithImageAndVideo interface.
 */
export function instanceOfPinMediaWithImageAndVideo(value: object): value is PinMediaWithImageAndVideo {
    return true;
}

export function PinMediaWithImageAndVideoFromJSON(json: any): PinMediaWithImageAndVideo {
    return PinMediaWithImageAndVideoFromJSONTyped(json, false);
}

export function PinMediaWithImageAndVideoFromJSONTyped(json: any, ignoreDiscriminator: boolean): PinMediaWithImageAndVideo {
    if (json == null) {
        return json;
    }
    return {
        ...PinMediaFromJSONTyped(json, true),
        'items': json['items'] == null ? undefined : ((json['items'] as Array<any>).map(PinMediaMetadataFromJSON)),
    };
}

  export function PinMediaWithImageAndVideoToJSON(json: any): PinMediaWithImageAndVideo {
      return PinMediaWithImageAndVideoToJSONTyped(json, false);
  }

  export function PinMediaWithImageAndVideoToJSONTyped(value?: PinMediaWithImageAndVideo | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        ...PinMediaToJSONTyped(value, true),
        'items': value['items'] == null ? undefined : ((value['items'] as Array<any>).map(PinMediaMetadataToJSON)),
    };
}

