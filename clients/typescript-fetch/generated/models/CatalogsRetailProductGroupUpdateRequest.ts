/* tslint:disable */
/* eslint-disable */
/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CatalogsLocale } from './CatalogsLocale';
import {
    CatalogsLocaleFromJSON,
    CatalogsLocaleFromJSONTyped,
    CatalogsLocaleToJSON,
    CatalogsLocaleToJSONTyped,
} from './CatalogsLocale';
import type { Country } from './Country';
import {
    CountryFromJSON,
    CountryFromJSONTyped,
    CountryToJSON,
    CountryToJSONTyped,
} from './Country';
import type { CatalogsProductGroupFiltersRequest } from './CatalogsProductGroupFiltersRequest';
import {
    CatalogsProductGroupFiltersRequestFromJSON,
    CatalogsProductGroupFiltersRequestFromJSONTyped,
    CatalogsProductGroupFiltersRequestToJSON,
    CatalogsProductGroupFiltersRequestToJSONTyped,
} from './CatalogsProductGroupFiltersRequest';

/**
 * Request object for updating a retail product group.
 * @export
 * @interface CatalogsRetailProductGroupUpdateRequest
 */
export interface CatalogsRetailProductGroupUpdateRequest {
    /**
     * Retail catalog based product group is available only for selected partners at the moment. If you are not eligible, please use feed based one.
     * @type {string}
     * @memberof CatalogsRetailProductGroupUpdateRequest
     */
    catalogType?: CatalogsRetailProductGroupUpdateRequestCatalogTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof CatalogsRetailProductGroupUpdateRequest
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof CatalogsRetailProductGroupUpdateRequest
     */
    description?: string | null;
    /**
     * 
     * @type {CatalogsProductGroupFiltersRequest}
     * @memberof CatalogsRetailProductGroupUpdateRequest
     */
    filters?: CatalogsProductGroupFiltersRequest;
    /**
     * 
     * @type {Country}
     * @memberof CatalogsRetailProductGroupUpdateRequest
     */
    country?: Country;
    /**
     * 
     * @type {CatalogsLocale}
     * @memberof CatalogsRetailProductGroupUpdateRequest
     */
    locale?: CatalogsLocale;
}


/**
 * @export
 */
export const CatalogsRetailProductGroupUpdateRequestCatalogTypeEnum = {
    Retail: 'RETAIL'
} as const;
export type CatalogsRetailProductGroupUpdateRequestCatalogTypeEnum = typeof CatalogsRetailProductGroupUpdateRequestCatalogTypeEnum[keyof typeof CatalogsRetailProductGroupUpdateRequestCatalogTypeEnum];


/**
 * Check if a given object implements the CatalogsRetailProductGroupUpdateRequest interface.
 */
export function instanceOfCatalogsRetailProductGroupUpdateRequest(value: object): value is CatalogsRetailProductGroupUpdateRequest {
    return true;
}

export function CatalogsRetailProductGroupUpdateRequestFromJSON(json: any): CatalogsRetailProductGroupUpdateRequest {
    return CatalogsRetailProductGroupUpdateRequestFromJSONTyped(json, false);
}

export function CatalogsRetailProductGroupUpdateRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): CatalogsRetailProductGroupUpdateRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'catalogType': json['catalog_type'] == null ? undefined : json['catalog_type'],
        'name': json['name'] == null ? undefined : json['name'],
        'description': json['description'] == null ? undefined : json['description'],
        'filters': json['filters'] == null ? undefined : CatalogsProductGroupFiltersRequestFromJSON(json['filters']),
        'country': json['country'] == null ? undefined : CountryFromJSON(json['country']),
        'locale': json['locale'] == null ? undefined : CatalogsLocaleFromJSON(json['locale']),
    };
}

  export function CatalogsRetailProductGroupUpdateRequestToJSON(json: any): CatalogsRetailProductGroupUpdateRequest {
      return CatalogsRetailProductGroupUpdateRequestToJSONTyped(json, false);
  }

  export function CatalogsRetailProductGroupUpdateRequestToJSONTyped(value?: CatalogsRetailProductGroupUpdateRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'catalog_type': value['catalogType'],
        'name': value['name'],
        'description': value['description'],
        'filters': CatalogsProductGroupFiltersRequestToJSON(value['filters']),
        'country': CountryToJSON(value['country']),
        'locale': CatalogsLocaleToJSON(value['locale']),
    };
}

