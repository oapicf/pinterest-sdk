/* tslint:disable */
/* eslint-disable */
/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Base64-encoded image media source
 * @export
 * @interface PinMediaSourceImageBase64
 */
export interface PinMediaSourceImageBase64 {
    /**
     * 
     * @type {string}
     * @memberof PinMediaSourceImageBase64
     */
    sourceType: PinMediaSourceImageBase64SourceTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof PinMediaSourceImageBase64
     */
    contentType: PinMediaSourceImageBase64ContentTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof PinMediaSourceImageBase64
     */
    data: string;
    /**
     * Set the parameter to false to create the new simplified Pin instead of the standard pin. Currently the field is only available to a list of beta users.
     * @type {boolean}
     * @memberof PinMediaSourceImageBase64
     */
    isStandard?: boolean;
}


/**
 * @export
 */
export const PinMediaSourceImageBase64SourceTypeEnum = {
    ImageBase64: 'image_base64'
} as const;
export type PinMediaSourceImageBase64SourceTypeEnum = typeof PinMediaSourceImageBase64SourceTypeEnum[keyof typeof PinMediaSourceImageBase64SourceTypeEnum];

/**
 * @export
 */
export const PinMediaSourceImageBase64ContentTypeEnum = {
    Jpeg: 'image/jpeg',
    Png: 'image/png'
} as const;
export type PinMediaSourceImageBase64ContentTypeEnum = typeof PinMediaSourceImageBase64ContentTypeEnum[keyof typeof PinMediaSourceImageBase64ContentTypeEnum];


/**
 * Check if a given object implements the PinMediaSourceImageBase64 interface.
 */
export function instanceOfPinMediaSourceImageBase64(value: object): value is PinMediaSourceImageBase64 {
    if (!('sourceType' in value) || value['sourceType'] === undefined) return false;
    if (!('contentType' in value) || value['contentType'] === undefined) return false;
    if (!('data' in value) || value['data'] === undefined) return false;
    return true;
}

export function PinMediaSourceImageBase64FromJSON(json: any): PinMediaSourceImageBase64 {
    return PinMediaSourceImageBase64FromJSONTyped(json, false);
}

export function PinMediaSourceImageBase64FromJSONTyped(json: any, ignoreDiscriminator: boolean): PinMediaSourceImageBase64 {
    if (json == null) {
        return json;
    }
    return {
        
        'sourceType': json['source_type'],
        'contentType': json['content_type'],
        'data': json['data'],
        'isStandard': json['is_standard'] == null ? undefined : json['is_standard'],
    };
}

  export function PinMediaSourceImageBase64ToJSON(json: any): PinMediaSourceImageBase64 {
      return PinMediaSourceImageBase64ToJSONTyped(json, false);
  }

  export function PinMediaSourceImageBase64ToJSONTyped(value?: PinMediaSourceImageBase64 | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'source_type': value['sourceType'],
        'content_type': value['contentType'],
        'data': value['data'],
        'is_standard': value['isStandard'],
    };
}

