/* tslint:disable */
/* eslint-disable */
/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { MediaType } from './MediaType';
import {
    MediaTypeFromJSON,
    MediaTypeFromJSONTyped,
    MediaTypeToJSON,
    MediaTypeToJSONTyped,
} from './MediaType';

/**
 * 
 * @export
 * @interface CatalogsProductGroupMultipleMediaTypesCriteria
 */
export interface CatalogsProductGroupMultipleMediaTypesCriteria {
    /**
     * 
     * @type {Array<MediaType>}
     * @memberof CatalogsProductGroupMultipleMediaTypesCriteria
     */
    values: Array<MediaType>;
    /**
     * 
     * @type {boolean}
     * @memberof CatalogsProductGroupMultipleMediaTypesCriteria
     */
    negated?: boolean;
}

/**
 * Check if a given object implements the CatalogsProductGroupMultipleMediaTypesCriteria interface.
 */
export function instanceOfCatalogsProductGroupMultipleMediaTypesCriteria(value: object): value is CatalogsProductGroupMultipleMediaTypesCriteria {
    if (!('values' in value) || value['values'] === undefined) return false;
    return true;
}

export function CatalogsProductGroupMultipleMediaTypesCriteriaFromJSON(json: any): CatalogsProductGroupMultipleMediaTypesCriteria {
    return CatalogsProductGroupMultipleMediaTypesCriteriaFromJSONTyped(json, false);
}

export function CatalogsProductGroupMultipleMediaTypesCriteriaFromJSONTyped(json: any, ignoreDiscriminator: boolean): CatalogsProductGroupMultipleMediaTypesCriteria {
    if (json == null) {
        return json;
    }
    return {
        
        'values': ((json['values'] as Array<any>).map(MediaTypeFromJSON)),
        'negated': json['negated'] == null ? undefined : json['negated'],
    };
}

  export function CatalogsProductGroupMultipleMediaTypesCriteriaToJSON(json: any): CatalogsProductGroupMultipleMediaTypesCriteria {
      return CatalogsProductGroupMultipleMediaTypesCriteriaToJSONTyped(json, false);
  }

  export function CatalogsProductGroupMultipleMediaTypesCriteriaToJSONTyped(value?: CatalogsProductGroupMultipleMediaTypesCriteria | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'values': ((value['values'] as Array<any>).map(MediaTypeToJSON)),
        'negated': value['negated'],
    };
}

