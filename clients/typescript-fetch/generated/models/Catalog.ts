/* tslint:disable */
/* eslint-disable */
/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CatalogsType } from './CatalogsType';
import {
    CatalogsTypeFromJSON,
    CatalogsTypeFromJSONTyped,
    CatalogsTypeToJSON,
    CatalogsTypeToJSONTyped,
} from './CatalogsType';

/**
 * Catalog entity
 * @export
 * @interface Catalog
 */
export interface Catalog {
    /**
     * 
     * @type {Date}
     * @memberof Catalog
     */
    createdAt: Date;
    /**
     * ID of the catalog entity.
     * @type {string}
     * @memberof Catalog
     */
    id: string;
    /**
     * 
     * @type {Date}
     * @memberof Catalog
     */
    updatedAt: Date;
    /**
     * A human-friendly name associated to a catalog entity.
     * @type {string}
     * @memberof Catalog
     */
    name: string | null;
    /**
     * 
     * @type {CatalogsType}
     * @memberof Catalog
     */
    catalogType: CatalogsType;
}



/**
 * Check if a given object implements the Catalog interface.
 */
export function instanceOfCatalog(value: object): value is Catalog {
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('catalogType' in value) || value['catalogType'] === undefined) return false;
    return true;
}

export function CatalogFromJSON(json: any): Catalog {
    return CatalogFromJSONTyped(json, false);
}

export function CatalogFromJSONTyped(json: any, ignoreDiscriminator: boolean): Catalog {
    if (json == null) {
        return json;
    }
    return {
        
        'createdAt': (new Date(json['created_at'])),
        'id': json['id'],
        'updatedAt': (new Date(json['updated_at'])),
        'name': json['name'],
        'catalogType': CatalogsTypeFromJSON(json['catalog_type']),
    };
}

  export function CatalogToJSON(json: any): Catalog {
      return CatalogToJSONTyped(json, false);
  }

  export function CatalogToJSONTyped(value?: Catalog | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'created_at': ((value['createdAt']).toISOString()),
        'id': value['id'],
        'updated_at': ((value['updatedAt']).toISOString()),
        'name': value['name'],
        'catalog_type': CatalogsTypeToJSON(value['catalogType']),
    };
}

