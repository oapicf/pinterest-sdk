/* tslint:disable */
/* eslint-disable */
/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Country } from './Country';
import {
    CountryFromJSON,
    CountryFromJSONTyped,
    CountryToJSON,
    CountryToJSONTyped,
} from './Country';

/**
 * 
 * @export
 * @interface CatalogsProductGroupMultipleCountriesCriteria
 */
export interface CatalogsProductGroupMultipleCountriesCriteria {
    /**
     * 
     * @type {Array<Country>}
     * @memberof CatalogsProductGroupMultipleCountriesCriteria
     */
    values: Array<Country>;
    /**
     * 
     * @type {boolean}
     * @memberof CatalogsProductGroupMultipleCountriesCriteria
     */
    negated?: boolean;
}

/**
 * Check if a given object implements the CatalogsProductGroupMultipleCountriesCriteria interface.
 */
export function instanceOfCatalogsProductGroupMultipleCountriesCriteria(value: object): value is CatalogsProductGroupMultipleCountriesCriteria {
    if (!('values' in value) || value['values'] === undefined) return false;
    return true;
}

export function CatalogsProductGroupMultipleCountriesCriteriaFromJSON(json: any): CatalogsProductGroupMultipleCountriesCriteria {
    return CatalogsProductGroupMultipleCountriesCriteriaFromJSONTyped(json, false);
}

export function CatalogsProductGroupMultipleCountriesCriteriaFromJSONTyped(json: any, ignoreDiscriminator: boolean): CatalogsProductGroupMultipleCountriesCriteria {
    if (json == null) {
        return json;
    }
    return {
        
        'values': ((json['values'] as Array<any>).map(CountryFromJSON)),
        'negated': json['negated'] == null ? undefined : json['negated'],
    };
}

  export function CatalogsProductGroupMultipleCountriesCriteriaToJSON(json: any): CatalogsProductGroupMultipleCountriesCriteria {
      return CatalogsProductGroupMultipleCountriesCriteriaToJSONTyped(json, false);
  }

  export function CatalogsProductGroupMultipleCountriesCriteriaToJSONTyped(value?: CatalogsProductGroupMultipleCountriesCriteria | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'values': ((value['values'] as Array<any>).map(CountryToJSON)),
        'negated': value['negated'],
    };
}

