/* tslint:disable */
/* eslint-disable */
/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ItemAttributesRequest } from './ItemAttributesRequest';
import {
    ItemAttributesRequestFromJSON,
    ItemAttributesRequestFromJSONTyped,
    ItemAttributesRequestToJSON,
    ItemAttributesRequestToJSONTyped,
} from './ItemAttributesRequest';
import type { UpdateMaskFieldType } from './UpdateMaskFieldType';
import {
    UpdateMaskFieldTypeFromJSON,
    UpdateMaskFieldTypeFromJSONTyped,
    UpdateMaskFieldTypeToJSON,
    UpdateMaskFieldTypeToJSONTyped,
} from './UpdateMaskFieldType';

import { CatalogsCreateRetailItem, CatalogsCreateRetailItemFromJSONTyped, CatalogsCreateRetailItemToJSON, CatalogsCreateRetailItemToJSONTyped } from './CatalogsCreateRetailItem';
import { CatalogsDeleteRetailItem, CatalogsDeleteRetailItemFromJSONTyped, CatalogsDeleteRetailItemToJSON, CatalogsDeleteRetailItemToJSONTyped } from './CatalogsDeleteRetailItem';
import { CatalogsUpdateRetailItem, CatalogsUpdateRetailItemFromJSONTyped, CatalogsUpdateRetailItemToJSON, CatalogsUpdateRetailItemToJSONTyped } from './CatalogsUpdateRetailItem';
import { CatalogsUpsertRetailItem, CatalogsUpsertRetailItemFromJSONTyped, CatalogsUpsertRetailItemToJSON, CatalogsUpsertRetailItemToJSONTyped } from './CatalogsUpsertRetailItem';
/**
 * 
 * @export
 * @interface CatalogsRetailBatchRequestItemsInner
 */
export interface CatalogsRetailBatchRequestItemsInner {
    /**
     * The catalog item id in the merchant namespace
     * @type {string}
     * @memberof CatalogsRetailBatchRequestItemsInner
     */
    itemId: string;
    /**
     * 
     * @type {string}
     * @memberof CatalogsRetailBatchRequestItemsInner
     */
    operation: CatalogsRetailBatchRequestItemsInnerOperationEnum;
    /**
     * 
     * @type {ItemAttributesRequest}
     * @memberof CatalogsRetailBatchRequestItemsInner
     */
    attributes: ItemAttributesRequest;
    /**
     * The list of product attributes to be updated. Attributes specified in the update mask without a value specified in the body will be deleted from the product item.
     * @type {Array<UpdateMaskFieldType>}
     * @memberof CatalogsRetailBatchRequestItemsInner
     */
    updateMask?: Array<UpdateMaskFieldType> | null;
}


/**
 * @export
 */
export const CatalogsRetailBatchRequestItemsInnerOperationEnum = {
    Delete: 'DELETE'
} as const;
export type CatalogsRetailBatchRequestItemsInnerOperationEnum = typeof CatalogsRetailBatchRequestItemsInnerOperationEnum[keyof typeof CatalogsRetailBatchRequestItemsInnerOperationEnum];


/**
 * Check if a given object implements the CatalogsRetailBatchRequestItemsInner interface.
 */
export function instanceOfCatalogsRetailBatchRequestItemsInner(value: object): value is CatalogsRetailBatchRequestItemsInner {
    if (!('itemId' in value) || value['itemId'] === undefined) return false;
    if (!('operation' in value) || value['operation'] === undefined) return false;
    if (!('attributes' in value) || value['attributes'] === undefined) return false;
    return true;
}

export function CatalogsRetailBatchRequestItemsInnerFromJSON(json: any): CatalogsRetailBatchRequestItemsInner {
    return CatalogsRetailBatchRequestItemsInnerFromJSONTyped(json, false);
}

export function CatalogsRetailBatchRequestItemsInnerFromJSONTyped(json: any, ignoreDiscriminator: boolean): CatalogsRetailBatchRequestItemsInner {
    if (json == null) {
        return json;
    }
    if (!ignoreDiscriminator) {
        if (json['operation'] === 'CREATE') {
            return CatalogsCreateRetailItemFromJSONTyped(json, ignoreDiscriminator);
        }
        if (json['operation'] === 'DELETE') {
            return CatalogsDeleteRetailItemFromJSONTyped(json, ignoreDiscriminator);
        }
        if (json['operation'] === 'UPDATE') {
            return CatalogsUpdateRetailItemFromJSONTyped(json, ignoreDiscriminator);
        }
        if (json['operation'] === 'UPSERT') {
            return CatalogsUpsertRetailItemFromJSONTyped(json, ignoreDiscriminator);
        }
    }
    return {
        
        'itemId': json['item_id'],
        'operation': json['operation'],
        'attributes': ItemAttributesRequestFromJSON(json['attributes']),
        'updateMask': json['update_mask'] == null ? undefined : ((json['update_mask'] as Array<any>).map(UpdateMaskFieldTypeFromJSON)),
    };
}

  export function CatalogsRetailBatchRequestItemsInnerToJSON(json: any): CatalogsRetailBatchRequestItemsInner {
      return CatalogsRetailBatchRequestItemsInnerToJSONTyped(json, false);
  }

  export function CatalogsRetailBatchRequestItemsInnerToJSONTyped(value?: CatalogsRetailBatchRequestItemsInner | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    if (!ignoreDiscriminator) {
        switch (value['operation']) {
            case 'CREATE':
                return CatalogsCreateRetailItemToJSONTyped(value as CatalogsCreateRetailItem, ignoreDiscriminator);
            case 'DELETE':
                return CatalogsDeleteRetailItemToJSONTyped(value as CatalogsDeleteRetailItem, ignoreDiscriminator);
            case 'UPDATE':
                return CatalogsUpdateRetailItemToJSONTyped(value as CatalogsUpdateRetailItem, ignoreDiscriminator);
            case 'UPSERT':
                return CatalogsUpsertRetailItemToJSONTyped(value as CatalogsUpsertRetailItem, ignoreDiscriminator);
            default:
                throw new Error(`No variant of CatalogsRetailBatchRequestItemsInner exists with 'operation=${value['operation']}'`);
        }
    }

    return {
        
        'item_id': value['itemId'],
        'operation': value['operation'],
        'attributes': ItemAttributesRequestToJSON(value['attributes']),
        'update_mask': value['updateMask'] == null ? undefined : ((value['updateMask'] as Array<any>).map(UpdateMaskFieldTypeToJSON)),
    };
}

