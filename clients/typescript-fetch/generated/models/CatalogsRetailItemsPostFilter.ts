/* tslint:disable */
/* eslint-disable */
/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface CatalogsRetailItemsPostFilter
 */
export interface CatalogsRetailItemsPostFilter {
    /**
     * 
     * @type {string}
     * @memberof CatalogsRetailItemsPostFilter
     */
    catalogType: CatalogsRetailItemsPostFilterCatalogTypeEnum;
    /**
     * 
     * @type {Array<string>}
     * @memberof CatalogsRetailItemsPostFilter
     */
    itemIds: Array<string>;
    /**
     * Catalog id pertaining to the retail item. If not provided, default to oldest retail catalog
     * @type {string}
     * @memberof CatalogsRetailItemsPostFilter
     */
    catalogId?: string;
}


/**
 * @export
 */
export const CatalogsRetailItemsPostFilterCatalogTypeEnum = {
    Retail: 'RETAIL'
} as const;
export type CatalogsRetailItemsPostFilterCatalogTypeEnum = typeof CatalogsRetailItemsPostFilterCatalogTypeEnum[keyof typeof CatalogsRetailItemsPostFilterCatalogTypeEnum];


/**
 * Check if a given object implements the CatalogsRetailItemsPostFilter interface.
 */
export function instanceOfCatalogsRetailItemsPostFilter(value: object): value is CatalogsRetailItemsPostFilter {
    if (!('catalogType' in value) || value['catalogType'] === undefined) return false;
    if (!('itemIds' in value) || value['itemIds'] === undefined) return false;
    return true;
}

export function CatalogsRetailItemsPostFilterFromJSON(json: any): CatalogsRetailItemsPostFilter {
    return CatalogsRetailItemsPostFilterFromJSONTyped(json, false);
}

export function CatalogsRetailItemsPostFilterFromJSONTyped(json: any, ignoreDiscriminator: boolean): CatalogsRetailItemsPostFilter {
    if (json == null) {
        return json;
    }
    return {
        
        'catalogType': json['catalog_type'],
        'itemIds': json['item_ids'],
        'catalogId': json['catalog_id'] == null ? undefined : json['catalog_id'],
    };
}

  export function CatalogsRetailItemsPostFilterToJSON(json: any): CatalogsRetailItemsPostFilter {
      return CatalogsRetailItemsPostFilterToJSONTyped(json, false);
  }

  export function CatalogsRetailItemsPostFilterToJSONTyped(value?: CatalogsRetailItemsPostFilter | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'catalog_type': value['catalogType'],
        'item_ids': value['itemIds'],
        'catalog_id': value['catalogId'],
    };
}

