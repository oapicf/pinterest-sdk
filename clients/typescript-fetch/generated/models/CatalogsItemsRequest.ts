/* tslint:disable */
/* eslint-disable */
/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CatalogsItemsPostFilters } from './CatalogsItemsPostFilters';
import {
    CatalogsItemsPostFiltersFromJSON,
    CatalogsItemsPostFiltersFromJSONTyped,
    CatalogsItemsPostFiltersToJSON,
    CatalogsItemsPostFiltersToJSONTyped,
} from './CatalogsItemsPostFilters';
import type { Country } from './Country';
import {
    CountryFromJSON,
    CountryFromJSONTyped,
    CountryToJSON,
    CountryToJSONTyped,
} from './Country';
import type { CatalogsItemsRequestLanguage } from './CatalogsItemsRequestLanguage';
import {
    CatalogsItemsRequestLanguageFromJSON,
    CatalogsItemsRequestLanguageFromJSONTyped,
    CatalogsItemsRequestLanguageToJSON,
    CatalogsItemsRequestLanguageToJSONTyped,
} from './CatalogsItemsRequestLanguage';

/**
 * Request object of catalogs items
 * @export
 * @interface CatalogsItemsRequest
 */
export interface CatalogsItemsRequest {
    /**
     * 
     * @type {Country}
     * @memberof CatalogsItemsRequest
     */
    country: Country;
    /**
     * 
     * @type {CatalogsItemsRequestLanguage}
     * @memberof CatalogsItemsRequest
     */
    language: CatalogsItemsRequestLanguage;
    /**
     * 
     * @type {CatalogsItemsPostFilters}
     * @memberof CatalogsItemsRequest
     */
    filters: CatalogsItemsPostFilters;
}



/**
 * Check if a given object implements the CatalogsItemsRequest interface.
 */
export function instanceOfCatalogsItemsRequest(value: object): value is CatalogsItemsRequest {
    if (!('country' in value) || value['country'] === undefined) return false;
    if (!('language' in value) || value['language'] === undefined) return false;
    if (!('filters' in value) || value['filters'] === undefined) return false;
    return true;
}

export function CatalogsItemsRequestFromJSON(json: any): CatalogsItemsRequest {
    return CatalogsItemsRequestFromJSONTyped(json, false);
}

export function CatalogsItemsRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): CatalogsItemsRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'country': CountryFromJSON(json['country']),
        'language': CatalogsItemsRequestLanguageFromJSON(json['language']),
        'filters': CatalogsItemsPostFiltersFromJSON(json['filters']),
    };
}

  export function CatalogsItemsRequestToJSON(json: any): CatalogsItemsRequest {
      return CatalogsItemsRequestToJSONTyped(json, false);
  }

  export function CatalogsItemsRequestToJSONTyped(value?: CatalogsItemsRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'country': CountryToJSON(value['country']),
        'language': CatalogsItemsRequestLanguageToJSON(value['language']),
        'filters': CatalogsItemsPostFiltersToJSON(value['filters']),
    };
}

