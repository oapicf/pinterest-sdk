/* tslint:disable */
/* eslint-disable */
/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CreativeAssetsVisibilityType } from './CreativeAssetsVisibilityType';
import {
    CreativeAssetsVisibilityTypeFromJSON,
    CreativeAssetsVisibilityTypeFromJSONTyped,
    CreativeAssetsVisibilityTypeToJSON,
    CreativeAssetsVisibilityTypeToJSONTyped,
} from './CreativeAssetsVisibilityType';

/**
 * Creative assets product metadata entity
 * @export
 * @interface CatalogsCreativeAssetsProductMetadata
 */
export interface CatalogsCreativeAssetsProductMetadata {
    /**
     * The user-created unique ID that represents the creative assets item.
     * @type {string}
     * @memberof CatalogsCreativeAssetsProductMetadata
     */
    creativeAssetsId: string;
    /**
     * 
     * @type {CreativeAssetsVisibilityType}
     * @memberof CatalogsCreativeAssetsProductMetadata
     */
    visibility: CreativeAssetsVisibilityType;
}



/**
 * Check if a given object implements the CatalogsCreativeAssetsProductMetadata interface.
 */
export function instanceOfCatalogsCreativeAssetsProductMetadata(value: object): value is CatalogsCreativeAssetsProductMetadata {
    if (!('creativeAssetsId' in value) || value['creativeAssetsId'] === undefined) return false;
    if (!('visibility' in value) || value['visibility'] === undefined) return false;
    return true;
}

export function CatalogsCreativeAssetsProductMetadataFromJSON(json: any): CatalogsCreativeAssetsProductMetadata {
    return CatalogsCreativeAssetsProductMetadataFromJSONTyped(json, false);
}

export function CatalogsCreativeAssetsProductMetadataFromJSONTyped(json: any, ignoreDiscriminator: boolean): CatalogsCreativeAssetsProductMetadata {
    if (json == null) {
        return json;
    }
    return {
        
        'creativeAssetsId': json['creative_assets_id'],
        'visibility': CreativeAssetsVisibilityTypeFromJSON(json['visibility']),
    };
}

  export function CatalogsCreativeAssetsProductMetadataToJSON(json: any): CatalogsCreativeAssetsProductMetadata {
      return CatalogsCreativeAssetsProductMetadataToJSONTyped(json, false);
  }

  export function CatalogsCreativeAssetsProductMetadataToJSONTyped(value?: CatalogsCreativeAssetsProductMetadata | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'creative_assets_id': value['creativeAssetsId'],
        'visibility': CreativeAssetsVisibilityTypeToJSON(value['visibility']),
    };
}

