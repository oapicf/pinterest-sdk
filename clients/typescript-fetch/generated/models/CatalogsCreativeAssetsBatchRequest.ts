/* tslint:disable */
/* eslint-disable */
/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CatalogsCreativeAssetsBatchItem } from './CatalogsCreativeAssetsBatchItem';
import {
    CatalogsCreativeAssetsBatchItemFromJSON,
    CatalogsCreativeAssetsBatchItemFromJSONTyped,
    CatalogsCreativeAssetsBatchItemToJSON,
    CatalogsCreativeAssetsBatchItemToJSONTyped,
} from './CatalogsCreativeAssetsBatchItem';
import type { Country } from './Country';
import {
    CountryFromJSON,
    CountryFromJSONTyped,
    CountryToJSON,
    CountryToJSONTyped,
} from './Country';
import type { CatalogsItemsRequestLanguage } from './CatalogsItemsRequestLanguage';
import {
    CatalogsItemsRequestLanguageFromJSON,
    CatalogsItemsRequestLanguageFromJSONTyped,
    CatalogsItemsRequestLanguageToJSON,
    CatalogsItemsRequestLanguageToJSONTyped,
} from './CatalogsItemsRequestLanguage';

/**
 * Request object to update catalogs creative assets items
 * @export
 * @interface CatalogsCreativeAssetsBatchRequest
 */
export interface CatalogsCreativeAssetsBatchRequest {
    /**
     * 
     * @type {string}
     * @memberof CatalogsCreativeAssetsBatchRequest
     */
    catalogType: CatalogsCreativeAssetsBatchRequestCatalogTypeEnum;
    /**
     * 
     * @type {Country}
     * @memberof CatalogsCreativeAssetsBatchRequest
     */
    country: Country;
    /**
     * 
     * @type {CatalogsItemsRequestLanguage}
     * @memberof CatalogsCreativeAssetsBatchRequest
     */
    language: CatalogsItemsRequestLanguage;
    /**
     * Array with creative assets item operations
     * @type {Array<CatalogsCreativeAssetsBatchItem>}
     * @memberof CatalogsCreativeAssetsBatchRequest
     */
    items: Array<CatalogsCreativeAssetsBatchItem>;
    /**
     * Catalog id pertaining to the creative assets item. If not provided, default to oldest creative assets catalog
     * @type {string}
     * @memberof CatalogsCreativeAssetsBatchRequest
     */
    catalogId?: string;
}


/**
 * @export
 */
export const CatalogsCreativeAssetsBatchRequestCatalogTypeEnum = {
    CreativeAssets: 'CREATIVE_ASSETS'
} as const;
export type CatalogsCreativeAssetsBatchRequestCatalogTypeEnum = typeof CatalogsCreativeAssetsBatchRequestCatalogTypeEnum[keyof typeof CatalogsCreativeAssetsBatchRequestCatalogTypeEnum];


/**
 * Check if a given object implements the CatalogsCreativeAssetsBatchRequest interface.
 */
export function instanceOfCatalogsCreativeAssetsBatchRequest(value: object): value is CatalogsCreativeAssetsBatchRequest {
    if (!('catalogType' in value) || value['catalogType'] === undefined) return false;
    if (!('country' in value) || value['country'] === undefined) return false;
    if (!('language' in value) || value['language'] === undefined) return false;
    if (!('items' in value) || value['items'] === undefined) return false;
    return true;
}

export function CatalogsCreativeAssetsBatchRequestFromJSON(json: any): CatalogsCreativeAssetsBatchRequest {
    return CatalogsCreativeAssetsBatchRequestFromJSONTyped(json, false);
}

export function CatalogsCreativeAssetsBatchRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): CatalogsCreativeAssetsBatchRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'catalogType': json['catalog_type'],
        'country': CountryFromJSON(json['country']),
        'language': CatalogsItemsRequestLanguageFromJSON(json['language']),
        'items': ((json['items'] as Array<any>).map(CatalogsCreativeAssetsBatchItemFromJSON)),
        'catalogId': json['catalog_id'] == null ? undefined : json['catalog_id'],
    };
}

  export function CatalogsCreativeAssetsBatchRequestToJSON(json: any): CatalogsCreativeAssetsBatchRequest {
      return CatalogsCreativeAssetsBatchRequestToJSONTyped(json, false);
  }

  export function CatalogsCreativeAssetsBatchRequestToJSONTyped(value?: CatalogsCreativeAssetsBatchRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'catalog_type': value['catalogType'],
        'country': CountryToJSON(value['country']),
        'language': CatalogsItemsRequestLanguageToJSON(value['language']),
        'items': ((value['items'] as Array<any>).map(CatalogsCreativeAssetsBatchItemToJSON)),
        'catalog_id': value['catalogId'],
    };
}

