/* tslint:disable */
/* eslint-disable */
/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { PinMediaSourceImageBase64 } from './PinMediaSourceImageBase64';
import {
    instanceOfPinMediaSourceImageBase64,
    PinMediaSourceImageBase64FromJSON,
    PinMediaSourceImageBase64FromJSONTyped,
    PinMediaSourceImageBase64ToJSON,
} from './PinMediaSourceImageBase64';
import type { PinMediaSourceImageURL } from './PinMediaSourceImageURL';
import {
    instanceOfPinMediaSourceImageURL,
    PinMediaSourceImageURLFromJSON,
    PinMediaSourceImageURLFromJSONTyped,
    PinMediaSourceImageURLToJSON,
} from './PinMediaSourceImageURL';
import type { PinMediaSourceImagesBase64 } from './PinMediaSourceImagesBase64';
import {
    instanceOfPinMediaSourceImagesBase64,
    PinMediaSourceImagesBase64FromJSON,
    PinMediaSourceImagesBase64FromJSONTyped,
    PinMediaSourceImagesBase64ToJSON,
} from './PinMediaSourceImagesBase64';
import type { PinMediaSourceImagesURL } from './PinMediaSourceImagesURL';
import {
    instanceOfPinMediaSourceImagesURL,
    PinMediaSourceImagesURLFromJSON,
    PinMediaSourceImagesURLFromJSONTyped,
    PinMediaSourceImagesURLToJSON,
} from './PinMediaSourceImagesURL';
import type { PinMediaSourcePinURL } from './PinMediaSourcePinURL';
import {
    instanceOfPinMediaSourcePinURL,
    PinMediaSourcePinURLFromJSON,
    PinMediaSourcePinURLFromJSONTyped,
    PinMediaSourcePinURLToJSON,
} from './PinMediaSourcePinURL';
import type { PinMediaSourceVideoID } from './PinMediaSourceVideoID';
import {
    instanceOfPinMediaSourceVideoID,
    PinMediaSourceVideoIDFromJSON,
    PinMediaSourceVideoIDFromJSONTyped,
    PinMediaSourceVideoIDToJSON,
} from './PinMediaSourceVideoID';

/**
 * @type PinMediaSource
 * Pin media source.
 * @export
 */
export type PinMediaSource = { sourceType: 'image_base64' } & PinMediaSourceImageBase64 | { sourceType: 'image_url' } & PinMediaSourceImageURL | { sourceType: 'multiple_image_base64' } & PinMediaSourceImagesBase64 | { sourceType: 'multiple_image_urls' } & PinMediaSourceImagesURL | { sourceType: 'pin_url' } & PinMediaSourcePinURL | { sourceType: 'video_id' } & PinMediaSourceVideoID;

export function PinMediaSourceFromJSON(json: any): PinMediaSource {
    return PinMediaSourceFromJSONTyped(json, false);
}

export function PinMediaSourceFromJSONTyped(json: any, ignoreDiscriminator: boolean): PinMediaSource {
    if (json == null) {
        return json;
    }
    switch (json['source_type']) {
        case 'image_base64':
            return Object.assign({}, PinMediaSourceImageBase64FromJSONTyped(json, true), { sourceType: 'image_base64' } as const);
        case 'image_url':
            return Object.assign({}, PinMediaSourceImageURLFromJSONTyped(json, true), { sourceType: 'image_url' } as const);
        case 'multiple_image_base64':
            return Object.assign({}, PinMediaSourceImagesBase64FromJSONTyped(json, true), { sourceType: 'multiple_image_base64' } as const);
        case 'multiple_image_urls':
            return Object.assign({}, PinMediaSourceImagesURLFromJSONTyped(json, true), { sourceType: 'multiple_image_urls' } as const);
        case 'pin_url':
            return Object.assign({}, PinMediaSourcePinURLFromJSONTyped(json, true), { sourceType: 'pin_url' } as const);
        case 'video_id':
            return Object.assign({}, PinMediaSourceVideoIDFromJSONTyped(json, true), { sourceType: 'video_id' } as const);
        default:
            throw new Error(`No variant of PinMediaSource exists with 'sourceType=${json['sourceType']}'`);
    }
}

export function PinMediaSourceToJSON(value?: PinMediaSource | null): any {
    if (value == null) {
        return value;
    }
    switch (value['sourceType']) {
        case 'image_base64':
            return PinMediaSourceImageBase64ToJSON(value);
        case 'image_url':
            return PinMediaSourceImageURLToJSON(value);
        case 'multiple_image_base64':
            return PinMediaSourceImagesBase64ToJSON(value);
        case 'multiple_image_urls':
            return PinMediaSourceImagesURLToJSON(value);
        case 'pin_url':
            return PinMediaSourcePinURLToJSON(value);
        case 'video_id':
            return PinMediaSourceVideoIDToJSON(value);
        default:
            throw new Error(`No variant of PinMediaSource exists with 'sourceType=${value['sourceType']}'`);
    }

}

