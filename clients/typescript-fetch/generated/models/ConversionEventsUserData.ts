/* tslint:disable */
/* eslint-disable */
/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ConversionEventsUserDataAnyOf2 } from './ConversionEventsUserDataAnyOf2';
import {
    ConversionEventsUserDataAnyOf2FromJSON,
    ConversionEventsUserDataAnyOf2FromJSONTyped,
    ConversionEventsUserDataAnyOf2ToJSON,
    ConversionEventsUserDataAnyOf2ToJSONTyped,
} from './ConversionEventsUserDataAnyOf2';
import type { ConversionEventsUserDataAnyOf1 } from './ConversionEventsUserDataAnyOf1';
import {
    ConversionEventsUserDataAnyOf1FromJSON,
    ConversionEventsUserDataAnyOf1FromJSONTyped,
    ConversionEventsUserDataAnyOf1ToJSON,
    ConversionEventsUserDataAnyOf1ToJSONTyped,
} from './ConversionEventsUserDataAnyOf1';
import type { ConversionEventsUserDataAnyOf } from './ConversionEventsUserDataAnyOf';
import {
    ConversionEventsUserDataAnyOfFromJSON,
    ConversionEventsUserDataAnyOfFromJSONTyped,
    ConversionEventsUserDataAnyOfToJSON,
    ConversionEventsUserDataAnyOfToJSONTyped,
} from './ConversionEventsUserDataAnyOf';

/**
 * Object containing customer information data. Note, It is required at least one of 1) em, 2) hashed_maids or 3) pair client_ip_address + client_user_agent.
 * @export
 * @interface ConversionEventsUserData
 */
export interface ConversionEventsUserData {
    /**
     * Sha256 hashes of user's phone numbers, only digits with country code, area code, and number. Remove any symbols, letters, spaces and leading zeros. We highly recommend this on checkout events at least. It may improve reporting performance such as ROAS/CPA. The string should be in the UTF-8 format.
     * @type {Array<string>}
     * @memberof ConversionEventsUserData
     */
    ph?: Array<string>;
    /**
     * Sha256 hashes of user's gender, in lowercase. Either "f" or "m" or "n" for non-binary gender. The string should be in the UTF-8 format.
     * @type {Array<string>}
     * @memberof ConversionEventsUserData
     */
    ge?: Array<string>;
    /**
     * Sha256 hashes of user's date of birthday, given as year, month, and day. The string should be in the UTF-8 format.
     * @type {Array<string>}
     * @memberof ConversionEventsUserData
     */
    db?: Array<string>;
    /**
     * Sha256 hashes of user's last name, in lowercase. We highly recommend this on checkout events at least. It may improve reporting performance such as ROAS/CPA. The string should be in the UTF-8 format.
     * @type {Array<string>}
     * @memberof ConversionEventsUserData
     */
    ln?: Array<string>;
    /**
     * Sha256 hashes of user's first name, in lowercase. We highly recommend this on checkout events at least. It may improve reporting performance such as ROAS/CPA. The string should be in the UTF-8 format.
     * @type {Array<string>}
     * @memberof ConversionEventsUserData
     */
    fn?: Array<string>;
    /**
     * Sha256 hashes of user's city, in lowercase, and without spaces or punctuation. User residency city (mostly billing). The string should be in the UTF-8 format.
     * @type {Array<string>}
     * @memberof ConversionEventsUserData
     */
    ct?: Array<string>;
    /**
     * Sha256 hashes of user's state, given as a two-letter code in lowercase. User residency state (mostly billing). The string should be in the UTF-8 format.
     * @type {Array<string>}
     * @memberof ConversionEventsUserData
     */
    st?: Array<string>;
    /**
     * Sha256 hashes of user's zipcode, only digits. User residency zipcode (mostly billing). The string should be in the UTF-8 format.
     * @type {Array<string>}
     * @memberof ConversionEventsUserData
     */
    zp?: Array<string>;
    /**
     * Sha256 hashes of two-character ISO-3166 country code indicating the user's country, in lowercase. The string should be in the UTF-8 format.
     * @type {Array<string>}
     * @memberof ConversionEventsUserData
     */
    country?: Array<string>;
    /**
     * Sha256 hashes of the unique id from the advertiser that identifies a user in their space, e.g. user id, loyalty id, etc. We highly recommend this on all events. It may improve reporting performance such as ROAS/CPA. The string should be in the UTF-8 format.
     * @type {Array<string>}
     * @memberof ConversionEventsUserData
     */
    externalId?: Array<string>;
    /**
     * The unique identifier stored in _epik cookie on your domain or &epik= query parameter in the URL. We highly recommend this on checkout events at least. It may improve reporting performance such as ROAS/CPA.
     * @type {string}
     * @memberof ConversionEventsUserData
     */
    clickId?: string | null;
    /**
     * A unique identifier of visitors' information defined by third party partners. e.g RampID
     * @type {string}
     * @memberof ConversionEventsUserData
     */
    partnerId?: string | null;
    /**
     * Sha256 hashes of lowercase version of user's email addresses. Used for matching. We highly recommend this on checkout events at least. It may improve reporting performance such as ROAS/CPA. The string should be in the UTF-8 format.
     * @type {Array<string>}
     * @memberof ConversionEventsUserData
     */
    em: Array<string>;
    /**
     * Sha256 hashes of user's "Google Advertising IDs" (GAIDs) or "Apple's Identifier for Advertisers" (IDFAs). Used for matching. We highly recommend this on checkout events at least. It may improve reporting performance such as ROAS/CPA. The string should be in the UTF-8 format.
     * @type {Array<string>}
     * @memberof ConversionEventsUserData
     */
    hashedMaids: Array<string>;
    /**
     * The user's IP address, which can be either in IPv4 or IPv6 format. Used for matching. We highly recommend this for all events. It may improve reporting performance such as ROAS/CPA.
     * @type {string}
     * @memberof ConversionEventsUserData
     */
    clientIpAddress: string;
    /**
     * The user agent string of the user's web browser. We highly recommend this for all events. It may improve reporting performance such as ROAS/CPA.
     * @type {string}
     * @memberof ConversionEventsUserData
     */
    clientUserAgent: string;
}

/**
 * Check if a given object implements the ConversionEventsUserData interface.
 */
export function instanceOfConversionEventsUserData(value: object): value is ConversionEventsUserData {
    if (!('em' in value) || value['em'] === undefined) return false;
    if (!('hashedMaids' in value) || value['hashedMaids'] === undefined) return false;
    if (!('clientIpAddress' in value) || value['clientIpAddress'] === undefined) return false;
    if (!('clientUserAgent' in value) || value['clientUserAgent'] === undefined) return false;
    return true;
}

export function ConversionEventsUserDataFromJSON(json: any): ConversionEventsUserData {
    return ConversionEventsUserDataFromJSONTyped(json, false);
}

export function ConversionEventsUserDataFromJSONTyped(json: any, ignoreDiscriminator: boolean): ConversionEventsUserData {
    if (json == null) {
        return json;
    }
    return {
        
        'ph': json['ph'] == null ? undefined : json['ph'],
        'ge': json['ge'] == null ? undefined : json['ge'],
        'db': json['db'] == null ? undefined : json['db'],
        'ln': json['ln'] == null ? undefined : json['ln'],
        'fn': json['fn'] == null ? undefined : json['fn'],
        'ct': json['ct'] == null ? undefined : json['ct'],
        'st': json['st'] == null ? undefined : json['st'],
        'zp': json['zp'] == null ? undefined : json['zp'],
        'country': json['country'] == null ? undefined : json['country'],
        'externalId': json['external_id'] == null ? undefined : json['external_id'],
        'clickId': json['click_id'] == null ? undefined : json['click_id'],
        'partnerId': json['partner_id'] == null ? undefined : json['partner_id'],
        'em': json['em'],
        'hashedMaids': json['hashed_maids'],
        'clientIpAddress': json['client_ip_address'],
        'clientUserAgent': json['client_user_agent'],
    };
}

  export function ConversionEventsUserDataToJSON(json: any): ConversionEventsUserData {
      return ConversionEventsUserDataToJSONTyped(json, false);
  }

  export function ConversionEventsUserDataToJSONTyped(value?: ConversionEventsUserData | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'ph': value['ph'],
        'ge': value['ge'],
        'db': value['db'],
        'ln': value['ln'],
        'fn': value['fn'],
        'ct': value['ct'],
        'st': value['st'],
        'zp': value['zp'],
        'country': value['country'],
        'external_id': value['externalId'],
        'click_id': value['clickId'],
        'partner_id': value['partnerId'],
        'em': value['em'],
        'hashed_maids': value['hashedMaids'],
        'client_ip_address': value['clientIpAddress'],
        'client_user_agent': value['clientUserAgent'],
    };
}

