/* tslint:disable */
/* eslint-disable */
/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CatalogsLocale } from './CatalogsLocale';
import {
    CatalogsLocaleFromJSON,
    CatalogsLocaleFromJSONTyped,
    CatalogsLocaleToJSON,
    CatalogsLocaleToJSONTyped,
} from './CatalogsLocale';
import type { Country } from './Country';
import {
    CountryFromJSON,
    CountryFromJSONTyped,
    CountryToJSON,
    CountryToJSONTyped,
} from './Country';
import type { CatalogsProductGroupFilters } from './CatalogsProductGroupFilters';
import {
    CatalogsProductGroupFiltersFromJSON,
    CatalogsProductGroupFiltersFromJSONTyped,
    CatalogsProductGroupFiltersToJSON,
    CatalogsProductGroupFiltersToJSONTyped,
} from './CatalogsProductGroupFilters';

/**
 * Request object to list products for a given retail catalog_id and product group filter.
 * @export
 * @interface CatalogsRetailListProductsByCatalogBasedFilterRequest
 */
export interface CatalogsRetailListProductsByCatalogBasedFilterRequest {
    /**
     * Retail catalog based product group is available only for selected partners at the moment. If you are not eligible, please use feed based one.
     * @type {string}
     * @memberof CatalogsRetailListProductsByCatalogBasedFilterRequest
     */
    catalogType: CatalogsRetailListProductsByCatalogBasedFilterRequestCatalogTypeEnum;
    /**
     * Catalog id pertaining to the retail product group.
     * @type {string}
     * @memberof CatalogsRetailListProductsByCatalogBasedFilterRequest
     */
    catalogId: string;
    /**
     * 
     * @type {CatalogsProductGroupFilters}
     * @memberof CatalogsRetailListProductsByCatalogBasedFilterRequest
     */
    filters: CatalogsProductGroupFilters;
    /**
     * 
     * @type {Country}
     * @memberof CatalogsRetailListProductsByCatalogBasedFilterRequest
     */
    country: Country;
    /**
     * 
     * @type {CatalogsLocale}
     * @memberof CatalogsRetailListProductsByCatalogBasedFilterRequest
     */
    locale: CatalogsLocale;
}


/**
 * @export
 */
export const CatalogsRetailListProductsByCatalogBasedFilterRequestCatalogTypeEnum = {
    Retail: 'RETAIL'
} as const;
export type CatalogsRetailListProductsByCatalogBasedFilterRequestCatalogTypeEnum = typeof CatalogsRetailListProductsByCatalogBasedFilterRequestCatalogTypeEnum[keyof typeof CatalogsRetailListProductsByCatalogBasedFilterRequestCatalogTypeEnum];


/**
 * Check if a given object implements the CatalogsRetailListProductsByCatalogBasedFilterRequest interface.
 */
export function instanceOfCatalogsRetailListProductsByCatalogBasedFilterRequest(value: object): value is CatalogsRetailListProductsByCatalogBasedFilterRequest {
    if (!('catalogType' in value) || value['catalogType'] === undefined) return false;
    if (!('catalogId' in value) || value['catalogId'] === undefined) return false;
    if (!('filters' in value) || value['filters'] === undefined) return false;
    if (!('country' in value) || value['country'] === undefined) return false;
    if (!('locale' in value) || value['locale'] === undefined) return false;
    return true;
}

export function CatalogsRetailListProductsByCatalogBasedFilterRequestFromJSON(json: any): CatalogsRetailListProductsByCatalogBasedFilterRequest {
    return CatalogsRetailListProductsByCatalogBasedFilterRequestFromJSONTyped(json, false);
}

export function CatalogsRetailListProductsByCatalogBasedFilterRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): CatalogsRetailListProductsByCatalogBasedFilterRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'catalogType': json['catalog_type'],
        'catalogId': json['catalog_id'],
        'filters': CatalogsProductGroupFiltersFromJSON(json['filters']),
        'country': CountryFromJSON(json['country']),
        'locale': CatalogsLocaleFromJSON(json['locale']),
    };
}

  export function CatalogsRetailListProductsByCatalogBasedFilterRequestToJSON(json: any): CatalogsRetailListProductsByCatalogBasedFilterRequest {
      return CatalogsRetailListProductsByCatalogBasedFilterRequestToJSONTyped(json, false);
  }

  export function CatalogsRetailListProductsByCatalogBasedFilterRequestToJSONTyped(value?: CatalogsRetailListProductsByCatalogBasedFilterRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'catalog_type': value['catalogType'],
        'catalog_id': value['catalogId'],
        'filters': CatalogsProductGroupFiltersToJSON(value['filters']),
        'country': CountryToJSON(value['country']),
        'locale': CatalogsLocaleToJSON(value['locale']),
    };
}

