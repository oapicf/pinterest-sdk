/* tslint:disable */
/* eslint-disable */
/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ItemUpsertBatchRecord } from './ItemUpsertBatchRecord';
import {
    ItemUpsertBatchRecordFromJSON,
    ItemUpsertBatchRecordFromJSONTyped,
    ItemUpsertBatchRecordToJSON,
    ItemUpsertBatchRecordToJSONTyped,
} from './ItemUpsertBatchRecord';
import type { Country } from './Country';
import {
    CountryFromJSON,
    CountryFromJSONTyped,
    CountryToJSON,
    CountryToJSONTyped,
} from './Country';
import type { BatchOperation } from './BatchOperation';
import {
    BatchOperationFromJSON,
    BatchOperationFromJSONTyped,
    BatchOperationToJSON,
    BatchOperationToJSONTyped,
} from './BatchOperation';
import type { CatalogsItemsRequestLanguage } from './CatalogsItemsRequestLanguage';
import {
    CatalogsItemsRequestLanguageFromJSON,
    CatalogsItemsRequestLanguageFromJSONTyped,
    CatalogsItemsRequestLanguageToJSON,
    CatalogsItemsRequestLanguageToJSONTyped,
} from './CatalogsItemsRequestLanguage';

/**
 * Request object to upsert catalogs items
 * @export
 * @interface CatalogsItemsUpsertBatchRequest
 */
export interface CatalogsItemsUpsertBatchRequest {
    /**
     * 
     * @type {Country}
     * @memberof CatalogsItemsUpsertBatchRequest
     */
    country: Country;
    /**
     * 
     * @type {CatalogsItemsRequestLanguage}
     * @memberof CatalogsItemsUpsertBatchRequest
     */
    language: CatalogsItemsRequestLanguage;
    /**
     * 
     * @type {BatchOperation}
     * @memberof CatalogsItemsUpsertBatchRequest
     */
    operation: BatchOperation;
    /**
     * Array with catalogs items
     * @type {Array<ItemUpsertBatchRecord>}
     * @memberof CatalogsItemsUpsertBatchRequest
     */
    items: Array<ItemUpsertBatchRecord>;
}



/**
 * Check if a given object implements the CatalogsItemsUpsertBatchRequest interface.
 */
export function instanceOfCatalogsItemsUpsertBatchRequest(value: object): value is CatalogsItemsUpsertBatchRequest {
    if (!('country' in value) || value['country'] === undefined) return false;
    if (!('language' in value) || value['language'] === undefined) return false;
    if (!('operation' in value) || value['operation'] === undefined) return false;
    if (!('items' in value) || value['items'] === undefined) return false;
    return true;
}

export function CatalogsItemsUpsertBatchRequestFromJSON(json: any): CatalogsItemsUpsertBatchRequest {
    return CatalogsItemsUpsertBatchRequestFromJSONTyped(json, false);
}

export function CatalogsItemsUpsertBatchRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): CatalogsItemsUpsertBatchRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'country': CountryFromJSON(json['country']),
        'language': CatalogsItemsRequestLanguageFromJSON(json['language']),
        'operation': BatchOperationFromJSON(json['operation']),
        'items': ((json['items'] as Array<any>).map(ItemUpsertBatchRecordFromJSON)),
    };
}

  export function CatalogsItemsUpsertBatchRequestToJSON(json: any): CatalogsItemsUpsertBatchRequest {
      return CatalogsItemsUpsertBatchRequestToJSONTyped(json, false);
  }

  export function CatalogsItemsUpsertBatchRequestToJSONTyped(value?: CatalogsItemsUpsertBatchRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'country': CountryToJSON(value['country']),
        'language': CatalogsItemsRequestLanguageToJSON(value['language']),
        'operation': BatchOperationToJSON(value['operation']),
        'items': ((value['items'] as Array<any>).map(ItemUpsertBatchRecordToJSON)),
    };
}

