/* tslint:disable */
/* eslint-disable */
/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CatalogsCreativeAssetsAttributes } from './CatalogsCreativeAssetsAttributes';
import {
    CatalogsCreativeAssetsAttributesFromJSON,
    CatalogsCreativeAssetsAttributesFromJSONTyped,
    CatalogsCreativeAssetsAttributesToJSON,
    CatalogsCreativeAssetsAttributesToJSONTyped,
} from './CatalogsCreativeAssetsAttributes';

/**
 * A creative assets item to be upserted.
 * @export
 * @interface CatalogsUpsertCreativeAssetsItem
 */
export interface CatalogsUpsertCreativeAssetsItem {
    /**
     * The catalog creative assets id in the merchant namespace
     * @type {string}
     * @memberof CatalogsUpsertCreativeAssetsItem
     */
    creativeAssetsId: string;
    /**
     * 
     * @type {string}
     * @memberof CatalogsUpsertCreativeAssetsItem
     */
    operation: CatalogsUpsertCreativeAssetsItemOperationEnum;
    /**
     * 
     * @type {CatalogsCreativeAssetsAttributes}
     * @memberof CatalogsUpsertCreativeAssetsItem
     */
    attributes: CatalogsCreativeAssetsAttributes;
}


/**
 * @export
 */
export const CatalogsUpsertCreativeAssetsItemOperationEnum = {
    Upsert: 'UPSERT'
} as const;
export type CatalogsUpsertCreativeAssetsItemOperationEnum = typeof CatalogsUpsertCreativeAssetsItemOperationEnum[keyof typeof CatalogsUpsertCreativeAssetsItemOperationEnum];


/**
 * Check if a given object implements the CatalogsUpsertCreativeAssetsItem interface.
 */
export function instanceOfCatalogsUpsertCreativeAssetsItem(value: object): value is CatalogsUpsertCreativeAssetsItem {
    if (!('creativeAssetsId' in value) || value['creativeAssetsId'] === undefined) return false;
    if (!('operation' in value) || value['operation'] === undefined) return false;
    if (!('attributes' in value) || value['attributes'] === undefined) return false;
    return true;
}

export function CatalogsUpsertCreativeAssetsItemFromJSON(json: any): CatalogsUpsertCreativeAssetsItem {
    return CatalogsUpsertCreativeAssetsItemFromJSONTyped(json, false);
}

export function CatalogsUpsertCreativeAssetsItemFromJSONTyped(json: any, ignoreDiscriminator: boolean): CatalogsUpsertCreativeAssetsItem {
    if (json == null) {
        return json;
    }
    return {
        
        'creativeAssetsId': json['creative_assets_id'],
        'operation': json['operation'],
        'attributes': CatalogsCreativeAssetsAttributesFromJSON(json['attributes']),
    };
}

  export function CatalogsUpsertCreativeAssetsItemToJSON(json: any): CatalogsUpsertCreativeAssetsItem {
      return CatalogsUpsertCreativeAssetsItemToJSONTyped(json, false);
  }

  export function CatalogsUpsertCreativeAssetsItemToJSONTyped(value?: CatalogsUpsertCreativeAssetsItem | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'creative_assets_id': value['creativeAssetsId'],
        'operation': value['operation'],
        'attributes': CatalogsCreativeAssetsAttributesToJSON(value['attributes']),
    };
}

