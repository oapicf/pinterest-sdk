/* tslint:disable */
/* eslint-disable */
/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * A successful OAuth access token response for the refresh token flow.
 * @export
 * @interface OauthAccessTokenResponseRefresh
 */
export interface OauthAccessTokenResponseRefresh {
    /**
     * 
     * @type {string}
     * @memberof OauthAccessTokenResponseRefresh
     */
    responseType?: OauthAccessTokenResponseRefreshResponseTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof OauthAccessTokenResponseRefresh
     */
    accessToken: string;
    /**
     * 
     * @type {string}
     * @memberof OauthAccessTokenResponseRefresh
     */
    tokenType: string;
    /**
     * 
     * @type {number}
     * @memberof OauthAccessTokenResponseRefresh
     */
    expiresIn: number;
    /**
     * 
     * @type {string}
     * @memberof OauthAccessTokenResponseRefresh
     */
    scope: string;
}


/**
 * @export
 */
export const OauthAccessTokenResponseRefreshResponseTypeEnum = {
    AuthorizationCode: 'authorization_code',
    RefreshToken: 'refresh_token',
    ClientCredentials: 'client_credentials'
} as const;
export type OauthAccessTokenResponseRefreshResponseTypeEnum = typeof OauthAccessTokenResponseRefreshResponseTypeEnum[keyof typeof OauthAccessTokenResponseRefreshResponseTypeEnum];


/**
 * Check if a given object implements the OauthAccessTokenResponseRefresh interface.
 */
export function instanceOfOauthAccessTokenResponseRefresh(value: object): value is OauthAccessTokenResponseRefresh {
    if (!('accessToken' in value) || value['accessToken'] === undefined) return false;
    if (!('tokenType' in value) || value['tokenType'] === undefined) return false;
    if (!('expiresIn' in value) || value['expiresIn'] === undefined) return false;
    if (!('scope' in value) || value['scope'] === undefined) return false;
    return true;
}

export function OauthAccessTokenResponseRefreshFromJSON(json: any): OauthAccessTokenResponseRefresh {
    return OauthAccessTokenResponseRefreshFromJSONTyped(json, false);
}

export function OauthAccessTokenResponseRefreshFromJSONTyped(json: any, ignoreDiscriminator: boolean): OauthAccessTokenResponseRefresh {
    if (json == null) {
        return json;
    }
    return {
        
        'responseType': json['response_type'] == null ? undefined : json['response_type'],
        'accessToken': json['access_token'],
        'tokenType': json['token_type'],
        'expiresIn': json['expires_in'],
        'scope': json['scope'],
    };
}

  export function OauthAccessTokenResponseRefreshToJSON(json: any): OauthAccessTokenResponseRefresh {
      return OauthAccessTokenResponseRefreshToJSONTyped(json, false);
  }

  export function OauthAccessTokenResponseRefreshToJSONTyped(value?: OauthAccessTokenResponseRefresh | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'response_type': value['responseType'],
        'access_token': value['accessToken'],
        'token_type': value['tokenType'],
        'expires_in': value['expiresIn'],
        'scope': value['scope'],
    };
}

