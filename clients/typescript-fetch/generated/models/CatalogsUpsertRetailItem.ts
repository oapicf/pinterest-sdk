/* tslint:disable */
/* eslint-disable */
/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ItemAttributesRequest } from './ItemAttributesRequest';
import {
    ItemAttributesRequestFromJSON,
    ItemAttributesRequestFromJSONTyped,
    ItemAttributesRequestToJSON,
    ItemAttributesRequestToJSONTyped,
} from './ItemAttributesRequest';

/**
 * An item to be upserted
 * @export
 * @interface CatalogsUpsertRetailItem
 */
export interface CatalogsUpsertRetailItem {
    /**
     * The catalog item id in the merchant namespace
     * @type {string}
     * @memberof CatalogsUpsertRetailItem
     */
    itemId: string;
    /**
     * 
     * @type {string}
     * @memberof CatalogsUpsertRetailItem
     */
    operation: CatalogsUpsertRetailItemOperationEnum;
    /**
     * 
     * @type {ItemAttributesRequest}
     * @memberof CatalogsUpsertRetailItem
     */
    attributes: ItemAttributesRequest;
}


/**
 * @export
 */
export const CatalogsUpsertRetailItemOperationEnum = {
    Upsert: 'UPSERT'
} as const;
export type CatalogsUpsertRetailItemOperationEnum = typeof CatalogsUpsertRetailItemOperationEnum[keyof typeof CatalogsUpsertRetailItemOperationEnum];


/**
 * Check if a given object implements the CatalogsUpsertRetailItem interface.
 */
export function instanceOfCatalogsUpsertRetailItem(value: object): value is CatalogsUpsertRetailItem {
    if (!('itemId' in value) || value['itemId'] === undefined) return false;
    if (!('operation' in value) || value['operation'] === undefined) return false;
    if (!('attributes' in value) || value['attributes'] === undefined) return false;
    return true;
}

export function CatalogsUpsertRetailItemFromJSON(json: any): CatalogsUpsertRetailItem {
    return CatalogsUpsertRetailItemFromJSONTyped(json, false);
}

export function CatalogsUpsertRetailItemFromJSONTyped(json: any, ignoreDiscriminator: boolean): CatalogsUpsertRetailItem {
    if (json == null) {
        return json;
    }
    return {
        
        'itemId': json['item_id'],
        'operation': json['operation'],
        'attributes': ItemAttributesRequestFromJSON(json['attributes']),
    };
}

  export function CatalogsUpsertRetailItemToJSON(json: any): CatalogsUpsertRetailItem {
      return CatalogsUpsertRetailItemToJSONTyped(json, false);
  }

  export function CatalogsUpsertRetailItemToJSONTyped(value?: CatalogsUpsertRetailItem | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'item_id': value['itemId'],
        'operation': value['operation'],
        'attributes': ItemAttributesRequestToJSON(value['attributes']),
    };
}

