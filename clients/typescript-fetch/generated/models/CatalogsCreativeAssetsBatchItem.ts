/* tslint:disable */
/* eslint-disable */
/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CatalogsUpdatableCreativeAssetsAttributes } from './CatalogsUpdatableCreativeAssetsAttributes';
import {
    CatalogsUpdatableCreativeAssetsAttributesFromJSON,
    CatalogsUpdatableCreativeAssetsAttributesFromJSONTyped,
    CatalogsUpdatableCreativeAssetsAttributesToJSON,
    CatalogsUpdatableCreativeAssetsAttributesToJSONTyped,
} from './CatalogsUpdatableCreativeAssetsAttributes';

import { CatalogsCreateCreativeAssetsItem, CatalogsCreateCreativeAssetsItemFromJSONTyped, CatalogsCreateCreativeAssetsItemToJSON, CatalogsCreateCreativeAssetsItemToJSONTyped } from './CatalogsCreateCreativeAssetsItem';
import { CatalogsDeleteCreativeAssetsItem, CatalogsDeleteCreativeAssetsItemFromJSONTyped, CatalogsDeleteCreativeAssetsItemToJSON, CatalogsDeleteCreativeAssetsItemToJSONTyped } from './CatalogsDeleteCreativeAssetsItem';
import { CatalogsUpdateCreativeAssetsItem, CatalogsUpdateCreativeAssetsItemFromJSONTyped, CatalogsUpdateCreativeAssetsItemToJSON, CatalogsUpdateCreativeAssetsItemToJSONTyped } from './CatalogsUpdateCreativeAssetsItem';
import { CatalogsUpsertCreativeAssetsItem, CatalogsUpsertCreativeAssetsItemFromJSONTyped, CatalogsUpsertCreativeAssetsItemToJSON, CatalogsUpsertCreativeAssetsItemToJSONTyped } from './CatalogsUpsertCreativeAssetsItem';
/**
 * Creative assets batch item
 * @export
 * @interface CatalogsCreativeAssetsBatchItem
 */
export interface CatalogsCreativeAssetsBatchItem {
    /**
     * The catalog creative assets id in the merchant namespace
     * @type {string}
     * @memberof CatalogsCreativeAssetsBatchItem
     */
    creativeAssetsId: string;
    /**
     * 
     * @type {string}
     * @memberof CatalogsCreativeAssetsBatchItem
     */
    operation: CatalogsCreativeAssetsBatchItemOperationEnum;
    /**
     * 
     * @type {CatalogsUpdatableCreativeAssetsAttributes}
     * @memberof CatalogsCreativeAssetsBatchItem
     */
    attributes: CatalogsUpdatableCreativeAssetsAttributes;
}


/**
 * @export
 */
export const CatalogsCreativeAssetsBatchItemOperationEnum = {
    Delete: 'DELETE'
} as const;
export type CatalogsCreativeAssetsBatchItemOperationEnum = typeof CatalogsCreativeAssetsBatchItemOperationEnum[keyof typeof CatalogsCreativeAssetsBatchItemOperationEnum];


/**
 * Check if a given object implements the CatalogsCreativeAssetsBatchItem interface.
 */
export function instanceOfCatalogsCreativeAssetsBatchItem(value: object): value is CatalogsCreativeAssetsBatchItem {
    if (!('creativeAssetsId' in value) || value['creativeAssetsId'] === undefined) return false;
    if (!('operation' in value) || value['operation'] === undefined) return false;
    if (!('attributes' in value) || value['attributes'] === undefined) return false;
    return true;
}

export function CatalogsCreativeAssetsBatchItemFromJSON(json: any): CatalogsCreativeAssetsBatchItem {
    return CatalogsCreativeAssetsBatchItemFromJSONTyped(json, false);
}

export function CatalogsCreativeAssetsBatchItemFromJSONTyped(json: any, ignoreDiscriminator: boolean): CatalogsCreativeAssetsBatchItem {
    if (json == null) {
        return json;
    }
    if (!ignoreDiscriminator) {
        if (json['operation'] === 'CREATE') {
            return CatalogsCreateCreativeAssetsItemFromJSONTyped(json, ignoreDiscriminator);
        }
        if (json['operation'] === 'DELETE') {
            return CatalogsDeleteCreativeAssetsItemFromJSONTyped(json, ignoreDiscriminator);
        }
        if (json['operation'] === 'UPDATE') {
            return CatalogsUpdateCreativeAssetsItemFromJSONTyped(json, ignoreDiscriminator);
        }
        if (json['operation'] === 'UPSERT') {
            return CatalogsUpsertCreativeAssetsItemFromJSONTyped(json, ignoreDiscriminator);
        }
    }
    return {
        
        'creativeAssetsId': json['creative_assets_id'],
        'operation': json['operation'],
        'attributes': CatalogsUpdatableCreativeAssetsAttributesFromJSON(json['attributes']),
    };
}

  export function CatalogsCreativeAssetsBatchItemToJSON(json: any): CatalogsCreativeAssetsBatchItem {
      return CatalogsCreativeAssetsBatchItemToJSONTyped(json, false);
  }

  export function CatalogsCreativeAssetsBatchItemToJSONTyped(value?: CatalogsCreativeAssetsBatchItem | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    if (!ignoreDiscriminator) {
        switch (value['operation']) {
            case 'CREATE':
                return CatalogsCreateCreativeAssetsItemToJSONTyped(value as CatalogsCreateCreativeAssetsItem, ignoreDiscriminator);
            case 'DELETE':
                return CatalogsDeleteCreativeAssetsItemToJSONTyped(value as CatalogsDeleteCreativeAssetsItem, ignoreDiscriminator);
            case 'UPDATE':
                return CatalogsUpdateCreativeAssetsItemToJSONTyped(value as CatalogsUpdateCreativeAssetsItem, ignoreDiscriminator);
            case 'UPSERT':
                return CatalogsUpsertCreativeAssetsItemToJSONTyped(value as CatalogsUpsertCreativeAssetsItem, ignoreDiscriminator);
            default:
                throw new Error(`No variant of CatalogsCreativeAssetsBatchItem exists with 'operation=${value['operation']}'`);
        }
    }

    return {
        
        'creative_assets_id': value['creativeAssetsId'],
        'operation': value['operation'],
        'attributes': CatalogsUpdatableCreativeAssetsAttributesToJSON(value['attributes']),
    };
}

