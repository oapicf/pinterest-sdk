/* tslint:disable */
/* eslint-disable */
/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface CatalogsReportDistributionStats
 */
export interface CatalogsReportDistributionStats {
    /**
     * 
     * @type {string}
     * @memberof CatalogsReportDistributionStats
     */
    reportType?: CatalogsReportDistributionStatsReportTypeEnum;
    /**
     * ID of the catalog entity.
     * @type {string}
     * @memberof CatalogsReportDistributionStats
     */
    catalogId?: string;
    /**
     * The event code that a diagnostics aggregated number references
     * @type {number}
     * @memberof CatalogsReportDistributionStats
     */
    code?: number;
    /**
     * A human-friendly label for the event code (e.g, 'SPAM')
     * @type {string}
     * @memberof CatalogsReportDistributionStats
     */
    codeLabel?: string;
    /**
     * Title message describing the diagnostic issue
     * @type {string}
     * @memberof CatalogsReportDistributionStats
     */
    message?: string;
    /**
     * Number of occurrences of the issue
     * @type {number}
     * @memberof CatalogsReportDistributionStats
     */
    occurrences?: number;
    /**
     * Indicates if issue makes items ineligible for ads distribution
     * @type {boolean}
     * @memberof CatalogsReportDistributionStats
     */
    ineligibleForAds?: boolean;
    /**
     * Indicates if issue makes items ineligible for organic distribution
     * @type {boolean}
     * @memberof CatalogsReportDistributionStats
     */
    ineligibleForOrganic?: boolean;
}


/**
 * @export
 */
export const CatalogsReportDistributionStatsReportTypeEnum = {
    DistributionIssues: 'DISTRIBUTION_ISSUES'
} as const;
export type CatalogsReportDistributionStatsReportTypeEnum = typeof CatalogsReportDistributionStatsReportTypeEnum[keyof typeof CatalogsReportDistributionStatsReportTypeEnum];


/**
 * Check if a given object implements the CatalogsReportDistributionStats interface.
 */
export function instanceOfCatalogsReportDistributionStats(value: object): value is CatalogsReportDistributionStats {
    return true;
}

export function CatalogsReportDistributionStatsFromJSON(json: any): CatalogsReportDistributionStats {
    return CatalogsReportDistributionStatsFromJSONTyped(json, false);
}

export function CatalogsReportDistributionStatsFromJSONTyped(json: any, ignoreDiscriminator: boolean): CatalogsReportDistributionStats {
    if (json == null) {
        return json;
    }
    return {
        
        'reportType': json['report_type'] == null ? undefined : json['report_type'],
        'catalogId': json['catalog_id'] == null ? undefined : json['catalog_id'],
        'code': json['code'] == null ? undefined : json['code'],
        'codeLabel': json['code_label'] == null ? undefined : json['code_label'],
        'message': json['message'] == null ? undefined : json['message'],
        'occurrences': json['occurrences'] == null ? undefined : json['occurrences'],
        'ineligibleForAds': json['ineligible_for_ads'] == null ? undefined : json['ineligible_for_ads'],
        'ineligibleForOrganic': json['ineligible_for_organic'] == null ? undefined : json['ineligible_for_organic'],
    };
}

  export function CatalogsReportDistributionStatsToJSON(json: any): CatalogsReportDistributionStats {
      return CatalogsReportDistributionStatsToJSONTyped(json, false);
  }

  export function CatalogsReportDistributionStatsToJSONTyped(value?: CatalogsReportDistributionStats | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'report_type': value['reportType'],
        'catalog_id': value['catalogId'],
        'code': value['code'],
        'code_label': value['codeLabel'],
        'message': value['message'],
        'occurrences': value['occurrences'],
        'ineligible_for_ads': value['ineligibleForAds'],
        'ineligible_for_organic': value['ineligibleForOrganic'],
    };
}

