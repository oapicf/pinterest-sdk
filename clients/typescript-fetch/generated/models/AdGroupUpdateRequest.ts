/* tslint:disable */
/* eslint-disable */
/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ActionType } from './ActionType';
import {
    ActionTypeFromJSON,
    ActionTypeFromJSONTyped,
    ActionTypeToJSON,
    ActionTypeToJSONTyped,
} from './ActionType';
import type { OptimizationGoalMetadata } from './OptimizationGoalMetadata';
import {
    OptimizationGoalMetadataFromJSON,
    OptimizationGoalMetadataFromJSONTyped,
    OptimizationGoalMetadataToJSON,
    OptimizationGoalMetadataToJSONTyped,
} from './OptimizationGoalMetadata';
import type { EntityStatus } from './EntityStatus';
import {
    EntityStatusFromJSON,
    EntityStatusFromJSONTyped,
    EntityStatusToJSON,
    EntityStatusToJSONTyped,
} from './EntityStatus';
import type { TrackingUrls } from './TrackingUrls';
import {
    TrackingUrlsFromJSON,
    TrackingUrlsFromJSONTyped,
    TrackingUrlsToJSON,
    TrackingUrlsToJSONTyped,
} from './TrackingUrls';
import type { TargetingSpec } from './TargetingSpec';
import {
    TargetingSpecFromJSON,
    TargetingSpecFromJSONTyped,
    TargetingSpecToJSON,
    TargetingSpecToJSONTyped,
} from './TargetingSpec';
import type { PlacementGroupType } from './PlacementGroupType';
import {
    PlacementGroupTypeFromJSON,
    PlacementGroupTypeFromJSONTyped,
    PlacementGroupTypeToJSON,
    PlacementGroupTypeToJSONTyped,
} from './PlacementGroupType';
import type { BudgetType } from './BudgetType';
import {
    BudgetTypeFromJSON,
    BudgetTypeFromJSONTyped,
    BudgetTypeToJSON,
    BudgetTypeToJSONTyped,
} from './BudgetType';
import type { PacingDeliveryType } from './PacingDeliveryType';
import {
    PacingDeliveryTypeFromJSON,
    PacingDeliveryTypeFromJSONTyped,
    PacingDeliveryTypeToJSON,
    PacingDeliveryTypeToJSONTyped,
} from './PacingDeliveryType';

/**
 * 
 * @export
 * @interface AdGroupUpdateRequest
 */
export interface AdGroupUpdateRequest {
    /**
     * Ad group name.
     * @type {string}
     * @memberof AdGroupUpdateRequest
     */
    name?: string;
    /**
     * Ad group/entity status.
     * @type {EntityStatus}
     * @memberof AdGroupUpdateRequest
     */
    status?: EntityStatus;
    /**
     * Budget in micro currency. This field is **REQUIRED** for non-CBO (campaign budget optimization) campaigns.  A CBO campaign automatically generates ad group budgets from its campaign budget to maximize campaign outcome. A CBO campaign is limited to 70 or less ad groups.
     * @type {number}
     * @memberof AdGroupUpdateRequest
     */
    budgetInMicroCurrency?: number | null;
    /**
     * Bid price in micro currency. This field is **REQUIRED** for the following campaign objective_type/billable_event combinations: AWARENESS/IMPRESSION, CONSIDERATION/CLICKTHROUGH, CATALOG_SALES/CLICKTHROUGH, VIDEO_VIEW/VIDEO_V_50_MRC.
     * @type {number}
     * @memberof AdGroupUpdateRequest
     */
    bidInMicroCurrency?: number | null;
    /**
     * Optimization goals for objective-based performance campaigns. **REQUIRED** when campaign's `objective_type` is set to `"WEB_CONVERSION"`.
     * @type {OptimizationGoalMetadata}
     * @memberof AdGroupUpdateRequest
     */
    optimizationGoalMetadata?: OptimizationGoalMetadata | null;
    /**
     * 
     * @type {BudgetType}
     * @memberof AdGroupUpdateRequest
     */
    budgetType?: BudgetType;
    /**
     * Ad group start time. Unix timestamp in seconds. Defaults to current time.
     * @type {number}
     * @memberof AdGroupUpdateRequest
     */
    startTime?: number | null;
    /**
     * Ad group end time. Unix timestamp in seconds.
     * @type {number}
     * @memberof AdGroupUpdateRequest
     */
    endTime?: number | null;
    /**
     * 
     * @type {TargetingSpec}
     * @memberof AdGroupUpdateRequest
     */
    targetingSpec?: TargetingSpec;
    /**
     * Set a limit to the number of times a promoted pin from this campaign can be impressed by a pinner within the past rolling 30 days. Only available for CPM (cost per mille (1000 impressions))  ad groups. A CPM ad group has an IMPRESSION <a href="/docs/redoc/#section/Billable-event">billable_event</a> value. This field **REQUIRES** the `end_time` field.
     * @type {number}
     * @memberof AdGroupUpdateRequest
     */
    lifetimeFrequencyCap?: number;
    /**
     * Third-party tracking URLs.<br> JSON object with the format: {"<a href="/docs/redoc/#section/Tracking-URL-event">Tracking event enum</a>":[URL string array],...}<br> For example: {"impression": ["URL1", "URL2"], "click": ["URL1", "URL2", "URL3"]}.<br>Up to three tracking URLs are supported for each event type. Tracking URLs set at the ad group or ad level can override those set at the campaign level. May be null. Pass in an empty object - {} - to remove tracking URLs.<br><br> For more information, see <a href="https://help.pinterest.com/en/business/article/third-party-and-dynamic-tracking" target="_blank">Third-party and dynamic tracking</a>.
     * @type {TrackingUrls}
     * @memberof AdGroupUpdateRequest
     */
    trackingUrls?: TrackingUrls | null;
    /**
     * Enable auto-targeting for ad group. Also known as <a href="https://help.pinterest.com/en/business/article/expanded-targeting" target="_blank">"expanded targeting"</a>.
     * @type {boolean}
     * @memberof AdGroupUpdateRequest
     */
    autoTargetingEnabled?: boolean | null;
    /**
     * <a href="/docs/redoc/#section/Placement-group">Placement group</a>.
     * @type {PlacementGroupType}
     * @memberof AdGroupUpdateRequest
     */
    placementGroup?: PlacementGroupType;
    /**
     * 
     * @type {PacingDeliveryType}
     * @memberof AdGroupUpdateRequest
     */
    pacingDeliveryType?: PacingDeliveryType;
    /**
     * Campaign ID of the ad group.
     * @type {string}
     * @memberof AdGroupUpdateRequest
     */
    campaignId?: string;
    /**
     * 
     * @type {ActionType}
     * @memberof AdGroupUpdateRequest
     */
    billableEvent?: ActionType;
    /**
     * Bid strategy type. For Campaigns with Video Completion objectives, the only supported bid strategy type is AUTOMATIC_BID.
     * @type {string}
     * @memberof AdGroupUpdateRequest
     */
    bidStrategyType?: AdGroupUpdateRequestBidStrategyTypeEnum | null;
    /**
     * Targeting template IDs applied to the ad group. We currently only support 1 targeting template per ad group. To use targeting templates, do not set any other targeting fields: targeting_spec, tracking_urls, auto_targeting_enabled, placement_group. To clear all targeting template IDs, set this field to ['0'].
     * @type {Array<string>}
     * @memberof AdGroupUpdateRequest
     */
    targetingTemplateIds?: Array<string> | null;
    /**
     * Ad group ID.
     * @type {string}
     * @memberof AdGroupUpdateRequest
     */
    id: string;
}


/**
 * @export
 */
export const AdGroupUpdateRequestBidStrategyTypeEnum = {
    AutomaticBid: 'AUTOMATIC_BID',
    MaxBid: 'MAX_BID',
    TargetAvg: 'TARGET_AVG'
} as const;
export type AdGroupUpdateRequestBidStrategyTypeEnum = typeof AdGroupUpdateRequestBidStrategyTypeEnum[keyof typeof AdGroupUpdateRequestBidStrategyTypeEnum];


/**
 * Check if a given object implements the AdGroupUpdateRequest interface.
 */
export function instanceOfAdGroupUpdateRequest(value: object): value is AdGroupUpdateRequest {
    if (!('id' in value) || value['id'] === undefined) return false;
    return true;
}

export function AdGroupUpdateRequestFromJSON(json: any): AdGroupUpdateRequest {
    return AdGroupUpdateRequestFromJSONTyped(json, false);
}

export function AdGroupUpdateRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): AdGroupUpdateRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'name': json['name'] == null ? undefined : json['name'],
        'status': json['status'] == null ? undefined : EntityStatusFromJSON(json['status']),
        'budgetInMicroCurrency': json['budget_in_micro_currency'] == null ? undefined : json['budget_in_micro_currency'],
        'bidInMicroCurrency': json['bid_in_micro_currency'] == null ? undefined : json['bid_in_micro_currency'],
        'optimizationGoalMetadata': json['optimization_goal_metadata'] == null ? undefined : OptimizationGoalMetadataFromJSON(json['optimization_goal_metadata']),
        'budgetType': json['budget_type'] == null ? undefined : BudgetTypeFromJSON(json['budget_type']),
        'startTime': json['start_time'] == null ? undefined : json['start_time'],
        'endTime': json['end_time'] == null ? undefined : json['end_time'],
        'targetingSpec': json['targeting_spec'] == null ? undefined : TargetingSpecFromJSON(json['targeting_spec']),
        'lifetimeFrequencyCap': json['lifetime_frequency_cap'] == null ? undefined : json['lifetime_frequency_cap'],
        'trackingUrls': json['tracking_urls'] == null ? undefined : TrackingUrlsFromJSON(json['tracking_urls']),
        'autoTargetingEnabled': json['auto_targeting_enabled'] == null ? undefined : json['auto_targeting_enabled'],
        'placementGroup': json['placement_group'] == null ? undefined : PlacementGroupTypeFromJSON(json['placement_group']),
        'pacingDeliveryType': json['pacing_delivery_type'] == null ? undefined : PacingDeliveryTypeFromJSON(json['pacing_delivery_type']),
        'campaignId': json['campaign_id'] == null ? undefined : json['campaign_id'],
        'billableEvent': json['billable_event'] == null ? undefined : ActionTypeFromJSON(json['billable_event']),
        'bidStrategyType': json['bid_strategy_type'] == null ? undefined : json['bid_strategy_type'],
        'targetingTemplateIds': json['targeting_template_ids'] == null ? undefined : json['targeting_template_ids'],
        'id': json['id'],
    };
}

  export function AdGroupUpdateRequestToJSON(json: any): AdGroupUpdateRequest {
      return AdGroupUpdateRequestToJSONTyped(json, false);
  }

  export function AdGroupUpdateRequestToJSONTyped(value?: AdGroupUpdateRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'name': value['name'],
        'status': EntityStatusToJSON(value['status']),
        'budget_in_micro_currency': value['budgetInMicroCurrency'],
        'bid_in_micro_currency': value['bidInMicroCurrency'],
        'optimization_goal_metadata': OptimizationGoalMetadataToJSON(value['optimizationGoalMetadata']),
        'budget_type': BudgetTypeToJSON(value['budgetType']),
        'start_time': value['startTime'],
        'end_time': value['endTime'],
        'targeting_spec': TargetingSpecToJSON(value['targetingSpec']),
        'lifetime_frequency_cap': value['lifetimeFrequencyCap'],
        'tracking_urls': TrackingUrlsToJSON(value['trackingUrls']),
        'auto_targeting_enabled': value['autoTargetingEnabled'],
        'placement_group': PlacementGroupTypeToJSON(value['placementGroup']),
        'pacing_delivery_type': PacingDeliveryTypeToJSON(value['pacingDeliveryType']),
        'campaign_id': value['campaignId'],
        'billable_event': ActionTypeToJSON(value['billableEvent']),
        'bid_strategy_type': value['bidStrategyType'],
        'targeting_template_ids': value['targetingTemplateIds'],
        'id': value['id'],
    };
}

