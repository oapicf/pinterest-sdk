/* tslint:disable */
/* eslint-disable */
/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CatalogsFeedProcessingSchedule } from './CatalogsFeedProcessingSchedule';
import {
    CatalogsFeedProcessingScheduleFromJSON,
    CatalogsFeedProcessingScheduleFromJSONTyped,
    CatalogsFeedProcessingScheduleToJSON,
    CatalogsFeedProcessingScheduleToJSONTyped,
} from './CatalogsFeedProcessingSchedule';
import type { ProductAvailabilityType } from './ProductAvailabilityType';
import {
    ProductAvailabilityTypeFromJSON,
    ProductAvailabilityTypeFromJSONTyped,
    ProductAvailabilityTypeToJSON,
    ProductAvailabilityTypeToJSONTyped,
} from './ProductAvailabilityType';
import type { CatalogsStatus } from './CatalogsStatus';
import {
    CatalogsStatusFromJSON,
    CatalogsStatusFromJSONTyped,
    CatalogsStatusToJSON,
    CatalogsStatusToJSONTyped,
} from './CatalogsStatus';
import type { CatalogsFeedsCreateRequestDefaultLocale } from './CatalogsFeedsCreateRequestDefaultLocale';
import {
    CatalogsFeedsCreateRequestDefaultLocaleFromJSON,
    CatalogsFeedsCreateRequestDefaultLocaleFromJSONTyped,
    CatalogsFeedsCreateRequestDefaultLocaleToJSON,
    CatalogsFeedsCreateRequestDefaultLocaleToJSONTyped,
} from './CatalogsFeedsCreateRequestDefaultLocale';
import type { CatalogsFeedCredentials } from './CatalogsFeedCredentials';
import {
    CatalogsFeedCredentialsFromJSON,
    CatalogsFeedCredentialsFromJSONTyped,
    CatalogsFeedCredentialsToJSON,
    CatalogsFeedCredentialsToJSONTyped,
} from './CatalogsFeedCredentials';
import type { CatalogsType } from './CatalogsType';
import {
    CatalogsTypeFromJSON,
    CatalogsTypeFromJSONTyped,
    CatalogsTypeToJSON,
    CatalogsTypeToJSONTyped,
} from './CatalogsType';
import type { Country } from './Country';
import {
    CountryFromJSON,
    CountryFromJSONTyped,
    CountryToJSON,
    CountryToJSONTyped,
} from './Country';
import type { CatalogsFormat } from './CatalogsFormat';
import {
    CatalogsFormatFromJSON,
    CatalogsFormatFromJSONTyped,
    CatalogsFormatToJSON,
    CatalogsFormatToJSONTyped,
} from './CatalogsFormat';
import type { NullableCurrency } from './NullableCurrency';
import {
    NullableCurrencyFromJSON,
    NullableCurrencyFromJSONTyped,
    NullableCurrencyToJSON,
    NullableCurrencyToJSONTyped,
} from './NullableCurrency';

/**
 * Request object for creating a retail feed.
 * @export
 * @interface CatalogsRetailFeedsCreateRequest
 */
export interface CatalogsRetailFeedsCreateRequest {
    /**
     * 
     * @type {NullableCurrency}
     * @memberof CatalogsRetailFeedsCreateRequest
     */
    defaultCurrency?: NullableCurrency | null;
    /**
     * A human-friendly name associated to a given feed.
     * @type {string}
     * @memberof CatalogsRetailFeedsCreateRequest
     */
    name: string;
    /**
     * 
     * @type {CatalogsFormat}
     * @memberof CatalogsRetailFeedsCreateRequest
     */
    format: CatalogsFormat;
    /**
     * 
     * @type {CatalogsFeedsCreateRequestDefaultLocale}
     * @memberof CatalogsRetailFeedsCreateRequest
     */
    defaultLocale: CatalogsFeedsCreateRequestDefaultLocale;
    /**
     * 
     * @type {CatalogsFeedCredentials}
     * @memberof CatalogsRetailFeedsCreateRequest
     */
    credentials?: CatalogsFeedCredentials | null;
    /**
     * The URL where a feed is available for download. This URL is what Pinterest will use to download a feed for processing.
     * @type {string}
     * @memberof CatalogsRetailFeedsCreateRequest
     */
    location: string;
    /**
     * 
     * @type {CatalogsFeedProcessingSchedule}
     * @memberof CatalogsRetailFeedsCreateRequest
     */
    preferredProcessingSchedule?: CatalogsFeedProcessingSchedule | null;
    /**
     * 
     * @type {CatalogsType}
     * @memberof CatalogsRetailFeedsCreateRequest
     */
    catalogType: CatalogsType;
    /**
     * 
     * @type {Country}
     * @memberof CatalogsRetailFeedsCreateRequest
     */
    defaultCountry: Country;
    /**
     * 
     * @type {ProductAvailabilityType}
     * @memberof CatalogsRetailFeedsCreateRequest
     */
    defaultAvailability?: ProductAvailabilityType | null;
    /**
     * 
     * @type {CatalogsStatus}
     * @memberof CatalogsRetailFeedsCreateRequest
     */
    status?: CatalogsStatus;
}



/**
 * Check if a given object implements the CatalogsRetailFeedsCreateRequest interface.
 */
export function instanceOfCatalogsRetailFeedsCreateRequest(value: object): value is CatalogsRetailFeedsCreateRequest {
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('format' in value) || value['format'] === undefined) return false;
    if (!('defaultLocale' in value) || value['defaultLocale'] === undefined) return false;
    if (!('location' in value) || value['location'] === undefined) return false;
    if (!('catalogType' in value) || value['catalogType'] === undefined) return false;
    if (!('defaultCountry' in value) || value['defaultCountry'] === undefined) return false;
    return true;
}

export function CatalogsRetailFeedsCreateRequestFromJSON(json: any): CatalogsRetailFeedsCreateRequest {
    return CatalogsRetailFeedsCreateRequestFromJSONTyped(json, false);
}

export function CatalogsRetailFeedsCreateRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): CatalogsRetailFeedsCreateRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'defaultCurrency': json['default_currency'] == null ? undefined : NullableCurrencyFromJSON(json['default_currency']),
        'name': json['name'],
        'format': CatalogsFormatFromJSON(json['format']),
        'defaultLocale': CatalogsFeedsCreateRequestDefaultLocaleFromJSON(json['default_locale']),
        'credentials': json['credentials'] == null ? undefined : CatalogsFeedCredentialsFromJSON(json['credentials']),
        'location': json['location'],
        'preferredProcessingSchedule': json['preferred_processing_schedule'] == null ? undefined : CatalogsFeedProcessingScheduleFromJSON(json['preferred_processing_schedule']),
        'catalogType': CatalogsTypeFromJSON(json['catalog_type']),
        'defaultCountry': CountryFromJSON(json['default_country']),
        'defaultAvailability': json['default_availability'] == null ? undefined : ProductAvailabilityTypeFromJSON(json['default_availability']),
        'status': json['status'] == null ? undefined : CatalogsStatusFromJSON(json['status']),
    };
}

  export function CatalogsRetailFeedsCreateRequestToJSON(json: any): CatalogsRetailFeedsCreateRequest {
      return CatalogsRetailFeedsCreateRequestToJSONTyped(json, false);
  }

  export function CatalogsRetailFeedsCreateRequestToJSONTyped(value?: CatalogsRetailFeedsCreateRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'default_currency': NullableCurrencyToJSON(value['defaultCurrency']),
        'name': value['name'],
        'format': CatalogsFormatToJSON(value['format']),
        'default_locale': CatalogsFeedsCreateRequestDefaultLocaleToJSON(value['defaultLocale']),
        'credentials': CatalogsFeedCredentialsToJSON(value['credentials']),
        'location': value['location'],
        'preferred_processing_schedule': CatalogsFeedProcessingScheduleToJSON(value['preferredProcessingSchedule']),
        'catalog_type': CatalogsTypeToJSON(value['catalogType']),
        'default_country': CountryToJSON(value['defaultCountry']),
        'default_availability': ProductAvailabilityTypeToJSON(value['defaultAvailability']),
        'status': CatalogsStatusToJSON(value['status']),
    };
}

