/* tslint:disable */
/* eslint-disable */
/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CatalogsItemValidationWarnings } from './CatalogsItemValidationWarnings';
import {
    CatalogsItemValidationWarningsFromJSON,
    CatalogsItemValidationWarningsFromJSONTyped,
    CatalogsItemValidationWarningsToJSON,
    CatalogsItemValidationWarningsToJSONTyped,
} from './CatalogsItemValidationWarnings';
import type { CatalogsItemValidationErrors } from './CatalogsItemValidationErrors';
import {
    CatalogsItemValidationErrorsFromJSON,
    CatalogsItemValidationErrorsFromJSONTyped,
    CatalogsItemValidationErrorsToJSON,
    CatalogsItemValidationErrorsToJSONTyped,
} from './CatalogsItemValidationErrors';

/**
 * 
 * @export
 * @interface CatalogsItemValidationIssues
 */
export interface CatalogsItemValidationIssues {
    /**
     * Item number based on order of appearance in the Catalogs Feed. For example, '0' refers to first item found in a feed that was downloaded from a 'location' specified during feed creation.
     * @type {number}
     * @memberof CatalogsItemValidationIssues
     */
    itemNumber: number;
    /**
     * The merchant-created unique ID that represents the product.
     * @type {string}
     * @memberof CatalogsItemValidationIssues
     */
    itemId: string | null;
    /**
     * 
     * @type {CatalogsItemValidationErrors}
     * @memberof CatalogsItemValidationIssues
     */
    errors: CatalogsItemValidationErrors;
    /**
     * 
     * @type {CatalogsItemValidationWarnings}
     * @memberof CatalogsItemValidationIssues
     */
    warnings: CatalogsItemValidationWarnings;
}

/**
 * Check if a given object implements the CatalogsItemValidationIssues interface.
 */
export function instanceOfCatalogsItemValidationIssues(value: object): value is CatalogsItemValidationIssues {
    if (!('itemNumber' in value) || value['itemNumber'] === undefined) return false;
    if (!('itemId' in value) || value['itemId'] === undefined) return false;
    if (!('errors' in value) || value['errors'] === undefined) return false;
    if (!('warnings' in value) || value['warnings'] === undefined) return false;
    return true;
}

export function CatalogsItemValidationIssuesFromJSON(json: any): CatalogsItemValidationIssues {
    return CatalogsItemValidationIssuesFromJSONTyped(json, false);
}

export function CatalogsItemValidationIssuesFromJSONTyped(json: any, ignoreDiscriminator: boolean): CatalogsItemValidationIssues {
    if (json == null) {
        return json;
    }
    return {
        
        'itemNumber': json['item_number'],
        'itemId': json['item_id'],
        'errors': CatalogsItemValidationErrorsFromJSON(json['errors']),
        'warnings': CatalogsItemValidationWarningsFromJSON(json['warnings']),
    };
}

  export function CatalogsItemValidationIssuesToJSON(json: any): CatalogsItemValidationIssues {
      return CatalogsItemValidationIssuesToJSONTyped(json, false);
  }

  export function CatalogsItemValidationIssuesToJSONTyped(value?: CatalogsItemValidationIssues | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'item_number': value['itemNumber'],
        'item_id': value['itemId'],
        'errors': CatalogsItemValidationErrorsToJSON(value['errors']),
        'warnings': CatalogsItemValidationWarningsToJSON(value['warnings']),
    };
}

