/* tslint:disable */
/* eslint-disable */
/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Video ID-based media source
 * @export
 * @interface PinMediaSourceVideoID
 */
export interface PinMediaSourceVideoID {
    /**
     * 
     * @type {string}
     * @memberof PinMediaSourceVideoID
     */
    sourceType: PinMediaSourceVideoIDSourceTypeEnum;
    /**
     * Cover image url.
     * @type {string}
     * @memberof PinMediaSourceVideoID
     */
    coverImageUrl?: string;
    /**
     * Content type for cover image Base64.
     * @type {string}
     * @memberof PinMediaSourceVideoID
     */
    coverImageContentType?: PinMediaSourceVideoIDCoverImageContentTypeEnum;
    /**
     * Cover image Base64.
     * @type {string}
     * @memberof PinMediaSourceVideoID
     */
    coverImageData?: string;
    /**
     * 
     * @type {string}
     * @memberof PinMediaSourceVideoID
     */
    mediaId: string;
    /**
     * Set the parameter to false to create the new simplified Pin instead of the standard pin. Currently the field is only available to a list of beta users.
     * @type {boolean}
     * @memberof PinMediaSourceVideoID
     */
    isStandard?: boolean;
}


/**
 * @export
 */
export const PinMediaSourceVideoIDSourceTypeEnum = {
    VideoId: 'video_id'
} as const;
export type PinMediaSourceVideoIDSourceTypeEnum = typeof PinMediaSourceVideoIDSourceTypeEnum[keyof typeof PinMediaSourceVideoIDSourceTypeEnum];

/**
 * @export
 */
export const PinMediaSourceVideoIDCoverImageContentTypeEnum = {
    Jpeg: 'image/jpeg',
    Png: 'image/png'
} as const;
export type PinMediaSourceVideoIDCoverImageContentTypeEnum = typeof PinMediaSourceVideoIDCoverImageContentTypeEnum[keyof typeof PinMediaSourceVideoIDCoverImageContentTypeEnum];


/**
 * Check if a given object implements the PinMediaSourceVideoID interface.
 */
export function instanceOfPinMediaSourceVideoID(value: object): value is PinMediaSourceVideoID {
    if (!('sourceType' in value) || value['sourceType'] === undefined) return false;
    if (!('mediaId' in value) || value['mediaId'] === undefined) return false;
    return true;
}

export function PinMediaSourceVideoIDFromJSON(json: any): PinMediaSourceVideoID {
    return PinMediaSourceVideoIDFromJSONTyped(json, false);
}

export function PinMediaSourceVideoIDFromJSONTyped(json: any, ignoreDiscriminator: boolean): PinMediaSourceVideoID {
    if (json == null) {
        return json;
    }
    return {
        
        'sourceType': json['source_type'],
        'coverImageUrl': json['cover_image_url'] == null ? undefined : json['cover_image_url'],
        'coverImageContentType': json['cover_image_content_type'] == null ? undefined : json['cover_image_content_type'],
        'coverImageData': json['cover_image_data'] == null ? undefined : json['cover_image_data'],
        'mediaId': json['media_id'],
        'isStandard': json['is_standard'] == null ? undefined : json['is_standard'],
    };
}

  export function PinMediaSourceVideoIDToJSON(json: any): PinMediaSourceVideoID {
      return PinMediaSourceVideoIDToJSONTyped(json, false);
  }

  export function PinMediaSourceVideoIDToJSONTyped(value?: PinMediaSourceVideoID | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'source_type': value['sourceType'],
        'cover_image_url': value['coverImageUrl'],
        'cover_image_content_type': value['coverImageContentType'],
        'cover_image_data': value['coverImageData'],
        'media_id': value['mediaId'],
        'is_standard': value['isStandard'],
    };
}

