/* tslint:disable */
/* eslint-disable */
/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { CatalogsCreativeAssetsProduct } from './CatalogsCreativeAssetsProduct';
import {
    instanceOfCatalogsCreativeAssetsProduct,
    CatalogsCreativeAssetsProductFromJSON,
    CatalogsCreativeAssetsProductFromJSONTyped,
    CatalogsCreativeAssetsProductToJSON,
} from './CatalogsCreativeAssetsProduct';
import type { CatalogsHotelProduct } from './CatalogsHotelProduct';
import {
    instanceOfCatalogsHotelProduct,
    CatalogsHotelProductFromJSON,
    CatalogsHotelProductFromJSONTyped,
    CatalogsHotelProductToJSON,
} from './CatalogsHotelProduct';
import type { CatalogsRetailProduct } from './CatalogsRetailProduct';
import {
    instanceOfCatalogsRetailProduct,
    CatalogsRetailProductFromJSON,
    CatalogsRetailProductFromJSONTyped,
    CatalogsRetailProductToJSON,
} from './CatalogsRetailProduct';

/**
 * @type CatalogsProduct
 * Catalogs product for all verticals
 * @export
 */
export type CatalogsProduct = { catalogType: 'CREATIVE_ASSETS' } & CatalogsCreativeAssetsProduct | { catalogType: 'HOTEL' } & CatalogsHotelProduct | { catalogType: 'RETAIL' } & CatalogsRetailProduct;

export function CatalogsProductFromJSON(json: any): CatalogsProduct {
    return CatalogsProductFromJSONTyped(json, false);
}

export function CatalogsProductFromJSONTyped(json: any, ignoreDiscriminator: boolean): CatalogsProduct {
    if (json == null) {
        return json;
    }
    switch (json['catalog_type']) {
        case 'CREATIVE_ASSETS':
            return Object.assign({}, CatalogsCreativeAssetsProductFromJSONTyped(json, true), { catalogType: 'CREATIVE_ASSETS' } as const);
        case 'HOTEL':
            return Object.assign({}, CatalogsHotelProductFromJSONTyped(json, true), { catalogType: 'HOTEL' } as const);
        case 'RETAIL':
            return Object.assign({}, CatalogsRetailProductFromJSONTyped(json, true), { catalogType: 'RETAIL' } as const);
        default:
            throw new Error(`No variant of CatalogsProduct exists with 'catalogType=${json['catalogType']}'`);
    }
}

export function CatalogsProductToJSON(value?: CatalogsProduct | null): any {
    if (value == null) {
        return value;
    }
    switch (value['catalogType']) {
        case 'CREATIVE_ASSETS':
            return CatalogsCreativeAssetsProductToJSON(value);
        case 'HOTEL':
            return CatalogsHotelProductToJSON(value);
        case 'RETAIL':
            return CatalogsRetailProductToJSON(value);
        default:
            throw new Error(`No variant of CatalogsProduct exists with 'catalogType=${value['catalogType']}'`);
    }

}

