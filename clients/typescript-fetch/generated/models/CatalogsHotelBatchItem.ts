/* tslint:disable */
/* eslint-disable */
/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CatalogsUpdatableHotelAttributes } from './CatalogsUpdatableHotelAttributes';
import {
    CatalogsUpdatableHotelAttributesFromJSON,
    CatalogsUpdatableHotelAttributesFromJSONTyped,
    CatalogsUpdatableHotelAttributesToJSON,
    CatalogsUpdatableHotelAttributesToJSONTyped,
} from './CatalogsUpdatableHotelAttributes';

import { CatalogsCreateHotelItem, CatalogsCreateHotelItemFromJSONTyped, CatalogsCreateHotelItemToJSON, CatalogsCreateHotelItemToJSONTyped } from './CatalogsCreateHotelItem';
import { CatalogsDeleteHotelItem, CatalogsDeleteHotelItemFromJSONTyped, CatalogsDeleteHotelItemToJSON, CatalogsDeleteHotelItemToJSONTyped } from './CatalogsDeleteHotelItem';
import { CatalogsUpdateHotelItem, CatalogsUpdateHotelItemFromJSONTyped, CatalogsUpdateHotelItemToJSON, CatalogsUpdateHotelItemToJSONTyped } from './CatalogsUpdateHotelItem';
import { CatalogsUpsertHotelItem, CatalogsUpsertHotelItemFromJSONTyped, CatalogsUpsertHotelItemToJSON, CatalogsUpsertHotelItemToJSONTyped } from './CatalogsUpsertHotelItem';
/**
 * Hotel batch item
 * @export
 * @interface CatalogsHotelBatchItem
 */
export interface CatalogsHotelBatchItem {
    /**
     * The catalog hotel id in the merchant namespace
     * @type {string}
     * @memberof CatalogsHotelBatchItem
     */
    hotelId: string;
    /**
     * 
     * @type {string}
     * @memberof CatalogsHotelBatchItem
     */
    operation: CatalogsHotelBatchItemOperationEnum;
    /**
     * 
     * @type {CatalogsUpdatableHotelAttributes}
     * @memberof CatalogsHotelBatchItem
     */
    attributes: CatalogsUpdatableHotelAttributes;
}


/**
 * @export
 */
export const CatalogsHotelBatchItemOperationEnum = {
    Delete: 'DELETE'
} as const;
export type CatalogsHotelBatchItemOperationEnum = typeof CatalogsHotelBatchItemOperationEnum[keyof typeof CatalogsHotelBatchItemOperationEnum];


/**
 * Check if a given object implements the CatalogsHotelBatchItem interface.
 */
export function instanceOfCatalogsHotelBatchItem(value: object): value is CatalogsHotelBatchItem {
    if (!('hotelId' in value) || value['hotelId'] === undefined) return false;
    if (!('operation' in value) || value['operation'] === undefined) return false;
    if (!('attributes' in value) || value['attributes'] === undefined) return false;
    return true;
}

export function CatalogsHotelBatchItemFromJSON(json: any): CatalogsHotelBatchItem {
    return CatalogsHotelBatchItemFromJSONTyped(json, false);
}

export function CatalogsHotelBatchItemFromJSONTyped(json: any, ignoreDiscriminator: boolean): CatalogsHotelBatchItem {
    if (json == null) {
        return json;
    }
    if (!ignoreDiscriminator) {
        if (json['operation'] === 'CREATE') {
            return CatalogsCreateHotelItemFromJSONTyped(json, ignoreDiscriminator);
        }
        if (json['operation'] === 'DELETE') {
            return CatalogsDeleteHotelItemFromJSONTyped(json, ignoreDiscriminator);
        }
        if (json['operation'] === 'UPDATE') {
            return CatalogsUpdateHotelItemFromJSONTyped(json, ignoreDiscriminator);
        }
        if (json['operation'] === 'UPSERT') {
            return CatalogsUpsertHotelItemFromJSONTyped(json, ignoreDiscriminator);
        }
    }
    return {
        
        'hotelId': json['hotel_id'],
        'operation': json['operation'],
        'attributes': CatalogsUpdatableHotelAttributesFromJSON(json['attributes']),
    };
}

  export function CatalogsHotelBatchItemToJSON(json: any): CatalogsHotelBatchItem {
      return CatalogsHotelBatchItemToJSONTyped(json, false);
  }

  export function CatalogsHotelBatchItemToJSONTyped(value?: CatalogsHotelBatchItem | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    if (!ignoreDiscriminator) {
        switch (value['operation']) {
            case 'CREATE':
                return CatalogsCreateHotelItemToJSONTyped(value as CatalogsCreateHotelItem, ignoreDiscriminator);
            case 'DELETE':
                return CatalogsDeleteHotelItemToJSONTyped(value as CatalogsDeleteHotelItem, ignoreDiscriminator);
            case 'UPDATE':
                return CatalogsUpdateHotelItemToJSONTyped(value as CatalogsUpdateHotelItem, ignoreDiscriminator);
            case 'UPSERT':
                return CatalogsUpsertHotelItemToJSONTyped(value as CatalogsUpsertHotelItem, ignoreDiscriminator);
            default:
                throw new Error(`No variant of CatalogsHotelBatchItem exists with 'operation=${value['operation']}'`);
        }
    }

    return {
        
        'hotel_id': value['hotelId'],
        'operation': value['operation'],
        'attributes': CatalogsUpdatableHotelAttributesToJSON(value['attributes']),
    };
}

