/* tslint:disable */
/* eslint-disable */
/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * A request to exchange a refresh token for a new access token.
 * @export
 * @interface OauthAccessTokenRequestRefresh
 */
export interface OauthAccessTokenRequestRefresh {
    /**
     * 
     * @type {string}
     * @memberof OauthAccessTokenRequestRefresh
     */
    grantType: OauthAccessTokenRequestRefreshGrantTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof OauthAccessTokenRequestRefresh
     */
    refreshToken: string;
    /**
     * 
     * @type {string}
     * @memberof OauthAccessTokenRequestRefresh
     */
    scope?: string;
    /**
     * Setting this field to <code>true</code> will add a new refresh token to your 200 response, as well as the refresh_token_expires_in and refresh_token_expires_at fields. To see the structure of this payload, set the 200 response_type to "everlasting_refresh".
     * @type {boolean}
     * @memberof OauthAccessTokenRequestRefresh
     */
    refreshOn?: boolean;
}


/**
 * @export
 */
export const OauthAccessTokenRequestRefreshGrantTypeEnum = {
    AuthorizationCode: 'authorization_code',
    RefreshToken: 'refresh_token',
    ClientCredentials: 'client_credentials'
} as const;
export type OauthAccessTokenRequestRefreshGrantTypeEnum = typeof OauthAccessTokenRequestRefreshGrantTypeEnum[keyof typeof OauthAccessTokenRequestRefreshGrantTypeEnum];


/**
 * Check if a given object implements the OauthAccessTokenRequestRefresh interface.
 */
export function instanceOfOauthAccessTokenRequestRefresh(value: object): value is OauthAccessTokenRequestRefresh {
    if (!('grantType' in value) || value['grantType'] === undefined) return false;
    if (!('refreshToken' in value) || value['refreshToken'] === undefined) return false;
    return true;
}

export function OauthAccessTokenRequestRefreshFromJSON(json: any): OauthAccessTokenRequestRefresh {
    return OauthAccessTokenRequestRefreshFromJSONTyped(json, false);
}

export function OauthAccessTokenRequestRefreshFromJSONTyped(json: any, ignoreDiscriminator: boolean): OauthAccessTokenRequestRefresh {
    if (json == null) {
        return json;
    }
    return {
        
        'grantType': json['grant_type'],
        'refreshToken': json['refresh_token'],
        'scope': json['scope'] == null ? undefined : json['scope'],
        'refreshOn': json['refresh_on'] == null ? undefined : json['refresh_on'],
    };
}

  export function OauthAccessTokenRequestRefreshToJSON(json: any): OauthAccessTokenRequestRefresh {
      return OauthAccessTokenRequestRefreshToJSONTyped(json, false);
  }

  export function OauthAccessTokenRequestRefreshToJSONTyped(value?: OauthAccessTokenRequestRefresh | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'grant_type': value['grantType'],
        'refresh_token': value['refreshToken'],
        'scope': value['scope'],
        'refresh_on': value['refreshOn'],
    };
}

