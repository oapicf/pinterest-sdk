/* tslint:disable */
/* eslint-disable */
/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import { PinMediaWithImage, PinMediaWithImageFromJSONTyped, PinMediaWithImageToJSON, PinMediaWithImageToJSONTyped } from './PinMediaWithImage';
import { PinMediaWithImages, PinMediaWithImagesFromJSONTyped, PinMediaWithImagesToJSON, PinMediaWithImagesToJSONTyped } from './PinMediaWithImages';
import { PinMediaWithImageAndVideo, PinMediaWithImageAndVideoFromJSONTyped, PinMediaWithImageAndVideoToJSON, PinMediaWithImageAndVideoToJSONTyped } from './PinMediaWithImageAndVideo';
import { PinMediaWithVideos, PinMediaWithVideosFromJSONTyped, PinMediaWithVideosToJSON, PinMediaWithVideosToJSONTyped } from './PinMediaWithVideos';
import { PinMediaWithVideo, PinMediaWithVideoFromJSONTyped, PinMediaWithVideoToJSON, PinMediaWithVideoToJSONTyped } from './PinMediaWithVideo';
/**
 * Pin media objects.
 * @export
 * @interface PinMedia
 */
export interface PinMedia {
    /**
     * 
     * @type {string}
     * @memberof PinMedia
     */
    mediaType?: string;
}

/**
 * Check if a given object implements the PinMedia interface.
 */
export function instanceOfPinMedia(value: object): value is PinMedia {
    return true;
}

export function PinMediaFromJSON(json: any): PinMedia {
    return PinMediaFromJSONTyped(json, false);
}

export function PinMediaFromJSONTyped(json: any, ignoreDiscriminator: boolean): PinMedia {
    if (json == null) {
        return json;
    }
    if (!ignoreDiscriminator) {
        if (json['media_type'] === 'image') {
            return PinMediaWithImageFromJSONTyped(json, ignoreDiscriminator);
        }
        if (json['media_type'] === 'multiple_images') {
            return PinMediaWithImagesFromJSONTyped(json, ignoreDiscriminator);
        }
        if (json['media_type'] === 'multiple_mixed') {
            return PinMediaWithImageAndVideoFromJSONTyped(json, ignoreDiscriminator);
        }
        if (json['media_type'] === 'multiple_videos') {
            return PinMediaWithVideosFromJSONTyped(json, ignoreDiscriminator);
        }
        if (json['media_type'] === 'video') {
            return PinMediaWithVideoFromJSONTyped(json, ignoreDiscriminator);
        }
    }
    return {
        
        'mediaType': json['media_type'] == null ? undefined : json['media_type'],
    };
}

  export function PinMediaToJSON(json: any): PinMedia {
      return PinMediaToJSONTyped(json, false);
  }

  export function PinMediaToJSONTyped(value?: PinMedia | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    if (!ignoreDiscriminator) {
        switch (value['mediaType']) {
            case 'image':
                return PinMediaWithImageToJSONTyped(value as PinMediaWithImage, ignoreDiscriminator);
            case 'multiple_images':
                return PinMediaWithImagesToJSONTyped(value as PinMediaWithImages, ignoreDiscriminator);
            case 'multiple_mixed':
                return PinMediaWithImageAndVideoToJSONTyped(value as PinMediaWithImageAndVideo, ignoreDiscriminator);
            case 'multiple_videos':
                return PinMediaWithVideosToJSONTyped(value as PinMediaWithVideos, ignoreDiscriminator);
            case 'video':
                return PinMediaWithVideoToJSONTyped(value as PinMediaWithVideo, ignoreDiscriminator);
            default:
                throw new Error(`No variant of PinMedia exists with 'mediaType=${value['mediaType']}'`);
        }
    }

    return {
        
        'media_type': value['mediaType'],
    };
}

