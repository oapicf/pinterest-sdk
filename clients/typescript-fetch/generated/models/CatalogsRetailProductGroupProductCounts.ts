/* tslint:disable */
/* eslint-disable */
/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Product counts for a Retail CatalogsProductGroup
 * @export
 * @interface CatalogsRetailProductGroupProductCounts
 */
export interface CatalogsRetailProductGroupProductCounts {
    /**
     * 
     * @type {string}
     * @memberof CatalogsRetailProductGroupProductCounts
     */
    catalogType: CatalogsRetailProductGroupProductCountsCatalogTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof CatalogsRetailProductGroupProductCounts
     */
    inStock: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsRetailProductGroupProductCounts
     */
    outOfStock: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsRetailProductGroupProductCounts
     */
    preorder: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsRetailProductGroupProductCounts
     */
    total: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsRetailProductGroupProductCounts
     */
    videos?: number;
}


/**
 * @export
 */
export const CatalogsRetailProductGroupProductCountsCatalogTypeEnum = {
    Retail: 'RETAIL'
} as const;
export type CatalogsRetailProductGroupProductCountsCatalogTypeEnum = typeof CatalogsRetailProductGroupProductCountsCatalogTypeEnum[keyof typeof CatalogsRetailProductGroupProductCountsCatalogTypeEnum];


/**
 * Check if a given object implements the CatalogsRetailProductGroupProductCounts interface.
 */
export function instanceOfCatalogsRetailProductGroupProductCounts(value: object): value is CatalogsRetailProductGroupProductCounts {
    if (!('catalogType' in value) || value['catalogType'] === undefined) return false;
    if (!('inStock' in value) || value['inStock'] === undefined) return false;
    if (!('outOfStock' in value) || value['outOfStock'] === undefined) return false;
    if (!('preorder' in value) || value['preorder'] === undefined) return false;
    if (!('total' in value) || value['total'] === undefined) return false;
    return true;
}

export function CatalogsRetailProductGroupProductCountsFromJSON(json: any): CatalogsRetailProductGroupProductCounts {
    return CatalogsRetailProductGroupProductCountsFromJSONTyped(json, false);
}

export function CatalogsRetailProductGroupProductCountsFromJSONTyped(json: any, ignoreDiscriminator: boolean): CatalogsRetailProductGroupProductCounts {
    if (json == null) {
        return json;
    }
    return {
        
        'catalogType': json['catalog_type'],
        'inStock': json['in_stock'],
        'outOfStock': json['out_of_stock'],
        'preorder': json['preorder'],
        'total': json['total'],
        'videos': json['videos'] == null ? undefined : json['videos'],
    };
}

  export function CatalogsRetailProductGroupProductCountsToJSON(json: any): CatalogsRetailProductGroupProductCounts {
      return CatalogsRetailProductGroupProductCountsToJSONTyped(json, false);
  }

  export function CatalogsRetailProductGroupProductCountsToJSONTyped(value?: CatalogsRetailProductGroupProductCounts | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'catalog_type': value['catalogType'],
        'in_stock': value['inStock'],
        'out_of_stock': value['outOfStock'],
        'preorder': value['preorder'],
        'total': value['total'],
        'videos': value['videos'],
    };
}

