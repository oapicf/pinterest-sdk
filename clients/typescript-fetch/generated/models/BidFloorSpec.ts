/* tslint:disable */
/* eslint-disable */
/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ActionType } from './ActionType';
import {
    ActionTypeFromJSON,
    ActionTypeFromJSONTyped,
    ActionTypeToJSON,
    ActionTypeToJSONTyped,
} from './ActionType';
import type { Currency } from './Currency';
import {
    CurrencyFromJSON,
    CurrencyFromJSONTyped,
    CurrencyToJSON,
    CurrencyToJSONTyped,
} from './Currency';
import type { OptimizationGoalMetadata } from './OptimizationGoalMetadata';
import {
    OptimizationGoalMetadataFromJSON,
    OptimizationGoalMetadataFromJSONTyped,
    OptimizationGoalMetadataToJSON,
    OptimizationGoalMetadataToJSONTyped,
} from './OptimizationGoalMetadata';
import type { Country } from './Country';
import {
    CountryFromJSON,
    CountryFromJSONTyped,
    CountryToJSON,
    CountryToJSONTyped,
} from './Country';
import type { CreativeType } from './CreativeType';
import {
    CreativeTypeFromJSON,
    CreativeTypeFromJSONTyped,
    CreativeTypeToJSON,
    CreativeTypeToJSONTyped,
} from './CreativeType';
import type { ObjectiveType } from './ObjectiveType';
import {
    ObjectiveTypeFromJSON,
    ObjectiveTypeFromJSONTyped,
    ObjectiveTypeToJSON,
    ObjectiveTypeToJSONTyped,
} from './ObjectiveType';

/**
 * 
 * @export
 * @interface BidFloorSpec
 */
export interface BidFloorSpec {
    /**
     * 
     * @type {Array<Country>}
     * @memberof BidFloorSpec
     */
    countries?: Array<Country>;
    /**
     * 
     * @type {Currency}
     * @memberof BidFloorSpec
     */
    currency: Currency;
    /**
     * 
     * @type {ObjectiveType}
     * @memberof BidFloorSpec
     */
    objectiveType?: ObjectiveType;
    /**
     * 
     * @type {ActionType}
     * @memberof BidFloorSpec
     */
    billableEvent: ActionType;
    /**
     * 
     * @type {OptimizationGoalMetadata}
     * @memberof BidFloorSpec
     */
    optimizationGoalMetadata?: OptimizationGoalMetadata;
    /**
     * 
     * @type {CreativeType}
     * @memberof BidFloorSpec
     */
    creativeType?: CreativeType;
}



/**
 * Check if a given object implements the BidFloorSpec interface.
 */
export function instanceOfBidFloorSpec(value: object): value is BidFloorSpec {
    if (!('currency' in value) || value['currency'] === undefined) return false;
    if (!('billableEvent' in value) || value['billableEvent'] === undefined) return false;
    return true;
}

export function BidFloorSpecFromJSON(json: any): BidFloorSpec {
    return BidFloorSpecFromJSONTyped(json, false);
}

export function BidFloorSpecFromJSONTyped(json: any, ignoreDiscriminator: boolean): BidFloorSpec {
    if (json == null) {
        return json;
    }
    return {
        
        'countries': json['countries'] == null ? undefined : ((json['countries'] as Array<any>).map(CountryFromJSON)),
        'currency': CurrencyFromJSON(json['currency']),
        'objectiveType': json['objective_type'] == null ? undefined : ObjectiveTypeFromJSON(json['objective_type']),
        'billableEvent': ActionTypeFromJSON(json['billable_event']),
        'optimizationGoalMetadata': json['optimization_goal_metadata'] == null ? undefined : OptimizationGoalMetadataFromJSON(json['optimization_goal_metadata']),
        'creativeType': json['creative_type'] == null ? undefined : CreativeTypeFromJSON(json['creative_type']),
    };
}

  export function BidFloorSpecToJSON(json: any): BidFloorSpec {
      return BidFloorSpecToJSONTyped(json, false);
  }

  export function BidFloorSpecToJSONTyped(value?: BidFloorSpec | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'countries': value['countries'] == null ? undefined : ((value['countries'] as Array<any>).map(CountryToJSON)),
        'currency': CurrencyToJSON(value['currency']),
        'objective_type': ObjectiveTypeToJSON(value['objectiveType']),
        'billable_event': ActionTypeToJSON(value['billableEvent']),
        'optimization_goal_metadata': OptimizationGoalMetadataToJSON(value['optimizationGoalMetadata']),
        'creative_type': CreativeTypeToJSON(value['creativeType']),
    };
}

