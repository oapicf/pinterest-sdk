/* tslint:disable */
/* eslint-disable */
/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


/**
 * <p>Catalog product group type</p>
 * <p>MERCHANT_CREATED: Product groups created by merchants.
 * <br>ALL_PRODUCTS: Consists of every product in your latest successful feed upload.
 * <br>BEST_DEALS: Consists of products with the deepest drop in price.
 * <br>PINNER_FAVORITES: Consists of products that are resonating most with people on Pinterest, based on engagement.
 * <br>TOP_SELLERS: Consists of products with the highest conversion rate, if you have the conversion tag installed.
 * <br>BACK_IN_STOCK: Consists of products that were previously out of stock and are now in stock.
 * <br>NEW_ARRIVALS: Consists of products that are new to your Catalog.
 * <br>SHOPIFY_COLLECTION: Product groups created based on Shopify Product Collections.
 * <br>I2PC: Product groups created based on predicted product category.</p>
 * @export
 */
export const CatalogsProductGroupType = {
    MerchantCreated: 'MERCHANT_CREATED',
    AllProducts: 'ALL_PRODUCTS',
    BestDeals: 'BEST_DEALS',
    PinnerFavorites: 'PINNER_FAVORITES',
    TopSellers: 'TOP_SELLERS',
    BackInStock: 'BACK_IN_STOCK',
    NewArrivals: 'NEW_ARRIVALS',
    ShopifyCollections: 'SHOPIFY_COLLECTIONS',
    I2Pc: 'I2PC'
} as const;
export type CatalogsProductGroupType = typeof CatalogsProductGroupType[keyof typeof CatalogsProductGroupType];


export function instanceOfCatalogsProductGroupType(value: any): boolean {
    for (const key in CatalogsProductGroupType) {
        if (Object.prototype.hasOwnProperty.call(CatalogsProductGroupType, key)) {
            if (CatalogsProductGroupType[key as keyof typeof CatalogsProductGroupType] === value) {
                return true;
            }
        }
    }
    return false;
}

export function CatalogsProductGroupTypeFromJSON(json: any): CatalogsProductGroupType {
    return CatalogsProductGroupTypeFromJSONTyped(json, false);
}

export function CatalogsProductGroupTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): CatalogsProductGroupType {
    return json as CatalogsProductGroupType;
}

export function CatalogsProductGroupTypeToJSON(value?: CatalogsProductGroupType | null): any {
    return value as any;
}

export function CatalogsProductGroupTypeToJSONTyped(value: any, ignoreDiscriminator: boolean): CatalogsProductGroupType {
    return value as CatalogsProductGroupType;
}

