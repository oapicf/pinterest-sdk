/* tslint:disable */
/* eslint-disable */
/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { CatalogsReportDistributionIssueFilter } from './CatalogsReportDistributionIssueFilter';
import {
    instanceOfCatalogsReportDistributionIssueFilter,
    CatalogsReportDistributionIssueFilterFromJSON,
    CatalogsReportDistributionIssueFilterFromJSONTyped,
    CatalogsReportDistributionIssueFilterToJSON,
} from './CatalogsReportDistributionIssueFilter';
import type { CatalogsReportFeedIngestionFilter } from './CatalogsReportFeedIngestionFilter';
import {
    instanceOfCatalogsReportFeedIngestionFilter,
    CatalogsReportFeedIngestionFilterFromJSON,
    CatalogsReportFeedIngestionFilterFromJSONTyped,
    CatalogsReportFeedIngestionFilterToJSON,
} from './CatalogsReportFeedIngestionFilter';

/**
 * @type CatalogsHotelReportParametersReport
 * 
 * @export
 */
export type CatalogsHotelReportParametersReport = { reportType: 'DISTRIBUTION_ISSUES' } & CatalogsReportDistributionIssueFilter | { reportType: 'FEED_INGESTION_ISSUES' } & CatalogsReportFeedIngestionFilter;

export function CatalogsHotelReportParametersReportFromJSON(json: any): CatalogsHotelReportParametersReport {
    return CatalogsHotelReportParametersReportFromJSONTyped(json, false);
}

export function CatalogsHotelReportParametersReportFromJSONTyped(json: any, ignoreDiscriminator: boolean): CatalogsHotelReportParametersReport {
    if (json == null) {
        return json;
    }
    switch (json['report_type']) {
        case 'DISTRIBUTION_ISSUES':
            return Object.assign({}, CatalogsReportDistributionIssueFilterFromJSONTyped(json, true), { reportType: 'DISTRIBUTION_ISSUES' } as const);
        case 'FEED_INGESTION_ISSUES':
            return Object.assign({}, CatalogsReportFeedIngestionFilterFromJSONTyped(json, true), { reportType: 'FEED_INGESTION_ISSUES' } as const);
        default:
            throw new Error(`No variant of CatalogsHotelReportParametersReport exists with 'reportType=${json['reportType']}'`);
    }
}

export function CatalogsHotelReportParametersReportToJSON(value?: CatalogsHotelReportParametersReport | null): any {
    if (value == null) {
        return value;
    }
    switch (value['reportType']) {
        case 'DISTRIBUTION_ISSUES':
            return CatalogsReportDistributionIssueFilterToJSON(value);
        case 'FEED_INGESTION_ISSUES':
            return CatalogsReportFeedIngestionFilterToJSON(value);
        default:
            throw new Error(`No variant of CatalogsHotelReportParametersReport exists with 'reportType=${value['reportType']}'`);
    }

}

