/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import java.io.IOException
import okhttp3.Call
import okhttp3.HttpUrl

import org.openapitools.client.models.AdAccountsAudiencesSharedAccountsList200Response
import org.openapitools.client.models.AudienceAccountType
import org.openapitools.client.models.AudiencesList200Response
import org.openapitools.client.models.BusinessSharedAudience
import org.openapitools.client.models.BusinessSharedAudienceResponse
import org.openapitools.client.models.Error
import org.openapitools.client.models.SharedAudience
import org.openapitools.client.models.SharedAudienceResponse

import com.squareup.moshi.Json

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.PartConfig
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class AudienceSharingApi(basePath: kotlin.String = defaultBasePath, client: Call.Factory = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://api.pinterest.com/v5")
        }
    }

    /**
     * List accounts with access to an audience owned by an ad account
     * List all ad accounts and/or businesses that have access to a specific audience. The audience must be owned by the requesting ad account.
     * @param adAccountId Unique identifier of an ad account.
     * @param audienceId Unique identifier of the audience to use to filter the results.
     * @param accountType Filter accounts by account type. (default to AD_ACCOUNT)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @return AdAccountsAudiencesSharedAccountsList200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun adAccountsAudiencesSharedAccountsList(adAccountId: kotlin.String, audienceId: kotlin.String, accountType: AudienceAccountType = AD_ACCOUNT, pageSize: kotlin.Int? = 25, bookmark: kotlin.String? = null) : AdAccountsAudiencesSharedAccountsList200Response {
        val localVarResponse = adAccountsAudiencesSharedAccountsListWithHttpInfo(adAccountId = adAccountId, audienceId = audienceId, accountType = accountType, pageSize = pageSize, bookmark = bookmark)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as AdAccountsAudiencesSharedAccountsList200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * List accounts with access to an audience owned by an ad account
     * List all ad accounts and/or businesses that have access to a specific audience. The audience must be owned by the requesting ad account.
     * @param adAccountId Unique identifier of an ad account.
     * @param audienceId Unique identifier of the audience to use to filter the results.
     * @param accountType Filter accounts by account type. (default to AD_ACCOUNT)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @return ApiResponse<AdAccountsAudiencesSharedAccountsList200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun adAccountsAudiencesSharedAccountsListWithHttpInfo(adAccountId: kotlin.String, audienceId: kotlin.String, accountType: AudienceAccountType, pageSize: kotlin.Int?, bookmark: kotlin.String?) : ApiResponse<AdAccountsAudiencesSharedAccountsList200Response?> {
        val localVariableConfig = adAccountsAudiencesSharedAccountsListRequestConfig(adAccountId = adAccountId, audienceId = audienceId, accountType = accountType, pageSize = pageSize, bookmark = bookmark)

        return request<Unit, AdAccountsAudiencesSharedAccountsList200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation adAccountsAudiencesSharedAccountsList
     *
     * @param adAccountId Unique identifier of an ad account.
     * @param audienceId Unique identifier of the audience to use to filter the results.
     * @param accountType Filter accounts by account type. (default to AD_ACCOUNT)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @return RequestConfig
     */
    fun adAccountsAudiencesSharedAccountsListRequestConfig(adAccountId: kotlin.String, audienceId: kotlin.String, accountType: AudienceAccountType, pageSize: kotlin.Int?, bookmark: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("audience_id", listOf(audienceId.toString()))
                put("account_type", listOf(accountType.toString()))
                if (pageSize != null) {
                    put("page_size", listOf(pageSize.toString()))
                }
                if (bookmark != null) {
                    put("bookmark", listOf(bookmark.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/ad_accounts/{ad_account_id}/audiences/shared/accounts".replace("{"+"ad_account_id"+"}", encodeURIComponent(adAccountId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * List accounts with access to an audience owned by a business
     * List all ad accounts and/or businesses that have access to a specific audience. The audience must either be owned by an ad account in the requesting business, or it must have been shared with the requesting business. If the requesting business is not the owner of the audience, only ad accounts owned by the requesting business will be returned.
     * @param businessId Unique identifier of the requesting business.
     * @param audienceId Unique identifier of the audience to use to filter the results.
     * @param accountType Filter accounts by account type. (default to AD_ACCOUNT)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @return AdAccountsAudiencesSharedAccountsList200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun businessAccountAudiencesSharedAccountsList(businessId: kotlin.String, audienceId: kotlin.String, accountType: AudienceAccountType = AD_ACCOUNT, pageSize: kotlin.Int? = 25, bookmark: kotlin.String? = null) : AdAccountsAudiencesSharedAccountsList200Response {
        val localVarResponse = businessAccountAudiencesSharedAccountsListWithHttpInfo(businessId = businessId, audienceId = audienceId, accountType = accountType, pageSize = pageSize, bookmark = bookmark)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as AdAccountsAudiencesSharedAccountsList200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * List accounts with access to an audience owned by a business
     * List all ad accounts and/or businesses that have access to a specific audience. The audience must either be owned by an ad account in the requesting business, or it must have been shared with the requesting business. If the requesting business is not the owner of the audience, only ad accounts owned by the requesting business will be returned.
     * @param businessId Unique identifier of the requesting business.
     * @param audienceId Unique identifier of the audience to use to filter the results.
     * @param accountType Filter accounts by account type. (default to AD_ACCOUNT)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @return ApiResponse<AdAccountsAudiencesSharedAccountsList200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun businessAccountAudiencesSharedAccountsListWithHttpInfo(businessId: kotlin.String, audienceId: kotlin.String, accountType: AudienceAccountType, pageSize: kotlin.Int?, bookmark: kotlin.String?) : ApiResponse<AdAccountsAudiencesSharedAccountsList200Response?> {
        val localVariableConfig = businessAccountAudiencesSharedAccountsListRequestConfig(businessId = businessId, audienceId = audienceId, accountType = accountType, pageSize = pageSize, bookmark = bookmark)

        return request<Unit, AdAccountsAudiencesSharedAccountsList200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation businessAccountAudiencesSharedAccountsList
     *
     * @param businessId Unique identifier of the requesting business.
     * @param audienceId Unique identifier of the audience to use to filter the results.
     * @param accountType Filter accounts by account type. (default to AD_ACCOUNT)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @return RequestConfig
     */
    fun businessAccountAudiencesSharedAccountsListRequestConfig(businessId: kotlin.String, audienceId: kotlin.String, accountType: AudienceAccountType, pageSize: kotlin.Int?, bookmark: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("audience_id", listOf(audienceId.toString()))
                put("account_type", listOf(accountType.toString()))
                if (pageSize != null) {
                    put("page_size", listOf(pageSize.toString()))
                }
                if (bookmark != null) {
                    put("bookmark", listOf(bookmark.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/businesses/{business_id}/audiences/shared/accounts".replace("{"+"business_id"+"}", encodeURIComponent(businessId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter order
     */
     enum class OrderSharedAudiencesForBusinessList(val value: kotlin.String) {
         @Json(name = "ASCENDING") ASCENDING("ASCENDING"),
         @Json(name = "DESCENDING") DESCENDING("DESCENDING");

        /**
         * Override [toString()] to avoid using the enum variable name as the value, and instead use
         * the actual value defined in the API spec file.
         *
         * This solves a problem when the variable name and its value are different, and ensures that
         * the client sends the correct enum values to the server always.
         */
        override fun toString(): kotlin.String = "$value"
     }

    /**
     * List received audiences for a business
     * Get a list of received audiences for the given business.
     * @param businessId Unique identifier of the requesting business.
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @param order The order in which to sort the items returned: “ASCENDING” or “DESCENDING” by ID. Note that higher-value IDs are associated with more-recently added items. (optional)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @return AudiencesList200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun sharedAudiencesForBusinessList(businessId: kotlin.String, bookmark: kotlin.String? = null, order: OrderSharedAudiencesForBusinessList? = null, pageSize: kotlin.Int? = 25) : AudiencesList200Response {
        val localVarResponse = sharedAudiencesForBusinessListWithHttpInfo(businessId = businessId, bookmark = bookmark, order = order, pageSize = pageSize)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as AudiencesList200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * List received audiences for a business
     * Get a list of received audiences for the given business.
     * @param businessId Unique identifier of the requesting business.
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @param order The order in which to sort the items returned: “ASCENDING” or “DESCENDING” by ID. Note that higher-value IDs are associated with more-recently added items. (optional)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @return ApiResponse<AudiencesList200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun sharedAudiencesForBusinessListWithHttpInfo(businessId: kotlin.String, bookmark: kotlin.String?, order: OrderSharedAudiencesForBusinessList?, pageSize: kotlin.Int?) : ApiResponse<AudiencesList200Response?> {
        val localVariableConfig = sharedAudiencesForBusinessListRequestConfig(businessId = businessId, bookmark = bookmark, order = order, pageSize = pageSize)

        return request<Unit, AudiencesList200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation sharedAudiencesForBusinessList
     *
     * @param businessId Unique identifier of the requesting business.
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @param order The order in which to sort the items returned: “ASCENDING” or “DESCENDING” by ID. Note that higher-value IDs are associated with more-recently added items. (optional)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @return RequestConfig
     */
    fun sharedAudiencesForBusinessListRequestConfig(businessId: kotlin.String, bookmark: kotlin.String?, order: OrderSharedAudiencesForBusinessList?, pageSize: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (bookmark != null) {
                    put("bookmark", listOf(bookmark.toString()))
                }
                if (order != null) {
                    put("order", listOf(order.value))
                }
                if (pageSize != null) {
                    put("page_size", listOf(pageSize.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/businesses/{business_id}/audiences".replace("{"+"business_id"+"}", encodeURIComponent(businessId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Update audience sharing between ad accounts
     * From an ad account, share a specific audience with another ad account, or revoke access to a previously shared audience. Only the audience owner account can share the audience. The recipient ad account(s) must be in the same &lt;a href&#x3D;&#39;https://help.pinterest.com/en/business/article/create-and-manage-accounts&#39;&gt;Pinterest Business Hierarchy&lt;/a&gt; as the business owner of the ad account.&lt;br&gt; This endpoint is not available to all apps.&lt;a href&#x3D;&#39;/docs/getting-started/beta-and-advanced-access/&#39;&gt;Learn more&lt;/a&gt;.
     * @param adAccountId Unique identifier of an ad account.
     * @param sharedAudience 
     * @return SharedAudienceResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun updateAdAccountToAdAccountSharedAudience(adAccountId: kotlin.String, sharedAudience: SharedAudience) : SharedAudienceResponse {
        val localVarResponse = updateAdAccountToAdAccountSharedAudienceWithHttpInfo(adAccountId = adAccountId, sharedAudience = sharedAudience)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as SharedAudienceResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Update audience sharing between ad accounts
     * From an ad account, share a specific audience with another ad account, or revoke access to a previously shared audience. Only the audience owner account can share the audience. The recipient ad account(s) must be in the same &lt;a href&#x3D;&#39;https://help.pinterest.com/en/business/article/create-and-manage-accounts&#39;&gt;Pinterest Business Hierarchy&lt;/a&gt; as the business owner of the ad account.&lt;br&gt; This endpoint is not available to all apps.&lt;a href&#x3D;&#39;/docs/getting-started/beta-and-advanced-access/&#39;&gt;Learn more&lt;/a&gt;.
     * @param adAccountId Unique identifier of an ad account.
     * @param sharedAudience 
     * @return ApiResponse<SharedAudienceResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun updateAdAccountToAdAccountSharedAudienceWithHttpInfo(adAccountId: kotlin.String, sharedAudience: SharedAudience) : ApiResponse<SharedAudienceResponse?> {
        val localVariableConfig = updateAdAccountToAdAccountSharedAudienceRequestConfig(adAccountId = adAccountId, sharedAudience = sharedAudience)

        return request<SharedAudience, SharedAudienceResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation updateAdAccountToAdAccountSharedAudience
     *
     * @param adAccountId Unique identifier of an ad account.
     * @param sharedAudience 
     * @return RequestConfig
     */
    fun updateAdAccountToAdAccountSharedAudienceRequestConfig(adAccountId: kotlin.String, sharedAudience: SharedAudience) : RequestConfig<SharedAudience> {
        val localVariableBody = sharedAudience
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PATCH,
            path = "/ad_accounts/{ad_account_id}/audiences/ad_accounts/shared".replace("{"+"ad_account_id"+"}", encodeURIComponent(adAccountId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Update audience sharing from an ad account to businesses
     * From an ad account, share a specific audience with a business account, or revoke access to a previously shared audience. Only the audience owner account can share the audience. The recipient business account must be in the same business hierarchy as the business owner of the ad account.&lt;br&gt; This endpoint is not available to all apps.&lt;a href&#x3D;&#39;/docs/getting-started/beta-and-advanced-access/&#39;&gt;Learn more&lt;/a&gt;.
     * @param adAccountId Unique identifier of an ad account.
     * @param businessSharedAudience 
     * @return BusinessSharedAudienceResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun updateAdAccountToBusinessSharedAudience(adAccountId: kotlin.String, businessSharedAudience: BusinessSharedAudience) : BusinessSharedAudienceResponse {
        val localVarResponse = updateAdAccountToBusinessSharedAudienceWithHttpInfo(adAccountId = adAccountId, businessSharedAudience = businessSharedAudience)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as BusinessSharedAudienceResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Update audience sharing from an ad account to businesses
     * From an ad account, share a specific audience with a business account, or revoke access to a previously shared audience. Only the audience owner account can share the audience. The recipient business account must be in the same business hierarchy as the business owner of the ad account.&lt;br&gt; This endpoint is not available to all apps.&lt;a href&#x3D;&#39;/docs/getting-started/beta-and-advanced-access/&#39;&gt;Learn more&lt;/a&gt;.
     * @param adAccountId Unique identifier of an ad account.
     * @param businessSharedAudience 
     * @return ApiResponse<BusinessSharedAudienceResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun updateAdAccountToBusinessSharedAudienceWithHttpInfo(adAccountId: kotlin.String, businessSharedAudience: BusinessSharedAudience) : ApiResponse<BusinessSharedAudienceResponse?> {
        val localVariableConfig = updateAdAccountToBusinessSharedAudienceRequestConfig(adAccountId = adAccountId, businessSharedAudience = businessSharedAudience)

        return request<BusinessSharedAudience, BusinessSharedAudienceResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation updateAdAccountToBusinessSharedAudience
     *
     * @param adAccountId Unique identifier of an ad account.
     * @param businessSharedAudience 
     * @return RequestConfig
     */
    fun updateAdAccountToBusinessSharedAudienceRequestConfig(adAccountId: kotlin.String, businessSharedAudience: BusinessSharedAudience) : RequestConfig<BusinessSharedAudience> {
        val localVariableBody = businessSharedAudience
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PATCH,
            path = "/ad_accounts/{ad_account_id}/audiences/businesses/shared".replace("{"+"ad_account_id"+"}", encodeURIComponent(adAccountId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Update audience sharing from a business to ad accounts
     * From a business, share a specific audience with other ad account(s), or revoke access to a previously shared audience. &lt;ul&gt; &lt;li&gt;If the business is the owner of the audience, it can share with any ad account within the same business hierarchy.&lt;/li&gt; &lt;li&gt;If the business is the recipient of the audience, it can share with any of its owned ad accounts.&lt;/li&gt; &lt;/ul&gt; This endpoint is not available to all apps.&lt;a href&#x3D;&#39;/docs/getting-started/beta-and-advanced-access/&#39;&gt;Learn more&lt;/a&gt;.
     * @param businessId Unique identifier of the requesting business.
     * @param sharedAudience 
     * @return SharedAudienceResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun updateBusinessToAdAccountSharedAudience(businessId: kotlin.String, sharedAudience: SharedAudience) : SharedAudienceResponse {
        val localVarResponse = updateBusinessToAdAccountSharedAudienceWithHttpInfo(businessId = businessId, sharedAudience = sharedAudience)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as SharedAudienceResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Update audience sharing from a business to ad accounts
     * From a business, share a specific audience with other ad account(s), or revoke access to a previously shared audience. &lt;ul&gt; &lt;li&gt;If the business is the owner of the audience, it can share with any ad account within the same business hierarchy.&lt;/li&gt; &lt;li&gt;If the business is the recipient of the audience, it can share with any of its owned ad accounts.&lt;/li&gt; &lt;/ul&gt; This endpoint is not available to all apps.&lt;a href&#x3D;&#39;/docs/getting-started/beta-and-advanced-access/&#39;&gt;Learn more&lt;/a&gt;.
     * @param businessId Unique identifier of the requesting business.
     * @param sharedAudience 
     * @return ApiResponse<SharedAudienceResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun updateBusinessToAdAccountSharedAudienceWithHttpInfo(businessId: kotlin.String, sharedAudience: SharedAudience) : ApiResponse<SharedAudienceResponse?> {
        val localVariableConfig = updateBusinessToAdAccountSharedAudienceRequestConfig(businessId = businessId, sharedAudience = sharedAudience)

        return request<SharedAudience, SharedAudienceResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation updateBusinessToAdAccountSharedAudience
     *
     * @param businessId Unique identifier of the requesting business.
     * @param sharedAudience 
     * @return RequestConfig
     */
    fun updateBusinessToAdAccountSharedAudienceRequestConfig(businessId: kotlin.String, sharedAudience: SharedAudience) : RequestConfig<SharedAudience> {
        val localVariableBody = sharedAudience
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PATCH,
            path = "/businesses/{business_id}/audiences/ad_accounts/shared".replace("{"+"business_id"+"}", encodeURIComponent(businessId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Update audience sharing between businesses
     * From a business, share a specific audience with another business account, or revoke access to a previously shared audience. Only the audience owner can share the audience with other businesses, and the recipient business must be within the same business hierarchy.&lt;br&gt; This endpoint is not available to all apps.&lt;a href&#x3D;&#39;/docs/getting-started/beta-and-advanced-access/&#39;&gt;Learn more&lt;/a&gt;.
     * @param businessId Unique identifier of the requesting business.
     * @param businessSharedAudience 
     * @return BusinessSharedAudienceResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun updateBusinessToBusinessSharedAudience(businessId: kotlin.String, businessSharedAudience: BusinessSharedAudience) : BusinessSharedAudienceResponse {
        val localVarResponse = updateBusinessToBusinessSharedAudienceWithHttpInfo(businessId = businessId, businessSharedAudience = businessSharedAudience)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as BusinessSharedAudienceResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Update audience sharing between businesses
     * From a business, share a specific audience with another business account, or revoke access to a previously shared audience. Only the audience owner can share the audience with other businesses, and the recipient business must be within the same business hierarchy.&lt;br&gt; This endpoint is not available to all apps.&lt;a href&#x3D;&#39;/docs/getting-started/beta-and-advanced-access/&#39;&gt;Learn more&lt;/a&gt;.
     * @param businessId Unique identifier of the requesting business.
     * @param businessSharedAudience 
     * @return ApiResponse<BusinessSharedAudienceResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun updateBusinessToBusinessSharedAudienceWithHttpInfo(businessId: kotlin.String, businessSharedAudience: BusinessSharedAudience) : ApiResponse<BusinessSharedAudienceResponse?> {
        val localVariableConfig = updateBusinessToBusinessSharedAudienceRequestConfig(businessId = businessId, businessSharedAudience = businessSharedAudience)

        return request<BusinessSharedAudience, BusinessSharedAudienceResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation updateBusinessToBusinessSharedAudience
     *
     * @param businessId Unique identifier of the requesting business.
     * @param businessSharedAudience 
     * @return RequestConfig
     */
    fun updateBusinessToBusinessSharedAudienceRequestConfig(businessId: kotlin.String, businessSharedAudience: BusinessSharedAudience) : RequestConfig<BusinessSharedAudience> {
        val localVariableBody = businessSharedAudience
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PATCH,
            path = "/businesses/{business_id}/audiences/businesses/shared".replace("{"+"business_id"+"}", encodeURIComponent(businessId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
