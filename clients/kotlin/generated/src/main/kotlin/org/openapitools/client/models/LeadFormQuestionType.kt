/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models


import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * Lead form question type
 *
 * Values: CUSTOM,FULL_NAME,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,ZIP_CODE,GENDER,CITY,COUNTRY,STATE_PROVINCE,ADDRESS,DATE_OF_BIRTH,AGE
 */

@JsonClass(generateAdapter = false)
enum class LeadFormQuestionType(val value: kotlin.String) {

    @Json(name = "CUSTOM")
    CUSTOM("CUSTOM"),

    @Json(name = "FULL_NAME")
    FULL_NAME("FULL_NAME"),

    @Json(name = "FIRST_NAME")
    FIRST_NAME("FIRST_NAME"),

    @Json(name = "LAST_NAME")
    LAST_NAME("LAST_NAME"),

    @Json(name = "EMAIL")
    EMAIL("EMAIL"),

    @Json(name = "PHONE_NUMBER")
    PHONE_NUMBER("PHONE_NUMBER"),

    @Json(name = "ZIP_CODE")
    ZIP_CODE("ZIP_CODE"),

    @Json(name = "GENDER")
    GENDER("GENDER"),

    @Json(name = "CITY")
    CITY("CITY"),

    @Json(name = "COUNTRY")
    COUNTRY("COUNTRY"),

    @Json(name = "STATE_PROVINCE")
    STATE_PROVINCE("STATE_PROVINCE"),

    @Json(name = "ADDRESS")
    ADDRESS("ADDRESS"),

    @Json(name = "DATE_OF_BIRTH")
    DATE_OF_BIRTH("DATE_OF_BIRTH"),

    @Json(name = "AGE")
    AGE("AGE");

    /**
     * Override [toString()] to avoid using the enum variable name as the value, and instead use
     * the actual value defined in the API spec file.
     *
     * This solves a problem when the variable name and its value are different, and ensures that
     * the client sends the correct enum values to the server always.
     */
    override fun toString(): kotlin.String = value

    companion object {
        /**
         * Converts the provided [data] to a [String] on success, null otherwise.
         */
        fun encode(data: kotlin.Any?): kotlin.String? = if (data is LeadFormQuestionType) "$data" else null

        /**
         * Returns a valid [LeadFormQuestionType] for [data], null otherwise.
         */
        fun decode(data: kotlin.Any?): LeadFormQuestionType? = data?.let {
          val normalizedData = "$it".lowercase()
          values().firstOrNull { value ->
            it == value || normalizedData == "$value".lowercase()
          }
        }
    }
}

