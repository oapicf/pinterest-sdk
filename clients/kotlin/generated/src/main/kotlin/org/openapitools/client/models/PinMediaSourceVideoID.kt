/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models


import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * Video ID-based media source
 *
 * @param sourceType 
 * @param mediaId 
 * @param coverImageUrl Cover image url.
 * @param coverImageContentType Content type for cover image Base64.
 * @param coverImageData Cover image Base64.
 * @param isStandard Set the parameter to false to create the new simplified Pin instead of the standard pin. Currently the field is only available to a list of beta users.
 */


data class PinMediaSourceVideoID (

    @Json(name = "source_type")
    val sourceType: PinMediaSourceVideoID.SourceType,

    @Json(name = "media_id")
    val mediaId: kotlin.String,

    /* Cover image url. */
    @Json(name = "cover_image_url")
    val coverImageUrl: kotlin.String? = null,

    /* Content type for cover image Base64. */
    @Json(name = "cover_image_content_type")
    val coverImageContentType: PinMediaSourceVideoID.CoverImageContentType? = null,

    /* Cover image Base64. */
    @Json(name = "cover_image_data")
    val coverImageData: kotlin.String? = null,

    /* Set the parameter to false to create the new simplified Pin instead of the standard pin. Currently the field is only available to a list of beta users. */
    @Json(name = "is_standard")
    val isStandard: kotlin.Boolean? = true

) {

    /**
     * 
     *
     * Values: video_id
     */
    @JsonClass(generateAdapter = false)
    enum class SourceType(val value: kotlin.String) {
        @Json(name = "video_id") video_id("video_id");
    }
    /**
     * Content type for cover image Base64.
     *
     * Values: jpeg,png
     */
    @JsonClass(generateAdapter = false)
    enum class CoverImageContentType(val value: kotlin.String) {
        @Json(name = "image/jpeg") jpeg("image/jpeg"),
        @Json(name = "image/png") png("image/png");
    }

}

