/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models


import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * 
 *
 * Values: ADMIN,ANALYST,FINANCE_MANAGER,AUDIENCE_MANAGER,CAMPAIGN_MANAGER,CATALOGS_MANAGER,CATALOGS_VIEWER,PROFILE_PUBLISHER,OWNER
 */

@JsonClass(generateAdapter = false)
enum class PermissionsWithOwner(val value: kotlin.String) {

    @Json(name = "ADMIN")
    ADMIN("ADMIN"),

    @Json(name = "ANALYST")
    ANALYST("ANALYST"),

    @Json(name = "FINANCE_MANAGER")
    FINANCE_MANAGER("FINANCE_MANAGER"),

    @Json(name = "AUDIENCE_MANAGER")
    AUDIENCE_MANAGER("AUDIENCE_MANAGER"),

    @Json(name = "CAMPAIGN_MANAGER")
    CAMPAIGN_MANAGER("CAMPAIGN_MANAGER"),

    @Json(name = "CATALOGS_MANAGER")
    CATALOGS_MANAGER("CATALOGS_MANAGER"),

    @Json(name = "CATALOGS_VIEWER")
    CATALOGS_VIEWER("CATALOGS_VIEWER"),

    @Json(name = "PROFILE_PUBLISHER")
    PROFILE_PUBLISHER("PROFILE_PUBLISHER"),

    @Json(name = "OWNER")
    OWNER("OWNER");

    /**
     * Override [toString()] to avoid using the enum variable name as the value, and instead use
     * the actual value defined in the API spec file.
     *
     * This solves a problem when the variable name and its value are different, and ensures that
     * the client sends the correct enum values to the server always.
     */
    override fun toString(): kotlin.String = value

    companion object {
        /**
         * Converts the provided [data] to a [String] on success, null otherwise.
         */
        fun encode(data: kotlin.Any?): kotlin.String? = if (data is PermissionsWithOwner) "$data" else null

        /**
         * Returns a valid [PermissionsWithOwner] for [data], null otherwise.
         */
        fun decode(data: kotlin.Any?): PermissionsWithOwner? = data?.let {
          val normalizedData = "$it".lowercase()
          values().firstOrNull { value ->
            it == value || normalizedData == "$value".lowercase()
          }
        }
    }
}

