/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import java.io.IOException
import okhttp3.Call
import okhttp3.HttpUrl

import org.openapitools.client.models.BusinessAssetMembersGet200Response
import org.openapitools.client.models.BusinessAssetPartnersGet200Response
import org.openapitools.client.models.BusinessAssetsGet200Response
import org.openapitools.client.models.BusinessMemberAssetsGet200Response
import org.openapitools.client.models.BusinessMembersAssetAccessDeleteRequest
import org.openapitools.client.models.BusinessPartnerAssetAccessGet200Response
import org.openapitools.client.models.CreateAssetGroupBody
import org.openapitools.client.models.CreateAssetGroupResponse
import org.openapitools.client.models.DeleteAssetGroupBody
import org.openapitools.client.models.DeleteAssetGroupResponse
import org.openapitools.client.models.DeleteMemberAccessResultsResponseArray
import org.openapitools.client.models.DeletePartnerAssetAccessBody
import org.openapitools.client.models.DeletePartnerAssetsResultsResponseArray
import org.openapitools.client.models.Error
import org.openapitools.client.models.PartnerType
import org.openapitools.client.models.PermissionsWithOwner
import org.openapitools.client.models.UpdateAssetGroupBody
import org.openapitools.client.models.UpdateAssetGroupResponse
import org.openapitools.client.models.UpdateMemberAssetAccessBody
import org.openapitools.client.models.UpdateMemberAssetsResultsResponseArray
import org.openapitools.client.models.UpdatePartnerAssetAccessBody
import org.openapitools.client.models.UpdatePartnerAssetsResultsResponseArray

import com.squareup.moshi.Json

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.PartConfig
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class BusinessAccessAssetsApi(basePath: kotlin.String = defaultBasePath, client: Call.Factory = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://api.pinterest.com/v5")
        }
    }

    /**
     * Create a new asset group.
     * Create a new asset group with the specified parameters. - An &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/asset-groups\&quot;&gt;asset group&lt;/a&gt; is a custom group of assets based on how you’d like to manage your accounts.
     * @param businessId Unique identifier of the requesting business.
     * @param createAssetGroupBody 
     * @return CreateAssetGroupResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun assetGroupCreate(businessId: kotlin.String, createAssetGroupBody: CreateAssetGroupBody) : CreateAssetGroupResponse {
        val localVarResponse = assetGroupCreateWithHttpInfo(businessId = businessId, createAssetGroupBody = createAssetGroupBody)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CreateAssetGroupResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Create a new asset group.
     * Create a new asset group with the specified parameters. - An &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/asset-groups\&quot;&gt;asset group&lt;/a&gt; is a custom group of assets based on how you’d like to manage your accounts.
     * @param businessId Unique identifier of the requesting business.
     * @param createAssetGroupBody 
     * @return ApiResponse<CreateAssetGroupResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun assetGroupCreateWithHttpInfo(businessId: kotlin.String, createAssetGroupBody: CreateAssetGroupBody) : ApiResponse<CreateAssetGroupResponse?> {
        val localVariableConfig = assetGroupCreateRequestConfig(businessId = businessId, createAssetGroupBody = createAssetGroupBody)

        return request<CreateAssetGroupBody, CreateAssetGroupResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation assetGroupCreate
     *
     * @param businessId Unique identifier of the requesting business.
     * @param createAssetGroupBody 
     * @return RequestConfig
     */
    fun assetGroupCreateRequestConfig(businessId: kotlin.String, createAssetGroupBody: CreateAssetGroupBody) : RequestConfig<CreateAssetGroupBody> {
        val localVariableBody = createAssetGroupBody
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/businesses/{business_id}/asset_groups".replace("{"+"business_id"+"}", encodeURIComponent(businessId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Delete asset groups.
     * Delete a batch of asset groups.
     * @param businessId Unique identifier of the requesting business.
     * @param deleteAssetGroupBody 
     * @return DeleteAssetGroupResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun assetGroupDelete(businessId: kotlin.String, deleteAssetGroupBody: DeleteAssetGroupBody) : DeleteAssetGroupResponse {
        val localVarResponse = assetGroupDeleteWithHttpInfo(businessId = businessId, deleteAssetGroupBody = deleteAssetGroupBody)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as DeleteAssetGroupResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Delete asset groups.
     * Delete a batch of asset groups.
     * @param businessId Unique identifier of the requesting business.
     * @param deleteAssetGroupBody 
     * @return ApiResponse<DeleteAssetGroupResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun assetGroupDeleteWithHttpInfo(businessId: kotlin.String, deleteAssetGroupBody: DeleteAssetGroupBody) : ApiResponse<DeleteAssetGroupResponse?> {
        val localVariableConfig = assetGroupDeleteRequestConfig(businessId = businessId, deleteAssetGroupBody = deleteAssetGroupBody)

        return request<DeleteAssetGroupBody, DeleteAssetGroupResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation assetGroupDelete
     *
     * @param businessId Unique identifier of the requesting business.
     * @param deleteAssetGroupBody 
     * @return RequestConfig
     */
    fun assetGroupDeleteRequestConfig(businessId: kotlin.String, deleteAssetGroupBody: DeleteAssetGroupBody) : RequestConfig<DeleteAssetGroupBody> {
        val localVariableBody = deleteAssetGroupBody
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/businesses/{business_id}/asset_groups".replace("{"+"business_id"+"}", encodeURIComponent(businessId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Update asset groups.
     * Update a batch of asset groups with the specified parameters.
     * @param businessId Unique identifier of the requesting business.
     * @param updateAssetGroupBody 
     * @return UpdateAssetGroupResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun assetGroupUpdate(businessId: kotlin.String, updateAssetGroupBody: UpdateAssetGroupBody) : UpdateAssetGroupResponse {
        val localVarResponse = assetGroupUpdateWithHttpInfo(businessId = businessId, updateAssetGroupBody = updateAssetGroupBody)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as UpdateAssetGroupResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Update asset groups.
     * Update a batch of asset groups with the specified parameters.
     * @param businessId Unique identifier of the requesting business.
     * @param updateAssetGroupBody 
     * @return ApiResponse<UpdateAssetGroupResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun assetGroupUpdateWithHttpInfo(businessId: kotlin.String, updateAssetGroupBody: UpdateAssetGroupBody) : ApiResponse<UpdateAssetGroupResponse?> {
        val localVariableConfig = assetGroupUpdateRequestConfig(businessId = businessId, updateAssetGroupBody = updateAssetGroupBody)

        return request<UpdateAssetGroupBody, UpdateAssetGroupResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation assetGroupUpdate
     *
     * @param businessId Unique identifier of the requesting business.
     * @param updateAssetGroupBody 
     * @return RequestConfig
     */
    fun assetGroupUpdateRequestConfig(businessId: kotlin.String, updateAssetGroupBody: UpdateAssetGroupBody) : RequestConfig<UpdateAssetGroupBody> {
        val localVariableBody = updateAssetGroupBody
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PATCH,
            path = "/businesses/{business_id}/asset_groups".replace("{"+"business_id"+"}", encodeURIComponent(businessId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get members with access to asset
     * Get all the members the requesting business has granted access to on the given asset.
     * @param businessId Unique identifier of the requesting business.
     * @param assetId Unique identifier of a business asset.
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @param startIndex An index to start fetching the results from. Only the results starting from this index will be returned. (optional, default to 0)
     * @return BusinessAssetMembersGet200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun businessAssetMembersGet(businessId: kotlin.String, assetId: kotlin.String, bookmark: kotlin.String? = null, pageSize: kotlin.Int? = 25, startIndex: kotlin.Int? = 0) : BusinessAssetMembersGet200Response {
        val localVarResponse = businessAssetMembersGetWithHttpInfo(businessId = businessId, assetId = assetId, bookmark = bookmark, pageSize = pageSize, startIndex = startIndex)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as BusinessAssetMembersGet200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get members with access to asset
     * Get all the members the requesting business has granted access to on the given asset.
     * @param businessId Unique identifier of the requesting business.
     * @param assetId Unique identifier of a business asset.
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @param startIndex An index to start fetching the results from. Only the results starting from this index will be returned. (optional, default to 0)
     * @return ApiResponse<BusinessAssetMembersGet200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun businessAssetMembersGetWithHttpInfo(businessId: kotlin.String, assetId: kotlin.String, bookmark: kotlin.String?, pageSize: kotlin.Int?, startIndex: kotlin.Int?) : ApiResponse<BusinessAssetMembersGet200Response?> {
        val localVariableConfig = businessAssetMembersGetRequestConfig(businessId = businessId, assetId = assetId, bookmark = bookmark, pageSize = pageSize, startIndex = startIndex)

        return request<Unit, BusinessAssetMembersGet200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation businessAssetMembersGet
     *
     * @param businessId Unique identifier of the requesting business.
     * @param assetId Unique identifier of a business asset.
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @param startIndex An index to start fetching the results from. Only the results starting from this index will be returned. (optional, default to 0)
     * @return RequestConfig
     */
    fun businessAssetMembersGetRequestConfig(businessId: kotlin.String, assetId: kotlin.String, bookmark: kotlin.String?, pageSize: kotlin.Int?, startIndex: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (bookmark != null) {
                    put("bookmark", listOf(bookmark.toString()))
                }
                if (pageSize != null) {
                    put("page_size", listOf(pageSize.toString()))
                }
                if (startIndex != null) {
                    put("start_index", listOf(startIndex.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/businesses/{business_id}/assets/{asset_id}/members".replace("{"+"business_id"+"}", encodeURIComponent(businessId.toString())).replace("{"+"asset_id"+"}", encodeURIComponent(assetId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get partners with access to asset
     * Get all the partners the requesting business has granted access to on the given asset. Note: If the asset has been shared with you, an empty array will be returned. This is because an asset shared with you cannot be shared with a different partner.
     * @param businessId Unique identifier of the requesting business.
     * @param assetId Unique identifier of a business asset.
     * @param startIndex An index to start fetching the results from. Only the results starting from this index will be returned. (optional, default to 0)
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @return BusinessAssetPartnersGet200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun businessAssetPartnersGet(businessId: kotlin.String, assetId: kotlin.String, startIndex: kotlin.Int? = 0, bookmark: kotlin.String? = null, pageSize: kotlin.Int? = 25) : BusinessAssetPartnersGet200Response {
        val localVarResponse = businessAssetPartnersGetWithHttpInfo(businessId = businessId, assetId = assetId, startIndex = startIndex, bookmark = bookmark, pageSize = pageSize)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as BusinessAssetPartnersGet200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get partners with access to asset
     * Get all the partners the requesting business has granted access to on the given asset. Note: If the asset has been shared with you, an empty array will be returned. This is because an asset shared with you cannot be shared with a different partner.
     * @param businessId Unique identifier of the requesting business.
     * @param assetId Unique identifier of a business asset.
     * @param startIndex An index to start fetching the results from. Only the results starting from this index will be returned. (optional, default to 0)
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @return ApiResponse<BusinessAssetPartnersGet200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun businessAssetPartnersGetWithHttpInfo(businessId: kotlin.String, assetId: kotlin.String, startIndex: kotlin.Int?, bookmark: kotlin.String?, pageSize: kotlin.Int?) : ApiResponse<BusinessAssetPartnersGet200Response?> {
        val localVariableConfig = businessAssetPartnersGetRequestConfig(businessId = businessId, assetId = assetId, startIndex = startIndex, bookmark = bookmark, pageSize = pageSize)

        return request<Unit, BusinessAssetPartnersGet200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation businessAssetPartnersGet
     *
     * @param businessId Unique identifier of the requesting business.
     * @param assetId Unique identifier of a business asset.
     * @param startIndex An index to start fetching the results from. Only the results starting from this index will be returned. (optional, default to 0)
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @return RequestConfig
     */
    fun businessAssetPartnersGetRequestConfig(businessId: kotlin.String, assetId: kotlin.String, startIndex: kotlin.Int?, bookmark: kotlin.String?, pageSize: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (startIndex != null) {
                    put("start_index", listOf(startIndex.toString()))
                }
                if (bookmark != null) {
                    put("bookmark", listOf(bookmark.toString()))
                }
                if (pageSize != null) {
                    put("page_size", listOf(pageSize.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/businesses/{business_id}/assets/{asset_id}/partners".replace("{"+"business_id"+"}", encodeURIComponent(businessId.toString())).replace("{"+"asset_id"+"}", encodeURIComponent(assetId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter assetType
     */
     enum class AssetTypeBusinessAssetsGet(val value: kotlin.String) {
         @Json(name = "AD_ACCOUNT") AD_ACCOUNT("AD_ACCOUNT"),
         @Json(name = "PROFILE") PROFILE("PROFILE"),
         @Json(name = "ASSET_GROUP") ASSET_GROUP("ASSET_GROUP");

        /**
         * Override [toString()] to avoid using the enum variable name as the value, and instead use
         * the actual value defined in the API spec file.
         *
         * This solves a problem when the variable name and its value are different, and ensures that
         * the client sends the correct enum values to the server always.
         */
        override fun toString(): kotlin.String = "$value"
     }

    /**
     * List business assets
     * Get all the assets the requesting business has access to. This includes assets the business owns and assets the business has access to through partnerships.
     * @param businessId Unique identifier of the requesting business.
     * @param permissions A list of asset permissions used to filter the assets. Only assets where the requesting business has at least one of the specified permissions will be returned. (optional)
     * @param childAssetId A child asset unique identifier. Used to fetch asset groups that contain the asset id as a child. (optional)
     * @param assetGroupId An asset group unique identifier. Used to fetch assets contained within the specified asset group. (optional)
     * @param assetType A resource type to filter the assets by. Only assets of the specified type will be returned. (optional, default to AD_ACCOUNT)
     * @param startIndex An index to start fetching the results from. Only the results starting from this index will be returned. (optional, default to 0)
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @return BusinessAssetsGet200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun businessAssetsGet(businessId: kotlin.String, permissions: kotlin.collections.List<PermissionsWithOwner>? = null, childAssetId: kotlin.String? = null, assetGroupId: kotlin.String? = null, assetType: AssetTypeBusinessAssetsGet? = AssetTypeBusinessAssetsGet.AD_ACCOUNT, startIndex: kotlin.Int? = 0, bookmark: kotlin.String? = null, pageSize: kotlin.Int? = 25) : BusinessAssetsGet200Response {
        val localVarResponse = businessAssetsGetWithHttpInfo(businessId = businessId, permissions = permissions, childAssetId = childAssetId, assetGroupId = assetGroupId, assetType = assetType, startIndex = startIndex, bookmark = bookmark, pageSize = pageSize)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as BusinessAssetsGet200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * List business assets
     * Get all the assets the requesting business has access to. This includes assets the business owns and assets the business has access to through partnerships.
     * @param businessId Unique identifier of the requesting business.
     * @param permissions A list of asset permissions used to filter the assets. Only assets where the requesting business has at least one of the specified permissions will be returned. (optional)
     * @param childAssetId A child asset unique identifier. Used to fetch asset groups that contain the asset id as a child. (optional)
     * @param assetGroupId An asset group unique identifier. Used to fetch assets contained within the specified asset group. (optional)
     * @param assetType A resource type to filter the assets by. Only assets of the specified type will be returned. (optional, default to AD_ACCOUNT)
     * @param startIndex An index to start fetching the results from. Only the results starting from this index will be returned. (optional, default to 0)
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @return ApiResponse<BusinessAssetsGet200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun businessAssetsGetWithHttpInfo(businessId: kotlin.String, permissions: kotlin.collections.List<PermissionsWithOwner>?, childAssetId: kotlin.String?, assetGroupId: kotlin.String?, assetType: AssetTypeBusinessAssetsGet?, startIndex: kotlin.Int?, bookmark: kotlin.String?, pageSize: kotlin.Int?) : ApiResponse<BusinessAssetsGet200Response?> {
        val localVariableConfig = businessAssetsGetRequestConfig(businessId = businessId, permissions = permissions, childAssetId = childAssetId, assetGroupId = assetGroupId, assetType = assetType, startIndex = startIndex, bookmark = bookmark, pageSize = pageSize)

        return request<Unit, BusinessAssetsGet200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation businessAssetsGet
     *
     * @param businessId Unique identifier of the requesting business.
     * @param permissions A list of asset permissions used to filter the assets. Only assets where the requesting business has at least one of the specified permissions will be returned. (optional)
     * @param childAssetId A child asset unique identifier. Used to fetch asset groups that contain the asset id as a child. (optional)
     * @param assetGroupId An asset group unique identifier. Used to fetch assets contained within the specified asset group. (optional)
     * @param assetType A resource type to filter the assets by. Only assets of the specified type will be returned. (optional, default to AD_ACCOUNT)
     * @param startIndex An index to start fetching the results from. Only the results starting from this index will be returned. (optional, default to 0)
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @return RequestConfig
     */
    fun businessAssetsGetRequestConfig(businessId: kotlin.String, permissions: kotlin.collections.List<PermissionsWithOwner>?, childAssetId: kotlin.String?, assetGroupId: kotlin.String?, assetType: AssetTypeBusinessAssetsGet?, startIndex: kotlin.Int?, bookmark: kotlin.String?, pageSize: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (permissions != null) {
                    put("permissions", toMultiValue(permissions.toList(), "multi"))
                }
                if (childAssetId != null) {
                    put("child_asset_id", listOf(childAssetId.toString()))
                }
                if (assetGroupId != null) {
                    put("asset_group_id", listOf(assetGroupId.toString()))
                }
                if (assetType != null) {
                    put("asset_type", listOf(assetType.value))
                }
                if (startIndex != null) {
                    put("start_index", listOf(startIndex.toString()))
                }
                if (bookmark != null) {
                    put("bookmark", listOf(bookmark.toString()))
                }
                if (pageSize != null) {
                    put("page_size", listOf(pageSize.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/businesses/{business_id}/assets".replace("{"+"business_id"+"}", encodeURIComponent(businessId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter assetType
     */
     enum class AssetTypeBusinessMemberAssetsGet(val value: kotlin.String) {
         @Json(name = "AD_ACCOUNT") AD_ACCOUNT("AD_ACCOUNT"),
         @Json(name = "PROFILE") PROFILE("PROFILE"),
         @Json(name = "ASSET_GROUP") ASSET_GROUP("ASSET_GROUP");

        /**
         * Override [toString()] to avoid using the enum variable name as the value, and instead use
         * the actual value defined in the API spec file.
         *
         * This solves a problem when the variable name and its value are different, and ensures that
         * the client sends the correct enum values to the server always.
         */
        override fun toString(): kotlin.String = "$value"
     }

    /**
     * Get assets assigned to a member
     * Get assets on which you assigned asset permissions to the given member. Can be used to: - get all assets, regardless of asset type or - get assets of one asset type by using the asset_type query. The return response will include the permissions the member has to that asset and the asset type.
     * @param businessId Unique identifier of the requesting business.
     * @param memberId The member id to fetch assets for.
     * @param assetType A resource type to filter the assets by. Only assets of the specified type will be returned. (optional, default to AD_ACCOUNT)
     * @param startIndex An index to start fetching the results from. Only the results starting from this index will be returned. (optional, default to 0)
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @return BusinessMemberAssetsGet200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun businessMemberAssetsGet(businessId: kotlin.String, memberId: kotlin.String, assetType: AssetTypeBusinessMemberAssetsGet? = AssetTypeBusinessMemberAssetsGet.AD_ACCOUNT, startIndex: kotlin.Int? = 0, bookmark: kotlin.String? = null, pageSize: kotlin.Int? = 25) : BusinessMemberAssetsGet200Response {
        val localVarResponse = businessMemberAssetsGetWithHttpInfo(businessId = businessId, memberId = memberId, assetType = assetType, startIndex = startIndex, bookmark = bookmark, pageSize = pageSize)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as BusinessMemberAssetsGet200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get assets assigned to a member
     * Get assets on which you assigned asset permissions to the given member. Can be used to: - get all assets, regardless of asset type or - get assets of one asset type by using the asset_type query. The return response will include the permissions the member has to that asset and the asset type.
     * @param businessId Unique identifier of the requesting business.
     * @param memberId The member id to fetch assets for.
     * @param assetType A resource type to filter the assets by. Only assets of the specified type will be returned. (optional, default to AD_ACCOUNT)
     * @param startIndex An index to start fetching the results from. Only the results starting from this index will be returned. (optional, default to 0)
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @return ApiResponse<BusinessMemberAssetsGet200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun businessMemberAssetsGetWithHttpInfo(businessId: kotlin.String, memberId: kotlin.String, assetType: AssetTypeBusinessMemberAssetsGet?, startIndex: kotlin.Int?, bookmark: kotlin.String?, pageSize: kotlin.Int?) : ApiResponse<BusinessMemberAssetsGet200Response?> {
        val localVariableConfig = businessMemberAssetsGetRequestConfig(businessId = businessId, memberId = memberId, assetType = assetType, startIndex = startIndex, bookmark = bookmark, pageSize = pageSize)

        return request<Unit, BusinessMemberAssetsGet200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation businessMemberAssetsGet
     *
     * @param businessId Unique identifier of the requesting business.
     * @param memberId The member id to fetch assets for.
     * @param assetType A resource type to filter the assets by. Only assets of the specified type will be returned. (optional, default to AD_ACCOUNT)
     * @param startIndex An index to start fetching the results from. Only the results starting from this index will be returned. (optional, default to 0)
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @return RequestConfig
     */
    fun businessMemberAssetsGetRequestConfig(businessId: kotlin.String, memberId: kotlin.String, assetType: AssetTypeBusinessMemberAssetsGet?, startIndex: kotlin.Int?, bookmark: kotlin.String?, pageSize: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (assetType != null) {
                    put("asset_type", listOf(assetType.value))
                }
                if (startIndex != null) {
                    put("start_index", listOf(startIndex.toString()))
                }
                if (bookmark != null) {
                    put("bookmark", listOf(bookmark.toString()))
                }
                if (pageSize != null) {
                    put("page_size", listOf(pageSize.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/businesses/{business_id}/members/{member_id}/assets".replace("{"+"business_id"+"}", encodeURIComponent(businessId.toString())).replace("{"+"member_id"+"}", encodeURIComponent(memberId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Delete member access to asset
     * Terminate multiple members&#39; access to an asset.
     * @param businessId Unique identifier of the requesting business.
     * @param businessMembersAssetAccessDeleteRequest List member assset permissions to delete.
     * @return DeleteMemberAccessResultsResponseArray
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun businessMembersAssetAccessDelete(businessId: kotlin.String, businessMembersAssetAccessDeleteRequest: BusinessMembersAssetAccessDeleteRequest) : DeleteMemberAccessResultsResponseArray {
        val localVarResponse = businessMembersAssetAccessDeleteWithHttpInfo(businessId = businessId, businessMembersAssetAccessDeleteRequest = businessMembersAssetAccessDeleteRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as DeleteMemberAccessResultsResponseArray
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Delete member access to asset
     * Terminate multiple members&#39; access to an asset.
     * @param businessId Unique identifier of the requesting business.
     * @param businessMembersAssetAccessDeleteRequest List member assset permissions to delete.
     * @return ApiResponse<DeleteMemberAccessResultsResponseArray?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun businessMembersAssetAccessDeleteWithHttpInfo(businessId: kotlin.String, businessMembersAssetAccessDeleteRequest: BusinessMembersAssetAccessDeleteRequest) : ApiResponse<DeleteMemberAccessResultsResponseArray?> {
        val localVariableConfig = businessMembersAssetAccessDeleteRequestConfig(businessId = businessId, businessMembersAssetAccessDeleteRequest = businessMembersAssetAccessDeleteRequest)

        return request<BusinessMembersAssetAccessDeleteRequest, DeleteMemberAccessResultsResponseArray>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation businessMembersAssetAccessDelete
     *
     * @param businessId Unique identifier of the requesting business.
     * @param businessMembersAssetAccessDeleteRequest List member assset permissions to delete.
     * @return RequestConfig
     */
    fun businessMembersAssetAccessDeleteRequestConfig(businessId: kotlin.String, businessMembersAssetAccessDeleteRequest: BusinessMembersAssetAccessDeleteRequest) : RequestConfig<BusinessMembersAssetAccessDeleteRequest> {
        val localVariableBody = businessMembersAssetAccessDeleteRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/businesses/{business_id}/members/assets/access".replace("{"+"business_id"+"}", encodeURIComponent(businessId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Assign/Update member asset permissions
     * Grant multiple members access to assets and/or update multiple member&#39;s exisiting permissions to an asset. Note: Not all listed permissions are applicable to each asset type. For example, PROFILE_PUBLISHER would not be applicable to an asset of type AD_ACCOUNT. The permission level PROFILE_PUBLISHER is only available to an asset of the type PROFILE. 
     * @param businessId Unique identifier of the requesting business.
     * @param updateMemberAssetAccessBody List of member asset permissions to create or update.
     * @return UpdateMemberAssetsResultsResponseArray
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun businessMembersAssetAccessUpdate(businessId: kotlin.String, updateMemberAssetAccessBody: UpdateMemberAssetAccessBody) : UpdateMemberAssetsResultsResponseArray {
        val localVarResponse = businessMembersAssetAccessUpdateWithHttpInfo(businessId = businessId, updateMemberAssetAccessBody = updateMemberAssetAccessBody)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as UpdateMemberAssetsResultsResponseArray
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Assign/Update member asset permissions
     * Grant multiple members access to assets and/or update multiple member&#39;s exisiting permissions to an asset. Note: Not all listed permissions are applicable to each asset type. For example, PROFILE_PUBLISHER would not be applicable to an asset of type AD_ACCOUNT. The permission level PROFILE_PUBLISHER is only available to an asset of the type PROFILE. 
     * @param businessId Unique identifier of the requesting business.
     * @param updateMemberAssetAccessBody List of member asset permissions to create or update.
     * @return ApiResponse<UpdateMemberAssetsResultsResponseArray?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun businessMembersAssetAccessUpdateWithHttpInfo(businessId: kotlin.String, updateMemberAssetAccessBody: UpdateMemberAssetAccessBody) : ApiResponse<UpdateMemberAssetsResultsResponseArray?> {
        val localVariableConfig = businessMembersAssetAccessUpdateRequestConfig(businessId = businessId, updateMemberAssetAccessBody = updateMemberAssetAccessBody)

        return request<UpdateMemberAssetAccessBody, UpdateMemberAssetsResultsResponseArray>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation businessMembersAssetAccessUpdate
     *
     * @param businessId Unique identifier of the requesting business.
     * @param updateMemberAssetAccessBody List of member asset permissions to create or update.
     * @return RequestConfig
     */
    fun businessMembersAssetAccessUpdateRequestConfig(businessId: kotlin.String, updateMemberAssetAccessBody: UpdateMemberAssetAccessBody) : RequestConfig<UpdateMemberAssetAccessBody> {
        val localVariableBody = updateMemberAssetAccessBody
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PATCH,
            path = "/businesses/{business_id}/members/assets/access".replace("{"+"business_id"+"}", encodeURIComponent(businessId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter assetType
     */
     enum class AssetTypeBusinessPartnerAssetAccessGet(val value: kotlin.String) {
         @Json(name = "AD_ACCOUNT") AD_ACCOUNT("AD_ACCOUNT"),
         @Json(name = "PROFILE") PROFILE("PROFILE"),
         @Json(name = "ASSET_GROUP") ASSET_GROUP("ASSET_GROUP");

        /**
         * Override [toString()] to avoid using the enum variable name as the value, and instead use
         * the actual value defined in the API spec file.
         *
         * This solves a problem when the variable name and its value are different, and ensures that
         * the client sends the correct enum values to the server always.
         */
        override fun toString(): kotlin.String = "$value"
     }

    /**
     * Get assets assigned to a partner or assets assigned by a partner
     * Can be used to get the business assets your partner has granted you access to or the business assets you have granted your partner access to. If you specify: - partner_type&#x3D;INTERNAL, you will retrieve your business assets that the partner has access to. - partner_type&#x3D;EXTERNAL, you will retrieve the partner&#39;s business assets that the partner has granted you access to.
     * @param businessId Unique identifier of the requesting business.
     * @param partnerId The partner id to be bound to the Business
     * @param partnerType Specifies whether to fetch internal or external (shared) partners. If partner_type&#x3D;INTERNAL, the asset being queried is for accesses the partner has to your business assets.&lt;br&gt; If partner_type&#x3D;EXTERNAL, the asset being queried is for the accesses you have to the partner&#39;s business asset. (optional)
     * @param assetType A resource type to filter the assets by. Only assets of the specified type will be returned. (optional, default to AD_ACCOUNT)
     * @param startIndex An index to start fetching the results from. Only the results starting from this index will be returned. (optional, default to 0)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @return BusinessPartnerAssetAccessGet200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun businessPartnerAssetAccessGet(businessId: kotlin.String, partnerId: kotlin.String, partnerType: PartnerType? = null, assetType: AssetTypeBusinessPartnerAssetAccessGet? = AssetTypeBusinessPartnerAssetAccessGet.AD_ACCOUNT, startIndex: kotlin.Int? = 0, pageSize: kotlin.Int? = 25, bookmark: kotlin.String? = null) : BusinessPartnerAssetAccessGet200Response {
        val localVarResponse = businessPartnerAssetAccessGetWithHttpInfo(businessId = businessId, partnerId = partnerId, partnerType = partnerType, assetType = assetType, startIndex = startIndex, pageSize = pageSize, bookmark = bookmark)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as BusinessPartnerAssetAccessGet200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get assets assigned to a partner or assets assigned by a partner
     * Can be used to get the business assets your partner has granted you access to or the business assets you have granted your partner access to. If you specify: - partner_type&#x3D;INTERNAL, you will retrieve your business assets that the partner has access to. - partner_type&#x3D;EXTERNAL, you will retrieve the partner&#39;s business assets that the partner has granted you access to.
     * @param businessId Unique identifier of the requesting business.
     * @param partnerId The partner id to be bound to the Business
     * @param partnerType Specifies whether to fetch internal or external (shared) partners. If partner_type&#x3D;INTERNAL, the asset being queried is for accesses the partner has to your business assets.&lt;br&gt; If partner_type&#x3D;EXTERNAL, the asset being queried is for the accesses you have to the partner&#39;s business asset. (optional)
     * @param assetType A resource type to filter the assets by. Only assets of the specified type will be returned. (optional, default to AD_ACCOUNT)
     * @param startIndex An index to start fetching the results from. Only the results starting from this index will be returned. (optional, default to 0)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @return ApiResponse<BusinessPartnerAssetAccessGet200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun businessPartnerAssetAccessGetWithHttpInfo(businessId: kotlin.String, partnerId: kotlin.String, partnerType: PartnerType?, assetType: AssetTypeBusinessPartnerAssetAccessGet?, startIndex: kotlin.Int?, pageSize: kotlin.Int?, bookmark: kotlin.String?) : ApiResponse<BusinessPartnerAssetAccessGet200Response?> {
        val localVariableConfig = businessPartnerAssetAccessGetRequestConfig(businessId = businessId, partnerId = partnerId, partnerType = partnerType, assetType = assetType, startIndex = startIndex, pageSize = pageSize, bookmark = bookmark)

        return request<Unit, BusinessPartnerAssetAccessGet200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation businessPartnerAssetAccessGet
     *
     * @param businessId Unique identifier of the requesting business.
     * @param partnerId The partner id to be bound to the Business
     * @param partnerType Specifies whether to fetch internal or external (shared) partners. If partner_type&#x3D;INTERNAL, the asset being queried is for accesses the partner has to your business assets.&lt;br&gt; If partner_type&#x3D;EXTERNAL, the asset being queried is for the accesses you have to the partner&#39;s business asset. (optional)
     * @param assetType A resource type to filter the assets by. Only assets of the specified type will be returned. (optional, default to AD_ACCOUNT)
     * @param startIndex An index to start fetching the results from. Only the results starting from this index will be returned. (optional, default to 0)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @return RequestConfig
     */
    fun businessPartnerAssetAccessGetRequestConfig(businessId: kotlin.String, partnerId: kotlin.String, partnerType: PartnerType?, assetType: AssetTypeBusinessPartnerAssetAccessGet?, startIndex: kotlin.Int?, pageSize: kotlin.Int?, bookmark: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (partnerType != null) {
                    put("partner_type", listOf(partnerType.toString()))
                }
                if (assetType != null) {
                    put("asset_type", listOf(assetType.value))
                }
                if (startIndex != null) {
                    put("start_index", listOf(startIndex.toString()))
                }
                if (pageSize != null) {
                    put("page_size", listOf(pageSize.toString()))
                }
                if (bookmark != null) {
                    put("bookmark", listOf(bookmark.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/businesses/{business_id}/partners/{partner_id}/assets".replace("{"+"business_id"+"}", encodeURIComponent(businessId.toString())).replace("{"+"partner_id"+"}", encodeURIComponent(partnerId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Delete partner access to asset
     * Terminate multiple partners&#39; access to an asset. If - partner_type&#x3D;INTERNAL: You will terminate a partner&#39;s asset access to your business assets. - partner_type&#x3D;EXTERNAL: You will terminate your own access to your partner&#39;s business assets.
     * @param businessId Unique identifier of the requesting business.
     * @param deletePartnerAssetAccessBody 
     * @return DeletePartnerAssetsResultsResponseArray
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun deletePartnerAssetAccessHandlerImpl(businessId: kotlin.String, deletePartnerAssetAccessBody: DeletePartnerAssetAccessBody) : DeletePartnerAssetsResultsResponseArray {
        val localVarResponse = deletePartnerAssetAccessHandlerImplWithHttpInfo(businessId = businessId, deletePartnerAssetAccessBody = deletePartnerAssetAccessBody)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as DeletePartnerAssetsResultsResponseArray
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Delete partner access to asset
     * Terminate multiple partners&#39; access to an asset. If - partner_type&#x3D;INTERNAL: You will terminate a partner&#39;s asset access to your business assets. - partner_type&#x3D;EXTERNAL: You will terminate your own access to your partner&#39;s business assets.
     * @param businessId Unique identifier of the requesting business.
     * @param deletePartnerAssetAccessBody 
     * @return ApiResponse<DeletePartnerAssetsResultsResponseArray?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun deletePartnerAssetAccessHandlerImplWithHttpInfo(businessId: kotlin.String, deletePartnerAssetAccessBody: DeletePartnerAssetAccessBody) : ApiResponse<DeletePartnerAssetsResultsResponseArray?> {
        val localVariableConfig = deletePartnerAssetAccessHandlerImplRequestConfig(businessId = businessId, deletePartnerAssetAccessBody = deletePartnerAssetAccessBody)

        return request<DeletePartnerAssetAccessBody, DeletePartnerAssetsResultsResponseArray>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation deletePartnerAssetAccessHandlerImpl
     *
     * @param businessId Unique identifier of the requesting business.
     * @param deletePartnerAssetAccessBody 
     * @return RequestConfig
     */
    fun deletePartnerAssetAccessHandlerImplRequestConfig(businessId: kotlin.String, deletePartnerAssetAccessBody: DeletePartnerAssetAccessBody) : RequestConfig<DeletePartnerAssetAccessBody> {
        val localVariableBody = deletePartnerAssetAccessBody
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/businesses/{business_id}/partners/assets".replace("{"+"business_id"+"}", encodeURIComponent(businessId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Assign/Update partner asset permissions
     * Grant multiple partners access to assets and/or update multiple partner&#39;s exisiting permissions to an asset. If your partner already had permissions on the asset, they will be overriden with the new permissions you assign to them. To learn more about permission levels, visit https://help.pinterest.com/en/business/article/business-manager-overview  Note: Not all listed permissions are applicable to each asset type. For example, PROFILE_PUBLISHER would not be applicable to an asset of type AD_ACCOUNT. The permission level PROFILE_PUBLISHER is only available to an asset of the type PROFILE.
     * @param businessId Unique identifier of the requesting business.
     * @param updatePartnerAssetAccessBody A list of assets and permissions to assign to your partners.
     * @return UpdatePartnerAssetsResultsResponseArray
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun updatePartnerAssetAccessHandlerImpl(businessId: kotlin.String, updatePartnerAssetAccessBody: UpdatePartnerAssetAccessBody) : UpdatePartnerAssetsResultsResponseArray {
        val localVarResponse = updatePartnerAssetAccessHandlerImplWithHttpInfo(businessId = businessId, updatePartnerAssetAccessBody = updatePartnerAssetAccessBody)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as UpdatePartnerAssetsResultsResponseArray
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Assign/Update partner asset permissions
     * Grant multiple partners access to assets and/or update multiple partner&#39;s exisiting permissions to an asset. If your partner already had permissions on the asset, they will be overriden with the new permissions you assign to them. To learn more about permission levels, visit https://help.pinterest.com/en/business/article/business-manager-overview  Note: Not all listed permissions are applicable to each asset type. For example, PROFILE_PUBLISHER would not be applicable to an asset of type AD_ACCOUNT. The permission level PROFILE_PUBLISHER is only available to an asset of the type PROFILE.
     * @param businessId Unique identifier of the requesting business.
     * @param updatePartnerAssetAccessBody A list of assets and permissions to assign to your partners.
     * @return ApiResponse<UpdatePartnerAssetsResultsResponseArray?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun updatePartnerAssetAccessHandlerImplWithHttpInfo(businessId: kotlin.String, updatePartnerAssetAccessBody: UpdatePartnerAssetAccessBody) : ApiResponse<UpdatePartnerAssetsResultsResponseArray?> {
        val localVariableConfig = updatePartnerAssetAccessHandlerImplRequestConfig(businessId = businessId, updatePartnerAssetAccessBody = updatePartnerAssetAccessBody)

        return request<UpdatePartnerAssetAccessBody, UpdatePartnerAssetsResultsResponseArray>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation updatePartnerAssetAccessHandlerImpl
     *
     * @param businessId Unique identifier of the requesting business.
     * @param updatePartnerAssetAccessBody A list of assets and permissions to assign to your partners.
     * @return RequestConfig
     */
    fun updatePartnerAssetAccessHandlerImplRequestConfig(businessId: kotlin.String, updatePartnerAssetAccessBody: UpdatePartnerAssetAccessBody) : RequestConfig<UpdatePartnerAssetAccessBody> {
        val localVariableBody = updatePartnerAssetAccessBody
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PATCH,
            path = "/businesses/{business_id}/partners/assets".replace("{"+"business_id"+"}", encodeURIComponent(businessId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
