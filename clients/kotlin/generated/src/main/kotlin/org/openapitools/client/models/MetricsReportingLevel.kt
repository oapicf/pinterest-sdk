/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models


import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * Level of the reporting request
 *
 * Values: ADVERTISER,ADVERTISER_TARGETING,CAMPAIGN,CAMPAIGN_TARGETING,AD_GROUP,AD_GROUP_TARGETING,PIN_PROMOTION,PIN_PROMOTION_TARGETING,KEYWORD,PRODUCT_GROUP,PRODUCT_GROUP_TARGETING,PRODUCT_ITEM,PRODUCT_ITEM_TARGETING
 */

@JsonClass(generateAdapter = false)
enum class MetricsReportingLevel(val value: kotlin.String) {

    @Json(name = "ADVERTISER")
    ADVERTISER("ADVERTISER"),

    @Json(name = "ADVERTISER_TARGETING")
    ADVERTISER_TARGETING("ADVERTISER_TARGETING"),

    @Json(name = "CAMPAIGN")
    CAMPAIGN("CAMPAIGN"),

    @Json(name = "CAMPAIGN_TARGETING")
    CAMPAIGN_TARGETING("CAMPAIGN_TARGETING"),

    @Json(name = "AD_GROUP")
    AD_GROUP("AD_GROUP"),

    @Json(name = "AD_GROUP_TARGETING")
    AD_GROUP_TARGETING("AD_GROUP_TARGETING"),

    @Json(name = "PIN_PROMOTION")
    PIN_PROMOTION("PIN_PROMOTION"),

    @Json(name = "PIN_PROMOTION_TARGETING")
    PIN_PROMOTION_TARGETING("PIN_PROMOTION_TARGETING"),

    @Json(name = "KEYWORD")
    KEYWORD("KEYWORD"),

    @Json(name = "PRODUCT_GROUP")
    PRODUCT_GROUP("PRODUCT_GROUP"),

    @Json(name = "PRODUCT_GROUP_TARGETING")
    PRODUCT_GROUP_TARGETING("PRODUCT_GROUP_TARGETING"),

    @Json(name = "PRODUCT_ITEM")
    PRODUCT_ITEM("PRODUCT_ITEM"),

    @Json(name = "PRODUCT_ITEM_TARGETING")
    PRODUCT_ITEM_TARGETING("PRODUCT_ITEM_TARGETING");

    /**
     * Override [toString()] to avoid using the enum variable name as the value, and instead use
     * the actual value defined in the API spec file.
     *
     * This solves a problem when the variable name and its value are different, and ensures that
     * the client sends the correct enum values to the server always.
     */
    override fun toString(): kotlin.String = value

    companion object {
        /**
         * Converts the provided [data] to a [String] on success, null otherwise.
         */
        fun encode(data: kotlin.Any?): kotlin.String? = if (data is MetricsReportingLevel) "$data" else null

        /**
         * Returns a valid [MetricsReportingLevel] for [data], null otherwise.
         */
        fun decode(data: kotlin.Any?): MetricsReportingLevel? = data?.let {
          val normalizedData = "$it".lowercase()
          values().firstOrNull { value ->
            it == value || normalizedData == "$value".lowercase()
          }
        }
    }
}

