/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import java.io.IOException
import okhttp3.Call
import okhttp3.HttpUrl

import org.openapitools.client.models.AuthRespondInvitesBody
import org.openapitools.client.models.CancelInvitesBody
import org.openapitools.client.models.CreateAssetAccessRequestBody
import org.openapitools.client.models.CreateAssetAccessRequestResponse
import org.openapitools.client.models.CreateAssetInvitesRequest
import org.openapitools.client.models.CreateInvitesResultsResponseArray
import org.openapitools.client.models.CreateMembershipOrPartnershipInvitesBody
import org.openapitools.client.models.DeleteInvitesResultsResponseArray
import org.openapitools.client.models.Error
import org.openapitools.client.models.GetInvites200Response
import org.openapitools.client.models.InviteType
import org.openapitools.client.models.RespondToInvitesResponseArray
import org.openapitools.client.models.UpdateInvitesResultsResponseArray

import com.squareup.moshi.Json

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.PartConfig
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class BusinessAccessInviteApi(basePath: kotlin.String = defaultBasePath, client: Call.Factory = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://api.pinterest.com/v5")
        }
    }

    /**
     * Create a request to access an existing partner&#39;s assets.
     * Create a request to access an existing partner&#39;s assets with the specified permissions. The request will be sent to the partner for approval. The assets that can be requested are ad accounts and profiles.
     * @param businessId Unique identifier of the requesting business.
     * @param createAssetAccessRequestBody 
     * @return CreateAssetAccessRequestResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun assetAccessRequestsCreate(businessId: kotlin.String, createAssetAccessRequestBody: CreateAssetAccessRequestBody) : CreateAssetAccessRequestResponse {
        val localVarResponse = assetAccessRequestsCreateWithHttpInfo(businessId = businessId, createAssetAccessRequestBody = createAssetAccessRequestBody)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CreateAssetAccessRequestResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Create a request to access an existing partner&#39;s assets.
     * Create a request to access an existing partner&#39;s assets with the specified permissions. The request will be sent to the partner for approval. The assets that can be requested are ad accounts and profiles.
     * @param businessId Unique identifier of the requesting business.
     * @param createAssetAccessRequestBody 
     * @return ApiResponse<CreateAssetAccessRequestResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun assetAccessRequestsCreateWithHttpInfo(businessId: kotlin.String, createAssetAccessRequestBody: CreateAssetAccessRequestBody) : ApiResponse<CreateAssetAccessRequestResponse?> {
        val localVariableConfig = assetAccessRequestsCreateRequestConfig(businessId = businessId, createAssetAccessRequestBody = createAssetAccessRequestBody)

        return request<CreateAssetAccessRequestBody, CreateAssetAccessRequestResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation assetAccessRequestsCreate
     *
     * @param businessId Unique identifier of the requesting business.
     * @param createAssetAccessRequestBody 
     * @return RequestConfig
     */
    fun assetAccessRequestsCreateRequestConfig(businessId: kotlin.String, createAssetAccessRequestBody: CreateAssetAccessRequestBody) : RequestConfig<CreateAssetAccessRequestBody> {
        val localVariableBody = createAssetAccessRequestBody
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/businesses/{business_id}/requests/assets/access".replace("{"+"business_id"+"}", encodeURIComponent(businessId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Cancel invites/requests
     * Cancel membership/partnership invites and/or requests.
     * @param businessId Business id
     * @param cancelInvitesBody A list with invite ids
     * @return DeleteInvitesResultsResponseArray
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun cancelInvitesOrRequests(businessId: kotlin.String, cancelInvitesBody: CancelInvitesBody) : DeleteInvitesResultsResponseArray {
        val localVarResponse = cancelInvitesOrRequestsWithHttpInfo(businessId = businessId, cancelInvitesBody = cancelInvitesBody)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as DeleteInvitesResultsResponseArray
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Cancel invites/requests
     * Cancel membership/partnership invites and/or requests.
     * @param businessId Business id
     * @param cancelInvitesBody A list with invite ids
     * @return ApiResponse<DeleteInvitesResultsResponseArray?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun cancelInvitesOrRequestsWithHttpInfo(businessId: kotlin.String, cancelInvitesBody: CancelInvitesBody) : ApiResponse<DeleteInvitesResultsResponseArray?> {
        val localVariableConfig = cancelInvitesOrRequestsRequestConfig(businessId = businessId, cancelInvitesBody = cancelInvitesBody)

        return request<CancelInvitesBody, DeleteInvitesResultsResponseArray>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation cancelInvitesOrRequests
     *
     * @param businessId Business id
     * @param cancelInvitesBody A list with invite ids
     * @return RequestConfig
     */
    fun cancelInvitesOrRequestsRequestConfig(businessId: kotlin.String, cancelInvitesBody: CancelInvitesBody) : RequestConfig<CancelInvitesBody> {
        val localVariableBody = cancelInvitesBody
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/businesses/{business_id}/invites".replace("{"+"business_id"+"}", encodeURIComponent(businessId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Update invite/request with an asset permission
     * Assign asset permissions information to an existing invite/request. Can be used to: - Request access to a partner&#39;s asset. Note: This is only for when no existing partnership exists. If an existing   partnership exists, use \&quot;Create a request to access an existing partner&#39;s assets\&quot; to request access to your   partner&#39;s assets.     - invite_type&#x3D;\&quot;PARTNER_REQUEST\&quot; - Invite a partner to access your business assets. Note: This is only for when there is no existing partnership.   If there is an existing partnership, use \&quot;Assign/Update partner asset permissions\&quot; to assign a partner access to   new assets.     - invite_type&#x3D;\&quot;PARTNER_INVITE\&quot; - Invite a member to access your business assets. Note: This is only for when there is no existing membership.   If there is an existing membership, use \&quot;Assign/Update member asset permissions\&quot; to assign a member access to new   assets.     - invite_type&#x3D;\&quot;MEMBER_INVITE\&quot;  To learn more about permission levels, visit https://help.pinterest.com/en/business/article/business-manager-overview.
     * @param businessId Unique identifier of the requesting business.
     * @param createAssetInvitesRequest A list of invites/requests together with the asset permissions to be assigned to the invite/request. 
     * @return UpdateInvitesResultsResponseArray
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun createAssetInvites(businessId: kotlin.String, createAssetInvitesRequest: CreateAssetInvitesRequest) : UpdateInvitesResultsResponseArray {
        val localVarResponse = createAssetInvitesWithHttpInfo(businessId = businessId, createAssetInvitesRequest = createAssetInvitesRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as UpdateInvitesResultsResponseArray
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Update invite/request with an asset permission
     * Assign asset permissions information to an existing invite/request. Can be used to: - Request access to a partner&#39;s asset. Note: This is only for when no existing partnership exists. If an existing   partnership exists, use \&quot;Create a request to access an existing partner&#39;s assets\&quot; to request access to your   partner&#39;s assets.     - invite_type&#x3D;\&quot;PARTNER_REQUEST\&quot; - Invite a partner to access your business assets. Note: This is only for when there is no existing partnership.   If there is an existing partnership, use \&quot;Assign/Update partner asset permissions\&quot; to assign a partner access to   new assets.     - invite_type&#x3D;\&quot;PARTNER_INVITE\&quot; - Invite a member to access your business assets. Note: This is only for when there is no existing membership.   If there is an existing membership, use \&quot;Assign/Update member asset permissions\&quot; to assign a member access to new   assets.     - invite_type&#x3D;\&quot;MEMBER_INVITE\&quot;  To learn more about permission levels, visit https://help.pinterest.com/en/business/article/business-manager-overview.
     * @param businessId Unique identifier of the requesting business.
     * @param createAssetInvitesRequest A list of invites/requests together with the asset permissions to be assigned to the invite/request. 
     * @return ApiResponse<UpdateInvitesResultsResponseArray?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun createAssetInvitesWithHttpInfo(businessId: kotlin.String, createAssetInvitesRequest: CreateAssetInvitesRequest) : ApiResponse<UpdateInvitesResultsResponseArray?> {
        val localVariableConfig = createAssetInvitesRequestConfig(businessId = businessId, createAssetInvitesRequest = createAssetInvitesRequest)

        return request<CreateAssetInvitesRequest, UpdateInvitesResultsResponseArray>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation createAssetInvites
     *
     * @param businessId Unique identifier of the requesting business.
     * @param createAssetInvitesRequest A list of invites/requests together with the asset permissions to be assigned to the invite/request. 
     * @return RequestConfig
     */
    fun createAssetInvitesRequestConfig(businessId: kotlin.String, createAssetInvitesRequest: CreateAssetInvitesRequest) : RequestConfig<CreateAssetInvitesRequest> {
        val localVariableBody = createAssetInvitesRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/businesses/{business_id}/invites/assets/access".replace("{"+"business_id"+"}", encodeURIComponent(businessId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Create invites or requests
     * Create batch invites or requests. Can create batch invites or requests as described below. - Invite members to join the business. This would required specifying the following:     - invite_type&#x3D;\&quot;MEMBER_INVITE\&quot;     - business_role&#x3D;\&quot;EMPLOYEE\&quot; OR business_role&#x3D;\&quot;BIZ_ADMIN\&quot; (To learn more about business roles, visit     https://help.pinterest.com/en/business/article/profile-permissions-in-business-access.)     - members - Invite partners to access your business assets. This would require specifying the following:     - invite_type&#x3D;\&quot;PARTNER_INVITE\&quot;     - business_role&#x3D;\&quot;PARTNER\&quot;     - partners - Request to be a partner so you can access their assets. This would require specifying the following:     - invite_type&#x3D;\&quot;PARTNER_REQUEST\&quot;     - business_role&#x3D;\&quot;PARTNER\&quot;     - partners
     * @param businessId Business id
     * @param createMembershipOrPartnershipInvitesBody An object with the properties: invite_type, partners, members, business_role
     * @return CreateInvitesResultsResponseArray
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun createMembershipOrPartnershipInvites(businessId: kotlin.String, createMembershipOrPartnershipInvitesBody: CreateMembershipOrPartnershipInvitesBody) : CreateInvitesResultsResponseArray {
        val localVarResponse = createMembershipOrPartnershipInvitesWithHttpInfo(businessId = businessId, createMembershipOrPartnershipInvitesBody = createMembershipOrPartnershipInvitesBody)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CreateInvitesResultsResponseArray
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Create invites or requests
     * Create batch invites or requests. Can create batch invites or requests as described below. - Invite members to join the business. This would required specifying the following:     - invite_type&#x3D;\&quot;MEMBER_INVITE\&quot;     - business_role&#x3D;\&quot;EMPLOYEE\&quot; OR business_role&#x3D;\&quot;BIZ_ADMIN\&quot; (To learn more about business roles, visit     https://help.pinterest.com/en/business/article/profile-permissions-in-business-access.)     - members - Invite partners to access your business assets. This would require specifying the following:     - invite_type&#x3D;\&quot;PARTNER_INVITE\&quot;     - business_role&#x3D;\&quot;PARTNER\&quot;     - partners - Request to be a partner so you can access their assets. This would require specifying the following:     - invite_type&#x3D;\&quot;PARTNER_REQUEST\&quot;     - business_role&#x3D;\&quot;PARTNER\&quot;     - partners
     * @param businessId Business id
     * @param createMembershipOrPartnershipInvitesBody An object with the properties: invite_type, partners, members, business_role
     * @return ApiResponse<CreateInvitesResultsResponseArray?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun createMembershipOrPartnershipInvitesWithHttpInfo(businessId: kotlin.String, createMembershipOrPartnershipInvitesBody: CreateMembershipOrPartnershipInvitesBody) : ApiResponse<CreateInvitesResultsResponseArray?> {
        val localVariableConfig = createMembershipOrPartnershipInvitesRequestConfig(businessId = businessId, createMembershipOrPartnershipInvitesBody = createMembershipOrPartnershipInvitesBody)

        return request<CreateMembershipOrPartnershipInvitesBody, CreateInvitesResultsResponseArray>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation createMembershipOrPartnershipInvites
     *
     * @param businessId Business id
     * @param createMembershipOrPartnershipInvitesBody An object with the properties: invite_type, partners, members, business_role
     * @return RequestConfig
     */
    fun createMembershipOrPartnershipInvitesRequestConfig(businessId: kotlin.String, createMembershipOrPartnershipInvitesBody: CreateMembershipOrPartnershipInvitesBody) : RequestConfig<CreateMembershipOrPartnershipInvitesBody> {
        val localVariableBody = createMembershipOrPartnershipInvitesBody
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/businesses/{business_id}/invites".replace("{"+"business_id"+"}", encodeURIComponent(businessId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter inviteStatus
     */
     enum class InviteStatusGetInvites(val value: kotlin.String) {
         @Json(name = "PENDING") PENDING("PENDING"),
         @Json(name = "EXPIRED") EXPIRED("EXPIRED");

        /**
         * Override [toString()] to avoid using the enum variable name as the value, and instead use
         * the actual value defined in the API spec file.
         *
         * This solves a problem when the variable name and its value are different, and ensures that
         * the client sends the correct enum values to the server always.
         */
        override fun toString(): kotlin.String = "$value"
     }

    /**
     * Get invites/requests
     * Get the membership/partnership invites and/or requests for the authorized user.
     * @param businessId Unique identifier of the requesting business.
     * @param isMember A boolean field to indicate whether the invite is to create a partnership or a membership. (optional, default to true)
     * @param inviteStatus A list of invite statuses to filter invites by. Only invites whose status is in the provided statuses will be returned. (optional)
     * @param inviteType Invite type to filter invites by. Only invites of the specified type will be returned. (optional)
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @return GetInvites200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getInvites(businessId: kotlin.String, isMember: kotlin.Boolean? = true, inviteStatus: kotlin.collections.List<InviteStatusGetInvites>? = null, inviteType: InviteType? = null, bookmark: kotlin.String? = null, pageSize: kotlin.Int? = 25) : GetInvites200Response {
        val localVarResponse = getInvitesWithHttpInfo(businessId = businessId, isMember = isMember, inviteStatus = inviteStatus, inviteType = inviteType, bookmark = bookmark, pageSize = pageSize)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GetInvites200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get invites/requests
     * Get the membership/partnership invites and/or requests for the authorized user.
     * @param businessId Unique identifier of the requesting business.
     * @param isMember A boolean field to indicate whether the invite is to create a partnership or a membership. (optional, default to true)
     * @param inviteStatus A list of invite statuses to filter invites by. Only invites whose status is in the provided statuses will be returned. (optional)
     * @param inviteType Invite type to filter invites by. Only invites of the specified type will be returned. (optional)
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @return ApiResponse<GetInvites200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getInvitesWithHttpInfo(businessId: kotlin.String, isMember: kotlin.Boolean?, inviteStatus: kotlin.collections.List<InviteStatusGetInvites>?, inviteType: InviteType?, bookmark: kotlin.String?, pageSize: kotlin.Int?) : ApiResponse<GetInvites200Response?> {
        val localVariableConfig = getInvitesRequestConfig(businessId = businessId, isMember = isMember, inviteStatus = inviteStatus, inviteType = inviteType, bookmark = bookmark, pageSize = pageSize)

        return request<Unit, GetInvites200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getInvites
     *
     * @param businessId Unique identifier of the requesting business.
     * @param isMember A boolean field to indicate whether the invite is to create a partnership or a membership. (optional, default to true)
     * @param inviteStatus A list of invite statuses to filter invites by. Only invites whose status is in the provided statuses will be returned. (optional)
     * @param inviteType Invite type to filter invites by. Only invites of the specified type will be returned. (optional)
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @return RequestConfig
     */
    fun getInvitesRequestConfig(businessId: kotlin.String, isMember: kotlin.Boolean?, inviteStatus: kotlin.collections.List<InviteStatusGetInvites>?, inviteType: InviteType?, bookmark: kotlin.String?, pageSize: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (isMember != null) {
                    put("is_member", listOf(isMember.toString()))
                }
                if (inviteStatus != null) {
                    put("invite_status", toMultiValue(inviteStatus.toList(), "multi"))
                }
                if (inviteType != null) {
                    put("invite_type", listOf(inviteType.toString()))
                }
                if (bookmark != null) {
                    put("bookmark", listOf(bookmark.toString()))
                }
                if (pageSize != null) {
                    put("page_size", listOf(pageSize.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/businesses/{business_id}/invites".replace("{"+"business_id"+"}", encodeURIComponent(businessId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Accept or decline an invite/request
     * Accept or decline invites or requests.
     * @param authRespondInvitesBody 
     * @return RespondToInvitesResponseArray
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun respondBusinessAccessInvites(authRespondInvitesBody: AuthRespondInvitesBody) : RespondToInvitesResponseArray {
        val localVarResponse = respondBusinessAccessInvitesWithHttpInfo(authRespondInvitesBody = authRespondInvitesBody)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as RespondToInvitesResponseArray
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Accept or decline an invite/request
     * Accept or decline invites or requests.
     * @param authRespondInvitesBody 
     * @return ApiResponse<RespondToInvitesResponseArray?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun respondBusinessAccessInvitesWithHttpInfo(authRespondInvitesBody: AuthRespondInvitesBody) : ApiResponse<RespondToInvitesResponseArray?> {
        val localVariableConfig = respondBusinessAccessInvitesRequestConfig(authRespondInvitesBody = authRespondInvitesBody)

        return request<AuthRespondInvitesBody, RespondToInvitesResponseArray>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation respondBusinessAccessInvites
     *
     * @param authRespondInvitesBody 
     * @return RequestConfig
     */
    fun respondBusinessAccessInvitesRequestConfig(authRespondInvitesBody: AuthRespondInvitesBody) : RequestConfig<AuthRespondInvitesBody> {
        val localVariableBody = authRespondInvitesBody
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PATCH,
            path = "/businesses/invites",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
