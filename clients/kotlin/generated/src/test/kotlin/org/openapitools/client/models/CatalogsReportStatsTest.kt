/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import org.openapitools.client.models.CatalogsReportStats
import org.openapitools.client.models.CatalogsReportDistributionStats
import org.openapitools.client.models.CatalogsReportFeedIngestionStats

class CatalogsReportStatsTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of CatalogsReportStats
        //val modelInstance = CatalogsReportStats()

        // to test the property `reportType`
        should("test reportType") {
            // uncomment below to test the property
            //modelInstance.reportType shouldBe ("TODO")
        }

        // to test the property `catalogId` - ID of the catalog entity.
        should("test catalogId") {
            // uncomment below to test the property
            //modelInstance.catalogId shouldBe ("TODO")
        }

        // to test the property `code` - The event code that a diagnostics aggregated number references
        should("test code") {
            // uncomment below to test the property
            //modelInstance.code shouldBe ("TODO")
        }

        // to test the property `codeLabel` - A human-friendly label for the event code (e.g, 'SPAM')
        should("test codeLabel") {
            // uncomment below to test the property
            //modelInstance.codeLabel shouldBe ("TODO")
        }

        // to test the property `message` - Title message describing the diagnostic issue
        should("test message") {
            // uncomment below to test the property
            //modelInstance.message shouldBe ("TODO")
        }

        // to test the property `occurrences` - Number of occurrences of the issue
        should("test occurrences") {
            // uncomment below to test the property
            //modelInstance.occurrences shouldBe ("TODO")
        }

        // to test the property `severity` - An ERROR means that items have been dropped, while a WARN denotes that items have been ingested despite an issue
        should("test severity") {
            // uncomment below to test the property
            //modelInstance.severity shouldBe ("TODO")
        }

        // to test the property `ineligibleForAds` - Indicates if issue makes items ineligible for ads distribution
        should("test ineligibleForAds") {
            // uncomment below to test the property
            //modelInstance.ineligibleForAds shouldBe ("TODO")
        }

        // to test the property `ineligibleForOrganic` - Indicates if issue makes items ineligible for organic distribution
        should("test ineligibleForOrganic") {
            // uncomment below to test the property
            //modelInstance.ineligibleForOrganic shouldBe ("TODO")
        }

    }
}
