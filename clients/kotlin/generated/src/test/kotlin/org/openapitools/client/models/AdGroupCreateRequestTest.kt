/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import org.openapitools.client.models.AdGroupCreateRequest
import org.openapitools.client.models.ActionType
import org.openapitools.client.models.BudgetType
import org.openapitools.client.models.EntityStatus
import org.openapitools.client.models.OptimizationGoalMetadata
import org.openapitools.client.models.PacingDeliveryType
import org.openapitools.client.models.PlacementGroupType
import org.openapitools.client.models.TargetingSpec
import org.openapitools.client.models.TrackingUrls

class AdGroupCreateRequestTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of AdGroupCreateRequest
        //val modelInstance = AdGroupCreateRequest()

        // to test the property `name` - Ad group name.
        should("test name") {
            // uncomment below to test the property
            //modelInstance.name shouldBe ("TODO")
        }

        // to test the property `campaignId` - Campaign ID of the ad group.
        should("test campaignId") {
            // uncomment below to test the property
            //modelInstance.campaignId shouldBe ("TODO")
        }

        // to test the property `billableEvent`
        should("test billableEvent") {
            // uncomment below to test the property
            //modelInstance.billableEvent shouldBe ("TODO")
        }

        // to test the property `status` - Ad group/entity status.
        should("test status") {
            // uncomment below to test the property
            //modelInstance.status shouldBe ("TODO")
        }

        // to test the property `budgetInMicroCurrency` - Budget in micro currency. This field is **REQUIRED** for non-CBO (campaign budget optimization) campaigns.  A CBO campaign automatically generates ad group budgets from its campaign budget to maximize campaign outcome. A CBO campaign is limited to 70 or less ad groups.
        should("test budgetInMicroCurrency") {
            // uncomment below to test the property
            //modelInstance.budgetInMicroCurrency shouldBe ("TODO")
        }

        // to test the property `bidInMicroCurrency` - Bid price in micro currency. This field is **REQUIRED** for the following campaign objective_type/billable_event combinations: AWARENESS/IMPRESSION, CONSIDERATION/CLICKTHROUGH, CATALOG_SALES/CLICKTHROUGH, VIDEO_VIEW/VIDEO_V_50_MRC.
        should("test bidInMicroCurrency") {
            // uncomment below to test the property
            //modelInstance.bidInMicroCurrency shouldBe ("TODO")
        }

        // to test the property `optimizationGoalMetadata` - Optimization goals for objective-based performance campaigns. **REQUIRED** when campaign's `objective_type` is set to `\"WEB_CONVERSION\"`.
        should("test optimizationGoalMetadata") {
            // uncomment below to test the property
            //modelInstance.optimizationGoalMetadata shouldBe ("TODO")
        }

        // to test the property `budgetType`
        should("test budgetType") {
            // uncomment below to test the property
            //modelInstance.budgetType shouldBe ("TODO")
        }

        // to test the property `startTime` - Ad group start time. Unix timestamp in seconds. Defaults to current time.
        should("test startTime") {
            // uncomment below to test the property
            //modelInstance.startTime shouldBe ("TODO")
        }

        // to test the property `endTime` - Ad group end time. Unix timestamp in seconds.
        should("test endTime") {
            // uncomment below to test the property
            //modelInstance.endTime shouldBe ("TODO")
        }

        // to test the property `targetingSpec`
        should("test targetingSpec") {
            // uncomment below to test the property
            //modelInstance.targetingSpec shouldBe ("TODO")
        }

        // to test the property `lifetimeFrequencyCap` - Set a limit to the number of times a promoted pin from this campaign can be impressed by a pinner within the past rolling 30 days. Only available for CPM (cost per mille (1000 impressions))  ad groups. A CPM ad group has an IMPRESSION <a href=\"/docs/redoc/#section/Billable-event\">billable_event</a> value. This field **REQUIRES** the `end_time` field.
        should("test lifetimeFrequencyCap") {
            // uncomment below to test the property
            //modelInstance.lifetimeFrequencyCap shouldBe ("TODO")
        }

        // to test the property `trackingUrls` - Third-party tracking URLs.<br> JSON object with the format: {\"<a href=\"/docs/redoc/#section/Tracking-URL-event\">Tracking event enum</a>\":[URL string array],...}<br> For example: {\"impression\": [\"URL1\", \"URL2\"], \"click\": [\"URL1\", \"URL2\", \"URL3\"]}.<br>Up to three tracking URLs are supported for each event type. Tracking URLs set at the ad group or ad level can override those set at the campaign level. May be null. Pass in an empty object - {} - to remove tracking URLs.<br><br> For more information, see <a href=\"https://help.pinterest.com/en/business/article/third-party-and-dynamic-tracking\" target=\"_blank\">Third-party and dynamic tracking</a>.
        should("test trackingUrls") {
            // uncomment below to test the property
            //modelInstance.trackingUrls shouldBe ("TODO")
        }

        // to test the property `autoTargetingEnabled` - Enable auto-targeting for ad group.Default value is True. Also known as <a href=\"https://help.pinterest.com/en/business/article/expanded-targeting\" target=\"_blank\">\"expanded targeting\"</a>.
        should("test autoTargetingEnabled") {
            // uncomment below to test the property
            //modelInstance.autoTargetingEnabled shouldBe ("TODO")
        }

        // to test the property `placementGroup` - <a href=\"/docs/redoc/#section/Placement-group\">Placement group</a>.
        should("test placementGroup") {
            // uncomment below to test the property
            //modelInstance.placementGroup shouldBe ("TODO")
        }

        // to test the property `pacingDeliveryType`
        should("test pacingDeliveryType") {
            // uncomment below to test the property
            //modelInstance.pacingDeliveryType shouldBe ("TODO")
        }

        // to test the property `bidStrategyType` - Bid strategy type. For Campaigns with Video Completion objectives, the only supported bid strategy type is AUTOMATIC_BID.
        should("test bidStrategyType") {
            // uncomment below to test the property
            //modelInstance.bidStrategyType shouldBe ("TODO")
        }

        // to test the property `targetingTemplateIds` - Targeting template IDs applied to the ad group. We currently only support 1 targeting template per ad group. To use targeting templates, do not set any other targeting fields: targeting_spec, tracking_urls, auto_targeting_enabled, placement_group. To clear all targeting template IDs, set this field to ['0'].
        should("test targetingTemplateIds") {
            // uncomment below to test the property
            //modelInstance.targetingTemplateIds shouldBe ("TODO")
        }

    }
}
