/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import org.openapitools.client.models.ItemAttributesRequest
import org.openapitools.client.models.ItemAttributesRequestAllOfImageLink

class ItemAttributesRequestTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of ItemAttributesRequest
        //val modelInstance = ItemAttributesRequest()

        // to test the property `adLink` - Allows advertisers to specify a separate URL that can be used to track traffic coming from Pinterest shopping ads. Must send full URL including tracking—do not send tracking parameters only. At this time we do not support impression tracking. Must begin with http:// or https://.
        should("test adLink") {
            // uncomment below to test the property
            //modelInstance.adLink shouldBe ("TODO")
        }

        // to test the property `adult` - Set this attribute to TRUE if you're submitting items that are considered “adult”. These will not be shown on Pinterest.
        should("test adult") {
            // uncomment below to test the property
            //modelInstance.adult shouldBe ("TODO")
        }

        // to test the property `ageGroup` - The age group to apply a demographic range to the product. Must be one of the following values (upper or lowercased): ‘newborn’ , ‘infant’, ‘toddler’, ‘kids’, or ‘adult’.
        should("test ageGroup") {
            // uncomment below to test the property
            //modelInstance.ageGroup shouldBe ("TODO")
        }

        // to test the property `availability` - The availability of the product. Must be one of the following values (upper or lowercased): ‘in stock’, ‘out of stock’ , ‘preorder’.
        should("test availability") {
            // uncomment below to test the property
            //modelInstance.availability shouldBe ("TODO")
        }

        // to test the property `averageReviewRating` - Average reviews for the item. Can be a number from 1-5.
        should("test averageReviewRating") {
            // uncomment below to test the property
            //modelInstance.averageReviewRating shouldBe ("TODO")
        }

        // to test the property `brand` - The brand of the product.
        should("test brand") {
            // uncomment below to test the property
            //modelInstance.brand shouldBe ("TODO")
        }

        // to test the property `checkoutEnabled` - This attribute is not supported anymore.
        should("test checkoutEnabled") {
            // uncomment below to test the property
            //modelInstance.checkoutEnabled shouldBe ("TODO")
        }

        // to test the property `color` - The primary color of the product.
        should("test color") {
            // uncomment below to test the property
            //modelInstance.color shouldBe ("TODO")
        }

        // to test the property `condition` - The condition of the product. Must be one of the following values (upper or lowercased): ‘new’, ‘used’, or ‘refurbished’.
        should("test condition") {
            // uncomment below to test the property
            //modelInstance.condition shouldBe ("TODO")
        }

        // to test the property `customLabel0` - <p><= 1000 characters</p> <p>Custom grouping of products.</p>
        should("test customLabel0") {
            // uncomment below to test the property
            //modelInstance.customLabel0 shouldBe ("TODO")
        }

        // to test the property `customLabel1` - <p><= 1000 characters</p> <p>Custom grouping of products.</p>
        should("test customLabel1") {
            // uncomment below to test the property
            //modelInstance.customLabel1 shouldBe ("TODO")
        }

        // to test the property `customLabel2` - <p><= 1000 characters</p> <p>Custom grouping of products.</p>
        should("test customLabel2") {
            // uncomment below to test the property
            //modelInstance.customLabel2 shouldBe ("TODO")
        }

        // to test the property `customLabel3` - <p><= 1000 characters</p> <p>Custom grouping of products.</p>
        should("test customLabel3") {
            // uncomment below to test the property
            //modelInstance.customLabel3 shouldBe ("TODO")
        }

        // to test the property `customLabel4` - <p><= 1000 characters</p> <p>Custom grouping of products.</p>
        should("test customLabel4") {
            // uncomment below to test the property
            //modelInstance.customLabel4 shouldBe ("TODO")
        }

        // to test the property `description` - <p><= 10000 characters</p> <p>The description of the product.</p>
        should("test description") {
            // uncomment below to test the property
            //modelInstance.description shouldBe ("TODO")
        }

        // to test the property `freeShippingLabel` - The item is free to ship.
        should("test freeShippingLabel") {
            // uncomment below to test the property
            //modelInstance.freeShippingLabel shouldBe ("TODO")
        }

        // to test the property `freeShippingLimit` - The minimum order purchase necessary for the customer to get free shipping. Only relevant if free shipping is offered.
        should("test freeShippingLimit") {
            // uncomment below to test the property
            //modelInstance.freeShippingLimit shouldBe ("TODO")
        }

        // to test the property `gender` - The gender associated with the product. Must be one of the following values (upper or lowercased): ‘male’, ‘female’ , or ‘unisex’.
        should("test gender") {
            // uncomment below to test the property
            //modelInstance.gender shouldBe ("TODO")
        }

        // to test the property `googleProductCategory` - The categorization of the product based on the standardized Google Product Taxonomy. This is a set taxonomy. Both the text values and numeric codes are accepted.
        should("test googleProductCategory") {
            // uncomment below to test the property
            //modelInstance.googleProductCategory shouldBe ("TODO")
        }

        // to test the property `gtin` - The unique universal product identifier.
        should("test gtin") {
            // uncomment below to test the property
            //modelInstance.gtin shouldBe ("TODO")
        }

        // to test the property `id` - <p><= 127 characters</p> <p>The user-created unique ID that represents the product. Only Unicode characters are accepted.</p>
        should("test id") {
            // uncomment below to test the property
            //modelInstance.id shouldBe ("TODO")
        }

        // to test the property `itemGroupId` - <p><= 127 characters</p> <p>The parent ID of the product.</p>
        should("test itemGroupId") {
            // uncomment below to test the property
            //modelInstance.itemGroupId shouldBe ("TODO")
        }

        // to test the property `lastUpdatedTime` - The millisecond timestamp when the item was lastly modified by the merchant.
        should("test lastUpdatedTime") {
            // uncomment below to test the property
            //modelInstance.lastUpdatedTime shouldBe ("TODO")
        }

        // to test the property `link` - <p><= 511 characters</p> <p>The landing page for the product.</p>
        should("test link") {
            // uncomment below to test the property
            //modelInstance.link shouldBe ("TODO")
        }

        // to test the property `material` - The material used to make the product.
        should("test material") {
            // uncomment below to test the property
            //modelInstance.material shouldBe ("TODO")
        }

        // to test the property `minAdPrice` - The minimum advertised price of the product. It supports the following formats, \"19.99 USD\", \"19.99USD\" and \"19.99\". If the currency is not included, we default to US dollars.
        should("test minAdPrice") {
            // uncomment below to test the property
            //modelInstance.minAdPrice shouldBe ("TODO")
        }

        // to test the property `mobileLink` - The mobile-optimized version of your landing page. Must begin with http:// or https://.
        should("test mobileLink") {
            // uncomment below to test the property
            //modelInstance.mobileLink shouldBe ("TODO")
        }

        // to test the property `mpn` - Manufacturer Part Number are alpha-numeric codes created by the manufacturer of a product to uniquely identify it among all products from the same manufacturer.
        should("test mpn") {
            // uncomment below to test the property
            //modelInstance.mpn shouldBe ("TODO")
        }

        // to test the property `numberOfRatings` - The number of ratings for the item.
        should("test numberOfRatings") {
            // uncomment below to test the property
            //modelInstance.numberOfRatings shouldBe ("TODO")
        }

        // to test the property `numberOfReviews` - The number of reviews available for the item.
        should("test numberOfReviews") {
            // uncomment below to test the property
            //modelInstance.numberOfReviews shouldBe ("TODO")
        }

        // to test the property `pattern` - The description of the pattern used for the product.
        should("test pattern") {
            // uncomment below to test the property
            //modelInstance.pattern shouldBe ("TODO")
        }

        // to test the property `price` - The price of the product. It supports the following formats, \"24.99 USD\", \"24.99USD\" and \"24.99\". If the currency is not included, we default to US dollars.
        should("test price") {
            // uncomment below to test the property
            //modelInstance.price shouldBe ("TODO")
        }

        // to test the property `productType` - <p><= 1000 characters</p> <p>The categorization of your product based on your custom product taxonomy. Subcategories must be sent separated by “ > “. The > must be wrapped by spaces. We do not recognize any other delimiters such as comma or pipe.</p>
        should("test productType") {
            // uncomment below to test the property
            //modelInstance.productType shouldBe ("TODO")
        }

        // to test the property `salePrice` - The discounted price of the product. The sale_price must be lower than the price. It supports the following formats, \"14.99 USD\", \"14.99USD\" and \"14.99\". If the currency is not included, we default to US dollars.
        should("test salePrice") {
            // uncomment below to test the property
            //modelInstance.salePrice shouldBe ("TODO")
        }

        // to test the property `shipping` - Shipping consists of one group of up to four elements, country, region, service (all optional) and price (required). All colons, even for blank values, are required.
        should("test shipping") {
            // uncomment below to test the property
            //modelInstance.shipping shouldBe ("TODO")
        }

        // to test the property `shippingHeight` - The height of the package needed to ship the product. Ensure there is a space between the numeric string and the metric.
        should("test shippingHeight") {
            // uncomment below to test the property
            //modelInstance.shippingHeight shouldBe ("TODO")
        }

        // to test the property `shippingWeight` - The weight of the product. Ensure there is a space between the numeric string and the metric.
        should("test shippingWeight") {
            // uncomment below to test the property
            //modelInstance.shippingWeight shouldBe ("TODO")
        }

        // to test the property `shippingWidth` - The width of the package needed to ship the product. Ensure there is a space between the numeric string and the metric.
        should("test shippingWidth") {
            // uncomment below to test the property
            //modelInstance.shippingWidth shouldBe ("TODO")
        }

        // to test the property `propertySize` - The size of the product.
        should("test propertySize") {
            // uncomment below to test the property
            //modelInstance.propertySize shouldBe ("TODO")
        }

        // to test the property `sizeSystem` - Indicates the country’s sizing system in which you are submitting your product. Must be one of the following values (upper or lowercased): ‘US’, ‘UK’, ‘EU’, ‘DE’ , ‘FR’, ‘JP’, ‘CN’, ‘IT’, ‘ BR’, ‘MEX’, or ‘AU’.
        should("test sizeSystem") {
            // uncomment below to test the property
            //modelInstance.sizeSystem shouldBe ("TODO")
        }

        // to test the property `sizeType` - Additional description for the size. Must be one of the following values (upper or lowercased): ‘regular’, ‘petite’ , ‘plus’, ‘big_and_tall’, or ‘maternity’.
        should("test sizeType") {
            // uncomment below to test the property
            //modelInstance.sizeType shouldBe ("TODO")
        }

        // to test the property `tax` - Tax consists of one group of up to four elements, country, region, rate (all required) and tax_ship (optional). All colons, even for blank values, are required.
        should("test tax") {
            // uncomment below to test the property
            //modelInstance.tax shouldBe ("TODO")
        }

        // to test the property `title` - <p><= 500 characters</p> <p>The name of the product.</p>
        should("test title") {
            // uncomment below to test the property
            //modelInstance.title shouldBe ("TODO")
        }

        // to test the property `variantNames` - Options for this variant. People will see these options next to your Pin and can select the one they want. List them in the order you want them displayed.
        should("test variantNames") {
            // uncomment below to test the property
            //modelInstance.variantNames shouldBe ("TODO")
        }

        // to test the property `variantValues` - Option values for this variant. People will see these options next to your Pin and can select the one they want. List them in the order you want them displayed. The order of the variant values must be consistent with the order of the variant names.
        should("test variantValues") {
            // uncomment below to test the property
            //modelInstance.variantValues shouldBe ("TODO")
        }

        // to test the property `additionalImageLink` - <p><= 2000 characters</p> <p>The links to additional images for your product. Up to ten additional images can be used to show a product from different angles or to show different stages. Must begin with http:// or https://.</p>
        should("test additionalImageLink") {
            // uncomment below to test the property
            //modelInstance.additionalImageLink shouldBe ("TODO")
        }

        // to test the property `imageLink`
        should("test imageLink") {
            // uncomment below to test the property
            //modelInstance.imageLink shouldBe ("TODO")
        }

        // to test the property `videoLink` - <p><= 2,000 characters</p> <p>Hosted link to the product video.</p> <p>File types for linked videos must be .mp4, .mov or .m4v.</p> <p>File size cannot exceed 2GB.</p>
        should("test videoLink") {
            // uncomment below to test the property
            //modelInstance.videoLink shouldBe ("TODO")
        }

    }
}
