/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import org.openapitools.client.apis.IntegrationsApi
import org.openapitools.client.models.DetailedError
import org.openapitools.client.models.Error
import org.openapitools.client.models.IntegrationLogsRequest
import org.openapitools.client.models.IntegrationLogsSuccessResponse
import org.openapitools.client.models.IntegrationMetadata
import org.openapitools.client.models.IntegrationRecord
import org.openapitools.client.models.IntegrationRequest
import org.openapitools.client.models.IntegrationRequestPatch
import org.openapitools.client.models.IntegrationsGetList200Response

class IntegrationsApiTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of IntegrationsApi
        //val apiInstance = IntegrationsApi()

        // to test integrationsCommerceDel
        should("test integrationsCommerceDel") {
            // uncomment below to test integrationsCommerceDel
            //val externalBusinessId : kotlin.String = externalBusinessId_example // kotlin.String | External business ID for the integration.
            //apiInstance.integrationsCommerceDel(externalBusinessId)
        }

        // to test integrationsCommerceGet
        should("test integrationsCommerceGet") {
            // uncomment below to test integrationsCommerceGet
            //val externalBusinessId : kotlin.String = externalBusinessId_example // kotlin.String | External business ID for the integration.
            //val result : IntegrationMetadata = apiInstance.integrationsCommerceGet(externalBusinessId)
            //result shouldBe ("TODO")
        }

        // to test integrationsCommercePatch
        should("test integrationsCommercePatch") {
            // uncomment below to test integrationsCommercePatch
            //val externalBusinessId : kotlin.String = externalBusinessId_example // kotlin.String | External business ID for the integration.
            //val integrationRequestPatch : IntegrationRequestPatch =  // IntegrationRequestPatch | Parameters to get create/update the Integration Metadata
            //val result : IntegrationMetadata = apiInstance.integrationsCommercePatch(externalBusinessId, integrationRequestPatch)
            //result shouldBe ("TODO")
        }

        // to test integrationsCommercePost
        should("test integrationsCommercePost") {
            // uncomment below to test integrationsCommercePost
            //val integrationRequest : IntegrationRequest =  // IntegrationRequest | Parameters to get create/update the Integration Metadata
            //val result : IntegrationMetadata = apiInstance.integrationsCommercePost(integrationRequest)
            //result shouldBe ("TODO")
        }

        // to test integrationsGetById
        should("test integrationsGetById") {
            // uncomment below to test integrationsGetById
            //val id : kotlin.String = id_example // kotlin.String | Integration ID.
            //val result : IntegrationRecord = apiInstance.integrationsGetById(id)
            //result shouldBe ("TODO")
        }

        // to test integrationsGetList
        should("test integrationsGetList") {
            // uncomment below to test integrationsGetList
            //val bookmark : kotlin.String = bookmark_example // kotlin.String | Cursor used to fetch the next page of items
            //val pageSize : kotlin.Int = 56 // kotlin.Int | Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/reference/pagination/'>Pagination</a> for more information.
            //val result : IntegrationsGetList200Response = apiInstance.integrationsGetList(bookmark, pageSize)
            //result shouldBe ("TODO")
        }

        // to test integrationsLogsPost
        should("test integrationsLogsPost") {
            // uncomment below to test integrationsLogsPost
            //val integrationLogsRequest : IntegrationLogsRequest =  // IntegrationLogsRequest | Ingest log information from external integration application.
            //val result : IntegrationLogsSuccessResponse = apiInstance.integrationsLogsPost(integrationLogsRequest)
            //result shouldBe ("TODO")
        }

    }
}
