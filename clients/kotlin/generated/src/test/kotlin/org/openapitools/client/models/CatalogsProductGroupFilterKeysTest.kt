/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import org.openapitools.client.models.CatalogsProductGroupFilterKeys
import org.openapitools.client.models.AvailabilityFilter
import org.openapitools.client.models.BrandFilter
import org.openapitools.client.models.CatalogsProductGroupCurrencyCriteria
import org.openapitools.client.models.CatalogsProductGroupMultipleGenderCriteria
import org.openapitools.client.models.CatalogsProductGroupMultipleMediaTypesCriteria
import org.openapitools.client.models.CatalogsProductGroupMultipleStringCriteria
import org.openapitools.client.models.CatalogsProductGroupMultipleStringListCriteria
import org.openapitools.client.models.CatalogsProductGroupPricingCriteria
import org.openapitools.client.models.ConditionFilter
import org.openapitools.client.models.CurrencyFilter
import org.openapitools.client.models.CustomLabel0Filter
import org.openapitools.client.models.CustomLabel1Filter
import org.openapitools.client.models.CustomLabel2Filter
import org.openapitools.client.models.CustomLabel3Filter
import org.openapitools.client.models.CustomLabel4Filter
import org.openapitools.client.models.GenderFilter
import org.openapitools.client.models.GoogleProductCategory0Filter
import org.openapitools.client.models.GoogleProductCategory1Filter
import org.openapitools.client.models.GoogleProductCategory2Filter
import org.openapitools.client.models.GoogleProductCategory3Filter
import org.openapitools.client.models.GoogleProductCategory4Filter
import org.openapitools.client.models.GoogleProductCategory5Filter
import org.openapitools.client.models.GoogleProductCategory6Filter
import org.openapitools.client.models.ItemGroupIdFilter
import org.openapitools.client.models.ItemIdFilter
import org.openapitools.client.models.MaxPriceFilter
import org.openapitools.client.models.MediaTypeFilter
import org.openapitools.client.models.MinPriceFilter
import org.openapitools.client.models.ProductGroupReferenceFilter
import org.openapitools.client.models.ProductType0Filter
import org.openapitools.client.models.ProductType1Filter
import org.openapitools.client.models.ProductType2Filter
import org.openapitools.client.models.ProductType3Filter
import org.openapitools.client.models.ProductType4Filter

class CatalogsProductGroupFilterKeysTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of CatalogsProductGroupFilterKeys
        //val modelInstance = CatalogsProductGroupFilterKeys()

        // to test the property `MIN_PRICE`
        should("test MIN_PRICE") {
            // uncomment below to test the property
            //modelInstance.MIN_PRICE shouldBe ("TODO")
        }

        // to test the property `MAX_PRICE`
        should("test MAX_PRICE") {
            // uncomment below to test the property
            //modelInstance.MAX_PRICE shouldBe ("TODO")
        }

        // to test the property `CURRENCY`
        should("test CURRENCY") {
            // uncomment below to test the property
            //modelInstance.CURRENCY shouldBe ("TODO")
        }

        // to test the property `ITEM_ID`
        should("test ITEM_ID") {
            // uncomment below to test the property
            //modelInstance.ITEM_ID shouldBe ("TODO")
        }

        // to test the property `AVAILABILITY`
        should("test AVAILABILITY") {
            // uncomment below to test the property
            //modelInstance.AVAILABILITY shouldBe ("TODO")
        }

        // to test the property `BRAND`
        should("test BRAND") {
            // uncomment below to test the property
            //modelInstance.BRAND shouldBe ("TODO")
        }

        // to test the property `CONDITION`
        should("test CONDITION") {
            // uncomment below to test the property
            //modelInstance.CONDITION shouldBe ("TODO")
        }

        // to test the property `CUSTOM_LABEL_0`
        should("test CUSTOM_LABEL_0") {
            // uncomment below to test the property
            //modelInstance.CUSTOM_LABEL_0 shouldBe ("TODO")
        }

        // to test the property `CUSTOM_LABEL_1`
        should("test CUSTOM_LABEL_1") {
            // uncomment below to test the property
            //modelInstance.CUSTOM_LABEL_1 shouldBe ("TODO")
        }

        // to test the property `CUSTOM_LABEL_2`
        should("test CUSTOM_LABEL_2") {
            // uncomment below to test the property
            //modelInstance.CUSTOM_LABEL_2 shouldBe ("TODO")
        }

        // to test the property `CUSTOM_LABEL_3`
        should("test CUSTOM_LABEL_3") {
            // uncomment below to test the property
            //modelInstance.CUSTOM_LABEL_3 shouldBe ("TODO")
        }

        // to test the property `CUSTOM_LABEL_4`
        should("test CUSTOM_LABEL_4") {
            // uncomment below to test the property
            //modelInstance.CUSTOM_LABEL_4 shouldBe ("TODO")
        }

        // to test the property `ITEM_GROUP_ID`
        should("test ITEM_GROUP_ID") {
            // uncomment below to test the property
            //modelInstance.ITEM_GROUP_ID shouldBe ("TODO")
        }

        // to test the property `GENDER`
        should("test GENDER") {
            // uncomment below to test the property
            //modelInstance.GENDER shouldBe ("TODO")
        }

        // to test the property `MEDIA_TYPE`
        should("test MEDIA_TYPE") {
            // uncomment below to test the property
            //modelInstance.MEDIA_TYPE shouldBe ("TODO")
        }

        // to test the property `PRODUCT_TYPE_4`
        should("test PRODUCT_TYPE_4") {
            // uncomment below to test the property
            //modelInstance.PRODUCT_TYPE_4 shouldBe ("TODO")
        }

        // to test the property `PRODUCT_TYPE_3`
        should("test PRODUCT_TYPE_3") {
            // uncomment below to test the property
            //modelInstance.PRODUCT_TYPE_3 shouldBe ("TODO")
        }

        // to test the property `PRODUCT_TYPE_2`
        should("test PRODUCT_TYPE_2") {
            // uncomment below to test the property
            //modelInstance.PRODUCT_TYPE_2 shouldBe ("TODO")
        }

        // to test the property `PRODUCT_TYPE_1`
        should("test PRODUCT_TYPE_1") {
            // uncomment below to test the property
            //modelInstance.PRODUCT_TYPE_1 shouldBe ("TODO")
        }

        // to test the property `PRODUCT_TYPE_0`
        should("test PRODUCT_TYPE_0") {
            // uncomment below to test the property
            //modelInstance.PRODUCT_TYPE_0 shouldBe ("TODO")
        }

        // to test the property `GOOGLE_PRODUCT_CATEGORY_6`
        should("test GOOGLE_PRODUCT_CATEGORY_6") {
            // uncomment below to test the property
            //modelInstance.GOOGLE_PRODUCT_CATEGORY_6 shouldBe ("TODO")
        }

        // to test the property `GOOGLE_PRODUCT_CATEGORY_5`
        should("test GOOGLE_PRODUCT_CATEGORY_5") {
            // uncomment below to test the property
            //modelInstance.GOOGLE_PRODUCT_CATEGORY_5 shouldBe ("TODO")
        }

        // to test the property `GOOGLE_PRODUCT_CATEGORY_4`
        should("test GOOGLE_PRODUCT_CATEGORY_4") {
            // uncomment below to test the property
            //modelInstance.GOOGLE_PRODUCT_CATEGORY_4 shouldBe ("TODO")
        }

        // to test the property `GOOGLE_PRODUCT_CATEGORY_3`
        should("test GOOGLE_PRODUCT_CATEGORY_3") {
            // uncomment below to test the property
            //modelInstance.GOOGLE_PRODUCT_CATEGORY_3 shouldBe ("TODO")
        }

        // to test the property `GOOGLE_PRODUCT_CATEGORY_2`
        should("test GOOGLE_PRODUCT_CATEGORY_2") {
            // uncomment below to test the property
            //modelInstance.GOOGLE_PRODUCT_CATEGORY_2 shouldBe ("TODO")
        }

        // to test the property `GOOGLE_PRODUCT_CATEGORY_1`
        should("test GOOGLE_PRODUCT_CATEGORY_1") {
            // uncomment below to test the property
            //modelInstance.GOOGLE_PRODUCT_CATEGORY_1 shouldBe ("TODO")
        }

        // to test the property `GOOGLE_PRODUCT_CATEGORY_0`
        should("test GOOGLE_PRODUCT_CATEGORY_0") {
            // uncomment below to test the property
            //modelInstance.GOOGLE_PRODUCT_CATEGORY_0 shouldBe ("TODO")
        }

        // to test the property `PRODUCT_GROUP`
        should("test PRODUCT_GROUP") {
            // uncomment below to test the property
            //modelInstance.PRODUCT_GROUP shouldBe ("TODO")
        }

    }
}
