note
 description:"[
		Pinterest REST API
 		Pinterest's REST API
  		The version of the OpenAPI document: 5.14.0
 	    Contact: blah+oapicf@cliffano.com

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class ADS_ANALYTICS_CREATE_ASYNC_REQUEST




feature --Access

    start_date: detachable STRING_32
      -- Metric report start date (UTC). Format: YYYY-MM-DD
    end_date: detachable STRING_32
      -- Metric report end date (UTC). Format: YYYY-MM-DD
    granularity: detachable GRANULARITY
      -- TOTAL - metrics are aggregated over the specified date range.<br> DAY - metrics are broken down daily.<br> HOUR - metrics are broken down hourly.<br>WEEKLY - metrics are broken down weekly.<br>MONTHLY - metrics are broken down monthly
    click_window_days: detachable CONVERSION_ATTRIBUTION_WINDOW_DAYS
      -- Number of days to use as the conversion attribution window for a pin click action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to `30` days.
    engagement_window_days: detachable CONVERSION_ATTRIBUTION_WINDOW_DAYS
      -- Number of days to use as the conversion attribution window for an engagement action. Engagements include saves, closeups, link clicks, and carousel card swipes. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to `30` days.
    view_window_days: detachable CONVERSION_ATTRIBUTION_WINDOW_DAYS
      -- Number of days to use as the conversion attribution window for a view action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to `1` day.
    conversion_report_time: detachable CONVERSION_REPORT_TIME_TYPE
      -- The date by which the conversion metrics returned from this endpoint will be reported. There are two dates associated with a conversion event: the date that the user interacted with the ad, and the date that the user completed a conversion event.
    attribution_types: detachable LIST [CONVERSION_REPORT_ATTRIBUTION_TYPE]
      -- List of types of attribution for the conversion report
    campaign_ids: detachable LIST [STRING_32]
      -- List of campaign ids
    campaign_statuses: detachable LIST [CAMPAIGN_SUMMARY_STATUS]
      -- List of status values for filtering
    campaign_objective_types: detachable LIST [OBJECTIVE_TYPE]
      -- List of values for filtering. [\"WEB_SESSIONS\"] in BETA.
    ad_group_ids: detachable LIST [STRING_32]
      -- List of ad group ids
    ad_group_statuses: detachable LIST [AD_GROUP_SUMMARY_STATUS]
      -- List of values for filtering
    ad_ids: detachable LIST [STRING_32]
      -- List of ad ids [This parameter is no supported for Product Item Level Reports]
    ad_statuses: detachable LIST [PIN_PROMOTION_SUMMARY_STATUS]
      -- List of values for filtering [This parameter is not supported for Product Item Level Reports]
    product_group_ids: detachable LIST [STRING_32]
      -- List of product group ids
    product_group_statuses: detachable LIST [PRODUCT_GROUP_SUMMARY_STATUS]
      -- List of values for filtering
    product_item_ids: detachable LIST [STRING_32]
      -- List of product item ids
    targeting_types: detachable LIST [ADS_ANALYTICS_TARGETING_TYPE]
      -- List of targeting types. Requires `level` to be a value ending in `_TARGETING`. [\"AGE_BUCKET_AND_GENDER\"] is in BETA and not yet available to all users.
    metrics_filters: detachable LIST [ADS_ANALYTICS_METRICS_FILTER]
      -- List of metrics filters
    columns: detachable LIST [REPORTING_COLUMN_ASYNC]
      -- Metric and entity columns. Pin promotion and ad related columns are not supported for the Product Item level reports.
    level: detachable METRICS_REPORTING_LEVEL
      -- Level of the report
    report_format: detachable DATA_OUTPUT_FORMAT
      -- Specification for formatting the report data. Reports in JSON will not zero-fill metrics, whereas reports in CSV will. Both report formats will omit rows where all the columns are equal to 0.
    primary_sort: detachable STRING_32
      -- Whether to first sort the report by date or by entity ID of the reporting entity level. Date will be used as the first level key for JSON reports that use BY_DATE. BY_DATE is recommended for large requests.
    start_hour: INTEGER_32
      -- Which hour of the start date to begin the report. The entire day will be included if no start hour is provided. Only allowed for hourly reports.
    end_hour: INTEGER_32
      -- Which hour of the end date to stop the report (inclusive). For example, with an end_date of '2020-01-01' and end_hour of '15', the report will contain metrics up to '2020-01-01 14:59:59'. The entire day will be included if no end hour is provided. Only allowed for hourly reports.

feature -- Change Element

    set_start_date (a_name: like start_date)
        -- Set 'start_date' with 'a_name'.
      do
        start_date := a_name
      ensure
        start_date_set: start_date = a_name
      end

    set_end_date (a_name: like end_date)
        -- Set 'end_date' with 'a_name'.
      do
        end_date := a_name
      ensure
        end_date_set: end_date = a_name
      end

    set_granularity (a_name: like granularity)
        -- Set 'granularity' with 'a_name'.
      do
        granularity := a_name
      ensure
        granularity_set: granularity = a_name
      end

    set_click_window_days (a_name: like click_window_days)
        -- Set 'click_window_days' with 'a_name'.
      do
        click_window_days := a_name
      ensure
        click_window_days_set: click_window_days = a_name
      end

    set_engagement_window_days (a_name: like engagement_window_days)
        -- Set 'engagement_window_days' with 'a_name'.
      do
        engagement_window_days := a_name
      ensure
        engagement_window_days_set: engagement_window_days = a_name
      end

    set_view_window_days (a_name: like view_window_days)
        -- Set 'view_window_days' with 'a_name'.
      do
        view_window_days := a_name
      ensure
        view_window_days_set: view_window_days = a_name
      end

    set_conversion_report_time (a_name: like conversion_report_time)
        -- Set 'conversion_report_time' with 'a_name'.
      do
        conversion_report_time := a_name
      ensure
        conversion_report_time_set: conversion_report_time = a_name
      end

    set_attribution_types (a_name: like attribution_types)
        -- Set 'attribution_types' with 'a_name'.
      do
        attribution_types := a_name
      ensure
        attribution_types_set: attribution_types = a_name
      end

    set_campaign_ids (a_name: like campaign_ids)
        -- Set 'campaign_ids' with 'a_name'.
      do
        campaign_ids := a_name
      ensure
        campaign_ids_set: campaign_ids = a_name
      end

    set_campaign_statuses (a_name: like campaign_statuses)
        -- Set 'campaign_statuses' with 'a_name'.
      do
        campaign_statuses := a_name
      ensure
        campaign_statuses_set: campaign_statuses = a_name
      end

    set_campaign_objective_types (a_name: like campaign_objective_types)
        -- Set 'campaign_objective_types' with 'a_name'.
      do
        campaign_objective_types := a_name
      ensure
        campaign_objective_types_set: campaign_objective_types = a_name
      end

    set_ad_group_ids (a_name: like ad_group_ids)
        -- Set 'ad_group_ids' with 'a_name'.
      do
        ad_group_ids := a_name
      ensure
        ad_group_ids_set: ad_group_ids = a_name
      end

    set_ad_group_statuses (a_name: like ad_group_statuses)
        -- Set 'ad_group_statuses' with 'a_name'.
      do
        ad_group_statuses := a_name
      ensure
        ad_group_statuses_set: ad_group_statuses = a_name
      end

    set_ad_ids (a_name: like ad_ids)
        -- Set 'ad_ids' with 'a_name'.
      do
        ad_ids := a_name
      ensure
        ad_ids_set: ad_ids = a_name
      end

    set_ad_statuses (a_name: like ad_statuses)
        -- Set 'ad_statuses' with 'a_name'.
      do
        ad_statuses := a_name
      ensure
        ad_statuses_set: ad_statuses = a_name
      end

    set_product_group_ids (a_name: like product_group_ids)
        -- Set 'product_group_ids' with 'a_name'.
      do
        product_group_ids := a_name
      ensure
        product_group_ids_set: product_group_ids = a_name
      end

    set_product_group_statuses (a_name: like product_group_statuses)
        -- Set 'product_group_statuses' with 'a_name'.
      do
        product_group_statuses := a_name
      ensure
        product_group_statuses_set: product_group_statuses = a_name
      end

    set_product_item_ids (a_name: like product_item_ids)
        -- Set 'product_item_ids' with 'a_name'.
      do
        product_item_ids := a_name
      ensure
        product_item_ids_set: product_item_ids = a_name
      end

    set_targeting_types (a_name: like targeting_types)
        -- Set 'targeting_types' with 'a_name'.
      do
        targeting_types := a_name
      ensure
        targeting_types_set: targeting_types = a_name
      end

    set_metrics_filters (a_name: like metrics_filters)
        -- Set 'metrics_filters' with 'a_name'.
      do
        metrics_filters := a_name
      ensure
        metrics_filters_set: metrics_filters = a_name
      end

    set_columns (a_name: like columns)
        -- Set 'columns' with 'a_name'.
      do
        columns := a_name
      ensure
        columns_set: columns = a_name
      end

    set_level (a_name: like level)
        -- Set 'level' with 'a_name'.
      do
        level := a_name
      ensure
        level_set: level = a_name
      end

    set_report_format (a_name: like report_format)
        -- Set 'report_format' with 'a_name'.
      do
        report_format := a_name
      ensure
        report_format_set: report_format = a_name
      end

    set_primary_sort (a_name: like primary_sort)
        -- Set 'primary_sort' with 'a_name'.
      do
        primary_sort := a_name
      ensure
        primary_sort_set: primary_sort = a_name
      end

    set_start_hour (a_name: like start_hour)
        -- Set 'start_hour' with 'a_name'.
      do
        start_hour := a_name
      ensure
        start_hour_set: start_hour = a_name
      end

    set_end_hour (a_name: like end_hour)
        -- Set 'end_hour' with 'a_name'.
      do
        end_hour := a_name
      ensure
        end_hour_set: end_hour = a_name
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass ADS_ANALYTICS_CREATE_ASYNC_REQUEST%N")
        if attached start_date as l_start_date then
          Result.append ("%Nstart_date:")
          Result.append (l_start_date.out)
          Result.append ("%N")
        end
        if attached end_date as l_end_date then
          Result.append ("%Nend_date:")
          Result.append (l_end_date.out)
          Result.append ("%N")
        end
        if attached granularity as l_granularity then
          Result.append ("%Ngranularity:")
          Result.append (l_granularity.out)
          Result.append ("%N")
        end
        if attached click_window_days as l_click_window_days then
          Result.append ("%Nclick_window_days:")
          Result.append (l_click_window_days.out)
          Result.append ("%N")
        end
        if attached engagement_window_days as l_engagement_window_days then
          Result.append ("%Nengagement_window_days:")
          Result.append (l_engagement_window_days.out)
          Result.append ("%N")
        end
        if attached view_window_days as l_view_window_days then
          Result.append ("%Nview_window_days:")
          Result.append (l_view_window_days.out)
          Result.append ("%N")
        end
        if attached conversion_report_time as l_conversion_report_time then
          Result.append ("%Nconversion_report_time:")
          Result.append (l_conversion_report_time.out)
          Result.append ("%N")
        end
        if attached attribution_types as l_attribution_types then
          across l_attribution_types as ic loop
            Result.append ("%N attribution_types:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached campaign_ids as l_campaign_ids then
          across l_campaign_ids as ic loop
            Result.append ("%N campaign_ids:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached campaign_statuses as l_campaign_statuses then
          across l_campaign_statuses as ic loop
            Result.append ("%N campaign_statuses:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached campaign_objective_types as l_campaign_objective_types then
          across l_campaign_objective_types as ic loop
            Result.append ("%N campaign_objective_types:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached ad_group_ids as l_ad_group_ids then
          across l_ad_group_ids as ic loop
            Result.append ("%N ad_group_ids:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached ad_group_statuses as l_ad_group_statuses then
          across l_ad_group_statuses as ic loop
            Result.append ("%N ad_group_statuses:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached ad_ids as l_ad_ids then
          across l_ad_ids as ic loop
            Result.append ("%N ad_ids:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached ad_statuses as l_ad_statuses then
          across l_ad_statuses as ic loop
            Result.append ("%N ad_statuses:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached product_group_ids as l_product_group_ids then
          across l_product_group_ids as ic loop
            Result.append ("%N product_group_ids:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached product_group_statuses as l_product_group_statuses then
          across l_product_group_statuses as ic loop
            Result.append ("%N product_group_statuses:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached product_item_ids as l_product_item_ids then
          across l_product_item_ids as ic loop
            Result.append ("%N product_item_ids:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached targeting_types as l_targeting_types then
          across l_targeting_types as ic loop
            Result.append ("%N targeting_types:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached metrics_filters as l_metrics_filters then
          across l_metrics_filters as ic loop
            Result.append ("%N metrics_filters:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached columns as l_columns then
          across l_columns as ic loop
            Result.append ("%N columns:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached level as l_level then
          Result.append ("%Nlevel:")
          Result.append (l_level.out)
          Result.append ("%N")
        end
        if attached report_format as l_report_format then
          Result.append ("%Nreport_format:")
          Result.append (l_report_format.out)
          Result.append ("%N")
        end
        if attached primary_sort as l_primary_sort then
          Result.append ("%Nprimary_sort:")
          Result.append (l_primary_sort.out)
          Result.append ("%N")
        end
        if attached start_hour as l_start_hour then
          Result.append ("%Nstart_hour:")
          Result.append (l_start_hour.out)
          Result.append ("%N")
        end
        if attached end_hour as l_end_hour then
          Result.append ("%Nend_hour:")
          Result.append (l_end_hour.out)
          Result.append ("%N")
        end
      end
end

