note
 description:"[
		Pinterest REST API
 		Pinterest's REST API
  		The version of the OpenAPI document: 5.14.0
 	    Contact: blah+oapicf@cliffano.com

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class AD_GROUP_UPDATE_REQUEST




feature --Access

    name: detachable STRING_32
      -- Ad group name.
    status: detachable ENTITY_STATUS
      -- Ad group/entity status.
    budget_in_micro_currency: INTEGER_32
      -- Budget in micro currency. This field is **REQUIRED** for non-CBO (campaign budget optimization) campaigns.  A CBO campaign automatically generates ad group budgets from its campaign budget to maximize campaign outcome. A CBO campaign is limited to 70 or less ad groups.
    bid_in_micro_currency: INTEGER_32
      -- Bid price in micro currency. This field is **REQUIRED** for the following campaign objective_type/billable_event combinations: AWARENESS/IMPRESSION, CONSIDERATION/CLICKTHROUGH, CATALOG_SALES/CLICKTHROUGH, VIDEO_VIEW/VIDEO_V_50_MRC.
    optimization_goal_metadata: detachable OPTIMIZATION_GOAL_METADATA
      -- Optimization goals for objective-based performance campaigns. **REQUIRED** when campaign's `objective_type` is set to `\"WEB_CONVERSION\"`.
    budget_type: detachable BUDGET_TYPE
      
    start_time: INTEGER_32
      -- Ad group start time. Unix timestamp in seconds. Defaults to current time.
    end_time: INTEGER_32
      -- Ad group end time. Unix timestamp in seconds.
    targeting_spec: detachable TARGETING_SPEC
      
    lifetime_frequency_cap: INTEGER_32
      -- Set a limit to the number of times a promoted pin from this campaign can be impressed by a pinner within the past rolling 30 days. Only available for CPM (cost per mille (1000 impressions))  ad groups. A CPM ad group has an IMPRESSION <a href=\"/docs/redoc/#section/Billable-event\">billable_event</a> value. This field **REQUIRES** the `end_time` field.
    tracking_urls: detachable TRACKING_URLS
      -- Third-party tracking URLs.<br> JSON object with the format: {\"<a href=\"/docs/redoc/#section/Tracking-URL-event\">Tracking event enum</a>\":[URL string array],...}<br> For example: {\"impression\": [\"URL1\", \"URL2\"], \"click\": [\"URL1\", \"URL2\", \"URL3\"]}.<br>Up to three tracking URLs are supported for each event type. Tracking URLs set at the ad group or ad level can override those set at the campaign level. May be null. Pass in an empty object - {} - to remove tracking URLs.<br><br> For more information, see <a href=\"https://help.pinterest.com/en/business/article/third-party-and-dynamic-tracking\" target=\"_blank\">Third-party and dynamic tracking</a>.
    auto_targeting_enabled: BOOLEAN
      -- Enable auto-targeting for ad group. Also known as <a href=\"https://help.pinterest.com/en/business/article/expanded-targeting\" target=\"_blank\">\"expanded targeting\"</a>.
    placement_group: detachable PLACEMENT_GROUP_TYPE
      -- <a href=\"/docs/redoc/#section/Placement-group\">Placement group</a>.
    pacing_delivery_type: detachable PACING_DELIVERY_TYPE
      
    campaign_id: detachable STRING_32
      -- Campaign ID of the ad group.
    billable_event: detachable ACTION_TYPE
      
    bid_strategy_type: detachable STRING_32
      -- Bid strategy type. For Campaigns with Video Completion objectives, the only supported bid strategy type is AUTOMATIC_BID.
    targeting_template_ids: detachable LIST [STRING_32]
      -- Targeting template IDs applied to the ad group. We currently only support 1 targeting template per ad group. To use targeting templates, do not set any other targeting fields: targeting_spec, tracking_urls, auto_targeting_enabled, placement_group. To clear all targeting template IDs, set this field to ['0'].
    id: detachable STRING_32
      -- Ad group ID.

feature -- Change Element

    set_name (a_name: like name)
        -- Set 'name' with 'a_name'.
      do
        name := a_name
      ensure
        name_set: name = a_name
      end

    set_status (a_name: like status)
        -- Set 'status' with 'a_name'.
      do
        status := a_name
      ensure
        status_set: status = a_name
      end

    set_budget_in_micro_currency (a_name: like budget_in_micro_currency)
        -- Set 'budget_in_micro_currency' with 'a_name'.
      do
        budget_in_micro_currency := a_name
      ensure
        budget_in_micro_currency_set: budget_in_micro_currency = a_name
      end

    set_bid_in_micro_currency (a_name: like bid_in_micro_currency)
        -- Set 'bid_in_micro_currency' with 'a_name'.
      do
        bid_in_micro_currency := a_name
      ensure
        bid_in_micro_currency_set: bid_in_micro_currency = a_name
      end

    set_optimization_goal_metadata (a_name: like optimization_goal_metadata)
        -- Set 'optimization_goal_metadata' with 'a_name'.
      do
        optimization_goal_metadata := a_name
      ensure
        optimization_goal_metadata_set: optimization_goal_metadata = a_name
      end

    set_budget_type (a_name: like budget_type)
        -- Set 'budget_type' with 'a_name'.
      do
        budget_type := a_name
      ensure
        budget_type_set: budget_type = a_name
      end

    set_start_time (a_name: like start_time)
        -- Set 'start_time' with 'a_name'.
      do
        start_time := a_name
      ensure
        start_time_set: start_time = a_name
      end

    set_end_time (a_name: like end_time)
        -- Set 'end_time' with 'a_name'.
      do
        end_time := a_name
      ensure
        end_time_set: end_time = a_name
      end

    set_targeting_spec (a_name: like targeting_spec)
        -- Set 'targeting_spec' with 'a_name'.
      do
        targeting_spec := a_name
      ensure
        targeting_spec_set: targeting_spec = a_name
      end

    set_lifetime_frequency_cap (a_name: like lifetime_frequency_cap)
        -- Set 'lifetime_frequency_cap' with 'a_name'.
      do
        lifetime_frequency_cap := a_name
      ensure
        lifetime_frequency_cap_set: lifetime_frequency_cap = a_name
      end

    set_tracking_urls (a_name: like tracking_urls)
        -- Set 'tracking_urls' with 'a_name'.
      do
        tracking_urls := a_name
      ensure
        tracking_urls_set: tracking_urls = a_name
      end

    set_auto_targeting_enabled (a_name: like auto_targeting_enabled)
        -- Set 'auto_targeting_enabled' with 'a_name'.
      do
        auto_targeting_enabled := a_name
      ensure
        auto_targeting_enabled_set: auto_targeting_enabled = a_name
      end

    set_placement_group (a_name: like placement_group)
        -- Set 'placement_group' with 'a_name'.
      do
        placement_group := a_name
      ensure
        placement_group_set: placement_group = a_name
      end

    set_pacing_delivery_type (a_name: like pacing_delivery_type)
        -- Set 'pacing_delivery_type' with 'a_name'.
      do
        pacing_delivery_type := a_name
      ensure
        pacing_delivery_type_set: pacing_delivery_type = a_name
      end

    set_campaign_id (a_name: like campaign_id)
        -- Set 'campaign_id' with 'a_name'.
      do
        campaign_id := a_name
      ensure
        campaign_id_set: campaign_id = a_name
      end

    set_billable_event (a_name: like billable_event)
        -- Set 'billable_event' with 'a_name'.
      do
        billable_event := a_name
      ensure
        billable_event_set: billable_event = a_name
      end

    set_bid_strategy_type (a_name: like bid_strategy_type)
        -- Set 'bid_strategy_type' with 'a_name'.
      do
        bid_strategy_type := a_name
      ensure
        bid_strategy_type_set: bid_strategy_type = a_name
      end

    set_targeting_template_ids (a_name: like targeting_template_ids)
        -- Set 'targeting_template_ids' with 'a_name'.
      do
        targeting_template_ids := a_name
      ensure
        targeting_template_ids_set: targeting_template_ids = a_name
      end

    set_id (a_name: like id)
        -- Set 'id' with 'a_name'.
      do
        id := a_name
      ensure
        id_set: id = a_name
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass AD_GROUP_UPDATE_REQUEST%N")
        if attached name as l_name then
          Result.append ("%Nname:")
          Result.append (l_name.out)
          Result.append ("%N")
        end
        if attached status as l_status then
          Result.append ("%Nstatus:")
          Result.append (l_status.out)
          Result.append ("%N")
        end
        if attached budget_in_micro_currency as l_budget_in_micro_currency then
          Result.append ("%Nbudget_in_micro_currency:")
          Result.append (l_budget_in_micro_currency.out)
          Result.append ("%N")
        end
        if attached bid_in_micro_currency as l_bid_in_micro_currency then
          Result.append ("%Nbid_in_micro_currency:")
          Result.append (l_bid_in_micro_currency.out)
          Result.append ("%N")
        end
        if attached optimization_goal_metadata as l_optimization_goal_metadata then
          Result.append ("%Noptimization_goal_metadata:")
          Result.append (l_optimization_goal_metadata.out)
          Result.append ("%N")
        end
        if attached budget_type as l_budget_type then
          Result.append ("%Nbudget_type:")
          Result.append (l_budget_type.out)
          Result.append ("%N")
        end
        if attached start_time as l_start_time then
          Result.append ("%Nstart_time:")
          Result.append (l_start_time.out)
          Result.append ("%N")
        end
        if attached end_time as l_end_time then
          Result.append ("%Nend_time:")
          Result.append (l_end_time.out)
          Result.append ("%N")
        end
        if attached targeting_spec as l_targeting_spec then
          Result.append ("%Ntargeting_spec:")
          Result.append (l_targeting_spec.out)
          Result.append ("%N")
        end
        if attached lifetime_frequency_cap as l_lifetime_frequency_cap then
          Result.append ("%Nlifetime_frequency_cap:")
          Result.append (l_lifetime_frequency_cap.out)
          Result.append ("%N")
        end
        if attached tracking_urls as l_tracking_urls then
          Result.append ("%Ntracking_urls:")
          Result.append (l_tracking_urls.out)
          Result.append ("%N")
        end
        if attached auto_targeting_enabled as l_auto_targeting_enabled then
          Result.append ("%Nauto_targeting_enabled:")
          Result.append (l_auto_targeting_enabled.out)
          Result.append ("%N")
        end
        if attached placement_group as l_placement_group then
          Result.append ("%Nplacement_group:")
          Result.append (l_placement_group.out)
          Result.append ("%N")
        end
        if attached pacing_delivery_type as l_pacing_delivery_type then
          Result.append ("%Npacing_delivery_type:")
          Result.append (l_pacing_delivery_type.out)
          Result.append ("%N")
        end
        if attached campaign_id as l_campaign_id then
          Result.append ("%Ncampaign_id:")
          Result.append (l_campaign_id.out)
          Result.append ("%N")
        end
        if attached billable_event as l_billable_event then
          Result.append ("%Nbillable_event:")
          Result.append (l_billable_event.out)
          Result.append ("%N")
        end
        if attached bid_strategy_type as l_bid_strategy_type then
          Result.append ("%Nbid_strategy_type:")
          Result.append (l_bid_strategy_type.out)
          Result.append ("%N")
        end
        if attached targeting_template_ids as l_targeting_template_ids then
          across l_targeting_template_ids as ic loop
            Result.append ("%N targeting_template_ids:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached id as l_id then
          Result.append ("%Nid:")
          Result.append (l_id.out)
          Result.append ("%N")
        end
      end
end

