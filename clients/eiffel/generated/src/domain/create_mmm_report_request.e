note
 description:"[
		Pinterest REST API
 		Pinterest's REST API
  		The version of the OpenAPI document: 5.14.0
 	    Contact: blah+oapicf@cliffano.com

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class CREATE_MMM_REPORT_REQUEST




feature --Access

    report_name: detachable STRING_32
      -- Name of the Marketing Mix Modeling (MMM) report
    start_date: detachable STRING_32
      -- Metric report start date (UTC). Format: YYYY-MM-DD
    end_date: detachable STRING_32
      -- Metric report end date (UTC). Format: YYYY-MM-DD
    granularity: detachable STRING_32
      -- DAY - metrics are broken down daily.<br> WEEK - metrics are broken down weekly.
    level: detachable STRING_32
      -- Level of the report
    targeting_types: detachable LIST [MMM_REPORTING_TARGETING_TYPE]
      -- List of targeting types
    columns: detachable LIST [MMM_REPORTING_COLUMN]
      -- Metric and entity columns
    countries: detachable LIST [TARGETING_ADVERTISER_COUNTRY]
      -- A List of countries for filtering

feature -- Change Element

    set_report_name (a_name: like report_name)
        -- Set 'report_name' with 'a_name'.
      do
        report_name := a_name
      ensure
        report_name_set: report_name = a_name
      end

    set_start_date (a_name: like start_date)
        -- Set 'start_date' with 'a_name'.
      do
        start_date := a_name
      ensure
        start_date_set: start_date = a_name
      end

    set_end_date (a_name: like end_date)
        -- Set 'end_date' with 'a_name'.
      do
        end_date := a_name
      ensure
        end_date_set: end_date = a_name
      end

    set_granularity (a_name: like granularity)
        -- Set 'granularity' with 'a_name'.
      do
        granularity := a_name
      ensure
        granularity_set: granularity = a_name
      end

    set_level (a_name: like level)
        -- Set 'level' with 'a_name'.
      do
        level := a_name
      ensure
        level_set: level = a_name
      end

    set_targeting_types (a_name: like targeting_types)
        -- Set 'targeting_types' with 'a_name'.
      do
        targeting_types := a_name
      ensure
        targeting_types_set: targeting_types = a_name
      end

    set_columns (a_name: like columns)
        -- Set 'columns' with 'a_name'.
      do
        columns := a_name
      ensure
        columns_set: columns = a_name
      end

    set_countries (a_name: like countries)
        -- Set 'countries' with 'a_name'.
      do
        countries := a_name
      ensure
        countries_set: countries = a_name
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass CREATE_MMM_REPORT_REQUEST%N")
        if attached report_name as l_report_name then
          Result.append ("%Nreport_name:")
          Result.append (l_report_name.out)
          Result.append ("%N")
        end
        if attached start_date as l_start_date then
          Result.append ("%Nstart_date:")
          Result.append (l_start_date.out)
          Result.append ("%N")
        end
        if attached end_date as l_end_date then
          Result.append ("%Nend_date:")
          Result.append (l_end_date.out)
          Result.append ("%N")
        end
        if attached granularity as l_granularity then
          Result.append ("%Ngranularity:")
          Result.append (l_granularity.out)
          Result.append ("%N")
        end
        if attached level as l_level then
          Result.append ("%Nlevel:")
          Result.append (l_level.out)
          Result.append ("%N")
        end
        if attached targeting_types as l_targeting_types then
          across l_targeting_types as ic loop
            Result.append ("%N targeting_types:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached columns as l_columns then
          across l_columns as ic loop
            Result.append ("%N columns:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached countries as l_countries then
          across l_countries as ic loop
            Result.append ("%N countries:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
      end
end

