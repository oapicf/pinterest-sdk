note
 description:"[
		Pinterest REST API
 		Pinterest's REST API
  		The version of the OpenAPI document: 5.14.0
 	    Contact: blah+oapicf@cliffano.com

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class PIN_UPDATE




feature --Access

    alt_text: detachable STRING_32
      -- Pin's alternative text.
    board_id: detachable STRING_32
      -- The id of the board to move the Pin onto.
    board_section_id: detachable STRING_32
      -- <a href=\"https://help.pinterest.com/en/article/create-a-board-section\">Board section</a> ID.
    description: detachable STRING_32
      -- Pin description - 800 characters maximum.
    link: detachable STRING_32
      -- URL viewer is taken to when they click pin.
    title: detachable STRING_32
      -- The native pin title that creators explicitly prefer to display.
    carousel_slots: detachable LIST [PIN_UPDATE_CAROUSEL_SLOTS_INNER]
      -- Carousel Pin slots data.
    var_note: detachable STRING_32
      -- Private note for this Pin. <a href=\"https://help.pinterest.com/en/article/add-notes-to-your-pins\">Learn more</a>.

feature -- Change Element

    set_alt_text (a_name: like alt_text)
        -- Set 'alt_text' with 'a_name'.
      do
        alt_text := a_name
      ensure
        alt_text_set: alt_text = a_name
      end

    set_board_id (a_name: like board_id)
        -- Set 'board_id' with 'a_name'.
      do
        board_id := a_name
      ensure
        board_id_set: board_id = a_name
      end

    set_board_section_id (a_name: like board_section_id)
        -- Set 'board_section_id' with 'a_name'.
      do
        board_section_id := a_name
      ensure
        board_section_id_set: board_section_id = a_name
      end

    set_description (a_name: like description)
        -- Set 'description' with 'a_name'.
      do
        description := a_name
      ensure
        description_set: description = a_name
      end

    set_link (a_name: like link)
        -- Set 'link' with 'a_name'.
      do
        link := a_name
      ensure
        link_set: link = a_name
      end

    set_title (a_name: like title)
        -- Set 'title' with 'a_name'.
      do
        title := a_name
      ensure
        title_set: title = a_name
      end

    set_carousel_slots (a_name: like carousel_slots)
        -- Set 'carousel_slots' with 'a_name'.
      do
        carousel_slots := a_name
      ensure
        carousel_slots_set: carousel_slots = a_name
      end

    set_var_note (a_name: like var_note)
        -- Set 'var_note' with 'a_name'.
      do
        var_note := a_name
      ensure
        var_note_set: var_note = a_name
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass PIN_UPDATE%N")
        if attached alt_text as l_alt_text then
          Result.append ("%Nalt_text:")
          Result.append (l_alt_text.out)
          Result.append ("%N")
        end
        if attached board_id as l_board_id then
          Result.append ("%Nboard_id:")
          Result.append (l_board_id.out)
          Result.append ("%N")
        end
        if attached board_section_id as l_board_section_id then
          Result.append ("%Nboard_section_id:")
          Result.append (l_board_section_id.out)
          Result.append ("%N")
        end
        if attached description as l_description then
          Result.append ("%Ndescription:")
          Result.append (l_description.out)
          Result.append ("%N")
        end
        if attached link as l_link then
          Result.append ("%Nlink:")
          Result.append (l_link.out)
          Result.append ("%N")
        end
        if attached title as l_title then
          Result.append ("%Ntitle:")
          Result.append (l_title.out)
          Result.append ("%N")
        end
        if attached carousel_slots as l_carousel_slots then
          across l_carousel_slots as ic loop
            Result.append ("%N carousel_slots:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached var_note as l_var_note then
          Result.append ("%Nvar_note:")
          Result.append (l_var_note.out)
          Result.append ("%N")
        end
      end
end

