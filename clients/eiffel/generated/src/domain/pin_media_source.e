note
 description:"[
		Pinterest REST API
 		Pinterest's REST API
  		The version of the OpenAPI document: 5.14.0
 	    Contact: blah+oapicf@cliffano.com

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class PIN_MEDIA_SOURCE




feature --Access

    source_type: detachable STRING_32
      
    content_type: detachable STRING_32
      
    data: detachable STRING_32
      
    is_standard: BOOLEAN
      -- Set the parameter to false to create the new simplified Pin instead of the standard pin. Currently the field is only available to a list of beta users.
    url: detachable STRING_32
      
    cover_image_url: detachable STRING_32
      -- Cover image url.
    cover_image_content_type: detachable STRING_32
      -- Content type for cover image Base64.
    cover_image_data: detachable STRING_32
      -- Cover image Base64.
    media_id: detachable STRING_32
      
    items: detachable LIST [PIN_MEDIA_SOURCE_IMAGES_URL_ITEMS_INNER]
      -- Array with image objects.
    index: INTEGER_32
      
    is_affiliate_link: BOOLEAN
      -- This is an affiliate link or sponsored product. The FTC requires disclosure for paid partnerships and affiliate products.

feature -- Change Element

    set_source_type (a_name: like source_type)
        -- Set 'source_type' with 'a_name'.
      do
        source_type := a_name
      ensure
        source_type_set: source_type = a_name
      end

    set_content_type (a_name: like content_type)
        -- Set 'content_type' with 'a_name'.
      do
        content_type := a_name
      ensure
        content_type_set: content_type = a_name
      end

    set_data (a_name: like data)
        -- Set 'data' with 'a_name'.
      do
        data := a_name
      ensure
        data_set: data = a_name
      end

    set_is_standard (a_name: like is_standard)
        -- Set 'is_standard' with 'a_name'.
      do
        is_standard := a_name
      ensure
        is_standard_set: is_standard = a_name
      end

    set_url (a_name: like url)
        -- Set 'url' with 'a_name'.
      do
        url := a_name
      ensure
        url_set: url = a_name
      end

    set_cover_image_url (a_name: like cover_image_url)
        -- Set 'cover_image_url' with 'a_name'.
      do
        cover_image_url := a_name
      ensure
        cover_image_url_set: cover_image_url = a_name
      end

    set_cover_image_content_type (a_name: like cover_image_content_type)
        -- Set 'cover_image_content_type' with 'a_name'.
      do
        cover_image_content_type := a_name
      ensure
        cover_image_content_type_set: cover_image_content_type = a_name
      end

    set_cover_image_data (a_name: like cover_image_data)
        -- Set 'cover_image_data' with 'a_name'.
      do
        cover_image_data := a_name
      ensure
        cover_image_data_set: cover_image_data = a_name
      end

    set_media_id (a_name: like media_id)
        -- Set 'media_id' with 'a_name'.
      do
        media_id := a_name
      ensure
        media_id_set: media_id = a_name
      end

    set_items (a_name: like items)
        -- Set 'items' with 'a_name'.
      do
        items := a_name
      ensure
        items_set: items = a_name
      end

    set_index (a_name: like index)
        -- Set 'index' with 'a_name'.
      do
        index := a_name
      ensure
        index_set: index = a_name
      end

    set_is_affiliate_link (a_name: like is_affiliate_link)
        -- Set 'is_affiliate_link' with 'a_name'.
      do
        is_affiliate_link := a_name
      ensure
        is_affiliate_link_set: is_affiliate_link = a_name
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass PIN_MEDIA_SOURCE%N")
        if attached source_type as l_source_type then
          Result.append ("%Nsource_type:")
          Result.append (l_source_type.out)
          Result.append ("%N")
        end
        if attached content_type as l_content_type then
          Result.append ("%Ncontent_type:")
          Result.append (l_content_type.out)
          Result.append ("%N")
        end
        if attached data as l_data then
          Result.append ("%Ndata:")
          Result.append (l_data.out)
          Result.append ("%N")
        end
        if attached is_standard as l_is_standard then
          Result.append ("%Nis_standard:")
          Result.append (l_is_standard.out)
          Result.append ("%N")
        end
        if attached url as l_url then
          Result.append ("%Nurl:")
          Result.append (l_url.out)
          Result.append ("%N")
        end
        if attached cover_image_url as l_cover_image_url then
          Result.append ("%Ncover_image_url:")
          Result.append (l_cover_image_url.out)
          Result.append ("%N")
        end
        if attached cover_image_content_type as l_cover_image_content_type then
          Result.append ("%Ncover_image_content_type:")
          Result.append (l_cover_image_content_type.out)
          Result.append ("%N")
        end
        if attached cover_image_data as l_cover_image_data then
          Result.append ("%Ncover_image_data:")
          Result.append (l_cover_image_data.out)
          Result.append ("%N")
        end
        if attached media_id as l_media_id then
          Result.append ("%Nmedia_id:")
          Result.append (l_media_id.out)
          Result.append ("%N")
        end
        if attached items as l_items then
          across l_items as ic loop
            Result.append ("%N items:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached index as l_index then
          Result.append ("%Nindex:")
          Result.append (l_index.out)
          Result.append ("%N")
        end
        if attached is_affiliate_link as l_is_affiliate_link then
          Result.append ("%Nis_affiliate_link:")
          Result.append (l_is_affiliate_link.out)
          Result.append ("%N")
        end
      end
end

