note
 description:"[
		Pinterest REST API
 		Pinterest's REST API
  		The version of the OpenAPI document: 5.14.0
 	    Contact: blah+oapicf@cliffano.com

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class CONVERSION_EVENTS_USER_DATA




feature --Access

    ph: detachable LIST [STRING_32]
      -- Sha256 hashes of user's phone numbers, only digits with country code, area code, and number. Remove any symbols, letters, spaces and leading zeros. We highly recommend this on checkout events at least. It may improve reporting performance such as ROAS/CPA. The string should be in the UTF-8 format.
    ge: detachable LIST [STRING_32]
      -- Sha256 hashes of user's gender, in lowercase. Either \"f\" or \"m\" or \"n\" for non-binary gender. The string should be in the UTF-8 format.
    db: detachable LIST [STRING_32]
      -- Sha256 hashes of user's date of birthday, given as year, month, and day. The string should be in the UTF-8 format.
    ln: detachable LIST [STRING_32]
      -- Sha256 hashes of user's last name, in lowercase. We highly recommend this on checkout events at least. It may improve reporting performance such as ROAS/CPA. The string should be in the UTF-8 format.
    fn: detachable LIST [STRING_32]
      -- Sha256 hashes of user's first name, in lowercase. We highly recommend this on checkout events at least. It may improve reporting performance such as ROAS/CPA. The string should be in the UTF-8 format.
    ct: detachable LIST [STRING_32]
      -- Sha256 hashes of user's city, in lowercase, and without spaces or punctuation. User residency city (mostly billing). The string should be in the UTF-8 format.
    st: detachable LIST [STRING_32]
      -- Sha256 hashes of user's state, given as a two-letter code in lowercase. User residency state (mostly billing). The string should be in the UTF-8 format.
    zp: detachable LIST [STRING_32]
      -- Sha256 hashes of user's zipcode, only digits. User residency zipcode (mostly billing). The string should be in the UTF-8 format.
    country: detachable LIST [STRING_32]
      -- Sha256 hashes of two-character ISO-3166 country code indicating the user's country, in lowercase. The string should be in the UTF-8 format.
    external_id: detachable LIST [STRING_32]
      -- Sha256 hashes of the unique id from the advertiser that identifies a user in their space, e.g. user id, loyalty id, etc. We highly recommend this on all events. It may improve reporting performance such as ROAS/CPA. The string should be in the UTF-8 format.
    click_id: detachable STRING_32
      -- The unique identifier stored in _epik cookie on your domain or &epik= query parameter in the URL. We highly recommend this on checkout events at least. It may improve reporting performance such as ROAS/CPA.
    partner_id: detachable STRING_32
      -- A unique identifier of visitors' information defined by third party partners. e.g RampID
    em: detachable LIST [STRING_32]
      -- Sha256 hashes of lowercase version of user's email addresses. Used for matching. We highly recommend this on checkout events at least. It may improve reporting performance such as ROAS/CPA. The string should be in the UTF-8 format.
    hashed_maids: detachable LIST [STRING_32]
      -- Sha256 hashes of user's \"Google Advertising IDs\" (GAIDs) or \"Apple's Identifier for Advertisers\" (IDFAs). Used for matching. We highly recommend this on checkout events at least. It may improve reporting performance such as ROAS/CPA. The string should be in the UTF-8 format.
    client_ip_address: detachable STRING_32
      -- The user's IP address, which can be either in IPv4 or IPv6 format. Used for matching. We highly recommend this for all events. It may improve reporting performance such as ROAS/CPA.
    client_user_agent: detachable STRING_32
      -- The user agent string of the user's web browser. We highly recommend this for all events. It may improve reporting performance such as ROAS/CPA.

feature -- Change Element

    set_ph (a_name: like ph)
        -- Set 'ph' with 'a_name'.
      do
        ph := a_name
      ensure
        ph_set: ph = a_name
      end

    set_ge (a_name: like ge)
        -- Set 'ge' with 'a_name'.
      do
        ge := a_name
      ensure
        ge_set: ge = a_name
      end

    set_db (a_name: like db)
        -- Set 'db' with 'a_name'.
      do
        db := a_name
      ensure
        db_set: db = a_name
      end

    set_ln (a_name: like ln)
        -- Set 'ln' with 'a_name'.
      do
        ln := a_name
      ensure
        ln_set: ln = a_name
      end

    set_fn (a_name: like fn)
        -- Set 'fn' with 'a_name'.
      do
        fn := a_name
      ensure
        fn_set: fn = a_name
      end

    set_ct (a_name: like ct)
        -- Set 'ct' with 'a_name'.
      do
        ct := a_name
      ensure
        ct_set: ct = a_name
      end

    set_st (a_name: like st)
        -- Set 'st' with 'a_name'.
      do
        st := a_name
      ensure
        st_set: st = a_name
      end

    set_zp (a_name: like zp)
        -- Set 'zp' with 'a_name'.
      do
        zp := a_name
      ensure
        zp_set: zp = a_name
      end

    set_country (a_name: like country)
        -- Set 'country' with 'a_name'.
      do
        country := a_name
      ensure
        country_set: country = a_name
      end

    set_external_id (a_name: like external_id)
        -- Set 'external_id' with 'a_name'.
      do
        external_id := a_name
      ensure
        external_id_set: external_id = a_name
      end

    set_click_id (a_name: like click_id)
        -- Set 'click_id' with 'a_name'.
      do
        click_id := a_name
      ensure
        click_id_set: click_id = a_name
      end

    set_partner_id (a_name: like partner_id)
        -- Set 'partner_id' with 'a_name'.
      do
        partner_id := a_name
      ensure
        partner_id_set: partner_id = a_name
      end

    set_em (a_name: like em)
        -- Set 'em' with 'a_name'.
      do
        em := a_name
      ensure
        em_set: em = a_name
      end

    set_hashed_maids (a_name: like hashed_maids)
        -- Set 'hashed_maids' with 'a_name'.
      do
        hashed_maids := a_name
      ensure
        hashed_maids_set: hashed_maids = a_name
      end

    set_client_ip_address (a_name: like client_ip_address)
        -- Set 'client_ip_address' with 'a_name'.
      do
        client_ip_address := a_name
      ensure
        client_ip_address_set: client_ip_address = a_name
      end

    set_client_user_agent (a_name: like client_user_agent)
        -- Set 'client_user_agent' with 'a_name'.
      do
        client_user_agent := a_name
      ensure
        client_user_agent_set: client_user_agent = a_name
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass CONVERSION_EVENTS_USER_DATA%N")
        if attached ph as l_ph then
          across l_ph as ic loop
            Result.append ("%N ph:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached ge as l_ge then
          across l_ge as ic loop
            Result.append ("%N ge:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached db as l_db then
          across l_db as ic loop
            Result.append ("%N db:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached ln as l_ln then
          across l_ln as ic loop
            Result.append ("%N ln:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached fn as l_fn then
          across l_fn as ic loop
            Result.append ("%N fn:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached ct as l_ct then
          across l_ct as ic loop
            Result.append ("%N ct:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached st as l_st then
          across l_st as ic loop
            Result.append ("%N st:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached zp as l_zp then
          across l_zp as ic loop
            Result.append ("%N zp:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached country as l_country then
          across l_country as ic loop
            Result.append ("%N country:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached external_id as l_external_id then
          across l_external_id as ic loop
            Result.append ("%N external_id:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached click_id as l_click_id then
          Result.append ("%Nclick_id:")
          Result.append (l_click_id.out)
          Result.append ("%N")
        end
        if attached partner_id as l_partner_id then
          Result.append ("%Npartner_id:")
          Result.append (l_partner_id.out)
          Result.append ("%N")
        end
        if attached em as l_em then
          across l_em as ic loop
            Result.append ("%N em:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached hashed_maids as l_hashed_maids then
          across l_hashed_maids as ic loop
            Result.append ("%N hashed_maids:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached client_ip_address as l_client_ip_address then
          Result.append ("%Nclient_ip_address:")
          Result.append (l_client_ip_address.out)
          Result.append ("%N")
        end
        if attached client_user_agent as l_client_user_agent then
          Result.append ("%Nclient_user_agent:")
          Result.append (l_client_user_agent.out)
          Result.append ("%N")
        end
      end
end

