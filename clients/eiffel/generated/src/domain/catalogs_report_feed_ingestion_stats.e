note
 description:"[
		Pinterest REST API
 		Pinterest's REST API
  		The version of the OpenAPI document: 5.14.0
 	    Contact: blah+oapicf@cliffano.com

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class CATALOGS_REPORT_FEED_INGESTION_STATS




feature --Access

    report_type: detachable STRING_32
      
    catalog_id: detachable STRING_32
      -- ID of the catalog entity.
    code: INTEGER_32
      -- The event code that a diagnostics aggregated number references
    code_label: detachable STRING_32
      -- A human-friendly label for the event code (e.g, 'AVAILABILITY_INVALID')
    message: detachable STRING_32
      -- Title message describing the diagnostic issue
    occurrences: INTEGER_32
      -- Number of occurrences of the issue
    severity: detachable STRING_32
      -- An ERROR means that items have been dropped, while a WARN denotes that items have been ingested despite an issue

feature -- Change Element

    set_report_type (a_name: like report_type)
        -- Set 'report_type' with 'a_name'.
      do
        report_type := a_name
      ensure
        report_type_set: report_type = a_name
      end

    set_catalog_id (a_name: like catalog_id)
        -- Set 'catalog_id' with 'a_name'.
      do
        catalog_id := a_name
      ensure
        catalog_id_set: catalog_id = a_name
      end

    set_code (a_name: like code)
        -- Set 'code' with 'a_name'.
      do
        code := a_name
      ensure
        code_set: code = a_name
      end

    set_code_label (a_name: like code_label)
        -- Set 'code_label' with 'a_name'.
      do
        code_label := a_name
      ensure
        code_label_set: code_label = a_name
      end

    set_message (a_name: like message)
        -- Set 'message' with 'a_name'.
      do
        message := a_name
      ensure
        message_set: message = a_name
      end

    set_occurrences (a_name: like occurrences)
        -- Set 'occurrences' with 'a_name'.
      do
        occurrences := a_name
      ensure
        occurrences_set: occurrences = a_name
      end

    set_severity (a_name: like severity)
        -- Set 'severity' with 'a_name'.
      do
        severity := a_name
      ensure
        severity_set: severity = a_name
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass CATALOGS_REPORT_FEED_INGESTION_STATS%N")
        if attached report_type as l_report_type then
          Result.append ("%Nreport_type:")
          Result.append (l_report_type.out)
          Result.append ("%N")
        end
        if attached catalog_id as l_catalog_id then
          Result.append ("%Ncatalog_id:")
          Result.append (l_catalog_id.out)
          Result.append ("%N")
        end
        if attached code as l_code then
          Result.append ("%Ncode:")
          Result.append (l_code.out)
          Result.append ("%N")
        end
        if attached code_label as l_code_label then
          Result.append ("%Ncode_label:")
          Result.append (l_code_label.out)
          Result.append ("%N")
        end
        if attached message as l_message then
          Result.append ("%Nmessage:")
          Result.append (l_message.out)
          Result.append ("%N")
        end
        if attached occurrences as l_occurrences then
          Result.append ("%Noccurrences:")
          Result.append (l_occurrences.out)
          Result.append ("%N")
        end
        if attached severity as l_severity then
          Result.append ("%Nseverity:")
          Result.append (l_severity.out)
          Result.append ("%N")
        end
      end
end

