note
 description:"[
		Pinterest REST API
 		Pinterest's REST API
  		The version of the OpenAPI document: 5.14.0
 	    Contact: blah+oapicf@cliffano.com

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class AUDIENCE_RULE




feature --Access

    country: detachable STRING_32
      -- Valid countries include: \"US\", \"CA\", and \"GB\".
    customer_list_id: detachable STRING_32
      -- Customer list ID. For CUSTOMER_LIST `audience_type`.
    engagement_domain: detachable LIST [STRING_32]
      -- The audience account's verified domain. **Required** for ENGAGEMENT `audience_type`.
    engagement_type: detachable STRING_32
      -- Engagement type enum. Optional for ENGAGEMENT `audience_type`. Supported values are `click`, `save`, `closeup`, `comment` and `like`. All engagements are included if this field is not set. 
    event: detachable STRING_32
      -- A Pinterest tag event. Optional for VISITOR `audience_type`. Possible values are `pagevisit`, `signup`, `checkout`, `viewcategory`, `search`, `addtocart`, `watchvideo`, `lead`, and `custom`. This field also accepts a partner-defined Pinterest tag event.
    event_data: detachable PINTEREST_TAG_EVENT_DATA
      
    percentage: INTEGER_32
      -- Percentage should be 1-10. The targeted audience should be this % size across Pinterest.
    pin_id: detachable LIST [STRING_32]
      -- IDs of engaged organic pins. Optional for ENGAGEMENT `audience_type`. For example, \"pin_id:\": [\"34567\"]
    prefill: BOOLEAN
      -- Optional for VISITOR `audience_type`. If `true`, the specified rule on existing engagement data is applied to pre-populate the audience. If `false`, the audience is empty at creation time. The default is `true`.
    retention_days: INTEGER_32
      -- Number of days a Pinterest user remains in the audience. Optional for ENGAGEMENT and VISITOR `audience_type`. Accepted range is 1-540. Defaults to 180 if not specified.
    seed_id: detachable LIST [STRING_32]
      -- Audience ID(s). For ACTALIKE `audience_type`. 
    url: detachable LIST [STRING_32]
      -- Optional for ENGAGEMENT or VISITOR `audience_type`. For ENGAGEMENT, it is the engaged pin's URL. For VISITOR, you can use it as a string or a {operator: value} object for filtering visitors based on conversion tag event URLs. Supported operators are [ =, !=, contains, not_contains].<br>Example 1:  \"url\": \"http://www.myonlinestore123.com/view_item/shoe\"<br>Example 2: \"url\": {\"contains\": \"/view_item/shoe\"}
    visitor_source_id: detachable STRING_32
      -- The conversion tag ID, or the Pinterest tag ID, that you use on your website. For VISITOR `audience_type`.
    event_source: detachable ANY
      -- Optional for VISITOR. You can use it as a {'=': [value]}. Supported values are: web, mobile, offline
    ingestion_source: detachable ANY
      -- Optional for VISITOR. You can use it as a {'=': [value]}. Supported values are: tag, mmp, file_upload, conversions_api
    engager_type: INTEGER_32
      -- Optional for ENGAGEMENT. Engager type value should be 1-2.
    campaign_id: detachable LIST [STRING_32]
      -- Campaign ID for engagement audience filter.
    ad_id: detachable LIST [STRING_32]
      -- Ad ID for engagement audience filter.
    objective_type: detachable LIST [OBJECTIVE_TYPE]
      -- Objective for engagement audience filter.
    ad_account_id: detachable STRING_32
      -- Ad account ID.

feature -- Change Element

    set_country (a_name: like country)
        -- Set 'country' with 'a_name'.
      do
        country := a_name
      ensure
        country_set: country = a_name
      end

    set_customer_list_id (a_name: like customer_list_id)
        -- Set 'customer_list_id' with 'a_name'.
      do
        customer_list_id := a_name
      ensure
        customer_list_id_set: customer_list_id = a_name
      end

    set_engagement_domain (a_name: like engagement_domain)
        -- Set 'engagement_domain' with 'a_name'.
      do
        engagement_domain := a_name
      ensure
        engagement_domain_set: engagement_domain = a_name
      end

    set_engagement_type (a_name: like engagement_type)
        -- Set 'engagement_type' with 'a_name'.
      do
        engagement_type := a_name
      ensure
        engagement_type_set: engagement_type = a_name
      end

    set_event (a_name: like event)
        -- Set 'event' with 'a_name'.
      do
        event := a_name
      ensure
        event_set: event = a_name
      end

    set_event_data (a_name: like event_data)
        -- Set 'event_data' with 'a_name'.
      do
        event_data := a_name
      ensure
        event_data_set: event_data = a_name
      end

    set_percentage (a_name: like percentage)
        -- Set 'percentage' with 'a_name'.
      do
        percentage := a_name
      ensure
        percentage_set: percentage = a_name
      end

    set_pin_id (a_name: like pin_id)
        -- Set 'pin_id' with 'a_name'.
      do
        pin_id := a_name
      ensure
        pin_id_set: pin_id = a_name
      end

    set_prefill (a_name: like prefill)
        -- Set 'prefill' with 'a_name'.
      do
        prefill := a_name
      ensure
        prefill_set: prefill = a_name
      end

    set_retention_days (a_name: like retention_days)
        -- Set 'retention_days' with 'a_name'.
      do
        retention_days := a_name
      ensure
        retention_days_set: retention_days = a_name
      end

    set_seed_id (a_name: like seed_id)
        -- Set 'seed_id' with 'a_name'.
      do
        seed_id := a_name
      ensure
        seed_id_set: seed_id = a_name
      end

    set_url (a_name: like url)
        -- Set 'url' with 'a_name'.
      do
        url := a_name
      ensure
        url_set: url = a_name
      end

    set_visitor_source_id (a_name: like visitor_source_id)
        -- Set 'visitor_source_id' with 'a_name'.
      do
        visitor_source_id := a_name
      ensure
        visitor_source_id_set: visitor_source_id = a_name
      end

    set_event_source (a_name: like event_source)
        -- Set 'event_source' with 'a_name'.
      do
        event_source := a_name
      ensure
        event_source_set: event_source = a_name
      end

    set_ingestion_source (a_name: like ingestion_source)
        -- Set 'ingestion_source' with 'a_name'.
      do
        ingestion_source := a_name
      ensure
        ingestion_source_set: ingestion_source = a_name
      end

    set_engager_type (a_name: like engager_type)
        -- Set 'engager_type' with 'a_name'.
      do
        engager_type := a_name
      ensure
        engager_type_set: engager_type = a_name
      end

    set_campaign_id (a_name: like campaign_id)
        -- Set 'campaign_id' with 'a_name'.
      do
        campaign_id := a_name
      ensure
        campaign_id_set: campaign_id = a_name
      end

    set_ad_id (a_name: like ad_id)
        -- Set 'ad_id' with 'a_name'.
      do
        ad_id := a_name
      ensure
        ad_id_set: ad_id = a_name
      end

    set_objective_type (a_name: like objective_type)
        -- Set 'objective_type' with 'a_name'.
      do
        objective_type := a_name
      ensure
        objective_type_set: objective_type = a_name
      end

    set_ad_account_id (a_name: like ad_account_id)
        -- Set 'ad_account_id' with 'a_name'.
      do
        ad_account_id := a_name
      ensure
        ad_account_id_set: ad_account_id = a_name
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass AUDIENCE_RULE%N")
        if attached country as l_country then
          Result.append ("%Ncountry:")
          Result.append (l_country.out)
          Result.append ("%N")
        end
        if attached customer_list_id as l_customer_list_id then
          Result.append ("%Ncustomer_list_id:")
          Result.append (l_customer_list_id.out)
          Result.append ("%N")
        end
        if attached engagement_domain as l_engagement_domain then
          across l_engagement_domain as ic loop
            Result.append ("%N engagement_domain:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached engagement_type as l_engagement_type then
          Result.append ("%Nengagement_type:")
          Result.append (l_engagement_type.out)
          Result.append ("%N")
        end
        if attached event as l_event then
          Result.append ("%Nevent:")
          Result.append (l_event.out)
          Result.append ("%N")
        end
        if attached event_data as l_event_data then
          Result.append ("%Nevent_data:")
          Result.append (l_event_data.out)
          Result.append ("%N")
        end
        if attached percentage as l_percentage then
          Result.append ("%Npercentage:")
          Result.append (l_percentage.out)
          Result.append ("%N")
        end
        if attached pin_id as l_pin_id then
          across l_pin_id as ic loop
            Result.append ("%N pin_id:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached prefill as l_prefill then
          Result.append ("%Nprefill:")
          Result.append (l_prefill.out)
          Result.append ("%N")
        end
        if attached retention_days as l_retention_days then
          Result.append ("%Nretention_days:")
          Result.append (l_retention_days.out)
          Result.append ("%N")
        end
        if attached seed_id as l_seed_id then
          across l_seed_id as ic loop
            Result.append ("%N seed_id:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached url as l_url then
          across l_url as ic loop
            Result.append ("%N url:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached visitor_source_id as l_visitor_source_id then
          Result.append ("%Nvisitor_source_id:")
          Result.append (l_visitor_source_id.out)
          Result.append ("%N")
        end
        if attached event_source as l_event_source then
          Result.append ("%Nevent_source:")
          Result.append (l_event_source.out)
          Result.append ("%N")
        end
        if attached ingestion_source as l_ingestion_source then
          Result.append ("%Ningestion_source:")
          Result.append (l_ingestion_source.out)
          Result.append ("%N")
        end
        if attached engager_type as l_engager_type then
          Result.append ("%Nengager_type:")
          Result.append (l_engager_type.out)
          Result.append ("%N")
        end
        if attached campaign_id as l_campaign_id then
          across l_campaign_id as ic loop
            Result.append ("%N campaign_id:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached ad_id as l_ad_id then
          across l_ad_id as ic loop
            Result.append ("%N ad_id:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached objective_type as l_objective_type then
          across l_objective_type as ic loop
            Result.append ("%N objective_type:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached ad_account_id as l_ad_account_id then
          Result.append ("%Nad_account_id:")
          Result.append (l_ad_account_id.out)
          Result.append ("%N")
        end
      end
end

