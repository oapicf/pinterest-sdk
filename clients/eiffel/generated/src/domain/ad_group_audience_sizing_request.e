note
 description:"[
		Pinterest REST API
 		Pinterest's REST API
  		The version of the OpenAPI document: 5.14.0
 	    Contact: blah+oapicf@cliffano.com

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class AD_GROUP_AUDIENCE_SIZING_REQUEST




feature --Access

    auto_targeting_enabled: BOOLEAN
      -- Enable auto-targeting for ad group. Also known as <a href=\"https://help.pinterest.com/en/business/article/expanded-targeting\" target=\"_blank\">\"expanded targeting\"</a>.
    placement_group: detachable PLACEMENT_GROUP_TYPE
      -- <a href=\"/docs/redoc/#section/Placement-group\">Placement group</a>.
    creative_types: detachable LIST [STRING_32]
      -- Pin creative types filter. </p><strong>Note:</strong> SHOP_THE_PIN has been deprecated. Please use COLLECTION instead.
    targeting_spec: detachable TARGETING_SPEC
      
    product_group_ids: detachable LIST [STRING_32]
      -- Targeted product group IDs. </p><strong>Note:</strong> This can only be combined with shopping/catalog sales campaigns. For more information, <a href=\"https://help.pinterest.com/en/business/article/shopping-ads#section-14571\" target=\"_blank\">click here</a>. SHOPPING_RETARGETING must be included in targeting_spec object or this field will be ignored.
    keywords: detachable LIST [AD_GROUP_AUDIENCE_SIZING_REQUEST_KEYWORDS_INNER]
      -- Array of keyword objects. If the keywords field is missing, all keywords will be targeted.

feature -- Change Element

    set_auto_targeting_enabled (a_name: like auto_targeting_enabled)
        -- Set 'auto_targeting_enabled' with 'a_name'.
      do
        auto_targeting_enabled := a_name
      ensure
        auto_targeting_enabled_set: auto_targeting_enabled = a_name
      end

    set_placement_group (a_name: like placement_group)
        -- Set 'placement_group' with 'a_name'.
      do
        placement_group := a_name
      ensure
        placement_group_set: placement_group = a_name
      end

    set_creative_types (a_name: like creative_types)
        -- Set 'creative_types' with 'a_name'.
      do
        creative_types := a_name
      ensure
        creative_types_set: creative_types = a_name
      end

    set_targeting_spec (a_name: like targeting_spec)
        -- Set 'targeting_spec' with 'a_name'.
      do
        targeting_spec := a_name
      ensure
        targeting_spec_set: targeting_spec = a_name
      end

    set_product_group_ids (a_name: like product_group_ids)
        -- Set 'product_group_ids' with 'a_name'.
      do
        product_group_ids := a_name
      ensure
        product_group_ids_set: product_group_ids = a_name
      end

    set_keywords (a_name: like keywords)
        -- Set 'keywords' with 'a_name'.
      do
        keywords := a_name
      ensure
        keywords_set: keywords = a_name
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass AD_GROUP_AUDIENCE_SIZING_REQUEST%N")
        if attached auto_targeting_enabled as l_auto_targeting_enabled then
          Result.append ("%Nauto_targeting_enabled:")
          Result.append (l_auto_targeting_enabled.out)
          Result.append ("%N")
        end
        if attached placement_group as l_placement_group then
          Result.append ("%Nplacement_group:")
          Result.append (l_placement_group.out)
          Result.append ("%N")
        end
        if attached creative_types as l_creative_types then
          across l_creative_types as ic loop
            Result.append ("%N creative_types:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached targeting_spec as l_targeting_spec then
          Result.append ("%Ntargeting_spec:")
          Result.append (l_targeting_spec.out)
          Result.append ("%N")
        end
        if attached product_group_ids as l_product_group_ids then
          across l_product_group_ids as ic loop
            Result.append ("%N product_group_ids:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached keywords as l_keywords then
          across l_keywords as ic loop
            Result.append ("%N keywords:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
      end
end

