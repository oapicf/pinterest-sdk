note
 description:"[
		Pinterest REST API
 		Pinterest's REST API
  		The version of the OpenAPI document: 5.14.0
 	    Contact: blah+oapicf@cliffano.com

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"

class
	BUSINESSACCESSINVITE_API

inherit

    API_I


feature -- API Access


	asset_access_requests_create (business_id: STRING_32; create_asset_access_request_body: CREATE_ASSET_ACCESS_REQUEST_BODY): detachable CREATE_ASSET_ACCESS_REQUEST_RESPONSE
			-- Create a request to access an existing partner&#39;s assets.
			-- Create a request to access an existing partner&#39;s assets with the specified permissions. The request will be sent to the partner for approval. The assets that can be requested are ad accounts and profiles.
			-- 
			-- argument: business_id Unique identifier of the requesting business. (required)
			-- 
			-- argument: create_asset_access_request_body  (required)
			-- 
			-- 
			-- Result CREATE_ASSET_ACCESS_REQUEST_RESPONSE
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(create_asset_access_request_body)
			l_path := "/businesses/{business_id}/requests/assets/access"
			l_path.replace_substring_all ("{"+"business_id"+"}", api_client.url_encode (business_id.out))


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<"application/json">>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"pinterest_oauth2">>)
			l_response := api_client.call_api (l_path, "Post", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { CREATE_ASSET_ACCESS_REQUEST_RESPONSE } l_response.data ({ CREATE_ASSET_ACCESS_REQUEST_RESPONSE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	cancel_invites_or_requests (business_id: STRING_32; cancel_invites_body: CANCEL_INVITES_BODY): detachable DELETE_INVITES_RESULTS_RESPONSE_ARRAY
			-- Cancel invites/requests
			-- Cancel membership/partnership invites and/or requests.
			-- 
			-- argument: business_id Business id (required)
			-- 
			-- argument: cancel_invites_body A list with invite ids (required)
			-- 
			-- 
			-- Result DELETE_INVITES_RESULTS_RESPONSE_ARRAY
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(cancel_invites_body)
			l_path := "/businesses/{business_id}/invites"
			l_path.replace_substring_all ("{"+"business_id"+"}", api_client.url_encode (business_id.out))


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<"application/json">>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"pinterest_oauth2">>)
			l_response := api_client.call_api (l_path, "Delete", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { DELETE_INVITES_RESULTS_RESPONSE_ARRAY } l_response.data ({ DELETE_INVITES_RESULTS_RESPONSE_ARRAY }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	create_asset_invites (business_id: STRING_32; create_asset_invites_request: CREATE_ASSET_INVITES_REQUEST): detachable UPDATE_INVITES_RESULTS_RESPONSE_ARRAY
			-- Update invite/request with an asset permission
			-- Assign asset permissions information to an existing invite/request. Can be used to: - Request access to a partner&#39;s asset. Note: This is only for when no existing partnership exists. If an existing   partnership exists, use \&quot;Create a request to access an existing partner&#39;s assets\&quot; to request access to your   partner&#39;s assets.     - invite_type&#x3D;\&quot;PARTNER_REQUEST\&quot; - Invite a partner to access your business assets. Note: This is only for when there is no existing partnership.   If there is an existing partnership, use \&quot;Assign/Update partner asset permissions\&quot; to assign a partner access to   new assets.     - invite_type&#x3D;\&quot;PARTNER_INVITE\&quot; - Invite a member to access your business assets. Note: This is only for when there is no existing membership.   If there is an existing membership, use \&quot;Assign/Update member asset permissions\&quot; to assign a member access to new   assets.     - invite_type&#x3D;\&quot;MEMBER_INVITE\&quot;  To learn more about permission levels, visit https://help.pinterest.com/en/business/article/business-manager-overview.
			-- 
			-- argument: business_id Unique identifier of the requesting business. (required)
			-- 
			-- argument: create_asset_invites_request A list of invites/requests together with the asset permissions to be assigned to the invite/request.  (required)
			-- 
			-- 
			-- Result UPDATE_INVITES_RESULTS_RESPONSE_ARRAY
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(create_asset_invites_request)
			l_path := "/businesses/{business_id}/invites/assets/access"
			l_path.replace_substring_all ("{"+"business_id"+"}", api_client.url_encode (business_id.out))


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<"application/json">>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"pinterest_oauth2">>)
			l_response := api_client.call_api (l_path, "Post", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { UPDATE_INVITES_RESULTS_RESPONSE_ARRAY } l_response.data ({ UPDATE_INVITES_RESULTS_RESPONSE_ARRAY }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	create_membership_or_partnership_invites (business_id: STRING_32; create_membership_or_partnership_invites_body: CREATE_MEMBERSHIP_OR_PARTNERSHIP_INVITES_BODY): detachable CREATE_INVITES_RESULTS_RESPONSE_ARRAY
			-- Create invites or requests
			-- Create batch invites or requests. Can create batch invites or requests as described below. - Invite members to join the business. This would required specifying the following:     - invite_type&#x3D;\&quot;MEMBER_INVITE\&quot;     - business_role&#x3D;\&quot;EMPLOYEE\&quot; OR business_role&#x3D;\&quot;BIZ_ADMIN\&quot; (To learn more about business roles, visit     https://help.pinterest.com/en/business/article/profile-permissions-in-business-access.)     - members - Invite partners to access your business assets. This would require specifying the following:     - invite_type&#x3D;\&quot;PARTNER_INVITE\&quot;     - business_role&#x3D;\&quot;PARTNER\&quot;     - partners - Request to be a partner so you can access their assets. This would require specifying the following:     - invite_type&#x3D;\&quot;PARTNER_REQUEST\&quot;     - business_role&#x3D;\&quot;PARTNER\&quot;     - partners
			-- 
			-- argument: business_id Business id (required)
			-- 
			-- argument: create_membership_or_partnership_invites_body An object with the properties: invite_type, partners, members, business_role (required)
			-- 
			-- 
			-- Result CREATE_INVITES_RESULTS_RESPONSE_ARRAY
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(create_membership_or_partnership_invites_body)
			l_path := "/businesses/{business_id}/invites"
			l_path.replace_substring_all ("{"+"business_id"+"}", api_client.url_encode (business_id.out))


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<"application/json">>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"pinterest_oauth2">>)
			l_response := api_client.call_api (l_path, "Post", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { CREATE_INVITES_RESULTS_RESPONSE_ARRAY } l_response.data ({ CREATE_INVITES_RESULTS_RESPONSE_ARRAY }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	invites (business_id: STRING_32; is_member: BOOLEAN; invite_status: detachable LIST [STRING_32]; invite_type: detachable INVITE_TYPE; bookmark: STRING_32; page_size: INTEGER_32): detachable GET_INVITES_200_RESPONSE
			-- Get invites/requests
			-- Get the membership/partnership invites and/or requests for the authorized user.
			-- 
			-- argument: business_id Unique identifier of the requesting business. (required)
			-- 
			-- argument: is_member A boolean field to indicate whether the invite is to create a partnership or a membership. (optional, default to true)
			-- 
			-- argument: invite_status A list of invite statuses to filter invites by. Only invites whose status is in the provided statuses will be returned. (optional, default to null)
			-- 
			-- argument: invite_type Invite type to filter invites by. Only invites of the specified type will be returned. (optional, default to null)
			-- 
			-- argument: bookmark Cursor used to fetch the next page of items (optional, default to null)
			-- 
			-- argument: page_size Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
			-- 
			-- 
			-- Result GET_INVITES_200_RESPONSE
		require
			page_size_is_less_or_equal_than: page_size <= 250
     		page_size_is_greater_or_equal_than: page_size >= 1
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/businesses/{business_id}/invites"
			l_path.replace_substring_all ("{"+"business_id"+"}", api_client.url_encode (business_id.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "is_member", is_member));
			l_request.fill_query_params(api_client.parameter_to_tuple("multi", "invite_status", invite_status));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "invite_type", invite_type));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "bookmark", bookmark));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "page_size", page_size));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"pinterest_oauth2">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { GET_INVITES_200_RESPONSE } l_response.data ({ GET_INVITES_200_RESPONSE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	respond_business_access_invites (auth_respond_invites_body: AUTH_RESPOND_INVITES_BODY): detachable RESPOND_TO_INVITES_RESPONSE_ARRAY
			-- Accept or decline an invite/request
			-- Accept or decline invites or requests.
			-- 
			-- argument: auth_respond_invites_body  (required)
			-- 
			-- 
			-- Result RESPOND_TO_INVITES_RESPONSE_ARRAY
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(auth_respond_invites_body)
			l_path := "/businesses/invites"


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<"application/json">>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"pinterest_oauth2">>)
			l_response := api_client.call_api (l_path, "Patch", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { RESPOND_TO_INVITES_RESPONSE_ARRAY } l_response.data ({ RESPOND_TO_INVITES_RESPONSE_ARRAY }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end


end
