note
 description:"[
		Pinterest REST API
 		Pinterest's REST API
  		The version of the OpenAPI document: 5.14.0
 	    Contact: blah+oapicf@cliffano.com

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"

class
	BUSINESSACCESSRELATIONSHIPS_API

inherit

    API_I


feature -- API Access


	business_employers (page_size: INTEGER_32; bookmark: STRING_32): detachable GET_BUSINESS_EMPLOYERS_200_RESPONSE
			-- List business employers for user
			-- Get all of the viewing user&#39;s business employers.
			-- 
			-- argument: page_size Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
			-- 
			-- argument: bookmark Cursor used to fetch the next page of items (optional, default to null)
			-- 
			-- 
			-- Result GET_BUSINESS_EMPLOYERS_200_RESPONSE
		require
			page_size_is_less_or_equal_than: page_size <= 250
     		page_size_is_greater_or_equal_than: page_size >= 1
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/businesses/employers"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "page_size", page_size));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "bookmark", bookmark));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"pinterest_oauth2">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { GET_BUSINESS_EMPLOYERS_200_RESPONSE } l_response.data ({ GET_BUSINESS_EMPLOYERS_200_RESPONSE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	business_members (business_id: STRING_32; assets_summary: BOOLEAN; business_roles: detachable LIST [MEMBER_BUSINESS_ROLE]; member_ids: STRING_32; start_index: INTEGER_32; bookmark: STRING_32; page_size: INTEGER_32): detachable GET_BUSINESS_MEMBERS_200_RESPONSE
			-- Get business members
			-- Get all members of the specified business. The return response will include the member&#39;s business_role and assets they have access to if assets_summary&#x3D;TRUE
			-- 
			-- argument: business_id Unique identifier of the requesting business. (required)
			-- 
			-- argument: assets_summary Include assets summary in the response if this is true.  The assets summary returns a dictionary representing a summary of the assets for the business user ID, with information like the ad accounts and profiles the user has permissions for and what those permissions are (optional, default to false)
			-- 
			-- argument: business_roles A list of business roles to filter the members by. Only members whose roles are in the specified roles will be returned. (optional, default to null)
			-- 
			-- argument: member_ids A list of business members ids separated by comma. (optional, default to null)
			-- 
			-- argument: start_index An index to start fetching the results from. Only the results starting from this index will be returned. (optional, default to 0)
			-- 
			-- argument: bookmark Cursor used to fetch the next page of items (optional, default to null)
			-- 
			-- argument: page_size Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
			-- 
			-- 
			-- Result GET_BUSINESS_MEMBERS_200_RESPONSE
		require
     		start_index_is_greater_or_equal_than: start_index >= 0
			page_size_is_less_or_equal_than: page_size <= 250
     		page_size_is_greater_or_equal_than: page_size >= 1
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/businesses/{business_id}/members"
			l_path.replace_substring_all ("{"+"business_id"+"}", api_client.url_encode (business_id.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "assets_summary", assets_summary));
			l_request.fill_query_params(api_client.parameter_to_tuple("multi", "business_roles", business_roles));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "member_ids", member_ids));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "start_index", start_index));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "bookmark", bookmark));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "page_size", page_size));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"pinterest_oauth2">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { GET_BUSINESS_MEMBERS_200_RESPONSE } l_response.data ({ GET_BUSINESS_MEMBERS_200_RESPONSE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	business_partners (business_id: STRING_32; assets_summary: BOOLEAN; partner_type: detachable PARTNER_TYPE; partner_ids: STRING_32; start_index: INTEGER_32; page_size: INTEGER_32; bookmark: STRING_32): detachable GET_BUSINESS_PARTNERS_200_RESPONSE
			-- Get business partners
			-- Get all partners of the specified business.  If the assets_summary&#x3D;TRUE and: - partner_type&#x3D;INTERNAL, the business assets returned are your business assets the partner has access to. - partner_type&#x3D;EXTERNAL, the business assets returned are your partner&#39;s business assets the partner has granted you   access to.
			-- 
			-- argument: business_id Unique identifier of the requesting business. (required)
			-- 
			-- argument: assets_summary Include assets summary in the response if this is true.  The assets summary returns a dictionary representing a summary of the assets for the business user ID, with information like the ad accounts and profiles the user has permissions for and what those permissions are (optional, default to false)
			-- 
			-- argument: partner_type Specifies whether to fetch internal or external (shared) partners. If partner_type&#x3D;INTERNAL, the asset being queried is for accesses the partner has to your business assets.&lt;br&gt; If partner_type&#x3D;EXTERNAL, the asset being queried is for the accesses you have to the partner&#39;s business asset. (optional, default to null)
			-- 
			-- argument: partner_ids A list of business partner ids separated by commas used to filter the results. Only partners with the specified ids will be returned. (optional, default to null)
			-- 
			-- argument: start_index An index to start fetching the results from. Only the results starting from this index will be returned. (optional, default to 0)
			-- 
			-- argument: page_size Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
			-- 
			-- argument: bookmark Cursor used to fetch the next page of items (optional, default to null)
			-- 
			-- 
			-- Result GET_BUSINESS_PARTNERS_200_RESPONSE
		require
     		start_index_is_greater_or_equal_than: start_index >= 0
			page_size_is_less_or_equal_than: page_size <= 250
     		page_size_is_greater_or_equal_than: page_size >= 1
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/businesses/{business_id}/partners"
			l_path.replace_substring_all ("{"+"business_id"+"}", api_client.url_encode (business_id.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "assets_summary", assets_summary));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "partner_type", partner_type));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "partner_ids", partner_ids));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "start_index", start_index));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "page_size", page_size));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "bookmark", bookmark));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"pinterest_oauth2">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { GET_BUSINESS_PARTNERS_200_RESPONSE } l_response.data ({ GET_BUSINESS_PARTNERS_200_RESPONSE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	delete_business_membership (business_id: STRING_32; members_to_delete_body: MEMBERS_TO_DELETE_BODY): detachable DELETED_MEMBERS_RESPONSE
			-- Terminate business memberships
			-- Terminate memberships between the specified members and your business.
			-- 
			-- argument: business_id Business id (required)
			-- 
			-- argument: members_to_delete_body List of members with role to delete. (required)
			-- 
			-- 
			-- Result DELETED_MEMBERS_RESPONSE
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(members_to_delete_body)
			l_path := "/businesses/{business_id}/members"
			l_path.replace_substring_all ("{"+"business_id"+"}", api_client.url_encode (business_id.out))


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<"application/json">>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"pinterest_oauth2">>)
			l_response := api_client.call_api (l_path, "Delete", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { DELETED_MEMBERS_RESPONSE } l_response.data ({ DELETED_MEMBERS_RESPONSE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	delete_business_partners (business_id: STRING_32; delete_partners_request: DELETE_PARTNERS_REQUEST): detachable DELETE_PARTNERS_RESPONSE
			-- Terminate business partnerships
			-- Terminate partnerships between the specified partners and your business. Note: You may only batch terminate partners of the same partner type.
			-- 
			-- argument: business_id Unique identifier of the requesting business. (required)
			-- 
			-- argument: delete_partners_request An object containing a \&quot;partner_ids\&quot; property composed of a list of partner IDs and a \&quot;partners_type\&quot; property specifying the type of partners to delete.  (required)
			-- 
			-- 
			-- Result DELETE_PARTNERS_RESPONSE
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(delete_partners_request)
			l_path := "/businesses/{business_id}/partners"
			l_path.replace_substring_all ("{"+"business_id"+"}", api_client.url_encode (business_id.out))


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<"application/json">>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"pinterest_oauth2">>)
			l_response := api_client.call_api (l_path, "Delete", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { DELETE_PARTNERS_RESPONSE } l_response.data ({ DELETE_PARTNERS_RESPONSE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	update_business_memberships (business_id: STRING_32; update_member_business_role_body: LIST [UPDATE_MEMBER_BUSINESS_ROLE_BODY]): detachable UPDATE_MEMBER_RESULTS_RESPONSE_ARRAY
			-- Update member&#39;s business role
			-- Update a member&#39;s business role within the business.
			-- 
			-- argument: business_id Business id (required)
			-- 
			-- argument: update_member_business_role_body List of objects with the member id and the business_role. (required)
			-- 
			-- 
			-- Result UPDATE_MEMBER_RESULTS_RESPONSE_ARRAY
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(update_member_business_role_body)
			l_path := "/businesses/{business_id}/members"
			l_path.replace_substring_all ("{"+"business_id"+"}", api_client.url_encode (business_id.out))


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<"application/json">>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"pinterest_oauth2">>)
			l_response := api_client.call_api (l_path, "Patch", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { UPDATE_MEMBER_RESULTS_RESPONSE_ARRAY } l_response.data ({ UPDATE_MEMBER_RESULTS_RESPONSE_ARRAY }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end


end
