note
 description:"[
		Pinterest REST API
 		Pinterest's REST API
  		The version of the OpenAPI document: 5.14.0
 	    Contact: blah+oapicf@cliffano.com

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"

class
	BOARDS_API

inherit

    API_I


feature -- API Access


	board_sections_create (board_id: STRING_32; board_section: BOARD_SECTION; ad_account_id: STRING_32): detachable BOARD_SECTION
			-- Create board section
			-- Create a board section on a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
			-- 
			-- argument: board_id Unique identifier of a board. (required)
			-- 
			-- argument: board_section Create a board section. (required)
			-- 
			-- argument: ad_account_id Unique identifier of an ad account. (optional, default to null)
			-- 
			-- 
			-- Result BOARD_SECTION
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(board_section)
			l_path := "/boards/{board_id}/sections"
			l_path.replace_substring_all ("{"+"board_id"+"}", api_client.url_encode (board_id.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "ad_account_id", ad_account_id));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<"application/json">>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"pinterest_oauth2">>)
			l_response := api_client.call_api (l_path, "Post", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { BOARD_SECTION } l_response.data ({ BOARD_SECTION }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	board_sections_delete (board_id: STRING_32; section_id: STRING_32; ad_account_id: STRING_32)
			-- Delete board section
			-- Delete a board section on a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
			-- 
			-- argument: board_id Unique identifier of a board. (required)
			-- 
			-- argument: section_id Unique identifier of a board section. (required)
			-- 
			-- argument: ad_account_id Unique identifier of an ad account. (optional, default to null)
			-- 
			-- 
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/boards/{board_id}/sections/{section_id}"
			l_path.replace_substring_all ("{"+"board_id"+"}", api_client.url_encode (board_id.out))
			l_path.replace_substring_all ("{"+"section_id"+"}", api_client.url_encode (section_id.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "ad_account_id", ad_account_id));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"pinterest_oauth2">>)
			l_response := api_client.call_api (l_path, "Delete", l_request, agent serializer, Void)
			if l_response.has_error then
				last_error := l_response.error
			end
		end

	board_sections_list (board_id: STRING_32; ad_account_id: STRING_32; bookmark: STRING_32; page_size: INTEGER_32): detachable BOARD_SECTIONS_LIST_200_RESPONSE
			-- List board sections
			-- Get a list of all board sections from a board owned by the \&quot;operation user_account\&quot; - or a group board that has been shared with this account. Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
			-- 
			-- argument: board_id Unique identifier of a board. (required)
			-- 
			-- argument: ad_account_id Unique identifier of an ad account. (optional, default to null)
			-- 
			-- argument: bookmark Cursor used to fetch the next page of items (optional, default to null)
			-- 
			-- argument: page_size Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
			-- 
			-- 
			-- Result BOARD_SECTIONS_LIST_200_RESPONSE
		require
			page_size_is_less_or_equal_than: page_size <= 250
     		page_size_is_greater_or_equal_than: page_size >= 1
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/boards/{board_id}/sections"
			l_path.replace_substring_all ("{"+"board_id"+"}", api_client.url_encode (board_id.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "ad_account_id", ad_account_id));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "bookmark", bookmark));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "page_size", page_size));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"pinterest_oauth2", "client_credentials">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { BOARD_SECTIONS_LIST_200_RESPONSE } l_response.data ({ BOARD_SECTIONS_LIST_200_RESPONSE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	board_sections_list_pins (board_id: STRING_32; section_id: STRING_32; ad_account_id: STRING_32; bookmark: STRING_32; page_size: INTEGER_32): detachable BOARDS_LIST_PINS_200_RESPONSE
			-- List Pins on board section
			-- Get a list of the Pins on a board section of a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
			-- 
			-- argument: board_id Unique identifier of a board. (required)
			-- 
			-- argument: section_id Unique identifier of a board section. (required)
			-- 
			-- argument: ad_account_id Unique identifier of an ad account. (optional, default to null)
			-- 
			-- argument: bookmark Cursor used to fetch the next page of items (optional, default to null)
			-- 
			-- argument: page_size Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
			-- 
			-- 
			-- Result BOARDS_LIST_PINS_200_RESPONSE
		require
			page_size_is_less_or_equal_than: page_size <= 250
     		page_size_is_greater_or_equal_than: page_size >= 1
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/boards/{board_id}/sections/{section_id}/pins"
			l_path.replace_substring_all ("{"+"board_id"+"}", api_client.url_encode (board_id.out))
			l_path.replace_substring_all ("{"+"section_id"+"}", api_client.url_encode (section_id.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "ad_account_id", ad_account_id));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "bookmark", bookmark));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "page_size", page_size));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"pinterest_oauth2", "client_credentials">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { BOARDS_LIST_PINS_200_RESPONSE } l_response.data ({ BOARDS_LIST_PINS_200_RESPONSE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	board_sections_update (board_id: STRING_32; section_id: STRING_32; board_section: BOARD_SECTION; ad_account_id: STRING_32): detachable BOARD_SECTION
			-- Update board section
			-- Update a board section on a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
			-- 
			-- argument: board_id Unique identifier of a board. (required)
			-- 
			-- argument: section_id Unique identifier of a board section. (required)
			-- 
			-- argument: board_section Update a board section. (required)
			-- 
			-- argument: ad_account_id Unique identifier of an ad account. (optional, default to null)
			-- 
			-- 
			-- Result BOARD_SECTION
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(board_section)
			l_path := "/boards/{board_id}/sections/{section_id}"
			l_path.replace_substring_all ("{"+"board_id"+"}", api_client.url_encode (board_id.out))
			l_path.replace_substring_all ("{"+"section_id"+"}", api_client.url_encode (section_id.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "ad_account_id", ad_account_id));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<"application/json">>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"pinterest_oauth2">>)
			l_response := api_client.call_api (l_path, "Patch", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { BOARD_SECTION } l_response.data ({ BOARD_SECTION }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	boards_create (board: BOARD; ad_account_id: STRING_32): detachable BOARD
			-- Create board
			-- Create a board owned by the \&quot;operation user_account\&quot;. Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
			-- 
			-- argument: board Create a board using a single board json object. (required)
			-- 
			-- argument: ad_account_id Unique identifier of an ad account. (optional, default to null)
			-- 
			-- 
			-- Result BOARD
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(board)
			l_path := "/boards"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "ad_account_id", ad_account_id));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<"application/json">>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"pinterest_oauth2">>)
			l_response := api_client.call_api (l_path, "Post", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { BOARD } l_response.data ({ BOARD }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	boards_delete (board_id: STRING_32; ad_account_id: STRING_32)
			-- Delete board
			-- Delete a board owned by the \&quot;operation user_account\&quot;. - Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
			-- 
			-- argument: board_id Unique identifier of a board. (required)
			-- 
			-- argument: ad_account_id Unique identifier of an ad account. (optional, default to null)
			-- 
			-- 
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/boards/{board_id}"
			l_path.replace_substring_all ("{"+"board_id"+"}", api_client.url_encode (board_id.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "ad_account_id", ad_account_id));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"pinterest_oauth2">>)
			l_response := api_client.call_api (l_path, "Delete", l_request, agent serializer, Void)
			if l_response.has_error then
				last_error := l_response.error
			end
		end

	boards_get (board_id: STRING_32; ad_account_id: STRING_32): detachable BOARD
			-- Get board
			-- Get a board owned by the operation user_account - or a group board that has been shared with this account. - Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
			-- 
			-- argument: board_id Unique identifier of a board. (required)
			-- 
			-- argument: ad_account_id Unique identifier of an ad account. (optional, default to null)
			-- 
			-- 
			-- Result BOARD
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/boards/{board_id}"
			l_path.replace_substring_all ("{"+"board_id"+"}", api_client.url_encode (board_id.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "ad_account_id", ad_account_id));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"pinterest_oauth2", "client_credentials">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { BOARD } l_response.data ({ BOARD }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	boards_list (ad_account_id: STRING_32; bookmark: STRING_32; page_size: INTEGER_32; privacy: STRING_32): detachable BOARDS_LIST_200_RESPONSE
			-- List boards
			-- Get a list of the boards owned by the \&quot;operation user_account\&quot; + group boards where this account is a collaborator Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. Optional: Specify a privacy type (public, protected, or secret) to indicate which boards to return. - If no privacy is specified, all boards that can be returned (based on the scopes of the token and ad_account role if applicable) will be returned.
			-- 
			-- argument: ad_account_id Unique identifier of an ad account. (optional, default to null)
			-- 
			-- argument: bookmark Cursor used to fetch the next page of items (optional, default to null)
			-- 
			-- argument: page_size Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
			-- 
			-- argument: privacy Privacy setting for a board. (optional, default to null)
			-- 
			-- 
			-- Result BOARDS_LIST_200_RESPONSE
		require
			page_size_is_less_or_equal_than: page_size <= 250
     		page_size_is_greater_or_equal_than: page_size >= 1
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/boards"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "ad_account_id", ad_account_id));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "bookmark", bookmark));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "page_size", page_size));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "privacy", privacy));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"pinterest_oauth2", "client_credentials">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { BOARDS_LIST_200_RESPONSE } l_response.data ({ BOARDS_LIST_200_RESPONSE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	boards_list_pins (board_id: STRING_32; bookmark: STRING_32; page_size: INTEGER_32; creative_types: detachable LIST [STRING_32]; ad_account_id: STRING_32; pin_metrics: BOOLEAN): detachable BOARDS_LIST_PINS_200_RESPONSE
			-- List Pins on board
			-- Get a list of the Pins on a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. - Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
			-- 
			-- argument: board_id Unique identifier of a board. (required)
			-- 
			-- argument: bookmark Cursor used to fetch the next page of items (optional, default to null)
			-- 
			-- argument: page_size Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
			-- 
			-- argument: creative_types Pin creative types filter. &lt;/p&gt;&lt;strong&gt;Note:&lt;/strong&gt; SHOP_THE_PIN has been deprecated. Please use COLLECTION instead. (optional, default to null)
			-- 
			-- argument: ad_account_id Unique identifier of an ad account. (optional, default to null)
			-- 
			-- argument: pin_metrics Specify whether to return 90d and lifetime Pin metrics. Total comments and total reactions are only available with lifetime Pin metrics. If Pin was created before &lt;code&gt;2023-03-20&lt;/code&gt; lifetime metrics will only be available for Video and Idea Pin formats. Lifetime metrics are available for all Pin formats since then. (optional, default to false)
			-- 
			-- 
			-- Result BOARDS_LIST_PINS_200_RESPONSE
		require
			page_size_is_less_or_equal_than: page_size <= 250
     		page_size_is_greater_or_equal_than: page_size >= 1
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/boards/{board_id}/pins"
			l_path.replace_substring_all ("{"+"board_id"+"}", api_client.url_encode (board_id.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "bookmark", bookmark));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "page_size", page_size));
			l_request.fill_query_params(api_client.parameter_to_tuple("multi", "creative_types", creative_types));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "ad_account_id", ad_account_id));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pin_metrics", pin_metrics));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"pinterest_oauth2", "client_credentials">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { BOARDS_LIST_PINS_200_RESPONSE } l_response.data ({ BOARDS_LIST_PINS_200_RESPONSE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	boards_update (board_id: STRING_32; board_update: BOARD_UPDATE; ad_account_id: STRING_32): detachable BOARD
			-- Update board
			-- Update a board owned by the \&quot;operating user_account\&quot;. - Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
			-- 
			-- argument: board_id Unique identifier of a board. (required)
			-- 
			-- argument: board_update Update a board. (required)
			-- 
			-- argument: ad_account_id Unique identifier of an ad account. (optional, default to null)
			-- 
			-- 
			-- Result BOARD
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(board_update)
			l_path := "/boards/{board_id}"
			l_path.replace_substring_all ("{"+"board_id"+"}", api_client.url_encode (board_id.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "ad_account_id", ad_account_id));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<"application/json">>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"pinterest_oauth2">>)
			l_response := api_client.call_api (l_path, "Patch", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { BOARD } l_response.data ({ BOARD }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end


end
