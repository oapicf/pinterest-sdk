note
 description:"[
		Pinterest REST API
 		Pinterest's REST API
  		The version of the OpenAPI document: 5.14.0
 	    Contact: blah+oapicf@cliffano.com

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"

class
	BUSINESSACCESSASSETS_API

inherit

    API_I


feature -- API Access


	asset_group_create (business_id: STRING_32; create_asset_group_body: CREATE_ASSET_GROUP_BODY): detachable CREATE_ASSET_GROUP_RESPONSE
			-- Create a new asset group.
			-- Create a new asset group with the specified parameters. - An &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/asset-groups\&quot;&gt;asset group&lt;/a&gt; is a custom group of assets based on how youâ€™d like to manage your accounts.
			-- 
			-- argument: business_id Unique identifier of the requesting business. (required)
			-- 
			-- argument: create_asset_group_body  (required)
			-- 
			-- 
			-- Result CREATE_ASSET_GROUP_RESPONSE
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(create_asset_group_body)
			l_path := "/businesses/{business_id}/asset_groups"
			l_path.replace_substring_all ("{"+"business_id"+"}", api_client.url_encode (business_id.out))


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<"application/json">>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"pinterest_oauth2">>)
			l_response := api_client.call_api (l_path, "Post", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { CREATE_ASSET_GROUP_RESPONSE } l_response.data ({ CREATE_ASSET_GROUP_RESPONSE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	asset_group_delete (business_id: STRING_32; delete_asset_group_body: DELETE_ASSET_GROUP_BODY): detachable DELETE_ASSET_GROUP_RESPONSE
			-- Delete asset groups.
			-- Delete a batch of asset groups.
			-- 
			-- argument: business_id Unique identifier of the requesting business. (required)
			-- 
			-- argument: delete_asset_group_body  (required)
			-- 
			-- 
			-- Result DELETE_ASSET_GROUP_RESPONSE
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(delete_asset_group_body)
			l_path := "/businesses/{business_id}/asset_groups"
			l_path.replace_substring_all ("{"+"business_id"+"}", api_client.url_encode (business_id.out))


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<"application/json">>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"pinterest_oauth2">>)
			l_response := api_client.call_api (l_path, "Delete", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { DELETE_ASSET_GROUP_RESPONSE } l_response.data ({ DELETE_ASSET_GROUP_RESPONSE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	asset_group_update (business_id: STRING_32; update_asset_group_body: UPDATE_ASSET_GROUP_BODY): detachable UPDATE_ASSET_GROUP_RESPONSE
			-- Update asset groups.
			-- Update a batch of asset groups with the specified parameters.
			-- 
			-- argument: business_id Unique identifier of the requesting business. (required)
			-- 
			-- argument: update_asset_group_body  (required)
			-- 
			-- 
			-- Result UPDATE_ASSET_GROUP_RESPONSE
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(update_asset_group_body)
			l_path := "/businesses/{business_id}/asset_groups"
			l_path.replace_substring_all ("{"+"business_id"+"}", api_client.url_encode (business_id.out))


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<"application/json">>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"pinterest_oauth2">>)
			l_response := api_client.call_api (l_path, "Patch", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { UPDATE_ASSET_GROUP_RESPONSE } l_response.data ({ UPDATE_ASSET_GROUP_RESPONSE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	business_asset_members_get (business_id: STRING_32; asset_id: STRING_32; bookmark: STRING_32; page_size: INTEGER_32; start_index: INTEGER_32): detachable BUSINESS_ASSET_MEMBERS_GET_200_RESPONSE
			-- Get members with access to asset
			-- Get all the members the requesting business has granted access to on the given asset.
			-- 
			-- argument: business_id Unique identifier of the requesting business. (required)
			-- 
			-- argument: asset_id Unique identifier of a business asset. (required)
			-- 
			-- argument: bookmark Cursor used to fetch the next page of items (optional, default to null)
			-- 
			-- argument: page_size Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
			-- 
			-- argument: start_index An index to start fetching the results from. Only the results starting from this index will be returned. (optional, default to 0)
			-- 
			-- 
			-- Result BUSINESS_ASSET_MEMBERS_GET_200_RESPONSE
		require
			page_size_is_less_or_equal_than: page_size <= 250
     		page_size_is_greater_or_equal_than: page_size >= 1
     		start_index_is_greater_or_equal_than: start_index >= 0
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/businesses/{business_id}/assets/{asset_id}/members"
			l_path.replace_substring_all ("{"+"business_id"+"}", api_client.url_encode (business_id.out))
			l_path.replace_substring_all ("{"+"asset_id"+"}", api_client.url_encode (asset_id.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "bookmark", bookmark));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "page_size", page_size));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "start_index", start_index));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"pinterest_oauth2">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { BUSINESS_ASSET_MEMBERS_GET_200_RESPONSE } l_response.data ({ BUSINESS_ASSET_MEMBERS_GET_200_RESPONSE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	business_asset_partners_get (business_id: STRING_32; asset_id: STRING_32; start_index: INTEGER_32; bookmark: STRING_32; page_size: INTEGER_32): detachable BUSINESS_ASSET_PARTNERS_GET_200_RESPONSE
			-- Get partners with access to asset
			-- Get all the partners the requesting business has granted access to on the given asset. Note: If the asset has been shared with you, an empty array will be returned. This is because an asset shared with you cannot be shared with a different partner.
			-- 
			-- argument: business_id Unique identifier of the requesting business. (required)
			-- 
			-- argument: asset_id Unique identifier of a business asset. (required)
			-- 
			-- argument: start_index An index to start fetching the results from. Only the results starting from this index will be returned. (optional, default to 0)
			-- 
			-- argument: bookmark Cursor used to fetch the next page of items (optional, default to null)
			-- 
			-- argument: page_size Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
			-- 
			-- 
			-- Result BUSINESS_ASSET_PARTNERS_GET_200_RESPONSE
		require
     		start_index_is_greater_or_equal_than: start_index >= 0
			page_size_is_less_or_equal_than: page_size <= 250
     		page_size_is_greater_or_equal_than: page_size >= 1
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/businesses/{business_id}/assets/{asset_id}/partners"
			l_path.replace_substring_all ("{"+"business_id"+"}", api_client.url_encode (business_id.out))
			l_path.replace_substring_all ("{"+"asset_id"+"}", api_client.url_encode (asset_id.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "start_index", start_index));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "bookmark", bookmark));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "page_size", page_size));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"pinterest_oauth2">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { BUSINESS_ASSET_PARTNERS_GET_200_RESPONSE } l_response.data ({ BUSINESS_ASSET_PARTNERS_GET_200_RESPONSE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	business_assets_get (business_id: STRING_32; permissions: detachable LIST [PERMISSIONS_WITH_OWNER]; child_asset_id: STRING_32; asset_group_id: STRING_32; asset_type: STRING_32; start_index: INTEGER_32; bookmark: STRING_32; page_size: INTEGER_32): detachable BUSINESS_ASSETS_GET_200_RESPONSE
			-- List business assets
			-- Get all the assets the requesting business has access to. This includes assets the business owns and assets the business has access to through partnerships.
			-- 
			-- argument: business_id Unique identifier of the requesting business. (required)
			-- 
			-- argument: permissions A list of asset permissions used to filter the assets. Only assets where the requesting business has at least one of the specified permissions will be returned. (optional, default to null)
			-- 
			-- argument: child_asset_id A child asset unique identifier. Used to fetch asset groups that contain the asset id as a child. (optional, default to null)
			-- 
			-- argument: asset_group_id An asset group unique identifier. Used to fetch assets contained within the specified asset group. (optional, default to null)
			-- 
			-- argument: asset_type A resource type to filter the assets by. Only assets of the specified type will be returned. (optional, default to AD_ACCOUNT)
			-- 
			-- argument: start_index An index to start fetching the results from. Only the results starting from this index will be returned. (optional, default to 0)
			-- 
			-- argument: bookmark Cursor used to fetch the next page of items (optional, default to null)
			-- 
			-- argument: page_size Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
			-- 
			-- 
			-- Result BUSINESS_ASSETS_GET_200_RESPONSE
		require
     		start_index_is_greater_or_equal_than: start_index >= 0
			page_size_is_less_or_equal_than: page_size <= 250
     		page_size_is_greater_or_equal_than: page_size >= 1
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/businesses/{business_id}/assets"
			l_path.replace_substring_all ("{"+"business_id"+"}", api_client.url_encode (business_id.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("multi", "permissions", permissions));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "child_asset_id", child_asset_id));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "asset_group_id", asset_group_id));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "asset_type", asset_type));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "start_index", start_index));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "bookmark", bookmark));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "page_size", page_size));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"pinterest_oauth2">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { BUSINESS_ASSETS_GET_200_RESPONSE } l_response.data ({ BUSINESS_ASSETS_GET_200_RESPONSE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	business_member_assets_get (business_id: STRING_32; member_id: STRING_32; asset_type: STRING_32; start_index: INTEGER_32; bookmark: STRING_32; page_size: INTEGER_32): detachable BUSINESS_MEMBER_ASSETS_GET_200_RESPONSE
			-- Get assets assigned to a member
			-- Get assets on which you assigned asset permissions to the given member. Can be used to: - get all assets, regardless of asset type or - get assets of one asset type by using the asset_type query. The return response will include the permissions the member has to that asset and the asset type.
			-- 
			-- argument: business_id Unique identifier of the requesting business. (required)
			-- 
			-- argument: member_id The member id to fetch assets for. (required)
			-- 
			-- argument: asset_type A resource type to filter the assets by. Only assets of the specified type will be returned. (optional, default to AD_ACCOUNT)
			-- 
			-- argument: start_index An index to start fetching the results from. Only the results starting from this index will be returned. (optional, default to 0)
			-- 
			-- argument: bookmark Cursor used to fetch the next page of items (optional, default to null)
			-- 
			-- argument: page_size Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
			-- 
			-- 
			-- Result BUSINESS_MEMBER_ASSETS_GET_200_RESPONSE
		require
     		start_index_is_greater_or_equal_than: start_index >= 0
			page_size_is_less_or_equal_than: page_size <= 250
     		page_size_is_greater_or_equal_than: page_size >= 1
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/businesses/{business_id}/members/{member_id}/assets"
			l_path.replace_substring_all ("{"+"business_id"+"}", api_client.url_encode (business_id.out))
			l_path.replace_substring_all ("{"+"member_id"+"}", api_client.url_encode (member_id.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "asset_type", asset_type));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "start_index", start_index));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "bookmark", bookmark));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "page_size", page_size));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"pinterest_oauth2">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { BUSINESS_MEMBER_ASSETS_GET_200_RESPONSE } l_response.data ({ BUSINESS_MEMBER_ASSETS_GET_200_RESPONSE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	business_members_asset_access_delete (business_id: STRING_32; business_members_asset_access_delete_request: BUSINESS_MEMBERS_ASSET_ACCESS_DELETE_REQUEST): detachable DELETE_MEMBER_ACCESS_RESULTS_RESPONSE_ARRAY
			-- Delete member access to asset
			-- Terminate multiple members&#39; access to an asset.
			-- 
			-- argument: business_id Unique identifier of the requesting business. (required)
			-- 
			-- argument: business_members_asset_access_delete_request List member assset permissions to delete. (required)
			-- 
			-- 
			-- Result DELETE_MEMBER_ACCESS_RESULTS_RESPONSE_ARRAY
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(business_members_asset_access_delete_request)
			l_path := "/businesses/{business_id}/members/assets/access"
			l_path.replace_substring_all ("{"+"business_id"+"}", api_client.url_encode (business_id.out))


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<"application/json">>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"pinterest_oauth2">>)
			l_response := api_client.call_api (l_path, "Delete", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { DELETE_MEMBER_ACCESS_RESULTS_RESPONSE_ARRAY } l_response.data ({ DELETE_MEMBER_ACCESS_RESULTS_RESPONSE_ARRAY }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	business_members_asset_access_update (business_id: STRING_32; update_member_asset_access_body: UPDATE_MEMBER_ASSET_ACCESS_BODY): detachable UPDATE_MEMBER_ASSETS_RESULTS_RESPONSE_ARRAY
			-- Assign/Update member asset permissions
			-- Grant multiple members access to assets and/or update multiple member&#39;s exisiting permissions to an asset. Note: Not all listed permissions are applicable to each asset type. For example, PROFILE_PUBLISHER would not be applicable to an asset of type AD_ACCOUNT. The permission level PROFILE_PUBLISHER is only available to an asset of the type PROFILE. 
			-- 
			-- argument: business_id Unique identifier of the requesting business. (required)
			-- 
			-- argument: update_member_asset_access_body List of member asset permissions to create or update. (required)
			-- 
			-- 
			-- Result UPDATE_MEMBER_ASSETS_RESULTS_RESPONSE_ARRAY
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(update_member_asset_access_body)
			l_path := "/businesses/{business_id}/members/assets/access"
			l_path.replace_substring_all ("{"+"business_id"+"}", api_client.url_encode (business_id.out))


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<"application/json">>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"pinterest_oauth2">>)
			l_response := api_client.call_api (l_path, "Patch", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { UPDATE_MEMBER_ASSETS_RESULTS_RESPONSE_ARRAY } l_response.data ({ UPDATE_MEMBER_ASSETS_RESULTS_RESPONSE_ARRAY }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	business_partner_asset_access_get (business_id: STRING_32; partner_id: STRING_32; partner_type: detachable PARTNER_TYPE; asset_type: STRING_32; start_index: INTEGER_32; page_size: INTEGER_32; bookmark: STRING_32): detachable BUSINESS_PARTNER_ASSET_ACCESS_GET_200_RESPONSE
			-- Get assets assigned to a partner or assets assigned by a partner
			-- Can be used to get the business assets your partner has granted you access to or the business assets you have granted your partner access to. If you specify: - partner_type&#x3D;INTERNAL, you will retrieve your business assets that the partner has access to. - partner_type&#x3D;EXTERNAL, you will retrieve the partner&#39;s business assets that the partner has granted you access to.
			-- 
			-- argument: business_id Unique identifier of the requesting business. (required)
			-- 
			-- argument: partner_id The partner id to be bound to the Business (required)
			-- 
			-- argument: partner_type Specifies whether to fetch internal or external (shared) partners. If partner_type&#x3D;INTERNAL, the asset being queried is for accesses the partner has to your business assets.&lt;br&gt; If partner_type&#x3D;EXTERNAL, the asset being queried is for the accesses you have to the partner&#39;s business asset. (optional, default to null)
			-- 
			-- argument: asset_type A resource type to filter the assets by. Only assets of the specified type will be returned. (optional, default to AD_ACCOUNT)
			-- 
			-- argument: start_index An index to start fetching the results from. Only the results starting from this index will be returned. (optional, default to 0)
			-- 
			-- argument: page_size Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
			-- 
			-- argument: bookmark Cursor used to fetch the next page of items (optional, default to null)
			-- 
			-- 
			-- Result BUSINESS_PARTNER_ASSET_ACCESS_GET_200_RESPONSE
		require
     		start_index_is_greater_or_equal_than: start_index >= 0
			page_size_is_less_or_equal_than: page_size <= 250
     		page_size_is_greater_or_equal_than: page_size >= 1
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/businesses/{business_id}/partners/{partner_id}/assets"
			l_path.replace_substring_all ("{"+"business_id"+"}", api_client.url_encode (business_id.out))
			l_path.replace_substring_all ("{"+"partner_id"+"}", api_client.url_encode (partner_id.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "partner_type", partner_type));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "asset_type", asset_type));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "start_index", start_index));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "page_size", page_size));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "bookmark", bookmark));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"pinterest_oauth2">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { BUSINESS_PARTNER_ASSET_ACCESS_GET_200_RESPONSE } l_response.data ({ BUSINESS_PARTNER_ASSET_ACCESS_GET_200_RESPONSE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	delete_partner_asset_access_handler_impl (business_id: STRING_32; delete_partner_asset_access_body: DELETE_PARTNER_ASSET_ACCESS_BODY): detachable DELETE_PARTNER_ASSETS_RESULTS_RESPONSE_ARRAY
			-- Delete partner access to asset
			-- Terminate multiple partners&#39; access to an asset. If - partner_type&#x3D;INTERNAL: You will terminate a partner&#39;s asset access to your business assets. - partner_type&#x3D;EXTERNAL: You will terminate your own access to your partner&#39;s business assets.
			-- 
			-- argument: business_id Unique identifier of the requesting business. (required)
			-- 
			-- argument: delete_partner_asset_access_body  (required)
			-- 
			-- 
			-- Result DELETE_PARTNER_ASSETS_RESULTS_RESPONSE_ARRAY
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(delete_partner_asset_access_body)
			l_path := "/businesses/{business_id}/partners/assets"
			l_path.replace_substring_all ("{"+"business_id"+"}", api_client.url_encode (business_id.out))


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<"application/json">>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"pinterest_oauth2">>)
			l_response := api_client.call_api (l_path, "Delete", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { DELETE_PARTNER_ASSETS_RESULTS_RESPONSE_ARRAY } l_response.data ({ DELETE_PARTNER_ASSETS_RESULTS_RESPONSE_ARRAY }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	update_partner_asset_access_handler_impl (business_id: STRING_32; update_partner_asset_access_body: UPDATE_PARTNER_ASSET_ACCESS_BODY): detachable UPDATE_PARTNER_ASSETS_RESULTS_RESPONSE_ARRAY
			-- Assign/Update partner asset permissions
			-- Grant multiple partners access to assets and/or update multiple partner&#39;s exisiting permissions to an asset. If your partner already had permissions on the asset, they will be overriden with the new permissions you assign to them. To learn more about permission levels, visit https://help.pinterest.com/en/business/article/business-manager-overview  Note: Not all listed permissions are applicable to each asset type. For example, PROFILE_PUBLISHER would not be applicable to an asset of type AD_ACCOUNT. The permission level PROFILE_PUBLISHER is only available to an asset of the type PROFILE.
			-- 
			-- argument: business_id Unique identifier of the requesting business. (required)
			-- 
			-- argument: update_partner_asset_access_body A list of assets and permissions to assign to your partners. (required)
			-- 
			-- 
			-- Result UPDATE_PARTNER_ASSETS_RESULTS_RESPONSE_ARRAY
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(update_partner_asset_access_body)
			l_path := "/businesses/{business_id}/partners/assets"
			l_path.replace_substring_all ("{"+"business_id"+"}", api_client.url_encode (business_id.out))


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<"application/json">>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"pinterest_oauth2">>)
			l_response := api_client.call_api (l_path, "Patch", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { UPDATE_PARTNER_ASSETS_RESULTS_RESPONSE_ARRAY } l_response.data ({ UPDATE_PARTNER_ASSETS_RESULTS_RESPONSE_ARRAY }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end


end
