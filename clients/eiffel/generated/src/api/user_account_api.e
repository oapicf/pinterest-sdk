note
 description:"[
		Pinterest REST API
 		Pinterest's REST API
  		The version of the OpenAPI document: 5.14.0
 	    Contact: blah+oapicf@cliffano.com

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"

class
	USERACCOUNT_API

inherit

    API_I


feature -- API Access


	boards_user_follows_list (bookmark: STRING_32; page_size: INTEGER_32; explicit_following: BOOLEAN; ad_account_id: STRING_32): detachable BOARDS_USER_FOLLOWS_LIST_200_RESPONSE
			-- List following boards
			-- Get a list of the boards a user follows. The request returns a board summary object array.
			-- 
			-- argument: bookmark Cursor used to fetch the next page of items (optional, default to null)
			-- 
			-- argument: page_size Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
			-- 
			-- argument: explicit_following Whether or not to include implicit user follows, which means followees with board follows. When explicit_following is True, it means we only want explicit user follows. (optional, default to false)
			-- 
			-- argument: ad_account_id Unique identifier of an ad account. (optional, default to null)
			-- 
			-- 
			-- Result BOARDS_USER_FOLLOWS_LIST_200_RESPONSE
		require
			page_size_is_less_or_equal_than: page_size <= 250
     		page_size_is_greater_or_equal_than: page_size >= 1
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/user_account/following/boards"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "bookmark", bookmark));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "page_size", page_size));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "explicit_following", explicit_following));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "ad_account_id", ad_account_id));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"pinterest_oauth2", "client_credentials">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { BOARDS_USER_FOLLOWS_LIST_200_RESPONSE } l_response.data ({ BOARDS_USER_FOLLOWS_LIST_200_RESPONSE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	follow_user_update (username: STRING_32; follow_user_request: FOLLOW_USER_REQUEST): detachable USER_SUMMARY
			-- Follow user
			-- &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/getting-started/beta-and-advanced-access/&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Use this request, as a signed-in user, to follow another user.
			-- 
			-- argument: username A valid username (required)
			-- 
			-- argument: follow_user_request Follow a user. (required)
			-- 
			-- 
			-- Result USER_SUMMARY
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(follow_user_request)
			l_path := "/user_account/following/{username}"
			l_path.replace_substring_all ("{"+"username"+"}", api_client.url_encode (username.out))


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<"application/json">>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"pinterest_oauth2">>)
			l_response := api_client.call_api (l_path, "Post", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { USER_SUMMARY } l_response.data ({ USER_SUMMARY }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	followers_list (bookmark: STRING_32; page_size: INTEGER_32): detachable FOLLOWERS_LIST_200_RESPONSE
			-- List followers
			-- Get a list of your followers.
			-- 
			-- argument: bookmark Cursor used to fetch the next page of items (optional, default to null)
			-- 
			-- argument: page_size Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
			-- 
			-- 
			-- Result FOLLOWERS_LIST_200_RESPONSE
		require
			page_size_is_less_or_equal_than: page_size <= 250
     		page_size_is_greater_or_equal_than: page_size >= 1
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/user_account/followers"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "bookmark", bookmark));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "page_size", page_size));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"pinterest_oauth2", "client_credentials">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { FOLLOWERS_LIST_200_RESPONSE } l_response.data ({ FOLLOWERS_LIST_200_RESPONSE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	linked_business_accounts_get : detachable LIST [LINKED_BUSINESS]
			-- List linked businesses
			-- Get a list of your linked business accounts.
			-- 
			-- 
			-- Result LIST [LINKED_BUSINESS]
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/user_account/businesses"


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"pinterest_oauth2", "client_credentials">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { LIST [LINKED_BUSINESS] } l_response.data ({ LIST [LINKED_BUSINESS] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	unverify_website_delete (website: STRING_32)
			-- Unverify website
			-- Unverifu a website verified by the signed-in user.
			-- 
			-- argument: website Website with path or domain only (required)
			-- 
			-- 
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/user_account/websites"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "website", website));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"pinterest_oauth2">>)
			l_response := api_client.call_api (l_path, "Delete", l_request, agent serializer, Void)
			if l_response.has_error then
				last_error := l_response.error
			end
		end

	user_account_analytics (start_date: DATE; end_date: DATE; from_claimed_content: STRING_32; pin_format: STRING_32; app_types: STRING_32; content_type: STRING_32; source: STRING_32; metric_types: detachable LIST [STRING_32]; split_field: STRING_32; ad_account_id: STRING_32): detachable STRING_TABLE [ANALYTICS_METRICS_RESPONSE]
			-- Get user account analytics
			-- Get analytics for the \&quot;operation user_account\&quot; - By default, the \&quot;operation user_account\&quot; is the token user_account.  Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;.
			-- 
			-- argument: start_date Metric report start date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days back from today. (required)
			-- 
			-- argument: end_date Metric report end date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days past start_date. (required)
			-- 
			-- argument: from_claimed_content Filter on Pins that match your claimed domain. (optional, default to BOTH)
			-- 
			-- argument: pin_format Pin formats to get data for, default is all. (optional, default to ALL)
			-- 
			-- argument: app_types Apps or devices to get data for, default is all. (optional, default to ALL)
			-- 
			-- argument: content_type Filter to paid or organic data. Default is all. (optional, default to ALL)
			-- 
			-- argument: source Filter to activity from Pins created and saved by your, or activity created and saved by others from your claimed accounts (optional, default to ALL)
			-- 
			-- argument: metric_types Metric types to get data for, default is all.  (optional, default to null)
			-- 
			-- argument: split_field How to split the data into groups. Not including this param means data won&#39;t be split. (optional, default to NO_SPLIT)
			-- 
			-- argument: ad_account_id Unique identifier of an ad account. (optional, default to null)
			-- 
			-- 
			-- Result STRING_TABLE [ANALYTICS_METRICS_RESPONSE]
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/user_account/analytics"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "start_date", start_date));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "end_date", end_date));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "from_claimed_content", from_claimed_content));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pin_format", pin_format));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "app_types", app_types));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "content_type", content_type));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "source", source));
			l_request.fill_query_params(api_client.parameter_to_tuple("csv", "metric_types", metric_types));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "split_field", split_field));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "ad_account_id", ad_account_id));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"pinterest_oauth2">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { STRING_TABLE [ANALYTICS_METRICS_RESPONSE] } l_response.data ({ STRING_TABLE [ANALYTICS_METRICS_RESPONSE] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	user_account_analytics_top_pins (start_date: DATE; end_date: DATE; sort_by: STRING_32; from_claimed_content: STRING_32; pin_format: STRING_32; app_types: STRING_32; content_type: STRING_32; source: STRING_32; metric_types: detachable LIST [STRING_32]; num_of_pins: INTEGER_32; created_in_last_n_days: INTEGER_32; ad_account_id: STRING_32): detachable TOP_PINS_ANALYTICS_RESPONSE
			-- Get user account top pins analytics
			-- Gets analytics data about a user&#39;s top pins (limited to the top 50). - By default, the \&quot;operation user_account\&quot; is the token user_account.  Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;.
			-- 
			-- argument: start_date Metric report start date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days back from today. (required)
			-- 
			-- argument: end_date Metric report end date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days past start_date. (required)
			-- 
			-- argument: sort_by Specify sorting order for metrics (required)
			-- 
			-- argument: from_claimed_content Filter on Pins that match your claimed domain. (optional, default to BOTH)
			-- 
			-- argument: pin_format Pin formats to get data for, default is all. (optional, default to ALL)
			-- 
			-- argument: app_types Apps or devices to get data for, default is all. (optional, default to ALL)
			-- 
			-- argument: content_type Filter to paid or organic data. Default is all. (optional, default to ALL)
			-- 
			-- argument: source Filter to activity from Pins created and saved by your, or activity created and saved by others from your claimed accounts (optional, default to ALL)
			-- 
			-- argument: metric_types Metric types to get data for, default is all.  (optional, default to null)
			-- 
			-- argument: num_of_pins Number of pins to include, default is 10. Max is 50. (optional, default to 10)
			-- 
			-- argument: created_in_last_n_days Get metrics for pins created in the last \&quot;n\&quot; days. (optional, default to null)
			-- 
			-- argument: ad_account_id Unique identifier of an ad account. (optional, default to null)
			-- 
			-- 
			-- Result TOP_PINS_ANALYTICS_RESPONSE
		require
			num_of_pins_is_less_or_equal_than: num_of_pins <= 50
     		num_of_pins_is_greater_or_equal_than: num_of_pins >= 1
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/user_account/analytics/top_pins"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "start_date", start_date));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "end_date", end_date));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "sort_by", sort_by));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "from_claimed_content", from_claimed_content));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pin_format", pin_format));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "app_types", app_types));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "content_type", content_type));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "source", source));
			l_request.fill_query_params(api_client.parameter_to_tuple("csv", "metric_types", metric_types));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "num_of_pins", num_of_pins));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "created_in_last_n_days", created_in_last_n_days));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "ad_account_id", ad_account_id));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"pinterest_oauth2", "client_credentials">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { TOP_PINS_ANALYTICS_RESPONSE } l_response.data ({ TOP_PINS_ANALYTICS_RESPONSE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	user_account_analytics_top_video_pins (start_date: DATE; end_date: DATE; sort_by: STRING_32; from_claimed_content: STRING_32; pin_format: STRING_32; app_types: STRING_32; content_type: STRING_32; source: STRING_32; metric_types: detachable LIST [STRING_32]; num_of_pins: INTEGER_32; created_in_last_n_days: INTEGER_32; ad_account_id: STRING_32): detachable TOP_VIDEO_PINS_ANALYTICS_RESPONSE
			-- Get user account top video pins analytics
			-- Gets analytics data about a user&#39;s top video pins (limited to the top 50). - By default, the \&quot;operation user_account\&quot; is the token user_account.  Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;.
			-- 
			-- argument: start_date Metric report start date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days back from today. (required)
			-- 
			-- argument: end_date Metric report end date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days past start_date. (required)
			-- 
			-- argument: sort_by Specify sorting order for video metrics (required)
			-- 
			-- argument: from_claimed_content Filter on Pins that match your claimed domain. (optional, default to BOTH)
			-- 
			-- argument: pin_format Pin formats to get data for, default is all. (optional, default to ALL)
			-- 
			-- argument: app_types Apps or devices to get data for, default is all. (optional, default to ALL)
			-- 
			-- argument: content_type Filter to paid or organic data. Default is all. (optional, default to ALL)
			-- 
			-- argument: source Filter to activity from Pins created and saved by your, or activity created and saved by others from your claimed accounts (optional, default to ALL)
			-- 
			-- argument: metric_types Metric types to get video data for, default is all.  (optional, default to null)
			-- 
			-- argument: num_of_pins Number of pins to include, default is 10. Max is 50. (optional, default to 10)
			-- 
			-- argument: created_in_last_n_days Get metrics for pins created in the last \&quot;n\&quot; days. (optional, default to null)
			-- 
			-- argument: ad_account_id Unique identifier of an ad account. (optional, default to null)
			-- 
			-- 
			-- Result TOP_VIDEO_PINS_ANALYTICS_RESPONSE
		require
			num_of_pins_is_less_or_equal_than: num_of_pins <= 50
     		num_of_pins_is_greater_or_equal_than: num_of_pins >= 1
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/user_account/analytics/top_video_pins"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "start_date", start_date));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "end_date", end_date));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "sort_by", sort_by));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "from_claimed_content", from_claimed_content));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pin_format", pin_format));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "app_types", app_types));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "content_type", content_type));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "source", source));
			l_request.fill_query_params(api_client.parameter_to_tuple("csv", "metric_types", metric_types));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "num_of_pins", num_of_pins));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "created_in_last_n_days", created_in_last_n_days));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "ad_account_id", ad_account_id));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"pinterest_oauth2", "client_credentials">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { TOP_VIDEO_PINS_ANALYTICS_RESPONSE } l_response.data ({ TOP_VIDEO_PINS_ANALYTICS_RESPONSE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	user_account_followed_interests (username: STRING_32; bookmark: STRING_32; page_size: INTEGER_32): detachable USER_ACCOUNT_FOLLOWED_INTERESTS_200_RESPONSE
			-- List following interests
			-- Get a list of a user&#39;s following interests in one place.
			-- 
			-- argument: username A valid username (required)
			-- 
			-- argument: bookmark Cursor used to fetch the next page of items (optional, default to null)
			-- 
			-- argument: page_size Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
			-- 
			-- 
			-- Result USER_ACCOUNT_FOLLOWED_INTERESTS_200_RESPONSE
		require
			page_size_is_less_or_equal_than: page_size <= 250
     		page_size_is_greater_or_equal_than: page_size >= 1
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/users/{username}/interests/follow"
			l_path.replace_substring_all ("{"+"username"+"}", api_client.url_encode (username.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "bookmark", bookmark));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "page_size", page_size));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"pinterest_oauth2", "client_credentials">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { USER_ACCOUNT_FOLLOWED_INTERESTS_200_RESPONSE } l_response.data ({ USER_ACCOUNT_FOLLOWED_INTERESTS_200_RESPONSE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	user_account_get (ad_account_id: STRING_32): detachable ACCOUNT
			-- Get user account
			-- Get account information for the \&quot;operation user_account\&quot; - By default, the \&quot;operation user_account\&quot; is the token user_account.  If using Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. See &lt;a href&#x3D;&#39;/docs/getting-started/using-business-access/&#39;&gt;Understanding Business Access&lt;/a&gt; for more information.
			-- 
			-- argument: ad_account_id Unique identifier of an ad account. (optional, default to null)
			-- 
			-- 
			-- Result ACCOUNT
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/user_account"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "ad_account_id", ad_account_id));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"pinterest_oauth2", "client_credentials">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { ACCOUNT } l_response.data ({ ACCOUNT }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	user_following_get (bookmark: STRING_32; page_size: INTEGER_32; feed_type: USER_FOLLOWING_FEED_TYPE; explicit_following: BOOLEAN; ad_account_id: STRING_32): detachable USER_FOLLOWING_GET_200_RESPONSE
			-- List following
			-- Get a list of who a certain user follows.
			-- 
			-- argument: bookmark Cursor used to fetch the next page of items (optional, default to null)
			-- 
			-- argument: page_size Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
			-- 
			-- argument: feed_type Thrift param specifying what type of followees will be kept. Default to include all followees. (optional, default to null)
			-- 
			-- argument: explicit_following Whether or not to include implicit user follows, which means followees with board follows. When explicit_following is True, it means we only want explicit user follows. (optional, default to false)
			-- 
			-- argument: ad_account_id Unique identifier of an ad account. (optional, default to null)
			-- 
			-- 
			-- Result USER_FOLLOWING_GET_200_RESPONSE
		require
			page_size_is_less_or_equal_than: page_size <= 250
     		page_size_is_greater_or_equal_than: page_size >= 1
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/user_account/following"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "bookmark", bookmark));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "page_size", page_size));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "feed_type", feed_type));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "explicit_following", explicit_following));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "ad_account_id", ad_account_id));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"pinterest_oauth2", "client_credentials">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { USER_FOLLOWING_GET_200_RESPONSE } l_response.data ({ USER_FOLLOWING_GET_200_RESPONSE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	user_websites_get (bookmark: STRING_32; page_size: INTEGER_32): detachable USER_WEBSITES_GET_200_RESPONSE
			-- Get user websites
			-- Get user websites, claimed or not
			-- 
			-- argument: bookmark Cursor used to fetch the next page of items (optional, default to null)
			-- 
			-- argument: page_size Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
			-- 
			-- 
			-- Result USER_WEBSITES_GET_200_RESPONSE
		require
			page_size_is_less_or_equal_than: page_size <= 250
     		page_size_is_greater_or_equal_than: page_size >= 1
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/user_account/websites"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "bookmark", bookmark));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "page_size", page_size));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"pinterest_oauth2">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { USER_WEBSITES_GET_200_RESPONSE } l_response.data ({ USER_WEBSITES_GET_200_RESPONSE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	verify_website_update (user_website_verify_request: USER_WEBSITE_VERIFY_REQUEST; ad_account_id: STRING_32): detachable USER_WEBSITE_SUMMARY
			-- Verify website
			-- Verify a website as a signed-in user.
			-- 
			-- argument: user_website_verify_request Verify a website. (required)
			-- 
			-- argument: ad_account_id Unique identifier of an ad account. (optional, default to null)
			-- 
			-- 
			-- Result USER_WEBSITE_SUMMARY
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(user_website_verify_request)
			l_path := "/user_account/websites"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "ad_account_id", ad_account_id));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<"application/json">>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"pinterest_oauth2">>)
			l_response := api_client.call_api (l_path, "Post", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { USER_WEBSITE_SUMMARY } l_response.data ({ USER_WEBSITE_SUMMARY }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	website_verification_get (ad_account_id: STRING_32): detachable USER_WEBSITE_VERIFICATION_CODE
			-- Get user verification code for website claiming
			-- Get verification code for user to install on the website to claim it.
			-- 
			-- argument: ad_account_id Unique identifier of an ad account. (optional, default to null)
			-- 
			-- 
			-- Result USER_WEBSITE_VERIFICATION_CODE
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/user_account/websites/verification"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "ad_account_id", ad_account_id));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"pinterest_oauth2", "client_credentials">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { USER_WEBSITE_VERIFICATION_CODE } l_response.data ({ USER_WEBSITE_VERIFICATION_CODE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end


end
