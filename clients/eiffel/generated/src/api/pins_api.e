note
 description:"[
		Pinterest REST API
 		Pinterest's REST API
  		The version of the OpenAPI document: 5.14.0
 	    Contact: blah+oapicf@cliffano.com

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"

class
	PINS_API

inherit

    API_I


feature -- API Access


	multi_pins_analytics (pin_ids: LIST [STRING_32]; start_date: DATE; end_date: DATE; metric_types: LIST [PINS_ANALYTICS_METRIC_TYPES_PARAMETER_INNER]; app_types: STRING_32; ad_account_id: STRING_32): detachable STRING_TABLE [STRING_TABLE]
			-- Get multiple Pin analytics
			-- &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/getting-started/beta-and-advanced-access/&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Get analytics for multiple pins owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. - The maximum number of pins supported in a single request is 100. - By default, the \&quot;operation user_account\&quot; is the token user_account.  Optional: Business Access: Specify an &lt;code&gt;ad_account_id&lt;/code&gt; (obtained via &lt;a href&#x3D;\&quot;/docs/api/v5/#operation/ad_accounts/list\&quot;&gt;List ad accounts&lt;/a&gt;) to use the owner of that ad_account as the \&quot;operation user_account\&quot;. In order to do this, the token user_account must have one of the following &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt; roles on the ad_account:  - For Pins on public or protected boards: Admin, Analyst. - For Pins on secret boards: Admin.  If Pin was created before &lt;code&gt;2023-03-20&lt;/code&gt; lifetime metrics will only be available for Video and Idea Pin formats. Lifetime metrics are available for all Pin formats since then.
			-- 
			-- argument: pin_ids List of Pin IDs. (required)
			-- 
			-- argument: start_date Metric report start date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days back from today. (required)
			-- 
			-- argument: end_date Metric report end date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days past start_date. (required)
			-- 
			-- argument: metric_types Pin metric types to get data for. (required)
			-- 
			-- argument: app_types Apps or devices to get data for, default is all. (optional, default to ALL)
			-- 
			-- argument: ad_account_id Unique identifier of an ad account. (optional, default to null)
			-- 
			-- 
			-- Result STRING_TABLE [STRING_TABLE]
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/pins/analytics"
			l_request.fill_query_params(api_client.parameter_to_tuple("multi", "pin_ids", pin_ids));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "start_date", start_date));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "end_date", end_date));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "app_types", app_types));
			l_request.fill_query_params(api_client.parameter_to_tuple("csv", "metric_types", metric_types));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "ad_account_id", ad_account_id));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"pinterest_oauth2", "client_credentials">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { STRING_TABLE [STRING_TABLE] } l_response.data ({ STRING_TABLE [STRING_TABLE] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	pins_analytics (pin_id: STRING_32; start_date: DATE; end_date: DATE; metric_types: LIST [PINS_ANALYTICS_METRIC_TYPES_PARAMETER_INNER]; app_types: STRING_32; split_field: STRING_32; ad_account_id: STRING_32): detachable STRING_TABLE [PIN_ANALYTICS_METRICS_RESPONSE]
			-- Get Pin analytics
			-- Get analytics for a Pin owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.  Optional: Business Access: Specify an &lt;code&gt;ad_account_id&lt;/code&gt; (obtained via &lt;a href&#x3D;\&quot;/docs/api/v5/#operation/ad_accounts/list\&quot;&gt;List ad accounts&lt;/a&gt;) to use the owner of that ad_account as the \&quot;operation user_account\&quot;. In order to do this, the token user_account must have one of the following &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt; roles on the ad_account:  - For Pins on public or protected boards: Admin, Analyst. - For Pins on secret boards: Admin.  If Pin was created before &lt;code&gt;2023-03-20&lt;/code&gt; lifetime metrics will only be available for Video and Idea Pin formats. Lifetime metrics are available for all Pin formats since then.
			-- 
			-- argument: pin_id Unique identifier of a Pin. (required)
			-- 
			-- argument: start_date Metric report start date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days back from today. (required)
			-- 
			-- argument: end_date Metric report end date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days past start_date. (required)
			-- 
			-- argument: metric_types Pin metric types to get data for. VIDEO_MRC_VIEW are Video views, VIDEO_V50_WATCH_TIME is Total play time. If Pin was created before &lt;code&gt;2023-03-20&lt;/code&gt;, Profile visits and Follows will only be available for Idea Pins. These metrics are available for all Pin formats since then. Keep in mind this cannot have ALL if split_field is set to any value other than &lt;code&gt;NO_SPLIT&lt;/code&gt;. (required)
			-- 
			-- argument: app_types Apps or devices to get data for, default is all. (optional, default to ALL)
			-- 
			-- argument: split_field How to split the data into groups. Not including this param means data won&#39;t be split. (optional, default to NO_SPLIT)
			-- 
			-- argument: ad_account_id Unique identifier of an ad account. (optional, default to null)
			-- 
			-- 
			-- Result STRING_TABLE [PIN_ANALYTICS_METRICS_RESPONSE]
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/pins/{pin_id}/analytics"
			l_path.replace_substring_all ("{"+"pin_id"+"}", api_client.url_encode (pin_id.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "start_date", start_date));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "end_date", end_date));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "app_types", app_types));
			l_request.fill_query_params(api_client.parameter_to_tuple("csv", "metric_types", metric_types));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "split_field", split_field));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "ad_account_id", ad_account_id));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"pinterest_oauth2", "client_credentials">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { STRING_TABLE [PIN_ANALYTICS_METRICS_RESPONSE] } l_response.data ({ STRING_TABLE [PIN_ANALYTICS_METRICS_RESPONSE] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	pins_create (pin_create: PIN_CREATE; ad_account_id: STRING_32): detachable PIN
			-- Create Pin
			-- Create a Pin on a board or board section owned by the \&quot;operation user_account\&quot;.  Note: If the current \&quot;operation user_account\&quot; (defined by the access token) has access to another user&#39;s Ad Accounts via Pinterest Business Access, you can modify your request to make use of the current operation_user_account&#39;s permissions to those Ad Accounts by including the ad_account_id in the path parameters for the request (e.g. .../?ad_account_id&#x3D;12345&amp;...).  - This function is intended solely for publishing new content created by the user. If you are interested in saving content created by others to your Pinterest boards, sometimes called &#39;curated content&#39;, please use our &lt;a href&#x3D;&#39;/docs/web-features/add-ons-overview/&#39;&gt;Save button&lt;/a&gt; instead. For more tips on creating fresh content for Pinterest, review our &lt;a href&#x3D;&#39;/docs/api-features/content-overview/&#39;&gt;Content App Solutions Guide&lt;/a&gt;.  &lt;strong&gt;&lt;a href&#x3D;&#39;/docs/api-features/creating-boards-and-pins/#creating-video-pins&#39;&gt;Learn more&lt;/a&gt;&lt;/strong&gt; about video Pin creation.
			-- 
			-- argument: pin_create Create a new Pin. (required)
			-- 
			-- argument: ad_account_id Unique identifier of an ad account. (optional, default to null)
			-- 
			-- 
			-- Result PIN
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(pin_create)
			l_path := "/pins"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "ad_account_id", ad_account_id));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<"application/json">>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"pinterest_oauth2">>)
			l_response := api_client.call_api (l_path, "Post", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { PIN } l_response.data ({ PIN }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	pins_delete (pin_id: STRING_32; ad_account_id: STRING_32)
			-- Delete Pin
			-- Delete a Pins owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.  Optional: Business Access: Specify an &lt;code&gt;ad_account_id&lt;/code&gt; (obtained via &lt;a href&#x3D;&#39;/docs/api/v5/#operation/ad_accounts/list&#39;&gt;List ad accounts&lt;/a&gt;) to use the owner of that ad_account as the \&quot;operation user_account\&quot;. In order to do this, the token user_account must have one of the following &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt; roles on the ad_account:  - For Pins on public or protected boards: Owner, Admin, Analyst, Campaign Manager. - For Pins on secret boards: Owner, Admin.
			-- 
			-- argument: pin_id Unique identifier of a Pin. (required)
			-- 
			-- argument: ad_account_id Unique identifier of an ad account. (optional, default to null)
			-- 
			-- 
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/pins/{pin_id}"
			l_path.replace_substring_all ("{"+"pin_id"+"}", api_client.url_encode (pin_id.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "ad_account_id", ad_account_id));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"pinterest_oauth2">>)
			l_response := api_client.call_api (l_path, "Delete", l_request, agent serializer, Void)
			if l_response.has_error then
				last_error := l_response.error
			end
		end

	pins_get (pin_id: STRING_32; pin_metrics: BOOLEAN; ad_account_id: STRING_32): detachable PIN
			-- Get Pin
			-- Get a Pin owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.  Optional: Business Access: Specify an &lt;code&gt;ad_account_id&lt;/code&gt; (obtained via &lt;a href&#x3D;&#39;/docs/api/v5/#operation/ad_accounts/list&#39;&gt;List ad accounts&lt;/a&gt;) to use the owner of that ad_account as the \&quot;operation user_account\&quot;. In order to do this, the token user_account must have one of the following &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt; roles on the ad_account:  - For Pins on public or protected boards: Owner, Admin, Analyst, Campaign Manager. - For Pins on secret boards: Owner, Admin.
			-- 
			-- argument: pin_id Unique identifier of a Pin. (required)
			-- 
			-- argument: pin_metrics Specify whether to return 90d and lifetime Pin metrics. Total comments and total reactions are only available with lifetime Pin metrics. If Pin was created before &lt;code&gt;2023-03-20&lt;/code&gt; lifetime metrics will only be available for Video and Idea Pin formats. Lifetime metrics are available for all Pin formats since then. (optional, default to false)
			-- 
			-- argument: ad_account_id Unique identifier of an ad account. (optional, default to null)
			-- 
			-- 
			-- Result PIN
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/pins/{pin_id}"
			l_path.replace_substring_all ("{"+"pin_id"+"}", api_client.url_encode (pin_id.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pin_metrics", pin_metrics));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "ad_account_id", ad_account_id));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"pinterest_oauth2", "client_credentials">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { PIN } l_response.data ({ PIN }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	pins_list (bookmark: STRING_32; page_size: INTEGER_32; pin_filter: STRING_32; include_protected_pins: BOOLEAN; pin_type: STRING_32; creative_types: detachable LIST [STRING_32]; ad_account_id: STRING_32; pin_metrics: BOOLEAN): detachable PINS_LIST_200_RESPONSE
			-- List Pins
			-- Get a list of the Pins owned by the \&quot;operation user_account\&quot;.   - By default, the \&quot;operation user_account\&quot; is the token user_account.   - All Pins owned by the \&quot;operation user_account\&quot; are included, regardless of who owns the board they are on. Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;.  Disclaimer: there are known performance issues when filtering by field &lt;code&gt;creative_type&lt;/code&gt; and including protected pins. If your request is timing out in this scenario we encourage you to use &lt;a href&#x3D;&#39;/docs/api/v5/#operation/boards/list_pins&#39;&gt;GET List Pins on Board&lt;/a&gt;.
			-- 
			-- argument: bookmark Cursor used to fetch the next page of items (optional, default to null)
			-- 
			-- argument: page_size Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
			-- 
			-- argument: pin_filter Pin filter. (optional, default to null)
			-- 
			-- argument: include_protected_pins Specify if return pins from protected boards (optional, default to false)
			-- 
			-- argument: pin_type The type of pins to return, currently only enabled for private pins (optional, default to null)
			-- 
			-- argument: creative_types Pin creative types filter. &lt;/p&gt;&lt;strong&gt;Note:&lt;/strong&gt; SHOP_THE_PIN has been deprecated. Please use COLLECTION instead. (optional, default to null)
			-- 
			-- argument: ad_account_id Unique identifier of an ad account. (optional, default to null)
			-- 
			-- argument: pin_metrics Specify whether to return 90d and lifetime Pin metrics. Total comments and total reactions are only available with lifetime Pin metrics. If Pin was created before &lt;code&gt;2023-03-20&lt;/code&gt; lifetime metrics will only be available for Video and Idea Pin formats. Lifetime metrics are available for all Pin formats since then. (optional, default to false)
			-- 
			-- 
			-- Result PINS_LIST_200_RESPONSE
		require
			page_size_is_less_or_equal_than: page_size <= 250
     		page_size_is_greater_or_equal_than: page_size >= 1
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/pins"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "bookmark", bookmark));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "page_size", page_size));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pin_filter", pin_filter));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "include_protected_pins", include_protected_pins));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pin_type", pin_type));
			l_request.fill_query_params(api_client.parameter_to_tuple("multi", "creative_types", creative_types));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "ad_account_id", ad_account_id));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pin_metrics", pin_metrics));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"pinterest_oauth2", "client_credentials">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { PINS_LIST_200_RESPONSE } l_response.data ({ PINS_LIST_200_RESPONSE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	pins_save (pin_id: STRING_32; pins_save_request: PINS_SAVE_REQUEST; ad_account_id: STRING_32): detachable PIN
			-- Save Pin
			-- Save a Pin on a board or board section owned by the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account. Optional: Business Access: Specify an &lt;code&gt;ad_account_id&lt;/code&gt; (obtained via &lt;a href&#x3D;&#39;/docs/api/v5/#operation/ad_accounts/list&#39;&gt;List ad accounts&lt;/a&gt;) to use the owner of that ad_account as the \&quot;operation user_account\&quot;. In order to do this, the token user_account must have one of the following &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt; roles on the ad_account:  - For Pins on public or protected boards: Owner, Admin, Analyst, Campaign Manager. - For Pins on secret boards: Owner, Admin.  - Any Pin type can be saved: image Pin, video Pin, Idea Pin, product Pin, etc. - Any public Pin can be saved given a pin ID.
			-- 
			-- argument: pin_id Unique identifier of a Pin. (required)
			-- 
			-- argument: pins_save_request Request object used to save an existing pin (required)
			-- 
			-- argument: ad_account_id Unique identifier of an ad account. (optional, default to null)
			-- 
			-- 
			-- Result PIN
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(pins_save_request)
			l_path := "/pins/{pin_id}/save"
			l_path.replace_substring_all ("{"+"pin_id"+"}", api_client.url_encode (pin_id.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "ad_account_id", ad_account_id));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<"application/json">>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"pinterest_oauth2">>)
			l_response := api_client.call_api (l_path, "Post", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { PIN } l_response.data ({ PIN }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	pins_update (pin_id: STRING_32; pin_update: PIN_UPDATE; ad_account_id: STRING_32): detachable PIN
			-- Update Pin
			-- Update a pin owned by the \&quot;operating user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.  Optional: Business Access: Specify an &lt;code&gt;ad_account_id&lt;/code&gt; (obtained via &lt;a href&#x3D;&#39;/docs/api/v5/#operation/ad_accounts/list&#39;&gt;List ad accounts&lt;/a&gt;) to use the owner of that ad_account as the \&quot;operation user_account\&quot;. In order to do this, the token user_account must have one of the following &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt; roles on the ad_account:  - For Pins on public or protected boards: Owner, Admin, Analyst, Campaign Manager. - For Pins on secret boards: Owner, Admin.  &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/getting-started/beta-and-advanced-access/&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;
			-- 
			-- argument: pin_id Unique identifier of a Pin. (required)
			-- 
			-- argument: pin_update  (required)
			-- 
			-- argument: ad_account_id Unique identifier of an ad account. (optional, default to null)
			-- 
			-- 
			-- Result PIN
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(pin_update)
			l_path := "/pins/{pin_id}"
			l_path.replace_substring_all ("{"+"pin_id"+"}", api_client.url_encode (pin_id.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "ad_account_id", ad_account_id));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<"application/json">>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"pinterest_oauth2">>)
			l_response := api_client.call_api (l_path, "Patch", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { PIN } l_response.data ({ PIN }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end


end
