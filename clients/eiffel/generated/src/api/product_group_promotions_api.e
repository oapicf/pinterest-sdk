note
 description:"[
		Pinterest REST API
 		Pinterest's REST API
  		The version of the OpenAPI document: 5.14.0
 	    Contact: blah+oapicf@cliffano.com

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"

class
	PRODUCTGROUPPROMOTIONS_API

inherit

    API_I


feature -- API Access


	product_group_promotions_create (ad_account_id: STRING_32; product_group_promotion_create_request: PRODUCT_GROUP_PROMOTION_CREATE_REQUEST): detachable PRODUCT_GROUP_PROMOTION_RESPONSE
			-- Create product group promotions
			-- Add one or more product groups from your catalog to an existing ad group. (Product groups added to an ad group are a &#39;product group promotion.&#39;)
			-- 
			-- argument: ad_account_id Unique identifier of an ad account. (required)
			-- 
			-- argument: product_group_promotion_create_request List of Product Group Promotions to create, size limit [1, 30]. (required)
			-- 
			-- 
			-- Result PRODUCT_GROUP_PROMOTION_RESPONSE
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(product_group_promotion_create_request)
			l_path := "/ad_accounts/{ad_account_id}/product_group_promotions"
			l_path.replace_substring_all ("{"+"ad_account_id"+"}", api_client.url_encode (ad_account_id.out))


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<"application/json">>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"pinterest_oauth2">>)
			l_response := api_client.call_api (l_path, "Post", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { PRODUCT_GROUP_PROMOTION_RESPONSE } l_response.data ({ PRODUCT_GROUP_PROMOTION_RESPONSE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	product_group_promotions_get (ad_account_id: STRING_32; product_group_promotion_id: STRING_32): detachable PRODUCT_GROUP_PROMOTION_RESPONSE
			-- Get a product group promotion by id
			-- Get a product group promotion by id
			-- 
			-- argument: ad_account_id Unique identifier of an ad account. (required)
			-- 
			-- argument: product_group_promotion_id Unique identifier of a product group promotion (required)
			-- 
			-- 
			-- Result PRODUCT_GROUP_PROMOTION_RESPONSE
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/ad_accounts/{ad_account_id}/product_group_promotions/{product_group_promotion_id}"
			l_path.replace_substring_all ("{"+"ad_account_id"+"}", api_client.url_encode (ad_account_id.out))
			l_path.replace_substring_all ("{"+"product_group_promotion_id"+"}", api_client.url_encode (product_group_promotion_id.out))


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"pinterest_oauth2">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { PRODUCT_GROUP_PROMOTION_RESPONSE } l_response.data ({ PRODUCT_GROUP_PROMOTION_RESPONSE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	product_group_promotions_list (ad_account_id: STRING_32; product_group_promotion_ids: detachable LIST [STRING_32]; entity_statuses: detachable LIST [STRING_32]; ad_group_id: STRING_32; page_size: INTEGER_32; order: STRING_32; bookmark: STRING_32): detachable PRODUCT_GROUP_PROMOTIONS_LIST_200_RESPONSE
			-- Get product group promotions
			-- List existing product group promotions associated with an ad account.  Include either ad_group_id or product_group_promotion_ids in your request.  &lt;b&gt;Note:&lt;/b&gt; ad_group_ids and product_group_promotion_ids are mutually exclusive parameters. Only provide one. If multiple options are provided, product_group_promotion_ids takes precedence over ad_group_ids. If none are provided, the endpoint returns an error.
			-- 
			-- argument: ad_account_id Unique identifier of an ad account. (required)
			-- 
			-- argument: product_group_promotion_ids List of Product group promotion Ids. (optional, default to null)
			-- 
			-- argument: entity_statuses Entity status (optional, default to ["ACTIVE","PAUSED"])
			-- 
			-- argument: ad_group_id Ad group Id. (optional, default to null)
			-- 
			-- argument: page_size Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
			-- 
			-- argument: order The order in which to sort the items returned: “ASCENDING” or “DESCENDING” by ID. Note that higher-value IDs are associated with more-recently added items. (optional, default to null)
			-- 
			-- argument: bookmark Cursor used to fetch the next page of items (optional, default to null)
			-- 
			-- 
			-- Result PRODUCT_GROUP_PROMOTIONS_LIST_200_RESPONSE
		require
			page_size_is_less_or_equal_than: page_size <= 250
     		page_size_is_greater_or_equal_than: page_size >= 1
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/ad_accounts/{ad_account_id}/product_group_promotions"
			l_path.replace_substring_all ("{"+"ad_account_id"+"}", api_client.url_encode (ad_account_id.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("multi", "product_group_promotion_ids", product_group_promotion_ids));
			l_request.fill_query_params(api_client.parameter_to_tuple("multi", "entity_statuses", entity_statuses));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "ad_group_id", ad_group_id));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "page_size", page_size));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "order", order));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "bookmark", bookmark));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"pinterest_oauth2">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { PRODUCT_GROUP_PROMOTIONS_LIST_200_RESPONSE } l_response.data ({ PRODUCT_GROUP_PROMOTIONS_LIST_200_RESPONSE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	product_group_promotions_update (ad_account_id: STRING_32; product_group_promotion_update_request: PRODUCT_GROUP_PROMOTION_UPDATE_REQUEST): detachable PRODUCT_GROUP_PROMOTION_RESPONSE
			-- Update product group promotions
			-- Update multiple existing Product Group Promotions (by product_group_id)
			-- 
			-- argument: ad_account_id Unique identifier of an ad account. (required)
			-- 
			-- argument: product_group_promotion_update_request Parameters to update Product group promotions (required)
			-- 
			-- 
			-- Result PRODUCT_GROUP_PROMOTION_RESPONSE
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(product_group_promotion_update_request)
			l_path := "/ad_accounts/{ad_account_id}/product_group_promotions"
			l_path.replace_substring_all ("{"+"ad_account_id"+"}", api_client.url_encode (ad_account_id.out))


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<"application/json">>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"pinterest_oauth2">>)
			l_response := api_client.call_api (l_path, "Patch", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { PRODUCT_GROUP_PROMOTION_RESPONSE } l_response.data ({ PRODUCT_GROUP_PROMOTION_RESPONSE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	product_groups_analytics (ad_account_id: STRING_32; start_date: DATE; end_date: DATE; product_group_ids: LIST [STRING_32]; columns: LIST [STRING_32]; granularity: GRANULARITY; click_window_days: INTEGER_32; engagement_window_days: INTEGER_32; view_window_days: INTEGER_32; conversion_report_time: STRING_32): detachable LIST [PRODUCT_GROUP_ANALYTICS_RESPONSE_INNER]
			-- Get product group analytics
			-- Get analytics for the specified product groups in the specified &lt;code&gt;ad_account_id&lt;/code&gt;, filtered by the specified options. - The token&#39;s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt;: Admin, Analyst, Campaign Manager. - If granularity is not HOUR, the furthest back you can are allowed to pull data is 90 days before the current date in UTC time and the max time range supported is 90 days. - If granularity is HOUR, the furthest back you can are allowed to pull data is 8 days before the current date in UTC time and the max time range supported is 3 days.
			-- 
			-- argument: ad_account_id Unique identifier of an ad account. (required)
			-- 
			-- argument: start_date Metric report start date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days back from today. (required)
			-- 
			-- argument: end_date Metric report end date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days past start_date. (required)
			-- 
			-- argument: product_group_ids List of Product group Ids to use to filter the results. (required)
			-- 
			-- argument: columns Columns to retrieve, encoded as a comma-separated string. **NOTE**: Any metrics defined as MICRO_DOLLARS returns a value based on the advertiser profile&#39;s currency field. For USD,($1/1,000,000, or $0.000001 - one one-ten-thousandth of a cent). it&#39;s microdollars. Otherwise, it&#39;s in microunits of the advertiser&#39;s currency.&lt;br/&gt;For example, if the advertiser&#39;s currency is GBP (British pound sterling), all MICRO_DOLLARS fields will be in GBP microunits (1/1,000,000 British pound).&lt;br/&gt;If a column has no value, it may not be returned (required)
			-- 
			-- argument: granularity TOTAL - metrics are aggregated over the specified date range.&lt;br&gt; DAY - metrics are broken down daily.&lt;br&gt; HOUR - metrics are broken down hourly.&lt;br&gt;WEEKLY - metrics are broken down weekly.&lt;br&gt;MONTHLY - metrics are broken down monthly (required)
			-- 
			-- argument: click_window_days Number of days to use as the conversion attribution window for a pin click action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days. (optional, default to 30)
			-- 
			-- argument: engagement_window_days Number of days to use as the conversion attribution window for an engagement action. Engagements include saves, closeups, link clicks, and carousel card swipes. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days. (optional, default to 30)
			-- 
			-- argument: view_window_days Number of days to use as the conversion attribution window for a view action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;1&#x60; day. (optional, default to 1)
			-- 
			-- argument: conversion_report_time The date by which the conversion metrics returned from this endpoint will be reported. There are two dates associated with a conversion event: the date that the user interacted with the ad, and the date that the user completed a conversion event. (optional, default to TIME_OF_AD_ACTION)
			-- 
			-- 
			-- Result LIST [PRODUCT_GROUP_ANALYTICS_RESPONSE_INNER]
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/ad_accounts/{ad_account_id}/product_groups/analytics"
			l_path.replace_substring_all ("{"+"ad_account_id"+"}", api_client.url_encode (ad_account_id.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "start_date", start_date));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "end_date", end_date));
			l_request.fill_query_params(api_client.parameter_to_tuple("multi", "product_group_ids", product_group_ids));
			l_request.fill_query_params(api_client.parameter_to_tuple("csv", "columns", columns));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "granularity", granularity));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "click_window_days", click_window_days));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "engagement_window_days", engagement_window_days));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "view_window_days", view_window_days));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "conversion_report_time", conversion_report_time));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"pinterest_oauth2">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { LIST [PRODUCT_GROUP_ANALYTICS_RESPONSE_INNER] } l_response.data ({ LIST [PRODUCT_GROUP_ANALYTICS_RESPONSE_INNER] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end


end
