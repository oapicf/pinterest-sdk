/*
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.prokarma.pkmst.controller;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.prokarma.pkmst.model.AdsAnalyticsCampaignTargetingType;
import com.prokarma.pkmst.model.CampaignCreateRequest;
import com.prokarma.pkmst.model.CampaignCreateResponse;
import com.prokarma.pkmst.model.CampaignResponse;
import com.prokarma.pkmst.model.CampaignUpdateRequest;
import com.prokarma.pkmst.model.CampaignUpdateResponse;
import com.prokarma.pkmst.model.CampaignsAnalyticsResponseInner;
import com.prokarma.pkmst.model.CampaignsList200Response;
import com.prokarma.pkmst.model.ConversionReportAttributionType;
import com.prokarma.pkmst.model.Error;
import com.prokarma.pkmst.model.Granularity;
import java.util.List;
import java.time.LocalDate;
import com.prokarma.pkmst.model.MetricsResponse;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.http.ResponseEntity;
import org.springframework.web.multipart.MultipartFile;

/**
 * API tests for CampaignsApi
 */
@Ignore
public class CampaignsApiTest {

    private final ObjectMapper objectMapper = new ObjectMapper();

    private final CampaignsApi api = new CampaignsApiController(objectMapper);

    private final String accept = "application/json";

    
    /**
     * Get targeting analytics for campaigns
     *
     * Get targeting analytics for one or more campaigns. For the requested account and metrics, the response will include the requested metric information (e.g. SPEND_IN_DOLLAR) for the requested target type (e.g. \&quot;age_bucket\&quot;) for applicable values (e.g. \&quot;45-49\&quot;). &lt;p/&gt; - The token&#39;s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt;: Admin, Analyst, Campaign Manager. - If granularity is not HOUR, the furthest back you can are allowed to pull data is 90 days before the current date in UTC time and the max time range supported is 90 days. - If granularity is HOUR, the furthest back you can are allowed to pull data is 8 days before the current date in UTC time and the max time range supported is 3 days.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void campaignTargetingAnalyticsGetTest() throws Exception {
        String adAccountId = null;
        List<String> campaignIds = null;
        LocalDate startDate = null;
        LocalDate endDate = null;
        List<AdsAnalyticsCampaignTargetingType> targetingTypes = null;
        List<String> columns = null;
        Granularity granularity = null;
        Integer clickWindowDays = null;
        Integer engagementWindowDays = null;
        Integer viewWindowDays = null;
        String conversionReportTime = null;
        ConversionReportAttributionType attributionTypes = null;
    ResponseEntity<MetricsResponse> response = api.campaignTargetingAnalyticsGet(adAccountId, campaignIds, startDate, endDate, targetingTypes, columns, granularity, clickWindowDays, engagementWindowDays, viewWindowDays, conversionReportTime, attributionTypes , accept);

        // TODO: test validations
    }
    
    /**
     * Get campaign analytics
     *
     * Get analytics for the specified campaigns in the specified &lt;code&gt;ad_account_id&lt;/code&gt;, filtered by the specified options. - The token&#39;s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt;: Admin, Analyst, Campaign Manager. - If granularity is not HOUR, the furthest back you can are allowed to pull data is 90 days before the current date in UTC time and the max time range supported is 90 days. - If granularity is HOUR, the furthest back you can are allowed to pull data is 8 days before the current date in UTC time and the max time range supported is 3 days.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void campaignsAnalyticsTest() throws Exception {
        String adAccountId = null;
        LocalDate startDate = null;
        LocalDate endDate = null;
        List<String> campaignIds = null;
        List<String> columns = null;
        Granularity granularity = null;
        Integer clickWindowDays = null;
        Integer engagementWindowDays = null;
        Integer viewWindowDays = null;
        String conversionReportTime = null;
    ResponseEntity<List<CampaignsAnalyticsResponseInner>> response = api.campaignsAnalytics(adAccountId, startDate, endDate, campaignIds, columns, granularity, clickWindowDays, engagementWindowDays, viewWindowDays, conversionReportTime , accept);

        // TODO: test validations
    }
    
    /**
     * Create campaigns
     *
     * Create multiple new campaigns. Every campaign has its own campaign_id and houses one or more ad groups, which contain one or more ads. For more, see &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/set-up-your-campaign/\&quot;&gt;Set up your campaign&lt;/a&gt;. &lt;p/&gt; &lt;strong&gt;Note:&lt;/strong&gt; - The values for &#39;lifetime_spend_cap&#39; and &#39;daily_spend_cap&#39; are microcurrency amounts based on the currency field set in the advertiser&#39;s profile. (e.g. USD) &lt;p/&gt; &lt;p&gt;Microcurrency is used to track very small transactions, based on the currency set in the advertiser’s profile.&lt;/p&gt; &lt;p&gt;A microcurrency unit is 10^(-6) of the standard unit of currency selected in the advertiser’s profile.&lt;/p&gt;  &lt;p&gt;&lt;strong&gt;Equivalency equations&lt;/strong&gt;, using dollars as an example currency:&lt;/p&gt; &lt;ul&gt;   &lt;li&gt;$1 &#x3D; 1,000,000 microdollars&lt;/li&gt;   &lt;li&gt;1 microdollar &#x3D; $0.000001 &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;strong&gt;To convert between currency and microcurrency&lt;/strong&gt;, using dollars as an example currency:&lt;/p&gt; &lt;ul&gt;   &lt;li&gt;To convert dollars to microdollars, mutiply dollars by 1,000,000&lt;/li&gt;   &lt;li&gt;To convert microdollars to dollars, divide microdollars by 1,000,000&lt;/li&gt; &lt;/ul&gt;
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void campaignsCreateTest() throws Exception {
        String adAccountId = null;
        List<CampaignCreateRequest> campaignCreateRequest = null;
    ResponseEntity<CampaignCreateResponse> response = api.campaignsCreate(adAccountId, campaignCreateRequest , accept);

        // TODO: test validations
    }
    
    /**
     * Get campaign
     *
     * Get a specific campaign given the campaign ID.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void campaignsGetTest() throws Exception {
        String adAccountId = null;
        String campaignId = null;
    ResponseEntity<CampaignResponse> response = api.campaignsGet(adAccountId, campaignId , accept);

        // TODO: test validations
    }
    
    /**
     * List campaigns
     *
     * Get a list of the campaigns in the specified &lt;code&gt;ad_account_id&lt;/code&gt;, filtered by the specified options. - The token&#39;s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt;: Admin, Analyst, Campaign Manager.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void campaignsListTest() throws Exception {
        String adAccountId = null;
        List<String> campaignIds = null;
        List<String> entityStatuses = null;
        Integer pageSize = null;
        String order = null;
        String bookmark = null;
    ResponseEntity<CampaignsList200Response> response = api.campaignsList(adAccountId, campaignIds, entityStatuses, pageSize, order, bookmark , accept);

        // TODO: test validations
    }
    
    /**
     * Update campaigns
     *
     * Update multiple ad campaigns based on campaign_ids. &lt;p/&gt; &lt;strong&gt;Note:&lt;/strong&gt;&lt;p/&gt;  - &lt;p&gt;The values for &#39;lifetime_spend_cap&#39; and &#39;daily_spend_cap&#39; are microcurrency amounts based on the currency field set in the advertiser&#39;s profile. (e.g. USD) &lt;p/&gt; &lt;p&gt;Microcurrency is used to track very small transactions, based on the currency set in the advertiser’s profile.&lt;/p&gt; &lt;p&gt;A microcurrency unit is 10^(-6) of the standard unit of currency selected in the advertiser’ s profile.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Equivalency equations&lt;/strong&gt;, using dollars as an example currency:&lt;/p&gt; &lt;ul&gt;   &lt;li&gt;$1 &#x3D; 1,000,000 microdollars&lt;/li&gt;   &lt;li&gt;1 microdollar &#x3D; $0.000001 &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;strong&gt;To convert between currency and microcurrency&lt;/strong&gt;, using dollars as an example currency:&lt;/p&gt; &lt;ul&gt;   &lt;li&gt;To convert dollars to microdollars, mutiply dollars by 1,000,000&lt;/li&gt;   &lt;li&gt;To convert microdollars to dollars, divide microdollars by 1,000,000&lt;/li&gt; &lt;/ul&gt;
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void campaignsUpdateTest() throws Exception {
        String adAccountId = null;
        List<CampaignUpdateRequest> campaignUpdateRequest = null;
    ResponseEntity<CampaignUpdateResponse> response = api.campaignsUpdate(adAccountId, campaignUpdateRequest , accept);

        // TODO: test validations
    }
    
}
