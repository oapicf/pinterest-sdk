/*
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.prokarma.pkmst.controller;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.prokarma.pkmst.model.Account;
import com.prokarma.pkmst.model.AnalyticsMetricsResponse;
import com.prokarma.pkmst.model.BoardsUserFollowsList200Response;
import com.prokarma.pkmst.model.Error;
import com.prokarma.pkmst.model.FollowUserRequest;
import com.prokarma.pkmst.model.FollowersList200Response;
import com.prokarma.pkmst.model.LinkedBusiness;
import java.util.List;
import java.time.LocalDate;
import java.util.Map;
import com.prokarma.pkmst.model.TopPinsAnalyticsResponse;
import com.prokarma.pkmst.model.TopVideoPinsAnalyticsResponse;
import com.prokarma.pkmst.model.UserAccountFollowedInterests200Response;
import com.prokarma.pkmst.model.UserFollowingFeedType;
import com.prokarma.pkmst.model.UserFollowingGet200Response;
import com.prokarma.pkmst.model.UserSummary;
import com.prokarma.pkmst.model.UserWebsiteSummary;
import com.prokarma.pkmst.model.UserWebsiteVerificationCode;
import com.prokarma.pkmst.model.UserWebsiteVerifyRequest;
import com.prokarma.pkmst.model.UserWebsitesGet200Response;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.http.ResponseEntity;
import org.springframework.web.multipart.MultipartFile;

/**
 * API tests for UserAccountApi
 */
@Ignore
public class UserAccountApiTest {

    private final ObjectMapper objectMapper = new ObjectMapper();

    private final UserAccountApi api = new UserAccountApiController(objectMapper);

    private final String accept = "application/json";

    
    /**
     * List following boards
     *
     * Get a list of the boards a user follows. The request returns a board summary object array.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void boardsUserFollowsListTest() throws Exception {
        String bookmark = null;
        Integer pageSize = null;
        Boolean explicitFollowing = null;
        String adAccountId = null;
    ResponseEntity<BoardsUserFollowsList200Response> response = api.boardsUserFollowsList(bookmark, pageSize, explicitFollowing, adAccountId , accept);

        // TODO: test validations
    }
    
    /**
     * Follow user
     *
     * &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/getting-started/beta-and-advanced-access/&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Use this request, as a signed-in user, to follow another user.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void followUserUpdateTest() throws Exception {
        String username = null;
        FollowUserRequest followUserRequest = null;
    ResponseEntity<UserSummary> response = api.followUserUpdate(username, followUserRequest , accept);

        // TODO: test validations
    }
    
    /**
     * List followers
     *
     * Get a list of your followers.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void followersListTest() throws Exception {
        String bookmark = null;
        Integer pageSize = null;
    ResponseEntity<FollowersList200Response> response = api.followersList(bookmark, pageSize , accept);

        // TODO: test validations
    }
    
    /**
     * List linked businesses
     *
     * Get a list of your linked business accounts.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void linkedBusinessAccountsGetTest() throws Exception {
    ResponseEntity<List<LinkedBusiness>> response = api.linkedBusinessAccountsGet(  accept);

        // TODO: test validations
    }
    
    /**
     * Unverify website
     *
     * Unverifu a website verified by the signed-in user.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void unverifyWebsiteDeleteTest() throws Exception {
        String website = null;
    ResponseEntity<Void> response = api.unverifyWebsiteDelete(website , accept);

        // TODO: test validations
    }
    
    /**
     * Get user account analytics
     *
     * Get analytics for the \&quot;operation user_account\&quot; - By default, the \&quot;operation user_account\&quot; is the token user_account.  Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void userAccountAnalyticsTest() throws Exception {
        LocalDate startDate = null;
        LocalDate endDate = null;
        String fromClaimedContent = null;
        String pinFormat = null;
        String appTypes = null;
        String contentType = null;
        String source = null;
        List<String> metricTypes = null;
        String splitField = null;
        String adAccountId = null;
    ResponseEntity<Map<String, AnalyticsMetricsResponse>> response = api.userAccountAnalytics(startDate, endDate, fromClaimedContent, pinFormat, appTypes, contentType, source, metricTypes, splitField, adAccountId , accept);

        // TODO: test validations
    }
    
    /**
     * Get user account top pins analytics
     *
     * Gets analytics data about a user&#39;s top pins (limited to the top 50). - By default, the \&quot;operation user_account\&quot; is the token user_account.  Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void userAccountAnalyticsTopPinsTest() throws Exception {
        LocalDate startDate = null;
        LocalDate endDate = null;
        String sortBy = null;
        String fromClaimedContent = null;
        String pinFormat = null;
        String appTypes = null;
        String contentType = null;
        String source = null;
        List<String> metricTypes = null;
        Integer numOfPins = null;
        Integer createdInLastNDays = null;
        String adAccountId = null;
    ResponseEntity<TopPinsAnalyticsResponse> response = api.userAccountAnalyticsTopPins(startDate, endDate, sortBy, fromClaimedContent, pinFormat, appTypes, contentType, source, metricTypes, numOfPins, createdInLastNDays, adAccountId , accept);

        // TODO: test validations
    }
    
    /**
     * Get user account top video pins analytics
     *
     * Gets analytics data about a user&#39;s top video pins (limited to the top 50). - By default, the \&quot;operation user_account\&quot; is the token user_account.  Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void userAccountAnalyticsTopVideoPinsTest() throws Exception {
        LocalDate startDate = null;
        LocalDate endDate = null;
        String sortBy = null;
        String fromClaimedContent = null;
        String pinFormat = null;
        String appTypes = null;
        String contentType = null;
        String source = null;
        List<String> metricTypes = null;
        Integer numOfPins = null;
        Integer createdInLastNDays = null;
        String adAccountId = null;
    ResponseEntity<TopVideoPinsAnalyticsResponse> response = api.userAccountAnalyticsTopVideoPins(startDate, endDate, sortBy, fromClaimedContent, pinFormat, appTypes, contentType, source, metricTypes, numOfPins, createdInLastNDays, adAccountId , accept);

        // TODO: test validations
    }
    
    /**
     * List following interests
     *
     * Get a list of a user&#39;s following interests in one place.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void userAccountFollowedInterestsTest() throws Exception {
        String username = null;
        String bookmark = null;
        Integer pageSize = null;
    ResponseEntity<UserAccountFollowedInterests200Response> response = api.userAccountFollowedInterests(username, bookmark, pageSize , accept);

        // TODO: test validations
    }
    
    /**
     * Get user account
     *
     * Get account information for the \&quot;operation user_account\&quot; - By default, the \&quot;operation user_account\&quot; is the token user_account.  If using Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. See &lt;a href&#x3D;&#39;/docs/getting-started/using-business-access/&#39;&gt;Understanding Business Access&lt;/a&gt; for more information.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void userAccountGetTest() throws Exception {
        String adAccountId = null;
    ResponseEntity<Account> response = api.userAccountGet(adAccountId , accept);

        // TODO: test validations
    }
    
    /**
     * List following
     *
     * Get a list of who a certain user follows.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void userFollowingGetTest() throws Exception {
        String bookmark = null;
        Integer pageSize = null;
        UserFollowingFeedType feedType = null;
        Boolean explicitFollowing = null;
        String adAccountId = null;
    ResponseEntity<UserFollowingGet200Response> response = api.userFollowingGet(bookmark, pageSize, feedType, explicitFollowing, adAccountId , accept);

        // TODO: test validations
    }
    
    /**
     * Get user websites
     *
     * Get user websites, claimed or not
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void userWebsitesGetTest() throws Exception {
        String bookmark = null;
        Integer pageSize = null;
    ResponseEntity<UserWebsitesGet200Response> response = api.userWebsitesGet(bookmark, pageSize , accept);

        // TODO: test validations
    }
    
    /**
     * Verify website
     *
     * Verify a website as a signed-in user.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void verifyWebsiteUpdateTest() throws Exception {
        UserWebsiteVerifyRequest userWebsiteVerifyRequest = null;
        String adAccountId = null;
    ResponseEntity<UserWebsiteSummary> response = api.verifyWebsiteUpdate(userWebsiteVerifyRequest, adAccountId , accept);

        // TODO: test validations
    }
    
    /**
     * Get user verification code for website claiming
     *
     * Get verification code for user to install on the website to claim it.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void websiteVerificationGetTest() throws Exception {
        String adAccountId = null;
    ResponseEntity<UserWebsiteVerificationCode> response = api.websiteVerificationGet(adAccountId , accept);

        // TODO: test validations
    }
    
}
