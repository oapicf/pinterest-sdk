/*
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.prokarma.pkmst.controller;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.prokarma.pkmst.model.AuthRespondInvitesBody;
import com.prokarma.pkmst.model.CancelInvitesBody;
import com.prokarma.pkmst.model.CreateAssetAccessRequestBody;
import com.prokarma.pkmst.model.CreateAssetAccessRequestResponse;
import com.prokarma.pkmst.model.CreateAssetInvitesRequest;
import com.prokarma.pkmst.model.CreateInvitesResultsResponseArray;
import com.prokarma.pkmst.model.CreateMembershipOrPartnershipInvitesBody;
import com.prokarma.pkmst.model.DeleteInvitesResultsResponseArray;
import com.prokarma.pkmst.model.Error;
import com.prokarma.pkmst.model.GetInvites200Response;
import com.prokarma.pkmst.model.InviteType;
import java.util.List;
import com.prokarma.pkmst.model.RespondToInvitesResponseArray;
import com.prokarma.pkmst.model.UpdateInvitesResultsResponseArray;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.http.ResponseEntity;
import org.springframework.web.multipart.MultipartFile;

/**
 * API tests for BusinessAccessInviteApi
 */
@Ignore
public class BusinessAccessInviteApiTest {

    private final ObjectMapper objectMapper = new ObjectMapper();

    private final BusinessAccessInviteApi api = new BusinessAccessInviteApiController(objectMapper);

    private final String accept = "application/json";

    
    /**
     * Create a request to access an existing partner&#39;s assets.
     *
     * Create a request to access an existing partner&#39;s assets with the specified permissions. The request will be sent to the partner for approval. The assets that can be requested are ad accounts and profiles.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void assetAccessRequestsCreateTest() throws Exception {
        String businessId = null;
        CreateAssetAccessRequestBody createAssetAccessRequestBody = null;
    ResponseEntity<CreateAssetAccessRequestResponse> response = api.assetAccessRequestsCreate(businessId, createAssetAccessRequestBody , accept);

        // TODO: test validations
    }
    
    /**
     * Cancel invites/requests
     *
     * Cancel membership/partnership invites and/or requests.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void cancelInvitesOrRequestsTest() throws Exception {
        String businessId = null;
        CancelInvitesBody cancelInvitesBody = null;
    ResponseEntity<DeleteInvitesResultsResponseArray> response = api.cancelInvitesOrRequests(businessId, cancelInvitesBody , accept);

        // TODO: test validations
    }
    
    /**
     * Update invite/request with an asset permission
     *
     * Assign asset permissions information to an existing invite/request. Can be used to: - Request access to a partner&#39;s asset. Note: This is only for when no existing partnership exists. If an existing   partnership exists, use \&quot;Create a request to access an existing partner&#39;s assets\&quot; to request access to your   partner&#39;s assets.     - invite_type&#x3D;\&quot;PARTNER_REQUEST\&quot; - Invite a partner to access your business assets. Note: This is only for when there is no existing partnership.   If there is an existing partnership, use \&quot;Assign/Update partner asset permissions\&quot; to assign a partner access to   new assets.     - invite_type&#x3D;\&quot;PARTNER_INVITE\&quot; - Invite a member to access your business assets. Note: This is only for when there is no existing membership.   If there is an existing membership, use \&quot;Assign/Update member asset permissions\&quot; to assign a member access to new   assets.     - invite_type&#x3D;\&quot;MEMBER_INVITE\&quot;  To learn more about permission levels, visit https://help.pinterest.com/en/business/article/business-manager-overview.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createAssetInvitesTest() throws Exception {
        String businessId = null;
        CreateAssetInvitesRequest createAssetInvitesRequest = null;
    ResponseEntity<UpdateInvitesResultsResponseArray> response = api.createAssetInvites(businessId, createAssetInvitesRequest , accept);

        // TODO: test validations
    }
    
    /**
     * Create invites or requests
     *
     * Create batch invites or requests. Can create batch invites or requests as described below. - Invite members to join the business. This would required specifying the following:     - invite_type&#x3D;\&quot;MEMBER_INVITE\&quot;     - business_role&#x3D;\&quot;EMPLOYEE\&quot; OR business_role&#x3D;\&quot;BIZ_ADMIN\&quot; (To learn more about business roles, visit     https://help.pinterest.com/en/business/article/profile-permissions-in-business-access.)     - members - Invite partners to access your business assets. This would require specifying the following:     - invite_type&#x3D;\&quot;PARTNER_INVITE\&quot;     - business_role&#x3D;\&quot;PARTNER\&quot;     - partners - Request to be a partner so you can access their assets. This would require specifying the following:     - invite_type&#x3D;\&quot;PARTNER_REQUEST\&quot;     - business_role&#x3D;\&quot;PARTNER\&quot;     - partners
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createMembershipOrPartnershipInvitesTest() throws Exception {
        String businessId = null;
        CreateMembershipOrPartnershipInvitesBody createMembershipOrPartnershipInvitesBody = null;
    ResponseEntity<CreateInvitesResultsResponseArray> response = api.createMembershipOrPartnershipInvites(businessId, createMembershipOrPartnershipInvitesBody , accept);

        // TODO: test validations
    }
    
    /**
     * Get invites/requests
     *
     * Get the membership/partnership invites and/or requests for the authorized user.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getInvitesTest() throws Exception {
        String businessId = null;
        Boolean isMember = null;
        List<String> inviteStatus = null;
        InviteType inviteType = null;
        String bookmark = null;
        Integer pageSize = null;
    ResponseEntity<GetInvites200Response> response = api.getInvites(businessId, isMember, inviteStatus, inviteType, bookmark, pageSize , accept);

        // TODO: test validations
    }
    
    /**
     * Accept or decline an invite/request
     *
     * Accept or decline invites or requests.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void respondBusinessAccessInvitesTest() throws Exception {
        AuthRespondInvitesBody authRespondInvitesBody = null;
    ResponseEntity<RespondToInvitesResponseArray> response = api.respondBusinessAccessInvites(authRespondInvitesBody , accept);

        // TODO: test validations
    }
    
}
