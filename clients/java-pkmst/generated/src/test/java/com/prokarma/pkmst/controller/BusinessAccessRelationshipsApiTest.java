/*
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.prokarma.pkmst.controller;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.prokarma.pkmst.model.DeletePartnersRequest;
import com.prokarma.pkmst.model.DeletePartnersResponse;
import com.prokarma.pkmst.model.DeletedMembersResponse;
import com.prokarma.pkmst.model.Error;
import com.prokarma.pkmst.model.GetBusinessEmployers200Response;
import com.prokarma.pkmst.model.GetBusinessMembers200Response;
import com.prokarma.pkmst.model.GetBusinessPartners200Response;
import java.util.List;
import com.prokarma.pkmst.model.MemberBusinessRole;
import com.prokarma.pkmst.model.MembersToDeleteBody;
import com.prokarma.pkmst.model.PartnerType;
import com.prokarma.pkmst.model.UpdateMemberBusinessRoleBody;
import com.prokarma.pkmst.model.UpdateMemberResultsResponseArray;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.http.ResponseEntity;
import org.springframework.web.multipart.MultipartFile;

/**
 * API tests for BusinessAccessRelationshipsApi
 */
@Ignore
public class BusinessAccessRelationshipsApiTest {

    private final ObjectMapper objectMapper = new ObjectMapper();

    private final BusinessAccessRelationshipsApi api = new BusinessAccessRelationshipsApiController(objectMapper);

    private final String accept = "application/json";

    
    /**
     * Terminate business memberships
     *
     * Terminate memberships between the specified members and your business.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteBusinessMembershipTest() throws Exception {
        String businessId = null;
        MembersToDeleteBody membersToDeleteBody = null;
    ResponseEntity<DeletedMembersResponse> response = api.deleteBusinessMembership(businessId, membersToDeleteBody , accept);

        // TODO: test validations
    }
    
    /**
     * Terminate business partnerships
     *
     * Terminate partnerships between the specified partners and your business. Note: You may only batch terminate partners of the same partner type.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteBusinessPartnersTest() throws Exception {
        String businessId = null;
        DeletePartnersRequest deletePartnersRequest = null;
    ResponseEntity<DeletePartnersResponse> response = api.deleteBusinessPartners(businessId, deletePartnersRequest , accept);

        // TODO: test validations
    }
    
    /**
     * List business employers for user
     *
     * Get all of the viewing user&#39;s business employers.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getBusinessEmployersTest() throws Exception {
        Integer pageSize = null;
        String bookmark = null;
    ResponseEntity<GetBusinessEmployers200Response> response = api.getBusinessEmployers(pageSize, bookmark , accept);

        // TODO: test validations
    }
    
    /**
     * Get business members
     *
     * Get all members of the specified business. The return response will include the member&#39;s business_role and assets they have access to if assets_summary&#x3D;TRUE
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getBusinessMembersTest() throws Exception {
        String businessId = null;
        Boolean assetsSummary = null;
        List<MemberBusinessRole> businessRoles = null;
        String memberIds = null;
        Integer startIndex = null;
        String bookmark = null;
        Integer pageSize = null;
    ResponseEntity<GetBusinessMembers200Response> response = api.getBusinessMembers(businessId, assetsSummary, businessRoles, memberIds, startIndex, bookmark, pageSize , accept);

        // TODO: test validations
    }
    
    /**
     * Get business partners
     *
     * Get all partners of the specified business.  If the assets_summary&#x3D;TRUE and: - partner_type&#x3D;INTERNAL, the business assets returned are your business assets the partner has access to. - partner_type&#x3D;EXTERNAL, the business assets returned are your partner&#39;s business assets the partner has granted you   access to.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getBusinessPartnersTest() throws Exception {
        String businessId = null;
        Boolean assetsSummary = null;
        PartnerType partnerType = null;
        String partnerIds = null;
        Integer startIndex = null;
        Integer pageSize = null;
        String bookmark = null;
    ResponseEntity<GetBusinessPartners200Response> response = api.getBusinessPartners(businessId, assetsSummary, partnerType, partnerIds, startIndex, pageSize, bookmark , accept);

        // TODO: test validations
    }
    
    /**
     * Update member&#39;s business role
     *
     * Update a member&#39;s business role within the business.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateBusinessMembershipsTest() throws Exception {
        String businessId = null;
        List<UpdateMemberBusinessRoleBody> updateMemberBusinessRoleBody = null;
    ResponseEntity<UpdateMemberResultsResponseArray> response = api.updateBusinessMemberships(businessId, updateMemberBusinessRoleBody , accept);

        // TODO: test validations
    }
    
}
