/*
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.prokarma.pkmst.controller;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.prokarma.pkmst.model.Error;
import com.prokarma.pkmst.model.MediaList200Response;
import com.prokarma.pkmst.model.MediaUpload;
import com.prokarma.pkmst.model.MediaUploadDetails;
import com.prokarma.pkmst.model.MediaUploadRequest;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.http.ResponseEntity;
import org.springframework.web.multipart.MultipartFile;

/**
 * API tests for MediaApi
 */
@Ignore
public class MediaApiTest {

    private final ObjectMapper objectMapper = new ObjectMapper();

    private final MediaApi api = new MediaApiController(objectMapper);

    private final String accept = "application/json";

    
    /**
     * Register media upload
     *
     * Register your intent to upload media  The response includes all of the information needed to upload the media to Pinterest.  To upload the media, make an HTTP POST request (using &lt;tt&gt;curl&lt;/tt&gt;, for example) to &lt;tt&gt;upload_url&lt;/tt&gt; using the &lt;tt&gt;Content-Type&lt;/tt&gt; header value. Send the media file&#39;s contents as the request&#39;s &lt;tt&gt;file&lt;/tt&gt; parameter and also include all of the parameters from &lt;tt&gt;upload_parameters&lt;/tt&gt;.  &lt;strong&gt;&lt;a href&#x3D;&#39;/docs/api-features/creating-boards-and-pins/#creating-video-pins&#39;&gt;Learn more&lt;/a&gt;&lt;/strong&gt; about video Pin creation.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void mediaCreateTest() throws Exception {
        MediaUploadRequest mediaUploadRequest = null;
    ResponseEntity<MediaUpload> response = api.mediaCreate(mediaUploadRequest , accept);

        // TODO: test validations
    }
    
    /**
     * Get media upload details
     *
     * Get details for a registered media upload, including its current status.  &lt;strong&gt;&lt;a href&#x3D;&#39;/docs/api-features/creating-boards-and-pins/#creating-video-pins&#39;&gt;Learn more&lt;/a&gt;&lt;/strong&gt; about video Pin creation.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void mediaGetTest() throws Exception {
        String mediaId = null;
    ResponseEntity<MediaUploadDetails> response = api.mediaGet(mediaId , accept);

        // TODO: test validations
    }
    
    /**
     * List media uploads
     *
     * List media uploads filtered by given parameters.  &lt;strong&gt;&lt;a href&#x3D;&#39;/docs/api-features/creating-boards-and-pins/#creating-video-pins&#39;&gt;Learn more&lt;/a&gt;&lt;/strong&gt; about video Pin creation.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void mediaListTest() throws Exception {
        String bookmark = null;
        Integer pageSize = null;
    ResponseEntity<MediaList200Response> response = api.mediaList(bookmark, pageSize , accept);

        // TODO: test validations
    }
    
}
