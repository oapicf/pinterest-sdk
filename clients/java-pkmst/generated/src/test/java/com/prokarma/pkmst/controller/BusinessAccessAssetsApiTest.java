/*
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.prokarma.pkmst.controller;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.prokarma.pkmst.model.BusinessAssetMembersGet200Response;
import com.prokarma.pkmst.model.BusinessAssetPartnersGet200Response;
import com.prokarma.pkmst.model.BusinessAssetsGet200Response;
import com.prokarma.pkmst.model.BusinessMemberAssetsGet200Response;
import com.prokarma.pkmst.model.BusinessMembersAssetAccessDeleteRequest;
import com.prokarma.pkmst.model.BusinessPartnerAssetAccessGet200Response;
import com.prokarma.pkmst.model.CreateAssetGroupBody;
import com.prokarma.pkmst.model.CreateAssetGroupResponse;
import com.prokarma.pkmst.model.DeleteAssetGroupBody;
import com.prokarma.pkmst.model.DeleteAssetGroupResponse;
import com.prokarma.pkmst.model.DeleteMemberAccessResultsResponseArray;
import com.prokarma.pkmst.model.DeletePartnerAssetAccessBody;
import com.prokarma.pkmst.model.DeletePartnerAssetsResultsResponseArray;
import com.prokarma.pkmst.model.Error;
import java.util.List;
import com.prokarma.pkmst.model.PartnerType;
import com.prokarma.pkmst.model.PermissionsWithOwner;
import com.prokarma.pkmst.model.UpdateAssetGroupBody;
import com.prokarma.pkmst.model.UpdateAssetGroupResponse;
import com.prokarma.pkmst.model.UpdateMemberAssetAccessBody;
import com.prokarma.pkmst.model.UpdateMemberAssetsResultsResponseArray;
import com.prokarma.pkmst.model.UpdatePartnerAssetAccessBody;
import com.prokarma.pkmst.model.UpdatePartnerAssetsResultsResponseArray;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.http.ResponseEntity;
import org.springframework.web.multipart.MultipartFile;

/**
 * API tests for BusinessAccessAssetsApi
 */
@Ignore
public class BusinessAccessAssetsApiTest {

    private final ObjectMapper objectMapper = new ObjectMapper();

    private final BusinessAccessAssetsApi api = new BusinessAccessAssetsApiController(objectMapper);

    private final String accept = "application/json";

    
    /**
     * Create a new asset group.
     *
     * Create a new asset group with the specified parameters. - An &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/asset-groups\&quot;&gt;asset group&lt;/a&gt; is a custom group of assets based on how youâ€™d like to manage your accounts.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void assetGroupCreateTest() throws Exception {
        String businessId = null;
        CreateAssetGroupBody createAssetGroupBody = null;
    ResponseEntity<CreateAssetGroupResponse> response = api.assetGroupCreate(businessId, createAssetGroupBody , accept);

        // TODO: test validations
    }
    
    /**
     * Delete asset groups.
     *
     * Delete a batch of asset groups.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void assetGroupDeleteTest() throws Exception {
        String businessId = null;
        DeleteAssetGroupBody deleteAssetGroupBody = null;
    ResponseEntity<DeleteAssetGroupResponse> response = api.assetGroupDelete(businessId, deleteAssetGroupBody , accept);

        // TODO: test validations
    }
    
    /**
     * Update asset groups.
     *
     * Update a batch of asset groups with the specified parameters.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void assetGroupUpdateTest() throws Exception {
        String businessId = null;
        UpdateAssetGroupBody updateAssetGroupBody = null;
    ResponseEntity<UpdateAssetGroupResponse> response = api.assetGroupUpdate(businessId, updateAssetGroupBody , accept);

        // TODO: test validations
    }
    
    /**
     * Get members with access to asset
     *
     * Get all the members the requesting business has granted access to on the given asset.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void businessAssetMembersGetTest() throws Exception {
        String businessId = null;
        String assetId = null;
        String bookmark = null;
        Integer pageSize = null;
        Integer startIndex = null;
    ResponseEntity<BusinessAssetMembersGet200Response> response = api.businessAssetMembersGet(businessId, assetId, bookmark, pageSize, startIndex , accept);

        // TODO: test validations
    }
    
    /**
     * Get partners with access to asset
     *
     * Get all the partners the requesting business has granted access to on the given asset. Note: If the asset has been shared with you, an empty array will be returned. This is because an asset shared with you cannot be shared with a different partner.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void businessAssetPartnersGetTest() throws Exception {
        String businessId = null;
        String assetId = null;
        Integer startIndex = null;
        String bookmark = null;
        Integer pageSize = null;
    ResponseEntity<BusinessAssetPartnersGet200Response> response = api.businessAssetPartnersGet(businessId, assetId, startIndex, bookmark, pageSize , accept);

        // TODO: test validations
    }
    
    /**
     * List business assets
     *
     * Get all the assets the requesting business has access to. This includes assets the business owns and assets the business has access to through partnerships.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void businessAssetsGetTest() throws Exception {
        String businessId = null;
        List<PermissionsWithOwner> permissions = null;
        String childAssetId = null;
        String assetGroupId = null;
        String assetType = null;
        Integer startIndex = null;
        String bookmark = null;
        Integer pageSize = null;
    ResponseEntity<BusinessAssetsGet200Response> response = api.businessAssetsGet(businessId, permissions, childAssetId, assetGroupId, assetType, startIndex, bookmark, pageSize , accept);

        // TODO: test validations
    }
    
    /**
     * Get assets assigned to a member
     *
     * Get assets on which you assigned asset permissions to the given member. Can be used to: - get all assets, regardless of asset type or - get assets of one asset type by using the asset_type query. The return response will include the permissions the member has to that asset and the asset type.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void businessMemberAssetsGetTest() throws Exception {
        String businessId = null;
        String memberId = null;
        String assetType = null;
        Integer startIndex = null;
        String bookmark = null;
        Integer pageSize = null;
    ResponseEntity<BusinessMemberAssetsGet200Response> response = api.businessMemberAssetsGet(businessId, memberId, assetType, startIndex, bookmark, pageSize , accept);

        // TODO: test validations
    }
    
    /**
     * Delete member access to asset
     *
     * Terminate multiple members&#39; access to an asset.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void businessMembersAssetAccessDeleteTest() throws Exception {
        String businessId = null;
        BusinessMembersAssetAccessDeleteRequest businessMembersAssetAccessDeleteRequest = null;
    ResponseEntity<DeleteMemberAccessResultsResponseArray> response = api.businessMembersAssetAccessDelete(businessId, businessMembersAssetAccessDeleteRequest , accept);

        // TODO: test validations
    }
    
    /**
     * Assign/Update member asset permissions
     *
     * Grant multiple members access to assets and/or update multiple member&#39;s exisiting permissions to an asset. Note: Not all listed permissions are applicable to each asset type. For example, PROFILE_PUBLISHER would not be applicable to an asset of type AD_ACCOUNT. The permission level PROFILE_PUBLISHER is only available to an asset of the type PROFILE. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void businessMembersAssetAccessUpdateTest() throws Exception {
        String businessId = null;
        UpdateMemberAssetAccessBody updateMemberAssetAccessBody = null;
    ResponseEntity<UpdateMemberAssetsResultsResponseArray> response = api.businessMembersAssetAccessUpdate(businessId, updateMemberAssetAccessBody , accept);

        // TODO: test validations
    }
    
    /**
     * Get assets assigned to a partner or assets assigned by a partner
     *
     * Can be used to get the business assets your partner has granted you access to or the business assets you have granted your partner access to. If you specify: - partner_type&#x3D;INTERNAL, you will retrieve your business assets that the partner has access to. - partner_type&#x3D;EXTERNAL, you will retrieve the partner&#39;s business assets that the partner has granted you access to.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void businessPartnerAssetAccessGetTest() throws Exception {
        String businessId = null;
        String partnerId = null;
        PartnerType partnerType = null;
        String assetType = null;
        Integer startIndex = null;
        Integer pageSize = null;
        String bookmark = null;
    ResponseEntity<BusinessPartnerAssetAccessGet200Response> response = api.businessPartnerAssetAccessGet(businessId, partnerId, partnerType, assetType, startIndex, pageSize, bookmark , accept);

        // TODO: test validations
    }
    
    /**
     * Delete partner access to asset
     *
     * Terminate multiple partners&#39; access to an asset. If - partner_type&#x3D;INTERNAL: You will terminate a partner&#39;s asset access to your business assets. - partner_type&#x3D;EXTERNAL: You will terminate your own access to your partner&#39;s business assets.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deletePartnerAssetAccessHandlerImplTest() throws Exception {
        String businessId = null;
        DeletePartnerAssetAccessBody deletePartnerAssetAccessBody = null;
    ResponseEntity<DeletePartnerAssetsResultsResponseArray> response = api.deletePartnerAssetAccessHandlerImpl(businessId, deletePartnerAssetAccessBody , accept);

        // TODO: test validations
    }
    
    /**
     * Assign/Update partner asset permissions
     *
     * Grant multiple partners access to assets and/or update multiple partner&#39;s exisiting permissions to an asset. If your partner already had permissions on the asset, they will be overriden with the new permissions you assign to them. To learn more about permission levels, visit https://help.pinterest.com/en/business/article/business-manager-overview  Note: Not all listed permissions are applicable to each asset type. For example, PROFILE_PUBLISHER would not be applicable to an asset of type AD_ACCOUNT. The permission level PROFILE_PUBLISHER is only available to an asset of the type PROFILE.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updatePartnerAssetAccessHandlerImplTest() throws Exception {
        String businessId = null;
        UpdatePartnerAssetAccessBody updatePartnerAssetAccessBody = null;
    ResponseEntity<UpdatePartnerAssetsResultsResponseArray> response = api.updatePartnerAssetAccessHandlerImpl(businessId, updatePartnerAssetAccessBody , accept);

        // TODO: test validations
    }
    
}
