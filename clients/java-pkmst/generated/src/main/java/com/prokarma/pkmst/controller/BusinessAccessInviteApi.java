/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.9.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.prokarma.pkmst.controller;

import com.prokarma.pkmst.model.AuthRespondInvitesBody;
import com.prokarma.pkmst.model.CancelInvitesBody;
import com.prokarma.pkmst.model.CreateAssetAccessRequestBody;
import com.prokarma.pkmst.model.CreateAssetAccessRequestResponse;
import com.prokarma.pkmst.model.CreateAssetInvitesRequest;
import com.prokarma.pkmst.model.CreateInvitesResultsResponseArray;
import com.prokarma.pkmst.model.CreateMembershipOrPartnershipInvitesBody;
import com.prokarma.pkmst.model.DeleteInvitesResultsResponseArray;
import com.prokarma.pkmst.model.Error;
import com.prokarma.pkmst.model.GetInvites200Response;
import com.prokarma.pkmst.model.InviteType;
import java.util.List;
import com.prokarma.pkmst.model.RespondToInvitesResponseArray;
import com.prokarma.pkmst.model.UpdateInvitesResultsResponseArray;

import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import java.io.IOException;

import java.util.List;
/**
 * Provides the info about api methods
 * @author pkmst
 *
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaPKMSTServerCodegen", date = "2024-11-05T02:04:39.133647094Z[Etc/UTC]", comments = "Generator version: 7.9.0")
@Api(value = "BusinessAccessInvite", description = "the BusinessAccessInvite API")
public interface BusinessAccessInviteApi {

    @ApiOperation(value = "Create a request to access an existing partner's assets.", notes = "Create a request to access an existing partner's assets with the specified permissions. The request will be sent to the partner for approval. The assets that can be requested are ad accounts and profiles.", response = CreateAssetAccessRequestResponse.class, authorizations = {
        @Authorization(value = "pinterest_oauth2", scopes = {
            @AuthorizationScope(scope = "biz_access:read", description = "See business access data"),
            @AuthorizationScope(scope = "biz_access:write", description = "Create, update, or delete business access data") })
         }, tags={ "business_access_invite", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = CreateAssetAccessRequestResponse.class),
        @ApiResponse(code = 200, message = "Unexpected error", response = Error.class) })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/businesses/{business_id}/requests/assets/access",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<CreateAssetAccessRequestResponse> assetAccessRequestsCreate(@ApiParam(value = "Unique identifier of the requesting business.",required=true ) @PathVariable("business_id") String businessId,@ApiParam(value = "" ,required=true )   @RequestBody CreateAssetAccessRequestBody createAssetAccessRequestBody, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "Cancel invites/requests", notes = "Cancel membership/partnership invites and/or requests.", response = DeleteInvitesResultsResponseArray.class, authorizations = {
        @Authorization(value = "pinterest_oauth2", scopes = {
            @AuthorizationScope(scope = "biz_access:write", description = "Create, update, or delete business access data") })
         }, tags={ "business_access_invite", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = DeleteInvitesResultsResponseArray.class),
        @ApiResponse(code = 200, message = "Unexpected error", response = Error.class) })
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/businesses/{business_id}/invites",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<DeleteInvitesResultsResponseArray> cancelInvitesOrRequests(@ApiParam(value = "Business id",required=true ) @PathVariable("business_id") String businessId,@ApiParam(value = "A list with invite ids" ,required=true )   @RequestBody CancelInvitesBody cancelInvitesBody, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "Update invite/request with an asset permission", notes = "Assign asset permissions information to an existing invite/request. Can be used to: - Request access to a partner's asset. Note: This is only for when no existing partnership exists. If an existing   partnership exists, use \"Create a request to access an existing partner's assets\" to request access to your   partner's assets.     - invite_type=\"PARTNER_REQUEST\" - Invite a partner to access your business assets. Note: This is only for when there is no existing partnership.   If there is an existing partnership, use \"Assign/Update partner asset permissions\" to assign a partner access to   new assets.     - invite_type=\"PARTNER_INVITE\" - Invite a member to access your business assets. Note: This is only for when there is no existing membership.   If there is an existing membership, use \"Assign/Update member asset permissions\" to assign a member access to new   assets.     - invite_type=\"MEMBER_INVITE\"  To learn more about permission levels, visit https://help.pinterest.com/en/business/article/business-manager-overview.", response = UpdateInvitesResultsResponseArray.class, authorizations = {
        @Authorization(value = "pinterest_oauth2", scopes = {
            @AuthorizationScope(scope = "biz_access:read", description = "See business access data"),
            @AuthorizationScope(scope = "biz_access:write", description = "Create, update, or delete business access data") })
         }, tags={ "business_access_invite", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = UpdateInvitesResultsResponseArray.class),
        @ApiResponse(code = 200, message = "Unexpected error", response = Error.class) })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/businesses/{business_id}/invites/assets/access",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<UpdateInvitesResultsResponseArray> createAssetInvites(@ApiParam(value = "Unique identifier of the requesting business.",required=true ) @PathVariable("business_id") String businessId,@ApiParam(value = "A list of invites/requests together with the asset permissions to be assigned to the invite/request. " ,required=true )   @RequestBody CreateAssetInvitesRequest createAssetInvitesRequest, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "Create invites or requests", notes = "Create batch invites or requests. Can create batch invites or requests as described below. - Invite members to join the business. This would required specifying the following:     - invite_type=\"MEMBER_INVITE\"     - business_role=\"EMPLOYEE\" OR business_role=\"BIZ_ADMIN\" (To learn more about business roles, visit     https://help.pinterest.com/en/business/article/profile-permissions-in-business-access.)     - members - Invite partners to access your business assets. This would require specifying the following:     - invite_type=\"PARTNER_INVITE\"     - business_role=\"PARTNER\"     - partners - Request to be a partner so you can access their assets. This would require specifying the following:     - invite_type=\"PARTNER_REQUEST\"     - business_role=\"PARTNER\"     - partners", response = CreateInvitesResultsResponseArray.class, authorizations = {
        @Authorization(value = "pinterest_oauth2", scopes = {
            @AuthorizationScope(scope = "biz_access:write", description = "Create, update, or delete business access data") })
         }, tags={ "business_access_invite", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = CreateInvitesResultsResponseArray.class),
        @ApiResponse(code = 200, message = "Unexpected error", response = Error.class) })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/businesses/{business_id}/invites",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<CreateInvitesResultsResponseArray> createMembershipOrPartnershipInvites(@ApiParam(value = "Business id",required=true ) @PathVariable("business_id") String businessId,@ApiParam(value = "An object with the properties: invite_type, partners, members, business_role" ,required=true )   @RequestBody CreateMembershipOrPartnershipInvitesBody createMembershipOrPartnershipInvitesBody, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "Get invites/requests", notes = "Get the membership/partnership invites and/or requests for the authorized user.", response = GetInvites200Response.class, authorizations = {
        @Authorization(value = "pinterest_oauth2", scopes = {
            @AuthorizationScope(scope = "biz_access:read", description = "See business access data") })
         }, tags={ "business_access_invite", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = GetInvites200Response.class),
        @ApiResponse(code = 200, message = "Unexpected error", response = Error.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/businesses/{business_id}/invites",
        produces = { "application/json" }
    )
    ResponseEntity<GetInvites200Response> getInvites(@ApiParam(value = "Unique identifier of the requesting business.",required=true ) @PathVariable("business_id") String businessId,@ApiParam(value = "A boolean field to indicate whether the invite is to create a partnership or a membership.", defaultValue = "true")  @RequestParam(value = "is_member", required = false, defaultValue="true") Boolean isMember,@ApiParam(value = "A list of invite statuses to filter invites by. Only invites whose status is in the provided statuses will be returned.", allowableValues = "PENDING, EXPIRED")  @RequestParam(value = "invite_status", required = false) List<String> inviteStatus,@ApiParam(value = "Invite type to filter invites by. Only invites of the specified type will be returned.", allowableValues = "MEMBER_INVITE, PARTNER_INVITE, PARTNER_REQUEST")  @RequestParam(value = "invite_type", required = false) InviteType inviteType,@ApiParam(value = "Cursor used to fetch the next page of items")  @RequestParam(value = "bookmark", required = false) String bookmark,@ApiParam(value = "Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/reference/pagination/'>Pagination</a> for more information.", defaultValue = "25")  @RequestParam(value = "page_size", required = false, defaultValue="25") Integer pageSize, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "Accept or decline an invite/request", notes = "Accept or decline invites or requests.", response = RespondToInvitesResponseArray.class, authorizations = {
        @Authorization(value = "pinterest_oauth2", scopes = {
            @AuthorizationScope(scope = "biz_access:read", description = "See business access data"),
            @AuthorizationScope(scope = "biz_access:write", description = "Create, update, or delete business access data") })
         }, tags={ "business_access_invite", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = RespondToInvitesResponseArray.class),
        @ApiResponse(code = 200, message = "Unexpected error", response = Error.class) })
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/businesses/invites",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<RespondToInvitesResponseArray> respondBusinessAccessInvites(@ApiParam(value = "" ,required=true )   @RequestBody AuthRespondInvitesBody authRespondInvitesBody, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;

}
