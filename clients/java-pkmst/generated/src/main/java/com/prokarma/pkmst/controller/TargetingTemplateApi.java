/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.9.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.prokarma.pkmst.controller;

import com.prokarma.pkmst.model.Error;
import com.prokarma.pkmst.model.TargetingTemplateCreate;
import com.prokarma.pkmst.model.TargetingTemplateGetResponseData;
import com.prokarma.pkmst.model.TargetingTemplateList200Response;
import com.prokarma.pkmst.model.TargetingTemplateUpdateRequest;

import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import java.io.IOException;

import java.util.List;
/**
 * Provides the info about api methods
 * @author pkmst
 *
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaPKMSTServerCodegen", date = "2024-11-05T02:04:39.133647094Z[Etc/UTC]", comments = "Generator version: 7.9.0")
@Api(value = "TargetingTemplate", description = "the TargetingTemplate API")
public interface TargetingTemplateApi {

    @ApiOperation(value = "Create targeting templates", notes = "<p>Targeting templates allow advertisers to save a set of targeting details including audience lists,  keywords & interest, demographics, and placements to use more than once during the campaign creation process.</p>  <p>Templates can be used to build out basic targeting criteria that you plan to use across campaigns and to reuse   performance targeting from prior campaigns for new campaigns.</p>", response = TargetingTemplateGetResponseData.class, authorizations = {
        @Authorization(value = "pinterest_oauth2", scopes = {
            @AuthorizationScope(scope = "ads:write", description = "Create, update, or delete ads, ad groups, campaigns etc.") })
         }, tags={ "targeting_template", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = TargetingTemplateGetResponseData.class),
        @ApiResponse(code = 400, message = "Invalid ad account id.", response = Error.class),
        @ApiResponse(code = 200, message = "Unexpected error", response = Error.class) })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/ad_accounts/{ad_account_id}/targeting_templates",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<TargetingTemplateGetResponseData> targetingTemplateCreate(@ApiParam(value = "Unique identifier of an ad account.",required=true ) @PathVariable("ad_account_id") String adAccountId,@ApiParam(value = "targeting template creation entity" ,required=true )   @RequestBody TargetingTemplateCreate targetingTemplateCreate, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "List targeting templates", notes = "Get a list of the targeting templates in the specified <code>ad_account_id</code>", response = TargetingTemplateList200Response.class, authorizations = {
        @Authorization(value = "pinterest_oauth2", scopes = {
            @AuthorizationScope(scope = "ads:read", description = "See all of your advertising data, including ads, ad groups, campaigns etc.") })
         }, tags={ "targeting_template", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = TargetingTemplateList200Response.class),
        @ApiResponse(code = 400, message = "Invalid ad account id.", response = Error.class),
        @ApiResponse(code = 200, message = "Unexpected error", response = Error.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/ad_accounts/{ad_account_id}/targeting_templates",
        produces = { "application/json" }
    )
    ResponseEntity<TargetingTemplateList200Response> targetingTemplateList(@ApiParam(value = "Unique identifier of an ad account.",required=true ) @PathVariable("ad_account_id") String adAccountId,@ApiParam(value = "The order in which to sort the items returned: “ASCENDING” or “DESCENDING” by ID. Note that higher-value IDs are associated with more-recently added items.", allowableValues = "ASCENDING, DESCENDING")  @RequestParam(value = "order", required = false) String order,@ApiParam(value = "Include audience sizing in result or not", defaultValue = "false")  @RequestParam(value = "include_sizing", required = false, defaultValue="false") Boolean includeSizing,@ApiParam(value = "Search keyword for targeting templates")  @RequestParam(value = "search_query", required = false) String searchQuery,@ApiParam(value = "Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/reference/pagination/'>Pagination</a> for more information.", defaultValue = "25")  @RequestParam(value = "page_size", required = false, defaultValue="25") Integer pageSize,@ApiParam(value = "Cursor used to fetch the next page of items")  @RequestParam(value = "bookmark", required = false) String bookmark, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "Update targeting templates", notes = "<p>Update the targeting template given advertiser ID and targeting template ID</p>", response = Void.class, authorizations = {
        @Authorization(value = "pinterest_oauth2", scopes = {
            @AuthorizationScope(scope = "ads:write", description = "Create, update, or delete ads, ad groups, campaigns etc.") })
         }, tags={ "targeting_template", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success"),
        @ApiResponse(code = 400, message = "Invalid ad account id.", response = Error.class),
        @ApiResponse(code = 200, message = "Unexpected error", response = Error.class) })
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/ad_accounts/{ad_account_id}/targeting_templates",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<Void> targetingTemplateUpdate(@ApiParam(value = "Unique identifier of an ad account.",required=true ) @PathVariable("ad_account_id") String adAccountId,@ApiParam(value = "Operation type and targeting template ID" ,required=true )   @RequestBody TargetingTemplateUpdateRequest targetingTemplateUpdateRequest, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;

}
