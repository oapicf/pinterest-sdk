/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.9.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.prokarma.pkmst.controller;

import com.prokarma.pkmst.model.AdAccountCreateSubscriptionRequest;
import com.prokarma.pkmst.model.AdAccountCreateSubscriptionResponse;
import com.prokarma.pkmst.model.AdAccountGetSubscriptionResponse;
import com.prokarma.pkmst.model.AdAccountsSubscriptionsGetList200Response;
import com.prokarma.pkmst.model.Error;

import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import java.io.IOException;

import java.util.List;
/**
 * Provides the info about api methods
 * @author pkmst
 *
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaPKMSTServerCodegen", date = "2024-11-05T02:04:39.133647094Z[Etc/UTC]", comments = "Generator version: 7.9.0")
@Api(value = "LeadAds", description = "the LeadAds API")
public interface LeadAdsApi {

    @ApiOperation(value = "Delete lead ads subscription", notes = "Delete an existing lead ads webhook subscription by ID. - Only requests for the OWNER or ADMIN of the ad_account will be allowed.  <strong>This endpoint is currently in beta and not available to all apps. <a href='/docs/getting-started/beta-and-advanced-access/'>Learn more</a>.</strong>", response = Void.class, authorizations = {
        @Authorization(value = "pinterest_oauth2", scopes = {
            @AuthorizationScope(scope = "ads:write", description = "Create, update, or delete ads, ad groups, campaigns etc.") })
         }, tags={ "lead_ads", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Subscription deleted successfully"),
        @ApiResponse(code = 400, message = "Invalid input parameters.", response = Error.class),
        @ApiResponse(code = 403, message = "You are not authorized to delete this subscription.", response = Error.class),
        @ApiResponse(code = 404, message = "Subscription not found.", response = Error.class),
        @ApiResponse(code = 200, message = "Unexpected error.", response = Error.class) })
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/ad_accounts/{ad_account_id}/leads/subscriptions/{subscription_id}",
        produces = { "application/json" }
    )
    ResponseEntity<Void> adAccountsSubscriptionsDelById(@ApiParam(value = "Unique identifier of an ad account.",required=true ) @PathVariable("ad_account_id") String adAccountId,@ApiParam(value = "Unique identifier of a subscription.",required=true ) @PathVariable("subscription_id") String subscriptionId, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "Get lead ads subscription", notes = "Get a specific lead ads subscription record. - Only requests for the OWNER or ADMIN of the ad_account will be allowed.  <strong>This endpoint is currently in beta and not available to all apps. <a href='/docs/getting-started/beta-and-advanced-access/'>Learn more</a>.</strong>", response = AdAccountGetSubscriptionResponse.class, authorizations = {
        @Authorization(value = "pinterest_oauth2", scopes = {
            @AuthorizationScope(scope = "ads:read", description = "See all of your advertising data, including ads, ad groups, campaigns etc.") })
         }, tags={ "lead_ads", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = AdAccountGetSubscriptionResponse.class),
        @ApiResponse(code = 400, message = "Invalid input parameters.", response = Error.class),
        @ApiResponse(code = 403, message = "Can't access this subscription.", response = Error.class),
        @ApiResponse(code = 404, message = "Subscription not found.", response = Error.class),
        @ApiResponse(code = 200, message = "Unexpected error.", response = Error.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/ad_accounts/{ad_account_id}/leads/subscriptions/{subscription_id}",
        produces = { "application/json" }
    )
    ResponseEntity<AdAccountGetSubscriptionResponse> adAccountsSubscriptionsGetById(@ApiParam(value = "Unique identifier of an ad account.",required=true ) @PathVariable("ad_account_id") String adAccountId,@ApiParam(value = "Unique identifier of a subscription.",required=true ) @PathVariable("subscription_id") String subscriptionId, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "Get lead ads subscriptions", notes = "Get the advertiser's list of lead ads subscriptions. - Only requests for the OWNER or ADMIN of the ad_account will be allowed.  <strong>This endpoint is currently in beta and not available to all apps. <a href='/docs/getting-started/beta-and-advanced-access/'>Learn more</a>.</strong>", response = AdAccountsSubscriptionsGetList200Response.class, authorizations = {
        @Authorization(value = "pinterest_oauth2", scopes = {
            @AuthorizationScope(scope = "ads:read", description = "See all of your advertising data, including ads, ad groups, campaigns etc.") })
         }, tags={ "lead_ads", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = AdAccountsSubscriptionsGetList200Response.class),
        @ApiResponse(code = 403, message = "Can't access this subscription.", response = Error.class),
        @ApiResponse(code = 200, message = "Unexpected error.", response = Error.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/ad_accounts/{ad_account_id}/leads/subscriptions",
        produces = { "application/json" }
    )
    ResponseEntity<AdAccountsSubscriptionsGetList200Response> adAccountsSubscriptionsGetList(@ApiParam(value = "Unique identifier of an ad account.",required=true ) @PathVariable("ad_account_id") String adAccountId,@ApiParam(value = "Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/reference/pagination/'>Pagination</a> for more information.", defaultValue = "25")  @RequestParam(value = "page_size", required = false, defaultValue="25") Integer pageSize,@ApiParam(value = "Cursor used to fetch the next page of items")  @RequestParam(value = "bookmark", required = false) String bookmark, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "Create lead ads subscription", notes = "Create a lead ads webhook subscription. Subscriptions allow Pinterest to deliver lead data from Ads Manager directly to the subscriber. Subscriptions can exist for a specific lead form or at ad account level. - Only requests for the OWNER or ADMIN of the ad_account will be allowed. - Advertisers can set up multiple integrations using ad_account_id + lead_form_id but only one integration per unique records. - For data security, egress lead data is encrypted with AES-256-GCM.  <strong>This endpoint is currently in beta and not available to all apps. <a href='/docs/getting-started/beta-and-advanced-access/'>Learn more</a>.</strong>", response = AdAccountCreateSubscriptionResponse.class, authorizations = {
        @Authorization(value = "pinterest_oauth2", scopes = {
            @AuthorizationScope(scope = "ads:write", description = "Create, update, or delete ads, ad groups, campaigns etc.") })
         }, tags={ "lead_ads", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = AdAccountCreateSubscriptionResponse.class),
        @ApiResponse(code = 400, message = "Invalid input parameters.", response = Error.class),
        @ApiResponse(code = 403, message = "Can't access this subscription.", response = Error.class),
        @ApiResponse(code = 200, message = "Unexpected error.", response = Error.class) })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/ad_accounts/{ad_account_id}/leads/subscriptions",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<AdAccountCreateSubscriptionResponse> adAccountsSubscriptionsPost(@ApiParam(value = "Unique identifier of an ad account.",required=true ) @PathVariable("ad_account_id") String adAccountId,@ApiParam(value = "Subscription to create." ,required=true )   @RequestBody AdAccountCreateSubscriptionRequest adAccountCreateSubscriptionRequest, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;

}
