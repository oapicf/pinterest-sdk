/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.9.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.prokarma.pkmst.controller;

import com.prokarma.pkmst.model.DetailedError;
import com.prokarma.pkmst.model.Error;
import com.prokarma.pkmst.model.IntegrationLogsRequest;
import com.prokarma.pkmst.model.IntegrationLogsSuccessResponse;
import com.prokarma.pkmst.model.IntegrationMetadata;
import com.prokarma.pkmst.model.IntegrationRecord;
import com.prokarma.pkmst.model.IntegrationRequest;
import com.prokarma.pkmst.model.IntegrationRequestPatch;
import com.prokarma.pkmst.model.IntegrationsGetList200Response;

import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import java.io.IOException;

import java.util.List;
/**
 * Provides the info about api methods
 * @author pkmst
 *
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaPKMSTServerCodegen", date = "2024-11-05T02:04:39.133647094Z[Etc/UTC]", comments = "Generator version: 7.9.0")
@Api(value = "Integrations", description = "the Integrations API")
public interface IntegrationsApi {

    @ApiOperation(value = "Delete commerce integration", notes = "Delete commerce integration metadata for the given external business ID. Note: If you're interested in joining the beta, please reach out to your Pinterest account manager.", response = Void.class, authorizations = {
        @Authorization(value = "pinterest_oauth2", scopes = {
            @AuthorizationScope(scope = "ads:write", description = "Create, update, or delete ads, ad groups, campaigns etc.") })
         }, tags={ "integrations", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Commerce Integration deleted successfully"),
        @ApiResponse(code = 200, message = "Unexpected error.", response = Error.class) })
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/integrations/commerce/{external_business_id}",
        produces = { "application/json" }
    )
    ResponseEntity<Void> integrationsCommerceDel(@ApiParam(value = "External business ID for the integration.",required=true ) @PathVariable("external_business_id") String externalBusinessId, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "Get commerce integration", notes = "Get commerce integration metadata associated with the given external business ID. Note: If you're interested in joining the beta, please reach out to your Pinterest account manager.", response = IntegrationMetadata.class, authorizations = {
        @Authorization(value = "pinterest_oauth2", scopes = {
            @AuthorizationScope(scope = "ads:read", description = "See all of your advertising data, including ads, ad groups, campaigns etc.") })
         }, tags={ "integrations", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = IntegrationMetadata.class),
        @ApiResponse(code = 404, message = "Integration not found.", response = Error.class),
        @ApiResponse(code = 409, message = "Can't access this integration metadata.", response = Error.class),
        @ApiResponse(code = 200, message = "Unexpected error.", response = Error.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/integrations/commerce/{external_business_id}",
        produces = { "application/json" }
    )
    ResponseEntity<IntegrationMetadata> integrationsCommerceGet(@ApiParam(value = "External business ID for the integration.",required=true ) @PathVariable("external_business_id") String externalBusinessId, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "Update commerce integration", notes = "Update commerce integration metadata for the given external business ID. Note: If you're interested in joining the beta, please reach out to your Pinterest account manager.", response = IntegrationMetadata.class, authorizations = {
        @Authorization(value = "pinterest_oauth2", scopes = {
            @AuthorizationScope(scope = "ads:write", description = "Create, update, or delete ads, ad groups, campaigns etc.") })
         }, tags={ "integrations", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = IntegrationMetadata.class),
        @ApiResponse(code = 404, message = "Integration not found.", response = Error.class),
        @ApiResponse(code = 409, message = "Can't access this integration metadata.", response = Error.class),
        @ApiResponse(code = 200, message = "Unexpected error.", response = Error.class) })
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/integrations/commerce/{external_business_id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<IntegrationMetadata> integrationsCommercePatch(@ApiParam(value = "External business ID for the integration.",required=true ) @PathVariable("external_business_id") String externalBusinessId,@ApiParam(value = "Parameters to get create/update the Integration Metadata"  )   @RequestBody IntegrationRequestPatch integrationRequestPatch, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "Create commerce integration", notes = "Create commerce integration metadata to link an external business ID with a Pinterest merchant & ad account. Note: If you're interested in joining the beta, please reach out to your Pinterest account manager.", response = IntegrationMetadata.class, authorizations = {
        @Authorization(value = "pinterest_oauth2", scopes = {
            @AuthorizationScope(scope = "ads:write", description = "Create, update, or delete ads, ad groups, campaigns etc.") })
         }, tags={ "integrations", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = IntegrationMetadata.class),
        @ApiResponse(code = 404, message = "Integration not found.", response = Error.class),
        @ApiResponse(code = 409, message = "Can't access this integration metadata.", response = Error.class),
        @ApiResponse(code = 200, message = "Unexpected error.", response = Error.class) })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/integrations/commerce",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<IntegrationMetadata> integrationsCommercePost(@ApiParam(value = "Parameters to get create/update the Integration Metadata"  )   @RequestBody IntegrationRequest integrationRequest, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "Get integration metadata", notes = "Get integration metadata by ID. Note: If you're interested in joining the beta, please reach out to your Pinterest account manager.", response = IntegrationRecord.class, authorizations = {
        @Authorization(value = "pinterest_oauth2", scopes = {
            @AuthorizationScope(scope = "ads:read", description = "See all of your advertising data, including ads, ad groups, campaigns etc.") })
         }, tags={ "integrations", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = IntegrationRecord.class),
        @ApiResponse(code = 404, message = "Integration not found.", response = Error.class),
        @ApiResponse(code = 200, message = "Unexpected error.", response = Error.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/integrations/{id}",
        produces = { "application/json" }
    )
    ResponseEntity<IntegrationRecord> integrationsGetById(@ApiParam(value = "Integration ID.",required=true ) @PathVariable("id") String id, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "Get integration metadata list", notes = "Get integration metadata list. Note: If you're interested in joining the beta, please reach out to your Pinterest account manager.", response = IntegrationsGetList200Response.class, authorizations = {
        @Authorization(value = "pinterest_oauth2", scopes = {
            @AuthorizationScope(scope = "ads:read", description = "See all of your advertising data, including ads, ad groups, campaigns etc.") })
         }, tags={ "integrations", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = IntegrationsGetList200Response.class),
        @ApiResponse(code = 200, message = "Unexpected error.", response = Error.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/integrations",
        produces = { "application/json" }
    )
    ResponseEntity<IntegrationsGetList200Response> integrationsGetList(@ApiParam(value = "Cursor used to fetch the next page of items")  @RequestParam(value = "bookmark", required = false) String bookmark,@ApiParam(value = "Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/reference/pagination/'>Pagination</a> for more information.", defaultValue = "25")  @RequestParam(value = "page_size", required = false, defaultValue="25") Integer pageSize, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "Receives batched logs from integration applications.", notes = "This endpoint receives batched logs from integration applications on partner platforms. Note: If you're interested in joining the beta, please reach out to your Pinterest account manager.", response = IntegrationLogsSuccessResponse.class, authorizations = {
        @Authorization(value = "pinterest_oauth2", scopes = {
            @AuthorizationScope(scope = "ads:write", description = "Create, update, or delete ads, ad groups, campaigns etc.") })
         }, tags={ "integrations", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success.", response = IntegrationLogsSuccessResponse.class),
        @ApiResponse(code = 400, message = "Bad request.", response = DetailedError.class),
        @ApiResponse(code = 200, message = "Unexpected error", response = Error.class) })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/integrations/logs",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<IntegrationLogsSuccessResponse> integrationsLogsPost(@ApiParam(value = "Ingest log information from external integration application." ,required=true )   @RequestBody IntegrationLogsRequest integrationLogsRequest, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;

}
