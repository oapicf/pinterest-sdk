/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.9.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.prokarma.pkmst.controller;

import com.prokarma.pkmst.model.DeletePartnersRequest;
import com.prokarma.pkmst.model.DeletePartnersResponse;
import com.prokarma.pkmst.model.DeletedMembersResponse;
import com.prokarma.pkmst.model.Error;
import com.prokarma.pkmst.model.GetBusinessEmployers200Response;
import com.prokarma.pkmst.model.GetBusinessMembers200Response;
import com.prokarma.pkmst.model.GetBusinessPartners200Response;
import java.util.List;
import com.prokarma.pkmst.model.MemberBusinessRole;
import com.prokarma.pkmst.model.MembersToDeleteBody;
import com.prokarma.pkmst.model.PartnerType;
import com.prokarma.pkmst.model.UpdateMemberBusinessRoleBody;
import com.prokarma.pkmst.model.UpdateMemberResultsResponseArray;

import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import java.io.IOException;

import java.util.List;
/**
 * Provides the info about api methods
 * @author pkmst
 *
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaPKMSTServerCodegen", date = "2024-11-05T02:04:39.133647094Z[Etc/UTC]", comments = "Generator version: 7.9.0")
@Api(value = "BusinessAccessRelationships", description = "the BusinessAccessRelationships API")
public interface BusinessAccessRelationshipsApi {

    @ApiOperation(value = "Terminate business memberships", notes = "Terminate memberships between the specified members and your business.", response = DeletedMembersResponse.class, authorizations = {
        @Authorization(value = "pinterest_oauth2", scopes = {
            @AuthorizationScope(scope = "biz_access:read", description = "See business access data"),
            @AuthorizationScope(scope = "biz_access:write", description = "Create, update, or delete business access data") })
         }, tags={ "business_access_relationships", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = DeletedMembersResponse.class),
        @ApiResponse(code = 200, message = "Unexpected error", response = Error.class) })
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/businesses/{business_id}/members",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<DeletedMembersResponse> deleteBusinessMembership(@ApiParam(value = "Business id",required=true ) @PathVariable("business_id") String businessId,@ApiParam(value = "List of members with role to delete." ,required=true )   @RequestBody MembersToDeleteBody membersToDeleteBody, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "Terminate business partnerships", notes = "Terminate partnerships between the specified partners and your business. Note: You may only batch terminate partners of the same partner type.", response = DeletePartnersResponse.class, authorizations = {
        @Authorization(value = "pinterest_oauth2", scopes = {
            @AuthorizationScope(scope = "biz_access:write", description = "Create, update, or delete business access data") })
         }, tags={ "business_access_relationships", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = DeletePartnersResponse.class),
        @ApiResponse(code = 404, message = "A supplied partner id doesn't exist", response = Error.class),
        @ApiResponse(code = 200, message = "Unexpected error", response = Error.class) })
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/businesses/{business_id}/partners",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<DeletePartnersResponse> deleteBusinessPartners(@ApiParam(value = "Unique identifier of the requesting business.",required=true ) @PathVariable("business_id") String businessId,@ApiParam(value = "An object containing a \"partner_ids\" property composed of a list of partner IDs and a \"partners_type\" property specifying the type of partners to delete. " ,required=true )   @RequestBody DeletePartnersRequest deletePartnersRequest, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "List business employers for user", notes = "Get all of the viewing user's business employers.", response = GetBusinessEmployers200Response.class, authorizations = {
        @Authorization(value = "pinterest_oauth2", scopes = {
            @AuthorizationScope(scope = "biz_access:read", description = "See business access data") })
         }, tags={ "business_access_relationships", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = GetBusinessEmployers200Response.class),
        @ApiResponse(code = 200, message = "Unexpected error", response = Error.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/businesses/employers",
        produces = { "application/json" }
    )
    ResponseEntity<GetBusinessEmployers200Response> getBusinessEmployers(@ApiParam(value = "Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/reference/pagination/'>Pagination</a> for more information.", defaultValue = "25")  @RequestParam(value = "page_size", required = false, defaultValue="25") Integer pageSize,@ApiParam(value = "Cursor used to fetch the next page of items")  @RequestParam(value = "bookmark", required = false) String bookmark, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "Get business members", notes = "Get all members of the specified business. The return response will include the member's business_role and assets they have access to if assets_summary=TRUE", response = GetBusinessMembers200Response.class, authorizations = {
        @Authorization(value = "pinterest_oauth2", scopes = {
            @AuthorizationScope(scope = "biz_access:read", description = "See business access data") })
         }, tags={ "business_access_relationships", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = GetBusinessMembers200Response.class),
        @ApiResponse(code = 200, message = "Unexpected error", response = Error.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/businesses/{business_id}/members",
        produces = { "application/json" }
    )
    ResponseEntity<GetBusinessMembers200Response> getBusinessMembers(@ApiParam(value = "Unique identifier of the requesting business.",required=true ) @PathVariable("business_id") String businessId,@ApiParam(value = "Include assets summary in the response if this is true.  The assets summary returns a dictionary representing a summary of the assets for the business user ID, with information like the ad accounts and profiles the user has permissions for and what those permissions are", defaultValue = "false")  @RequestParam(value = "assets_summary", required = false, defaultValue="false") Boolean assetsSummary,@ApiParam(value = "A list of business roles to filter the members by. Only members whose roles are in the specified roles will be returned.")  @RequestParam(value = "business_roles", required = false) List<MemberBusinessRole> businessRoles,@ApiParam(value = "A list of business members ids separated by comma.")  @RequestParam(value = "member_ids", required = false) String memberIds,@ApiParam(value = "An index to start fetching the results from. Only the results starting from this index will be returned.", defaultValue = "0")  @RequestParam(value = "start_index", required = false, defaultValue="0") Integer startIndex,@ApiParam(value = "Cursor used to fetch the next page of items")  @RequestParam(value = "bookmark", required = false) String bookmark,@ApiParam(value = "Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/reference/pagination/'>Pagination</a> for more information.", defaultValue = "25")  @RequestParam(value = "page_size", required = false, defaultValue="25") Integer pageSize, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "Get business partners", notes = "Get all partners of the specified business.  If the assets_summary=TRUE and: - partner_type=INTERNAL, the business assets returned are your business assets the partner has access to. - partner_type=EXTERNAL, the business assets returned are your partner's business assets the partner has granted you   access to.", response = GetBusinessPartners200Response.class, authorizations = {
        @Authorization(value = "pinterest_oauth2", scopes = {
            @AuthorizationScope(scope = "biz_access:read", description = "See business access data") })
         }, tags={ "business_access_relationships", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = GetBusinessPartners200Response.class),
        @ApiResponse(code = 200, message = "Unexpected error", response = Error.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/businesses/{business_id}/partners",
        produces = { "application/json" }
    )
    ResponseEntity<GetBusinessPartners200Response> getBusinessPartners(@ApiParam(value = "Unique identifier of the requesting business.",required=true ) @PathVariable("business_id") String businessId,@ApiParam(value = "Include assets summary in the response if this is true.  The assets summary returns a dictionary representing a summary of the assets for the business user ID, with information like the ad accounts and profiles the user has permissions for and what those permissions are", defaultValue = "false")  @RequestParam(value = "assets_summary", required = false, defaultValue="false") Boolean assetsSummary,@ApiParam(value = "Specifies whether to fetch internal or external (shared) partners. If partner_type=INTERNAL, the asset being queried is for accesses the partner has to your business assets.<br> If partner_type=EXTERNAL, the asset being queried is for the accesses you have to the partner's business asset.", allowableValues = "INTERNAL, EXTERNAL")  @RequestParam(value = "partner_type", required = false) PartnerType partnerType,@ApiParam(value = "A list of business partner ids separated by commas used to filter the results. Only partners with the specified ids will be returned.")  @RequestParam(value = "partner_ids", required = false) String partnerIds,@ApiParam(value = "An index to start fetching the results from. Only the results starting from this index will be returned.", defaultValue = "0")  @RequestParam(value = "start_index", required = false, defaultValue="0") Integer startIndex,@ApiParam(value = "Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/reference/pagination/'>Pagination</a> for more information.", defaultValue = "25")  @RequestParam(value = "page_size", required = false, defaultValue="25") Integer pageSize,@ApiParam(value = "Cursor used to fetch the next page of items")  @RequestParam(value = "bookmark", required = false) String bookmark, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "Update member's business role", notes = "Update a member's business role within the business.", response = UpdateMemberResultsResponseArray.class, authorizations = {
        @Authorization(value = "pinterest_oauth2", scopes = {
            @AuthorizationScope(scope = "biz_access:write", description = "Create, update, or delete business access data") })
         }, tags={ "business_access_relationships", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "response", response = UpdateMemberResultsResponseArray.class),
        @ApiResponse(code = 200, message = "Unexpected error", response = Error.class) })
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/businesses/{business_id}/members",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<UpdateMemberResultsResponseArray> updateBusinessMemberships(@ApiParam(value = "Business id",required=true ) @PathVariable("business_id") String businessId,@ApiParam(value = "List of objects with the member id and the business_role." ,required=true )   @RequestBody List<UpdateMemberBusinessRoleBody> updateMemberBusinessRoleBody, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;

}
