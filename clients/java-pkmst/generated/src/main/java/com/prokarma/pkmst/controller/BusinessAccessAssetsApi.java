/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.9.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.prokarma.pkmst.controller;

import com.prokarma.pkmst.model.BusinessAssetMembersGet200Response;
import com.prokarma.pkmst.model.BusinessAssetPartnersGet200Response;
import com.prokarma.pkmst.model.BusinessAssetsGet200Response;
import com.prokarma.pkmst.model.BusinessMemberAssetsGet200Response;
import com.prokarma.pkmst.model.BusinessMembersAssetAccessDeleteRequest;
import com.prokarma.pkmst.model.BusinessPartnerAssetAccessGet200Response;
import com.prokarma.pkmst.model.CreateAssetGroupBody;
import com.prokarma.pkmst.model.CreateAssetGroupResponse;
import com.prokarma.pkmst.model.DeleteAssetGroupBody;
import com.prokarma.pkmst.model.DeleteAssetGroupResponse;
import com.prokarma.pkmst.model.DeleteMemberAccessResultsResponseArray;
import com.prokarma.pkmst.model.DeletePartnerAssetAccessBody;
import com.prokarma.pkmst.model.DeletePartnerAssetsResultsResponseArray;
import com.prokarma.pkmst.model.Error;
import java.util.List;
import com.prokarma.pkmst.model.PartnerType;
import com.prokarma.pkmst.model.PermissionsWithOwner;
import com.prokarma.pkmst.model.UpdateAssetGroupBody;
import com.prokarma.pkmst.model.UpdateAssetGroupResponse;
import com.prokarma.pkmst.model.UpdateMemberAssetAccessBody;
import com.prokarma.pkmst.model.UpdateMemberAssetsResultsResponseArray;
import com.prokarma.pkmst.model.UpdatePartnerAssetAccessBody;
import com.prokarma.pkmst.model.UpdatePartnerAssetsResultsResponseArray;

import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import java.io.IOException;

import java.util.List;
/**
 * Provides the info about api methods
 * @author pkmst
 *
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaPKMSTServerCodegen", date = "2024-11-05T02:04:39.133647094Z[Etc/UTC]", comments = "Generator version: 7.9.0")
@Api(value = "BusinessAccessAssets", description = "the BusinessAccessAssets API")
public interface BusinessAccessAssetsApi {

    @ApiOperation(value = "Create a new asset group.", notes = "Create a new asset group with the specified parameters. - An <a href=\"https://help.pinterest.com/en/business/article/asset-groups\">asset group</a> is a custom group of assets based on how youâ€™d like to manage your accounts.", response = CreateAssetGroupResponse.class, authorizations = {
        @Authorization(value = "pinterest_oauth2", scopes = {
            @AuthorizationScope(scope = "biz_access:read", description = "See business access data"),
            @AuthorizationScope(scope = "biz_access:write", description = "Create, update, or delete business access data") })
         }, tags={ "business_access_assets", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = CreateAssetGroupResponse.class),
        @ApiResponse(code = 400, message = "Invalid parameters.", response = Error.class),
        @ApiResponse(code = 200, message = "Unexpected error", response = Error.class) })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/businesses/{business_id}/asset_groups",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<CreateAssetGroupResponse> assetGroupCreate(@ApiParam(value = "Unique identifier of the requesting business.",required=true ) @PathVariable("business_id") String businessId,@ApiParam(value = "" ,required=true )   @RequestBody CreateAssetGroupBody createAssetGroupBody, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "Delete asset groups.", notes = "Delete a batch of asset groups.", response = DeleteAssetGroupResponse.class, authorizations = {
        @Authorization(value = "pinterest_oauth2", scopes = {
            @AuthorizationScope(scope = "biz_access:read", description = "See business access data"),
            @AuthorizationScope(scope = "biz_access:write", description = "Create, update, or delete business access data") })
         }, tags={ "business_access_assets", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = DeleteAssetGroupResponse.class),
        @ApiResponse(code = 400, message = "Invalid parameters.", response = Error.class),
        @ApiResponse(code = 200, message = "Unexpected error", response = Error.class) })
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/businesses/{business_id}/asset_groups",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<DeleteAssetGroupResponse> assetGroupDelete(@ApiParam(value = "Unique identifier of the requesting business.",required=true ) @PathVariable("business_id") String businessId,@ApiParam(value = "" ,required=true )   @RequestBody DeleteAssetGroupBody deleteAssetGroupBody, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "Update asset groups.", notes = "Update a batch of asset groups with the specified parameters.", response = UpdateAssetGroupResponse.class, authorizations = {
        @Authorization(value = "pinterest_oauth2", scopes = {
            @AuthorizationScope(scope = "biz_access:read", description = "See business access data"),
            @AuthorizationScope(scope = "biz_access:write", description = "Create, update, or delete business access data") })
         }, tags={ "business_access_assets", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = UpdateAssetGroupResponse.class),
        @ApiResponse(code = 400, message = "Invalid parameters.", response = Error.class),
        @ApiResponse(code = 200, message = "Unexpected error", response = Error.class) })
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/businesses/{business_id}/asset_groups",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<UpdateAssetGroupResponse> assetGroupUpdate(@ApiParam(value = "Unique identifier of the requesting business.",required=true ) @PathVariable("business_id") String businessId,@ApiParam(value = "" ,required=true )   @RequestBody UpdateAssetGroupBody updateAssetGroupBody, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "Get members with access to asset", notes = "Get all the members the requesting business has granted access to on the given asset.", response = BusinessAssetMembersGet200Response.class, authorizations = {
        @Authorization(value = "pinterest_oauth2", scopes = {
            @AuthorizationScope(scope = "biz_access:read", description = "See business access data") })
         }, tags={ "business_access_assets", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Sucess", response = BusinessAssetMembersGet200Response.class),
        @ApiResponse(code = 200, message = "Unexpected error", response = Error.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/businesses/{business_id}/assets/{asset_id}/members",
        produces = { "application/json" }
    )
    ResponseEntity<BusinessAssetMembersGet200Response> businessAssetMembersGet(@ApiParam(value = "Unique identifier of the requesting business.",required=true ) @PathVariable("business_id") String businessId,@ApiParam(value = "Unique identifier of a business asset.",required=true ) @PathVariable("asset_id") String assetId,@ApiParam(value = "Cursor used to fetch the next page of items")  @RequestParam(value = "bookmark", required = false) String bookmark,@ApiParam(value = "Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/reference/pagination/'>Pagination</a> for more information.", defaultValue = "25")  @RequestParam(value = "page_size", required = false, defaultValue="25") Integer pageSize,@ApiParam(value = "An index to start fetching the results from. Only the results starting from this index will be returned.", defaultValue = "0")  @RequestParam(value = "start_index", required = false, defaultValue="0") Integer startIndex, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "Get partners with access to asset", notes = "Get all the partners the requesting business has granted access to on the given asset. Note: If the asset has been shared with you, an empty array will be returned. This is because an asset shared with you cannot be shared with a different partner.", response = BusinessAssetPartnersGet200Response.class, authorizations = {
        @Authorization(value = "pinterest_oauth2", scopes = {
            @AuthorizationScope(scope = "biz_access:read", description = "See business access data") })
         }, tags={ "business_access_assets", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Sucess", response = BusinessAssetPartnersGet200Response.class),
        @ApiResponse(code = 200, message = "Unexpected error", response = Error.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/businesses/{business_id}/assets/{asset_id}/partners",
        produces = { "application/json" }
    )
    ResponseEntity<BusinessAssetPartnersGet200Response> businessAssetPartnersGet(@ApiParam(value = "Unique identifier of the requesting business.",required=true ) @PathVariable("business_id") String businessId,@ApiParam(value = "Unique identifier of a business asset.",required=true ) @PathVariable("asset_id") String assetId,@ApiParam(value = "An index to start fetching the results from. Only the results starting from this index will be returned.", defaultValue = "0")  @RequestParam(value = "start_index", required = false, defaultValue="0") Integer startIndex,@ApiParam(value = "Cursor used to fetch the next page of items")  @RequestParam(value = "bookmark", required = false) String bookmark,@ApiParam(value = "Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/reference/pagination/'>Pagination</a> for more information.", defaultValue = "25")  @RequestParam(value = "page_size", required = false, defaultValue="25") Integer pageSize, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "List business assets", notes = "Get all the assets the requesting business has access to. This includes assets the business owns and assets the business has access to through partnerships.", response = BusinessAssetsGet200Response.class, authorizations = {
        @Authorization(value = "pinterest_oauth2", scopes = {
            @AuthorizationScope(scope = "biz_access:read", description = "See business access data") })
         }, tags={ "business_access_assets", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = BusinessAssetsGet200Response.class),
        @ApiResponse(code = 200, message = "Unexpected error", response = Error.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/businesses/{business_id}/assets",
        produces = { "application/json" }
    )
    ResponseEntity<BusinessAssetsGet200Response> businessAssetsGet(@ApiParam(value = "Unique identifier of the requesting business.",required=true ) @PathVariable("business_id") String businessId,@ApiParam(value = "A list of asset permissions used to filter the assets. Only assets where the requesting business has at least one of the specified permissions will be returned.")  @RequestParam(value = "permissions", required = false) List<PermissionsWithOwner> permissions,@ApiParam(value = "A child asset unique identifier. Used to fetch asset groups that contain the asset id as a child.")  @RequestParam(value = "child_asset_id", required = false) String childAssetId,@ApiParam(value = "An asset group unique identifier. Used to fetch assets contained within the specified asset group.")  @RequestParam(value = "asset_group_id", required = false) String assetGroupId,@ApiParam(value = "A resource type to filter the assets by. Only assets of the specified type will be returned.", allowableValues = "AD_ACCOUNT, PROFILE, ASSET_GROUP", defaultValue = "AD_ACCOUNT")  @RequestParam(value = "asset_type", required = false, defaultValue="AD_ACCOUNT") String assetType,@ApiParam(value = "An index to start fetching the results from. Only the results starting from this index will be returned.", defaultValue = "0")  @RequestParam(value = "start_index", required = false, defaultValue="0") Integer startIndex,@ApiParam(value = "Cursor used to fetch the next page of items")  @RequestParam(value = "bookmark", required = false) String bookmark,@ApiParam(value = "Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/reference/pagination/'>Pagination</a> for more information.", defaultValue = "25")  @RequestParam(value = "page_size", required = false, defaultValue="25") Integer pageSize, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "Get assets assigned to a member", notes = "Get assets on which you assigned asset permissions to the given member. Can be used to: - get all assets, regardless of asset type or - get assets of one asset type by using the asset_type query. The return response will include the permissions the member has to that asset and the asset type.", response = BusinessMemberAssetsGet200Response.class, authorizations = {
        @Authorization(value = "pinterest_oauth2", scopes = {
            @AuthorizationScope(scope = "biz_access:read", description = "See business access data") })
         }, tags={ "business_access_assets", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = BusinessMemberAssetsGet200Response.class),
        @ApiResponse(code = 200, message = "Unexpected error", response = Error.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/businesses/{business_id}/members/{member_id}/assets",
        produces = { "application/json" }
    )
    ResponseEntity<BusinessMemberAssetsGet200Response> businessMemberAssetsGet(@ApiParam(value = "Unique identifier of the requesting business.",required=true ) @PathVariable("business_id") String businessId,@ApiParam(value = "The member id to fetch assets for.",required=true ) @PathVariable("member_id") String memberId,@ApiParam(value = "A resource type to filter the assets by. Only assets of the specified type will be returned.", allowableValues = "AD_ACCOUNT, PROFILE, ASSET_GROUP", defaultValue = "AD_ACCOUNT")  @RequestParam(value = "asset_type", required = false, defaultValue="AD_ACCOUNT") String assetType,@ApiParam(value = "An index to start fetching the results from. Only the results starting from this index will be returned.", defaultValue = "0")  @RequestParam(value = "start_index", required = false, defaultValue="0") Integer startIndex,@ApiParam(value = "Cursor used to fetch the next page of items")  @RequestParam(value = "bookmark", required = false) String bookmark,@ApiParam(value = "Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/reference/pagination/'>Pagination</a> for more information.", defaultValue = "25")  @RequestParam(value = "page_size", required = false, defaultValue="25") Integer pageSize, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "Delete member access to asset", notes = "Terminate multiple members' access to an asset.", response = DeleteMemberAccessResultsResponseArray.class, authorizations = {
        @Authorization(value = "pinterest_oauth2", scopes = {
            @AuthorizationScope(scope = "biz_access:write", description = "Create, update, or delete business access data") })
         }, tags={ "business_access_assets", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "response", response = DeleteMemberAccessResultsResponseArray.class),
        @ApiResponse(code = 200, message = "Unexpected error", response = Error.class) })
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/businesses/{business_id}/members/assets/access",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<DeleteMemberAccessResultsResponseArray> businessMembersAssetAccessDelete(@ApiParam(value = "Unique identifier of the requesting business.",required=true ) @PathVariable("business_id") String businessId,@ApiParam(value = "List member assset permissions to delete." ,required=true )   @RequestBody BusinessMembersAssetAccessDeleteRequest businessMembersAssetAccessDeleteRequest, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "Assign/Update member asset permissions", notes = "Grant multiple members access to assets and/or update multiple member's exisiting permissions to an asset. Note: Not all listed permissions are applicable to each asset type. For example, PROFILE_PUBLISHER would not be applicable to an asset of type AD_ACCOUNT. The permission level PROFILE_PUBLISHER is only available to an asset of the type PROFILE. ", response = UpdateMemberAssetsResultsResponseArray.class, authorizations = {
        @Authorization(value = "pinterest_oauth2", scopes = {
            @AuthorizationScope(scope = "biz_access:write", description = "Create, update, or delete business access data") })
         }, tags={ "business_access_assets", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "response", response = UpdateMemberAssetsResultsResponseArray.class),
        @ApiResponse(code = 200, message = "Unexpected error", response = Error.class) })
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/businesses/{business_id}/members/assets/access",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<UpdateMemberAssetsResultsResponseArray> businessMembersAssetAccessUpdate(@ApiParam(value = "Unique identifier of the requesting business.",required=true ) @PathVariable("business_id") String businessId,@ApiParam(value = "List of member asset permissions to create or update." ,required=true )   @RequestBody UpdateMemberAssetAccessBody updateMemberAssetAccessBody, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "Get assets assigned to a partner or assets assigned by a partner", notes = "Can be used to get the business assets your partner has granted you access to or the business assets you have granted your partner access to. If you specify: - partner_type=INTERNAL, you will retrieve your business assets that the partner has access to. - partner_type=EXTERNAL, you will retrieve the partner's business assets that the partner has granted you access to.", response = BusinessPartnerAssetAccessGet200Response.class, authorizations = {
        @Authorization(value = "pinterest_oauth2", scopes = {
            @AuthorizationScope(scope = "biz_access:read", description = "See business access data") })
         }, tags={ "business_access_assets", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = BusinessPartnerAssetAccessGet200Response.class),
        @ApiResponse(code = 200, message = "Unexpected error", response = Error.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/businesses/{business_id}/partners/{partner_id}/assets",
        produces = { "application/json" }
    )
    ResponseEntity<BusinessPartnerAssetAccessGet200Response> businessPartnerAssetAccessGet(@ApiParam(value = "Unique identifier of the requesting business.",required=true ) @PathVariable("business_id") String businessId,@ApiParam(value = "The partner id to be bound to the Business",required=true ) @PathVariable("partner_id") String partnerId,@ApiParam(value = "Specifies whether to fetch internal or external (shared) partners. If partner_type=INTERNAL, the asset being queried is for accesses the partner has to your business assets.<br> If partner_type=EXTERNAL, the asset being queried is for the accesses you have to the partner's business asset.")  @RequestParam(value = "partner_type", required = false) PartnerType partnerType,@ApiParam(value = "A resource type to filter the assets by. Only assets of the specified type will be returned.", allowableValues = "AD_ACCOUNT, PROFILE, ASSET_GROUP", defaultValue = "AD_ACCOUNT")  @RequestParam(value = "asset_type", required = false, defaultValue="AD_ACCOUNT") String assetType,@ApiParam(value = "An index to start fetching the results from. Only the results starting from this index will be returned.", defaultValue = "0")  @RequestParam(value = "start_index", required = false, defaultValue="0") Integer startIndex,@ApiParam(value = "Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/reference/pagination/'>Pagination</a> for more information.", defaultValue = "25")  @RequestParam(value = "page_size", required = false, defaultValue="25") Integer pageSize,@ApiParam(value = "Cursor used to fetch the next page of items")  @RequestParam(value = "bookmark", required = false) String bookmark, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "Delete partner access to asset", notes = "Terminate multiple partners' access to an asset. If - partner_type=INTERNAL: You will terminate a partner's asset access to your business assets. - partner_type=EXTERNAL: You will terminate your own access to your partner's business assets.", response = DeletePartnerAssetsResultsResponseArray.class, authorizations = {
        @Authorization(value = "pinterest_oauth2", scopes = {
            @AuthorizationScope(scope = "biz_access:write", description = "Create, update, or delete business access data") })
         }, tags={ "business_access_assets", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = DeletePartnerAssetsResultsResponseArray.class),
        @ApiResponse(code = 200, message = "Unexpected error", response = Error.class) })
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/businesses/{business_id}/partners/assets",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<DeletePartnerAssetsResultsResponseArray> deletePartnerAssetAccessHandlerImpl(@ApiParam(value = "Unique identifier of the requesting business.",required=true ) @PathVariable("business_id") String businessId,@ApiParam(value = "" ,required=true )   @RequestBody DeletePartnerAssetAccessBody deletePartnerAssetAccessBody, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "Assign/Update partner asset permissions", notes = "Grant multiple partners access to assets and/or update multiple partner's exisiting permissions to an asset. If your partner already had permissions on the asset, they will be overriden with the new permissions you assign to them. To learn more about permission levels, visit https://help.pinterest.com/en/business/article/business-manager-overview  Note: Not all listed permissions are applicable to each asset type. For example, PROFILE_PUBLISHER would not be applicable to an asset of type AD_ACCOUNT. The permission level PROFILE_PUBLISHER is only available to an asset of the type PROFILE.", response = UpdatePartnerAssetsResultsResponseArray.class, authorizations = {
        @Authorization(value = "pinterest_oauth2", scopes = {
            @AuthorizationScope(scope = "biz_access:write", description = "Create, update, or delete business access data") })
         }, tags={ "business_access_assets", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = UpdatePartnerAssetsResultsResponseArray.class),
        @ApiResponse(code = 200, message = "Unexpected error", response = Error.class) })
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/businesses/{business_id}/partners/assets",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<UpdatePartnerAssetsResultsResponseArray> updatePartnerAssetAccessHandlerImpl(@ApiParam(value = "Unique identifier of the requesting business.",required=true ) @PathVariable("business_id") String businessId,@ApiParam(value = "A list of assets and permissions to assign to your partners." ,required=true )   @RequestBody UpdatePartnerAssetAccessBody updatePartnerAssetAccessBody, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;

}
