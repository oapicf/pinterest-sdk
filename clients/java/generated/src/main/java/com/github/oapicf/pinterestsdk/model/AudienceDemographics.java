/*
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.github.oapicf.pinterestsdk.model;

import java.util.Objects;
import com.github.oapicf.pinterestsdk.model.AudienceDemographicValue;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.github.oapicf.pinterestsdk.JSON;

/**
 * Audience demographics
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-05T02:01:32.024245558Z[Etc/UTC]", comments = "Generator version: 7.9.0")
public class AudienceDemographics {
  public static final String SERIALIZED_NAME_AGES = "ages";
  @SerializedName(SERIALIZED_NAME_AGES)
  private List<AudienceDemographicValue> ages = new ArrayList<>();

  public static final String SERIALIZED_NAME_GENDERS = "genders";
  @SerializedName(SERIALIZED_NAME_GENDERS)
  private List<AudienceDemographicValue> genders = new ArrayList<>();

  public static final String SERIALIZED_NAME_DEVICES = "devices";
  @SerializedName(SERIALIZED_NAME_DEVICES)
  private List<AudienceDemographicValue> devices = new ArrayList<>();

  public static final String SERIALIZED_NAME_METROS = "metros";
  @SerializedName(SERIALIZED_NAME_METROS)
  private List<AudienceDemographicValue> metros = new ArrayList<>();

  public static final String SERIALIZED_NAME_COUNTRIES = "countries";
  @SerializedName(SERIALIZED_NAME_COUNTRIES)
  private List<AudienceDemographicValue> countries = new ArrayList<>();

  public AudienceDemographics() {
  }

  public AudienceDemographics ages(List<AudienceDemographicValue> ages) {
    this.ages = ages;
    return this;
  }

  public AudienceDemographics addAgesItem(AudienceDemographicValue agesItem) {
    if (this.ages == null) {
      this.ages = new ArrayList<>();
    }
    this.ages.add(agesItem);
    return this;
  }

  /**
   * Ages distribution.
   * @return ages
   */
  @javax.annotation.Nullable
  public List<AudienceDemographicValue> getAges() {
    return ages;
  }

  public void setAges(List<AudienceDemographicValue> ages) {
    this.ages = ages;
  }


  public AudienceDemographics genders(List<AudienceDemographicValue> genders) {
    this.genders = genders;
    return this;
  }

  public AudienceDemographics addGendersItem(AudienceDemographicValue gendersItem) {
    if (this.genders == null) {
      this.genders = new ArrayList<>();
    }
    this.genders.add(gendersItem);
    return this;
  }

  /**
   * Gender distribution.
   * @return genders
   */
  @javax.annotation.Nullable
  public List<AudienceDemographicValue> getGenders() {
    return genders;
  }

  public void setGenders(List<AudienceDemographicValue> genders) {
    this.genders = genders;
  }


  public AudienceDemographics devices(List<AudienceDemographicValue> devices) {
    this.devices = devices;
    return this;
  }

  public AudienceDemographics addDevicesItem(AudienceDemographicValue devicesItem) {
    if (this.devices == null) {
      this.devices = new ArrayList<>();
    }
    this.devices.add(devicesItem);
    return this;
  }

  /**
   * Device usage distribution.
   * @return devices
   */
  @javax.annotation.Nullable
  public List<AudienceDemographicValue> getDevices() {
    return devices;
  }

  public void setDevices(List<AudienceDemographicValue> devices) {
    this.devices = devices;
  }


  public AudienceDemographics metros(List<AudienceDemographicValue> metros) {
    this.metros = metros;
    return this;
  }

  public AudienceDemographics addMetrosItem(AudienceDemographicValue metrosItem) {
    if (this.metros == null) {
      this.metros = new ArrayList<>();
    }
    this.metros.add(metrosItem);
    return this;
  }

  /**
   * Geographic metro area distribution.
   * @return metros
   */
  @javax.annotation.Nullable
  public List<AudienceDemographicValue> getMetros() {
    return metros;
  }

  public void setMetros(List<AudienceDemographicValue> metros) {
    this.metros = metros;
  }


  public AudienceDemographics countries(List<AudienceDemographicValue> countries) {
    this.countries = countries;
    return this;
  }

  public AudienceDemographics addCountriesItem(AudienceDemographicValue countriesItem) {
    if (this.countries == null) {
      this.countries = new ArrayList<>();
    }
    this.countries.add(countriesItem);
    return this;
  }

  /**
   * Country area distribution.
   * @return countries
   */
  @javax.annotation.Nullable
  public List<AudienceDemographicValue> getCountries() {
    return countries;
  }

  public void setCountries(List<AudienceDemographicValue> countries) {
    this.countries = countries;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AudienceDemographics audienceDemographics = (AudienceDemographics) o;
    return Objects.equals(this.ages, audienceDemographics.ages) &&
        Objects.equals(this.genders, audienceDemographics.genders) &&
        Objects.equals(this.devices, audienceDemographics.devices) &&
        Objects.equals(this.metros, audienceDemographics.metros) &&
        Objects.equals(this.countries, audienceDemographics.countries);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ages, genders, devices, metros, countries);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AudienceDemographics {\n");
    sb.append("    ages: ").append(toIndentedString(ages)).append("\n");
    sb.append("    genders: ").append(toIndentedString(genders)).append("\n");
    sb.append("    devices: ").append(toIndentedString(devices)).append("\n");
    sb.append("    metros: ").append(toIndentedString(metros)).append("\n");
    sb.append("    countries: ").append(toIndentedString(countries)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ages");
    openapiFields.add("genders");
    openapiFields.add("devices");
    openapiFields.add("metros");
    openapiFields.add("countries");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AudienceDemographics
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AudienceDemographics.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AudienceDemographics is not found in the empty JSON string", AudienceDemographics.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AudienceDemographics.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AudienceDemographics` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("ages") != null && !jsonObj.get("ages").isJsonNull()) {
        JsonArray jsonArrayages = jsonObj.getAsJsonArray("ages");
        if (jsonArrayages != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ages").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ages` to be an array in the JSON string but got `%s`", jsonObj.get("ages").toString()));
          }

          // validate the optional field `ages` (array)
          for (int i = 0; i < jsonArrayages.size(); i++) {
            AudienceDemographicValue.validateJsonElement(jsonArrayages.get(i));
          };
        }
      }
      if (jsonObj.get("genders") != null && !jsonObj.get("genders").isJsonNull()) {
        JsonArray jsonArraygenders = jsonObj.getAsJsonArray("genders");
        if (jsonArraygenders != null) {
          // ensure the json data is an array
          if (!jsonObj.get("genders").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `genders` to be an array in the JSON string but got `%s`", jsonObj.get("genders").toString()));
          }

          // validate the optional field `genders` (array)
          for (int i = 0; i < jsonArraygenders.size(); i++) {
            AudienceDemographicValue.validateJsonElement(jsonArraygenders.get(i));
          };
        }
      }
      if (jsonObj.get("devices") != null && !jsonObj.get("devices").isJsonNull()) {
        JsonArray jsonArraydevices = jsonObj.getAsJsonArray("devices");
        if (jsonArraydevices != null) {
          // ensure the json data is an array
          if (!jsonObj.get("devices").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `devices` to be an array in the JSON string but got `%s`", jsonObj.get("devices").toString()));
          }

          // validate the optional field `devices` (array)
          for (int i = 0; i < jsonArraydevices.size(); i++) {
            AudienceDemographicValue.validateJsonElement(jsonArraydevices.get(i));
          };
        }
      }
      if (jsonObj.get("metros") != null && !jsonObj.get("metros").isJsonNull()) {
        JsonArray jsonArraymetros = jsonObj.getAsJsonArray("metros");
        if (jsonArraymetros != null) {
          // ensure the json data is an array
          if (!jsonObj.get("metros").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `metros` to be an array in the JSON string but got `%s`", jsonObj.get("metros").toString()));
          }

          // validate the optional field `metros` (array)
          for (int i = 0; i < jsonArraymetros.size(); i++) {
            AudienceDemographicValue.validateJsonElement(jsonArraymetros.get(i));
          };
        }
      }
      if (jsonObj.get("countries") != null && !jsonObj.get("countries").isJsonNull()) {
        JsonArray jsonArraycountries = jsonObj.getAsJsonArray("countries");
        if (jsonArraycountries != null) {
          // ensure the json data is an array
          if (!jsonObj.get("countries").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `countries` to be an array in the JSON string but got `%s`", jsonObj.get("countries").toString()));
          }

          // validate the optional field `countries` (array)
          for (int i = 0; i < jsonArraycountries.size(); i++) {
            AudienceDemographicValue.validateJsonElement(jsonArraycountries.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AudienceDemographics.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AudienceDemographics' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AudienceDemographics> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AudienceDemographics.class));

       return (TypeAdapter<T>) new TypeAdapter<AudienceDemographics>() {
           @Override
           public void write(JsonWriter out, AudienceDemographics value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AudienceDemographics read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AudienceDemographics given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AudienceDemographics
   * @throws IOException if the JSON string is invalid with respect to AudienceDemographics
   */
  public static AudienceDemographics fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AudienceDemographics.class);
  }

  /**
   * Convert an instance of AudienceDemographics to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

