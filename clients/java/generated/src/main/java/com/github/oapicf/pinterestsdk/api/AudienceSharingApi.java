/*
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.github.oapicf.pinterestsdk.api;

import com.github.oapicf.pinterestsdk.ApiCallback;
import com.github.oapicf.pinterestsdk.ApiClient;
import com.github.oapicf.pinterestsdk.ApiException;
import com.github.oapicf.pinterestsdk.ApiResponse;
import com.github.oapicf.pinterestsdk.Configuration;
import com.github.oapicf.pinterestsdk.Pair;
import com.github.oapicf.pinterestsdk.ProgressRequestBody;
import com.github.oapicf.pinterestsdk.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.github.oapicf.pinterestsdk.model.AdAccountsAudiencesSharedAccountsList200Response;
import com.github.oapicf.pinterestsdk.model.AudienceAccountType;
import com.github.oapicf.pinterestsdk.model.AudiencesList200Response;
import com.github.oapicf.pinterestsdk.model.BusinessSharedAudience;
import com.github.oapicf.pinterestsdk.model.BusinessSharedAudienceResponse;
import com.github.oapicf.pinterestsdk.model.Error;
import com.github.oapicf.pinterestsdk.model.SharedAudience;
import com.github.oapicf.pinterestsdk.model.SharedAudienceResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AudienceSharingApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AudienceSharingApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AudienceSharingApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for adAccountsAudiencesSharedAccountsList
     * @param adAccountId Unique identifier of an ad account. (required)
     * @param audienceId Unique identifier of the audience to use to filter the results. (required)
     * @param accountType Filter accounts by account type. (required)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ad account audiences shared accounts parameters. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Shared accounts not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adAccountsAudiencesSharedAccountsListCall(String adAccountId, String audienceId, AudienceAccountType accountType, Integer pageSize, String bookmark, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ad_accounts/{ad_account_id}/audiences/shared/accounts"
            .replace("{" + "ad_account_id" + "}", localVarApiClient.escapeString(adAccountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (audienceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("audience_id", audienceId));
        }

        if (accountType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("account_type", accountType));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (bookmark != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bookmark", bookmark));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "pinterest_oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adAccountsAudiencesSharedAccountsListValidateBeforeCall(String adAccountId, String audienceId, AudienceAccountType accountType, Integer pageSize, String bookmark, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'adAccountId' is set
        if (adAccountId == null) {
            throw new ApiException("Missing the required parameter 'adAccountId' when calling adAccountsAudiencesSharedAccountsList(Async)");
        }

        // verify the required parameter 'audienceId' is set
        if (audienceId == null) {
            throw new ApiException("Missing the required parameter 'audienceId' when calling adAccountsAudiencesSharedAccountsList(Async)");
        }

        // verify the required parameter 'accountType' is set
        if (accountType == null) {
            throw new ApiException("Missing the required parameter 'accountType' when calling adAccountsAudiencesSharedAccountsList(Async)");
        }

        return adAccountsAudiencesSharedAccountsListCall(adAccountId, audienceId, accountType, pageSize, bookmark, _callback);

    }

    /**
     * List accounts with access to an audience owned by an ad account
     * List all ad accounts and/or businesses that have access to a specific audience. The audience must be owned by the requesting ad account.
     * @param adAccountId Unique identifier of an ad account. (required)
     * @param audienceId Unique identifier of the audience to use to filter the results. (required)
     * @param accountType Filter accounts by account type. (required)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @return AdAccountsAudiencesSharedAccountsList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ad account audiences shared accounts parameters. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Shared accounts not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public AdAccountsAudiencesSharedAccountsList200Response adAccountsAudiencesSharedAccountsList(String adAccountId, String audienceId, AudienceAccountType accountType, Integer pageSize, String bookmark) throws ApiException {
        ApiResponse<AdAccountsAudiencesSharedAccountsList200Response> localVarResp = adAccountsAudiencesSharedAccountsListWithHttpInfo(adAccountId, audienceId, accountType, pageSize, bookmark);
        return localVarResp.getData();
    }

    /**
     * List accounts with access to an audience owned by an ad account
     * List all ad accounts and/or businesses that have access to a specific audience. The audience must be owned by the requesting ad account.
     * @param adAccountId Unique identifier of an ad account. (required)
     * @param audienceId Unique identifier of the audience to use to filter the results. (required)
     * @param accountType Filter accounts by account type. (required)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @return ApiResponse&lt;AdAccountsAudiencesSharedAccountsList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ad account audiences shared accounts parameters. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Shared accounts not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AdAccountsAudiencesSharedAccountsList200Response> adAccountsAudiencesSharedAccountsListWithHttpInfo(String adAccountId, String audienceId, AudienceAccountType accountType, Integer pageSize, String bookmark) throws ApiException {
        okhttp3.Call localVarCall = adAccountsAudiencesSharedAccountsListValidateBeforeCall(adAccountId, audienceId, accountType, pageSize, bookmark, null);
        Type localVarReturnType = new TypeToken<AdAccountsAudiencesSharedAccountsList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List accounts with access to an audience owned by an ad account (asynchronously)
     * List all ad accounts and/or businesses that have access to a specific audience. The audience must be owned by the requesting ad account.
     * @param adAccountId Unique identifier of an ad account. (required)
     * @param audienceId Unique identifier of the audience to use to filter the results. (required)
     * @param accountType Filter accounts by account type. (required)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ad account audiences shared accounts parameters. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Shared accounts not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adAccountsAudiencesSharedAccountsListAsync(String adAccountId, String audienceId, AudienceAccountType accountType, Integer pageSize, String bookmark, final ApiCallback<AdAccountsAudiencesSharedAccountsList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = adAccountsAudiencesSharedAccountsListValidateBeforeCall(adAccountId, audienceId, accountType, pageSize, bookmark, _callback);
        Type localVarReturnType = new TypeToken<AdAccountsAudiencesSharedAccountsList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for businessAccountAudiencesSharedAccountsList
     * @param businessId Unique identifier of the requesting business. (required)
     * @param audienceId Unique identifier of the audience to use to filter the results. (required)
     * @param accountType Filter accounts by account type. (required)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid business audiences shared accounts parameters. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Shared accounts not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call businessAccountAudiencesSharedAccountsListCall(String businessId, String audienceId, AudienceAccountType accountType, Integer pageSize, String bookmark, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/businesses/{business_id}/audiences/shared/accounts"
            .replace("{" + "business_id" + "}", localVarApiClient.escapeString(businessId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (audienceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("audience_id", audienceId));
        }

        if (accountType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("account_type", accountType));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (bookmark != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bookmark", bookmark));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "pinterest_oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call businessAccountAudiencesSharedAccountsListValidateBeforeCall(String businessId, String audienceId, AudienceAccountType accountType, Integer pageSize, String bookmark, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'businessId' is set
        if (businessId == null) {
            throw new ApiException("Missing the required parameter 'businessId' when calling businessAccountAudiencesSharedAccountsList(Async)");
        }

        // verify the required parameter 'audienceId' is set
        if (audienceId == null) {
            throw new ApiException("Missing the required parameter 'audienceId' when calling businessAccountAudiencesSharedAccountsList(Async)");
        }

        // verify the required parameter 'accountType' is set
        if (accountType == null) {
            throw new ApiException("Missing the required parameter 'accountType' when calling businessAccountAudiencesSharedAccountsList(Async)");
        }

        return businessAccountAudiencesSharedAccountsListCall(businessId, audienceId, accountType, pageSize, bookmark, _callback);

    }

    /**
     * List accounts with access to an audience owned by a business
     * List all ad accounts and/or businesses that have access to a specific audience. The audience must either be owned by an ad account in the requesting business, or it must have been shared with the requesting business. If the requesting business is not the owner of the audience, only ad accounts owned by the requesting business will be returned.
     * @param businessId Unique identifier of the requesting business. (required)
     * @param audienceId Unique identifier of the audience to use to filter the results. (required)
     * @param accountType Filter accounts by account type. (required)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @return AdAccountsAudiencesSharedAccountsList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid business audiences shared accounts parameters. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Shared accounts not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public AdAccountsAudiencesSharedAccountsList200Response businessAccountAudiencesSharedAccountsList(String businessId, String audienceId, AudienceAccountType accountType, Integer pageSize, String bookmark) throws ApiException {
        ApiResponse<AdAccountsAudiencesSharedAccountsList200Response> localVarResp = businessAccountAudiencesSharedAccountsListWithHttpInfo(businessId, audienceId, accountType, pageSize, bookmark);
        return localVarResp.getData();
    }

    /**
     * List accounts with access to an audience owned by a business
     * List all ad accounts and/or businesses that have access to a specific audience. The audience must either be owned by an ad account in the requesting business, or it must have been shared with the requesting business. If the requesting business is not the owner of the audience, only ad accounts owned by the requesting business will be returned.
     * @param businessId Unique identifier of the requesting business. (required)
     * @param audienceId Unique identifier of the audience to use to filter the results. (required)
     * @param accountType Filter accounts by account type. (required)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @return ApiResponse&lt;AdAccountsAudiencesSharedAccountsList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid business audiences shared accounts parameters. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Shared accounts not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AdAccountsAudiencesSharedAccountsList200Response> businessAccountAudiencesSharedAccountsListWithHttpInfo(String businessId, String audienceId, AudienceAccountType accountType, Integer pageSize, String bookmark) throws ApiException {
        okhttp3.Call localVarCall = businessAccountAudiencesSharedAccountsListValidateBeforeCall(businessId, audienceId, accountType, pageSize, bookmark, null);
        Type localVarReturnType = new TypeToken<AdAccountsAudiencesSharedAccountsList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List accounts with access to an audience owned by a business (asynchronously)
     * List all ad accounts and/or businesses that have access to a specific audience. The audience must either be owned by an ad account in the requesting business, or it must have been shared with the requesting business. If the requesting business is not the owner of the audience, only ad accounts owned by the requesting business will be returned.
     * @param businessId Unique identifier of the requesting business. (required)
     * @param audienceId Unique identifier of the audience to use to filter the results. (required)
     * @param accountType Filter accounts by account type. (required)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid business audiences shared accounts parameters. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Shared accounts not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call businessAccountAudiencesSharedAccountsListAsync(String businessId, String audienceId, AudienceAccountType accountType, Integer pageSize, String bookmark, final ApiCallback<AdAccountsAudiencesSharedAccountsList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = businessAccountAudiencesSharedAccountsListValidateBeforeCall(businessId, audienceId, accountType, pageSize, bookmark, _callback);
        Type localVarReturnType = new TypeToken<AdAccountsAudiencesSharedAccountsList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sharedAudiencesForBusinessList
     * @param businessId Unique identifier of the requesting business. (required)
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @param order The order in which to sort the items returned: “ASCENDING” or “DESCENDING” by ID. Note that higher-value IDs are associated with more-recently added items. (optional)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sharedAudiencesForBusinessListCall(String businessId, String bookmark, String order, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/businesses/{business_id}/audiences"
            .replace("{" + "business_id" + "}", localVarApiClient.escapeString(businessId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (bookmark != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bookmark", bookmark));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "pinterest_oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sharedAudiencesForBusinessListValidateBeforeCall(String businessId, String bookmark, String order, Integer pageSize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'businessId' is set
        if (businessId == null) {
            throw new ApiException("Missing the required parameter 'businessId' when calling sharedAudiencesForBusinessList(Async)");
        }

        return sharedAudiencesForBusinessListCall(businessId, bookmark, order, pageSize, _callback);

    }

    /**
     * List received audiences for a business
     * Get a list of received audiences for the given business.
     * @param businessId Unique identifier of the requesting business. (required)
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @param order The order in which to sort the items returned: “ASCENDING” or “DESCENDING” by ID. Note that higher-value IDs are associated with more-recently added items. (optional)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @return AudiencesList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public AudiencesList200Response sharedAudiencesForBusinessList(String businessId, String bookmark, String order, Integer pageSize) throws ApiException {
        ApiResponse<AudiencesList200Response> localVarResp = sharedAudiencesForBusinessListWithHttpInfo(businessId, bookmark, order, pageSize);
        return localVarResp.getData();
    }

    /**
     * List received audiences for a business
     * Get a list of received audiences for the given business.
     * @param businessId Unique identifier of the requesting business. (required)
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @param order The order in which to sort the items returned: “ASCENDING” or “DESCENDING” by ID. Note that higher-value IDs are associated with more-recently added items. (optional)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @return ApiResponse&lt;AudiencesList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AudiencesList200Response> sharedAudiencesForBusinessListWithHttpInfo(String businessId, String bookmark, String order, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = sharedAudiencesForBusinessListValidateBeforeCall(businessId, bookmark, order, pageSize, null);
        Type localVarReturnType = new TypeToken<AudiencesList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List received audiences for a business (asynchronously)
     * Get a list of received audiences for the given business.
     * @param businessId Unique identifier of the requesting business. (required)
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @param order The order in which to sort the items returned: “ASCENDING” or “DESCENDING” by ID. Note that higher-value IDs are associated with more-recently added items. (optional)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sharedAudiencesForBusinessListAsync(String businessId, String bookmark, String order, Integer pageSize, final ApiCallback<AudiencesList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = sharedAudiencesForBusinessListValidateBeforeCall(businessId, bookmark, order, pageSize, _callback);
        Type localVarReturnType = new TypeToken<AudiencesList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateAdAccountToAdAccountSharedAudience
     * @param adAccountId Unique identifier of an ad account. (required)
     * @param sharedAudience  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ad account id. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAdAccountToAdAccountSharedAudienceCall(String adAccountId, SharedAudience sharedAudience, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sharedAudience;

        // create path and map variables
        String localVarPath = "/ad_accounts/{ad_account_id}/audiences/ad_accounts/shared"
            .replace("{" + "ad_account_id" + "}", localVarApiClient.escapeString(adAccountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "pinterest_oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAdAccountToAdAccountSharedAudienceValidateBeforeCall(String adAccountId, SharedAudience sharedAudience, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'adAccountId' is set
        if (adAccountId == null) {
            throw new ApiException("Missing the required parameter 'adAccountId' when calling updateAdAccountToAdAccountSharedAudience(Async)");
        }

        // verify the required parameter 'sharedAudience' is set
        if (sharedAudience == null) {
            throw new ApiException("Missing the required parameter 'sharedAudience' when calling updateAdAccountToAdAccountSharedAudience(Async)");
        }

        return updateAdAccountToAdAccountSharedAudienceCall(adAccountId, sharedAudience, _callback);

    }

    /**
     * Update audience sharing between ad accounts
     * From an ad account, share a specific audience with another ad account, or revoke access to a previously shared audience. Only the audience owner account can share the audience. The recipient ad account(s) must be in the same &lt;a href&#x3D;&#39;https://help.pinterest.com/en/business/article/create-and-manage-accounts&#39;&gt;Pinterest Business Hierarchy&lt;/a&gt; as the business owner of the ad account.&lt;br&gt; This endpoint is not available to all apps.&lt;a href&#x3D;&#39;/docs/getting-started/beta-and-advanced-access/&#39;&gt;Learn more&lt;/a&gt;.
     * @param adAccountId Unique identifier of an ad account. (required)
     * @param sharedAudience  (required)
     * @return SharedAudienceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ad account id. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public SharedAudienceResponse updateAdAccountToAdAccountSharedAudience(String adAccountId, SharedAudience sharedAudience) throws ApiException {
        ApiResponse<SharedAudienceResponse> localVarResp = updateAdAccountToAdAccountSharedAudienceWithHttpInfo(adAccountId, sharedAudience);
        return localVarResp.getData();
    }

    /**
     * Update audience sharing between ad accounts
     * From an ad account, share a specific audience with another ad account, or revoke access to a previously shared audience. Only the audience owner account can share the audience. The recipient ad account(s) must be in the same &lt;a href&#x3D;&#39;https://help.pinterest.com/en/business/article/create-and-manage-accounts&#39;&gt;Pinterest Business Hierarchy&lt;/a&gt; as the business owner of the ad account.&lt;br&gt; This endpoint is not available to all apps.&lt;a href&#x3D;&#39;/docs/getting-started/beta-and-advanced-access/&#39;&gt;Learn more&lt;/a&gt;.
     * @param adAccountId Unique identifier of an ad account. (required)
     * @param sharedAudience  (required)
     * @return ApiResponse&lt;SharedAudienceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ad account id. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SharedAudienceResponse> updateAdAccountToAdAccountSharedAudienceWithHttpInfo(String adAccountId, SharedAudience sharedAudience) throws ApiException {
        okhttp3.Call localVarCall = updateAdAccountToAdAccountSharedAudienceValidateBeforeCall(adAccountId, sharedAudience, null);
        Type localVarReturnType = new TypeToken<SharedAudienceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update audience sharing between ad accounts (asynchronously)
     * From an ad account, share a specific audience with another ad account, or revoke access to a previously shared audience. Only the audience owner account can share the audience. The recipient ad account(s) must be in the same &lt;a href&#x3D;&#39;https://help.pinterest.com/en/business/article/create-and-manage-accounts&#39;&gt;Pinterest Business Hierarchy&lt;/a&gt; as the business owner of the ad account.&lt;br&gt; This endpoint is not available to all apps.&lt;a href&#x3D;&#39;/docs/getting-started/beta-and-advanced-access/&#39;&gt;Learn more&lt;/a&gt;.
     * @param adAccountId Unique identifier of an ad account. (required)
     * @param sharedAudience  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ad account id. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAdAccountToAdAccountSharedAudienceAsync(String adAccountId, SharedAudience sharedAudience, final ApiCallback<SharedAudienceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAdAccountToAdAccountSharedAudienceValidateBeforeCall(adAccountId, sharedAudience, _callback);
        Type localVarReturnType = new TypeToken<SharedAudienceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateAdAccountToBusinessSharedAudience
     * @param adAccountId Unique identifier of an ad account. (required)
     * @param businessSharedAudience  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ad account id. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAdAccountToBusinessSharedAudienceCall(String adAccountId, BusinessSharedAudience businessSharedAudience, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = businessSharedAudience;

        // create path and map variables
        String localVarPath = "/ad_accounts/{ad_account_id}/audiences/businesses/shared"
            .replace("{" + "ad_account_id" + "}", localVarApiClient.escapeString(adAccountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "pinterest_oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAdAccountToBusinessSharedAudienceValidateBeforeCall(String adAccountId, BusinessSharedAudience businessSharedAudience, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'adAccountId' is set
        if (adAccountId == null) {
            throw new ApiException("Missing the required parameter 'adAccountId' when calling updateAdAccountToBusinessSharedAudience(Async)");
        }

        // verify the required parameter 'businessSharedAudience' is set
        if (businessSharedAudience == null) {
            throw new ApiException("Missing the required parameter 'businessSharedAudience' when calling updateAdAccountToBusinessSharedAudience(Async)");
        }

        return updateAdAccountToBusinessSharedAudienceCall(adAccountId, businessSharedAudience, _callback);

    }

    /**
     * Update audience sharing from an ad account to businesses
     * From an ad account, share a specific audience with a business account, or revoke access to a previously shared audience. Only the audience owner account can share the audience. The recipient business account must be in the same business hierarchy as the business owner of the ad account.&lt;br&gt; This endpoint is not available to all apps.&lt;a href&#x3D;&#39;/docs/getting-started/beta-and-advanced-access/&#39;&gt;Learn more&lt;/a&gt;.
     * @param adAccountId Unique identifier of an ad account. (required)
     * @param businessSharedAudience  (required)
     * @return BusinessSharedAudienceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ad account id. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public BusinessSharedAudienceResponse updateAdAccountToBusinessSharedAudience(String adAccountId, BusinessSharedAudience businessSharedAudience) throws ApiException {
        ApiResponse<BusinessSharedAudienceResponse> localVarResp = updateAdAccountToBusinessSharedAudienceWithHttpInfo(adAccountId, businessSharedAudience);
        return localVarResp.getData();
    }

    /**
     * Update audience sharing from an ad account to businesses
     * From an ad account, share a specific audience with a business account, or revoke access to a previously shared audience. Only the audience owner account can share the audience. The recipient business account must be in the same business hierarchy as the business owner of the ad account.&lt;br&gt; This endpoint is not available to all apps.&lt;a href&#x3D;&#39;/docs/getting-started/beta-and-advanced-access/&#39;&gt;Learn more&lt;/a&gt;.
     * @param adAccountId Unique identifier of an ad account. (required)
     * @param businessSharedAudience  (required)
     * @return ApiResponse&lt;BusinessSharedAudienceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ad account id. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BusinessSharedAudienceResponse> updateAdAccountToBusinessSharedAudienceWithHttpInfo(String adAccountId, BusinessSharedAudience businessSharedAudience) throws ApiException {
        okhttp3.Call localVarCall = updateAdAccountToBusinessSharedAudienceValidateBeforeCall(adAccountId, businessSharedAudience, null);
        Type localVarReturnType = new TypeToken<BusinessSharedAudienceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update audience sharing from an ad account to businesses (asynchronously)
     * From an ad account, share a specific audience with a business account, or revoke access to a previously shared audience. Only the audience owner account can share the audience. The recipient business account must be in the same business hierarchy as the business owner of the ad account.&lt;br&gt; This endpoint is not available to all apps.&lt;a href&#x3D;&#39;/docs/getting-started/beta-and-advanced-access/&#39;&gt;Learn more&lt;/a&gt;.
     * @param adAccountId Unique identifier of an ad account. (required)
     * @param businessSharedAudience  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ad account id. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAdAccountToBusinessSharedAudienceAsync(String adAccountId, BusinessSharedAudience businessSharedAudience, final ApiCallback<BusinessSharedAudienceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAdAccountToBusinessSharedAudienceValidateBeforeCall(adAccountId, businessSharedAudience, _callback);
        Type localVarReturnType = new TypeToken<BusinessSharedAudienceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateBusinessToAdAccountSharedAudience
     * @param businessId Unique identifier of the requesting business. (required)
     * @param sharedAudience  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateBusinessToAdAccountSharedAudienceCall(String businessId, SharedAudience sharedAudience, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sharedAudience;

        // create path and map variables
        String localVarPath = "/businesses/{business_id}/audiences/ad_accounts/shared"
            .replace("{" + "business_id" + "}", localVarApiClient.escapeString(businessId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "pinterest_oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateBusinessToAdAccountSharedAudienceValidateBeforeCall(String businessId, SharedAudience sharedAudience, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'businessId' is set
        if (businessId == null) {
            throw new ApiException("Missing the required parameter 'businessId' when calling updateBusinessToAdAccountSharedAudience(Async)");
        }

        // verify the required parameter 'sharedAudience' is set
        if (sharedAudience == null) {
            throw new ApiException("Missing the required parameter 'sharedAudience' when calling updateBusinessToAdAccountSharedAudience(Async)");
        }

        return updateBusinessToAdAccountSharedAudienceCall(businessId, sharedAudience, _callback);

    }

    /**
     * Update audience sharing from a business to ad accounts
     * From a business, share a specific audience with other ad account(s), or revoke access to a previously shared audience. &lt;ul&gt; &lt;li&gt;If the business is the owner of the audience, it can share with any ad account within the same business hierarchy.&lt;/li&gt; &lt;li&gt;If the business is the recipient of the audience, it can share with any of its owned ad accounts.&lt;/li&gt; &lt;/ul&gt; This endpoint is not available to all apps.&lt;a href&#x3D;&#39;/docs/getting-started/beta-and-advanced-access/&#39;&gt;Learn more&lt;/a&gt;.
     * @param businessId Unique identifier of the requesting business. (required)
     * @param sharedAudience  (required)
     * @return SharedAudienceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public SharedAudienceResponse updateBusinessToAdAccountSharedAudience(String businessId, SharedAudience sharedAudience) throws ApiException {
        ApiResponse<SharedAudienceResponse> localVarResp = updateBusinessToAdAccountSharedAudienceWithHttpInfo(businessId, sharedAudience);
        return localVarResp.getData();
    }

    /**
     * Update audience sharing from a business to ad accounts
     * From a business, share a specific audience with other ad account(s), or revoke access to a previously shared audience. &lt;ul&gt; &lt;li&gt;If the business is the owner of the audience, it can share with any ad account within the same business hierarchy.&lt;/li&gt; &lt;li&gt;If the business is the recipient of the audience, it can share with any of its owned ad accounts.&lt;/li&gt; &lt;/ul&gt; This endpoint is not available to all apps.&lt;a href&#x3D;&#39;/docs/getting-started/beta-and-advanced-access/&#39;&gt;Learn more&lt;/a&gt;.
     * @param businessId Unique identifier of the requesting business. (required)
     * @param sharedAudience  (required)
     * @return ApiResponse&lt;SharedAudienceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SharedAudienceResponse> updateBusinessToAdAccountSharedAudienceWithHttpInfo(String businessId, SharedAudience sharedAudience) throws ApiException {
        okhttp3.Call localVarCall = updateBusinessToAdAccountSharedAudienceValidateBeforeCall(businessId, sharedAudience, null);
        Type localVarReturnType = new TypeToken<SharedAudienceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update audience sharing from a business to ad accounts (asynchronously)
     * From a business, share a specific audience with other ad account(s), or revoke access to a previously shared audience. &lt;ul&gt; &lt;li&gt;If the business is the owner of the audience, it can share with any ad account within the same business hierarchy.&lt;/li&gt; &lt;li&gt;If the business is the recipient of the audience, it can share with any of its owned ad accounts.&lt;/li&gt; &lt;/ul&gt; This endpoint is not available to all apps.&lt;a href&#x3D;&#39;/docs/getting-started/beta-and-advanced-access/&#39;&gt;Learn more&lt;/a&gt;.
     * @param businessId Unique identifier of the requesting business. (required)
     * @param sharedAudience  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateBusinessToAdAccountSharedAudienceAsync(String businessId, SharedAudience sharedAudience, final ApiCallback<SharedAudienceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateBusinessToAdAccountSharedAudienceValidateBeforeCall(businessId, sharedAudience, _callback);
        Type localVarReturnType = new TypeToken<SharedAudienceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateBusinessToBusinessSharedAudience
     * @param businessId Unique identifier of the requesting business. (required)
     * @param businessSharedAudience  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateBusinessToBusinessSharedAudienceCall(String businessId, BusinessSharedAudience businessSharedAudience, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = businessSharedAudience;

        // create path and map variables
        String localVarPath = "/businesses/{business_id}/audiences/businesses/shared"
            .replace("{" + "business_id" + "}", localVarApiClient.escapeString(businessId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "pinterest_oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateBusinessToBusinessSharedAudienceValidateBeforeCall(String businessId, BusinessSharedAudience businessSharedAudience, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'businessId' is set
        if (businessId == null) {
            throw new ApiException("Missing the required parameter 'businessId' when calling updateBusinessToBusinessSharedAudience(Async)");
        }

        // verify the required parameter 'businessSharedAudience' is set
        if (businessSharedAudience == null) {
            throw new ApiException("Missing the required parameter 'businessSharedAudience' when calling updateBusinessToBusinessSharedAudience(Async)");
        }

        return updateBusinessToBusinessSharedAudienceCall(businessId, businessSharedAudience, _callback);

    }

    /**
     * Update audience sharing between businesses
     * From a business, share a specific audience with another business account, or revoke access to a previously shared audience. Only the audience owner can share the audience with other businesses, and the recipient business must be within the same business hierarchy.&lt;br&gt; This endpoint is not available to all apps.&lt;a href&#x3D;&#39;/docs/getting-started/beta-and-advanced-access/&#39;&gt;Learn more&lt;/a&gt;.
     * @param businessId Unique identifier of the requesting business. (required)
     * @param businessSharedAudience  (required)
     * @return BusinessSharedAudienceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public BusinessSharedAudienceResponse updateBusinessToBusinessSharedAudience(String businessId, BusinessSharedAudience businessSharedAudience) throws ApiException {
        ApiResponse<BusinessSharedAudienceResponse> localVarResp = updateBusinessToBusinessSharedAudienceWithHttpInfo(businessId, businessSharedAudience);
        return localVarResp.getData();
    }

    /**
     * Update audience sharing between businesses
     * From a business, share a specific audience with another business account, or revoke access to a previously shared audience. Only the audience owner can share the audience with other businesses, and the recipient business must be within the same business hierarchy.&lt;br&gt; This endpoint is not available to all apps.&lt;a href&#x3D;&#39;/docs/getting-started/beta-and-advanced-access/&#39;&gt;Learn more&lt;/a&gt;.
     * @param businessId Unique identifier of the requesting business. (required)
     * @param businessSharedAudience  (required)
     * @return ApiResponse&lt;BusinessSharedAudienceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BusinessSharedAudienceResponse> updateBusinessToBusinessSharedAudienceWithHttpInfo(String businessId, BusinessSharedAudience businessSharedAudience) throws ApiException {
        okhttp3.Call localVarCall = updateBusinessToBusinessSharedAudienceValidateBeforeCall(businessId, businessSharedAudience, null);
        Type localVarReturnType = new TypeToken<BusinessSharedAudienceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update audience sharing between businesses (asynchronously)
     * From a business, share a specific audience with another business account, or revoke access to a previously shared audience. Only the audience owner can share the audience with other businesses, and the recipient business must be within the same business hierarchy.&lt;br&gt; This endpoint is not available to all apps.&lt;a href&#x3D;&#39;/docs/getting-started/beta-and-advanced-access/&#39;&gt;Learn more&lt;/a&gt;.
     * @param businessId Unique identifier of the requesting business. (required)
     * @param businessSharedAudience  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateBusinessToBusinessSharedAudienceAsync(String businessId, BusinessSharedAudience businessSharedAudience, final ApiCallback<BusinessSharedAudienceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateBusinessToBusinessSharedAudienceValidateBeforeCall(businessId, businessSharedAudience, _callback);
        Type localVarReturnType = new TypeToken<BusinessSharedAudienceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
