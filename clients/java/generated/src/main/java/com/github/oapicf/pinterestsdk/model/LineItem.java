/*
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.github.oapicf.pinterestsdk.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.github.oapicf.pinterestsdk.JSON;

/**
 * LineItem
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-05T02:01:32.024245558Z[Etc/UTC]", comments = "Generator version: 7.9.0")
public class LineItem {
  public static final String SERIALIZED_NAME_PRODUCT_BRAND = "product_brand";
  @SerializedName(SERIALIZED_NAME_PRODUCT_BRAND)
  private String productBrand;

  public static final String SERIALIZED_NAME_PRODUCT_CATEGORY = "product_category";
  @SerializedName(SERIALIZED_NAME_PRODUCT_CATEGORY)
  private String productCategory;

  public static final String SERIALIZED_NAME_PRODUCT_ID = "product_id";
  @SerializedName(SERIALIZED_NAME_PRODUCT_ID)
  private Integer productId;

  public static final String SERIALIZED_NAME_PRODUCT_NAME = "product_name";
  @SerializedName(SERIALIZED_NAME_PRODUCT_NAME)
  private String productName;

  public static final String SERIALIZED_NAME_PRODUCT_PRICE = "product_price";
  @SerializedName(SERIALIZED_NAME_PRODUCT_PRICE)
  private String productPrice;

  public static final String SERIALIZED_NAME_PRODUCT_QUANTITY = "product_quantity";
  @SerializedName(SERIALIZED_NAME_PRODUCT_QUANTITY)
  private Integer productQuantity;

  public static final String SERIALIZED_NAME_PRODUCT_VARIANT = "product_variant";
  @SerializedName(SERIALIZED_NAME_PRODUCT_VARIANT)
  private String productVariant;

  public static final String SERIALIZED_NAME_PRODUCT_VARIANT_ID = "product_variant_id";
  @SerializedName(SERIALIZED_NAME_PRODUCT_VARIANT_ID)
  private String productVariantId;

  public LineItem() {
  }

  public LineItem productBrand(String productBrand) {
    this.productBrand = productBrand;
    return this;
  }

  /**
   * Product brand. For example, \&quot;Parker\&quot;.
   * @return productBrand
   */
  @javax.annotation.Nullable
  public String getProductBrand() {
    return productBrand;
  }

  public void setProductBrand(String productBrand) {
    this.productBrand = productBrand;
  }


  public LineItem productCategory(String productCategory) {
    this.productCategory = productCategory;
    return this;
  }

  /**
   * Product category. For example, \&quot;Shoes\&quot;.
   * @return productCategory
   */
  @javax.annotation.Nullable
  public String getProductCategory() {
    return productCategory;
  }

  public void setProductCategory(String productCategory) {
    this.productCategory = productCategory;
  }


  public LineItem productId(Integer productId) {
    this.productId = productId;
    return this;
  }

  /**
   * Product ID. For example, 1414.
   * @return productId
   */
  @javax.annotation.Nullable
  public Integer getProductId() {
    return productId;
  }

  public void setProductId(Integer productId) {
    this.productId = productId;
  }


  public LineItem productName(String productName) {
    this.productName = productName;
    return this;
  }

  /**
   * Product name. For example, \&quot;Parker Boots\&quot;.
   * @return productName
   */
  @javax.annotation.Nullable
  public String getProductName() {
    return productName;
  }

  public void setProductName(String productName) {
    this.productName = productName;
  }


  public LineItem productPrice(String productPrice) {
    this.productPrice = productPrice;
    return this;
  }

  /**
   * Product price. For example, \&quot;99.99\&quot;.
   * @return productPrice
   */
  @javax.annotation.Nullable
  public String getProductPrice() {
    return productPrice;
  }

  public void setProductPrice(String productPrice) {
    this.productPrice = productPrice;
  }


  public LineItem productQuantity(Integer productQuantity) {
    this.productQuantity = productQuantity;
    return this;
  }

  /**
   * Product quantity. For example, 2.
   * @return productQuantity
   */
  @javax.annotation.Nullable
  public Integer getProductQuantity() {
    return productQuantity;
  }

  public void setProductQuantity(Integer productQuantity) {
    this.productQuantity = productQuantity;
  }


  public LineItem productVariant(String productVariant) {
    this.productVariant = productVariant;
    return this;
  }

  /**
   * Product variant. For example, \&quot;Red\&quot;.
   * @return productVariant
   */
  @javax.annotation.Nullable
  public String getProductVariant() {
    return productVariant;
  }

  public void setProductVariant(String productVariant) {
    this.productVariant = productVariant;
  }


  public LineItem productVariantId(String productVariantId) {
    this.productVariantId = productVariantId;
    return this;
  }

  /**
   * Product variant ID. For example, \&quot;1414-34832\&quot;.
   * @return productVariantId
   */
  @javax.annotation.Nullable
  public String getProductVariantId() {
    return productVariantId;
  }

  public void setProductVariantId(String productVariantId) {
    this.productVariantId = productVariantId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LineItem lineItem = (LineItem) o;
    return Objects.equals(this.productBrand, lineItem.productBrand) &&
        Objects.equals(this.productCategory, lineItem.productCategory) &&
        Objects.equals(this.productId, lineItem.productId) &&
        Objects.equals(this.productName, lineItem.productName) &&
        Objects.equals(this.productPrice, lineItem.productPrice) &&
        Objects.equals(this.productQuantity, lineItem.productQuantity) &&
        Objects.equals(this.productVariant, lineItem.productVariant) &&
        Objects.equals(this.productVariantId, lineItem.productVariantId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(productBrand, productCategory, productId, productName, productPrice, productQuantity, productVariant, productVariantId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LineItem {\n");
    sb.append("    productBrand: ").append(toIndentedString(productBrand)).append("\n");
    sb.append("    productCategory: ").append(toIndentedString(productCategory)).append("\n");
    sb.append("    productId: ").append(toIndentedString(productId)).append("\n");
    sb.append("    productName: ").append(toIndentedString(productName)).append("\n");
    sb.append("    productPrice: ").append(toIndentedString(productPrice)).append("\n");
    sb.append("    productQuantity: ").append(toIndentedString(productQuantity)).append("\n");
    sb.append("    productVariant: ").append(toIndentedString(productVariant)).append("\n");
    sb.append("    productVariantId: ").append(toIndentedString(productVariantId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("product_brand");
    openapiFields.add("product_category");
    openapiFields.add("product_id");
    openapiFields.add("product_name");
    openapiFields.add("product_price");
    openapiFields.add("product_quantity");
    openapiFields.add("product_variant");
    openapiFields.add("product_variant_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LineItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LineItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LineItem is not found in the empty JSON string", LineItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LineItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LineItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("product_brand") != null && !jsonObj.get("product_brand").isJsonNull()) && !jsonObj.get("product_brand").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `product_brand` to be a primitive type in the JSON string but got `%s`", jsonObj.get("product_brand").toString()));
      }
      if ((jsonObj.get("product_category") != null && !jsonObj.get("product_category").isJsonNull()) && !jsonObj.get("product_category").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `product_category` to be a primitive type in the JSON string but got `%s`", jsonObj.get("product_category").toString()));
      }
      if ((jsonObj.get("product_name") != null && !jsonObj.get("product_name").isJsonNull()) && !jsonObj.get("product_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `product_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("product_name").toString()));
      }
      if ((jsonObj.get("product_price") != null && !jsonObj.get("product_price").isJsonNull()) && !jsonObj.get("product_price").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `product_price` to be a primitive type in the JSON string but got `%s`", jsonObj.get("product_price").toString()));
      }
      if ((jsonObj.get("product_variant") != null && !jsonObj.get("product_variant").isJsonNull()) && !jsonObj.get("product_variant").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `product_variant` to be a primitive type in the JSON string but got `%s`", jsonObj.get("product_variant").toString()));
      }
      if ((jsonObj.get("product_variant_id") != null && !jsonObj.get("product_variant_id").isJsonNull()) && !jsonObj.get("product_variant_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `product_variant_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("product_variant_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LineItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LineItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LineItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LineItem.class));

       return (TypeAdapter<T>) new TypeAdapter<LineItem>() {
           @Override
           public void write(JsonWriter out, LineItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LineItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LineItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LineItem
   * @throws IOException if the JSON string is invalid with respect to LineItem
   */
  public static LineItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LineItem.class);
  }

  /**
   * Convert an instance of LineItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

