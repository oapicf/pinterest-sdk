/*
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.github.oapicf.pinterestsdk.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.github.oapicf.pinterestsdk.JSON;

/**
 * Third-party tracking URLs. Up to three tracking URLs - with a max length of 2,000 - are supported for each event type. Tracking URLs set at the ad group or ad level can override those set at the campaign level. For more information, see &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/third-party-and-dynamic-tracking\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Third-party and dynamic tracking&lt;/a&gt;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-05T02:01:32.024245558Z[Etc/UTC]", comments = "Generator version: 7.9.0")
public class TrackingUrls {
  public static final String SERIALIZED_NAME_IMPRESSION = "impression";
  @SerializedName(SERIALIZED_NAME_IMPRESSION)
  private List<String> impression = new ArrayList<>();

  public static final String SERIALIZED_NAME_CLICK = "click";
  @SerializedName(SERIALIZED_NAME_CLICK)
  private List<String> click = new ArrayList<>();

  public static final String SERIALIZED_NAME_ENGAGEMENT = "engagement";
  @SerializedName(SERIALIZED_NAME_ENGAGEMENT)
  private List<String> engagement = new ArrayList<>();

  public static final String SERIALIZED_NAME_BUYABLE_BUTTON = "buyable_button";
  @SerializedName(SERIALIZED_NAME_BUYABLE_BUTTON)
  private List<String> buyableButton = new ArrayList<>();

  public static final String SERIALIZED_NAME_AUDIENCE_VERIFICATION = "audience_verification";
  @SerializedName(SERIALIZED_NAME_AUDIENCE_VERIFICATION)
  private List<String> audienceVerification = new ArrayList<>();

  public TrackingUrls() {
  }

  public TrackingUrls impression(List<String> impression) {
    this.impression = impression;
    return this;
  }

  public TrackingUrls addImpressionItem(String impressionItem) {
    if (this.impression == null) {
      this.impression = new ArrayList<>();
    }
    this.impression.add(impressionItem);
    return this;
  }

  /**
   * Get impression
   * @return impression
   */
  @javax.annotation.Nullable
  public List<String> getImpression() {
    return impression;
  }

  public void setImpression(List<String> impression) {
    this.impression = impression;
  }


  public TrackingUrls click(List<String> click) {
    this.click = click;
    return this;
  }

  public TrackingUrls addClickItem(String clickItem) {
    if (this.click == null) {
      this.click = new ArrayList<>();
    }
    this.click.add(clickItem);
    return this;
  }

  /**
   * Get click
   * @return click
   */
  @javax.annotation.Nullable
  public List<String> getClick() {
    return click;
  }

  public void setClick(List<String> click) {
    this.click = click;
  }


  public TrackingUrls engagement(List<String> engagement) {
    this.engagement = engagement;
    return this;
  }

  public TrackingUrls addEngagementItem(String engagementItem) {
    if (this.engagement == null) {
      this.engagement = new ArrayList<>();
    }
    this.engagement.add(engagementItem);
    return this;
  }

  /**
   * Get engagement
   * @return engagement
   */
  @javax.annotation.Nullable
  public List<String> getEngagement() {
    return engagement;
  }

  public void setEngagement(List<String> engagement) {
    this.engagement = engagement;
  }


  public TrackingUrls buyableButton(List<String> buyableButton) {
    this.buyableButton = buyableButton;
    return this;
  }

  public TrackingUrls addBuyableButtonItem(String buyableButtonItem) {
    if (this.buyableButton == null) {
      this.buyableButton = new ArrayList<>();
    }
    this.buyableButton.add(buyableButtonItem);
    return this;
  }

  /**
   * Get buyableButton
   * @return buyableButton
   */
  @javax.annotation.Nullable
  public List<String> getBuyableButton() {
    return buyableButton;
  }

  public void setBuyableButton(List<String> buyableButton) {
    this.buyableButton = buyableButton;
  }


  public TrackingUrls audienceVerification(List<String> audienceVerification) {
    this.audienceVerification = audienceVerification;
    return this;
  }

  public TrackingUrls addAudienceVerificationItem(String audienceVerificationItem) {
    if (this.audienceVerification == null) {
      this.audienceVerification = new ArrayList<>();
    }
    this.audienceVerification.add(audienceVerificationItem);
    return this;
  }

  /**
   * Get audienceVerification
   * @return audienceVerification
   */
  @javax.annotation.Nullable
  public List<String> getAudienceVerification() {
    return audienceVerification;
  }

  public void setAudienceVerification(List<String> audienceVerification) {
    this.audienceVerification = audienceVerification;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TrackingUrls trackingUrls = (TrackingUrls) o;
    return Objects.equals(this.impression, trackingUrls.impression) &&
        Objects.equals(this.click, trackingUrls.click) &&
        Objects.equals(this.engagement, trackingUrls.engagement) &&
        Objects.equals(this.buyableButton, trackingUrls.buyableButton) &&
        Objects.equals(this.audienceVerification, trackingUrls.audienceVerification);
  }

  @Override
  public int hashCode() {
    return Objects.hash(impression, click, engagement, buyableButton, audienceVerification);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TrackingUrls {\n");
    sb.append("    impression: ").append(toIndentedString(impression)).append("\n");
    sb.append("    click: ").append(toIndentedString(click)).append("\n");
    sb.append("    engagement: ").append(toIndentedString(engagement)).append("\n");
    sb.append("    buyableButton: ").append(toIndentedString(buyableButton)).append("\n");
    sb.append("    audienceVerification: ").append(toIndentedString(audienceVerification)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("impression");
    openapiFields.add("click");
    openapiFields.add("engagement");
    openapiFields.add("buyable_button");
    openapiFields.add("audience_verification");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TrackingUrls
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TrackingUrls.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TrackingUrls is not found in the empty JSON string", TrackingUrls.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TrackingUrls.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TrackingUrls` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("impression") != null && !jsonObj.get("impression").isJsonNull() && !jsonObj.get("impression").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `impression` to be an array in the JSON string but got `%s`", jsonObj.get("impression").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("click") != null && !jsonObj.get("click").isJsonNull() && !jsonObj.get("click").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `click` to be an array in the JSON string but got `%s`", jsonObj.get("click").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("engagement") != null && !jsonObj.get("engagement").isJsonNull() && !jsonObj.get("engagement").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `engagement` to be an array in the JSON string but got `%s`", jsonObj.get("engagement").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("buyable_button") != null && !jsonObj.get("buyable_button").isJsonNull() && !jsonObj.get("buyable_button").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `buyable_button` to be an array in the JSON string but got `%s`", jsonObj.get("buyable_button").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("audience_verification") != null && !jsonObj.get("audience_verification").isJsonNull() && !jsonObj.get("audience_verification").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `audience_verification` to be an array in the JSON string but got `%s`", jsonObj.get("audience_verification").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TrackingUrls.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TrackingUrls' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TrackingUrls> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TrackingUrls.class));

       return (TypeAdapter<T>) new TypeAdapter<TrackingUrls>() {
           @Override
           public void write(JsonWriter out, TrackingUrls value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TrackingUrls read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TrackingUrls given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TrackingUrls
   * @throws IOException if the JSON string is invalid with respect to TrackingUrls
   */
  public static TrackingUrls fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TrackingUrls.class);
  }

  /**
   * Convert an instance of TrackingUrls to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

