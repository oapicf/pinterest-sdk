/*
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.github.oapicf.pinterestsdk.model;

import java.util.Objects;
import com.github.oapicf.pinterestsdk.model.CatalogsCreateCreativeAssetsItem;
import com.github.oapicf.pinterestsdk.model.CatalogsDeleteCreativeAssetsItem;
import com.github.oapicf.pinterestsdk.model.CatalogsUpdatableCreativeAssetsAttributes;
import com.github.oapicf.pinterestsdk.model.CatalogsUpdateCreativeAssetsItem;
import com.github.oapicf.pinterestsdk.model.CatalogsUpsertCreativeAssetsItem;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import com.github.oapicf.pinterestsdk.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-05T02:01:32.024245558Z[Etc/UTC]", comments = "Generator version: 7.9.0")
public class CatalogsCreativeAssetsBatchItem extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(CatalogsCreativeAssetsBatchItem.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!CatalogsCreativeAssetsBatchItem.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'CatalogsCreativeAssetsBatchItem' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<CatalogsCreateCreativeAssetsItem> adapterCatalogsCreateCreativeAssetsItem = gson.getDelegateAdapter(this, TypeToken.get(CatalogsCreateCreativeAssetsItem.class));
            final TypeAdapter<CatalogsUpsertCreativeAssetsItem> adapterCatalogsUpsertCreativeAssetsItem = gson.getDelegateAdapter(this, TypeToken.get(CatalogsUpsertCreativeAssetsItem.class));
            final TypeAdapter<CatalogsUpdateCreativeAssetsItem> adapterCatalogsUpdateCreativeAssetsItem = gson.getDelegateAdapter(this, TypeToken.get(CatalogsUpdateCreativeAssetsItem.class));
            final TypeAdapter<CatalogsDeleteCreativeAssetsItem> adapterCatalogsDeleteCreativeAssetsItem = gson.getDelegateAdapter(this, TypeToken.get(CatalogsDeleteCreativeAssetsItem.class));

            return (TypeAdapter<T>) new TypeAdapter<CatalogsCreativeAssetsBatchItem>() {
                @Override
                public void write(JsonWriter out, CatalogsCreativeAssetsBatchItem value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `CatalogsCreateCreativeAssetsItem`
                    if (value.getActualInstance() instanceof CatalogsCreateCreativeAssetsItem) {
                        JsonElement element = adapterCatalogsCreateCreativeAssetsItem.toJsonTree((CatalogsCreateCreativeAssetsItem)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `CatalogsUpsertCreativeAssetsItem`
                    if (value.getActualInstance() instanceof CatalogsUpsertCreativeAssetsItem) {
                        JsonElement element = adapterCatalogsUpsertCreativeAssetsItem.toJsonTree((CatalogsUpsertCreativeAssetsItem)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `CatalogsUpdateCreativeAssetsItem`
                    if (value.getActualInstance() instanceof CatalogsUpdateCreativeAssetsItem) {
                        JsonElement element = adapterCatalogsUpdateCreativeAssetsItem.toJsonTree((CatalogsUpdateCreativeAssetsItem)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `CatalogsDeleteCreativeAssetsItem`
                    if (value.getActualInstance() instanceof CatalogsDeleteCreativeAssetsItem) {
                        JsonElement element = adapterCatalogsDeleteCreativeAssetsItem.toJsonTree((CatalogsDeleteCreativeAssetsItem)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match anyOf schemas: CatalogsCreateCreativeAssetsItem, CatalogsDeleteCreativeAssetsItem, CatalogsUpdateCreativeAssetsItem, CatalogsUpsertCreativeAssetsItem");
                }

                @Override
                public CatalogsCreativeAssetsBatchItem read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize CatalogsCreateCreativeAssetsItem
                    try {
                        // validate the JSON object to see if any exception is thrown
                        CatalogsCreateCreativeAssetsItem.validateJsonElement(jsonElement);
                        actualAdapter = adapterCatalogsCreateCreativeAssetsItem;
                        CatalogsCreativeAssetsBatchItem ret = new CatalogsCreativeAssetsBatchItem();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for CatalogsCreateCreativeAssetsItem failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'CatalogsCreateCreativeAssetsItem'", e);
                    }
                    // deserialize CatalogsUpsertCreativeAssetsItem
                    try {
                        // validate the JSON object to see if any exception is thrown
                        CatalogsUpsertCreativeAssetsItem.validateJsonElement(jsonElement);
                        actualAdapter = adapterCatalogsUpsertCreativeAssetsItem;
                        CatalogsCreativeAssetsBatchItem ret = new CatalogsCreativeAssetsBatchItem();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for CatalogsUpsertCreativeAssetsItem failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'CatalogsUpsertCreativeAssetsItem'", e);
                    }
                    // deserialize CatalogsUpdateCreativeAssetsItem
                    try {
                        // validate the JSON object to see if any exception is thrown
                        CatalogsUpdateCreativeAssetsItem.validateJsonElement(jsonElement);
                        actualAdapter = adapterCatalogsUpdateCreativeAssetsItem;
                        CatalogsCreativeAssetsBatchItem ret = new CatalogsCreativeAssetsBatchItem();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for CatalogsUpdateCreativeAssetsItem failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'CatalogsUpdateCreativeAssetsItem'", e);
                    }
                    // deserialize CatalogsDeleteCreativeAssetsItem
                    try {
                        // validate the JSON object to see if any exception is thrown
                        CatalogsDeleteCreativeAssetsItem.validateJsonElement(jsonElement);
                        actualAdapter = adapterCatalogsDeleteCreativeAssetsItem;
                        CatalogsCreativeAssetsBatchItem ret = new CatalogsCreativeAssetsBatchItem();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for CatalogsDeleteCreativeAssetsItem failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'CatalogsDeleteCreativeAssetsItem'", e);
                    }

                    throw new IOException(String.format("Failed deserialization for CatalogsCreativeAssetsBatchItem: no class matches result, expected at least 1. Detailed failure message for anyOf schemas: %s. JSON: %s", errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in anyOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public CatalogsCreativeAssetsBatchItem() {
        super("anyOf", Boolean.FALSE);
    }

    public CatalogsCreativeAssetsBatchItem(Object o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("CatalogsCreateCreativeAssetsItem", CatalogsCreateCreativeAssetsItem.class);
        schemas.put("CatalogsUpsertCreativeAssetsItem", CatalogsUpsertCreativeAssetsItem.class);
        schemas.put("CatalogsUpdateCreativeAssetsItem", CatalogsUpdateCreativeAssetsItem.class);
        schemas.put("CatalogsDeleteCreativeAssetsItem", CatalogsDeleteCreativeAssetsItem.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return CatalogsCreativeAssetsBatchItem.schemas;
    }

    /**
     * Set the instance that matches the anyOf child schema, check
     * the instance parameter is valid against the anyOf child schemas:
     * CatalogsCreateCreativeAssetsItem, CatalogsDeleteCreativeAssetsItem, CatalogsUpdateCreativeAssetsItem, CatalogsUpsertCreativeAssetsItem
     *
     * It could be an instance of the 'anyOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof CatalogsCreateCreativeAssetsItem) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof CatalogsUpsertCreativeAssetsItem) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof CatalogsUpdateCreativeAssetsItem) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof CatalogsDeleteCreativeAssetsItem) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be CatalogsCreateCreativeAssetsItem, CatalogsDeleteCreativeAssetsItem, CatalogsUpdateCreativeAssetsItem, CatalogsUpsertCreativeAssetsItem");
    }

    /**
     * Get the actual instance, which can be the following:
     * CatalogsCreateCreativeAssetsItem, CatalogsDeleteCreativeAssetsItem, CatalogsUpdateCreativeAssetsItem, CatalogsUpsertCreativeAssetsItem
     *
     * @return The actual instance (CatalogsCreateCreativeAssetsItem, CatalogsDeleteCreativeAssetsItem, CatalogsUpdateCreativeAssetsItem, CatalogsUpsertCreativeAssetsItem)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `CatalogsCreateCreativeAssetsItem`. If the actual instance is not `CatalogsCreateCreativeAssetsItem`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CatalogsCreateCreativeAssetsItem`
     * @throws ClassCastException if the instance is not `CatalogsCreateCreativeAssetsItem`
     */
    public CatalogsCreateCreativeAssetsItem getCatalogsCreateCreativeAssetsItem() throws ClassCastException {
        return (CatalogsCreateCreativeAssetsItem)super.getActualInstance();
    }
    /**
     * Get the actual instance of `CatalogsUpsertCreativeAssetsItem`. If the actual instance is not `CatalogsUpsertCreativeAssetsItem`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CatalogsUpsertCreativeAssetsItem`
     * @throws ClassCastException if the instance is not `CatalogsUpsertCreativeAssetsItem`
     */
    public CatalogsUpsertCreativeAssetsItem getCatalogsUpsertCreativeAssetsItem() throws ClassCastException {
        return (CatalogsUpsertCreativeAssetsItem)super.getActualInstance();
    }
    /**
     * Get the actual instance of `CatalogsUpdateCreativeAssetsItem`. If the actual instance is not `CatalogsUpdateCreativeAssetsItem`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CatalogsUpdateCreativeAssetsItem`
     * @throws ClassCastException if the instance is not `CatalogsUpdateCreativeAssetsItem`
     */
    public CatalogsUpdateCreativeAssetsItem getCatalogsUpdateCreativeAssetsItem() throws ClassCastException {
        return (CatalogsUpdateCreativeAssetsItem)super.getActualInstance();
    }
    /**
     * Get the actual instance of `CatalogsDeleteCreativeAssetsItem`. If the actual instance is not `CatalogsDeleteCreativeAssetsItem`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CatalogsDeleteCreativeAssetsItem`
     * @throws ClassCastException if the instance is not `CatalogsDeleteCreativeAssetsItem`
     */
    public CatalogsDeleteCreativeAssetsItem getCatalogsDeleteCreativeAssetsItem() throws ClassCastException {
        return (CatalogsDeleteCreativeAssetsItem)super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to CatalogsCreativeAssetsBatchItem
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate anyOf schemas one by one
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with CatalogsCreateCreativeAssetsItem
        try {
            CatalogsCreateCreativeAssetsItem.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for CatalogsCreateCreativeAssetsItem failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with CatalogsUpsertCreativeAssetsItem
        try {
            CatalogsUpsertCreativeAssetsItem.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for CatalogsUpsertCreativeAssetsItem failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with CatalogsUpdateCreativeAssetsItem
        try {
            CatalogsUpdateCreativeAssetsItem.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for CatalogsUpdateCreativeAssetsItem failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with CatalogsDeleteCreativeAssetsItem
        try {
            CatalogsDeleteCreativeAssetsItem.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for CatalogsDeleteCreativeAssetsItem failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        throw new IOException(String.format("The JSON string is invalid for CatalogsCreativeAssetsBatchItem with anyOf schemas: CatalogsCreateCreativeAssetsItem, CatalogsDeleteCreativeAssetsItem, CatalogsUpdateCreativeAssetsItem, CatalogsUpsertCreativeAssetsItem. no class match the result, expected at least 1. Detailed failure message for anyOf schemas: %s. JSON: %s", errorMessages, jsonElement.toString()));
    }

    /**
     * Create an instance of CatalogsCreativeAssetsBatchItem given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of CatalogsCreativeAssetsBatchItem
     * @throws IOException if the JSON string is invalid with respect to CatalogsCreativeAssetsBatchItem
     */
    public static CatalogsCreativeAssetsBatchItem fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, CatalogsCreativeAssetsBatchItem.class);
    }

    /**
     * Convert an instance of CatalogsCreativeAssetsBatchItem to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

