/*
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.github.oapicf.pinterestsdk.model;

import java.util.Objects;
import com.github.oapicf.pinterestsdk.model.AvailabilityFilter;
import com.github.oapicf.pinterestsdk.model.BrandFilter;
import com.github.oapicf.pinterestsdk.model.CatalogsProductGroupCurrencyCriteria;
import com.github.oapicf.pinterestsdk.model.CatalogsProductGroupMultipleGenderCriteria;
import com.github.oapicf.pinterestsdk.model.CatalogsProductGroupMultipleMediaTypesCriteria;
import com.github.oapicf.pinterestsdk.model.CatalogsProductGroupMultipleStringCriteria;
import com.github.oapicf.pinterestsdk.model.CatalogsProductGroupMultipleStringListCriteria;
import com.github.oapicf.pinterestsdk.model.CatalogsProductGroupPricingCriteria;
import com.github.oapicf.pinterestsdk.model.ConditionFilter;
import com.github.oapicf.pinterestsdk.model.CurrencyFilter;
import com.github.oapicf.pinterestsdk.model.CustomLabel0Filter;
import com.github.oapicf.pinterestsdk.model.CustomLabel1Filter;
import com.github.oapicf.pinterestsdk.model.CustomLabel2Filter;
import com.github.oapicf.pinterestsdk.model.CustomLabel3Filter;
import com.github.oapicf.pinterestsdk.model.CustomLabel4Filter;
import com.github.oapicf.pinterestsdk.model.GenderFilter;
import com.github.oapicf.pinterestsdk.model.GoogleProductCategory0Filter;
import com.github.oapicf.pinterestsdk.model.GoogleProductCategory1Filter;
import com.github.oapicf.pinterestsdk.model.GoogleProductCategory2Filter;
import com.github.oapicf.pinterestsdk.model.GoogleProductCategory3Filter;
import com.github.oapicf.pinterestsdk.model.GoogleProductCategory4Filter;
import com.github.oapicf.pinterestsdk.model.GoogleProductCategory5Filter;
import com.github.oapicf.pinterestsdk.model.GoogleProductCategory6Filter;
import com.github.oapicf.pinterestsdk.model.ItemGroupIdFilter;
import com.github.oapicf.pinterestsdk.model.ItemIdFilter;
import com.github.oapicf.pinterestsdk.model.MaxPriceFilter;
import com.github.oapicf.pinterestsdk.model.MediaTypeFilter;
import com.github.oapicf.pinterestsdk.model.MinPriceFilter;
import com.github.oapicf.pinterestsdk.model.ProductGroupReferenceFilter;
import com.github.oapicf.pinterestsdk.model.ProductType0Filter;
import com.github.oapicf.pinterestsdk.model.ProductType1Filter;
import com.github.oapicf.pinterestsdk.model.ProductType2Filter;
import com.github.oapicf.pinterestsdk.model.ProductType3Filter;
import com.github.oapicf.pinterestsdk.model.ProductType4Filter;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import com.github.oapicf.pinterestsdk.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-05T02:01:32.024245558Z[Etc/UTC]", comments = "Generator version: 7.9.0")
public class CatalogsProductGroupFilterKeys extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(CatalogsProductGroupFilterKeys.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!CatalogsProductGroupFilterKeys.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'CatalogsProductGroupFilterKeys' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<MinPriceFilter> adapterMinPriceFilter = gson.getDelegateAdapter(this, TypeToken.get(MinPriceFilter.class));
            final TypeAdapter<MaxPriceFilter> adapterMaxPriceFilter = gson.getDelegateAdapter(this, TypeToken.get(MaxPriceFilter.class));
            final TypeAdapter<CurrencyFilter> adapterCurrencyFilter = gson.getDelegateAdapter(this, TypeToken.get(CurrencyFilter.class));
            final TypeAdapter<ItemIdFilter> adapterItemIdFilter = gson.getDelegateAdapter(this, TypeToken.get(ItemIdFilter.class));
            final TypeAdapter<AvailabilityFilter> adapterAvailabilityFilter = gson.getDelegateAdapter(this, TypeToken.get(AvailabilityFilter.class));
            final TypeAdapter<BrandFilter> adapterBrandFilter = gson.getDelegateAdapter(this, TypeToken.get(BrandFilter.class));
            final TypeAdapter<ConditionFilter> adapterConditionFilter = gson.getDelegateAdapter(this, TypeToken.get(ConditionFilter.class));
            final TypeAdapter<CustomLabel0Filter> adapterCustomLabel0Filter = gson.getDelegateAdapter(this, TypeToken.get(CustomLabel0Filter.class));
            final TypeAdapter<CustomLabel1Filter> adapterCustomLabel1Filter = gson.getDelegateAdapter(this, TypeToken.get(CustomLabel1Filter.class));
            final TypeAdapter<CustomLabel2Filter> adapterCustomLabel2Filter = gson.getDelegateAdapter(this, TypeToken.get(CustomLabel2Filter.class));
            final TypeAdapter<CustomLabel3Filter> adapterCustomLabel3Filter = gson.getDelegateAdapter(this, TypeToken.get(CustomLabel3Filter.class));
            final TypeAdapter<CustomLabel4Filter> adapterCustomLabel4Filter = gson.getDelegateAdapter(this, TypeToken.get(CustomLabel4Filter.class));
            final TypeAdapter<ItemGroupIdFilter> adapterItemGroupIdFilter = gson.getDelegateAdapter(this, TypeToken.get(ItemGroupIdFilter.class));
            final TypeAdapter<GenderFilter> adapterGenderFilter = gson.getDelegateAdapter(this, TypeToken.get(GenderFilter.class));
            final TypeAdapter<MediaTypeFilter> adapterMediaTypeFilter = gson.getDelegateAdapter(this, TypeToken.get(MediaTypeFilter.class));
            final TypeAdapter<ProductType4Filter> adapterProductType4Filter = gson.getDelegateAdapter(this, TypeToken.get(ProductType4Filter.class));
            final TypeAdapter<ProductType3Filter> adapterProductType3Filter = gson.getDelegateAdapter(this, TypeToken.get(ProductType3Filter.class));
            final TypeAdapter<ProductType2Filter> adapterProductType2Filter = gson.getDelegateAdapter(this, TypeToken.get(ProductType2Filter.class));
            final TypeAdapter<ProductType1Filter> adapterProductType1Filter = gson.getDelegateAdapter(this, TypeToken.get(ProductType1Filter.class));
            final TypeAdapter<ProductType0Filter> adapterProductType0Filter = gson.getDelegateAdapter(this, TypeToken.get(ProductType0Filter.class));
            final TypeAdapter<GoogleProductCategory6Filter> adapterGoogleProductCategory6Filter = gson.getDelegateAdapter(this, TypeToken.get(GoogleProductCategory6Filter.class));
            final TypeAdapter<GoogleProductCategory5Filter> adapterGoogleProductCategory5Filter = gson.getDelegateAdapter(this, TypeToken.get(GoogleProductCategory5Filter.class));
            final TypeAdapter<GoogleProductCategory4Filter> adapterGoogleProductCategory4Filter = gson.getDelegateAdapter(this, TypeToken.get(GoogleProductCategory4Filter.class));
            final TypeAdapter<GoogleProductCategory3Filter> adapterGoogleProductCategory3Filter = gson.getDelegateAdapter(this, TypeToken.get(GoogleProductCategory3Filter.class));
            final TypeAdapter<GoogleProductCategory2Filter> adapterGoogleProductCategory2Filter = gson.getDelegateAdapter(this, TypeToken.get(GoogleProductCategory2Filter.class));
            final TypeAdapter<GoogleProductCategory1Filter> adapterGoogleProductCategory1Filter = gson.getDelegateAdapter(this, TypeToken.get(GoogleProductCategory1Filter.class));
            final TypeAdapter<GoogleProductCategory0Filter> adapterGoogleProductCategory0Filter = gson.getDelegateAdapter(this, TypeToken.get(GoogleProductCategory0Filter.class));
            final TypeAdapter<ProductGroupReferenceFilter> adapterProductGroupReferenceFilter = gson.getDelegateAdapter(this, TypeToken.get(ProductGroupReferenceFilter.class));

            return (TypeAdapter<T>) new TypeAdapter<CatalogsProductGroupFilterKeys>() {
                @Override
                public void write(JsonWriter out, CatalogsProductGroupFilterKeys value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `MinPriceFilter`
                    if (value.getActualInstance() instanceof MinPriceFilter) {
                        JsonElement element = adapterMinPriceFilter.toJsonTree((MinPriceFilter)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `MaxPriceFilter`
                    if (value.getActualInstance() instanceof MaxPriceFilter) {
                        JsonElement element = adapterMaxPriceFilter.toJsonTree((MaxPriceFilter)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `CurrencyFilter`
                    if (value.getActualInstance() instanceof CurrencyFilter) {
                        JsonElement element = adapterCurrencyFilter.toJsonTree((CurrencyFilter)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ItemIdFilter`
                    if (value.getActualInstance() instanceof ItemIdFilter) {
                        JsonElement element = adapterItemIdFilter.toJsonTree((ItemIdFilter)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AvailabilityFilter`
                    if (value.getActualInstance() instanceof AvailabilityFilter) {
                        JsonElement element = adapterAvailabilityFilter.toJsonTree((AvailabilityFilter)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `BrandFilter`
                    if (value.getActualInstance() instanceof BrandFilter) {
                        JsonElement element = adapterBrandFilter.toJsonTree((BrandFilter)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ConditionFilter`
                    if (value.getActualInstance() instanceof ConditionFilter) {
                        JsonElement element = adapterConditionFilter.toJsonTree((ConditionFilter)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `CustomLabel0Filter`
                    if (value.getActualInstance() instanceof CustomLabel0Filter) {
                        JsonElement element = adapterCustomLabel0Filter.toJsonTree((CustomLabel0Filter)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `CustomLabel1Filter`
                    if (value.getActualInstance() instanceof CustomLabel1Filter) {
                        JsonElement element = adapterCustomLabel1Filter.toJsonTree((CustomLabel1Filter)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `CustomLabel2Filter`
                    if (value.getActualInstance() instanceof CustomLabel2Filter) {
                        JsonElement element = adapterCustomLabel2Filter.toJsonTree((CustomLabel2Filter)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `CustomLabel3Filter`
                    if (value.getActualInstance() instanceof CustomLabel3Filter) {
                        JsonElement element = adapterCustomLabel3Filter.toJsonTree((CustomLabel3Filter)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `CustomLabel4Filter`
                    if (value.getActualInstance() instanceof CustomLabel4Filter) {
                        JsonElement element = adapterCustomLabel4Filter.toJsonTree((CustomLabel4Filter)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ItemGroupIdFilter`
                    if (value.getActualInstance() instanceof ItemGroupIdFilter) {
                        JsonElement element = adapterItemGroupIdFilter.toJsonTree((ItemGroupIdFilter)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `GenderFilter`
                    if (value.getActualInstance() instanceof GenderFilter) {
                        JsonElement element = adapterGenderFilter.toJsonTree((GenderFilter)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `MediaTypeFilter`
                    if (value.getActualInstance() instanceof MediaTypeFilter) {
                        JsonElement element = adapterMediaTypeFilter.toJsonTree((MediaTypeFilter)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ProductType4Filter`
                    if (value.getActualInstance() instanceof ProductType4Filter) {
                        JsonElement element = adapterProductType4Filter.toJsonTree((ProductType4Filter)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ProductType3Filter`
                    if (value.getActualInstance() instanceof ProductType3Filter) {
                        JsonElement element = adapterProductType3Filter.toJsonTree((ProductType3Filter)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ProductType2Filter`
                    if (value.getActualInstance() instanceof ProductType2Filter) {
                        JsonElement element = adapterProductType2Filter.toJsonTree((ProductType2Filter)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ProductType1Filter`
                    if (value.getActualInstance() instanceof ProductType1Filter) {
                        JsonElement element = adapterProductType1Filter.toJsonTree((ProductType1Filter)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ProductType0Filter`
                    if (value.getActualInstance() instanceof ProductType0Filter) {
                        JsonElement element = adapterProductType0Filter.toJsonTree((ProductType0Filter)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `GoogleProductCategory6Filter`
                    if (value.getActualInstance() instanceof GoogleProductCategory6Filter) {
                        JsonElement element = adapterGoogleProductCategory6Filter.toJsonTree((GoogleProductCategory6Filter)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `GoogleProductCategory5Filter`
                    if (value.getActualInstance() instanceof GoogleProductCategory5Filter) {
                        JsonElement element = adapterGoogleProductCategory5Filter.toJsonTree((GoogleProductCategory5Filter)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `GoogleProductCategory4Filter`
                    if (value.getActualInstance() instanceof GoogleProductCategory4Filter) {
                        JsonElement element = adapterGoogleProductCategory4Filter.toJsonTree((GoogleProductCategory4Filter)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `GoogleProductCategory3Filter`
                    if (value.getActualInstance() instanceof GoogleProductCategory3Filter) {
                        JsonElement element = adapterGoogleProductCategory3Filter.toJsonTree((GoogleProductCategory3Filter)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `GoogleProductCategory2Filter`
                    if (value.getActualInstance() instanceof GoogleProductCategory2Filter) {
                        JsonElement element = adapterGoogleProductCategory2Filter.toJsonTree((GoogleProductCategory2Filter)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `GoogleProductCategory1Filter`
                    if (value.getActualInstance() instanceof GoogleProductCategory1Filter) {
                        JsonElement element = adapterGoogleProductCategory1Filter.toJsonTree((GoogleProductCategory1Filter)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `GoogleProductCategory0Filter`
                    if (value.getActualInstance() instanceof GoogleProductCategory0Filter) {
                        JsonElement element = adapterGoogleProductCategory0Filter.toJsonTree((GoogleProductCategory0Filter)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ProductGroupReferenceFilter`
                    if (value.getActualInstance() instanceof ProductGroupReferenceFilter) {
                        JsonElement element = adapterProductGroupReferenceFilter.toJsonTree((ProductGroupReferenceFilter)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match anyOf schemas: AvailabilityFilter, BrandFilter, ConditionFilter, CurrencyFilter, CustomLabel0Filter, CustomLabel1Filter, CustomLabel2Filter, CustomLabel3Filter, CustomLabel4Filter, GenderFilter, GoogleProductCategory0Filter, GoogleProductCategory1Filter, GoogleProductCategory2Filter, GoogleProductCategory3Filter, GoogleProductCategory4Filter, GoogleProductCategory5Filter, GoogleProductCategory6Filter, ItemGroupIdFilter, ItemIdFilter, MaxPriceFilter, MediaTypeFilter, MinPriceFilter, ProductGroupReferenceFilter, ProductType0Filter, ProductType1Filter, ProductType2Filter, ProductType3Filter, ProductType4Filter");
                }

                @Override
                public CatalogsProductGroupFilterKeys read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize MinPriceFilter
                    try {
                        // validate the JSON object to see if any exception is thrown
                        MinPriceFilter.validateJsonElement(jsonElement);
                        actualAdapter = adapterMinPriceFilter;
                        CatalogsProductGroupFilterKeys ret = new CatalogsProductGroupFilterKeys();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for MinPriceFilter failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'MinPriceFilter'", e);
                    }
                    // deserialize MaxPriceFilter
                    try {
                        // validate the JSON object to see if any exception is thrown
                        MaxPriceFilter.validateJsonElement(jsonElement);
                        actualAdapter = adapterMaxPriceFilter;
                        CatalogsProductGroupFilterKeys ret = new CatalogsProductGroupFilterKeys();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for MaxPriceFilter failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'MaxPriceFilter'", e);
                    }
                    // deserialize CurrencyFilter
                    try {
                        // validate the JSON object to see if any exception is thrown
                        CurrencyFilter.validateJsonElement(jsonElement);
                        actualAdapter = adapterCurrencyFilter;
                        CatalogsProductGroupFilterKeys ret = new CatalogsProductGroupFilterKeys();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for CurrencyFilter failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'CurrencyFilter'", e);
                    }
                    // deserialize ItemIdFilter
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ItemIdFilter.validateJsonElement(jsonElement);
                        actualAdapter = adapterItemIdFilter;
                        CatalogsProductGroupFilterKeys ret = new CatalogsProductGroupFilterKeys();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ItemIdFilter failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ItemIdFilter'", e);
                    }
                    // deserialize AvailabilityFilter
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AvailabilityFilter.validateJsonElement(jsonElement);
                        actualAdapter = adapterAvailabilityFilter;
                        CatalogsProductGroupFilterKeys ret = new CatalogsProductGroupFilterKeys();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AvailabilityFilter failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AvailabilityFilter'", e);
                    }
                    // deserialize BrandFilter
                    try {
                        // validate the JSON object to see if any exception is thrown
                        BrandFilter.validateJsonElement(jsonElement);
                        actualAdapter = adapterBrandFilter;
                        CatalogsProductGroupFilterKeys ret = new CatalogsProductGroupFilterKeys();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for BrandFilter failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'BrandFilter'", e);
                    }
                    // deserialize ConditionFilter
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ConditionFilter.validateJsonElement(jsonElement);
                        actualAdapter = adapterConditionFilter;
                        CatalogsProductGroupFilterKeys ret = new CatalogsProductGroupFilterKeys();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ConditionFilter failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ConditionFilter'", e);
                    }
                    // deserialize CustomLabel0Filter
                    try {
                        // validate the JSON object to see if any exception is thrown
                        CustomLabel0Filter.validateJsonElement(jsonElement);
                        actualAdapter = adapterCustomLabel0Filter;
                        CatalogsProductGroupFilterKeys ret = new CatalogsProductGroupFilterKeys();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for CustomLabel0Filter failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'CustomLabel0Filter'", e);
                    }
                    // deserialize CustomLabel1Filter
                    try {
                        // validate the JSON object to see if any exception is thrown
                        CustomLabel1Filter.validateJsonElement(jsonElement);
                        actualAdapter = adapterCustomLabel1Filter;
                        CatalogsProductGroupFilterKeys ret = new CatalogsProductGroupFilterKeys();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for CustomLabel1Filter failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'CustomLabel1Filter'", e);
                    }
                    // deserialize CustomLabel2Filter
                    try {
                        // validate the JSON object to see if any exception is thrown
                        CustomLabel2Filter.validateJsonElement(jsonElement);
                        actualAdapter = adapterCustomLabel2Filter;
                        CatalogsProductGroupFilterKeys ret = new CatalogsProductGroupFilterKeys();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for CustomLabel2Filter failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'CustomLabel2Filter'", e);
                    }
                    // deserialize CustomLabel3Filter
                    try {
                        // validate the JSON object to see if any exception is thrown
                        CustomLabel3Filter.validateJsonElement(jsonElement);
                        actualAdapter = adapterCustomLabel3Filter;
                        CatalogsProductGroupFilterKeys ret = new CatalogsProductGroupFilterKeys();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for CustomLabel3Filter failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'CustomLabel3Filter'", e);
                    }
                    // deserialize CustomLabel4Filter
                    try {
                        // validate the JSON object to see if any exception is thrown
                        CustomLabel4Filter.validateJsonElement(jsonElement);
                        actualAdapter = adapterCustomLabel4Filter;
                        CatalogsProductGroupFilterKeys ret = new CatalogsProductGroupFilterKeys();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for CustomLabel4Filter failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'CustomLabel4Filter'", e);
                    }
                    // deserialize ItemGroupIdFilter
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ItemGroupIdFilter.validateJsonElement(jsonElement);
                        actualAdapter = adapterItemGroupIdFilter;
                        CatalogsProductGroupFilterKeys ret = new CatalogsProductGroupFilterKeys();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ItemGroupIdFilter failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ItemGroupIdFilter'", e);
                    }
                    // deserialize GenderFilter
                    try {
                        // validate the JSON object to see if any exception is thrown
                        GenderFilter.validateJsonElement(jsonElement);
                        actualAdapter = adapterGenderFilter;
                        CatalogsProductGroupFilterKeys ret = new CatalogsProductGroupFilterKeys();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for GenderFilter failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'GenderFilter'", e);
                    }
                    // deserialize MediaTypeFilter
                    try {
                        // validate the JSON object to see if any exception is thrown
                        MediaTypeFilter.validateJsonElement(jsonElement);
                        actualAdapter = adapterMediaTypeFilter;
                        CatalogsProductGroupFilterKeys ret = new CatalogsProductGroupFilterKeys();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for MediaTypeFilter failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'MediaTypeFilter'", e);
                    }
                    // deserialize ProductType4Filter
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ProductType4Filter.validateJsonElement(jsonElement);
                        actualAdapter = adapterProductType4Filter;
                        CatalogsProductGroupFilterKeys ret = new CatalogsProductGroupFilterKeys();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ProductType4Filter failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ProductType4Filter'", e);
                    }
                    // deserialize ProductType3Filter
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ProductType3Filter.validateJsonElement(jsonElement);
                        actualAdapter = adapterProductType3Filter;
                        CatalogsProductGroupFilterKeys ret = new CatalogsProductGroupFilterKeys();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ProductType3Filter failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ProductType3Filter'", e);
                    }
                    // deserialize ProductType2Filter
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ProductType2Filter.validateJsonElement(jsonElement);
                        actualAdapter = adapterProductType2Filter;
                        CatalogsProductGroupFilterKeys ret = new CatalogsProductGroupFilterKeys();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ProductType2Filter failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ProductType2Filter'", e);
                    }
                    // deserialize ProductType1Filter
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ProductType1Filter.validateJsonElement(jsonElement);
                        actualAdapter = adapterProductType1Filter;
                        CatalogsProductGroupFilterKeys ret = new CatalogsProductGroupFilterKeys();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ProductType1Filter failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ProductType1Filter'", e);
                    }
                    // deserialize ProductType0Filter
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ProductType0Filter.validateJsonElement(jsonElement);
                        actualAdapter = adapterProductType0Filter;
                        CatalogsProductGroupFilterKeys ret = new CatalogsProductGroupFilterKeys();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ProductType0Filter failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ProductType0Filter'", e);
                    }
                    // deserialize GoogleProductCategory6Filter
                    try {
                        // validate the JSON object to see if any exception is thrown
                        GoogleProductCategory6Filter.validateJsonElement(jsonElement);
                        actualAdapter = adapterGoogleProductCategory6Filter;
                        CatalogsProductGroupFilterKeys ret = new CatalogsProductGroupFilterKeys();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for GoogleProductCategory6Filter failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'GoogleProductCategory6Filter'", e);
                    }
                    // deserialize GoogleProductCategory5Filter
                    try {
                        // validate the JSON object to see if any exception is thrown
                        GoogleProductCategory5Filter.validateJsonElement(jsonElement);
                        actualAdapter = adapterGoogleProductCategory5Filter;
                        CatalogsProductGroupFilterKeys ret = new CatalogsProductGroupFilterKeys();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for GoogleProductCategory5Filter failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'GoogleProductCategory5Filter'", e);
                    }
                    // deserialize GoogleProductCategory4Filter
                    try {
                        // validate the JSON object to see if any exception is thrown
                        GoogleProductCategory4Filter.validateJsonElement(jsonElement);
                        actualAdapter = adapterGoogleProductCategory4Filter;
                        CatalogsProductGroupFilterKeys ret = new CatalogsProductGroupFilterKeys();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for GoogleProductCategory4Filter failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'GoogleProductCategory4Filter'", e);
                    }
                    // deserialize GoogleProductCategory3Filter
                    try {
                        // validate the JSON object to see if any exception is thrown
                        GoogleProductCategory3Filter.validateJsonElement(jsonElement);
                        actualAdapter = adapterGoogleProductCategory3Filter;
                        CatalogsProductGroupFilterKeys ret = new CatalogsProductGroupFilterKeys();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for GoogleProductCategory3Filter failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'GoogleProductCategory3Filter'", e);
                    }
                    // deserialize GoogleProductCategory2Filter
                    try {
                        // validate the JSON object to see if any exception is thrown
                        GoogleProductCategory2Filter.validateJsonElement(jsonElement);
                        actualAdapter = adapterGoogleProductCategory2Filter;
                        CatalogsProductGroupFilterKeys ret = new CatalogsProductGroupFilterKeys();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for GoogleProductCategory2Filter failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'GoogleProductCategory2Filter'", e);
                    }
                    // deserialize GoogleProductCategory1Filter
                    try {
                        // validate the JSON object to see if any exception is thrown
                        GoogleProductCategory1Filter.validateJsonElement(jsonElement);
                        actualAdapter = adapterGoogleProductCategory1Filter;
                        CatalogsProductGroupFilterKeys ret = new CatalogsProductGroupFilterKeys();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for GoogleProductCategory1Filter failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'GoogleProductCategory1Filter'", e);
                    }
                    // deserialize GoogleProductCategory0Filter
                    try {
                        // validate the JSON object to see if any exception is thrown
                        GoogleProductCategory0Filter.validateJsonElement(jsonElement);
                        actualAdapter = adapterGoogleProductCategory0Filter;
                        CatalogsProductGroupFilterKeys ret = new CatalogsProductGroupFilterKeys();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for GoogleProductCategory0Filter failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'GoogleProductCategory0Filter'", e);
                    }
                    // deserialize ProductGroupReferenceFilter
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ProductGroupReferenceFilter.validateJsonElement(jsonElement);
                        actualAdapter = adapterProductGroupReferenceFilter;
                        CatalogsProductGroupFilterKeys ret = new CatalogsProductGroupFilterKeys();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ProductGroupReferenceFilter failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ProductGroupReferenceFilter'", e);
                    }

                    throw new IOException(String.format("Failed deserialization for CatalogsProductGroupFilterKeys: no class matches result, expected at least 1. Detailed failure message for anyOf schemas: %s. JSON: %s", errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in anyOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public CatalogsProductGroupFilterKeys() {
        super("anyOf", Boolean.FALSE);
    }

    public CatalogsProductGroupFilterKeys(Object o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("MinPriceFilter", MinPriceFilter.class);
        schemas.put("MaxPriceFilter", MaxPriceFilter.class);
        schemas.put("CurrencyFilter", CurrencyFilter.class);
        schemas.put("ItemIdFilter", ItemIdFilter.class);
        schemas.put("AvailabilityFilter", AvailabilityFilter.class);
        schemas.put("BrandFilter", BrandFilter.class);
        schemas.put("ConditionFilter", ConditionFilter.class);
        schemas.put("CustomLabel0Filter", CustomLabel0Filter.class);
        schemas.put("CustomLabel1Filter", CustomLabel1Filter.class);
        schemas.put("CustomLabel2Filter", CustomLabel2Filter.class);
        schemas.put("CustomLabel3Filter", CustomLabel3Filter.class);
        schemas.put("CustomLabel4Filter", CustomLabel4Filter.class);
        schemas.put("ItemGroupIdFilter", ItemGroupIdFilter.class);
        schemas.put("GenderFilter", GenderFilter.class);
        schemas.put("MediaTypeFilter", MediaTypeFilter.class);
        schemas.put("ProductType4Filter", ProductType4Filter.class);
        schemas.put("ProductType3Filter", ProductType3Filter.class);
        schemas.put("ProductType2Filter", ProductType2Filter.class);
        schemas.put("ProductType1Filter", ProductType1Filter.class);
        schemas.put("ProductType0Filter", ProductType0Filter.class);
        schemas.put("GoogleProductCategory6Filter", GoogleProductCategory6Filter.class);
        schemas.put("GoogleProductCategory5Filter", GoogleProductCategory5Filter.class);
        schemas.put("GoogleProductCategory4Filter", GoogleProductCategory4Filter.class);
        schemas.put("GoogleProductCategory3Filter", GoogleProductCategory3Filter.class);
        schemas.put("GoogleProductCategory2Filter", GoogleProductCategory2Filter.class);
        schemas.put("GoogleProductCategory1Filter", GoogleProductCategory1Filter.class);
        schemas.put("GoogleProductCategory0Filter", GoogleProductCategory0Filter.class);
        schemas.put("ProductGroupReferenceFilter", ProductGroupReferenceFilter.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return CatalogsProductGroupFilterKeys.schemas;
    }

    /**
     * Set the instance that matches the anyOf child schema, check
     * the instance parameter is valid against the anyOf child schemas:
     * AvailabilityFilter, BrandFilter, ConditionFilter, CurrencyFilter, CustomLabel0Filter, CustomLabel1Filter, CustomLabel2Filter, CustomLabel3Filter, CustomLabel4Filter, GenderFilter, GoogleProductCategory0Filter, GoogleProductCategory1Filter, GoogleProductCategory2Filter, GoogleProductCategory3Filter, GoogleProductCategory4Filter, GoogleProductCategory5Filter, GoogleProductCategory6Filter, ItemGroupIdFilter, ItemIdFilter, MaxPriceFilter, MediaTypeFilter, MinPriceFilter, ProductGroupReferenceFilter, ProductType0Filter, ProductType1Filter, ProductType2Filter, ProductType3Filter, ProductType4Filter
     *
     * It could be an instance of the 'anyOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof MinPriceFilter) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof MaxPriceFilter) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof CurrencyFilter) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ItemIdFilter) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AvailabilityFilter) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof BrandFilter) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ConditionFilter) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof CustomLabel0Filter) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof CustomLabel1Filter) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof CustomLabel2Filter) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof CustomLabel3Filter) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof CustomLabel4Filter) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ItemGroupIdFilter) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof GenderFilter) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof MediaTypeFilter) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ProductType4Filter) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ProductType3Filter) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ProductType2Filter) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ProductType1Filter) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ProductType0Filter) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof GoogleProductCategory6Filter) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof GoogleProductCategory5Filter) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof GoogleProductCategory4Filter) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof GoogleProductCategory3Filter) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof GoogleProductCategory2Filter) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof GoogleProductCategory1Filter) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof GoogleProductCategory0Filter) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ProductGroupReferenceFilter) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be AvailabilityFilter, BrandFilter, ConditionFilter, CurrencyFilter, CustomLabel0Filter, CustomLabel1Filter, CustomLabel2Filter, CustomLabel3Filter, CustomLabel4Filter, GenderFilter, GoogleProductCategory0Filter, GoogleProductCategory1Filter, GoogleProductCategory2Filter, GoogleProductCategory3Filter, GoogleProductCategory4Filter, GoogleProductCategory5Filter, GoogleProductCategory6Filter, ItemGroupIdFilter, ItemIdFilter, MaxPriceFilter, MediaTypeFilter, MinPriceFilter, ProductGroupReferenceFilter, ProductType0Filter, ProductType1Filter, ProductType2Filter, ProductType3Filter, ProductType4Filter");
    }

    /**
     * Get the actual instance, which can be the following:
     * AvailabilityFilter, BrandFilter, ConditionFilter, CurrencyFilter, CustomLabel0Filter, CustomLabel1Filter, CustomLabel2Filter, CustomLabel3Filter, CustomLabel4Filter, GenderFilter, GoogleProductCategory0Filter, GoogleProductCategory1Filter, GoogleProductCategory2Filter, GoogleProductCategory3Filter, GoogleProductCategory4Filter, GoogleProductCategory5Filter, GoogleProductCategory6Filter, ItemGroupIdFilter, ItemIdFilter, MaxPriceFilter, MediaTypeFilter, MinPriceFilter, ProductGroupReferenceFilter, ProductType0Filter, ProductType1Filter, ProductType2Filter, ProductType3Filter, ProductType4Filter
     *
     * @return The actual instance (AvailabilityFilter, BrandFilter, ConditionFilter, CurrencyFilter, CustomLabel0Filter, CustomLabel1Filter, CustomLabel2Filter, CustomLabel3Filter, CustomLabel4Filter, GenderFilter, GoogleProductCategory0Filter, GoogleProductCategory1Filter, GoogleProductCategory2Filter, GoogleProductCategory3Filter, GoogleProductCategory4Filter, GoogleProductCategory5Filter, GoogleProductCategory6Filter, ItemGroupIdFilter, ItemIdFilter, MaxPriceFilter, MediaTypeFilter, MinPriceFilter, ProductGroupReferenceFilter, ProductType0Filter, ProductType1Filter, ProductType2Filter, ProductType3Filter, ProductType4Filter)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `MinPriceFilter`. If the actual instance is not `MinPriceFilter`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `MinPriceFilter`
     * @throws ClassCastException if the instance is not `MinPriceFilter`
     */
    public MinPriceFilter getMinPriceFilter() throws ClassCastException {
        return (MinPriceFilter)super.getActualInstance();
    }
    /**
     * Get the actual instance of `MaxPriceFilter`. If the actual instance is not `MaxPriceFilter`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `MaxPriceFilter`
     * @throws ClassCastException if the instance is not `MaxPriceFilter`
     */
    public MaxPriceFilter getMaxPriceFilter() throws ClassCastException {
        return (MaxPriceFilter)super.getActualInstance();
    }
    /**
     * Get the actual instance of `CurrencyFilter`. If the actual instance is not `CurrencyFilter`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CurrencyFilter`
     * @throws ClassCastException if the instance is not `CurrencyFilter`
     */
    public CurrencyFilter getCurrencyFilter() throws ClassCastException {
        return (CurrencyFilter)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ItemIdFilter`. If the actual instance is not `ItemIdFilter`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ItemIdFilter`
     * @throws ClassCastException if the instance is not `ItemIdFilter`
     */
    public ItemIdFilter getItemIdFilter() throws ClassCastException {
        return (ItemIdFilter)super.getActualInstance();
    }
    /**
     * Get the actual instance of `AvailabilityFilter`. If the actual instance is not `AvailabilityFilter`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AvailabilityFilter`
     * @throws ClassCastException if the instance is not `AvailabilityFilter`
     */
    public AvailabilityFilter getAvailabilityFilter() throws ClassCastException {
        return (AvailabilityFilter)super.getActualInstance();
    }
    /**
     * Get the actual instance of `BrandFilter`. If the actual instance is not `BrandFilter`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `BrandFilter`
     * @throws ClassCastException if the instance is not `BrandFilter`
     */
    public BrandFilter getBrandFilter() throws ClassCastException {
        return (BrandFilter)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ConditionFilter`. If the actual instance is not `ConditionFilter`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ConditionFilter`
     * @throws ClassCastException if the instance is not `ConditionFilter`
     */
    public ConditionFilter getConditionFilter() throws ClassCastException {
        return (ConditionFilter)super.getActualInstance();
    }
    /**
     * Get the actual instance of `CustomLabel0Filter`. If the actual instance is not `CustomLabel0Filter`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CustomLabel0Filter`
     * @throws ClassCastException if the instance is not `CustomLabel0Filter`
     */
    public CustomLabel0Filter getCustomLabel0Filter() throws ClassCastException {
        return (CustomLabel0Filter)super.getActualInstance();
    }
    /**
     * Get the actual instance of `CustomLabel1Filter`. If the actual instance is not `CustomLabel1Filter`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CustomLabel1Filter`
     * @throws ClassCastException if the instance is not `CustomLabel1Filter`
     */
    public CustomLabel1Filter getCustomLabel1Filter() throws ClassCastException {
        return (CustomLabel1Filter)super.getActualInstance();
    }
    /**
     * Get the actual instance of `CustomLabel2Filter`. If the actual instance is not `CustomLabel2Filter`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CustomLabel2Filter`
     * @throws ClassCastException if the instance is not `CustomLabel2Filter`
     */
    public CustomLabel2Filter getCustomLabel2Filter() throws ClassCastException {
        return (CustomLabel2Filter)super.getActualInstance();
    }
    /**
     * Get the actual instance of `CustomLabel3Filter`. If the actual instance is not `CustomLabel3Filter`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CustomLabel3Filter`
     * @throws ClassCastException if the instance is not `CustomLabel3Filter`
     */
    public CustomLabel3Filter getCustomLabel3Filter() throws ClassCastException {
        return (CustomLabel3Filter)super.getActualInstance();
    }
    /**
     * Get the actual instance of `CustomLabel4Filter`. If the actual instance is not `CustomLabel4Filter`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CustomLabel4Filter`
     * @throws ClassCastException if the instance is not `CustomLabel4Filter`
     */
    public CustomLabel4Filter getCustomLabel4Filter() throws ClassCastException {
        return (CustomLabel4Filter)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ItemGroupIdFilter`. If the actual instance is not `ItemGroupIdFilter`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ItemGroupIdFilter`
     * @throws ClassCastException if the instance is not `ItemGroupIdFilter`
     */
    public ItemGroupIdFilter getItemGroupIdFilter() throws ClassCastException {
        return (ItemGroupIdFilter)super.getActualInstance();
    }
    /**
     * Get the actual instance of `GenderFilter`. If the actual instance is not `GenderFilter`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `GenderFilter`
     * @throws ClassCastException if the instance is not `GenderFilter`
     */
    public GenderFilter getGenderFilter() throws ClassCastException {
        return (GenderFilter)super.getActualInstance();
    }
    /**
     * Get the actual instance of `MediaTypeFilter`. If the actual instance is not `MediaTypeFilter`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `MediaTypeFilter`
     * @throws ClassCastException if the instance is not `MediaTypeFilter`
     */
    public MediaTypeFilter getMediaTypeFilter() throws ClassCastException {
        return (MediaTypeFilter)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ProductType4Filter`. If the actual instance is not `ProductType4Filter`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ProductType4Filter`
     * @throws ClassCastException if the instance is not `ProductType4Filter`
     */
    public ProductType4Filter getProductType4Filter() throws ClassCastException {
        return (ProductType4Filter)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ProductType3Filter`. If the actual instance is not `ProductType3Filter`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ProductType3Filter`
     * @throws ClassCastException if the instance is not `ProductType3Filter`
     */
    public ProductType3Filter getProductType3Filter() throws ClassCastException {
        return (ProductType3Filter)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ProductType2Filter`. If the actual instance is not `ProductType2Filter`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ProductType2Filter`
     * @throws ClassCastException if the instance is not `ProductType2Filter`
     */
    public ProductType2Filter getProductType2Filter() throws ClassCastException {
        return (ProductType2Filter)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ProductType1Filter`. If the actual instance is not `ProductType1Filter`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ProductType1Filter`
     * @throws ClassCastException if the instance is not `ProductType1Filter`
     */
    public ProductType1Filter getProductType1Filter() throws ClassCastException {
        return (ProductType1Filter)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ProductType0Filter`. If the actual instance is not `ProductType0Filter`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ProductType0Filter`
     * @throws ClassCastException if the instance is not `ProductType0Filter`
     */
    public ProductType0Filter getProductType0Filter() throws ClassCastException {
        return (ProductType0Filter)super.getActualInstance();
    }
    /**
     * Get the actual instance of `GoogleProductCategory6Filter`. If the actual instance is not `GoogleProductCategory6Filter`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `GoogleProductCategory6Filter`
     * @throws ClassCastException if the instance is not `GoogleProductCategory6Filter`
     */
    public GoogleProductCategory6Filter getGoogleProductCategory6Filter() throws ClassCastException {
        return (GoogleProductCategory6Filter)super.getActualInstance();
    }
    /**
     * Get the actual instance of `GoogleProductCategory5Filter`. If the actual instance is not `GoogleProductCategory5Filter`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `GoogleProductCategory5Filter`
     * @throws ClassCastException if the instance is not `GoogleProductCategory5Filter`
     */
    public GoogleProductCategory5Filter getGoogleProductCategory5Filter() throws ClassCastException {
        return (GoogleProductCategory5Filter)super.getActualInstance();
    }
    /**
     * Get the actual instance of `GoogleProductCategory4Filter`. If the actual instance is not `GoogleProductCategory4Filter`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `GoogleProductCategory4Filter`
     * @throws ClassCastException if the instance is not `GoogleProductCategory4Filter`
     */
    public GoogleProductCategory4Filter getGoogleProductCategory4Filter() throws ClassCastException {
        return (GoogleProductCategory4Filter)super.getActualInstance();
    }
    /**
     * Get the actual instance of `GoogleProductCategory3Filter`. If the actual instance is not `GoogleProductCategory3Filter`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `GoogleProductCategory3Filter`
     * @throws ClassCastException if the instance is not `GoogleProductCategory3Filter`
     */
    public GoogleProductCategory3Filter getGoogleProductCategory3Filter() throws ClassCastException {
        return (GoogleProductCategory3Filter)super.getActualInstance();
    }
    /**
     * Get the actual instance of `GoogleProductCategory2Filter`. If the actual instance is not `GoogleProductCategory2Filter`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `GoogleProductCategory2Filter`
     * @throws ClassCastException if the instance is not `GoogleProductCategory2Filter`
     */
    public GoogleProductCategory2Filter getGoogleProductCategory2Filter() throws ClassCastException {
        return (GoogleProductCategory2Filter)super.getActualInstance();
    }
    /**
     * Get the actual instance of `GoogleProductCategory1Filter`. If the actual instance is not `GoogleProductCategory1Filter`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `GoogleProductCategory1Filter`
     * @throws ClassCastException if the instance is not `GoogleProductCategory1Filter`
     */
    public GoogleProductCategory1Filter getGoogleProductCategory1Filter() throws ClassCastException {
        return (GoogleProductCategory1Filter)super.getActualInstance();
    }
    /**
     * Get the actual instance of `GoogleProductCategory0Filter`. If the actual instance is not `GoogleProductCategory0Filter`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `GoogleProductCategory0Filter`
     * @throws ClassCastException if the instance is not `GoogleProductCategory0Filter`
     */
    public GoogleProductCategory0Filter getGoogleProductCategory0Filter() throws ClassCastException {
        return (GoogleProductCategory0Filter)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ProductGroupReferenceFilter`. If the actual instance is not `ProductGroupReferenceFilter`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ProductGroupReferenceFilter`
     * @throws ClassCastException if the instance is not `ProductGroupReferenceFilter`
     */
    public ProductGroupReferenceFilter getProductGroupReferenceFilter() throws ClassCastException {
        return (ProductGroupReferenceFilter)super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to CatalogsProductGroupFilterKeys
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate anyOf schemas one by one
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with MinPriceFilter
        try {
            MinPriceFilter.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for MinPriceFilter failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with MaxPriceFilter
        try {
            MaxPriceFilter.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for MaxPriceFilter failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with CurrencyFilter
        try {
            CurrencyFilter.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for CurrencyFilter failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ItemIdFilter
        try {
            ItemIdFilter.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ItemIdFilter failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AvailabilityFilter
        try {
            AvailabilityFilter.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AvailabilityFilter failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with BrandFilter
        try {
            BrandFilter.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for BrandFilter failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ConditionFilter
        try {
            ConditionFilter.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ConditionFilter failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with CustomLabel0Filter
        try {
            CustomLabel0Filter.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for CustomLabel0Filter failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with CustomLabel1Filter
        try {
            CustomLabel1Filter.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for CustomLabel1Filter failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with CustomLabel2Filter
        try {
            CustomLabel2Filter.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for CustomLabel2Filter failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with CustomLabel3Filter
        try {
            CustomLabel3Filter.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for CustomLabel3Filter failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with CustomLabel4Filter
        try {
            CustomLabel4Filter.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for CustomLabel4Filter failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ItemGroupIdFilter
        try {
            ItemGroupIdFilter.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ItemGroupIdFilter failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with GenderFilter
        try {
            GenderFilter.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for GenderFilter failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with MediaTypeFilter
        try {
            MediaTypeFilter.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for MediaTypeFilter failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ProductType4Filter
        try {
            ProductType4Filter.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ProductType4Filter failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ProductType3Filter
        try {
            ProductType3Filter.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ProductType3Filter failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ProductType2Filter
        try {
            ProductType2Filter.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ProductType2Filter failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ProductType1Filter
        try {
            ProductType1Filter.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ProductType1Filter failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ProductType0Filter
        try {
            ProductType0Filter.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ProductType0Filter failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with GoogleProductCategory6Filter
        try {
            GoogleProductCategory6Filter.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for GoogleProductCategory6Filter failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with GoogleProductCategory5Filter
        try {
            GoogleProductCategory5Filter.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for GoogleProductCategory5Filter failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with GoogleProductCategory4Filter
        try {
            GoogleProductCategory4Filter.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for GoogleProductCategory4Filter failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with GoogleProductCategory3Filter
        try {
            GoogleProductCategory3Filter.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for GoogleProductCategory3Filter failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with GoogleProductCategory2Filter
        try {
            GoogleProductCategory2Filter.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for GoogleProductCategory2Filter failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with GoogleProductCategory1Filter
        try {
            GoogleProductCategory1Filter.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for GoogleProductCategory1Filter failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with GoogleProductCategory0Filter
        try {
            GoogleProductCategory0Filter.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for GoogleProductCategory0Filter failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ProductGroupReferenceFilter
        try {
            ProductGroupReferenceFilter.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ProductGroupReferenceFilter failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        throw new IOException(String.format("The JSON string is invalid for CatalogsProductGroupFilterKeys with anyOf schemas: AvailabilityFilter, BrandFilter, ConditionFilter, CurrencyFilter, CustomLabel0Filter, CustomLabel1Filter, CustomLabel2Filter, CustomLabel3Filter, CustomLabel4Filter, GenderFilter, GoogleProductCategory0Filter, GoogleProductCategory1Filter, GoogleProductCategory2Filter, GoogleProductCategory3Filter, GoogleProductCategory4Filter, GoogleProductCategory5Filter, GoogleProductCategory6Filter, ItemGroupIdFilter, ItemIdFilter, MaxPriceFilter, MediaTypeFilter, MinPriceFilter, ProductGroupReferenceFilter, ProductType0Filter, ProductType1Filter, ProductType2Filter, ProductType3Filter, ProductType4Filter. no class match the result, expected at least 1. Detailed failure message for anyOf schemas: %s. JSON: %s", errorMessages, jsonElement.toString()));
    }

    /**
     * Create an instance of CatalogsProductGroupFilterKeys given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of CatalogsProductGroupFilterKeys
     * @throws IOException if the JSON string is invalid with respect to CatalogsProductGroupFilterKeys
     */
    public static CatalogsProductGroupFilterKeys fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, CatalogsProductGroupFilterKeys.class);
    }

    /**
     * Convert an instance of CatalogsProductGroupFilterKeys to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

