/*
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.github.oapicf.pinterestsdk.model;

import java.util.Objects;
import com.github.oapicf.pinterestsdk.model.PinMediaSourceImageBase64;
import com.github.oapicf.pinterestsdk.model.PinMediaSourceImageURL;
import com.github.oapicf.pinterestsdk.model.PinMediaSourceImagesBase64;
import com.github.oapicf.pinterestsdk.model.PinMediaSourceImagesURL;
import com.github.oapicf.pinterestsdk.model.PinMediaSourceImagesURLItemsInner;
import com.github.oapicf.pinterestsdk.model.PinMediaSourcePinURL;
import com.github.oapicf.pinterestsdk.model.PinMediaSourceVideoID;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import com.github.oapicf.pinterestsdk.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-05T02:01:32.024245558Z[Etc/UTC]", comments = "Generator version: 7.9.0")
public class PinMediaSource extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(PinMediaSource.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!PinMediaSource.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'PinMediaSource' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<PinMediaSourceImageBase64> adapterPinMediaSourceImageBase64 = gson.getDelegateAdapter(this, TypeToken.get(PinMediaSourceImageBase64.class));
            final TypeAdapter<PinMediaSourceImageURL> adapterPinMediaSourceImageURL = gson.getDelegateAdapter(this, TypeToken.get(PinMediaSourceImageURL.class));
            final TypeAdapter<PinMediaSourceVideoID> adapterPinMediaSourceVideoID = gson.getDelegateAdapter(this, TypeToken.get(PinMediaSourceVideoID.class));
            final TypeAdapter<PinMediaSourceImagesBase64> adapterPinMediaSourceImagesBase64 = gson.getDelegateAdapter(this, TypeToken.get(PinMediaSourceImagesBase64.class));
            final TypeAdapter<PinMediaSourceImagesURL> adapterPinMediaSourceImagesURL = gson.getDelegateAdapter(this, TypeToken.get(PinMediaSourceImagesURL.class));
            final TypeAdapter<PinMediaSourcePinURL> adapterPinMediaSourcePinURL = gson.getDelegateAdapter(this, TypeToken.get(PinMediaSourcePinURL.class));

            return (TypeAdapter<T>) new TypeAdapter<PinMediaSource>() {
                @Override
                public void write(JsonWriter out, PinMediaSource value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `PinMediaSourceImageBase64`
                    if (value.getActualInstance() instanceof PinMediaSourceImageBase64) {
                        JsonElement element = adapterPinMediaSourceImageBase64.toJsonTree((PinMediaSourceImageBase64)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `PinMediaSourceImageURL`
                    if (value.getActualInstance() instanceof PinMediaSourceImageURL) {
                        JsonElement element = adapterPinMediaSourceImageURL.toJsonTree((PinMediaSourceImageURL)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `PinMediaSourceVideoID`
                    if (value.getActualInstance() instanceof PinMediaSourceVideoID) {
                        JsonElement element = adapterPinMediaSourceVideoID.toJsonTree((PinMediaSourceVideoID)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `PinMediaSourceImagesBase64`
                    if (value.getActualInstance() instanceof PinMediaSourceImagesBase64) {
                        JsonElement element = adapterPinMediaSourceImagesBase64.toJsonTree((PinMediaSourceImagesBase64)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `PinMediaSourceImagesURL`
                    if (value.getActualInstance() instanceof PinMediaSourceImagesURL) {
                        JsonElement element = adapterPinMediaSourceImagesURL.toJsonTree((PinMediaSourceImagesURL)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `PinMediaSourcePinURL`
                    if (value.getActualInstance() instanceof PinMediaSourcePinURL) {
                        JsonElement element = adapterPinMediaSourcePinURL.toJsonTree((PinMediaSourcePinURL)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: PinMediaSourceImageBase64, PinMediaSourceImageURL, PinMediaSourceImagesBase64, PinMediaSourceImagesURL, PinMediaSourcePinURL, PinMediaSourceVideoID");
                }

                @Override
                public PinMediaSource read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize PinMediaSourceImageBase64
                    try {
                        // validate the JSON object to see if any exception is thrown
                        PinMediaSourceImageBase64.validateJsonElement(jsonElement);
                        actualAdapter = adapterPinMediaSourceImageBase64;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'PinMediaSourceImageBase64'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for PinMediaSourceImageBase64 failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'PinMediaSourceImageBase64'", e);
                    }
                    // deserialize PinMediaSourceImageURL
                    try {
                        // validate the JSON object to see if any exception is thrown
                        PinMediaSourceImageURL.validateJsonElement(jsonElement);
                        actualAdapter = adapterPinMediaSourceImageURL;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'PinMediaSourceImageURL'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for PinMediaSourceImageURL failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'PinMediaSourceImageURL'", e);
                    }
                    // deserialize PinMediaSourceVideoID
                    try {
                        // validate the JSON object to see if any exception is thrown
                        PinMediaSourceVideoID.validateJsonElement(jsonElement);
                        actualAdapter = adapterPinMediaSourceVideoID;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'PinMediaSourceVideoID'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for PinMediaSourceVideoID failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'PinMediaSourceVideoID'", e);
                    }
                    // deserialize PinMediaSourceImagesBase64
                    try {
                        // validate the JSON object to see if any exception is thrown
                        PinMediaSourceImagesBase64.validateJsonElement(jsonElement);
                        actualAdapter = adapterPinMediaSourceImagesBase64;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'PinMediaSourceImagesBase64'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for PinMediaSourceImagesBase64 failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'PinMediaSourceImagesBase64'", e);
                    }
                    // deserialize PinMediaSourceImagesURL
                    try {
                        // validate the JSON object to see if any exception is thrown
                        PinMediaSourceImagesURL.validateJsonElement(jsonElement);
                        actualAdapter = adapterPinMediaSourceImagesURL;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'PinMediaSourceImagesURL'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for PinMediaSourceImagesURL failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'PinMediaSourceImagesURL'", e);
                    }
                    // deserialize PinMediaSourcePinURL
                    try {
                        // validate the JSON object to see if any exception is thrown
                        PinMediaSourcePinURL.validateJsonElement(jsonElement);
                        actualAdapter = adapterPinMediaSourcePinURL;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'PinMediaSourcePinURL'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for PinMediaSourcePinURL failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'PinMediaSourcePinURL'", e);
                    }

                    if (match == 1) {
                        PinMediaSource ret = new PinMediaSource();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for PinMediaSource: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public PinMediaSource() {
        super("oneOf", Boolean.FALSE);
    }

    public PinMediaSource(Object o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("PinMediaSourceImageBase64", PinMediaSourceImageBase64.class);
        schemas.put("PinMediaSourceImageURL", PinMediaSourceImageURL.class);
        schemas.put("PinMediaSourceVideoID", PinMediaSourceVideoID.class);
        schemas.put("PinMediaSourceImagesBase64", PinMediaSourceImagesBase64.class);
        schemas.put("PinMediaSourceImagesURL", PinMediaSourceImagesURL.class);
        schemas.put("PinMediaSourcePinURL", PinMediaSourcePinURL.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return PinMediaSource.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * PinMediaSourceImageBase64, PinMediaSourceImageURL, PinMediaSourceImagesBase64, PinMediaSourceImagesURL, PinMediaSourcePinURL, PinMediaSourceVideoID
     *
     * It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof PinMediaSourceImageBase64) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof PinMediaSourceImageURL) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof PinMediaSourceVideoID) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof PinMediaSourceImagesBase64) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof PinMediaSourceImagesURL) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof PinMediaSourcePinURL) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be PinMediaSourceImageBase64, PinMediaSourceImageURL, PinMediaSourceImagesBase64, PinMediaSourceImagesURL, PinMediaSourcePinURL, PinMediaSourceVideoID");
    }

    /**
     * Get the actual instance, which can be the following:
     * PinMediaSourceImageBase64, PinMediaSourceImageURL, PinMediaSourceImagesBase64, PinMediaSourceImagesURL, PinMediaSourcePinURL, PinMediaSourceVideoID
     *
     * @return The actual instance (PinMediaSourceImageBase64, PinMediaSourceImageURL, PinMediaSourceImagesBase64, PinMediaSourceImagesURL, PinMediaSourcePinURL, PinMediaSourceVideoID)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `PinMediaSourceImageBase64`. If the actual instance is not `PinMediaSourceImageBase64`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PinMediaSourceImageBase64`
     * @throws ClassCastException if the instance is not `PinMediaSourceImageBase64`
     */
    public PinMediaSourceImageBase64 getPinMediaSourceImageBase64() throws ClassCastException {
        return (PinMediaSourceImageBase64)super.getActualInstance();
    }
    /**
     * Get the actual instance of `PinMediaSourceImageURL`. If the actual instance is not `PinMediaSourceImageURL`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PinMediaSourceImageURL`
     * @throws ClassCastException if the instance is not `PinMediaSourceImageURL`
     */
    public PinMediaSourceImageURL getPinMediaSourceImageURL() throws ClassCastException {
        return (PinMediaSourceImageURL)super.getActualInstance();
    }
    /**
     * Get the actual instance of `PinMediaSourceVideoID`. If the actual instance is not `PinMediaSourceVideoID`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PinMediaSourceVideoID`
     * @throws ClassCastException if the instance is not `PinMediaSourceVideoID`
     */
    public PinMediaSourceVideoID getPinMediaSourceVideoID() throws ClassCastException {
        return (PinMediaSourceVideoID)super.getActualInstance();
    }
    /**
     * Get the actual instance of `PinMediaSourceImagesBase64`. If the actual instance is not `PinMediaSourceImagesBase64`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PinMediaSourceImagesBase64`
     * @throws ClassCastException if the instance is not `PinMediaSourceImagesBase64`
     */
    public PinMediaSourceImagesBase64 getPinMediaSourceImagesBase64() throws ClassCastException {
        return (PinMediaSourceImagesBase64)super.getActualInstance();
    }
    /**
     * Get the actual instance of `PinMediaSourceImagesURL`. If the actual instance is not `PinMediaSourceImagesURL`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PinMediaSourceImagesURL`
     * @throws ClassCastException if the instance is not `PinMediaSourceImagesURL`
     */
    public PinMediaSourceImagesURL getPinMediaSourceImagesURL() throws ClassCastException {
        return (PinMediaSourceImagesURL)super.getActualInstance();
    }
    /**
     * Get the actual instance of `PinMediaSourcePinURL`. If the actual instance is not `PinMediaSourcePinURL`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PinMediaSourcePinURL`
     * @throws ClassCastException if the instance is not `PinMediaSourcePinURL`
     */
    public PinMediaSourcePinURL getPinMediaSourcePinURL() throws ClassCastException {
        return (PinMediaSourcePinURL)super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to PinMediaSource
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate oneOf schemas one by one
        int validCount = 0;
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with PinMediaSourceImageBase64
        try {
            PinMediaSourceImageBase64.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for PinMediaSourceImageBase64 failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with PinMediaSourceImageURL
        try {
            PinMediaSourceImageURL.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for PinMediaSourceImageURL failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with PinMediaSourceVideoID
        try {
            PinMediaSourceVideoID.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for PinMediaSourceVideoID failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with PinMediaSourceImagesBase64
        try {
            PinMediaSourceImagesBase64.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for PinMediaSourceImagesBase64 failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with PinMediaSourceImagesURL
        try {
            PinMediaSourceImagesURL.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for PinMediaSourceImagesURL failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with PinMediaSourcePinURL
        try {
            PinMediaSourcePinURL.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for PinMediaSourcePinURL failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        if (validCount != 1) {
            throw new IOException(String.format("The JSON string is invalid for PinMediaSource with oneOf schemas: PinMediaSourceImageBase64, PinMediaSourceImageURL, PinMediaSourceImagesBase64, PinMediaSourceImagesURL, PinMediaSourcePinURL, PinMediaSourceVideoID. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonElement.toString()));
        }
    }

    /**
     * Create an instance of PinMediaSource given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of PinMediaSource
     * @throws IOException if the JSON string is invalid with respect to PinMediaSource
     */
    public static PinMediaSource fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, PinMediaSource.class);
    }

    /**
     * Convert an instance of PinMediaSource to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

