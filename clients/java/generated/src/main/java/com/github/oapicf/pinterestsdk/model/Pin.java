/*
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.github.oapicf.pinterestsdk.model;

import java.util.Objects;
import com.github.oapicf.pinterestsdk.model.BoardOwner;
import com.github.oapicf.pinterestsdk.model.CreativeType;
import com.github.oapicf.pinterestsdk.model.PinMedia;
import com.github.oapicf.pinterestsdk.model.PinMediaSource;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.github.oapicf.pinterestsdk.JSON;

/**
 * Pin
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-05T02:01:32.024245558Z[Etc/UTC]", comments = "Generator version: 7.9.0")
public class Pin {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_LINK = "link";
  @SerializedName(SERIALIZED_NAME_LINK)
  private String link;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DOMINANT_COLOR = "dominant_color";
  @SerializedName(SERIALIZED_NAME_DOMINANT_COLOR)
  private String dominantColor;

  public static final String SERIALIZED_NAME_ALT_TEXT = "alt_text";
  @SerializedName(SERIALIZED_NAME_ALT_TEXT)
  private String altText;

  public static final String SERIALIZED_NAME_CREATIVE_TYPE = "creative_type";
  @SerializedName(SERIALIZED_NAME_CREATIVE_TYPE)
  private CreativeType creativeType;

  public static final String SERIALIZED_NAME_BOARD_ID = "board_id";
  @SerializedName(SERIALIZED_NAME_BOARD_ID)
  private String boardId;

  public static final String SERIALIZED_NAME_BOARD_SECTION_ID = "board_section_id";
  @SerializedName(SERIALIZED_NAME_BOARD_SECTION_ID)
  private String boardSectionId;

  public static final String SERIALIZED_NAME_BOARD_OWNER = "board_owner";
  @SerializedName(SERIALIZED_NAME_BOARD_OWNER)
  private BoardOwner boardOwner;

  public static final String SERIALIZED_NAME_IS_OWNER = "is_owner";
  @SerializedName(SERIALIZED_NAME_IS_OWNER)
  private Boolean isOwner;

  public static final String SERIALIZED_NAME_MEDIA = "media";
  @SerializedName(SERIALIZED_NAME_MEDIA)
  private PinMedia media;

  public static final String SERIALIZED_NAME_MEDIA_SOURCE = "media_source";
  @SerializedName(SERIALIZED_NAME_MEDIA_SOURCE)
  private PinMediaSource mediaSource;

  public static final String SERIALIZED_NAME_PARENT_PIN_ID = "parent_pin_id";
  @SerializedName(SERIALIZED_NAME_PARENT_PIN_ID)
  private String parentPinId;

  public static final String SERIALIZED_NAME_IS_STANDARD = "is_standard";
  @SerializedName(SERIALIZED_NAME_IS_STANDARD)
  private Boolean isStandard;

  public static final String SERIALIZED_NAME_HAS_BEEN_PROMOTED = "has_been_promoted";
  @SerializedName(SERIALIZED_NAME_HAS_BEEN_PROMOTED)
  private Boolean hasBeenPromoted;

  public static final String SERIALIZED_NAME_NOTE = "note";
  @SerializedName(SERIALIZED_NAME_NOTE)
  private String note;

  public static final String SERIALIZED_NAME_PIN_METRICS = "pin_metrics";
  @SerializedName(SERIALIZED_NAME_PIN_METRICS)
  private Object pinMetrics;

  public Pin() {
  }

  public Pin(
     String id, 
     OffsetDateTime createdAt, 
     CreativeType creativeType, 
     BoardOwner boardOwner, 
     Boolean isOwner, 
     PinMedia media, 
     Boolean hasBeenPromoted
  ) {
    this();
    this.id = id;
    this.createdAt = createdAt;
    this.creativeType = creativeType;
    this.boardOwner = boardOwner;
    this.isOwner = isOwner;
    this.media = media;
    this.hasBeenPromoted = hasBeenPromoted;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }



  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }



  public Pin link(String link) {
    this.link = link;
    return this;
  }

  /**
   * Get link
   * @return link
   */
  @javax.annotation.Nullable
  public String getLink() {
    return link;
  }

  public void setLink(String link) {
    this.link = link;
  }


  public Pin title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public Pin description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Pin dominantColor(String dominantColor) {
    this.dominantColor = dominantColor;
    return this;
  }

  /**
   * Dominant pin color. Hex number, e.g. \\\&quot;#6E7874\\\&quot;.
   * @return dominantColor
   */
  @javax.annotation.Nullable
  public String getDominantColor() {
    return dominantColor;
  }

  public void setDominantColor(String dominantColor) {
    this.dominantColor = dominantColor;
  }


  public Pin altText(String altText) {
    this.altText = altText;
    return this;
  }

  /**
   * Get altText
   * @return altText
   */
  @javax.annotation.Nullable
  public String getAltText() {
    return altText;
  }

  public void setAltText(String altText) {
    this.altText = altText;
  }


  /**
   * Get creativeType
   * @return creativeType
   */
  @javax.annotation.Nullable
  public CreativeType getCreativeType() {
    return creativeType;
  }



  public Pin boardId(String boardId) {
    this.boardId = boardId;
    return this;
  }

  /**
   * The board to which this Pin belongs.
   * @return boardId
   */
  @javax.annotation.Nullable
  public String getBoardId() {
    return boardId;
  }

  public void setBoardId(String boardId) {
    this.boardId = boardId;
  }


  public Pin boardSectionId(String boardSectionId) {
    this.boardSectionId = boardSectionId;
    return this;
  }

  /**
   * The board section to which this Pin belongs.
   * @return boardSectionId
   */
  @javax.annotation.Nullable
  public String getBoardSectionId() {
    return boardSectionId;
  }

  public void setBoardSectionId(String boardSectionId) {
    this.boardSectionId = boardSectionId;
  }


  /**
   * Get boardOwner
   * @return boardOwner
   */
  @javax.annotation.Nullable
  public BoardOwner getBoardOwner() {
    return boardOwner;
  }



  /**
   * Whether the \&quot;operation user_account\&quot; is the Pin owner.
   * @return isOwner
   */
  @javax.annotation.Nullable
  public Boolean getIsOwner() {
    return isOwner;
  }



  /**
   * Get media
   * @return media
   */
  @javax.annotation.Nullable
  public PinMedia getMedia() {
    return media;
  }



  public Pin mediaSource(PinMediaSource mediaSource) {
    this.mediaSource = mediaSource;
    return this;
  }

  /**
   * Get mediaSource
   * @return mediaSource
   */
  @javax.annotation.Nullable
  public PinMediaSource getMediaSource() {
    return mediaSource;
  }

  public void setMediaSource(PinMediaSource mediaSource) {
    this.mediaSource = mediaSource;
  }


  public Pin parentPinId(String parentPinId) {
    this.parentPinId = parentPinId;
    return this;
  }

  /**
   * The source pin id if this pin was saved from another pin. &lt;a href&#x3D;\&quot;https://help.pinterest.com/article/save-pins-on-pinterest\&quot;&gt;Learn more&lt;/a&gt;.
   * @return parentPinId
   */
  @javax.annotation.Nullable
  public String getParentPinId() {
    return parentPinId;
  }

  public void setParentPinId(String parentPinId) {
    this.parentPinId = parentPinId;
  }


  public Pin isStandard(Boolean isStandard) {
    this.isStandard = isStandard;
    return this;
  }

  /**
   * Whether the Pin is standard or not. See documentation on &lt;a href&#x3D;\&quot;/docs/api-features/content-overview/\&quot;&gt;Changes to Pin creation&lt;/a&gt; for more information.
   * @return isStandard
   */
  @javax.annotation.Nullable
  public Boolean getIsStandard() {
    return isStandard;
  }

  public void setIsStandard(Boolean isStandard) {
    this.isStandard = isStandard;
  }


  /**
   * Whether the Pin has been promoted or not.
   * @return hasBeenPromoted
   */
  @javax.annotation.Nullable
  public Boolean getHasBeenPromoted() {
    return hasBeenPromoted;
  }



  public Pin note(String note) {
    this.note = note;
    return this;
  }

  /**
   * Private note for this Pin. &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/article/add-notes-to-your-pins\&quot;&gt;Learn more&lt;/a&gt;.
   * @return note
   */
  @javax.annotation.Nullable
  public String getNote() {
    return note;
  }

  public void setNote(String note) {
    this.note = note;
  }


  public Pin pinMetrics(Object pinMetrics) {
    this.pinMetrics = pinMetrics;
    return this;
  }

  /**
   * Pin metrics with associated time intervals if any.
   * @return pinMetrics
   */
  @javax.annotation.Nullable
  public Object getPinMetrics() {
    return pinMetrics;
  }

  public void setPinMetrics(Object pinMetrics) {
    this.pinMetrics = pinMetrics;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Pin pin = (Pin) o;
    return Objects.equals(this.id, pin.id) &&
        Objects.equals(this.createdAt, pin.createdAt) &&
        Objects.equals(this.link, pin.link) &&
        Objects.equals(this.title, pin.title) &&
        Objects.equals(this.description, pin.description) &&
        Objects.equals(this.dominantColor, pin.dominantColor) &&
        Objects.equals(this.altText, pin.altText) &&
        Objects.equals(this.creativeType, pin.creativeType) &&
        Objects.equals(this.boardId, pin.boardId) &&
        Objects.equals(this.boardSectionId, pin.boardSectionId) &&
        Objects.equals(this.boardOwner, pin.boardOwner) &&
        Objects.equals(this.isOwner, pin.isOwner) &&
        Objects.equals(this.media, pin.media) &&
        Objects.equals(this.mediaSource, pin.mediaSource) &&
        Objects.equals(this.parentPinId, pin.parentPinId) &&
        Objects.equals(this.isStandard, pin.isStandard) &&
        Objects.equals(this.hasBeenPromoted, pin.hasBeenPromoted) &&
        Objects.equals(this.note, pin.note) &&
        Objects.equals(this.pinMetrics, pin.pinMetrics);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, createdAt, link, title, description, dominantColor, altText, creativeType, boardId, boardSectionId, boardOwner, isOwner, media, mediaSource, parentPinId, isStandard, hasBeenPromoted, note, pinMetrics);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Pin {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    link: ").append(toIndentedString(link)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    dominantColor: ").append(toIndentedString(dominantColor)).append("\n");
    sb.append("    altText: ").append(toIndentedString(altText)).append("\n");
    sb.append("    creativeType: ").append(toIndentedString(creativeType)).append("\n");
    sb.append("    boardId: ").append(toIndentedString(boardId)).append("\n");
    sb.append("    boardSectionId: ").append(toIndentedString(boardSectionId)).append("\n");
    sb.append("    boardOwner: ").append(toIndentedString(boardOwner)).append("\n");
    sb.append("    isOwner: ").append(toIndentedString(isOwner)).append("\n");
    sb.append("    media: ").append(toIndentedString(media)).append("\n");
    sb.append("    mediaSource: ").append(toIndentedString(mediaSource)).append("\n");
    sb.append("    parentPinId: ").append(toIndentedString(parentPinId)).append("\n");
    sb.append("    isStandard: ").append(toIndentedString(isStandard)).append("\n");
    sb.append("    hasBeenPromoted: ").append(toIndentedString(hasBeenPromoted)).append("\n");
    sb.append("    note: ").append(toIndentedString(note)).append("\n");
    sb.append("    pinMetrics: ").append(toIndentedString(pinMetrics)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("created_at");
    openapiFields.add("link");
    openapiFields.add("title");
    openapiFields.add("description");
    openapiFields.add("dominant_color");
    openapiFields.add("alt_text");
    openapiFields.add("creative_type");
    openapiFields.add("board_id");
    openapiFields.add("board_section_id");
    openapiFields.add("board_owner");
    openapiFields.add("is_owner");
    openapiFields.add("media");
    openapiFields.add("media_source");
    openapiFields.add("parent_pin_id");
    openapiFields.add("is_standard");
    openapiFields.add("has_been_promoted");
    openapiFields.add("note");
    openapiFields.add("pin_metrics");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Pin
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Pin.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Pin is not found in the empty JSON string", Pin.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Pin.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Pin` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("link") != null && !jsonObj.get("link").isJsonNull()) && !jsonObj.get("link").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `link` to be a primitive type in the JSON string but got `%s`", jsonObj.get("link").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("dominant_color") != null && !jsonObj.get("dominant_color").isJsonNull()) && !jsonObj.get("dominant_color").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dominant_color` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dominant_color").toString()));
      }
      if ((jsonObj.get("alt_text") != null && !jsonObj.get("alt_text").isJsonNull()) && !jsonObj.get("alt_text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `alt_text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("alt_text").toString()));
      }
      // validate the optional field `creative_type`
      if (jsonObj.get("creative_type") != null && !jsonObj.get("creative_type").isJsonNull()) {
        CreativeType.validateJsonElement(jsonObj.get("creative_type"));
      }
      if ((jsonObj.get("board_id") != null && !jsonObj.get("board_id").isJsonNull()) && !jsonObj.get("board_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `board_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("board_id").toString()));
      }
      if ((jsonObj.get("board_section_id") != null && !jsonObj.get("board_section_id").isJsonNull()) && !jsonObj.get("board_section_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `board_section_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("board_section_id").toString()));
      }
      // validate the optional field `board_owner`
      if (jsonObj.get("board_owner") != null && !jsonObj.get("board_owner").isJsonNull()) {
        BoardOwner.validateJsonElement(jsonObj.get("board_owner"));
      }
      // validate the optional field `media`
      if (jsonObj.get("media") != null && !jsonObj.get("media").isJsonNull()) {
        PinMedia.validateJsonElement(jsonObj.get("media"));
      }
      // validate the optional field `media_source`
      if (jsonObj.get("media_source") != null && !jsonObj.get("media_source").isJsonNull()) {
        PinMediaSource.validateJsonElement(jsonObj.get("media_source"));
      }
      if ((jsonObj.get("parent_pin_id") != null && !jsonObj.get("parent_pin_id").isJsonNull()) && !jsonObj.get("parent_pin_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parent_pin_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parent_pin_id").toString()));
      }
      if ((jsonObj.get("note") != null && !jsonObj.get("note").isJsonNull()) && !jsonObj.get("note").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `note` to be a primitive type in the JSON string but got `%s`", jsonObj.get("note").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Pin.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Pin' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Pin> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Pin.class));

       return (TypeAdapter<T>) new TypeAdapter<Pin>() {
           @Override
           public void write(JsonWriter out, Pin value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Pin read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Pin given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Pin
   * @throws IOException if the JSON string is invalid with respect to Pin
   */
  public static Pin fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Pin.class);
  }

  /**
   * Convert an instance of Pin to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

