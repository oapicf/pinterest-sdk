/*
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.github.oapicf.pinterestsdk.api;

import com.github.oapicf.pinterestsdk.ApiCallback;
import com.github.oapicf.pinterestsdk.ApiClient;
import com.github.oapicf.pinterestsdk.ApiException;
import com.github.oapicf.pinterestsdk.ApiResponse;
import com.github.oapicf.pinterestsdk.Configuration;
import com.github.oapicf.pinterestsdk.Pair;
import com.github.oapicf.pinterestsdk.ProgressRequestBody;
import com.github.oapicf.pinterestsdk.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.github.oapicf.pinterestsdk.model.BusinessAssetMembersGet200Response;
import com.github.oapicf.pinterestsdk.model.BusinessAssetPartnersGet200Response;
import com.github.oapicf.pinterestsdk.model.BusinessAssetsGet200Response;
import com.github.oapicf.pinterestsdk.model.BusinessMemberAssetsGet200Response;
import com.github.oapicf.pinterestsdk.model.BusinessMembersAssetAccessDeleteRequest;
import com.github.oapicf.pinterestsdk.model.BusinessPartnerAssetAccessGet200Response;
import com.github.oapicf.pinterestsdk.model.CreateAssetGroupBody;
import com.github.oapicf.pinterestsdk.model.CreateAssetGroupResponse;
import com.github.oapicf.pinterestsdk.model.DeleteAssetGroupBody;
import com.github.oapicf.pinterestsdk.model.DeleteAssetGroupResponse;
import com.github.oapicf.pinterestsdk.model.DeleteMemberAccessResultsResponseArray;
import com.github.oapicf.pinterestsdk.model.DeletePartnerAssetAccessBody;
import com.github.oapicf.pinterestsdk.model.DeletePartnerAssetsResultsResponseArray;
import com.github.oapicf.pinterestsdk.model.Error;
import com.github.oapicf.pinterestsdk.model.PartnerType;
import com.github.oapicf.pinterestsdk.model.PermissionsWithOwner;
import com.github.oapicf.pinterestsdk.model.UpdateAssetGroupBody;
import com.github.oapicf.pinterestsdk.model.UpdateAssetGroupResponse;
import com.github.oapicf.pinterestsdk.model.UpdateMemberAssetAccessBody;
import com.github.oapicf.pinterestsdk.model.UpdateMemberAssetsResultsResponseArray;
import com.github.oapicf.pinterestsdk.model.UpdatePartnerAssetAccessBody;
import com.github.oapicf.pinterestsdk.model.UpdatePartnerAssetsResultsResponseArray;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BusinessAccessAssetsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BusinessAccessAssetsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BusinessAccessAssetsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for assetGroupCreate
     * @param businessId Unique identifier of the requesting business. (required)
     * @param createAssetGroupBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assetGroupCreateCall(String businessId, CreateAssetGroupBody createAssetGroupBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createAssetGroupBody;

        // create path and map variables
        String localVarPath = "/businesses/{business_id}/asset_groups"
            .replace("{" + "business_id" + "}", localVarApiClient.escapeString(businessId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "pinterest_oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assetGroupCreateValidateBeforeCall(String businessId, CreateAssetGroupBody createAssetGroupBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'businessId' is set
        if (businessId == null) {
            throw new ApiException("Missing the required parameter 'businessId' when calling assetGroupCreate(Async)");
        }

        // verify the required parameter 'createAssetGroupBody' is set
        if (createAssetGroupBody == null) {
            throw new ApiException("Missing the required parameter 'createAssetGroupBody' when calling assetGroupCreate(Async)");
        }

        return assetGroupCreateCall(businessId, createAssetGroupBody, _callback);

    }

    /**
     * Create a new asset group.
     * Create a new asset group with the specified parameters. - An &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/asset-groups\&quot;&gt;asset group&lt;/a&gt; is a custom group of assets based on how you’d like to manage your accounts.
     * @param businessId Unique identifier of the requesting business. (required)
     * @param createAssetGroupBody  (required)
     * @return CreateAssetGroupResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public CreateAssetGroupResponse assetGroupCreate(String businessId, CreateAssetGroupBody createAssetGroupBody) throws ApiException {
        ApiResponse<CreateAssetGroupResponse> localVarResp = assetGroupCreateWithHttpInfo(businessId, createAssetGroupBody);
        return localVarResp.getData();
    }

    /**
     * Create a new asset group.
     * Create a new asset group with the specified parameters. - An &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/asset-groups\&quot;&gt;asset group&lt;/a&gt; is a custom group of assets based on how you’d like to manage your accounts.
     * @param businessId Unique identifier of the requesting business. (required)
     * @param createAssetGroupBody  (required)
     * @return ApiResponse&lt;CreateAssetGroupResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateAssetGroupResponse> assetGroupCreateWithHttpInfo(String businessId, CreateAssetGroupBody createAssetGroupBody) throws ApiException {
        okhttp3.Call localVarCall = assetGroupCreateValidateBeforeCall(businessId, createAssetGroupBody, null);
        Type localVarReturnType = new TypeToken<CreateAssetGroupResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new asset group. (asynchronously)
     * Create a new asset group with the specified parameters. - An &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/asset-groups\&quot;&gt;asset group&lt;/a&gt; is a custom group of assets based on how you’d like to manage your accounts.
     * @param businessId Unique identifier of the requesting business. (required)
     * @param createAssetGroupBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assetGroupCreateAsync(String businessId, CreateAssetGroupBody createAssetGroupBody, final ApiCallback<CreateAssetGroupResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = assetGroupCreateValidateBeforeCall(businessId, createAssetGroupBody, _callback);
        Type localVarReturnType = new TypeToken<CreateAssetGroupResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for assetGroupDelete
     * @param businessId Unique identifier of the requesting business. (required)
     * @param deleteAssetGroupBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assetGroupDeleteCall(String businessId, DeleteAssetGroupBody deleteAssetGroupBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteAssetGroupBody;

        // create path and map variables
        String localVarPath = "/businesses/{business_id}/asset_groups"
            .replace("{" + "business_id" + "}", localVarApiClient.escapeString(businessId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "pinterest_oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assetGroupDeleteValidateBeforeCall(String businessId, DeleteAssetGroupBody deleteAssetGroupBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'businessId' is set
        if (businessId == null) {
            throw new ApiException("Missing the required parameter 'businessId' when calling assetGroupDelete(Async)");
        }

        // verify the required parameter 'deleteAssetGroupBody' is set
        if (deleteAssetGroupBody == null) {
            throw new ApiException("Missing the required parameter 'deleteAssetGroupBody' when calling assetGroupDelete(Async)");
        }

        return assetGroupDeleteCall(businessId, deleteAssetGroupBody, _callback);

    }

    /**
     * Delete asset groups.
     * Delete a batch of asset groups.
     * @param businessId Unique identifier of the requesting business. (required)
     * @param deleteAssetGroupBody  (required)
     * @return DeleteAssetGroupResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public DeleteAssetGroupResponse assetGroupDelete(String businessId, DeleteAssetGroupBody deleteAssetGroupBody) throws ApiException {
        ApiResponse<DeleteAssetGroupResponse> localVarResp = assetGroupDeleteWithHttpInfo(businessId, deleteAssetGroupBody);
        return localVarResp.getData();
    }

    /**
     * Delete asset groups.
     * Delete a batch of asset groups.
     * @param businessId Unique identifier of the requesting business. (required)
     * @param deleteAssetGroupBody  (required)
     * @return ApiResponse&lt;DeleteAssetGroupResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteAssetGroupResponse> assetGroupDeleteWithHttpInfo(String businessId, DeleteAssetGroupBody deleteAssetGroupBody) throws ApiException {
        okhttp3.Call localVarCall = assetGroupDeleteValidateBeforeCall(businessId, deleteAssetGroupBody, null);
        Type localVarReturnType = new TypeToken<DeleteAssetGroupResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete asset groups. (asynchronously)
     * Delete a batch of asset groups.
     * @param businessId Unique identifier of the requesting business. (required)
     * @param deleteAssetGroupBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assetGroupDeleteAsync(String businessId, DeleteAssetGroupBody deleteAssetGroupBody, final ApiCallback<DeleteAssetGroupResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = assetGroupDeleteValidateBeforeCall(businessId, deleteAssetGroupBody, _callback);
        Type localVarReturnType = new TypeToken<DeleteAssetGroupResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for assetGroupUpdate
     * @param businessId Unique identifier of the requesting business. (required)
     * @param updateAssetGroupBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assetGroupUpdateCall(String businessId, UpdateAssetGroupBody updateAssetGroupBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateAssetGroupBody;

        // create path and map variables
        String localVarPath = "/businesses/{business_id}/asset_groups"
            .replace("{" + "business_id" + "}", localVarApiClient.escapeString(businessId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "pinterest_oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assetGroupUpdateValidateBeforeCall(String businessId, UpdateAssetGroupBody updateAssetGroupBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'businessId' is set
        if (businessId == null) {
            throw new ApiException("Missing the required parameter 'businessId' when calling assetGroupUpdate(Async)");
        }

        // verify the required parameter 'updateAssetGroupBody' is set
        if (updateAssetGroupBody == null) {
            throw new ApiException("Missing the required parameter 'updateAssetGroupBody' when calling assetGroupUpdate(Async)");
        }

        return assetGroupUpdateCall(businessId, updateAssetGroupBody, _callback);

    }

    /**
     * Update asset groups.
     * Update a batch of asset groups with the specified parameters.
     * @param businessId Unique identifier of the requesting business. (required)
     * @param updateAssetGroupBody  (required)
     * @return UpdateAssetGroupResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public UpdateAssetGroupResponse assetGroupUpdate(String businessId, UpdateAssetGroupBody updateAssetGroupBody) throws ApiException {
        ApiResponse<UpdateAssetGroupResponse> localVarResp = assetGroupUpdateWithHttpInfo(businessId, updateAssetGroupBody);
        return localVarResp.getData();
    }

    /**
     * Update asset groups.
     * Update a batch of asset groups with the specified parameters.
     * @param businessId Unique identifier of the requesting business. (required)
     * @param updateAssetGroupBody  (required)
     * @return ApiResponse&lt;UpdateAssetGroupResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateAssetGroupResponse> assetGroupUpdateWithHttpInfo(String businessId, UpdateAssetGroupBody updateAssetGroupBody) throws ApiException {
        okhttp3.Call localVarCall = assetGroupUpdateValidateBeforeCall(businessId, updateAssetGroupBody, null);
        Type localVarReturnType = new TypeToken<UpdateAssetGroupResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update asset groups. (asynchronously)
     * Update a batch of asset groups with the specified parameters.
     * @param businessId Unique identifier of the requesting business. (required)
     * @param updateAssetGroupBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assetGroupUpdateAsync(String businessId, UpdateAssetGroupBody updateAssetGroupBody, final ApiCallback<UpdateAssetGroupResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = assetGroupUpdateValidateBeforeCall(businessId, updateAssetGroupBody, _callback);
        Type localVarReturnType = new TypeToken<UpdateAssetGroupResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for businessAssetMembersGet
     * @param businessId Unique identifier of the requesting business. (required)
     * @param assetId Unique identifier of a business asset. (required)
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @param startIndex An index to start fetching the results from. Only the results starting from this index will be returned. (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sucess </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call businessAssetMembersGetCall(String businessId, String assetId, String bookmark, Integer pageSize, Integer startIndex, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/businesses/{business_id}/assets/{asset_id}/members"
            .replace("{" + "business_id" + "}", localVarApiClient.escapeString(businessId.toString()))
            .replace("{" + "asset_id" + "}", localVarApiClient.escapeString(assetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (bookmark != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bookmark", bookmark));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (startIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_index", startIndex));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "pinterest_oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call businessAssetMembersGetValidateBeforeCall(String businessId, String assetId, String bookmark, Integer pageSize, Integer startIndex, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'businessId' is set
        if (businessId == null) {
            throw new ApiException("Missing the required parameter 'businessId' when calling businessAssetMembersGet(Async)");
        }

        // verify the required parameter 'assetId' is set
        if (assetId == null) {
            throw new ApiException("Missing the required parameter 'assetId' when calling businessAssetMembersGet(Async)");
        }

        return businessAssetMembersGetCall(businessId, assetId, bookmark, pageSize, startIndex, _callback);

    }

    /**
     * Get members with access to asset
     * Get all the members the requesting business has granted access to on the given asset.
     * @param businessId Unique identifier of the requesting business. (required)
     * @param assetId Unique identifier of a business asset. (required)
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @param startIndex An index to start fetching the results from. Only the results starting from this index will be returned. (optional, default to 0)
     * @return BusinessAssetMembersGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sucess </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public BusinessAssetMembersGet200Response businessAssetMembersGet(String businessId, String assetId, String bookmark, Integer pageSize, Integer startIndex) throws ApiException {
        ApiResponse<BusinessAssetMembersGet200Response> localVarResp = businessAssetMembersGetWithHttpInfo(businessId, assetId, bookmark, pageSize, startIndex);
        return localVarResp.getData();
    }

    /**
     * Get members with access to asset
     * Get all the members the requesting business has granted access to on the given asset.
     * @param businessId Unique identifier of the requesting business. (required)
     * @param assetId Unique identifier of a business asset. (required)
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @param startIndex An index to start fetching the results from. Only the results starting from this index will be returned. (optional, default to 0)
     * @return ApiResponse&lt;BusinessAssetMembersGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sucess </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BusinessAssetMembersGet200Response> businessAssetMembersGetWithHttpInfo(String businessId, String assetId, String bookmark, Integer pageSize, Integer startIndex) throws ApiException {
        okhttp3.Call localVarCall = businessAssetMembersGetValidateBeforeCall(businessId, assetId, bookmark, pageSize, startIndex, null);
        Type localVarReturnType = new TypeToken<BusinessAssetMembersGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get members with access to asset (asynchronously)
     * Get all the members the requesting business has granted access to on the given asset.
     * @param businessId Unique identifier of the requesting business. (required)
     * @param assetId Unique identifier of a business asset. (required)
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @param startIndex An index to start fetching the results from. Only the results starting from this index will be returned. (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sucess </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call businessAssetMembersGetAsync(String businessId, String assetId, String bookmark, Integer pageSize, Integer startIndex, final ApiCallback<BusinessAssetMembersGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = businessAssetMembersGetValidateBeforeCall(businessId, assetId, bookmark, pageSize, startIndex, _callback);
        Type localVarReturnType = new TypeToken<BusinessAssetMembersGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for businessAssetPartnersGet
     * @param businessId Unique identifier of the requesting business. (required)
     * @param assetId Unique identifier of a business asset. (required)
     * @param startIndex An index to start fetching the results from. Only the results starting from this index will be returned. (optional, default to 0)
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sucess </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call businessAssetPartnersGetCall(String businessId, String assetId, Integer startIndex, String bookmark, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/businesses/{business_id}/assets/{asset_id}/partners"
            .replace("{" + "business_id" + "}", localVarApiClient.escapeString(businessId.toString()))
            .replace("{" + "asset_id" + "}", localVarApiClient.escapeString(assetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_index", startIndex));
        }

        if (bookmark != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bookmark", bookmark));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "pinterest_oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call businessAssetPartnersGetValidateBeforeCall(String businessId, String assetId, Integer startIndex, String bookmark, Integer pageSize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'businessId' is set
        if (businessId == null) {
            throw new ApiException("Missing the required parameter 'businessId' when calling businessAssetPartnersGet(Async)");
        }

        // verify the required parameter 'assetId' is set
        if (assetId == null) {
            throw new ApiException("Missing the required parameter 'assetId' when calling businessAssetPartnersGet(Async)");
        }

        return businessAssetPartnersGetCall(businessId, assetId, startIndex, bookmark, pageSize, _callback);

    }

    /**
     * Get partners with access to asset
     * Get all the partners the requesting business has granted access to on the given asset. Note: If the asset has been shared with you, an empty array will be returned. This is because an asset shared with you cannot be shared with a different partner.
     * @param businessId Unique identifier of the requesting business. (required)
     * @param assetId Unique identifier of a business asset. (required)
     * @param startIndex An index to start fetching the results from. Only the results starting from this index will be returned. (optional, default to 0)
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @return BusinessAssetPartnersGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sucess </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public BusinessAssetPartnersGet200Response businessAssetPartnersGet(String businessId, String assetId, Integer startIndex, String bookmark, Integer pageSize) throws ApiException {
        ApiResponse<BusinessAssetPartnersGet200Response> localVarResp = businessAssetPartnersGetWithHttpInfo(businessId, assetId, startIndex, bookmark, pageSize);
        return localVarResp.getData();
    }

    /**
     * Get partners with access to asset
     * Get all the partners the requesting business has granted access to on the given asset. Note: If the asset has been shared with you, an empty array will be returned. This is because an asset shared with you cannot be shared with a different partner.
     * @param businessId Unique identifier of the requesting business. (required)
     * @param assetId Unique identifier of a business asset. (required)
     * @param startIndex An index to start fetching the results from. Only the results starting from this index will be returned. (optional, default to 0)
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @return ApiResponse&lt;BusinessAssetPartnersGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sucess </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BusinessAssetPartnersGet200Response> businessAssetPartnersGetWithHttpInfo(String businessId, String assetId, Integer startIndex, String bookmark, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = businessAssetPartnersGetValidateBeforeCall(businessId, assetId, startIndex, bookmark, pageSize, null);
        Type localVarReturnType = new TypeToken<BusinessAssetPartnersGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get partners with access to asset (asynchronously)
     * Get all the partners the requesting business has granted access to on the given asset. Note: If the asset has been shared with you, an empty array will be returned. This is because an asset shared with you cannot be shared with a different partner.
     * @param businessId Unique identifier of the requesting business. (required)
     * @param assetId Unique identifier of a business asset. (required)
     * @param startIndex An index to start fetching the results from. Only the results starting from this index will be returned. (optional, default to 0)
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sucess </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call businessAssetPartnersGetAsync(String businessId, String assetId, Integer startIndex, String bookmark, Integer pageSize, final ApiCallback<BusinessAssetPartnersGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = businessAssetPartnersGetValidateBeforeCall(businessId, assetId, startIndex, bookmark, pageSize, _callback);
        Type localVarReturnType = new TypeToken<BusinessAssetPartnersGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for businessAssetsGet
     * @param businessId Unique identifier of the requesting business. (required)
     * @param permissions A list of asset permissions used to filter the assets. Only assets where the requesting business has at least one of the specified permissions will be returned. (optional)
     * @param childAssetId A child asset unique identifier. Used to fetch asset groups that contain the asset id as a child. (optional)
     * @param assetGroupId An asset group unique identifier. Used to fetch assets contained within the specified asset group. (optional)
     * @param assetType A resource type to filter the assets by. Only assets of the specified type will be returned. (optional, default to AD_ACCOUNT)
     * @param startIndex An index to start fetching the results from. Only the results starting from this index will be returned. (optional, default to 0)
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call businessAssetsGetCall(String businessId, List<PermissionsWithOwner> permissions, String childAssetId, String assetGroupId, String assetType, Integer startIndex, String bookmark, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/businesses/{business_id}/assets"
            .replace("{" + "business_id" + "}", localVarApiClient.escapeString(businessId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (permissions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "permissions", permissions));
        }

        if (childAssetId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("child_asset_id", childAssetId));
        }

        if (assetGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_group_id", assetGroupId));
        }

        if (assetType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_type", assetType));
        }

        if (startIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_index", startIndex));
        }

        if (bookmark != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bookmark", bookmark));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "pinterest_oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call businessAssetsGetValidateBeforeCall(String businessId, List<PermissionsWithOwner> permissions, String childAssetId, String assetGroupId, String assetType, Integer startIndex, String bookmark, Integer pageSize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'businessId' is set
        if (businessId == null) {
            throw new ApiException("Missing the required parameter 'businessId' when calling businessAssetsGet(Async)");
        }

        return businessAssetsGetCall(businessId, permissions, childAssetId, assetGroupId, assetType, startIndex, bookmark, pageSize, _callback);

    }

    /**
     * List business assets
     * Get all the assets the requesting business has access to. This includes assets the business owns and assets the business has access to through partnerships.
     * @param businessId Unique identifier of the requesting business. (required)
     * @param permissions A list of asset permissions used to filter the assets. Only assets where the requesting business has at least one of the specified permissions will be returned. (optional)
     * @param childAssetId A child asset unique identifier. Used to fetch asset groups that contain the asset id as a child. (optional)
     * @param assetGroupId An asset group unique identifier. Used to fetch assets contained within the specified asset group. (optional)
     * @param assetType A resource type to filter the assets by. Only assets of the specified type will be returned. (optional, default to AD_ACCOUNT)
     * @param startIndex An index to start fetching the results from. Only the results starting from this index will be returned. (optional, default to 0)
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @return BusinessAssetsGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public BusinessAssetsGet200Response businessAssetsGet(String businessId, List<PermissionsWithOwner> permissions, String childAssetId, String assetGroupId, String assetType, Integer startIndex, String bookmark, Integer pageSize) throws ApiException {
        ApiResponse<BusinessAssetsGet200Response> localVarResp = businessAssetsGetWithHttpInfo(businessId, permissions, childAssetId, assetGroupId, assetType, startIndex, bookmark, pageSize);
        return localVarResp.getData();
    }

    /**
     * List business assets
     * Get all the assets the requesting business has access to. This includes assets the business owns and assets the business has access to through partnerships.
     * @param businessId Unique identifier of the requesting business. (required)
     * @param permissions A list of asset permissions used to filter the assets. Only assets where the requesting business has at least one of the specified permissions will be returned. (optional)
     * @param childAssetId A child asset unique identifier. Used to fetch asset groups that contain the asset id as a child. (optional)
     * @param assetGroupId An asset group unique identifier. Used to fetch assets contained within the specified asset group. (optional)
     * @param assetType A resource type to filter the assets by. Only assets of the specified type will be returned. (optional, default to AD_ACCOUNT)
     * @param startIndex An index to start fetching the results from. Only the results starting from this index will be returned. (optional, default to 0)
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @return ApiResponse&lt;BusinessAssetsGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BusinessAssetsGet200Response> businessAssetsGetWithHttpInfo(String businessId, List<PermissionsWithOwner> permissions, String childAssetId, String assetGroupId, String assetType, Integer startIndex, String bookmark, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = businessAssetsGetValidateBeforeCall(businessId, permissions, childAssetId, assetGroupId, assetType, startIndex, bookmark, pageSize, null);
        Type localVarReturnType = new TypeToken<BusinessAssetsGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List business assets (asynchronously)
     * Get all the assets the requesting business has access to. This includes assets the business owns and assets the business has access to through partnerships.
     * @param businessId Unique identifier of the requesting business. (required)
     * @param permissions A list of asset permissions used to filter the assets. Only assets where the requesting business has at least one of the specified permissions will be returned. (optional)
     * @param childAssetId A child asset unique identifier. Used to fetch asset groups that contain the asset id as a child. (optional)
     * @param assetGroupId An asset group unique identifier. Used to fetch assets contained within the specified asset group. (optional)
     * @param assetType A resource type to filter the assets by. Only assets of the specified type will be returned. (optional, default to AD_ACCOUNT)
     * @param startIndex An index to start fetching the results from. Only the results starting from this index will be returned. (optional, default to 0)
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call businessAssetsGetAsync(String businessId, List<PermissionsWithOwner> permissions, String childAssetId, String assetGroupId, String assetType, Integer startIndex, String bookmark, Integer pageSize, final ApiCallback<BusinessAssetsGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = businessAssetsGetValidateBeforeCall(businessId, permissions, childAssetId, assetGroupId, assetType, startIndex, bookmark, pageSize, _callback);
        Type localVarReturnType = new TypeToken<BusinessAssetsGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for businessMemberAssetsGet
     * @param businessId Unique identifier of the requesting business. (required)
     * @param memberId The member id to fetch assets for. (required)
     * @param assetType A resource type to filter the assets by. Only assets of the specified type will be returned. (optional, default to AD_ACCOUNT)
     * @param startIndex An index to start fetching the results from. Only the results starting from this index will be returned. (optional, default to 0)
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call businessMemberAssetsGetCall(String businessId, String memberId, String assetType, Integer startIndex, String bookmark, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/businesses/{business_id}/members/{member_id}/assets"
            .replace("{" + "business_id" + "}", localVarApiClient.escapeString(businessId.toString()))
            .replace("{" + "member_id" + "}", localVarApiClient.escapeString(memberId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (assetType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_type", assetType));
        }

        if (startIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_index", startIndex));
        }

        if (bookmark != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bookmark", bookmark));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "pinterest_oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call businessMemberAssetsGetValidateBeforeCall(String businessId, String memberId, String assetType, Integer startIndex, String bookmark, Integer pageSize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'businessId' is set
        if (businessId == null) {
            throw new ApiException("Missing the required parameter 'businessId' when calling businessMemberAssetsGet(Async)");
        }

        // verify the required parameter 'memberId' is set
        if (memberId == null) {
            throw new ApiException("Missing the required parameter 'memberId' when calling businessMemberAssetsGet(Async)");
        }

        return businessMemberAssetsGetCall(businessId, memberId, assetType, startIndex, bookmark, pageSize, _callback);

    }

    /**
     * Get assets assigned to a member
     * Get assets on which you assigned asset permissions to the given member. Can be used to: - get all assets, regardless of asset type or - get assets of one asset type by using the asset_type query. The return response will include the permissions the member has to that asset and the asset type.
     * @param businessId Unique identifier of the requesting business. (required)
     * @param memberId The member id to fetch assets for. (required)
     * @param assetType A resource type to filter the assets by. Only assets of the specified type will be returned. (optional, default to AD_ACCOUNT)
     * @param startIndex An index to start fetching the results from. Only the results starting from this index will be returned. (optional, default to 0)
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @return BusinessMemberAssetsGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public BusinessMemberAssetsGet200Response businessMemberAssetsGet(String businessId, String memberId, String assetType, Integer startIndex, String bookmark, Integer pageSize) throws ApiException {
        ApiResponse<BusinessMemberAssetsGet200Response> localVarResp = businessMemberAssetsGetWithHttpInfo(businessId, memberId, assetType, startIndex, bookmark, pageSize);
        return localVarResp.getData();
    }

    /**
     * Get assets assigned to a member
     * Get assets on which you assigned asset permissions to the given member. Can be used to: - get all assets, regardless of asset type or - get assets of one asset type by using the asset_type query. The return response will include the permissions the member has to that asset and the asset type.
     * @param businessId Unique identifier of the requesting business. (required)
     * @param memberId The member id to fetch assets for. (required)
     * @param assetType A resource type to filter the assets by. Only assets of the specified type will be returned. (optional, default to AD_ACCOUNT)
     * @param startIndex An index to start fetching the results from. Only the results starting from this index will be returned. (optional, default to 0)
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @return ApiResponse&lt;BusinessMemberAssetsGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BusinessMemberAssetsGet200Response> businessMemberAssetsGetWithHttpInfo(String businessId, String memberId, String assetType, Integer startIndex, String bookmark, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = businessMemberAssetsGetValidateBeforeCall(businessId, memberId, assetType, startIndex, bookmark, pageSize, null);
        Type localVarReturnType = new TypeToken<BusinessMemberAssetsGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get assets assigned to a member (asynchronously)
     * Get assets on which you assigned asset permissions to the given member. Can be used to: - get all assets, regardless of asset type or - get assets of one asset type by using the asset_type query. The return response will include the permissions the member has to that asset and the asset type.
     * @param businessId Unique identifier of the requesting business. (required)
     * @param memberId The member id to fetch assets for. (required)
     * @param assetType A resource type to filter the assets by. Only assets of the specified type will be returned. (optional, default to AD_ACCOUNT)
     * @param startIndex An index to start fetching the results from. Only the results starting from this index will be returned. (optional, default to 0)
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call businessMemberAssetsGetAsync(String businessId, String memberId, String assetType, Integer startIndex, String bookmark, Integer pageSize, final ApiCallback<BusinessMemberAssetsGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = businessMemberAssetsGetValidateBeforeCall(businessId, memberId, assetType, startIndex, bookmark, pageSize, _callback);
        Type localVarReturnType = new TypeToken<BusinessMemberAssetsGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for businessMembersAssetAccessDelete
     * @param businessId Unique identifier of the requesting business. (required)
     * @param businessMembersAssetAccessDeleteRequest List member assset permissions to delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call businessMembersAssetAccessDeleteCall(String businessId, BusinessMembersAssetAccessDeleteRequest businessMembersAssetAccessDeleteRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = businessMembersAssetAccessDeleteRequest;

        // create path and map variables
        String localVarPath = "/businesses/{business_id}/members/assets/access"
            .replace("{" + "business_id" + "}", localVarApiClient.escapeString(businessId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "pinterest_oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call businessMembersAssetAccessDeleteValidateBeforeCall(String businessId, BusinessMembersAssetAccessDeleteRequest businessMembersAssetAccessDeleteRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'businessId' is set
        if (businessId == null) {
            throw new ApiException("Missing the required parameter 'businessId' when calling businessMembersAssetAccessDelete(Async)");
        }

        // verify the required parameter 'businessMembersAssetAccessDeleteRequest' is set
        if (businessMembersAssetAccessDeleteRequest == null) {
            throw new ApiException("Missing the required parameter 'businessMembersAssetAccessDeleteRequest' when calling businessMembersAssetAccessDelete(Async)");
        }

        return businessMembersAssetAccessDeleteCall(businessId, businessMembersAssetAccessDeleteRequest, _callback);

    }

    /**
     * Delete member access to asset
     * Terminate multiple members&#39; access to an asset.
     * @param businessId Unique identifier of the requesting business. (required)
     * @param businessMembersAssetAccessDeleteRequest List member assset permissions to delete. (required)
     * @return DeleteMemberAccessResultsResponseArray
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public DeleteMemberAccessResultsResponseArray businessMembersAssetAccessDelete(String businessId, BusinessMembersAssetAccessDeleteRequest businessMembersAssetAccessDeleteRequest) throws ApiException {
        ApiResponse<DeleteMemberAccessResultsResponseArray> localVarResp = businessMembersAssetAccessDeleteWithHttpInfo(businessId, businessMembersAssetAccessDeleteRequest);
        return localVarResp.getData();
    }

    /**
     * Delete member access to asset
     * Terminate multiple members&#39; access to an asset.
     * @param businessId Unique identifier of the requesting business. (required)
     * @param businessMembersAssetAccessDeleteRequest List member assset permissions to delete. (required)
     * @return ApiResponse&lt;DeleteMemberAccessResultsResponseArray&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteMemberAccessResultsResponseArray> businessMembersAssetAccessDeleteWithHttpInfo(String businessId, BusinessMembersAssetAccessDeleteRequest businessMembersAssetAccessDeleteRequest) throws ApiException {
        okhttp3.Call localVarCall = businessMembersAssetAccessDeleteValidateBeforeCall(businessId, businessMembersAssetAccessDeleteRequest, null);
        Type localVarReturnType = new TypeToken<DeleteMemberAccessResultsResponseArray>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete member access to asset (asynchronously)
     * Terminate multiple members&#39; access to an asset.
     * @param businessId Unique identifier of the requesting business. (required)
     * @param businessMembersAssetAccessDeleteRequest List member assset permissions to delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call businessMembersAssetAccessDeleteAsync(String businessId, BusinessMembersAssetAccessDeleteRequest businessMembersAssetAccessDeleteRequest, final ApiCallback<DeleteMemberAccessResultsResponseArray> _callback) throws ApiException {

        okhttp3.Call localVarCall = businessMembersAssetAccessDeleteValidateBeforeCall(businessId, businessMembersAssetAccessDeleteRequest, _callback);
        Type localVarReturnType = new TypeToken<DeleteMemberAccessResultsResponseArray>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for businessMembersAssetAccessUpdate
     * @param businessId Unique identifier of the requesting business. (required)
     * @param updateMemberAssetAccessBody List of member asset permissions to create or update. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call businessMembersAssetAccessUpdateCall(String businessId, UpdateMemberAssetAccessBody updateMemberAssetAccessBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateMemberAssetAccessBody;

        // create path and map variables
        String localVarPath = "/businesses/{business_id}/members/assets/access"
            .replace("{" + "business_id" + "}", localVarApiClient.escapeString(businessId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "pinterest_oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call businessMembersAssetAccessUpdateValidateBeforeCall(String businessId, UpdateMemberAssetAccessBody updateMemberAssetAccessBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'businessId' is set
        if (businessId == null) {
            throw new ApiException("Missing the required parameter 'businessId' when calling businessMembersAssetAccessUpdate(Async)");
        }

        // verify the required parameter 'updateMemberAssetAccessBody' is set
        if (updateMemberAssetAccessBody == null) {
            throw new ApiException("Missing the required parameter 'updateMemberAssetAccessBody' when calling businessMembersAssetAccessUpdate(Async)");
        }

        return businessMembersAssetAccessUpdateCall(businessId, updateMemberAssetAccessBody, _callback);

    }

    /**
     * Assign/Update member asset permissions
     * Grant multiple members access to assets and/or update multiple member&#39;s exisiting permissions to an asset. Note: Not all listed permissions are applicable to each asset type. For example, PROFILE_PUBLISHER would not be applicable to an asset of type AD_ACCOUNT. The permission level PROFILE_PUBLISHER is only available to an asset of the type PROFILE. 
     * @param businessId Unique identifier of the requesting business. (required)
     * @param updateMemberAssetAccessBody List of member asset permissions to create or update. (required)
     * @return UpdateMemberAssetsResultsResponseArray
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public UpdateMemberAssetsResultsResponseArray businessMembersAssetAccessUpdate(String businessId, UpdateMemberAssetAccessBody updateMemberAssetAccessBody) throws ApiException {
        ApiResponse<UpdateMemberAssetsResultsResponseArray> localVarResp = businessMembersAssetAccessUpdateWithHttpInfo(businessId, updateMemberAssetAccessBody);
        return localVarResp.getData();
    }

    /**
     * Assign/Update member asset permissions
     * Grant multiple members access to assets and/or update multiple member&#39;s exisiting permissions to an asset. Note: Not all listed permissions are applicable to each asset type. For example, PROFILE_PUBLISHER would not be applicable to an asset of type AD_ACCOUNT. The permission level PROFILE_PUBLISHER is only available to an asset of the type PROFILE. 
     * @param businessId Unique identifier of the requesting business. (required)
     * @param updateMemberAssetAccessBody List of member asset permissions to create or update. (required)
     * @return ApiResponse&lt;UpdateMemberAssetsResultsResponseArray&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateMemberAssetsResultsResponseArray> businessMembersAssetAccessUpdateWithHttpInfo(String businessId, UpdateMemberAssetAccessBody updateMemberAssetAccessBody) throws ApiException {
        okhttp3.Call localVarCall = businessMembersAssetAccessUpdateValidateBeforeCall(businessId, updateMemberAssetAccessBody, null);
        Type localVarReturnType = new TypeToken<UpdateMemberAssetsResultsResponseArray>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Assign/Update member asset permissions (asynchronously)
     * Grant multiple members access to assets and/or update multiple member&#39;s exisiting permissions to an asset. Note: Not all listed permissions are applicable to each asset type. For example, PROFILE_PUBLISHER would not be applicable to an asset of type AD_ACCOUNT. The permission level PROFILE_PUBLISHER is only available to an asset of the type PROFILE. 
     * @param businessId Unique identifier of the requesting business. (required)
     * @param updateMemberAssetAccessBody List of member asset permissions to create or update. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call businessMembersAssetAccessUpdateAsync(String businessId, UpdateMemberAssetAccessBody updateMemberAssetAccessBody, final ApiCallback<UpdateMemberAssetsResultsResponseArray> _callback) throws ApiException {

        okhttp3.Call localVarCall = businessMembersAssetAccessUpdateValidateBeforeCall(businessId, updateMemberAssetAccessBody, _callback);
        Type localVarReturnType = new TypeToken<UpdateMemberAssetsResultsResponseArray>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for businessPartnerAssetAccessGet
     * @param businessId Unique identifier of the requesting business. (required)
     * @param partnerId The partner id to be bound to the Business (required)
     * @param partnerType Specifies whether to fetch internal or external (shared) partners. If partner_type&#x3D;INTERNAL, the asset being queried is for accesses the partner has to your business assets.&lt;br&gt; If partner_type&#x3D;EXTERNAL, the asset being queried is for the accesses you have to the partner&#39;s business asset. (optional)
     * @param assetType A resource type to filter the assets by. Only assets of the specified type will be returned. (optional, default to AD_ACCOUNT)
     * @param startIndex An index to start fetching the results from. Only the results starting from this index will be returned. (optional, default to 0)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call businessPartnerAssetAccessGetCall(String businessId, String partnerId, PartnerType partnerType, String assetType, Integer startIndex, Integer pageSize, String bookmark, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/businesses/{business_id}/partners/{partner_id}/assets"
            .replace("{" + "business_id" + "}", localVarApiClient.escapeString(businessId.toString()))
            .replace("{" + "partner_id" + "}", localVarApiClient.escapeString(partnerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (partnerType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("partner_type", partnerType));
        }

        if (assetType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_type", assetType));
        }

        if (startIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_index", startIndex));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (bookmark != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bookmark", bookmark));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "pinterest_oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call businessPartnerAssetAccessGetValidateBeforeCall(String businessId, String partnerId, PartnerType partnerType, String assetType, Integer startIndex, Integer pageSize, String bookmark, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'businessId' is set
        if (businessId == null) {
            throw new ApiException("Missing the required parameter 'businessId' when calling businessPartnerAssetAccessGet(Async)");
        }

        // verify the required parameter 'partnerId' is set
        if (partnerId == null) {
            throw new ApiException("Missing the required parameter 'partnerId' when calling businessPartnerAssetAccessGet(Async)");
        }

        return businessPartnerAssetAccessGetCall(businessId, partnerId, partnerType, assetType, startIndex, pageSize, bookmark, _callback);

    }

    /**
     * Get assets assigned to a partner or assets assigned by a partner
     * Can be used to get the business assets your partner has granted you access to or the business assets you have granted your partner access to. If you specify: - partner_type&#x3D;INTERNAL, you will retrieve your business assets that the partner has access to. - partner_type&#x3D;EXTERNAL, you will retrieve the partner&#39;s business assets that the partner has granted you access to.
     * @param businessId Unique identifier of the requesting business. (required)
     * @param partnerId The partner id to be bound to the Business (required)
     * @param partnerType Specifies whether to fetch internal or external (shared) partners. If partner_type&#x3D;INTERNAL, the asset being queried is for accesses the partner has to your business assets.&lt;br&gt; If partner_type&#x3D;EXTERNAL, the asset being queried is for the accesses you have to the partner&#39;s business asset. (optional)
     * @param assetType A resource type to filter the assets by. Only assets of the specified type will be returned. (optional, default to AD_ACCOUNT)
     * @param startIndex An index to start fetching the results from. Only the results starting from this index will be returned. (optional, default to 0)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @return BusinessPartnerAssetAccessGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public BusinessPartnerAssetAccessGet200Response businessPartnerAssetAccessGet(String businessId, String partnerId, PartnerType partnerType, String assetType, Integer startIndex, Integer pageSize, String bookmark) throws ApiException {
        ApiResponse<BusinessPartnerAssetAccessGet200Response> localVarResp = businessPartnerAssetAccessGetWithHttpInfo(businessId, partnerId, partnerType, assetType, startIndex, pageSize, bookmark);
        return localVarResp.getData();
    }

    /**
     * Get assets assigned to a partner or assets assigned by a partner
     * Can be used to get the business assets your partner has granted you access to or the business assets you have granted your partner access to. If you specify: - partner_type&#x3D;INTERNAL, you will retrieve your business assets that the partner has access to. - partner_type&#x3D;EXTERNAL, you will retrieve the partner&#39;s business assets that the partner has granted you access to.
     * @param businessId Unique identifier of the requesting business. (required)
     * @param partnerId The partner id to be bound to the Business (required)
     * @param partnerType Specifies whether to fetch internal or external (shared) partners. If partner_type&#x3D;INTERNAL, the asset being queried is for accesses the partner has to your business assets.&lt;br&gt; If partner_type&#x3D;EXTERNAL, the asset being queried is for the accesses you have to the partner&#39;s business asset. (optional)
     * @param assetType A resource type to filter the assets by. Only assets of the specified type will be returned. (optional, default to AD_ACCOUNT)
     * @param startIndex An index to start fetching the results from. Only the results starting from this index will be returned. (optional, default to 0)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @return ApiResponse&lt;BusinessPartnerAssetAccessGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BusinessPartnerAssetAccessGet200Response> businessPartnerAssetAccessGetWithHttpInfo(String businessId, String partnerId, PartnerType partnerType, String assetType, Integer startIndex, Integer pageSize, String bookmark) throws ApiException {
        okhttp3.Call localVarCall = businessPartnerAssetAccessGetValidateBeforeCall(businessId, partnerId, partnerType, assetType, startIndex, pageSize, bookmark, null);
        Type localVarReturnType = new TypeToken<BusinessPartnerAssetAccessGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get assets assigned to a partner or assets assigned by a partner (asynchronously)
     * Can be used to get the business assets your partner has granted you access to or the business assets you have granted your partner access to. If you specify: - partner_type&#x3D;INTERNAL, you will retrieve your business assets that the partner has access to. - partner_type&#x3D;EXTERNAL, you will retrieve the partner&#39;s business assets that the partner has granted you access to.
     * @param businessId Unique identifier of the requesting business. (required)
     * @param partnerId The partner id to be bound to the Business (required)
     * @param partnerType Specifies whether to fetch internal or external (shared) partners. If partner_type&#x3D;INTERNAL, the asset being queried is for accesses the partner has to your business assets.&lt;br&gt; If partner_type&#x3D;EXTERNAL, the asset being queried is for the accesses you have to the partner&#39;s business asset. (optional)
     * @param assetType A resource type to filter the assets by. Only assets of the specified type will be returned. (optional, default to AD_ACCOUNT)
     * @param startIndex An index to start fetching the results from. Only the results starting from this index will be returned. (optional, default to 0)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call businessPartnerAssetAccessGetAsync(String businessId, String partnerId, PartnerType partnerType, String assetType, Integer startIndex, Integer pageSize, String bookmark, final ApiCallback<BusinessPartnerAssetAccessGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = businessPartnerAssetAccessGetValidateBeforeCall(businessId, partnerId, partnerType, assetType, startIndex, pageSize, bookmark, _callback);
        Type localVarReturnType = new TypeToken<BusinessPartnerAssetAccessGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deletePartnerAssetAccessHandlerImpl
     * @param businessId Unique identifier of the requesting business. (required)
     * @param deletePartnerAssetAccessBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePartnerAssetAccessHandlerImplCall(String businessId, DeletePartnerAssetAccessBody deletePartnerAssetAccessBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deletePartnerAssetAccessBody;

        // create path and map variables
        String localVarPath = "/businesses/{business_id}/partners/assets"
            .replace("{" + "business_id" + "}", localVarApiClient.escapeString(businessId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "pinterest_oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePartnerAssetAccessHandlerImplValidateBeforeCall(String businessId, DeletePartnerAssetAccessBody deletePartnerAssetAccessBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'businessId' is set
        if (businessId == null) {
            throw new ApiException("Missing the required parameter 'businessId' when calling deletePartnerAssetAccessHandlerImpl(Async)");
        }

        // verify the required parameter 'deletePartnerAssetAccessBody' is set
        if (deletePartnerAssetAccessBody == null) {
            throw new ApiException("Missing the required parameter 'deletePartnerAssetAccessBody' when calling deletePartnerAssetAccessHandlerImpl(Async)");
        }

        return deletePartnerAssetAccessHandlerImplCall(businessId, deletePartnerAssetAccessBody, _callback);

    }

    /**
     * Delete partner access to asset
     * Terminate multiple partners&#39; access to an asset. If - partner_type&#x3D;INTERNAL: You will terminate a partner&#39;s asset access to your business assets. - partner_type&#x3D;EXTERNAL: You will terminate your own access to your partner&#39;s business assets.
     * @param businessId Unique identifier of the requesting business. (required)
     * @param deletePartnerAssetAccessBody  (required)
     * @return DeletePartnerAssetsResultsResponseArray
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public DeletePartnerAssetsResultsResponseArray deletePartnerAssetAccessHandlerImpl(String businessId, DeletePartnerAssetAccessBody deletePartnerAssetAccessBody) throws ApiException {
        ApiResponse<DeletePartnerAssetsResultsResponseArray> localVarResp = deletePartnerAssetAccessHandlerImplWithHttpInfo(businessId, deletePartnerAssetAccessBody);
        return localVarResp.getData();
    }

    /**
     * Delete partner access to asset
     * Terminate multiple partners&#39; access to an asset. If - partner_type&#x3D;INTERNAL: You will terminate a partner&#39;s asset access to your business assets. - partner_type&#x3D;EXTERNAL: You will terminate your own access to your partner&#39;s business assets.
     * @param businessId Unique identifier of the requesting business. (required)
     * @param deletePartnerAssetAccessBody  (required)
     * @return ApiResponse&lt;DeletePartnerAssetsResultsResponseArray&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeletePartnerAssetsResultsResponseArray> deletePartnerAssetAccessHandlerImplWithHttpInfo(String businessId, DeletePartnerAssetAccessBody deletePartnerAssetAccessBody) throws ApiException {
        okhttp3.Call localVarCall = deletePartnerAssetAccessHandlerImplValidateBeforeCall(businessId, deletePartnerAssetAccessBody, null);
        Type localVarReturnType = new TypeToken<DeletePartnerAssetsResultsResponseArray>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete partner access to asset (asynchronously)
     * Terminate multiple partners&#39; access to an asset. If - partner_type&#x3D;INTERNAL: You will terminate a partner&#39;s asset access to your business assets. - partner_type&#x3D;EXTERNAL: You will terminate your own access to your partner&#39;s business assets.
     * @param businessId Unique identifier of the requesting business. (required)
     * @param deletePartnerAssetAccessBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePartnerAssetAccessHandlerImplAsync(String businessId, DeletePartnerAssetAccessBody deletePartnerAssetAccessBody, final ApiCallback<DeletePartnerAssetsResultsResponseArray> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePartnerAssetAccessHandlerImplValidateBeforeCall(businessId, deletePartnerAssetAccessBody, _callback);
        Type localVarReturnType = new TypeToken<DeletePartnerAssetsResultsResponseArray>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updatePartnerAssetAccessHandlerImpl
     * @param businessId Unique identifier of the requesting business. (required)
     * @param updatePartnerAssetAccessBody A list of assets and permissions to assign to your partners. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePartnerAssetAccessHandlerImplCall(String businessId, UpdatePartnerAssetAccessBody updatePartnerAssetAccessBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updatePartnerAssetAccessBody;

        // create path and map variables
        String localVarPath = "/businesses/{business_id}/partners/assets"
            .replace("{" + "business_id" + "}", localVarApiClient.escapeString(businessId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "pinterest_oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePartnerAssetAccessHandlerImplValidateBeforeCall(String businessId, UpdatePartnerAssetAccessBody updatePartnerAssetAccessBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'businessId' is set
        if (businessId == null) {
            throw new ApiException("Missing the required parameter 'businessId' when calling updatePartnerAssetAccessHandlerImpl(Async)");
        }

        // verify the required parameter 'updatePartnerAssetAccessBody' is set
        if (updatePartnerAssetAccessBody == null) {
            throw new ApiException("Missing the required parameter 'updatePartnerAssetAccessBody' when calling updatePartnerAssetAccessHandlerImpl(Async)");
        }

        return updatePartnerAssetAccessHandlerImplCall(businessId, updatePartnerAssetAccessBody, _callback);

    }

    /**
     * Assign/Update partner asset permissions
     * Grant multiple partners access to assets and/or update multiple partner&#39;s exisiting permissions to an asset. If your partner already had permissions on the asset, they will be overriden with the new permissions you assign to them. To learn more about permission levels, visit https://help.pinterest.com/en/business/article/business-manager-overview  Note: Not all listed permissions are applicable to each asset type. For example, PROFILE_PUBLISHER would not be applicable to an asset of type AD_ACCOUNT. The permission level PROFILE_PUBLISHER is only available to an asset of the type PROFILE.
     * @param businessId Unique identifier of the requesting business. (required)
     * @param updatePartnerAssetAccessBody A list of assets and permissions to assign to your partners. (required)
     * @return UpdatePartnerAssetsResultsResponseArray
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public UpdatePartnerAssetsResultsResponseArray updatePartnerAssetAccessHandlerImpl(String businessId, UpdatePartnerAssetAccessBody updatePartnerAssetAccessBody) throws ApiException {
        ApiResponse<UpdatePartnerAssetsResultsResponseArray> localVarResp = updatePartnerAssetAccessHandlerImplWithHttpInfo(businessId, updatePartnerAssetAccessBody);
        return localVarResp.getData();
    }

    /**
     * Assign/Update partner asset permissions
     * Grant multiple partners access to assets and/or update multiple partner&#39;s exisiting permissions to an asset. If your partner already had permissions on the asset, they will be overriden with the new permissions you assign to them. To learn more about permission levels, visit https://help.pinterest.com/en/business/article/business-manager-overview  Note: Not all listed permissions are applicable to each asset type. For example, PROFILE_PUBLISHER would not be applicable to an asset of type AD_ACCOUNT. The permission level PROFILE_PUBLISHER is only available to an asset of the type PROFILE.
     * @param businessId Unique identifier of the requesting business. (required)
     * @param updatePartnerAssetAccessBody A list of assets and permissions to assign to your partners. (required)
     * @return ApiResponse&lt;UpdatePartnerAssetsResultsResponseArray&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdatePartnerAssetsResultsResponseArray> updatePartnerAssetAccessHandlerImplWithHttpInfo(String businessId, UpdatePartnerAssetAccessBody updatePartnerAssetAccessBody) throws ApiException {
        okhttp3.Call localVarCall = updatePartnerAssetAccessHandlerImplValidateBeforeCall(businessId, updatePartnerAssetAccessBody, null);
        Type localVarReturnType = new TypeToken<UpdatePartnerAssetsResultsResponseArray>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Assign/Update partner asset permissions (asynchronously)
     * Grant multiple partners access to assets and/or update multiple partner&#39;s exisiting permissions to an asset. If your partner already had permissions on the asset, they will be overriden with the new permissions you assign to them. To learn more about permission levels, visit https://help.pinterest.com/en/business/article/business-manager-overview  Note: Not all listed permissions are applicable to each asset type. For example, PROFILE_PUBLISHER would not be applicable to an asset of type AD_ACCOUNT. The permission level PROFILE_PUBLISHER is only available to an asset of the type PROFILE.
     * @param businessId Unique identifier of the requesting business. (required)
     * @param updatePartnerAssetAccessBody A list of assets and permissions to assign to your partners. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePartnerAssetAccessHandlerImplAsync(String businessId, UpdatePartnerAssetAccessBody updatePartnerAssetAccessBody, final ApiCallback<UpdatePartnerAssetsResultsResponseArray> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePartnerAssetAccessHandlerImplValidateBeforeCall(businessId, updatePartnerAssetAccessBody, _callback);
        Type localVarReturnType = new TypeToken<UpdatePartnerAssetsResultsResponseArray>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
