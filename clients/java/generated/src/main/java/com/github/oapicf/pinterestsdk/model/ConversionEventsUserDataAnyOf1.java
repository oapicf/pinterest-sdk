/*
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.github.oapicf.pinterestsdk.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.github.oapicf.pinterestsdk.JSON;

/**
 * ConversionEventsUserDataAnyOf1
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-05T02:01:32.024245558Z[Etc/UTC]", comments = "Generator version: 7.9.0")
public class ConversionEventsUserDataAnyOf1 {
  public static final String SERIALIZED_NAME_EM = "em";
  @SerializedName(SERIALIZED_NAME_EM)
  private List<String> em = new ArrayList<>();

  public static final String SERIALIZED_NAME_HASHED_MAIDS = "hashed_maids";
  @SerializedName(SERIALIZED_NAME_HASHED_MAIDS)
  private List<String> hashedMaids = new ArrayList<>();

  public static final String SERIALIZED_NAME_CLIENT_IP_ADDRESS = "client_ip_address";
  @SerializedName(SERIALIZED_NAME_CLIENT_IP_ADDRESS)
  private String clientIpAddress;

  public static final String SERIALIZED_NAME_CLIENT_USER_AGENT = "client_user_agent";
  @SerializedName(SERIALIZED_NAME_CLIENT_USER_AGENT)
  private String clientUserAgent;

  public ConversionEventsUserDataAnyOf1() {
  }

  public ConversionEventsUserDataAnyOf1 em(List<String> em) {
    this.em = em;
    return this;
  }

  public ConversionEventsUserDataAnyOf1 addEmItem(String emItem) {
    if (this.em == null) {
      this.em = new ArrayList<>();
    }
    this.em.add(emItem);
    return this;
  }

  /**
   * Sha256 hashes of lowercase version of user&#39;s email addresses. Used for matching. We highly recommend this on checkout events at least. It may improve reporting performance such as ROAS/CPA. The string should be in the UTF-8 format.
   * @return em
   */
  @javax.annotation.Nullable
  public List<String> getEm() {
    return em;
  }

  public void setEm(List<String> em) {
    this.em = em;
  }


  public ConversionEventsUserDataAnyOf1 hashedMaids(List<String> hashedMaids) {
    this.hashedMaids = hashedMaids;
    return this;
  }

  public ConversionEventsUserDataAnyOf1 addHashedMaidsItem(String hashedMaidsItem) {
    if (this.hashedMaids == null) {
      this.hashedMaids = new ArrayList<>();
    }
    this.hashedMaids.add(hashedMaidsItem);
    return this;
  }

  /**
   * Sha256 hashes of user&#39;s \&quot;Google Advertising IDs\&quot; (GAIDs) or \&quot;Apple&#39;s Identifier for Advertisers\&quot; (IDFAs). Used for matching. We highly recommend this on checkout events at least. It may improve reporting performance such as ROAS/CPA. The string should be in the UTF-8 format.
   * @return hashedMaids
   */
  @javax.annotation.Nonnull
  public List<String> getHashedMaids() {
    return hashedMaids;
  }

  public void setHashedMaids(List<String> hashedMaids) {
    this.hashedMaids = hashedMaids;
  }


  public ConversionEventsUserDataAnyOf1 clientIpAddress(String clientIpAddress) {
    this.clientIpAddress = clientIpAddress;
    return this;
  }

  /**
   * The user&#39;s IP address, which can be either in IPv4 or IPv6 format. Used for matching. We highly recommend this for all events. It may improve reporting performance such as ROAS/CPA.
   * @return clientIpAddress
   */
  @javax.annotation.Nullable
  public String getClientIpAddress() {
    return clientIpAddress;
  }

  public void setClientIpAddress(String clientIpAddress) {
    this.clientIpAddress = clientIpAddress;
  }


  public ConversionEventsUserDataAnyOf1 clientUserAgent(String clientUserAgent) {
    this.clientUserAgent = clientUserAgent;
    return this;
  }

  /**
   * The user agent string of the user&#39;s web browser. We highly recommend this for all events. It may improve reporting performance such as ROAS/CPA.
   * @return clientUserAgent
   */
  @javax.annotation.Nullable
  public String getClientUserAgent() {
    return clientUserAgent;
  }

  public void setClientUserAgent(String clientUserAgent) {
    this.clientUserAgent = clientUserAgent;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConversionEventsUserDataAnyOf1 conversionEventsUserDataAnyOf1 = (ConversionEventsUserDataAnyOf1) o;
    return Objects.equals(this.em, conversionEventsUserDataAnyOf1.em) &&
        Objects.equals(this.hashedMaids, conversionEventsUserDataAnyOf1.hashedMaids) &&
        Objects.equals(this.clientIpAddress, conversionEventsUserDataAnyOf1.clientIpAddress) &&
        Objects.equals(this.clientUserAgent, conversionEventsUserDataAnyOf1.clientUserAgent);
  }

  @Override
  public int hashCode() {
    return Objects.hash(em, hashedMaids, clientIpAddress, clientUserAgent);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConversionEventsUserDataAnyOf1 {\n");
    sb.append("    em: ").append(toIndentedString(em)).append("\n");
    sb.append("    hashedMaids: ").append(toIndentedString(hashedMaids)).append("\n");
    sb.append("    clientIpAddress: ").append(toIndentedString(clientIpAddress)).append("\n");
    sb.append("    clientUserAgent: ").append(toIndentedString(clientUserAgent)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("em");
    openapiFields.add("hashed_maids");
    openapiFields.add("client_ip_address");
    openapiFields.add("client_user_agent");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("hashed_maids");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConversionEventsUserDataAnyOf1
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConversionEventsUserDataAnyOf1.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConversionEventsUserDataAnyOf1 is not found in the empty JSON string", ConversionEventsUserDataAnyOf1.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConversionEventsUserDataAnyOf1.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConversionEventsUserDataAnyOf1` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ConversionEventsUserDataAnyOf1.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("em") != null && !jsonObj.get("em").isJsonNull() && !jsonObj.get("em").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `em` to be an array in the JSON string but got `%s`", jsonObj.get("em").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("hashed_maids") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("hashed_maids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `hashed_maids` to be an array in the JSON string but got `%s`", jsonObj.get("hashed_maids").toString()));
      }
      if ((jsonObj.get("client_ip_address") != null && !jsonObj.get("client_ip_address").isJsonNull()) && !jsonObj.get("client_ip_address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `client_ip_address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("client_ip_address").toString()));
      }
      if ((jsonObj.get("client_user_agent") != null && !jsonObj.get("client_user_agent").isJsonNull()) && !jsonObj.get("client_user_agent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `client_user_agent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("client_user_agent").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConversionEventsUserDataAnyOf1.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConversionEventsUserDataAnyOf1' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConversionEventsUserDataAnyOf1> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConversionEventsUserDataAnyOf1.class));

       return (TypeAdapter<T>) new TypeAdapter<ConversionEventsUserDataAnyOf1>() {
           @Override
           public void write(JsonWriter out, ConversionEventsUserDataAnyOf1 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConversionEventsUserDataAnyOf1 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConversionEventsUserDataAnyOf1 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConversionEventsUserDataAnyOf1
   * @throws IOException if the JSON string is invalid with respect to ConversionEventsUserDataAnyOf1
   */
  public static ConversionEventsUserDataAnyOf1 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConversionEventsUserDataAnyOf1.class);
  }

  /**
   * Convert an instance of ConversionEventsUserDataAnyOf1 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

