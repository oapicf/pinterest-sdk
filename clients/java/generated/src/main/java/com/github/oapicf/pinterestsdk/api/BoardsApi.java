/*
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.github.oapicf.pinterestsdk.api;

import com.github.oapicf.pinterestsdk.ApiCallback;
import com.github.oapicf.pinterestsdk.ApiClient;
import com.github.oapicf.pinterestsdk.ApiException;
import com.github.oapicf.pinterestsdk.ApiResponse;
import com.github.oapicf.pinterestsdk.Configuration;
import com.github.oapicf.pinterestsdk.Pair;
import com.github.oapicf.pinterestsdk.ProgressRequestBody;
import com.github.oapicf.pinterestsdk.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.github.oapicf.pinterestsdk.model.Board;
import com.github.oapicf.pinterestsdk.model.BoardSection;
import com.github.oapicf.pinterestsdk.model.BoardSectionsList200Response;
import com.github.oapicf.pinterestsdk.model.BoardUpdate;
import com.github.oapicf.pinterestsdk.model.BoardsList200Response;
import com.github.oapicf.pinterestsdk.model.BoardsListPins200Response;
import com.github.oapicf.pinterestsdk.model.Error;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BoardsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BoardsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BoardsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for boardSectionsCreate
     * @param boardId Unique identifier of a board. (required)
     * @param boardSection Create a board section. (required)
     * @param adAccountId Unique identifier of an ad account. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid board section parameters. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized to create board sections. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Could not get exclusive access to the board to create a new section. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Could not create a new board section. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call boardSectionsCreateCall(String boardId, BoardSection boardSection, String adAccountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = boardSection;

        // create path and map variables
        String localVarPath = "/boards/{board_id}/sections"
            .replace("{" + "board_id" + "}", localVarApiClient.escapeString(boardId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (adAccountId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ad_account_id", adAccountId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "pinterest_oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call boardSectionsCreateValidateBeforeCall(String boardId, BoardSection boardSection, String adAccountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'boardId' is set
        if (boardId == null) {
            throw new ApiException("Missing the required parameter 'boardId' when calling boardSectionsCreate(Async)");
        }

        // verify the required parameter 'boardSection' is set
        if (boardSection == null) {
            throw new ApiException("Missing the required parameter 'boardSection' when calling boardSectionsCreate(Async)");
        }

        return boardSectionsCreateCall(boardId, boardSection, adAccountId, _callback);

    }

    /**
     * Create board section
     * Create a board section on a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
     * @param boardId Unique identifier of a board. (required)
     * @param boardSection Create a board section. (required)
     * @param adAccountId Unique identifier of an ad account. (optional)
     * @return BoardSection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid board section parameters. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized to create board sections. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Could not get exclusive access to the board to create a new section. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Could not create a new board section. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public BoardSection boardSectionsCreate(String boardId, BoardSection boardSection, String adAccountId) throws ApiException {
        ApiResponse<BoardSection> localVarResp = boardSectionsCreateWithHttpInfo(boardId, boardSection, adAccountId);
        return localVarResp.getData();
    }

    /**
     * Create board section
     * Create a board section on a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
     * @param boardId Unique identifier of a board. (required)
     * @param boardSection Create a board section. (required)
     * @param adAccountId Unique identifier of an ad account. (optional)
     * @return ApiResponse&lt;BoardSection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid board section parameters. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized to create board sections. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Could not get exclusive access to the board to create a new section. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Could not create a new board section. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BoardSection> boardSectionsCreateWithHttpInfo(String boardId, BoardSection boardSection, String adAccountId) throws ApiException {
        okhttp3.Call localVarCall = boardSectionsCreateValidateBeforeCall(boardId, boardSection, adAccountId, null);
        Type localVarReturnType = new TypeToken<BoardSection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create board section (asynchronously)
     * Create a board section on a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
     * @param boardId Unique identifier of a board. (required)
     * @param boardSection Create a board section. (required)
     * @param adAccountId Unique identifier of an ad account. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid board section parameters. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized to create board sections. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Could not get exclusive access to the board to create a new section. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Could not create a new board section. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call boardSectionsCreateAsync(String boardId, BoardSection boardSection, String adAccountId, final ApiCallback<BoardSection> _callback) throws ApiException {

        okhttp3.Call localVarCall = boardSectionsCreateValidateBeforeCall(boardId, boardSection, adAccountId, _callback);
        Type localVarReturnType = new TypeToken<BoardSection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for boardSectionsDelete
     * @param boardId Unique identifier of a board. (required)
     * @param sectionId Unique identifier of a board section. (required)
     * @param adAccountId Unique identifier of an ad account. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Board section deleted successfully </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized to delete board section. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Board section not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Board section conflict. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call boardSectionsDeleteCall(String boardId, String sectionId, String adAccountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/boards/{board_id}/sections/{section_id}"
            .replace("{" + "board_id" + "}", localVarApiClient.escapeString(boardId.toString()))
            .replace("{" + "section_id" + "}", localVarApiClient.escapeString(sectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (adAccountId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ad_account_id", adAccountId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "pinterest_oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call boardSectionsDeleteValidateBeforeCall(String boardId, String sectionId, String adAccountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'boardId' is set
        if (boardId == null) {
            throw new ApiException("Missing the required parameter 'boardId' when calling boardSectionsDelete(Async)");
        }

        // verify the required parameter 'sectionId' is set
        if (sectionId == null) {
            throw new ApiException("Missing the required parameter 'sectionId' when calling boardSectionsDelete(Async)");
        }

        return boardSectionsDeleteCall(boardId, sectionId, adAccountId, _callback);

    }

    /**
     * Delete board section
     * Delete a board section on a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
     * @param boardId Unique identifier of a board. (required)
     * @param sectionId Unique identifier of a board section. (required)
     * @param adAccountId Unique identifier of an ad account. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Board section deleted successfully </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized to delete board section. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Board section not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Board section conflict. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public void boardSectionsDelete(String boardId, String sectionId, String adAccountId) throws ApiException {
        boardSectionsDeleteWithHttpInfo(boardId, sectionId, adAccountId);
    }

    /**
     * Delete board section
     * Delete a board section on a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
     * @param boardId Unique identifier of a board. (required)
     * @param sectionId Unique identifier of a board section. (required)
     * @param adAccountId Unique identifier of an ad account. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Board section deleted successfully </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized to delete board section. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Board section not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Board section conflict. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> boardSectionsDeleteWithHttpInfo(String boardId, String sectionId, String adAccountId) throws ApiException {
        okhttp3.Call localVarCall = boardSectionsDeleteValidateBeforeCall(boardId, sectionId, adAccountId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete board section (asynchronously)
     * Delete a board section on a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
     * @param boardId Unique identifier of a board. (required)
     * @param sectionId Unique identifier of a board section. (required)
     * @param adAccountId Unique identifier of an ad account. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Board section deleted successfully </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized to delete board section. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Board section not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Board section conflict. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call boardSectionsDeleteAsync(String boardId, String sectionId, String adAccountId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = boardSectionsDeleteValidateBeforeCall(boardId, sectionId, adAccountId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for boardSectionsList
     * @param boardId Unique identifier of a board. (required)
     * @param adAccountId Unique identifier of an ad account. (optional)
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call boardSectionsListCall(String boardId, String adAccountId, String bookmark, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/boards/{board_id}/sections"
            .replace("{" + "board_id" + "}", localVarApiClient.escapeString(boardId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (adAccountId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ad_account_id", adAccountId));
        }

        if (bookmark != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bookmark", bookmark));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "pinterest_oauth2", "client_credentials" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call boardSectionsListValidateBeforeCall(String boardId, String adAccountId, String bookmark, Integer pageSize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'boardId' is set
        if (boardId == null) {
            throw new ApiException("Missing the required parameter 'boardId' when calling boardSectionsList(Async)");
        }

        return boardSectionsListCall(boardId, adAccountId, bookmark, pageSize, _callback);

    }

    /**
     * List board sections
     * Get a list of all board sections from a board owned by the \&quot;operation user_account\&quot; - or a group board that has been shared with this account. Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
     * @param boardId Unique identifier of a board. (required)
     * @param adAccountId Unique identifier of an ad account. (optional)
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @return BoardSectionsList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public BoardSectionsList200Response boardSectionsList(String boardId, String adAccountId, String bookmark, Integer pageSize) throws ApiException {
        ApiResponse<BoardSectionsList200Response> localVarResp = boardSectionsListWithHttpInfo(boardId, adAccountId, bookmark, pageSize);
        return localVarResp.getData();
    }

    /**
     * List board sections
     * Get a list of all board sections from a board owned by the \&quot;operation user_account\&quot; - or a group board that has been shared with this account. Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
     * @param boardId Unique identifier of a board. (required)
     * @param adAccountId Unique identifier of an ad account. (optional)
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @return ApiResponse&lt;BoardSectionsList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BoardSectionsList200Response> boardSectionsListWithHttpInfo(String boardId, String adAccountId, String bookmark, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = boardSectionsListValidateBeforeCall(boardId, adAccountId, bookmark, pageSize, null);
        Type localVarReturnType = new TypeToken<BoardSectionsList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List board sections (asynchronously)
     * Get a list of all board sections from a board owned by the \&quot;operation user_account\&quot; - or a group board that has been shared with this account. Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
     * @param boardId Unique identifier of a board. (required)
     * @param adAccountId Unique identifier of an ad account. (optional)
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call boardSectionsListAsync(String boardId, String adAccountId, String bookmark, Integer pageSize, final ApiCallback<BoardSectionsList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = boardSectionsListValidateBeforeCall(boardId, adAccountId, bookmark, pageSize, _callback);
        Type localVarReturnType = new TypeToken<BoardSectionsList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for boardSectionsListPins
     * @param boardId Unique identifier of a board. (required)
     * @param sectionId Unique identifier of a board section. (required)
     * @param adAccountId Unique identifier of an ad account. (optional)
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized to access Pins on board section. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Board or section not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Board section conflict. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call boardSectionsListPinsCall(String boardId, String sectionId, String adAccountId, String bookmark, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/boards/{board_id}/sections/{section_id}/pins"
            .replace("{" + "board_id" + "}", localVarApiClient.escapeString(boardId.toString()))
            .replace("{" + "section_id" + "}", localVarApiClient.escapeString(sectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (adAccountId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ad_account_id", adAccountId));
        }

        if (bookmark != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bookmark", bookmark));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "pinterest_oauth2", "client_credentials" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call boardSectionsListPinsValidateBeforeCall(String boardId, String sectionId, String adAccountId, String bookmark, Integer pageSize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'boardId' is set
        if (boardId == null) {
            throw new ApiException("Missing the required parameter 'boardId' when calling boardSectionsListPins(Async)");
        }

        // verify the required parameter 'sectionId' is set
        if (sectionId == null) {
            throw new ApiException("Missing the required parameter 'sectionId' when calling boardSectionsListPins(Async)");
        }

        return boardSectionsListPinsCall(boardId, sectionId, adAccountId, bookmark, pageSize, _callback);

    }

    /**
     * List Pins on board section
     * Get a list of the Pins on a board section of a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
     * @param boardId Unique identifier of a board. (required)
     * @param sectionId Unique identifier of a board section. (required)
     * @param adAccountId Unique identifier of an ad account. (optional)
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @return BoardsListPins200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized to access Pins on board section. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Board or section not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Board section conflict. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public BoardsListPins200Response boardSectionsListPins(String boardId, String sectionId, String adAccountId, String bookmark, Integer pageSize) throws ApiException {
        ApiResponse<BoardsListPins200Response> localVarResp = boardSectionsListPinsWithHttpInfo(boardId, sectionId, adAccountId, bookmark, pageSize);
        return localVarResp.getData();
    }

    /**
     * List Pins on board section
     * Get a list of the Pins on a board section of a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
     * @param boardId Unique identifier of a board. (required)
     * @param sectionId Unique identifier of a board section. (required)
     * @param adAccountId Unique identifier of an ad account. (optional)
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @return ApiResponse&lt;BoardsListPins200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized to access Pins on board section. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Board or section not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Board section conflict. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BoardsListPins200Response> boardSectionsListPinsWithHttpInfo(String boardId, String sectionId, String adAccountId, String bookmark, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = boardSectionsListPinsValidateBeforeCall(boardId, sectionId, adAccountId, bookmark, pageSize, null);
        Type localVarReturnType = new TypeToken<BoardsListPins200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Pins on board section (asynchronously)
     * Get a list of the Pins on a board section of a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
     * @param boardId Unique identifier of a board. (required)
     * @param sectionId Unique identifier of a board section. (required)
     * @param adAccountId Unique identifier of an ad account. (optional)
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized to access Pins on board section. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Board or section not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Board section conflict. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call boardSectionsListPinsAsync(String boardId, String sectionId, String adAccountId, String bookmark, Integer pageSize, final ApiCallback<BoardsListPins200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = boardSectionsListPinsValidateBeforeCall(boardId, sectionId, adAccountId, bookmark, pageSize, _callback);
        Type localVarReturnType = new TypeToken<BoardsListPins200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for boardSectionsUpdate
     * @param boardId Unique identifier of a board. (required)
     * @param sectionId Unique identifier of a board section. (required)
     * @param boardSection Update a board section. (required)
     * @param adAccountId Unique identifier of an ad account. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid board section parameters. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized to update board section. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Board section conflict. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call boardSectionsUpdateCall(String boardId, String sectionId, BoardSection boardSection, String adAccountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = boardSection;

        // create path and map variables
        String localVarPath = "/boards/{board_id}/sections/{section_id}"
            .replace("{" + "board_id" + "}", localVarApiClient.escapeString(boardId.toString()))
            .replace("{" + "section_id" + "}", localVarApiClient.escapeString(sectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (adAccountId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ad_account_id", adAccountId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "pinterest_oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call boardSectionsUpdateValidateBeforeCall(String boardId, String sectionId, BoardSection boardSection, String adAccountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'boardId' is set
        if (boardId == null) {
            throw new ApiException("Missing the required parameter 'boardId' when calling boardSectionsUpdate(Async)");
        }

        // verify the required parameter 'sectionId' is set
        if (sectionId == null) {
            throw new ApiException("Missing the required parameter 'sectionId' when calling boardSectionsUpdate(Async)");
        }

        // verify the required parameter 'boardSection' is set
        if (boardSection == null) {
            throw new ApiException("Missing the required parameter 'boardSection' when calling boardSectionsUpdate(Async)");
        }

        return boardSectionsUpdateCall(boardId, sectionId, boardSection, adAccountId, _callback);

    }

    /**
     * Update board section
     * Update a board section on a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
     * @param boardId Unique identifier of a board. (required)
     * @param sectionId Unique identifier of a board section. (required)
     * @param boardSection Update a board section. (required)
     * @param adAccountId Unique identifier of an ad account. (optional)
     * @return BoardSection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid board section parameters. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized to update board section. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Board section conflict. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public BoardSection boardSectionsUpdate(String boardId, String sectionId, BoardSection boardSection, String adAccountId) throws ApiException {
        ApiResponse<BoardSection> localVarResp = boardSectionsUpdateWithHttpInfo(boardId, sectionId, boardSection, adAccountId);
        return localVarResp.getData();
    }

    /**
     * Update board section
     * Update a board section on a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
     * @param boardId Unique identifier of a board. (required)
     * @param sectionId Unique identifier of a board section. (required)
     * @param boardSection Update a board section. (required)
     * @param adAccountId Unique identifier of an ad account. (optional)
     * @return ApiResponse&lt;BoardSection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid board section parameters. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized to update board section. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Board section conflict. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BoardSection> boardSectionsUpdateWithHttpInfo(String boardId, String sectionId, BoardSection boardSection, String adAccountId) throws ApiException {
        okhttp3.Call localVarCall = boardSectionsUpdateValidateBeforeCall(boardId, sectionId, boardSection, adAccountId, null);
        Type localVarReturnType = new TypeToken<BoardSection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update board section (asynchronously)
     * Update a board section on a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
     * @param boardId Unique identifier of a board. (required)
     * @param sectionId Unique identifier of a board section. (required)
     * @param boardSection Update a board section. (required)
     * @param adAccountId Unique identifier of an ad account. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid board section parameters. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized to update board section. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Board section conflict. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call boardSectionsUpdateAsync(String boardId, String sectionId, BoardSection boardSection, String adAccountId, final ApiCallback<BoardSection> _callback) throws ApiException {

        okhttp3.Call localVarCall = boardSectionsUpdateValidateBeforeCall(boardId, sectionId, boardSection, adAccountId, _callback);
        Type localVarReturnType = new TypeToken<BoardSection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for boardsCreate
     * @param board Create a board using a single board json object. (required)
     * @param adAccountId Unique identifier of an ad account. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The board name is invalid or duplicated. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call boardsCreateCall(Board board, String adAccountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = board;

        // create path and map variables
        String localVarPath = "/boards";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (adAccountId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ad_account_id", adAccountId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "pinterest_oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call boardsCreateValidateBeforeCall(Board board, String adAccountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'board' is set
        if (board == null) {
            throw new ApiException("Missing the required parameter 'board' when calling boardsCreate(Async)");
        }

        return boardsCreateCall(board, adAccountId, _callback);

    }

    /**
     * Create board
     * Create a board owned by the \&quot;operation user_account\&quot;. Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
     * @param board Create a board using a single board json object. (required)
     * @param adAccountId Unique identifier of an ad account. (optional)
     * @return Board
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The board name is invalid or duplicated. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public Board boardsCreate(Board board, String adAccountId) throws ApiException {
        ApiResponse<Board> localVarResp = boardsCreateWithHttpInfo(board, adAccountId);
        return localVarResp.getData();
    }

    /**
     * Create board
     * Create a board owned by the \&quot;operation user_account\&quot;. Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
     * @param board Create a board using a single board json object. (required)
     * @param adAccountId Unique identifier of an ad account. (optional)
     * @return ApiResponse&lt;Board&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The board name is invalid or duplicated. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Board> boardsCreateWithHttpInfo(Board board, String adAccountId) throws ApiException {
        okhttp3.Call localVarCall = boardsCreateValidateBeforeCall(board, adAccountId, null);
        Type localVarReturnType = new TypeToken<Board>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create board (asynchronously)
     * Create a board owned by the \&quot;operation user_account\&quot;. Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
     * @param board Create a board using a single board json object. (required)
     * @param adAccountId Unique identifier of an ad account. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The board name is invalid or duplicated. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call boardsCreateAsync(Board board, String adAccountId, final ApiCallback<Board> _callback) throws ApiException {

        okhttp3.Call localVarCall = boardsCreateValidateBeforeCall(board, adAccountId, _callback);
        Type localVarReturnType = new TypeToken<Board>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for boardsDelete
     * @param boardId Unique identifier of a board. (required)
     * @param adAccountId Unique identifier of an ad account. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Board deleted successfully </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized to delete the board. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Board not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Could not get exclusive access to delete the board. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> This request exceeded a rate limit. This can happen if the client exceeds one of the published rate limits or if multiple write operations are applied to an object within a short time window. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call boardsDeleteCall(String boardId, String adAccountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/boards/{board_id}"
            .replace("{" + "board_id" + "}", localVarApiClient.escapeString(boardId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (adAccountId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ad_account_id", adAccountId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "pinterest_oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call boardsDeleteValidateBeforeCall(String boardId, String adAccountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'boardId' is set
        if (boardId == null) {
            throw new ApiException("Missing the required parameter 'boardId' when calling boardsDelete(Async)");
        }

        return boardsDeleteCall(boardId, adAccountId, _callback);

    }

    /**
     * Delete board
     * Delete a board owned by the \&quot;operation user_account\&quot;. - Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
     * @param boardId Unique identifier of a board. (required)
     * @param adAccountId Unique identifier of an ad account. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Board deleted successfully </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized to delete the board. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Board not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Could not get exclusive access to delete the board. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> This request exceeded a rate limit. This can happen if the client exceeds one of the published rate limits or if multiple write operations are applied to an object within a short time window. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public void boardsDelete(String boardId, String adAccountId) throws ApiException {
        boardsDeleteWithHttpInfo(boardId, adAccountId);
    }

    /**
     * Delete board
     * Delete a board owned by the \&quot;operation user_account\&quot;. - Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
     * @param boardId Unique identifier of a board. (required)
     * @param adAccountId Unique identifier of an ad account. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Board deleted successfully </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized to delete the board. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Board not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Could not get exclusive access to delete the board. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> This request exceeded a rate limit. This can happen if the client exceeds one of the published rate limits or if multiple write operations are applied to an object within a short time window. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> boardsDeleteWithHttpInfo(String boardId, String adAccountId) throws ApiException {
        okhttp3.Call localVarCall = boardsDeleteValidateBeforeCall(boardId, adAccountId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete board (asynchronously)
     * Delete a board owned by the \&quot;operation user_account\&quot;. - Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
     * @param boardId Unique identifier of a board. (required)
     * @param adAccountId Unique identifier of an ad account. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Board deleted successfully </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized to delete the board. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Board not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Could not get exclusive access to delete the board. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> This request exceeded a rate limit. This can happen if the client exceeds one of the published rate limits or if multiple write operations are applied to an object within a short time window. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call boardsDeleteAsync(String boardId, String adAccountId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = boardsDeleteValidateBeforeCall(boardId, adAccountId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for boardsGet
     * @param boardId Unique identifier of a board. (required)
     * @param adAccountId Unique identifier of an ad account. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Board not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call boardsGetCall(String boardId, String adAccountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/boards/{board_id}"
            .replace("{" + "board_id" + "}", localVarApiClient.escapeString(boardId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (adAccountId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ad_account_id", adAccountId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "pinterest_oauth2", "client_credentials" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call boardsGetValidateBeforeCall(String boardId, String adAccountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'boardId' is set
        if (boardId == null) {
            throw new ApiException("Missing the required parameter 'boardId' when calling boardsGet(Async)");
        }

        return boardsGetCall(boardId, adAccountId, _callback);

    }

    /**
     * Get board
     * Get a board owned by the operation user_account - or a group board that has been shared with this account. - Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
     * @param boardId Unique identifier of a board. (required)
     * @param adAccountId Unique identifier of an ad account. (optional)
     * @return Board
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Board not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public Board boardsGet(String boardId, String adAccountId) throws ApiException {
        ApiResponse<Board> localVarResp = boardsGetWithHttpInfo(boardId, adAccountId);
        return localVarResp.getData();
    }

    /**
     * Get board
     * Get a board owned by the operation user_account - or a group board that has been shared with this account. - Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
     * @param boardId Unique identifier of a board. (required)
     * @param adAccountId Unique identifier of an ad account. (optional)
     * @return ApiResponse&lt;Board&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Board not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Board> boardsGetWithHttpInfo(String boardId, String adAccountId) throws ApiException {
        okhttp3.Call localVarCall = boardsGetValidateBeforeCall(boardId, adAccountId, null);
        Type localVarReturnType = new TypeToken<Board>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get board (asynchronously)
     * Get a board owned by the operation user_account - or a group board that has been shared with this account. - Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
     * @param boardId Unique identifier of a board. (required)
     * @param adAccountId Unique identifier of an ad account. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Board not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call boardsGetAsync(String boardId, String adAccountId, final ApiCallback<Board> _callback) throws ApiException {

        okhttp3.Call localVarCall = boardsGetValidateBeforeCall(boardId, adAccountId, _callback);
        Type localVarReturnType = new TypeToken<Board>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for boardsList
     * @param adAccountId Unique identifier of an ad account. (optional)
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @param privacy Privacy setting for a board. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call boardsListCall(String adAccountId, String bookmark, Integer pageSize, String privacy, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/boards";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (adAccountId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ad_account_id", adAccountId));
        }

        if (bookmark != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bookmark", bookmark));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (privacy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("privacy", privacy));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "pinterest_oauth2", "client_credentials" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call boardsListValidateBeforeCall(String adAccountId, String bookmark, Integer pageSize, String privacy, final ApiCallback _callback) throws ApiException {
        return boardsListCall(adAccountId, bookmark, pageSize, privacy, _callback);

    }

    /**
     * List boards
     * Get a list of the boards owned by the \&quot;operation user_account\&quot; + group boards where this account is a collaborator Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. Optional: Specify a privacy type (public, protected, or secret) to indicate which boards to return. - If no privacy is specified, all boards that can be returned (based on the scopes of the token and ad_account role if applicable) will be returned.
     * @param adAccountId Unique identifier of an ad account. (optional)
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @param privacy Privacy setting for a board. (optional)
     * @return BoardsList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public BoardsList200Response boardsList(String adAccountId, String bookmark, Integer pageSize, String privacy) throws ApiException {
        ApiResponse<BoardsList200Response> localVarResp = boardsListWithHttpInfo(adAccountId, bookmark, pageSize, privacy);
        return localVarResp.getData();
    }

    /**
     * List boards
     * Get a list of the boards owned by the \&quot;operation user_account\&quot; + group boards where this account is a collaborator Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. Optional: Specify a privacy type (public, protected, or secret) to indicate which boards to return. - If no privacy is specified, all boards that can be returned (based on the scopes of the token and ad_account role if applicable) will be returned.
     * @param adAccountId Unique identifier of an ad account. (optional)
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @param privacy Privacy setting for a board. (optional)
     * @return ApiResponse&lt;BoardsList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BoardsList200Response> boardsListWithHttpInfo(String adAccountId, String bookmark, Integer pageSize, String privacy) throws ApiException {
        okhttp3.Call localVarCall = boardsListValidateBeforeCall(adAccountId, bookmark, pageSize, privacy, null);
        Type localVarReturnType = new TypeToken<BoardsList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List boards (asynchronously)
     * Get a list of the boards owned by the \&quot;operation user_account\&quot; + group boards where this account is a collaborator Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. Optional: Specify a privacy type (public, protected, or secret) to indicate which boards to return. - If no privacy is specified, all boards that can be returned (based on the scopes of the token and ad_account role if applicable) will be returned.
     * @param adAccountId Unique identifier of an ad account. (optional)
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @param privacy Privacy setting for a board. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call boardsListAsync(String adAccountId, String bookmark, Integer pageSize, String privacy, final ApiCallback<BoardsList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = boardsListValidateBeforeCall(adAccountId, bookmark, pageSize, privacy, _callback);
        Type localVarReturnType = new TypeToken<BoardsList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for boardsListPins
     * @param boardId Unique identifier of a board. (required)
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @param creativeTypes Pin creative types filter. &lt;/p&gt;&lt;strong&gt;Note:&lt;/strong&gt; SHOP_THE_PIN has been deprecated. Please use COLLECTION instead. (optional)
     * @param adAccountId Unique identifier of an ad account. (optional)
     * @param pinMetrics Specify whether to return 90d and lifetime Pin metrics. Total comments and total reactions are only available with lifetime Pin metrics. If Pin was created before &lt;code&gt;2023-03-20&lt;/code&gt; lifetime metrics will only be available for Video and Idea Pin formats. Lifetime metrics are available for all Pin formats since then. (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Board not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call boardsListPinsCall(String boardId, String bookmark, Integer pageSize, List<String> creativeTypes, String adAccountId, Boolean pinMetrics, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/boards/{board_id}/pins"
            .replace("{" + "board_id" + "}", localVarApiClient.escapeString(boardId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (bookmark != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bookmark", bookmark));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (creativeTypes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "creative_types", creativeTypes));
        }

        if (adAccountId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ad_account_id", adAccountId));
        }

        if (pinMetrics != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pin_metrics", pinMetrics));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "pinterest_oauth2", "client_credentials" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call boardsListPinsValidateBeforeCall(String boardId, String bookmark, Integer pageSize, List<String> creativeTypes, String adAccountId, Boolean pinMetrics, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'boardId' is set
        if (boardId == null) {
            throw new ApiException("Missing the required parameter 'boardId' when calling boardsListPins(Async)");
        }

        return boardsListPinsCall(boardId, bookmark, pageSize, creativeTypes, adAccountId, pinMetrics, _callback);

    }

    /**
     * List Pins on board
     * Get a list of the Pins on a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. - Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
     * @param boardId Unique identifier of a board. (required)
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @param creativeTypes Pin creative types filter. &lt;/p&gt;&lt;strong&gt;Note:&lt;/strong&gt; SHOP_THE_PIN has been deprecated. Please use COLLECTION instead. (optional)
     * @param adAccountId Unique identifier of an ad account. (optional)
     * @param pinMetrics Specify whether to return 90d and lifetime Pin metrics. Total comments and total reactions are only available with lifetime Pin metrics. If Pin was created before &lt;code&gt;2023-03-20&lt;/code&gt; lifetime metrics will only be available for Video and Idea Pin formats. Lifetime metrics are available for all Pin formats since then. (optional, default to false)
     * @return BoardsListPins200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Board not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public BoardsListPins200Response boardsListPins(String boardId, String bookmark, Integer pageSize, List<String> creativeTypes, String adAccountId, Boolean pinMetrics) throws ApiException {
        ApiResponse<BoardsListPins200Response> localVarResp = boardsListPinsWithHttpInfo(boardId, bookmark, pageSize, creativeTypes, adAccountId, pinMetrics);
        return localVarResp.getData();
    }

    /**
     * List Pins on board
     * Get a list of the Pins on a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. - Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
     * @param boardId Unique identifier of a board. (required)
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @param creativeTypes Pin creative types filter. &lt;/p&gt;&lt;strong&gt;Note:&lt;/strong&gt; SHOP_THE_PIN has been deprecated. Please use COLLECTION instead. (optional)
     * @param adAccountId Unique identifier of an ad account. (optional)
     * @param pinMetrics Specify whether to return 90d and lifetime Pin metrics. Total comments and total reactions are only available with lifetime Pin metrics. If Pin was created before &lt;code&gt;2023-03-20&lt;/code&gt; lifetime metrics will only be available for Video and Idea Pin formats. Lifetime metrics are available for all Pin formats since then. (optional, default to false)
     * @return ApiResponse&lt;BoardsListPins200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Board not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BoardsListPins200Response> boardsListPinsWithHttpInfo(String boardId, String bookmark, Integer pageSize, List<String> creativeTypes, String adAccountId, Boolean pinMetrics) throws ApiException {
        okhttp3.Call localVarCall = boardsListPinsValidateBeforeCall(boardId, bookmark, pageSize, creativeTypes, adAccountId, pinMetrics, null);
        Type localVarReturnType = new TypeToken<BoardsListPins200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Pins on board (asynchronously)
     * Get a list of the Pins on a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. - Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
     * @param boardId Unique identifier of a board. (required)
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @param creativeTypes Pin creative types filter. &lt;/p&gt;&lt;strong&gt;Note:&lt;/strong&gt; SHOP_THE_PIN has been deprecated. Please use COLLECTION instead. (optional)
     * @param adAccountId Unique identifier of an ad account. (optional)
     * @param pinMetrics Specify whether to return 90d and lifetime Pin metrics. Total comments and total reactions are only available with lifetime Pin metrics. If Pin was created before &lt;code&gt;2023-03-20&lt;/code&gt; lifetime metrics will only be available for Video and Idea Pin formats. Lifetime metrics are available for all Pin formats since then. (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Board not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call boardsListPinsAsync(String boardId, String bookmark, Integer pageSize, List<String> creativeTypes, String adAccountId, Boolean pinMetrics, final ApiCallback<BoardsListPins200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = boardsListPinsValidateBeforeCall(boardId, bookmark, pageSize, creativeTypes, adAccountId, pinMetrics, _callback);
        Type localVarReturnType = new TypeToken<BoardsListPins200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for boardsUpdate
     * @param boardId Unique identifier of a board. (required)
     * @param boardUpdate Update a board. (required)
     * @param adAccountId Unique identifier of an ad account. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid board parameters. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized to update the board. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> This request exceeded a rate limit. This can happen if the client exceeds one of the published rate limits or if multiple write operations are applied to an object within a short time window. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call boardsUpdateCall(String boardId, BoardUpdate boardUpdate, String adAccountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = boardUpdate;

        // create path and map variables
        String localVarPath = "/boards/{board_id}"
            .replace("{" + "board_id" + "}", localVarApiClient.escapeString(boardId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (adAccountId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ad_account_id", adAccountId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "pinterest_oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call boardsUpdateValidateBeforeCall(String boardId, BoardUpdate boardUpdate, String adAccountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'boardId' is set
        if (boardId == null) {
            throw new ApiException("Missing the required parameter 'boardId' when calling boardsUpdate(Async)");
        }

        // verify the required parameter 'boardUpdate' is set
        if (boardUpdate == null) {
            throw new ApiException("Missing the required parameter 'boardUpdate' when calling boardsUpdate(Async)");
        }

        return boardsUpdateCall(boardId, boardUpdate, adAccountId, _callback);

    }

    /**
     * Update board
     * Update a board owned by the \&quot;operating user_account\&quot;. - Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
     * @param boardId Unique identifier of a board. (required)
     * @param boardUpdate Update a board. (required)
     * @param adAccountId Unique identifier of an ad account. (optional)
     * @return Board
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid board parameters. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized to update the board. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> This request exceeded a rate limit. This can happen if the client exceeds one of the published rate limits or if multiple write operations are applied to an object within a short time window. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public Board boardsUpdate(String boardId, BoardUpdate boardUpdate, String adAccountId) throws ApiException {
        ApiResponse<Board> localVarResp = boardsUpdateWithHttpInfo(boardId, boardUpdate, adAccountId);
        return localVarResp.getData();
    }

    /**
     * Update board
     * Update a board owned by the \&quot;operating user_account\&quot;. - Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
     * @param boardId Unique identifier of a board. (required)
     * @param boardUpdate Update a board. (required)
     * @param adAccountId Unique identifier of an ad account. (optional)
     * @return ApiResponse&lt;Board&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid board parameters. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized to update the board. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> This request exceeded a rate limit. This can happen if the client exceeds one of the published rate limits or if multiple write operations are applied to an object within a short time window. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Board> boardsUpdateWithHttpInfo(String boardId, BoardUpdate boardUpdate, String adAccountId) throws ApiException {
        okhttp3.Call localVarCall = boardsUpdateValidateBeforeCall(boardId, boardUpdate, adAccountId, null);
        Type localVarReturnType = new TypeToken<Board>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update board (asynchronously)
     * Update a board owned by the \&quot;operating user_account\&quot;. - Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
     * @param boardId Unique identifier of a board. (required)
     * @param boardUpdate Update a board. (required)
     * @param adAccountId Unique identifier of an ad account. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid board parameters. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized to update the board. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> This request exceeded a rate limit. This can happen if the client exceeds one of the published rate limits or if multiple write operations are applied to an object within a short time window. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call boardsUpdateAsync(String boardId, BoardUpdate boardUpdate, String adAccountId, final ApiCallback<Board> _callback) throws ApiException {

        okhttp3.Call localVarCall = boardsUpdateValidateBeforeCall(boardId, boardUpdate, adAccountId, _callback);
        Type localVarReturnType = new TypeToken<Board>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
