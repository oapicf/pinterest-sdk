/*
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.github.oapicf.pinterestsdk.api;

import com.github.oapicf.pinterestsdk.ApiCallback;
import com.github.oapicf.pinterestsdk.ApiClient;
import com.github.oapicf.pinterestsdk.ApiException;
import com.github.oapicf.pinterestsdk.ApiResponse;
import com.github.oapicf.pinterestsdk.Configuration;
import com.github.oapicf.pinterestsdk.Pair;
import com.github.oapicf.pinterestsdk.ProgressRequestBody;
import com.github.oapicf.pinterestsdk.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.github.oapicf.pinterestsdk.model.Error;
import com.github.oapicf.pinterestsdk.model.TargetingTemplateCreate;
import com.github.oapicf.pinterestsdk.model.TargetingTemplateGetResponseData;
import com.github.oapicf.pinterestsdk.model.TargetingTemplateList200Response;
import com.github.oapicf.pinterestsdk.model.TargetingTemplateUpdateRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TargetingTemplateApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TargetingTemplateApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TargetingTemplateApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for targetingTemplateCreate
     * @param adAccountId Unique identifier of an ad account. (required)
     * @param targetingTemplateCreate targeting template creation entity (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ad account id. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call targetingTemplateCreateCall(String adAccountId, TargetingTemplateCreate targetingTemplateCreate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = targetingTemplateCreate;

        // create path and map variables
        String localVarPath = "/ad_accounts/{ad_account_id}/targeting_templates"
            .replace("{" + "ad_account_id" + "}", localVarApiClient.escapeString(adAccountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "pinterest_oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call targetingTemplateCreateValidateBeforeCall(String adAccountId, TargetingTemplateCreate targetingTemplateCreate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'adAccountId' is set
        if (adAccountId == null) {
            throw new ApiException("Missing the required parameter 'adAccountId' when calling targetingTemplateCreate(Async)");
        }

        // verify the required parameter 'targetingTemplateCreate' is set
        if (targetingTemplateCreate == null) {
            throw new ApiException("Missing the required parameter 'targetingTemplateCreate' when calling targetingTemplateCreate(Async)");
        }

        return targetingTemplateCreateCall(adAccountId, targetingTemplateCreate, _callback);

    }

    /**
     * Create targeting templates
     * &lt;p&gt;Targeting templates allow advertisers to save a set of targeting details including audience lists,  keywords &amp; interest, demographics, and placements to use more than once during the campaign creation process.&lt;/p&gt;  &lt;p&gt;Templates can be used to build out basic targeting criteria that you plan to use across campaigns and to reuse   performance targeting from prior campaigns for new campaigns.&lt;/p&gt;
     * @param adAccountId Unique identifier of an ad account. (required)
     * @param targetingTemplateCreate targeting template creation entity (required)
     * @return TargetingTemplateGetResponseData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ad account id. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public TargetingTemplateGetResponseData targetingTemplateCreate(String adAccountId, TargetingTemplateCreate targetingTemplateCreate) throws ApiException {
        ApiResponse<TargetingTemplateGetResponseData> localVarResp = targetingTemplateCreateWithHttpInfo(adAccountId, targetingTemplateCreate);
        return localVarResp.getData();
    }

    /**
     * Create targeting templates
     * &lt;p&gt;Targeting templates allow advertisers to save a set of targeting details including audience lists,  keywords &amp; interest, demographics, and placements to use more than once during the campaign creation process.&lt;/p&gt;  &lt;p&gt;Templates can be used to build out basic targeting criteria that you plan to use across campaigns and to reuse   performance targeting from prior campaigns for new campaigns.&lt;/p&gt;
     * @param adAccountId Unique identifier of an ad account. (required)
     * @param targetingTemplateCreate targeting template creation entity (required)
     * @return ApiResponse&lt;TargetingTemplateGetResponseData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ad account id. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TargetingTemplateGetResponseData> targetingTemplateCreateWithHttpInfo(String adAccountId, TargetingTemplateCreate targetingTemplateCreate) throws ApiException {
        okhttp3.Call localVarCall = targetingTemplateCreateValidateBeforeCall(adAccountId, targetingTemplateCreate, null);
        Type localVarReturnType = new TypeToken<TargetingTemplateGetResponseData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create targeting templates (asynchronously)
     * &lt;p&gt;Targeting templates allow advertisers to save a set of targeting details including audience lists,  keywords &amp; interest, demographics, and placements to use more than once during the campaign creation process.&lt;/p&gt;  &lt;p&gt;Templates can be used to build out basic targeting criteria that you plan to use across campaigns and to reuse   performance targeting from prior campaigns for new campaigns.&lt;/p&gt;
     * @param adAccountId Unique identifier of an ad account. (required)
     * @param targetingTemplateCreate targeting template creation entity (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ad account id. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call targetingTemplateCreateAsync(String adAccountId, TargetingTemplateCreate targetingTemplateCreate, final ApiCallback<TargetingTemplateGetResponseData> _callback) throws ApiException {

        okhttp3.Call localVarCall = targetingTemplateCreateValidateBeforeCall(adAccountId, targetingTemplateCreate, _callback);
        Type localVarReturnType = new TypeToken<TargetingTemplateGetResponseData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for targetingTemplateList
     * @param adAccountId Unique identifier of an ad account. (required)
     * @param order The order in which to sort the items returned: “ASCENDING” or “DESCENDING” by ID. Note that higher-value IDs are associated with more-recently added items. (optional)
     * @param includeSizing Include audience sizing in result or not (optional, default to false)
     * @param searchQuery Search keyword for targeting templates (optional)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ad account id. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call targetingTemplateListCall(String adAccountId, String order, Boolean includeSizing, String searchQuery, Integer pageSize, String bookmark, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ad_accounts/{ad_account_id}/targeting_templates"
            .replace("{" + "ad_account_id" + "}", localVarApiClient.escapeString(adAccountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (includeSizing != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_sizing", includeSizing));
        }

        if (searchQuery != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search_query", searchQuery));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (bookmark != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bookmark", bookmark));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "pinterest_oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call targetingTemplateListValidateBeforeCall(String adAccountId, String order, Boolean includeSizing, String searchQuery, Integer pageSize, String bookmark, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'adAccountId' is set
        if (adAccountId == null) {
            throw new ApiException("Missing the required parameter 'adAccountId' when calling targetingTemplateList(Async)");
        }

        return targetingTemplateListCall(adAccountId, order, includeSizing, searchQuery, pageSize, bookmark, _callback);

    }

    /**
     * List targeting templates
     * Get a list of the targeting templates in the specified &lt;code&gt;ad_account_id&lt;/code&gt;
     * @param adAccountId Unique identifier of an ad account. (required)
     * @param order The order in which to sort the items returned: “ASCENDING” or “DESCENDING” by ID. Note that higher-value IDs are associated with more-recently added items. (optional)
     * @param includeSizing Include audience sizing in result or not (optional, default to false)
     * @param searchQuery Search keyword for targeting templates (optional)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @return TargetingTemplateList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ad account id. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public TargetingTemplateList200Response targetingTemplateList(String adAccountId, String order, Boolean includeSizing, String searchQuery, Integer pageSize, String bookmark) throws ApiException {
        ApiResponse<TargetingTemplateList200Response> localVarResp = targetingTemplateListWithHttpInfo(adAccountId, order, includeSizing, searchQuery, pageSize, bookmark);
        return localVarResp.getData();
    }

    /**
     * List targeting templates
     * Get a list of the targeting templates in the specified &lt;code&gt;ad_account_id&lt;/code&gt;
     * @param adAccountId Unique identifier of an ad account. (required)
     * @param order The order in which to sort the items returned: “ASCENDING” or “DESCENDING” by ID. Note that higher-value IDs are associated with more-recently added items. (optional)
     * @param includeSizing Include audience sizing in result or not (optional, default to false)
     * @param searchQuery Search keyword for targeting templates (optional)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @return ApiResponse&lt;TargetingTemplateList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ad account id. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TargetingTemplateList200Response> targetingTemplateListWithHttpInfo(String adAccountId, String order, Boolean includeSizing, String searchQuery, Integer pageSize, String bookmark) throws ApiException {
        okhttp3.Call localVarCall = targetingTemplateListValidateBeforeCall(adAccountId, order, includeSizing, searchQuery, pageSize, bookmark, null);
        Type localVarReturnType = new TypeToken<TargetingTemplateList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List targeting templates (asynchronously)
     * Get a list of the targeting templates in the specified &lt;code&gt;ad_account_id&lt;/code&gt;
     * @param adAccountId Unique identifier of an ad account. (required)
     * @param order The order in which to sort the items returned: “ASCENDING” or “DESCENDING” by ID. Note that higher-value IDs are associated with more-recently added items. (optional)
     * @param includeSizing Include audience sizing in result or not (optional, default to false)
     * @param searchQuery Search keyword for targeting templates (optional)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ad account id. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call targetingTemplateListAsync(String adAccountId, String order, Boolean includeSizing, String searchQuery, Integer pageSize, String bookmark, final ApiCallback<TargetingTemplateList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = targetingTemplateListValidateBeforeCall(adAccountId, order, includeSizing, searchQuery, pageSize, bookmark, _callback);
        Type localVarReturnType = new TypeToken<TargetingTemplateList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for targetingTemplateUpdate
     * @param adAccountId Unique identifier of an ad account. (required)
     * @param targetingTemplateUpdateRequest Operation type and targeting template ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ad account id. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call targetingTemplateUpdateCall(String adAccountId, TargetingTemplateUpdateRequest targetingTemplateUpdateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = targetingTemplateUpdateRequest;

        // create path and map variables
        String localVarPath = "/ad_accounts/{ad_account_id}/targeting_templates"
            .replace("{" + "ad_account_id" + "}", localVarApiClient.escapeString(adAccountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "pinterest_oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call targetingTemplateUpdateValidateBeforeCall(String adAccountId, TargetingTemplateUpdateRequest targetingTemplateUpdateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'adAccountId' is set
        if (adAccountId == null) {
            throw new ApiException("Missing the required parameter 'adAccountId' when calling targetingTemplateUpdate(Async)");
        }

        // verify the required parameter 'targetingTemplateUpdateRequest' is set
        if (targetingTemplateUpdateRequest == null) {
            throw new ApiException("Missing the required parameter 'targetingTemplateUpdateRequest' when calling targetingTemplateUpdate(Async)");
        }

        return targetingTemplateUpdateCall(adAccountId, targetingTemplateUpdateRequest, _callback);

    }

    /**
     * Update targeting templates
     * &lt;p&gt;Update the targeting template given advertiser ID and targeting template ID&lt;/p&gt;
     * @param adAccountId Unique identifier of an ad account. (required)
     * @param targetingTemplateUpdateRequest Operation type and targeting template ID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ad account id. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public void targetingTemplateUpdate(String adAccountId, TargetingTemplateUpdateRequest targetingTemplateUpdateRequest) throws ApiException {
        targetingTemplateUpdateWithHttpInfo(adAccountId, targetingTemplateUpdateRequest);
    }

    /**
     * Update targeting templates
     * &lt;p&gt;Update the targeting template given advertiser ID and targeting template ID&lt;/p&gt;
     * @param adAccountId Unique identifier of an ad account. (required)
     * @param targetingTemplateUpdateRequest Operation type and targeting template ID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ad account id. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> targetingTemplateUpdateWithHttpInfo(String adAccountId, TargetingTemplateUpdateRequest targetingTemplateUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = targetingTemplateUpdateValidateBeforeCall(adAccountId, targetingTemplateUpdateRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update targeting templates (asynchronously)
     * &lt;p&gt;Update the targeting template given advertiser ID and targeting template ID&lt;/p&gt;
     * @param adAccountId Unique identifier of an ad account. (required)
     * @param targetingTemplateUpdateRequest Operation type and targeting template ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ad account id. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call targetingTemplateUpdateAsync(String adAccountId, TargetingTemplateUpdateRequest targetingTemplateUpdateRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = targetingTemplateUpdateValidateBeforeCall(adAccountId, targetingTemplateUpdateRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
