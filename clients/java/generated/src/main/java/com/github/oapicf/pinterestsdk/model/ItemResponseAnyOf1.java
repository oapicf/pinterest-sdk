/*
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.github.oapicf.pinterestsdk.model;

import java.util.Objects;
import com.github.oapicf.pinterestsdk.model.CatalogsCreativeAssetsItemErrorResponse;
import com.github.oapicf.pinterestsdk.model.CatalogsHotelItemErrorResponse;
import com.github.oapicf.pinterestsdk.model.CatalogsRetailItemErrorResponse;
import com.github.oapicf.pinterestsdk.model.CatalogsType;
import com.github.oapicf.pinterestsdk.model.ItemValidationEvent;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import com.github.oapicf.pinterestsdk.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-05T02:01:32.024245558Z[Etc/UTC]", comments = "Generator version: 7.9.0")
public class ItemResponseAnyOf1 extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(ItemResponseAnyOf1.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!ItemResponseAnyOf1.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'ItemResponseAnyOf1' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<CatalogsRetailItemErrorResponse> adapterCatalogsRetailItemErrorResponse = gson.getDelegateAdapter(this, TypeToken.get(CatalogsRetailItemErrorResponse.class));
            final TypeAdapter<CatalogsHotelItemErrorResponse> adapterCatalogsHotelItemErrorResponse = gson.getDelegateAdapter(this, TypeToken.get(CatalogsHotelItemErrorResponse.class));
            final TypeAdapter<CatalogsCreativeAssetsItemErrorResponse> adapterCatalogsCreativeAssetsItemErrorResponse = gson.getDelegateAdapter(this, TypeToken.get(CatalogsCreativeAssetsItemErrorResponse.class));

            return (TypeAdapter<T>) new TypeAdapter<ItemResponseAnyOf1>() {
                @Override
                public void write(JsonWriter out, ItemResponseAnyOf1 value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `CatalogsRetailItemErrorResponse`
                    if (value.getActualInstance() instanceof CatalogsRetailItemErrorResponse) {
                        JsonElement element = adapterCatalogsRetailItemErrorResponse.toJsonTree((CatalogsRetailItemErrorResponse)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `CatalogsHotelItemErrorResponse`
                    if (value.getActualInstance() instanceof CatalogsHotelItemErrorResponse) {
                        JsonElement element = adapterCatalogsHotelItemErrorResponse.toJsonTree((CatalogsHotelItemErrorResponse)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `CatalogsCreativeAssetsItemErrorResponse`
                    if (value.getActualInstance() instanceof CatalogsCreativeAssetsItemErrorResponse) {
                        JsonElement element = adapterCatalogsCreativeAssetsItemErrorResponse.toJsonTree((CatalogsCreativeAssetsItemErrorResponse)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: CatalogsCreativeAssetsItemErrorResponse, CatalogsHotelItemErrorResponse, CatalogsRetailItemErrorResponse");
                }

                @Override
                public ItemResponseAnyOf1 read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize CatalogsRetailItemErrorResponse
                    try {
                        // validate the JSON object to see if any exception is thrown
                        CatalogsRetailItemErrorResponse.validateJsonElement(jsonElement);
                        actualAdapter = adapterCatalogsRetailItemErrorResponse;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'CatalogsRetailItemErrorResponse'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for CatalogsRetailItemErrorResponse failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'CatalogsRetailItemErrorResponse'", e);
                    }
                    // deserialize CatalogsHotelItemErrorResponse
                    try {
                        // validate the JSON object to see if any exception is thrown
                        CatalogsHotelItemErrorResponse.validateJsonElement(jsonElement);
                        actualAdapter = adapterCatalogsHotelItemErrorResponse;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'CatalogsHotelItemErrorResponse'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for CatalogsHotelItemErrorResponse failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'CatalogsHotelItemErrorResponse'", e);
                    }
                    // deserialize CatalogsCreativeAssetsItemErrorResponse
                    try {
                        // validate the JSON object to see if any exception is thrown
                        CatalogsCreativeAssetsItemErrorResponse.validateJsonElement(jsonElement);
                        actualAdapter = adapterCatalogsCreativeAssetsItemErrorResponse;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'CatalogsCreativeAssetsItemErrorResponse'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for CatalogsCreativeAssetsItemErrorResponse failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'CatalogsCreativeAssetsItemErrorResponse'", e);
                    }

                    if (match == 1) {
                        ItemResponseAnyOf1 ret = new ItemResponseAnyOf1();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for ItemResponseAnyOf1: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public ItemResponseAnyOf1() {
        super("oneOf", Boolean.FALSE);
    }

    public ItemResponseAnyOf1(Object o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("CatalogsRetailItemErrorResponse", CatalogsRetailItemErrorResponse.class);
        schemas.put("CatalogsHotelItemErrorResponse", CatalogsHotelItemErrorResponse.class);
        schemas.put("CatalogsCreativeAssetsItemErrorResponse", CatalogsCreativeAssetsItemErrorResponse.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return ItemResponseAnyOf1.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * CatalogsCreativeAssetsItemErrorResponse, CatalogsHotelItemErrorResponse, CatalogsRetailItemErrorResponse
     *
     * It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof CatalogsRetailItemErrorResponse) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof CatalogsHotelItemErrorResponse) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof CatalogsCreativeAssetsItemErrorResponse) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be CatalogsCreativeAssetsItemErrorResponse, CatalogsHotelItemErrorResponse, CatalogsRetailItemErrorResponse");
    }

    /**
     * Get the actual instance, which can be the following:
     * CatalogsCreativeAssetsItemErrorResponse, CatalogsHotelItemErrorResponse, CatalogsRetailItemErrorResponse
     *
     * @return The actual instance (CatalogsCreativeAssetsItemErrorResponse, CatalogsHotelItemErrorResponse, CatalogsRetailItemErrorResponse)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `CatalogsRetailItemErrorResponse`. If the actual instance is not `CatalogsRetailItemErrorResponse`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CatalogsRetailItemErrorResponse`
     * @throws ClassCastException if the instance is not `CatalogsRetailItemErrorResponse`
     */
    public CatalogsRetailItemErrorResponse getCatalogsRetailItemErrorResponse() throws ClassCastException {
        return (CatalogsRetailItemErrorResponse)super.getActualInstance();
    }
    /**
     * Get the actual instance of `CatalogsHotelItemErrorResponse`. If the actual instance is not `CatalogsHotelItemErrorResponse`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CatalogsHotelItemErrorResponse`
     * @throws ClassCastException if the instance is not `CatalogsHotelItemErrorResponse`
     */
    public CatalogsHotelItemErrorResponse getCatalogsHotelItemErrorResponse() throws ClassCastException {
        return (CatalogsHotelItemErrorResponse)super.getActualInstance();
    }
    /**
     * Get the actual instance of `CatalogsCreativeAssetsItemErrorResponse`. If the actual instance is not `CatalogsCreativeAssetsItemErrorResponse`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CatalogsCreativeAssetsItemErrorResponse`
     * @throws ClassCastException if the instance is not `CatalogsCreativeAssetsItemErrorResponse`
     */
    public CatalogsCreativeAssetsItemErrorResponse getCatalogsCreativeAssetsItemErrorResponse() throws ClassCastException {
        return (CatalogsCreativeAssetsItemErrorResponse)super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to ItemResponseAnyOf1
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate oneOf schemas one by one
        int validCount = 0;
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with CatalogsRetailItemErrorResponse
        try {
            CatalogsRetailItemErrorResponse.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for CatalogsRetailItemErrorResponse failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with CatalogsHotelItemErrorResponse
        try {
            CatalogsHotelItemErrorResponse.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for CatalogsHotelItemErrorResponse failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with CatalogsCreativeAssetsItemErrorResponse
        try {
            CatalogsCreativeAssetsItemErrorResponse.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for CatalogsCreativeAssetsItemErrorResponse failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        if (validCount != 1) {
            throw new IOException(String.format("The JSON string is invalid for ItemResponseAnyOf1 with oneOf schemas: CatalogsCreativeAssetsItemErrorResponse, CatalogsHotelItemErrorResponse, CatalogsRetailItemErrorResponse. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonElement.toString()));
        }
    }

    /**
     * Create an instance of ItemResponseAnyOf1 given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of ItemResponseAnyOf1
     * @throws IOException if the JSON string is invalid with respect to ItemResponseAnyOf1
     */
    public static ItemResponseAnyOf1 fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, ItemResponseAnyOf1.class);
    }

    /**
     * Convert an instance of ItemResponseAnyOf1 to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

