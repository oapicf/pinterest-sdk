/*
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.github.oapicf.pinterestsdk.model;

import java.util.Objects;
import com.github.oapicf.pinterestsdk.model.BrandFilter;
import com.github.oapicf.pinterestsdk.model.CatalogsProductGroupMultipleCountriesCriteria;
import com.github.oapicf.pinterestsdk.model.CatalogsProductGroupMultipleStringCriteria;
import com.github.oapicf.pinterestsdk.model.CatalogsProductGroupPricingCurrencyCriteria;
import com.github.oapicf.pinterestsdk.model.CountryFilter;
import com.github.oapicf.pinterestsdk.model.CustomLabel0Filter;
import com.github.oapicf.pinterestsdk.model.CustomLabel1Filter;
import com.github.oapicf.pinterestsdk.model.CustomLabel2Filter;
import com.github.oapicf.pinterestsdk.model.CustomLabel3Filter;
import com.github.oapicf.pinterestsdk.model.CustomLabel4Filter;
import com.github.oapicf.pinterestsdk.model.HotelIdFilter;
import com.github.oapicf.pinterestsdk.model.PriceFilter;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import com.github.oapicf.pinterestsdk.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-05T02:01:32.024245558Z[Etc/UTC]", comments = "Generator version: 7.9.0")
public class CatalogsHotelProductGroupFilterKeys extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(CatalogsHotelProductGroupFilterKeys.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!CatalogsHotelProductGroupFilterKeys.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'CatalogsHotelProductGroupFilterKeys' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<PriceFilter> adapterPriceFilter = gson.getDelegateAdapter(this, TypeToken.get(PriceFilter.class));
            final TypeAdapter<HotelIdFilter> adapterHotelIdFilter = gson.getDelegateAdapter(this, TypeToken.get(HotelIdFilter.class));
            final TypeAdapter<BrandFilter> adapterBrandFilter = gson.getDelegateAdapter(this, TypeToken.get(BrandFilter.class));
            final TypeAdapter<CustomLabel0Filter> adapterCustomLabel0Filter = gson.getDelegateAdapter(this, TypeToken.get(CustomLabel0Filter.class));
            final TypeAdapter<CustomLabel1Filter> adapterCustomLabel1Filter = gson.getDelegateAdapter(this, TypeToken.get(CustomLabel1Filter.class));
            final TypeAdapter<CustomLabel2Filter> adapterCustomLabel2Filter = gson.getDelegateAdapter(this, TypeToken.get(CustomLabel2Filter.class));
            final TypeAdapter<CustomLabel3Filter> adapterCustomLabel3Filter = gson.getDelegateAdapter(this, TypeToken.get(CustomLabel3Filter.class));
            final TypeAdapter<CustomLabel4Filter> adapterCustomLabel4Filter = gson.getDelegateAdapter(this, TypeToken.get(CustomLabel4Filter.class));
            final TypeAdapter<CountryFilter> adapterCountryFilter = gson.getDelegateAdapter(this, TypeToken.get(CountryFilter.class));

            return (TypeAdapter<T>) new TypeAdapter<CatalogsHotelProductGroupFilterKeys>() {
                @Override
                public void write(JsonWriter out, CatalogsHotelProductGroupFilterKeys value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `PriceFilter`
                    if (value.getActualInstance() instanceof PriceFilter) {
                        JsonElement element = adapterPriceFilter.toJsonTree((PriceFilter)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `HotelIdFilter`
                    if (value.getActualInstance() instanceof HotelIdFilter) {
                        JsonElement element = adapterHotelIdFilter.toJsonTree((HotelIdFilter)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `BrandFilter`
                    if (value.getActualInstance() instanceof BrandFilter) {
                        JsonElement element = adapterBrandFilter.toJsonTree((BrandFilter)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `CustomLabel0Filter`
                    if (value.getActualInstance() instanceof CustomLabel0Filter) {
                        JsonElement element = adapterCustomLabel0Filter.toJsonTree((CustomLabel0Filter)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `CustomLabel1Filter`
                    if (value.getActualInstance() instanceof CustomLabel1Filter) {
                        JsonElement element = adapterCustomLabel1Filter.toJsonTree((CustomLabel1Filter)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `CustomLabel2Filter`
                    if (value.getActualInstance() instanceof CustomLabel2Filter) {
                        JsonElement element = adapterCustomLabel2Filter.toJsonTree((CustomLabel2Filter)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `CustomLabel3Filter`
                    if (value.getActualInstance() instanceof CustomLabel3Filter) {
                        JsonElement element = adapterCustomLabel3Filter.toJsonTree((CustomLabel3Filter)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `CustomLabel4Filter`
                    if (value.getActualInstance() instanceof CustomLabel4Filter) {
                        JsonElement element = adapterCustomLabel4Filter.toJsonTree((CustomLabel4Filter)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `CountryFilter`
                    if (value.getActualInstance() instanceof CountryFilter) {
                        JsonElement element = adapterCountryFilter.toJsonTree((CountryFilter)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match anyOf schemas: BrandFilter, CountryFilter, CustomLabel0Filter, CustomLabel1Filter, CustomLabel2Filter, CustomLabel3Filter, CustomLabel4Filter, HotelIdFilter, PriceFilter");
                }

                @Override
                public CatalogsHotelProductGroupFilterKeys read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize PriceFilter
                    try {
                        // validate the JSON object to see if any exception is thrown
                        PriceFilter.validateJsonElement(jsonElement);
                        actualAdapter = adapterPriceFilter;
                        CatalogsHotelProductGroupFilterKeys ret = new CatalogsHotelProductGroupFilterKeys();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for PriceFilter failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'PriceFilter'", e);
                    }
                    // deserialize HotelIdFilter
                    try {
                        // validate the JSON object to see if any exception is thrown
                        HotelIdFilter.validateJsonElement(jsonElement);
                        actualAdapter = adapterHotelIdFilter;
                        CatalogsHotelProductGroupFilterKeys ret = new CatalogsHotelProductGroupFilterKeys();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for HotelIdFilter failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'HotelIdFilter'", e);
                    }
                    // deserialize BrandFilter
                    try {
                        // validate the JSON object to see if any exception is thrown
                        BrandFilter.validateJsonElement(jsonElement);
                        actualAdapter = adapterBrandFilter;
                        CatalogsHotelProductGroupFilterKeys ret = new CatalogsHotelProductGroupFilterKeys();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for BrandFilter failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'BrandFilter'", e);
                    }
                    // deserialize CustomLabel0Filter
                    try {
                        // validate the JSON object to see if any exception is thrown
                        CustomLabel0Filter.validateJsonElement(jsonElement);
                        actualAdapter = adapterCustomLabel0Filter;
                        CatalogsHotelProductGroupFilterKeys ret = new CatalogsHotelProductGroupFilterKeys();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for CustomLabel0Filter failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'CustomLabel0Filter'", e);
                    }
                    // deserialize CustomLabel1Filter
                    try {
                        // validate the JSON object to see if any exception is thrown
                        CustomLabel1Filter.validateJsonElement(jsonElement);
                        actualAdapter = adapterCustomLabel1Filter;
                        CatalogsHotelProductGroupFilterKeys ret = new CatalogsHotelProductGroupFilterKeys();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for CustomLabel1Filter failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'CustomLabel1Filter'", e);
                    }
                    // deserialize CustomLabel2Filter
                    try {
                        // validate the JSON object to see if any exception is thrown
                        CustomLabel2Filter.validateJsonElement(jsonElement);
                        actualAdapter = adapterCustomLabel2Filter;
                        CatalogsHotelProductGroupFilterKeys ret = new CatalogsHotelProductGroupFilterKeys();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for CustomLabel2Filter failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'CustomLabel2Filter'", e);
                    }
                    // deserialize CustomLabel3Filter
                    try {
                        // validate the JSON object to see if any exception is thrown
                        CustomLabel3Filter.validateJsonElement(jsonElement);
                        actualAdapter = adapterCustomLabel3Filter;
                        CatalogsHotelProductGroupFilterKeys ret = new CatalogsHotelProductGroupFilterKeys();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for CustomLabel3Filter failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'CustomLabel3Filter'", e);
                    }
                    // deserialize CustomLabel4Filter
                    try {
                        // validate the JSON object to see if any exception is thrown
                        CustomLabel4Filter.validateJsonElement(jsonElement);
                        actualAdapter = adapterCustomLabel4Filter;
                        CatalogsHotelProductGroupFilterKeys ret = new CatalogsHotelProductGroupFilterKeys();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for CustomLabel4Filter failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'CustomLabel4Filter'", e);
                    }
                    // deserialize CountryFilter
                    try {
                        // validate the JSON object to see if any exception is thrown
                        CountryFilter.validateJsonElement(jsonElement);
                        actualAdapter = adapterCountryFilter;
                        CatalogsHotelProductGroupFilterKeys ret = new CatalogsHotelProductGroupFilterKeys();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for CountryFilter failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'CountryFilter'", e);
                    }

                    throw new IOException(String.format("Failed deserialization for CatalogsHotelProductGroupFilterKeys: no class matches result, expected at least 1. Detailed failure message for anyOf schemas: %s. JSON: %s", errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in anyOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public CatalogsHotelProductGroupFilterKeys() {
        super("anyOf", Boolean.FALSE);
    }

    public CatalogsHotelProductGroupFilterKeys(Object o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("PriceFilter", PriceFilter.class);
        schemas.put("HotelIdFilter", HotelIdFilter.class);
        schemas.put("BrandFilter", BrandFilter.class);
        schemas.put("CustomLabel0Filter", CustomLabel0Filter.class);
        schemas.put("CustomLabel1Filter", CustomLabel1Filter.class);
        schemas.put("CustomLabel2Filter", CustomLabel2Filter.class);
        schemas.put("CustomLabel3Filter", CustomLabel3Filter.class);
        schemas.put("CustomLabel4Filter", CustomLabel4Filter.class);
        schemas.put("CountryFilter", CountryFilter.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return CatalogsHotelProductGroupFilterKeys.schemas;
    }

    /**
     * Set the instance that matches the anyOf child schema, check
     * the instance parameter is valid against the anyOf child schemas:
     * BrandFilter, CountryFilter, CustomLabel0Filter, CustomLabel1Filter, CustomLabel2Filter, CustomLabel3Filter, CustomLabel4Filter, HotelIdFilter, PriceFilter
     *
     * It could be an instance of the 'anyOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof PriceFilter) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof HotelIdFilter) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof BrandFilter) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof CustomLabel0Filter) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof CustomLabel1Filter) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof CustomLabel2Filter) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof CustomLabel3Filter) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof CustomLabel4Filter) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof CountryFilter) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be BrandFilter, CountryFilter, CustomLabel0Filter, CustomLabel1Filter, CustomLabel2Filter, CustomLabel3Filter, CustomLabel4Filter, HotelIdFilter, PriceFilter");
    }

    /**
     * Get the actual instance, which can be the following:
     * BrandFilter, CountryFilter, CustomLabel0Filter, CustomLabel1Filter, CustomLabel2Filter, CustomLabel3Filter, CustomLabel4Filter, HotelIdFilter, PriceFilter
     *
     * @return The actual instance (BrandFilter, CountryFilter, CustomLabel0Filter, CustomLabel1Filter, CustomLabel2Filter, CustomLabel3Filter, CustomLabel4Filter, HotelIdFilter, PriceFilter)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `PriceFilter`. If the actual instance is not `PriceFilter`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PriceFilter`
     * @throws ClassCastException if the instance is not `PriceFilter`
     */
    public PriceFilter getPriceFilter() throws ClassCastException {
        return (PriceFilter)super.getActualInstance();
    }
    /**
     * Get the actual instance of `HotelIdFilter`. If the actual instance is not `HotelIdFilter`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `HotelIdFilter`
     * @throws ClassCastException if the instance is not `HotelIdFilter`
     */
    public HotelIdFilter getHotelIdFilter() throws ClassCastException {
        return (HotelIdFilter)super.getActualInstance();
    }
    /**
     * Get the actual instance of `BrandFilter`. If the actual instance is not `BrandFilter`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `BrandFilter`
     * @throws ClassCastException if the instance is not `BrandFilter`
     */
    public BrandFilter getBrandFilter() throws ClassCastException {
        return (BrandFilter)super.getActualInstance();
    }
    /**
     * Get the actual instance of `CustomLabel0Filter`. If the actual instance is not `CustomLabel0Filter`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CustomLabel0Filter`
     * @throws ClassCastException if the instance is not `CustomLabel0Filter`
     */
    public CustomLabel0Filter getCustomLabel0Filter() throws ClassCastException {
        return (CustomLabel0Filter)super.getActualInstance();
    }
    /**
     * Get the actual instance of `CustomLabel1Filter`. If the actual instance is not `CustomLabel1Filter`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CustomLabel1Filter`
     * @throws ClassCastException if the instance is not `CustomLabel1Filter`
     */
    public CustomLabel1Filter getCustomLabel1Filter() throws ClassCastException {
        return (CustomLabel1Filter)super.getActualInstance();
    }
    /**
     * Get the actual instance of `CustomLabel2Filter`. If the actual instance is not `CustomLabel2Filter`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CustomLabel2Filter`
     * @throws ClassCastException if the instance is not `CustomLabel2Filter`
     */
    public CustomLabel2Filter getCustomLabel2Filter() throws ClassCastException {
        return (CustomLabel2Filter)super.getActualInstance();
    }
    /**
     * Get the actual instance of `CustomLabel3Filter`. If the actual instance is not `CustomLabel3Filter`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CustomLabel3Filter`
     * @throws ClassCastException if the instance is not `CustomLabel3Filter`
     */
    public CustomLabel3Filter getCustomLabel3Filter() throws ClassCastException {
        return (CustomLabel3Filter)super.getActualInstance();
    }
    /**
     * Get the actual instance of `CustomLabel4Filter`. If the actual instance is not `CustomLabel4Filter`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CustomLabel4Filter`
     * @throws ClassCastException if the instance is not `CustomLabel4Filter`
     */
    public CustomLabel4Filter getCustomLabel4Filter() throws ClassCastException {
        return (CustomLabel4Filter)super.getActualInstance();
    }
    /**
     * Get the actual instance of `CountryFilter`. If the actual instance is not `CountryFilter`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CountryFilter`
     * @throws ClassCastException if the instance is not `CountryFilter`
     */
    public CountryFilter getCountryFilter() throws ClassCastException {
        return (CountryFilter)super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to CatalogsHotelProductGroupFilterKeys
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate anyOf schemas one by one
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with PriceFilter
        try {
            PriceFilter.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for PriceFilter failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with HotelIdFilter
        try {
            HotelIdFilter.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for HotelIdFilter failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with BrandFilter
        try {
            BrandFilter.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for BrandFilter failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with CustomLabel0Filter
        try {
            CustomLabel0Filter.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for CustomLabel0Filter failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with CustomLabel1Filter
        try {
            CustomLabel1Filter.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for CustomLabel1Filter failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with CustomLabel2Filter
        try {
            CustomLabel2Filter.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for CustomLabel2Filter failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with CustomLabel3Filter
        try {
            CustomLabel3Filter.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for CustomLabel3Filter failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with CustomLabel4Filter
        try {
            CustomLabel4Filter.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for CustomLabel4Filter failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with CountryFilter
        try {
            CountryFilter.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for CountryFilter failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        throw new IOException(String.format("The JSON string is invalid for CatalogsHotelProductGroupFilterKeys with anyOf schemas: BrandFilter, CountryFilter, CustomLabel0Filter, CustomLabel1Filter, CustomLabel2Filter, CustomLabel3Filter, CustomLabel4Filter, HotelIdFilter, PriceFilter. no class match the result, expected at least 1. Detailed failure message for anyOf schemas: %s. JSON: %s", errorMessages, jsonElement.toString()));
    }

    /**
     * Create an instance of CatalogsHotelProductGroupFilterKeys given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of CatalogsHotelProductGroupFilterKeys
     * @throws IOException if the JSON string is invalid with respect to CatalogsHotelProductGroupFilterKeys
     */
    public static CatalogsHotelProductGroupFilterKeys fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, CatalogsHotelProductGroupFilterKeys.class);
    }

    /**
     * Convert an instance of CatalogsHotelProductGroupFilterKeys to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

