/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITargetingTemplateUpdateRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITargetingTemplateUpdateRequest::OAITargetingTemplateUpdateRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITargetingTemplateUpdateRequest::OAITargetingTemplateUpdateRequest() {
    this->initializeModel();
}

OAITargetingTemplateUpdateRequest::~OAITargetingTemplateUpdateRequest() {}

void OAITargetingTemplateUpdateRequest::initializeModel() {

    m_operation_type_isSet = false;
    m_operation_type_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;
}

void OAITargetingTemplateUpdateRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITargetingTemplateUpdateRequest::fromJsonObject(QJsonObject json) {

    m_operation_type_isValid = ::OpenAPI::fromJsonValue(m_operation_type, json[QString("operation_type")]);
    m_operation_type_isSet = !json[QString("operation_type")].isNull() && m_operation_type_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;
}

QString OAITargetingTemplateUpdateRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITargetingTemplateUpdateRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_operation_type_isSet) {
        obj.insert(QString("operation_type"), ::OpenAPI::toJsonValue(m_operation_type));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    return obj;
}

QString OAITargetingTemplateUpdateRequest::getOperationType() const {
    return m_operation_type;
}
void OAITargetingTemplateUpdateRequest::setOperationType(const QString &operation_type) {
    m_operation_type = operation_type;
    m_operation_type_isSet = true;
}

bool OAITargetingTemplateUpdateRequest::is_operation_type_Set() const{
    return m_operation_type_isSet;
}

bool OAITargetingTemplateUpdateRequest::is_operation_type_Valid() const{
    return m_operation_type_isValid;
}

QString OAITargetingTemplateUpdateRequest::getId() const {
    return m_id;
}
void OAITargetingTemplateUpdateRequest::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITargetingTemplateUpdateRequest::is_id_Set() const{
    return m_id_isSet;
}

bool OAITargetingTemplateUpdateRequest::is_id_Valid() const{
    return m_id_isValid;
}

bool OAITargetingTemplateUpdateRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_operation_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITargetingTemplateUpdateRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_operation_type_isValid && m_id_isValid && true;
}

} // namespace OpenAPI
