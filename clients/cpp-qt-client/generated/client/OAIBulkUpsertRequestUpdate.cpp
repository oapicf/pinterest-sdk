/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBulkUpsertRequestUpdate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBulkUpsertRequestUpdate::OAIBulkUpsertRequestUpdate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBulkUpsertRequestUpdate::OAIBulkUpsertRequestUpdate() {
    this->initializeModel();
}

OAIBulkUpsertRequestUpdate::~OAIBulkUpsertRequestUpdate() {}

void OAIBulkUpsertRequestUpdate::initializeModel() {

    m_campaigns_isSet = false;
    m_campaigns_isValid = false;

    m_ad_groups_isSet = false;
    m_ad_groups_isValid = false;

    m_ads_isSet = false;
    m_ads_isValid = false;

    m_product_groups_isSet = false;
    m_product_groups_isValid = false;

    m_keywords_isSet = false;
    m_keywords_isValid = false;
}

void OAIBulkUpsertRequestUpdate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBulkUpsertRequestUpdate::fromJsonObject(QJsonObject json) {

    m_campaigns_isValid = ::OpenAPI::fromJsonValue(m_campaigns, json[QString("campaigns")]);
    m_campaigns_isSet = !json[QString("campaigns")].isNull() && m_campaigns_isValid;

    m_ad_groups_isValid = ::OpenAPI::fromJsonValue(m_ad_groups, json[QString("ad_groups")]);
    m_ad_groups_isSet = !json[QString("ad_groups")].isNull() && m_ad_groups_isValid;

    m_ads_isValid = ::OpenAPI::fromJsonValue(m_ads, json[QString("ads")]);
    m_ads_isSet = !json[QString("ads")].isNull() && m_ads_isValid;

    m_product_groups_isValid = ::OpenAPI::fromJsonValue(m_product_groups, json[QString("product_groups")]);
    m_product_groups_isSet = !json[QString("product_groups")].isNull() && m_product_groups_isValid;

    m_keywords_isValid = ::OpenAPI::fromJsonValue(m_keywords, json[QString("keywords")]);
    m_keywords_isSet = !json[QString("keywords")].isNull() && m_keywords_isValid;
}

QString OAIBulkUpsertRequestUpdate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBulkUpsertRequestUpdate::asJsonObject() const {
    QJsonObject obj;
    if (m_campaigns.size() > 0) {
        obj.insert(QString("campaigns"), ::OpenAPI::toJsonValue(m_campaigns));
    }
    if (m_ad_groups.size() > 0) {
        obj.insert(QString("ad_groups"), ::OpenAPI::toJsonValue(m_ad_groups));
    }
    if (m_ads.size() > 0) {
        obj.insert(QString("ads"), ::OpenAPI::toJsonValue(m_ads));
    }
    if (m_product_groups.size() > 0) {
        obj.insert(QString("product_groups"), ::OpenAPI::toJsonValue(m_product_groups));
    }
    if (m_keywords.size() > 0) {
        obj.insert(QString("keywords"), ::OpenAPI::toJsonValue(m_keywords));
    }
    return obj;
}

QList<OAICampaignUpdateRequest> OAIBulkUpsertRequestUpdate::getCampaigns() const {
    return m_campaigns;
}
void OAIBulkUpsertRequestUpdate::setCampaigns(const QList<OAICampaignUpdateRequest> &campaigns) {
    m_campaigns = campaigns;
    m_campaigns_isSet = true;
}

bool OAIBulkUpsertRequestUpdate::is_campaigns_Set() const{
    return m_campaigns_isSet;
}

bool OAIBulkUpsertRequestUpdate::is_campaigns_Valid() const{
    return m_campaigns_isValid;
}

QList<OAIAdGroupUpdateRequest> OAIBulkUpsertRequestUpdate::getAdGroups() const {
    return m_ad_groups;
}
void OAIBulkUpsertRequestUpdate::setAdGroups(const QList<OAIAdGroupUpdateRequest> &ad_groups) {
    m_ad_groups = ad_groups;
    m_ad_groups_isSet = true;
}

bool OAIBulkUpsertRequestUpdate::is_ad_groups_Set() const{
    return m_ad_groups_isSet;
}

bool OAIBulkUpsertRequestUpdate::is_ad_groups_Valid() const{
    return m_ad_groups_isValid;
}

QList<OAIAdUpdateRequest> OAIBulkUpsertRequestUpdate::getAds() const {
    return m_ads;
}
void OAIBulkUpsertRequestUpdate::setAds(const QList<OAIAdUpdateRequest> &ads) {
    m_ads = ads;
    m_ads_isSet = true;
}

bool OAIBulkUpsertRequestUpdate::is_ads_Set() const{
    return m_ads_isSet;
}

bool OAIBulkUpsertRequestUpdate::is_ads_Valid() const{
    return m_ads_isValid;
}

QList<OAIProductGroupPromotionUpdateRequest> OAIBulkUpsertRequestUpdate::getProductGroups() const {
    return m_product_groups;
}
void OAIBulkUpsertRequestUpdate::setProductGroups(const QList<OAIProductGroupPromotionUpdateRequest> &product_groups) {
    m_product_groups = product_groups;
    m_product_groups_isSet = true;
}

bool OAIBulkUpsertRequestUpdate::is_product_groups_Set() const{
    return m_product_groups_isSet;
}

bool OAIBulkUpsertRequestUpdate::is_product_groups_Valid() const{
    return m_product_groups_isValid;
}

QList<OAIKeywordUpdate> OAIBulkUpsertRequestUpdate::getKeywords() const {
    return m_keywords;
}
void OAIBulkUpsertRequestUpdate::setKeywords(const QList<OAIKeywordUpdate> &keywords) {
    m_keywords = keywords;
    m_keywords_isSet = true;
}

bool OAIBulkUpsertRequestUpdate::is_keywords_Set() const{
    return m_keywords_isSet;
}

bool OAIBulkUpsertRequestUpdate::is_keywords_Valid() const{
    return m_keywords_isValid;
}

bool OAIBulkUpsertRequestUpdate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_campaigns.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_ad_groups.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_ads.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_groups.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_keywords.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBulkUpsertRequestUpdate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
