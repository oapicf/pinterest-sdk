/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMMMReportingColumn.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMMMReportingColumn::OAIMMMReportingColumn(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMMMReportingColumn::OAIMMMReportingColumn() {
    this->initializeModel();
}

OAIMMMReportingColumn::~OAIMMMReportingColumn() {}

void OAIMMMReportingColumn::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIMMMReportingColumn::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIMMMReportingColumn::fromJson(QString jsonString) {
    
    if ( jsonString.compare("SPEND_IN_DOLLAR", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMMMReportingColumn::SPEND_IN_DOLLAR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SPEND_IN_MICRO_DOLLAR", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMMMReportingColumn::SPEND_IN_MICRO_DOLLAR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ECPC_IN_DOLLAR", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMMMReportingColumn::ECPC_IN_DOLLAR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ECTR", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMMMReportingColumn::ECTR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CAMPAIGN_NAME", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMMMReportingColumn::CAMPAIGN_NAME;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TOTAL_ENGAGEMENT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMMMReportingColumn::TOTAL_ENGAGEMENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EENGAGEMENT_RATE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMMMReportingColumn::EENGAGEMENT_RATE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ECPM_IN_DOLLAR", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMMMReportingColumn::ECPM_IN_DOLLAR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CAMPAIGN_ID", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMMMReportingColumn::CAMPAIGN_ID;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ADVERTISER_ID", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMMMReportingColumn::ADVERTISER_ID;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AD_GROUP_ID", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMMMReportingColumn::AD_GROUP_ID;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AD_GROUP_NAME", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMMMReportingColumn::AD_GROUP_NAME;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CLICKTHROUGH_1", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMMMReportingColumn::CLICKTHROUGH_1;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("IMPRESSION_1", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMMMReportingColumn::IMPRESSION_1;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CLICKTHROUGH_2", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMMMReportingColumn::CLICKTHROUGH_2;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("IMPRESSION_2", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMMMReportingColumn::IMPRESSION_2;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TOTAL_CLICKTHROUGH", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMMMReportingColumn::TOTAL_CLICKTHROUGH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TOTAL_IMPRESSION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMMMReportingColumn::TOTAL_IMPRESSION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ADVERTISER_NAME", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMMMReportingColumn::ADVERTISER_NAME;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SPEND_ORDER_LINE_PAID_TYPE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMMMReportingColumn::SPEND_ORDER_LINE_PAID_TYPE;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIMMMReportingColumn::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIMMMReportingColumn::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIMMMReportingColumn::SPEND_IN_DOLLAR:
            val = "SPEND_IN_DOLLAR";
            break;
        case eOAIMMMReportingColumn::SPEND_IN_MICRO_DOLLAR:
            val = "SPEND_IN_MICRO_DOLLAR";
            break;
        case eOAIMMMReportingColumn::ECPC_IN_DOLLAR:
            val = "ECPC_IN_DOLLAR";
            break;
        case eOAIMMMReportingColumn::ECTR:
            val = "ECTR";
            break;
        case eOAIMMMReportingColumn::CAMPAIGN_NAME:
            val = "CAMPAIGN_NAME";
            break;
        case eOAIMMMReportingColumn::TOTAL_ENGAGEMENT:
            val = "TOTAL_ENGAGEMENT";
            break;
        case eOAIMMMReportingColumn::EENGAGEMENT_RATE:
            val = "EENGAGEMENT_RATE";
            break;
        case eOAIMMMReportingColumn::ECPM_IN_DOLLAR:
            val = "ECPM_IN_DOLLAR";
            break;
        case eOAIMMMReportingColumn::CAMPAIGN_ID:
            val = "CAMPAIGN_ID";
            break;
        case eOAIMMMReportingColumn::ADVERTISER_ID:
            val = "ADVERTISER_ID";
            break;
        case eOAIMMMReportingColumn::AD_GROUP_ID:
            val = "AD_GROUP_ID";
            break;
        case eOAIMMMReportingColumn::AD_GROUP_NAME:
            val = "AD_GROUP_NAME";
            break;
        case eOAIMMMReportingColumn::CLICKTHROUGH_1:
            val = "CLICKTHROUGH_1";
            break;
        case eOAIMMMReportingColumn::IMPRESSION_1:
            val = "IMPRESSION_1";
            break;
        case eOAIMMMReportingColumn::CLICKTHROUGH_2:
            val = "CLICKTHROUGH_2";
            break;
        case eOAIMMMReportingColumn::IMPRESSION_2:
            val = "IMPRESSION_2";
            break;
        case eOAIMMMReportingColumn::TOTAL_CLICKTHROUGH:
            val = "TOTAL_CLICKTHROUGH";
            break;
        case eOAIMMMReportingColumn::TOTAL_IMPRESSION:
            val = "TOTAL_IMPRESSION";
            break;
        case eOAIMMMReportingColumn::ADVERTISER_NAME:
            val = "ADVERTISER_NAME";
            break;
        case eOAIMMMReportingColumn::SPEND_ORDER_LINE_PAID_TYPE:
            val = "SPEND_ORDER_LINE_PAID_TYPE";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIMMMReportingColumn::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIMMMReportingColumn::eOAIMMMReportingColumn OAIMMMReportingColumn::getValue() const {
    return m_value;
}

void OAIMMMReportingColumn::setValue(const OAIMMMReportingColumn::eOAIMMMReportingColumn& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIMMMReportingColumn::isSet() const {
    
    return m_value_isSet;
}

bool OAIMMMReportingColumn::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
