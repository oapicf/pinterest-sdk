/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRelatedTerms_related_terms_list_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRelatedTerms_related_terms_list_inner::OAIRelatedTerms_related_terms_list_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRelatedTerms_related_terms_list_inner::OAIRelatedTerms_related_terms_list_inner() {
    this->initializeModel();
}

OAIRelatedTerms_related_terms_list_inner::~OAIRelatedTerms_related_terms_list_inner() {}

void OAIRelatedTerms_related_terms_list_inner::initializeModel() {

    m_term_isSet = false;
    m_term_isValid = false;

    m_related_terms_isSet = false;
    m_related_terms_isValid = false;
}

void OAIRelatedTerms_related_terms_list_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRelatedTerms_related_terms_list_inner::fromJsonObject(QJsonObject json) {

    m_term_isValid = ::OpenAPI::fromJsonValue(m_term, json[QString("term")]);
    m_term_isSet = !json[QString("term")].isNull() && m_term_isValid;

    m_related_terms_isValid = ::OpenAPI::fromJsonValue(m_related_terms, json[QString("related_terms")]);
    m_related_terms_isSet = !json[QString("related_terms")].isNull() && m_related_terms_isValid;
}

QString OAIRelatedTerms_related_terms_list_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRelatedTerms_related_terms_list_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_term_isSet) {
        obj.insert(QString("term"), ::OpenAPI::toJsonValue(m_term));
    }
    if (m_related_terms.size() > 0) {
        obj.insert(QString("related_terms"), ::OpenAPI::toJsonValue(m_related_terms));
    }
    return obj;
}

QString OAIRelatedTerms_related_terms_list_inner::getTerm() const {
    return m_term;
}
void OAIRelatedTerms_related_terms_list_inner::setTerm(const QString &term) {
    m_term = term;
    m_term_isSet = true;
}

bool OAIRelatedTerms_related_terms_list_inner::is_term_Set() const{
    return m_term_isSet;
}

bool OAIRelatedTerms_related_terms_list_inner::is_term_Valid() const{
    return m_term_isValid;
}

QList<QString> OAIRelatedTerms_related_terms_list_inner::getRelatedTerms() const {
    return m_related_terms;
}
void OAIRelatedTerms_related_terms_list_inner::setRelatedTerms(const QList<QString> &related_terms) {
    m_related_terms = related_terms;
    m_related_terms_isSet = true;
}

bool OAIRelatedTerms_related_terms_list_inner::is_related_terms_Set() const{
    return m_related_terms_isSet;
}

bool OAIRelatedTerms_related_terms_list_inner::is_related_terms_Valid() const{
    return m_related_terms_isValid;
}

bool OAIRelatedTerms_related_terms_list_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_term_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_related_terms.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRelatedTerms_related_terms_list_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
