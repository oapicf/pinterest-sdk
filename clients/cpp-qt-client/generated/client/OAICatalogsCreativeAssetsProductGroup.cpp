/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICatalogsCreativeAssetsProductGroup.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICatalogsCreativeAssetsProductGroup::OAICatalogsCreativeAssetsProductGroup(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICatalogsCreativeAssetsProductGroup::OAICatalogsCreativeAssetsProductGroup() {
    this->initializeModel();
}

OAICatalogsCreativeAssetsProductGroup::~OAICatalogsCreativeAssetsProductGroup() {}

void OAICatalogsCreativeAssetsProductGroup::initializeModel() {

    m_catalog_type_isSet = false;
    m_catalog_type_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_filters_isSet = false;
    m_filters_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_catalog_id_isSet = false;
    m_catalog_id_isValid = false;
}

void OAICatalogsCreativeAssetsProductGroup::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICatalogsCreativeAssetsProductGroup::fromJsonObject(QJsonObject json) {

    m_catalog_type_isValid = ::OpenAPI::fromJsonValue(m_catalog_type, json[QString("catalog_type")]);
    m_catalog_type_isSet = !json[QString("catalog_type")].isNull() && m_catalog_type_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_filters_isValid = ::OpenAPI::fromJsonValue(m_filters, json[QString("filters")]);
    m_filters_isSet = !json[QString("filters")].isNull() && m_filters_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_catalog_id_isValid = ::OpenAPI::fromJsonValue(m_catalog_id, json[QString("catalog_id")]);
    m_catalog_id_isSet = !json[QString("catalog_id")].isNull() && m_catalog_id_isValid;
}

QString OAICatalogsCreativeAssetsProductGroup::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICatalogsCreativeAssetsProductGroup::asJsonObject() const {
    QJsonObject obj;
    if (m_catalog_type_isSet) {
        obj.insert(QString("catalog_type"), ::OpenAPI::toJsonValue(m_catalog_type));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_filters.isSet()) {
        obj.insert(QString("filters"), ::OpenAPI::toJsonValue(m_filters));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_catalog_id_isSet) {
        obj.insert(QString("catalog_id"), ::OpenAPI::toJsonValue(m_catalog_id));
    }
    return obj;
}

QString OAICatalogsCreativeAssetsProductGroup::getCatalogType() const {
    return m_catalog_type;
}
void OAICatalogsCreativeAssetsProductGroup::setCatalogType(const QString &catalog_type) {
    m_catalog_type = catalog_type;
    m_catalog_type_isSet = true;
}

bool OAICatalogsCreativeAssetsProductGroup::is_catalog_type_Set() const{
    return m_catalog_type_isSet;
}

bool OAICatalogsCreativeAssetsProductGroup::is_catalog_type_Valid() const{
    return m_catalog_type_isValid;
}

QString OAICatalogsCreativeAssetsProductGroup::getId() const {
    return m_id;
}
void OAICatalogsCreativeAssetsProductGroup::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICatalogsCreativeAssetsProductGroup::is_id_Set() const{
    return m_id_isSet;
}

bool OAICatalogsCreativeAssetsProductGroup::is_id_Valid() const{
    return m_id_isValid;
}

QString OAICatalogsCreativeAssetsProductGroup::getName() const {
    return m_name;
}
void OAICatalogsCreativeAssetsProductGroup::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICatalogsCreativeAssetsProductGroup::is_name_Set() const{
    return m_name_isSet;
}

bool OAICatalogsCreativeAssetsProductGroup::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICatalogsCreativeAssetsProductGroup::getDescription() const {
    return m_description;
}
void OAICatalogsCreativeAssetsProductGroup::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICatalogsCreativeAssetsProductGroup::is_description_Set() const{
    return m_description_isSet;
}

bool OAICatalogsCreativeAssetsProductGroup::is_description_Valid() const{
    return m_description_isValid;
}

OAICatalogsCreativeAssetsProductGroupFilters OAICatalogsCreativeAssetsProductGroup::getFilters() const {
    return m_filters;
}
void OAICatalogsCreativeAssetsProductGroup::setFilters(const OAICatalogsCreativeAssetsProductGroupFilters &filters) {
    m_filters = filters;
    m_filters_isSet = true;
}

bool OAICatalogsCreativeAssetsProductGroup::is_filters_Set() const{
    return m_filters_isSet;
}

bool OAICatalogsCreativeAssetsProductGroup::is_filters_Valid() const{
    return m_filters_isValid;
}

qint32 OAICatalogsCreativeAssetsProductGroup::getCreatedAt() const {
    return m_created_at;
}
void OAICatalogsCreativeAssetsProductGroup::setCreatedAt(const qint32 &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAICatalogsCreativeAssetsProductGroup::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAICatalogsCreativeAssetsProductGroup::is_created_at_Valid() const{
    return m_created_at_isValid;
}

qint32 OAICatalogsCreativeAssetsProductGroup::getUpdatedAt() const {
    return m_updated_at;
}
void OAICatalogsCreativeAssetsProductGroup::setUpdatedAt(const qint32 &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAICatalogsCreativeAssetsProductGroup::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAICatalogsCreativeAssetsProductGroup::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

QString OAICatalogsCreativeAssetsProductGroup::getCatalogId() const {
    return m_catalog_id;
}
void OAICatalogsCreativeAssetsProductGroup::setCatalogId(const QString &catalog_id) {
    m_catalog_id = catalog_id;
    m_catalog_id_isSet = true;
}

bool OAICatalogsCreativeAssetsProductGroup::is_catalog_id_Set() const{
    return m_catalog_id_isSet;
}

bool OAICatalogsCreativeAssetsProductGroup::is_catalog_id_Valid() const{
    return m_catalog_id_isValid;
}

bool OAICatalogsCreativeAssetsProductGroup::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_catalog_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_catalog_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICatalogsCreativeAssetsProductGroup::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_catalog_type_isValid && m_id_isValid && m_filters_isValid && m_catalog_id_isValid && true;
}

} // namespace OpenAPI
