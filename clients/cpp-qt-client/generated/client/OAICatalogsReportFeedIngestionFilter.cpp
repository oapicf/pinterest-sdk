/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICatalogsReportFeedIngestionFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICatalogsReportFeedIngestionFilter::OAICatalogsReportFeedIngestionFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICatalogsReportFeedIngestionFilter::OAICatalogsReportFeedIngestionFilter() {
    this->initializeModel();
}

OAICatalogsReportFeedIngestionFilter::~OAICatalogsReportFeedIngestionFilter() {}

void OAICatalogsReportFeedIngestionFilter::initializeModel() {

    m_report_type_isSet = false;
    m_report_type_isValid = false;

    m_feed_id_isSet = false;
    m_feed_id_isValid = false;

    m_processing_result_id_isSet = false;
    m_processing_result_id_isValid = false;
}

void OAICatalogsReportFeedIngestionFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICatalogsReportFeedIngestionFilter::fromJsonObject(QJsonObject json) {

    m_report_type_isValid = ::OpenAPI::fromJsonValue(m_report_type, json[QString("report_type")]);
    m_report_type_isSet = !json[QString("report_type")].isNull() && m_report_type_isValid;

    m_feed_id_isValid = ::OpenAPI::fromJsonValue(m_feed_id, json[QString("feed_id")]);
    m_feed_id_isSet = !json[QString("feed_id")].isNull() && m_feed_id_isValid;

    m_processing_result_id_isValid = ::OpenAPI::fromJsonValue(m_processing_result_id, json[QString("processing_result_id")]);
    m_processing_result_id_isSet = !json[QString("processing_result_id")].isNull() && m_processing_result_id_isValid;
}

QString OAICatalogsReportFeedIngestionFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICatalogsReportFeedIngestionFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_report_type_isSet) {
        obj.insert(QString("report_type"), ::OpenAPI::toJsonValue(m_report_type));
    }
    if (m_feed_id_isSet) {
        obj.insert(QString("feed_id"), ::OpenAPI::toJsonValue(m_feed_id));
    }
    if (m_processing_result_id_isSet) {
        obj.insert(QString("processing_result_id"), ::OpenAPI::toJsonValue(m_processing_result_id));
    }
    return obj;
}

QString OAICatalogsReportFeedIngestionFilter::getReportType() const {
    return m_report_type;
}
void OAICatalogsReportFeedIngestionFilter::setReportType(const QString &report_type) {
    m_report_type = report_type;
    m_report_type_isSet = true;
}

bool OAICatalogsReportFeedIngestionFilter::is_report_type_Set() const{
    return m_report_type_isSet;
}

bool OAICatalogsReportFeedIngestionFilter::is_report_type_Valid() const{
    return m_report_type_isValid;
}

QString OAICatalogsReportFeedIngestionFilter::getFeedId() const {
    return m_feed_id;
}
void OAICatalogsReportFeedIngestionFilter::setFeedId(const QString &feed_id) {
    m_feed_id = feed_id;
    m_feed_id_isSet = true;
}

bool OAICatalogsReportFeedIngestionFilter::is_feed_id_Set() const{
    return m_feed_id_isSet;
}

bool OAICatalogsReportFeedIngestionFilter::is_feed_id_Valid() const{
    return m_feed_id_isValid;
}

QString OAICatalogsReportFeedIngestionFilter::getProcessingResultId() const {
    return m_processing_result_id;
}
void OAICatalogsReportFeedIngestionFilter::setProcessingResultId(const QString &processing_result_id) {
    m_processing_result_id = processing_result_id;
    m_processing_result_id_isSet = true;
}

bool OAICatalogsReportFeedIngestionFilter::is_processing_result_id_Set() const{
    return m_processing_result_id_isSet;
}

bool OAICatalogsReportFeedIngestionFilter::is_processing_result_id_Valid() const{
    return m_processing_result_id_isValid;
}

bool OAICatalogsReportFeedIngestionFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_report_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_feed_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_processing_result_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICatalogsReportFeedIngestionFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_report_type_isValid && m_feed_id_isValid && true;
}

} // namespace OpenAPI
