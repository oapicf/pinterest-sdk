/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIBusinessAccessInviteApi_H
#define OAI_OAIBusinessAccessInviteApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAuthRespondInvitesBody.h"
#include "OAICancelInvitesBody.h"
#include "OAICreateAssetAccessRequestBody.h"
#include "OAICreateAssetAccessRequestResponse.h"
#include "OAICreateAssetInvitesRequest.h"
#include "OAICreateInvitesResultsResponseArray.h"
#include "OAICreateMembershipOrPartnershipInvitesBody.h"
#include "OAIDeleteInvitesResultsResponseArray.h"
#include "OAIError.h"
#include "OAIGet_invites_200_response.h"
#include "OAIInviteType.h"
#include "OAIRespondToInvitesResponseArray.h"
#include "OAIUpdateInvitesResultsResponseArray.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIBusinessAccessInviteApi : public QObject {
    Q_OBJECT

public:
    OAIBusinessAccessInviteApi(const int timeOut = 0);
    ~OAIBusinessAccessInviteApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  business_id QString [required]
    * @param[in]  oai_create_asset_access_request_body OAICreateAssetAccessRequestBody [required]
    */
    virtual void assetAccessRequests_create(const QString &business_id, const OAICreateAssetAccessRequestBody &oai_create_asset_access_request_body);

    /**
    * @param[in]  business_id QString [required]
    * @param[in]  oai_cancel_invites_body OAICancelInvitesBody [required]
    */
    virtual void cancelInvitesOrRequests(const QString &business_id, const OAICancelInvitesBody &oai_cancel_invites_body);

    /**
    * @param[in]  business_id QString [required]
    * @param[in]  oai_create_asset_invites_request OAICreateAssetInvitesRequest [required]
    */
    virtual void createAssetInvites(const QString &business_id, const OAICreateAssetInvitesRequest &oai_create_asset_invites_request);

    /**
    * @param[in]  business_id QString [required]
    * @param[in]  oai_create_membership_or_partnership_invites_body OAICreateMembershipOrPartnershipInvitesBody [required]
    */
    virtual void createMembershipOrPartnershipInvites(const QString &business_id, const OAICreateMembershipOrPartnershipInvitesBody &oai_create_membership_or_partnership_invites_body);

    /**
    * @param[in]  business_id QString [required]
    * @param[in]  is_member bool [optional]
    * @param[in]  invite_status QList<QString> [optional]
    * @param[in]  invite_type OAIInviteType [optional]
    * @param[in]  bookmark QString [optional]
    * @param[in]  page_size qint32 [optional]
    */
    virtual void get_invites(const QString &business_id, const ::OpenAPI::OptionalParam<bool> &is_member = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &invite_status = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<OAIInviteType> &invite_type = ::OpenAPI::OptionalParam<OAIInviteType>(), const ::OpenAPI::OptionalParam<QString> &bookmark = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  oai_auth_respond_invites_body OAIAuthRespondInvitesBody [required]
    */
    virtual void respondBusinessAccessInvites(const OAIAuthRespondInvitesBody &oai_auth_respond_invites_body);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void assetAccessRequests_createCallback(OAIHttpRequestWorker *worker);
    void cancelInvitesOrRequestsCallback(OAIHttpRequestWorker *worker);
    void createAssetInvitesCallback(OAIHttpRequestWorker *worker);
    void createMembershipOrPartnershipInvitesCallback(OAIHttpRequestWorker *worker);
    void get_invitesCallback(OAIHttpRequestWorker *worker);
    void respondBusinessAccessInvitesCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void assetAccessRequests_createSignal(OAICreateAssetAccessRequestResponse summary);
    void cancelInvitesOrRequestsSignal(OAIDeleteInvitesResultsResponseArray summary);
    void createAssetInvitesSignal(OAIUpdateInvitesResultsResponseArray summary);
    void createMembershipOrPartnershipInvitesSignal(OAICreateInvitesResultsResponseArray summary);
    void get_invitesSignal(OAIGet_invites_200_response summary);
    void respondBusinessAccessInvitesSignal(OAIRespondToInvitesResponseArray summary);


    void assetAccessRequests_createSignalFull(OAIHttpRequestWorker *worker, OAICreateAssetAccessRequestResponse summary);
    void cancelInvitesOrRequestsSignalFull(OAIHttpRequestWorker *worker, OAIDeleteInvitesResultsResponseArray summary);
    void createAssetInvitesSignalFull(OAIHttpRequestWorker *worker, OAIUpdateInvitesResultsResponseArray summary);
    void createMembershipOrPartnershipInvitesSignalFull(OAIHttpRequestWorker *worker, OAICreateInvitesResultsResponseArray summary);
    void get_invitesSignalFull(OAIHttpRequestWorker *worker, OAIGet_invites_200_response summary);
    void respondBusinessAccessInvitesSignalFull(OAIHttpRequestWorker *worker, OAIRespondToInvitesResponseArray summary);

    Q_DECL_DEPRECATED_X("Use assetAccessRequests_createSignalError() instead")
    void assetAccessRequests_createSignalE(OAICreateAssetAccessRequestResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void assetAccessRequests_createSignalError(OAICreateAssetAccessRequestResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cancelInvitesOrRequestsSignalError() instead")
    void cancelInvitesOrRequestsSignalE(OAIDeleteInvitesResultsResponseArray summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cancelInvitesOrRequestsSignalError(OAIDeleteInvitesResultsResponseArray summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createAssetInvitesSignalError() instead")
    void createAssetInvitesSignalE(OAIUpdateInvitesResultsResponseArray summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createAssetInvitesSignalError(OAIUpdateInvitesResultsResponseArray summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createMembershipOrPartnershipInvitesSignalError() instead")
    void createMembershipOrPartnershipInvitesSignalE(OAICreateInvitesResultsResponseArray summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createMembershipOrPartnershipInvitesSignalError(OAICreateInvitesResultsResponseArray summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use get_invitesSignalError() instead")
    void get_invitesSignalE(OAIGet_invites_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void get_invitesSignalError(OAIGet_invites_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use respondBusinessAccessInvitesSignalError() instead")
    void respondBusinessAccessInvitesSignalE(OAIRespondToInvitesResponseArray summary, QNetworkReply::NetworkError error_type, QString error_str);
    void respondBusinessAccessInvitesSignalError(OAIRespondToInvitesResponseArray summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use assetAccessRequests_createSignalErrorFull() instead")
    void assetAccessRequests_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assetAccessRequests_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cancelInvitesOrRequestsSignalErrorFull() instead")
    void cancelInvitesOrRequestsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cancelInvitesOrRequestsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createAssetInvitesSignalErrorFull() instead")
    void createAssetInvitesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createAssetInvitesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createMembershipOrPartnershipInvitesSignalErrorFull() instead")
    void createMembershipOrPartnershipInvitesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createMembershipOrPartnershipInvitesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use get_invitesSignalErrorFull() instead")
    void get_invitesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void get_invitesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use respondBusinessAccessInvitesSignalErrorFull() instead")
    void respondBusinessAccessInvitesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void respondBusinessAccessInvitesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
