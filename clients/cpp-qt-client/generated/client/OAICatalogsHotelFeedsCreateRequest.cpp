/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICatalogsHotelFeedsCreateRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICatalogsHotelFeedsCreateRequest::OAICatalogsHotelFeedsCreateRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICatalogsHotelFeedsCreateRequest::OAICatalogsHotelFeedsCreateRequest() {
    this->initializeModel();
}

OAICatalogsHotelFeedsCreateRequest::~OAICatalogsHotelFeedsCreateRequest() {}

void OAICatalogsHotelFeedsCreateRequest::initializeModel() {

    m_default_currency_isSet = false;
    m_default_currency_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_format_isSet = false;
    m_format_isValid = false;

    m_default_locale_isSet = false;
    m_default_locale_isValid = false;

    m_credentials_isSet = false;
    m_credentials_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_preferred_processing_schedule_isSet = false;
    m_preferred_processing_schedule_isValid = false;

    m_catalog_type_isSet = false;
    m_catalog_type_isValid = false;

    m_catalog_id_isSet = false;
    m_catalog_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAICatalogsHotelFeedsCreateRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICatalogsHotelFeedsCreateRequest::fromJsonObject(QJsonObject json) {

    m_default_currency_isValid = ::OpenAPI::fromJsonValue(m_default_currency, json[QString("default_currency")]);
    m_default_currency_isSet = !json[QString("default_currency")].isNull() && m_default_currency_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_format_isValid = ::OpenAPI::fromJsonValue(m_format, json[QString("format")]);
    m_format_isSet = !json[QString("format")].isNull() && m_format_isValid;

    m_default_locale_isValid = ::OpenAPI::fromJsonValue(m_default_locale, json[QString("default_locale")]);
    m_default_locale_isSet = !json[QString("default_locale")].isNull() && m_default_locale_isValid;

    m_credentials_isValid = ::OpenAPI::fromJsonValue(m_credentials, json[QString("credentials")]);
    m_credentials_isSet = !json[QString("credentials")].isNull() && m_credentials_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_preferred_processing_schedule_isValid = ::OpenAPI::fromJsonValue(m_preferred_processing_schedule, json[QString("preferred_processing_schedule")]);
    m_preferred_processing_schedule_isSet = !json[QString("preferred_processing_schedule")].isNull() && m_preferred_processing_schedule_isValid;

    m_catalog_type_isValid = ::OpenAPI::fromJsonValue(m_catalog_type, json[QString("catalog_type")]);
    m_catalog_type_isSet = !json[QString("catalog_type")].isNull() && m_catalog_type_isValid;

    m_catalog_id_isValid = ::OpenAPI::fromJsonValue(m_catalog_id, json[QString("catalog_id")]);
    m_catalog_id_isSet = !json[QString("catalog_id")].isNull() && m_catalog_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAICatalogsHotelFeedsCreateRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICatalogsHotelFeedsCreateRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_default_currency.isSet()) {
        obj.insert(QString("default_currency"), ::OpenAPI::toJsonValue(m_default_currency));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_format.isSet()) {
        obj.insert(QString("format"), ::OpenAPI::toJsonValue(m_format));
    }
    if (m_default_locale.isSet()) {
        obj.insert(QString("default_locale"), ::OpenAPI::toJsonValue(m_default_locale));
    }
    if (m_credentials.isSet()) {
        obj.insert(QString("credentials"), ::OpenAPI::toJsonValue(m_credentials));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_preferred_processing_schedule.isSet()) {
        obj.insert(QString("preferred_processing_schedule"), ::OpenAPI::toJsonValue(m_preferred_processing_schedule));
    }
    if (m_catalog_type.isSet()) {
        obj.insert(QString("catalog_type"), ::OpenAPI::toJsonValue(m_catalog_type));
    }
    if (m_catalog_id_isSet) {
        obj.insert(QString("catalog_id"), ::OpenAPI::toJsonValue(m_catalog_id));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

OAINullableCurrency OAICatalogsHotelFeedsCreateRequest::getDefaultCurrency() const {
    return m_default_currency;
}
void OAICatalogsHotelFeedsCreateRequest::setDefaultCurrency(const OAINullableCurrency &default_currency) {
    m_default_currency = default_currency;
    m_default_currency_isSet = true;
}

bool OAICatalogsHotelFeedsCreateRequest::is_default_currency_Set() const{
    return m_default_currency_isSet;
}

bool OAICatalogsHotelFeedsCreateRequest::is_default_currency_Valid() const{
    return m_default_currency_isValid;
}

QString OAICatalogsHotelFeedsCreateRequest::getName() const {
    return m_name;
}
void OAICatalogsHotelFeedsCreateRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICatalogsHotelFeedsCreateRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAICatalogsHotelFeedsCreateRequest::is_name_Valid() const{
    return m_name_isValid;
}

OAICatalogsFormat OAICatalogsHotelFeedsCreateRequest::getFormat() const {
    return m_format;
}
void OAICatalogsHotelFeedsCreateRequest::setFormat(const OAICatalogsFormat &format) {
    m_format = format;
    m_format_isSet = true;
}

bool OAICatalogsHotelFeedsCreateRequest::is_format_Set() const{
    return m_format_isSet;
}

bool OAICatalogsHotelFeedsCreateRequest::is_format_Valid() const{
    return m_format_isValid;
}

OAICatalogsFeedsCreateRequest_default_locale OAICatalogsHotelFeedsCreateRequest::getDefaultLocale() const {
    return m_default_locale;
}
void OAICatalogsHotelFeedsCreateRequest::setDefaultLocale(const OAICatalogsFeedsCreateRequest_default_locale &default_locale) {
    m_default_locale = default_locale;
    m_default_locale_isSet = true;
}

bool OAICatalogsHotelFeedsCreateRequest::is_default_locale_Set() const{
    return m_default_locale_isSet;
}

bool OAICatalogsHotelFeedsCreateRequest::is_default_locale_Valid() const{
    return m_default_locale_isValid;
}

OAICatalogsFeedCredentials OAICatalogsHotelFeedsCreateRequest::getCredentials() const {
    return m_credentials;
}
void OAICatalogsHotelFeedsCreateRequest::setCredentials(const OAICatalogsFeedCredentials &credentials) {
    m_credentials = credentials;
    m_credentials_isSet = true;
}

bool OAICatalogsHotelFeedsCreateRequest::is_credentials_Set() const{
    return m_credentials_isSet;
}

bool OAICatalogsHotelFeedsCreateRequest::is_credentials_Valid() const{
    return m_credentials_isValid;
}

QString OAICatalogsHotelFeedsCreateRequest::getLocation() const {
    return m_location;
}
void OAICatalogsHotelFeedsCreateRequest::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAICatalogsHotelFeedsCreateRequest::is_location_Set() const{
    return m_location_isSet;
}

bool OAICatalogsHotelFeedsCreateRequest::is_location_Valid() const{
    return m_location_isValid;
}

OAICatalogsFeedProcessingSchedule OAICatalogsHotelFeedsCreateRequest::getPreferredProcessingSchedule() const {
    return m_preferred_processing_schedule;
}
void OAICatalogsHotelFeedsCreateRequest::setPreferredProcessingSchedule(const OAICatalogsFeedProcessingSchedule &preferred_processing_schedule) {
    m_preferred_processing_schedule = preferred_processing_schedule;
    m_preferred_processing_schedule_isSet = true;
}

bool OAICatalogsHotelFeedsCreateRequest::is_preferred_processing_schedule_Set() const{
    return m_preferred_processing_schedule_isSet;
}

bool OAICatalogsHotelFeedsCreateRequest::is_preferred_processing_schedule_Valid() const{
    return m_preferred_processing_schedule_isValid;
}

OAICatalogsType OAICatalogsHotelFeedsCreateRequest::getCatalogType() const {
    return m_catalog_type;
}
void OAICatalogsHotelFeedsCreateRequest::setCatalogType(const OAICatalogsType &catalog_type) {
    m_catalog_type = catalog_type;
    m_catalog_type_isSet = true;
}

bool OAICatalogsHotelFeedsCreateRequest::is_catalog_type_Set() const{
    return m_catalog_type_isSet;
}

bool OAICatalogsHotelFeedsCreateRequest::is_catalog_type_Valid() const{
    return m_catalog_type_isValid;
}

QString OAICatalogsHotelFeedsCreateRequest::getCatalogId() const {
    return m_catalog_id;
}
void OAICatalogsHotelFeedsCreateRequest::setCatalogId(const QString &catalog_id) {
    m_catalog_id = catalog_id;
    m_catalog_id_isSet = true;
}

bool OAICatalogsHotelFeedsCreateRequest::is_catalog_id_Set() const{
    return m_catalog_id_isSet;
}

bool OAICatalogsHotelFeedsCreateRequest::is_catalog_id_Valid() const{
    return m_catalog_id_isValid;
}

OAICatalogsStatus OAICatalogsHotelFeedsCreateRequest::getStatus() const {
    return m_status;
}
void OAICatalogsHotelFeedsCreateRequest::setStatus(const OAICatalogsStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAICatalogsHotelFeedsCreateRequest::is_status_Set() const{
    return m_status_isSet;
}

bool OAICatalogsHotelFeedsCreateRequest::is_status_Valid() const{
    return m_status_isValid;
}

bool OAICatalogsHotelFeedsCreateRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_default_currency.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_format.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_locale.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_credentials.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preferred_processing_schedule.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_catalog_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_catalog_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICatalogsHotelFeedsCreateRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_format_isValid && m_default_locale_isValid && m_location_isValid && m_catalog_type_isValid && true;
}

} // namespace OpenAPI
