/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICatalogsFeedsCreateRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICatalogsFeedsCreateRequest::OAICatalogsFeedsCreateRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICatalogsFeedsCreateRequest::OAICatalogsFeedsCreateRequest() {
    this->initializeModel();
}

OAICatalogsFeedsCreateRequest::~OAICatalogsFeedsCreateRequest() {}

void OAICatalogsFeedsCreateRequest::initializeModel() {

    m_default_currency_isSet = false;
    m_default_currency_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_format_isSet = false;
    m_format_isValid = false;

    m_default_locale_isSet = false;
    m_default_locale_isValid = false;

    m_credentials_isSet = false;
    m_credentials_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_preferred_processing_schedule_isSet = false;
    m_preferred_processing_schedule_isValid = false;

    m_default_country_isSet = false;
    m_default_country_isValid = false;

    m_default_availability_isSet = false;
    m_default_availability_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAICatalogsFeedsCreateRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICatalogsFeedsCreateRequest::fromJsonObject(QJsonObject json) {

    m_default_currency_isValid = ::OpenAPI::fromJsonValue(m_default_currency, json[QString("default_currency")]);
    m_default_currency_isSet = !json[QString("default_currency")].isNull() && m_default_currency_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_format_isValid = ::OpenAPI::fromJsonValue(m_format, json[QString("format")]);
    m_format_isSet = !json[QString("format")].isNull() && m_format_isValid;

    m_default_locale_isValid = ::OpenAPI::fromJsonValue(m_default_locale, json[QString("default_locale")]);
    m_default_locale_isSet = !json[QString("default_locale")].isNull() && m_default_locale_isValid;

    m_credentials_isValid = ::OpenAPI::fromJsonValue(m_credentials, json[QString("credentials")]);
    m_credentials_isSet = !json[QString("credentials")].isNull() && m_credentials_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_preferred_processing_schedule_isValid = ::OpenAPI::fromJsonValue(m_preferred_processing_schedule, json[QString("preferred_processing_schedule")]);
    m_preferred_processing_schedule_isSet = !json[QString("preferred_processing_schedule")].isNull() && m_preferred_processing_schedule_isValid;

    m_default_country_isValid = ::OpenAPI::fromJsonValue(m_default_country, json[QString("default_country")]);
    m_default_country_isSet = !json[QString("default_country")].isNull() && m_default_country_isValid;

    m_default_availability_isValid = ::OpenAPI::fromJsonValue(m_default_availability, json[QString("default_availability")]);
    m_default_availability_isSet = !json[QString("default_availability")].isNull() && m_default_availability_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAICatalogsFeedsCreateRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICatalogsFeedsCreateRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_default_currency.isSet()) {
        obj.insert(QString("default_currency"), ::OpenAPI::toJsonValue(m_default_currency));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_format.isSet()) {
        obj.insert(QString("format"), ::OpenAPI::toJsonValue(m_format));
    }
    if (m_default_locale.isSet()) {
        obj.insert(QString("default_locale"), ::OpenAPI::toJsonValue(m_default_locale));
    }
    if (m_credentials.isSet()) {
        obj.insert(QString("credentials"), ::OpenAPI::toJsonValue(m_credentials));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_preferred_processing_schedule.isSet()) {
        obj.insert(QString("preferred_processing_schedule"), ::OpenAPI::toJsonValue(m_preferred_processing_schedule));
    }
    if (m_default_country.isSet()) {
        obj.insert(QString("default_country"), ::OpenAPI::toJsonValue(m_default_country));
    }
    if (m_default_availability.isSet()) {
        obj.insert(QString("default_availability"), ::OpenAPI::toJsonValue(m_default_availability));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

OAINullableCurrency OAICatalogsFeedsCreateRequest::getDefaultCurrency() const {
    return m_default_currency;
}
void OAICatalogsFeedsCreateRequest::setDefaultCurrency(const OAINullableCurrency &default_currency) {
    m_default_currency = default_currency;
    m_default_currency_isSet = true;
}

bool OAICatalogsFeedsCreateRequest::is_default_currency_Set() const{
    return m_default_currency_isSet;
}

bool OAICatalogsFeedsCreateRequest::is_default_currency_Valid() const{
    return m_default_currency_isValid;
}

QString OAICatalogsFeedsCreateRequest::getName() const {
    return m_name;
}
void OAICatalogsFeedsCreateRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICatalogsFeedsCreateRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAICatalogsFeedsCreateRequest::is_name_Valid() const{
    return m_name_isValid;
}

OAICatalogsFormat OAICatalogsFeedsCreateRequest::getFormat() const {
    return m_format;
}
void OAICatalogsFeedsCreateRequest::setFormat(const OAICatalogsFormat &format) {
    m_format = format;
    m_format_isSet = true;
}

bool OAICatalogsFeedsCreateRequest::is_format_Set() const{
    return m_format_isSet;
}

bool OAICatalogsFeedsCreateRequest::is_format_Valid() const{
    return m_format_isValid;
}

OAICatalogsFeedsCreateRequest_default_locale OAICatalogsFeedsCreateRequest::getDefaultLocale() const {
    return m_default_locale;
}
void OAICatalogsFeedsCreateRequest::setDefaultLocale(const OAICatalogsFeedsCreateRequest_default_locale &default_locale) {
    m_default_locale = default_locale;
    m_default_locale_isSet = true;
}

bool OAICatalogsFeedsCreateRequest::is_default_locale_Set() const{
    return m_default_locale_isSet;
}

bool OAICatalogsFeedsCreateRequest::is_default_locale_Valid() const{
    return m_default_locale_isValid;
}

OAICatalogsFeedCredentials OAICatalogsFeedsCreateRequest::getCredentials() const {
    return m_credentials;
}
void OAICatalogsFeedsCreateRequest::setCredentials(const OAICatalogsFeedCredentials &credentials) {
    m_credentials = credentials;
    m_credentials_isSet = true;
}

bool OAICatalogsFeedsCreateRequest::is_credentials_Set() const{
    return m_credentials_isSet;
}

bool OAICatalogsFeedsCreateRequest::is_credentials_Valid() const{
    return m_credentials_isValid;
}

QString OAICatalogsFeedsCreateRequest::getLocation() const {
    return m_location;
}
void OAICatalogsFeedsCreateRequest::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAICatalogsFeedsCreateRequest::is_location_Set() const{
    return m_location_isSet;
}

bool OAICatalogsFeedsCreateRequest::is_location_Valid() const{
    return m_location_isValid;
}

OAICatalogsFeedProcessingSchedule OAICatalogsFeedsCreateRequest::getPreferredProcessingSchedule() const {
    return m_preferred_processing_schedule;
}
void OAICatalogsFeedsCreateRequest::setPreferredProcessingSchedule(const OAICatalogsFeedProcessingSchedule &preferred_processing_schedule) {
    m_preferred_processing_schedule = preferred_processing_schedule;
    m_preferred_processing_schedule_isSet = true;
}

bool OAICatalogsFeedsCreateRequest::is_preferred_processing_schedule_Set() const{
    return m_preferred_processing_schedule_isSet;
}

bool OAICatalogsFeedsCreateRequest::is_preferred_processing_schedule_Valid() const{
    return m_preferred_processing_schedule_isValid;
}

OAICountry OAICatalogsFeedsCreateRequest::getDefaultCountry() const {
    return m_default_country;
}
void OAICatalogsFeedsCreateRequest::setDefaultCountry(const OAICountry &default_country) {
    m_default_country = default_country;
    m_default_country_isSet = true;
}

bool OAICatalogsFeedsCreateRequest::is_default_country_Set() const{
    return m_default_country_isSet;
}

bool OAICatalogsFeedsCreateRequest::is_default_country_Valid() const{
    return m_default_country_isValid;
}

OAIProductAvailabilityType OAICatalogsFeedsCreateRequest::getDefaultAvailability() const {
    return m_default_availability;
}
void OAICatalogsFeedsCreateRequest::setDefaultAvailability(const OAIProductAvailabilityType &default_availability) {
    m_default_availability = default_availability;
    m_default_availability_isSet = true;
}

bool OAICatalogsFeedsCreateRequest::is_default_availability_Set() const{
    return m_default_availability_isSet;
}

bool OAICatalogsFeedsCreateRequest::is_default_availability_Valid() const{
    return m_default_availability_isValid;
}

OAICatalogsStatus OAICatalogsFeedsCreateRequest::getStatus() const {
    return m_status;
}
void OAICatalogsFeedsCreateRequest::setStatus(const OAICatalogsStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAICatalogsFeedsCreateRequest::is_status_Set() const{
    return m_status_isSet;
}

bool OAICatalogsFeedsCreateRequest::is_status_Valid() const{
    return m_status_isValid;
}

bool OAICatalogsFeedsCreateRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_default_currency.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_format.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_locale.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_credentials.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preferred_processing_schedule.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_country.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_availability.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICatalogsFeedsCreateRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_format_isValid && m_location_isValid && true;
}

} // namespace OpenAPI
