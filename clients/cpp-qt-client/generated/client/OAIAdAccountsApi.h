/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAdAccountsApi_H
#define OAI_OAIAdAccountsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAdAccount.h"
#include "OAIAdAccountAnalyticsResponse_inner.h"
#include "OAIAdAccountCreateRequest.h"
#include "OAIAd_accounts_list_200_response.h"
#include "OAIAdsAnalyticsCreateAsyncRequest.h"
#include "OAIAdsAnalyticsCreateAsyncResponse.h"
#include "OAIAdsAnalyticsGetAsyncResponse.h"
#include "OAIAdsAnalyticsTargetingType.h"
#include "OAIConversionReportAttributionType.h"
#include "OAICreateMMMReportRequest.h"
#include "OAICreateMMMReportResponse.h"
#include "OAIError.h"
#include "OAIGetMMMReportResponse.h"
#include "OAIGranularity.h"
#include "OAIMetricsResponse.h"
#include "OAITemplates_list_200_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAdAccountsApi : public QObject {
    Q_OBJECT

public:
    OAIAdAccountsApi(const int timeOut = 0);
    ~OAIAdAccountsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  ad_account_id QString [required]
    * @param[in]  start_date QDate [required]
    * @param[in]  end_date QDate [required]
    * @param[in]  targeting_types QList<OAIAdsAnalyticsTargetingType> [required]
    * @param[in]  columns QList<QString> [required]
    * @param[in]  granularity OAIGranularity [required]
    * @param[in]  click_window_days qint32 [optional]
    * @param[in]  engagement_window_days qint32 [optional]
    * @param[in]  view_window_days qint32 [optional]
    * @param[in]  conversion_report_time QString [optional]
    * @param[in]  attribution_types OAIConversionReportAttributionType [optional]
    */
    virtual void adAccountTargetingAnalytics_get(const QString &ad_account_id, const QDate &start_date, const QDate &end_date, const QList<OAIAdsAnalyticsTargetingType> &targeting_types, const QList<QString> &columns, const OAIGranularity &granularity, const ::OpenAPI::OptionalParam<qint32> &click_window_days = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &engagement_window_days = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &view_window_days = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &conversion_report_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIConversionReportAttributionType> &attribution_types = ::OpenAPI::OptionalParam<OAIConversionReportAttributionType>());

    /**
    * @param[in]  ad_account_id QString [required]
    * @param[in]  start_date QDate [required]
    * @param[in]  end_date QDate [required]
    * @param[in]  columns QList<QString> [required]
    * @param[in]  granularity OAIGranularity [required]
    * @param[in]  click_window_days qint32 [optional]
    * @param[in]  engagement_window_days qint32 [optional]
    * @param[in]  view_window_days qint32 [optional]
    * @param[in]  conversion_report_time QString [optional]
    */
    virtual void adAccount_analytics(const QString &ad_account_id, const QDate &start_date, const QDate &end_date, const QList<QString> &columns, const OAIGranularity &granularity, const ::OpenAPI::OptionalParam<qint32> &click_window_days = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &engagement_window_days = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &view_window_days = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &conversion_report_time = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oaiad_account_create_request OAIAdAccountCreateRequest [required]
    */
    virtual void adAccounts_create(const OAIAdAccountCreateRequest &oaiad_account_create_request);

    /**
    * @param[in]  ad_account_id QString [required]
    */
    virtual void adAccounts_get(const QString &ad_account_id);

    /**
    * @param[in]  bookmark QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  include_shared_accounts bool [optional]
    */
    virtual void adAccounts_list(const ::OpenAPI::OptionalParam<QString> &bookmark = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &include_shared_accounts = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  ad_account_id QString [required]
    * @param[in]  oai_create_mmm_report_request OAICreateMMMReportRequest [required]
    */
    virtual void analytics_createMmmReport(const QString &ad_account_id, const OAICreateMMMReportRequest &oai_create_mmm_report_request);

    /**
    * @param[in]  ad_account_id QString [required]
    * @param[in]  oai_ads_analytics_create_async_request OAIAdsAnalyticsCreateAsyncRequest [required]
    */
    virtual void analytics_createReport(const QString &ad_account_id, const OAIAdsAnalyticsCreateAsyncRequest &oai_ads_analytics_create_async_request);

    /**
    * @param[in]  ad_account_id QString [required]
    * @param[in]  template_id QString [required]
    * @param[in]  start_date QDate [optional]
    * @param[in]  end_date QDate [optional]
    * @param[in]  granularity OAIGranularity [optional]
    */
    virtual void analytics_createTemplateReport(const QString &ad_account_id, const QString &template_id, const ::OpenAPI::OptionalParam<QDate> &start_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDate> &end_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<OAIGranularity> &granularity = ::OpenAPI::OptionalParam<OAIGranularity>());

    /**
    * @param[in]  ad_account_id QString [required]
    * @param[in]  token QString [required]
    */
    virtual void analytics_getMmmReport(const QString &ad_account_id, const QString &token);

    /**
    * @param[in]  ad_account_id QString [required]
    * @param[in]  token QString [required]
    */
    virtual void analytics_getReport(const QString &ad_account_id, const QString &token);

    /**
    * @param[in]  ad_account_id QString [required]
    */
    virtual void sandbox_delete(const QString &ad_account_id);

    /**
    * @param[in]  ad_account_id QString [required]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  order QString [optional]
    * @param[in]  bookmark QString [optional]
    */
    virtual void templates_list(const QString &ad_account_id, const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &bookmark = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void adAccountTargetingAnalytics_getCallback(OAIHttpRequestWorker *worker);
    void adAccount_analyticsCallback(OAIHttpRequestWorker *worker);
    void adAccounts_createCallback(OAIHttpRequestWorker *worker);
    void adAccounts_getCallback(OAIHttpRequestWorker *worker);
    void adAccounts_listCallback(OAIHttpRequestWorker *worker);
    void analytics_createMmmReportCallback(OAIHttpRequestWorker *worker);
    void analytics_createReportCallback(OAIHttpRequestWorker *worker);
    void analytics_createTemplateReportCallback(OAIHttpRequestWorker *worker);
    void analytics_getMmmReportCallback(OAIHttpRequestWorker *worker);
    void analytics_getReportCallback(OAIHttpRequestWorker *worker);
    void sandbox_deleteCallback(OAIHttpRequestWorker *worker);
    void templates_listCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void adAccountTargetingAnalytics_getSignal(OAIMetricsResponse summary);
    void adAccount_analyticsSignal(QList<OAIAdAccountAnalyticsResponse_inner> summary);
    void adAccounts_createSignal(OAIAdAccount summary);
    void adAccounts_getSignal(OAIAdAccount summary);
    void adAccounts_listSignal(OAIAd_accounts_list_200_response summary);
    void analytics_createMmmReportSignal(OAICreateMMMReportResponse summary);
    void analytics_createReportSignal(OAIAdsAnalyticsCreateAsyncResponse summary);
    void analytics_createTemplateReportSignal(OAIAdsAnalyticsCreateAsyncResponse summary);
    void analytics_getMmmReportSignal(OAIGetMMMReportResponse summary);
    void analytics_getReportSignal(OAIAdsAnalyticsGetAsyncResponse summary);
    void sandbox_deleteSignal(QString summary);
    void templates_listSignal(OAITemplates_list_200_response summary);


    void adAccountTargetingAnalytics_getSignalFull(OAIHttpRequestWorker *worker, OAIMetricsResponse summary);
    void adAccount_analyticsSignalFull(OAIHttpRequestWorker *worker, QList<OAIAdAccountAnalyticsResponse_inner> summary);
    void adAccounts_createSignalFull(OAIHttpRequestWorker *worker, OAIAdAccount summary);
    void adAccounts_getSignalFull(OAIHttpRequestWorker *worker, OAIAdAccount summary);
    void adAccounts_listSignalFull(OAIHttpRequestWorker *worker, OAIAd_accounts_list_200_response summary);
    void analytics_createMmmReportSignalFull(OAIHttpRequestWorker *worker, OAICreateMMMReportResponse summary);
    void analytics_createReportSignalFull(OAIHttpRequestWorker *worker, OAIAdsAnalyticsCreateAsyncResponse summary);
    void analytics_createTemplateReportSignalFull(OAIHttpRequestWorker *worker, OAIAdsAnalyticsCreateAsyncResponse summary);
    void analytics_getMmmReportSignalFull(OAIHttpRequestWorker *worker, OAIGetMMMReportResponse summary);
    void analytics_getReportSignalFull(OAIHttpRequestWorker *worker, OAIAdsAnalyticsGetAsyncResponse summary);
    void sandbox_deleteSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void templates_listSignalFull(OAIHttpRequestWorker *worker, OAITemplates_list_200_response summary);

    Q_DECL_DEPRECATED_X("Use adAccountTargetingAnalytics_getSignalError() instead")
    void adAccountTargetingAnalytics_getSignalE(OAIMetricsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adAccountTargetingAnalytics_getSignalError(OAIMetricsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adAccount_analyticsSignalError() instead")
    void adAccount_analyticsSignalE(QList<OAIAdAccountAnalyticsResponse_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adAccount_analyticsSignalError(QList<OAIAdAccountAnalyticsResponse_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adAccounts_createSignalError() instead")
    void adAccounts_createSignalE(OAIAdAccount summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adAccounts_createSignalError(OAIAdAccount summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adAccounts_getSignalError() instead")
    void adAccounts_getSignalE(OAIAdAccount summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adAccounts_getSignalError(OAIAdAccount summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adAccounts_listSignalError() instead")
    void adAccounts_listSignalE(OAIAd_accounts_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adAccounts_listSignalError(OAIAd_accounts_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analytics_createMmmReportSignalError() instead")
    void analytics_createMmmReportSignalE(OAICreateMMMReportResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analytics_createMmmReportSignalError(OAICreateMMMReportResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analytics_createReportSignalError() instead")
    void analytics_createReportSignalE(OAIAdsAnalyticsCreateAsyncResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analytics_createReportSignalError(OAIAdsAnalyticsCreateAsyncResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analytics_createTemplateReportSignalError() instead")
    void analytics_createTemplateReportSignalE(OAIAdsAnalyticsCreateAsyncResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analytics_createTemplateReportSignalError(OAIAdsAnalyticsCreateAsyncResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analytics_getMmmReportSignalError() instead")
    void analytics_getMmmReportSignalE(OAIGetMMMReportResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analytics_getMmmReportSignalError(OAIGetMMMReportResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analytics_getReportSignalError() instead")
    void analytics_getReportSignalE(OAIAdsAnalyticsGetAsyncResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analytics_getReportSignalError(OAIAdsAnalyticsGetAsyncResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sandbox_deleteSignalError() instead")
    void sandbox_deleteSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sandbox_deleteSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use templates_listSignalError() instead")
    void templates_listSignalE(OAITemplates_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void templates_listSignalError(OAITemplates_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use adAccountTargetingAnalytics_getSignalErrorFull() instead")
    void adAccountTargetingAnalytics_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adAccountTargetingAnalytics_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adAccount_analyticsSignalErrorFull() instead")
    void adAccount_analyticsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adAccount_analyticsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adAccounts_createSignalErrorFull() instead")
    void adAccounts_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adAccounts_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adAccounts_getSignalErrorFull() instead")
    void adAccounts_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adAccounts_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adAccounts_listSignalErrorFull() instead")
    void adAccounts_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adAccounts_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analytics_createMmmReportSignalErrorFull() instead")
    void analytics_createMmmReportSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analytics_createMmmReportSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analytics_createReportSignalErrorFull() instead")
    void analytics_createReportSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analytics_createReportSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analytics_createTemplateReportSignalErrorFull() instead")
    void analytics_createTemplateReportSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analytics_createTemplateReportSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analytics_getMmmReportSignalErrorFull() instead")
    void analytics_getMmmReportSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analytics_getMmmReportSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analytics_getReportSignalErrorFull() instead")
    void analytics_getReportSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analytics_getReportSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sandbox_deleteSignalErrorFull() instead")
    void sandbox_deleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sandbox_deleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use templates_listSignalErrorFull() instead")
    void templates_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void templates_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
