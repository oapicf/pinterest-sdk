/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITemplateResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITemplateResponse::OAITemplateResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITemplateResponse::OAITemplateResponse() {
    this->initializeModel();
}

OAITemplateResponse::~OAITemplateResponse() {}

void OAITemplateResponse::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_ad_account_id_isSet = false;
    m_ad_account_id_isValid = false;

    m_ad_account_ids_isSet = false;
    m_ad_account_ids_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_report_start_relative_days_in_past_isSet = false;
    m_report_start_relative_days_in_past_isValid = false;

    m_report_end_relative_days_in_past_isSet = false;
    m_report_end_relative_days_in_past_isValid = false;

    m_date_range_isSet = false;
    m_date_range_isValid = false;

    m_report_level_isSet = false;
    m_report_level_isValid = false;

    m_report_format_isSet = false;
    m_report_format_isValid = false;

    m_columns_isSet = false;
    m_columns_isValid = false;

    m_granularity_isSet = false;
    m_granularity_isValid = false;

    m_view_window_days_isSet = false;
    m_view_window_days_isValid = false;

    m_click_window_days_isSet = false;
    m_click_window_days_isValid = false;

    m_engagement_window_days_isSet = false;
    m_engagement_window_days_isValid = false;

    m_conversion_report_time_type_isSet = false;
    m_conversion_report_time_type_isValid = false;

    m_filters_json_isSet = false;
    m_filters_json_isValid = false;

    m_is_owned_by_user_isSet = false;
    m_is_owned_by_user_isValid = false;

    m_is_scheduled_isSet = false;
    m_is_scheduled_isValid = false;

    m_creation_source_isSet = false;
    m_creation_source_isValid = false;

    m_is_deleted_isSet = false;
    m_is_deleted_isValid = false;

    m_updated_time_isSet = false;
    m_updated_time_isValid = false;

    m_custom_column_ids_isSet = false;
    m_custom_column_ids_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_ingestion_sources_isSet = false;
    m_ingestion_sources_isValid = false;
}

void OAITemplateResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITemplateResponse::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_ad_account_id_isValid = ::OpenAPI::fromJsonValue(m_ad_account_id, json[QString("ad_account_id")]);
    m_ad_account_id_isSet = !json[QString("ad_account_id")].isNull() && m_ad_account_id_isValid;

    m_ad_account_ids_isValid = ::OpenAPI::fromJsonValue(m_ad_account_ids, json[QString("ad_account_ids")]);
    m_ad_account_ids_isSet = !json[QString("ad_account_ids")].isNull() && m_ad_account_ids_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("user_id")]);
    m_user_id_isSet = !json[QString("user_id")].isNull() && m_user_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_report_start_relative_days_in_past_isValid = ::OpenAPI::fromJsonValue(m_report_start_relative_days_in_past, json[QString("report_start_relative_days_in_past")]);
    m_report_start_relative_days_in_past_isSet = !json[QString("report_start_relative_days_in_past")].isNull() && m_report_start_relative_days_in_past_isValid;

    m_report_end_relative_days_in_past_isValid = ::OpenAPI::fromJsonValue(m_report_end_relative_days_in_past, json[QString("report_end_relative_days_in_past")]);
    m_report_end_relative_days_in_past_isSet = !json[QString("report_end_relative_days_in_past")].isNull() && m_report_end_relative_days_in_past_isValid;

    m_date_range_isValid = ::OpenAPI::fromJsonValue(m_date_range, json[QString("date_range")]);
    m_date_range_isSet = !json[QString("date_range")].isNull() && m_date_range_isValid;

    m_report_level_isValid = ::OpenAPI::fromJsonValue(m_report_level, json[QString("report_level")]);
    m_report_level_isSet = !json[QString("report_level")].isNull() && m_report_level_isValid;

    m_report_format_isValid = ::OpenAPI::fromJsonValue(m_report_format, json[QString("report_format")]);
    m_report_format_isSet = !json[QString("report_format")].isNull() && m_report_format_isValid;

    m_columns_isValid = ::OpenAPI::fromJsonValue(m_columns, json[QString("columns")]);
    m_columns_isSet = !json[QString("columns")].isNull() && m_columns_isValid;

    m_granularity_isValid = ::OpenAPI::fromJsonValue(m_granularity, json[QString("granularity")]);
    m_granularity_isSet = !json[QString("granularity")].isNull() && m_granularity_isValid;

    m_view_window_days_isValid = ::OpenAPI::fromJsonValue(m_view_window_days, json[QString("view_window_days")]);
    m_view_window_days_isSet = !json[QString("view_window_days")].isNull() && m_view_window_days_isValid;

    m_click_window_days_isValid = ::OpenAPI::fromJsonValue(m_click_window_days, json[QString("click_window_days")]);
    m_click_window_days_isSet = !json[QString("click_window_days")].isNull() && m_click_window_days_isValid;

    m_engagement_window_days_isValid = ::OpenAPI::fromJsonValue(m_engagement_window_days, json[QString("engagement_window_days")]);
    m_engagement_window_days_isSet = !json[QString("engagement_window_days")].isNull() && m_engagement_window_days_isValid;

    m_conversion_report_time_type_isValid = ::OpenAPI::fromJsonValue(m_conversion_report_time_type, json[QString("conversion_report_time_type")]);
    m_conversion_report_time_type_isSet = !json[QString("conversion_report_time_type")].isNull() && m_conversion_report_time_type_isValid;

    m_filters_json_isValid = ::OpenAPI::fromJsonValue(m_filters_json, json[QString("filters_json")]);
    m_filters_json_isSet = !json[QString("filters_json")].isNull() && m_filters_json_isValid;

    m_is_owned_by_user_isValid = ::OpenAPI::fromJsonValue(m_is_owned_by_user, json[QString("is_owned_by_user")]);
    m_is_owned_by_user_isSet = !json[QString("is_owned_by_user")].isNull() && m_is_owned_by_user_isValid;

    m_is_scheduled_isValid = ::OpenAPI::fromJsonValue(m_is_scheduled, json[QString("is_scheduled")]);
    m_is_scheduled_isSet = !json[QString("is_scheduled")].isNull() && m_is_scheduled_isValid;

    m_creation_source_isValid = ::OpenAPI::fromJsonValue(m_creation_source, json[QString("creation_source")]);
    m_creation_source_isSet = !json[QString("creation_source")].isNull() && m_creation_source_isValid;

    m_is_deleted_isValid = ::OpenAPI::fromJsonValue(m_is_deleted, json[QString("is_deleted")]);
    m_is_deleted_isSet = !json[QString("is_deleted")].isNull() && m_is_deleted_isValid;

    m_updated_time_isValid = ::OpenAPI::fromJsonValue(m_updated_time, json[QString("updated_time")]);
    m_updated_time_isSet = !json[QString("updated_time")].isNull() && m_updated_time_isValid;

    m_custom_column_ids_isValid = ::OpenAPI::fromJsonValue(m_custom_column_ids, json[QString("custom_column_ids")]);
    m_custom_column_ids_isSet = !json[QString("custom_column_ids")].isNull() && m_custom_column_ids_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_ingestion_sources_isValid = ::OpenAPI::fromJsonValue(m_ingestion_sources, json[QString("ingestion_sources")]);
    m_ingestion_sources_isSet = !json[QString("ingestion_sources")].isNull() && m_ingestion_sources_isValid;
}

QString OAITemplateResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITemplateResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_ad_account_id_isSet) {
        obj.insert(QString("ad_account_id"), ::OpenAPI::toJsonValue(m_ad_account_id));
    }
    if (m_ad_account_ids.size() > 0) {
        obj.insert(QString("ad_account_ids"), ::OpenAPI::toJsonValue(m_ad_account_ids));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("user_id"), ::OpenAPI::toJsonValue(m_user_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_report_start_relative_days_in_past_isSet) {
        obj.insert(QString("report_start_relative_days_in_past"), ::OpenAPI::toJsonValue(m_report_start_relative_days_in_past));
    }
    if (m_report_end_relative_days_in_past_isSet) {
        obj.insert(QString("report_end_relative_days_in_past"), ::OpenAPI::toJsonValue(m_report_end_relative_days_in_past));
    }
    if (m_date_range.isSet()) {
        obj.insert(QString("date_range"), ::OpenAPI::toJsonValue(m_date_range));
    }
    if (m_report_level.isSet()) {
        obj.insert(QString("report_level"), ::OpenAPI::toJsonValue(m_report_level));
    }
    if (m_report_format.isSet()) {
        obj.insert(QString("report_format"), ::OpenAPI::toJsonValue(m_report_format));
    }
    if (m_columns.size() > 0) {
        obj.insert(QString("columns"), ::OpenAPI::toJsonValue(m_columns));
    }
    if (m_granularity.isSet()) {
        obj.insert(QString("granularity"), ::OpenAPI::toJsonValue(m_granularity));
    }
    if (m_view_window_days_isSet) {
        obj.insert(QString("view_window_days"), ::OpenAPI::toJsonValue(m_view_window_days));
    }
    if (m_click_window_days_isSet) {
        obj.insert(QString("click_window_days"), ::OpenAPI::toJsonValue(m_click_window_days));
    }
    if (m_engagement_window_days_isSet) {
        obj.insert(QString("engagement_window_days"), ::OpenAPI::toJsonValue(m_engagement_window_days));
    }
    if (m_conversion_report_time_type_isSet) {
        obj.insert(QString("conversion_report_time_type"), ::OpenAPI::toJsonValue(m_conversion_report_time_type));
    }
    if (m_filters_json_isSet) {
        obj.insert(QString("filters_json"), ::OpenAPI::toJsonValue(m_filters_json));
    }
    if (m_is_owned_by_user_isSet) {
        obj.insert(QString("is_owned_by_user"), ::OpenAPI::toJsonValue(m_is_owned_by_user));
    }
    if (m_is_scheduled_isSet) {
        obj.insert(QString("is_scheduled"), ::OpenAPI::toJsonValue(m_is_scheduled));
    }
    if (m_creation_source_isSet) {
        obj.insert(QString("creation_source"), ::OpenAPI::toJsonValue(m_creation_source));
    }
    if (m_is_deleted_isSet) {
        obj.insert(QString("is_deleted"), ::OpenAPI::toJsonValue(m_is_deleted));
    }
    if (m_updated_time_isSet) {
        obj.insert(QString("updated_time"), ::OpenAPI::toJsonValue(m_updated_time));
    }
    if (m_custom_column_ids.size() > 0) {
        obj.insert(QString("custom_column_ids"), ::OpenAPI::toJsonValue(m_custom_column_ids));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_ingestion_sources.size() > 0) {
        obj.insert(QString("ingestion_sources"), ::OpenAPI::toJsonValue(m_ingestion_sources));
    }
    return obj;
}

QString OAITemplateResponse::getId() const {
    return m_id;
}
void OAITemplateResponse::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITemplateResponse::is_id_Set() const{
    return m_id_isSet;
}

bool OAITemplateResponse::is_id_Valid() const{
    return m_id_isValid;
}

QString OAITemplateResponse::getAdAccountId() const {
    return m_ad_account_id;
}
void OAITemplateResponse::setAdAccountId(const QString &ad_account_id) {
    m_ad_account_id = ad_account_id;
    m_ad_account_id_isSet = true;
}

bool OAITemplateResponse::is_ad_account_id_Set() const{
    return m_ad_account_id_isSet;
}

bool OAITemplateResponse::is_ad_account_id_Valid() const{
    return m_ad_account_id_isValid;
}

QList<QString> OAITemplateResponse::getAdAccountIds() const {
    return m_ad_account_ids;
}
void OAITemplateResponse::setAdAccountIds(const QList<QString> &ad_account_ids) {
    m_ad_account_ids = ad_account_ids;
    m_ad_account_ids_isSet = true;
}

bool OAITemplateResponse::is_ad_account_ids_Set() const{
    return m_ad_account_ids_isSet;
}

bool OAITemplateResponse::is_ad_account_ids_Valid() const{
    return m_ad_account_ids_isValid;
}

QString OAITemplateResponse::getUserId() const {
    return m_user_id;
}
void OAITemplateResponse::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAITemplateResponse::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAITemplateResponse::is_user_id_Valid() const{
    return m_user_id_isValid;
}

QString OAITemplateResponse::getName() const {
    return m_name;
}
void OAITemplateResponse::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITemplateResponse::is_name_Set() const{
    return m_name_isSet;
}

bool OAITemplateResponse::is_name_Valid() const{
    return m_name_isValid;
}

double OAITemplateResponse::getReportStartRelativeDaysInPast() const {
    return m_report_start_relative_days_in_past;
}
void OAITemplateResponse::setReportStartRelativeDaysInPast(const double &report_start_relative_days_in_past) {
    m_report_start_relative_days_in_past = report_start_relative_days_in_past;
    m_report_start_relative_days_in_past_isSet = true;
}

bool OAITemplateResponse::is_report_start_relative_days_in_past_Set() const{
    return m_report_start_relative_days_in_past_isSet;
}

bool OAITemplateResponse::is_report_start_relative_days_in_past_Valid() const{
    return m_report_start_relative_days_in_past_isValid;
}

double OAITemplateResponse::getReportEndRelativeDaysInPast() const {
    return m_report_end_relative_days_in_past;
}
void OAITemplateResponse::setReportEndRelativeDaysInPast(const double &report_end_relative_days_in_past) {
    m_report_end_relative_days_in_past = report_end_relative_days_in_past;
    m_report_end_relative_days_in_past_isSet = true;
}

bool OAITemplateResponse::is_report_end_relative_days_in_past_Set() const{
    return m_report_end_relative_days_in_past_isSet;
}

bool OAITemplateResponse::is_report_end_relative_days_in_past_Valid() const{
    return m_report_end_relative_days_in_past_isValid;
}

OAITemplateResponse_date_range OAITemplateResponse::getDateRange() const {
    return m_date_range;
}
void OAITemplateResponse::setDateRange(const OAITemplateResponse_date_range &date_range) {
    m_date_range = date_range;
    m_date_range_isSet = true;
}

bool OAITemplateResponse::is_date_range_Set() const{
    return m_date_range_isSet;
}

bool OAITemplateResponse::is_date_range_Valid() const{
    return m_date_range_isValid;
}

OAIMetricsReportingLevel OAITemplateResponse::getReportLevel() const {
    return m_report_level;
}
void OAITemplateResponse::setReportLevel(const OAIMetricsReportingLevel &report_level) {
    m_report_level = report_level;
    m_report_level_isSet = true;
}

bool OAITemplateResponse::is_report_level_Set() const{
    return m_report_level_isSet;
}

bool OAITemplateResponse::is_report_level_Valid() const{
    return m_report_level_isValid;
}

OAIDataOutputFormat OAITemplateResponse::getReportFormat() const {
    return m_report_format;
}
void OAITemplateResponse::setReportFormat(const OAIDataOutputFormat &report_format) {
    m_report_format = report_format;
    m_report_format_isSet = true;
}

bool OAITemplateResponse::is_report_format_Set() const{
    return m_report_format_isSet;
}

bool OAITemplateResponse::is_report_format_Valid() const{
    return m_report_format_isValid;
}

QList<QString> OAITemplateResponse::getColumns() const {
    return m_columns;
}
void OAITemplateResponse::setColumns(const QList<QString> &columns) {
    m_columns = columns;
    m_columns_isSet = true;
}

bool OAITemplateResponse::is_columns_Set() const{
    return m_columns_isSet;
}

bool OAITemplateResponse::is_columns_Valid() const{
    return m_columns_isValid;
}

OAIGranularity OAITemplateResponse::getGranularity() const {
    return m_granularity;
}
void OAITemplateResponse::setGranularity(const OAIGranularity &granularity) {
    m_granularity = granularity;
    m_granularity_isSet = true;
}

bool OAITemplateResponse::is_granularity_Set() const{
    return m_granularity_isSet;
}

bool OAITemplateResponse::is_granularity_Valid() const{
    return m_granularity_isValid;
}

double OAITemplateResponse::getViewWindowDays() const {
    return m_view_window_days;
}
void OAITemplateResponse::setViewWindowDays(const double &view_window_days) {
    m_view_window_days = view_window_days;
    m_view_window_days_isSet = true;
}

bool OAITemplateResponse::is_view_window_days_Set() const{
    return m_view_window_days_isSet;
}

bool OAITemplateResponse::is_view_window_days_Valid() const{
    return m_view_window_days_isValid;
}

double OAITemplateResponse::getClickWindowDays() const {
    return m_click_window_days;
}
void OAITemplateResponse::setClickWindowDays(const double &click_window_days) {
    m_click_window_days = click_window_days;
    m_click_window_days_isSet = true;
}

bool OAITemplateResponse::is_click_window_days_Set() const{
    return m_click_window_days_isSet;
}

bool OAITemplateResponse::is_click_window_days_Valid() const{
    return m_click_window_days_isValid;
}

double OAITemplateResponse::getEngagementWindowDays() const {
    return m_engagement_window_days;
}
void OAITemplateResponse::setEngagementWindowDays(const double &engagement_window_days) {
    m_engagement_window_days = engagement_window_days;
    m_engagement_window_days_isSet = true;
}

bool OAITemplateResponse::is_engagement_window_days_Set() const{
    return m_engagement_window_days_isSet;
}

bool OAITemplateResponse::is_engagement_window_days_Valid() const{
    return m_engagement_window_days_isValid;
}

QString OAITemplateResponse::getConversionReportTimeType() const {
    return m_conversion_report_time_type;
}
void OAITemplateResponse::setConversionReportTimeType(const QString &conversion_report_time_type) {
    m_conversion_report_time_type = conversion_report_time_type;
    m_conversion_report_time_type_isSet = true;
}

bool OAITemplateResponse::is_conversion_report_time_type_Set() const{
    return m_conversion_report_time_type_isSet;
}

bool OAITemplateResponse::is_conversion_report_time_type_Valid() const{
    return m_conversion_report_time_type_isValid;
}

QString OAITemplateResponse::getFiltersJson() const {
    return m_filters_json;
}
void OAITemplateResponse::setFiltersJson(const QString &filters_json) {
    m_filters_json = filters_json;
    m_filters_json_isSet = true;
}

bool OAITemplateResponse::is_filters_json_Set() const{
    return m_filters_json_isSet;
}

bool OAITemplateResponse::is_filters_json_Valid() const{
    return m_filters_json_isValid;
}

bool OAITemplateResponse::isIsOwnedByUser() const {
    return m_is_owned_by_user;
}
void OAITemplateResponse::setIsOwnedByUser(const bool &is_owned_by_user) {
    m_is_owned_by_user = is_owned_by_user;
    m_is_owned_by_user_isSet = true;
}

bool OAITemplateResponse::is_is_owned_by_user_Set() const{
    return m_is_owned_by_user_isSet;
}

bool OAITemplateResponse::is_is_owned_by_user_Valid() const{
    return m_is_owned_by_user_isValid;
}

bool OAITemplateResponse::isIsScheduled() const {
    return m_is_scheduled;
}
void OAITemplateResponse::setIsScheduled(const bool &is_scheduled) {
    m_is_scheduled = is_scheduled;
    m_is_scheduled_isSet = true;
}

bool OAITemplateResponse::is_is_scheduled_Set() const{
    return m_is_scheduled_isSet;
}

bool OAITemplateResponse::is_is_scheduled_Valid() const{
    return m_is_scheduled_isValid;
}

QString OAITemplateResponse::getCreationSource() const {
    return m_creation_source;
}
void OAITemplateResponse::setCreationSource(const QString &creation_source) {
    m_creation_source = creation_source;
    m_creation_source_isSet = true;
}

bool OAITemplateResponse::is_creation_source_Set() const{
    return m_creation_source_isSet;
}

bool OAITemplateResponse::is_creation_source_Valid() const{
    return m_creation_source_isValid;
}

bool OAITemplateResponse::isIsDeleted() const {
    return m_is_deleted;
}
void OAITemplateResponse::setIsDeleted(const bool &is_deleted) {
    m_is_deleted = is_deleted;
    m_is_deleted_isSet = true;
}

bool OAITemplateResponse::is_is_deleted_Set() const{
    return m_is_deleted_isSet;
}

bool OAITemplateResponse::is_is_deleted_Valid() const{
    return m_is_deleted_isValid;
}

double OAITemplateResponse::getUpdatedTime() const {
    return m_updated_time;
}
void OAITemplateResponse::setUpdatedTime(const double &updated_time) {
    m_updated_time = updated_time;
    m_updated_time_isSet = true;
}

bool OAITemplateResponse::is_updated_time_Set() const{
    return m_updated_time_isSet;
}

bool OAITemplateResponse::is_updated_time_Valid() const{
    return m_updated_time_isValid;
}

QList<QString> OAITemplateResponse::getCustomColumnIds() const {
    return m_custom_column_ids;
}
void OAITemplateResponse::setCustomColumnIds(const QList<QString> &custom_column_ids) {
    m_custom_column_ids = custom_column_ids;
    m_custom_column_ids_isSet = true;
}

bool OAITemplateResponse::is_custom_column_ids_Set() const{
    return m_custom_column_ids_isSet;
}

bool OAITemplateResponse::is_custom_column_ids_Valid() const{
    return m_custom_column_ids_isValid;
}

QString OAITemplateResponse::getType() const {
    return m_type;
}
void OAITemplateResponse::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAITemplateResponse::is_type_Set() const{
    return m_type_isSet;
}

bool OAITemplateResponse::is_type_Valid() const{
    return m_type_isValid;
}

QList<QString> OAITemplateResponse::getIngestionSources() const {
    return m_ingestion_sources;
}
void OAITemplateResponse::setIngestionSources(const QList<QString> &ingestion_sources) {
    m_ingestion_sources = ingestion_sources;
    m_ingestion_sources_isSet = true;
}

bool OAITemplateResponse::is_ingestion_sources_Set() const{
    return m_ingestion_sources_isSet;
}

bool OAITemplateResponse::is_ingestion_sources_Valid() const{
    return m_ingestion_sources_isValid;
}

bool OAITemplateResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ad_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ad_account_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_start_relative_days_in_past_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_end_relative_days_in_past_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_range.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_level.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_format.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_columns.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_granularity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_view_window_days_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_click_window_days_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_engagement_window_days_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conversion_report_time_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filters_json_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_owned_by_user_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_scheduled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_deleted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_column_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ingestion_sources.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITemplateResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
