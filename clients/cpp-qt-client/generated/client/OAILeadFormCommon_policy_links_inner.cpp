/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILeadFormCommon_policy_links_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILeadFormCommon_policy_links_inner::OAILeadFormCommon_policy_links_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILeadFormCommon_policy_links_inner::OAILeadFormCommon_policy_links_inner() {
    this->initializeModel();
}

OAILeadFormCommon_policy_links_inner::~OAILeadFormCommon_policy_links_inner() {}

void OAILeadFormCommon_policy_links_inner::initializeModel() {

    m_label_isSet = false;
    m_label_isValid = false;

    m_link_isSet = false;
    m_link_isValid = false;
}

void OAILeadFormCommon_policy_links_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILeadFormCommon_policy_links_inner::fromJsonObject(QJsonObject json) {

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;

    m_link_isValid = ::OpenAPI::fromJsonValue(m_link, json[QString("link")]);
    m_link_isSet = !json[QString("link")].isNull() && m_link_isValid;
}

QString OAILeadFormCommon_policy_links_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILeadFormCommon_policy_links_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_label_isSet) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(m_label));
    }
    if (m_link_isSet) {
        obj.insert(QString("link"), ::OpenAPI::toJsonValue(m_link));
    }
    return obj;
}

QString OAILeadFormCommon_policy_links_inner::getLabel() const {
    return m_label;
}
void OAILeadFormCommon_policy_links_inner::setLabel(const QString &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAILeadFormCommon_policy_links_inner::is_label_Set() const{
    return m_label_isSet;
}

bool OAILeadFormCommon_policy_links_inner::is_label_Valid() const{
    return m_label_isValid;
}

QString OAILeadFormCommon_policy_links_inner::getLink() const {
    return m_link;
}
void OAILeadFormCommon_policy_links_inner::setLink(const QString &link) {
    m_link = link;
    m_link_isSet = true;
}

bool OAILeadFormCommon_policy_links_inner::is_link_Set() const{
    return m_link_isSet;
}

bool OAILeadFormCommon_policy_links_inner::is_link_Valid() const{
    return m_link_isValid;
}

bool OAILeadFormCommon_policy_links_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILeadFormCommon_policy_links_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
