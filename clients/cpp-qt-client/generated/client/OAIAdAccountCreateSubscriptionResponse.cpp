/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAdAccountCreateSubscriptionResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAdAccountCreateSubscriptionResponse::OAIAdAccountCreateSubscriptionResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAdAccountCreateSubscriptionResponse::OAIAdAccountCreateSubscriptionResponse() {
    this->initializeModel();
}

OAIAdAccountCreateSubscriptionResponse::~OAIAdAccountCreateSubscriptionResponse() {}

void OAIAdAccountCreateSubscriptionResponse::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_cryptographic_key_isSet = false;
    m_cryptographic_key_isValid = false;

    m_cryptographic_algorithm_isSet = false;
    m_cryptographic_algorithm_isValid = false;

    m_created_time_isSet = false;
    m_created_time_isValid = false;
}

void OAIAdAccountCreateSubscriptionResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAdAccountCreateSubscriptionResponse::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_cryptographic_key_isValid = ::OpenAPI::fromJsonValue(m_cryptographic_key, json[QString("cryptographic_key")]);
    m_cryptographic_key_isSet = !json[QString("cryptographic_key")].isNull() && m_cryptographic_key_isValid;

    m_cryptographic_algorithm_isValid = ::OpenAPI::fromJsonValue(m_cryptographic_algorithm, json[QString("cryptographic_algorithm")]);
    m_cryptographic_algorithm_isSet = !json[QString("cryptographic_algorithm")].isNull() && m_cryptographic_algorithm_isValid;

    m_created_time_isValid = ::OpenAPI::fromJsonValue(m_created_time, json[QString("created_time")]);
    m_created_time_isSet = !json[QString("created_time")].isNull() && m_created_time_isValid;
}

QString OAIAdAccountCreateSubscriptionResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAdAccountCreateSubscriptionResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_cryptographic_key_isSet) {
        obj.insert(QString("cryptographic_key"), ::OpenAPI::toJsonValue(m_cryptographic_key));
    }
    if (m_cryptographic_algorithm_isSet) {
        obj.insert(QString("cryptographic_algorithm"), ::OpenAPI::toJsonValue(m_cryptographic_algorithm));
    }
    if (m_created_time_isSet) {
        obj.insert(QString("created_time"), ::OpenAPI::toJsonValue(m_created_time));
    }
    return obj;
}

QString OAIAdAccountCreateSubscriptionResponse::getId() const {
    return m_id;
}
void OAIAdAccountCreateSubscriptionResponse::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAdAccountCreateSubscriptionResponse::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAdAccountCreateSubscriptionResponse::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIAdAccountCreateSubscriptionResponse::getCryptographicKey() const {
    return m_cryptographic_key;
}
void OAIAdAccountCreateSubscriptionResponse::setCryptographicKey(const QString &cryptographic_key) {
    m_cryptographic_key = cryptographic_key;
    m_cryptographic_key_isSet = true;
}

bool OAIAdAccountCreateSubscriptionResponse::is_cryptographic_key_Set() const{
    return m_cryptographic_key_isSet;
}

bool OAIAdAccountCreateSubscriptionResponse::is_cryptographic_key_Valid() const{
    return m_cryptographic_key_isValid;
}

QString OAIAdAccountCreateSubscriptionResponse::getCryptographicAlgorithm() const {
    return m_cryptographic_algorithm;
}
void OAIAdAccountCreateSubscriptionResponse::setCryptographicAlgorithm(const QString &cryptographic_algorithm) {
    m_cryptographic_algorithm = cryptographic_algorithm;
    m_cryptographic_algorithm_isSet = true;
}

bool OAIAdAccountCreateSubscriptionResponse::is_cryptographic_algorithm_Set() const{
    return m_cryptographic_algorithm_isSet;
}

bool OAIAdAccountCreateSubscriptionResponse::is_cryptographic_algorithm_Valid() const{
    return m_cryptographic_algorithm_isValid;
}

qint32 OAIAdAccountCreateSubscriptionResponse::getCreatedTime() const {
    return m_created_time;
}
void OAIAdAccountCreateSubscriptionResponse::setCreatedTime(const qint32 &created_time) {
    m_created_time = created_time;
    m_created_time_isSet = true;
}

bool OAIAdAccountCreateSubscriptionResponse::is_created_time_Set() const{
    return m_created_time_isSet;
}

bool OAIAdAccountCreateSubscriptionResponse::is_created_time_Valid() const{
    return m_created_time_isValid;
}

bool OAIAdAccountCreateSubscriptionResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cryptographic_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cryptographic_algorithm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAdAccountCreateSubscriptionResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
