/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateInvitesResultsResponseArray_items_inner_invite.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateInvitesResultsResponseArray_items_inner_invite::OAICreateInvitesResultsResponseArray_items_inner_invite(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateInvitesResultsResponseArray_items_inner_invite::OAICreateInvitesResultsResponseArray_items_inner_invite() {
    this->initializeModel();
}

OAICreateInvitesResultsResponseArray_items_inner_invite::~OAICreateInvitesResultsResponseArray_items_inner_invite() {}

void OAICreateInvitesResultsResponseArray_items_inner_invite::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAICreateInvitesResultsResponseArray_items_inner_invite::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateInvitesResultsResponseArray_items_inner_invite::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAICreateInvitesResultsResponseArray_items_inner_invite::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateInvitesResultsResponseArray_items_inner_invite::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

QString OAICreateInvitesResultsResponseArray_items_inner_invite::getId() const {
    return m_id;
}
void OAICreateInvitesResultsResponseArray_items_inner_invite::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICreateInvitesResultsResponseArray_items_inner_invite::is_id_Set() const{
    return m_id_isSet;
}

bool OAICreateInvitesResultsResponseArray_items_inner_invite::is_id_Valid() const{
    return m_id_isValid;
}

OAIBusinessAccessUserSummary OAICreateInvitesResultsResponseArray_items_inner_invite::getUser() const {
    return m_user;
}
void OAICreateInvitesResultsResponseArray_items_inner_invite::setUser(const OAIBusinessAccessUserSummary &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAICreateInvitesResultsResponseArray_items_inner_invite::is_user_Set() const{
    return m_user_isSet;
}

bool OAICreateInvitesResultsResponseArray_items_inner_invite::is_user_Valid() const{
    return m_user_isValid;
}

bool OAICreateInvitesResultsResponseArray_items_inner_invite::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateInvitesResultsResponseArray_items_inner_invite::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
