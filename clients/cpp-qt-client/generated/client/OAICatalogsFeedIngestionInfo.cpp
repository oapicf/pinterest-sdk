/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICatalogsFeedIngestionInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICatalogsFeedIngestionInfo::OAICatalogsFeedIngestionInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICatalogsFeedIngestionInfo::OAICatalogsFeedIngestionInfo() {
    this->initializeModel();
}

OAICatalogsFeedIngestionInfo::~OAICatalogsFeedIngestionInfo() {}

void OAICatalogsFeedIngestionInfo::initializeModel() {

    m_in_stock_isSet = false;
    m_in_stock_isValid = false;

    m_out_of_stock_isSet = false;
    m_out_of_stock_isValid = false;

    m_preorder_isSet = false;
    m_preorder_isValid = false;
}

void OAICatalogsFeedIngestionInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICatalogsFeedIngestionInfo::fromJsonObject(QJsonObject json) {

    m_in_stock_isValid = ::OpenAPI::fromJsonValue(m_in_stock, json[QString("IN_STOCK")]);
    m_in_stock_isSet = !json[QString("IN_STOCK")].isNull() && m_in_stock_isValid;

    m_out_of_stock_isValid = ::OpenAPI::fromJsonValue(m_out_of_stock, json[QString("OUT_OF_STOCK")]);
    m_out_of_stock_isSet = !json[QString("OUT_OF_STOCK")].isNull() && m_out_of_stock_isValid;

    m_preorder_isValid = ::OpenAPI::fromJsonValue(m_preorder, json[QString("PREORDER")]);
    m_preorder_isSet = !json[QString("PREORDER")].isNull() && m_preorder_isValid;
}

QString OAICatalogsFeedIngestionInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICatalogsFeedIngestionInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_in_stock_isSet) {
        obj.insert(QString("IN_STOCK"), ::OpenAPI::toJsonValue(m_in_stock));
    }
    if (m_out_of_stock_isSet) {
        obj.insert(QString("OUT_OF_STOCK"), ::OpenAPI::toJsonValue(m_out_of_stock));
    }
    if (m_preorder_isSet) {
        obj.insert(QString("PREORDER"), ::OpenAPI::toJsonValue(m_preorder));
    }
    return obj;
}

qint32 OAICatalogsFeedIngestionInfo::getInStock() const {
    return m_in_stock;
}
void OAICatalogsFeedIngestionInfo::setInStock(const qint32 &in_stock) {
    m_in_stock = in_stock;
    m_in_stock_isSet = true;
}

bool OAICatalogsFeedIngestionInfo::is_in_stock_Set() const{
    return m_in_stock_isSet;
}

bool OAICatalogsFeedIngestionInfo::is_in_stock_Valid() const{
    return m_in_stock_isValid;
}

qint32 OAICatalogsFeedIngestionInfo::getOutOfStock() const {
    return m_out_of_stock;
}
void OAICatalogsFeedIngestionInfo::setOutOfStock(const qint32 &out_of_stock) {
    m_out_of_stock = out_of_stock;
    m_out_of_stock_isSet = true;
}

bool OAICatalogsFeedIngestionInfo::is_out_of_stock_Set() const{
    return m_out_of_stock_isSet;
}

bool OAICatalogsFeedIngestionInfo::is_out_of_stock_Valid() const{
    return m_out_of_stock_isValid;
}

qint32 OAICatalogsFeedIngestionInfo::getPreorder() const {
    return m_preorder;
}
void OAICatalogsFeedIngestionInfo::setPreorder(const qint32 &preorder) {
    m_preorder = preorder;
    m_preorder_isSet = true;
}

bool OAICatalogsFeedIngestionInfo::is_preorder_Set() const{
    return m_preorder_isSet;
}

bool OAICatalogsFeedIngestionInfo::is_preorder_Valid() const{
    return m_preorder_isValid;
}

bool OAICatalogsFeedIngestionInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_in_stock_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_out_of_stock_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preorder_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICatalogsFeedIngestionInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
