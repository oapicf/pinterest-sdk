/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILinkedBusiness.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILinkedBusiness::OAILinkedBusiness(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILinkedBusiness::OAILinkedBusiness() {
    this->initializeModel();
}

OAILinkedBusiness::~OAILinkedBusiness() {}

void OAILinkedBusiness::initializeModel() {

    m_username_isSet = false;
    m_username_isValid = false;

    m_image_small_url_isSet = false;
    m_image_small_url_isValid = false;

    m_image_medium_url_isSet = false;
    m_image_medium_url_isValid = false;

    m_image_large_url_isSet = false;
    m_image_large_url_isValid = false;

    m_image_xlarge_url_isSet = false;
    m_image_xlarge_url_isValid = false;
}

void OAILinkedBusiness::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILinkedBusiness::fromJsonObject(QJsonObject json) {

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;

    m_image_small_url_isValid = ::OpenAPI::fromJsonValue(m_image_small_url, json[QString("image_small_url")]);
    m_image_small_url_isSet = !json[QString("image_small_url")].isNull() && m_image_small_url_isValid;

    m_image_medium_url_isValid = ::OpenAPI::fromJsonValue(m_image_medium_url, json[QString("image_medium_url")]);
    m_image_medium_url_isSet = !json[QString("image_medium_url")].isNull() && m_image_medium_url_isValid;

    m_image_large_url_isValid = ::OpenAPI::fromJsonValue(m_image_large_url, json[QString("image_large_url")]);
    m_image_large_url_isSet = !json[QString("image_large_url")].isNull() && m_image_large_url_isValid;

    m_image_xlarge_url_isValid = ::OpenAPI::fromJsonValue(m_image_xlarge_url, json[QString("image_xlarge_url")]);
    m_image_xlarge_url_isSet = !json[QString("image_xlarge_url")].isNull() && m_image_xlarge_url_isValid;
}

QString OAILinkedBusiness::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILinkedBusiness::asJsonObject() const {
    QJsonObject obj;
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(m_username));
    }
    if (m_image_small_url_isSet) {
        obj.insert(QString("image_small_url"), ::OpenAPI::toJsonValue(m_image_small_url));
    }
    if (m_image_medium_url_isSet) {
        obj.insert(QString("image_medium_url"), ::OpenAPI::toJsonValue(m_image_medium_url));
    }
    if (m_image_large_url_isSet) {
        obj.insert(QString("image_large_url"), ::OpenAPI::toJsonValue(m_image_large_url));
    }
    if (m_image_xlarge_url_isSet) {
        obj.insert(QString("image_xlarge_url"), ::OpenAPI::toJsonValue(m_image_xlarge_url));
    }
    return obj;
}

QString OAILinkedBusiness::getUsername() const {
    return m_username;
}
void OAILinkedBusiness::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAILinkedBusiness::is_username_Set() const{
    return m_username_isSet;
}

bool OAILinkedBusiness::is_username_Valid() const{
    return m_username_isValid;
}

QString OAILinkedBusiness::getImageSmallUrl() const {
    return m_image_small_url;
}
void OAILinkedBusiness::setImageSmallUrl(const QString &image_small_url) {
    m_image_small_url = image_small_url;
    m_image_small_url_isSet = true;
}

bool OAILinkedBusiness::is_image_small_url_Set() const{
    return m_image_small_url_isSet;
}

bool OAILinkedBusiness::is_image_small_url_Valid() const{
    return m_image_small_url_isValid;
}

QString OAILinkedBusiness::getImageMediumUrl() const {
    return m_image_medium_url;
}
void OAILinkedBusiness::setImageMediumUrl(const QString &image_medium_url) {
    m_image_medium_url = image_medium_url;
    m_image_medium_url_isSet = true;
}

bool OAILinkedBusiness::is_image_medium_url_Set() const{
    return m_image_medium_url_isSet;
}

bool OAILinkedBusiness::is_image_medium_url_Valid() const{
    return m_image_medium_url_isValid;
}

QString OAILinkedBusiness::getImageLargeUrl() const {
    return m_image_large_url;
}
void OAILinkedBusiness::setImageLargeUrl(const QString &image_large_url) {
    m_image_large_url = image_large_url;
    m_image_large_url_isSet = true;
}

bool OAILinkedBusiness::is_image_large_url_Set() const{
    return m_image_large_url_isSet;
}

bool OAILinkedBusiness::is_image_large_url_Valid() const{
    return m_image_large_url_isValid;
}

QString OAILinkedBusiness::getImageXlargeUrl() const {
    return m_image_xlarge_url;
}
void OAILinkedBusiness::setImageXlargeUrl(const QString &image_xlarge_url) {
    m_image_xlarge_url = image_xlarge_url;
    m_image_xlarge_url_isSet = true;
}

bool OAILinkedBusiness::is_image_xlarge_url_Set() const{
    return m_image_xlarge_url_isSet;
}

bool OAILinkedBusiness::is_image_xlarge_url_Valid() const{
    return m_image_xlarge_url_isValid;
}

bool OAILinkedBusiness::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_small_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_medium_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_large_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_xlarge_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILinkedBusiness::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
