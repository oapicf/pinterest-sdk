/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAdGroupResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAdGroupResponse::OAIAdGroupResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAdGroupResponse::OAIAdGroupResponse() {
    this->initializeModel();
}

OAIAdGroupResponse::~OAIAdGroupResponse() {}

void OAIAdGroupResponse::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_budget_in_micro_currency_isSet = false;
    m_budget_in_micro_currency_isValid = false;

    m_bid_in_micro_currency_isSet = false;
    m_bid_in_micro_currency_isValid = false;

    m_optimization_goal_metadata_isSet = false;
    m_optimization_goal_metadata_isValid = false;

    m_budget_type_isSet = false;
    m_budget_type_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_targeting_spec_isSet = false;
    m_targeting_spec_isValid = false;

    m_lifetime_frequency_cap_isSet = false;
    m_lifetime_frequency_cap_isValid = false;

    m_tracking_urls_isSet = false;
    m_tracking_urls_isValid = false;

    m_auto_targeting_enabled_isSet = false;
    m_auto_targeting_enabled_isValid = false;

    m_placement_group_isSet = false;
    m_placement_group_isValid = false;

    m_pacing_delivery_type_isSet = false;
    m_pacing_delivery_type_isValid = false;

    m_campaign_id_isSet = false;
    m_campaign_id_isValid = false;

    m_billable_event_isSet = false;
    m_billable_event_isValid = false;

    m_bid_strategy_type_isSet = false;
    m_bid_strategy_type_isValid = false;

    m_targeting_template_ids_isSet = false;
    m_targeting_template_ids_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_ad_account_id_isSet = false;
    m_ad_account_id_isValid = false;

    m_created_time_isSet = false;
    m_created_time_isValid = false;

    m_updated_time_isSet = false;
    m_updated_time_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_conversion_learning_mode_type_isSet = false;
    m_conversion_learning_mode_type_isValid = false;

    m_summary_status_isSet = false;
    m_summary_status_isValid = false;

    m_feed_profile_id_isSet = false;
    m_feed_profile_id_isValid = false;

    m_dca_assets_isSet = false;
    m_dca_assets_isValid = false;
}

void OAIAdGroupResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAdGroupResponse::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_budget_in_micro_currency_isValid = ::OpenAPI::fromJsonValue(m_budget_in_micro_currency, json[QString("budget_in_micro_currency")]);
    m_budget_in_micro_currency_isSet = !json[QString("budget_in_micro_currency")].isNull() && m_budget_in_micro_currency_isValid;

    m_bid_in_micro_currency_isValid = ::OpenAPI::fromJsonValue(m_bid_in_micro_currency, json[QString("bid_in_micro_currency")]);
    m_bid_in_micro_currency_isSet = !json[QString("bid_in_micro_currency")].isNull() && m_bid_in_micro_currency_isValid;

    m_optimization_goal_metadata_isValid = ::OpenAPI::fromJsonValue(m_optimization_goal_metadata, json[QString("optimization_goal_metadata")]);
    m_optimization_goal_metadata_isSet = !json[QString("optimization_goal_metadata")].isNull() && m_optimization_goal_metadata_isValid;

    m_budget_type_isValid = ::OpenAPI::fromJsonValue(m_budget_type, json[QString("budget_type")]);
    m_budget_type_isSet = !json[QString("budget_type")].isNull() && m_budget_type_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("start_time")]);
    m_start_time_isSet = !json[QString("start_time")].isNull() && m_start_time_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("end_time")]);
    m_end_time_isSet = !json[QString("end_time")].isNull() && m_end_time_isValid;

    m_targeting_spec_isValid = ::OpenAPI::fromJsonValue(m_targeting_spec, json[QString("targeting_spec")]);
    m_targeting_spec_isSet = !json[QString("targeting_spec")].isNull() && m_targeting_spec_isValid;

    m_lifetime_frequency_cap_isValid = ::OpenAPI::fromJsonValue(m_lifetime_frequency_cap, json[QString("lifetime_frequency_cap")]);
    m_lifetime_frequency_cap_isSet = !json[QString("lifetime_frequency_cap")].isNull() && m_lifetime_frequency_cap_isValid;

    m_tracking_urls_isValid = ::OpenAPI::fromJsonValue(m_tracking_urls, json[QString("tracking_urls")]);
    m_tracking_urls_isSet = !json[QString("tracking_urls")].isNull() && m_tracking_urls_isValid;

    m_auto_targeting_enabled_isValid = ::OpenAPI::fromJsonValue(m_auto_targeting_enabled, json[QString("auto_targeting_enabled")]);
    m_auto_targeting_enabled_isSet = !json[QString("auto_targeting_enabled")].isNull() && m_auto_targeting_enabled_isValid;

    m_placement_group_isValid = ::OpenAPI::fromJsonValue(m_placement_group, json[QString("placement_group")]);
    m_placement_group_isSet = !json[QString("placement_group")].isNull() && m_placement_group_isValid;

    m_pacing_delivery_type_isValid = ::OpenAPI::fromJsonValue(m_pacing_delivery_type, json[QString("pacing_delivery_type")]);
    m_pacing_delivery_type_isSet = !json[QString("pacing_delivery_type")].isNull() && m_pacing_delivery_type_isValid;

    m_campaign_id_isValid = ::OpenAPI::fromJsonValue(m_campaign_id, json[QString("campaign_id")]);
    m_campaign_id_isSet = !json[QString("campaign_id")].isNull() && m_campaign_id_isValid;

    m_billable_event_isValid = ::OpenAPI::fromJsonValue(m_billable_event, json[QString("billable_event")]);
    m_billable_event_isSet = !json[QString("billable_event")].isNull() && m_billable_event_isValid;

    m_bid_strategy_type_isValid = ::OpenAPI::fromJsonValue(m_bid_strategy_type, json[QString("bid_strategy_type")]);
    m_bid_strategy_type_isSet = !json[QString("bid_strategy_type")].isNull() && m_bid_strategy_type_isValid;

    m_targeting_template_ids_isValid = ::OpenAPI::fromJsonValue(m_targeting_template_ids, json[QString("targeting_template_ids")]);
    m_targeting_template_ids_isSet = !json[QString("targeting_template_ids")].isNull() && m_targeting_template_ids_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_ad_account_id_isValid = ::OpenAPI::fromJsonValue(m_ad_account_id, json[QString("ad_account_id")]);
    m_ad_account_id_isSet = !json[QString("ad_account_id")].isNull() && m_ad_account_id_isValid;

    m_created_time_isValid = ::OpenAPI::fromJsonValue(m_created_time, json[QString("created_time")]);
    m_created_time_isSet = !json[QString("created_time")].isNull() && m_created_time_isValid;

    m_updated_time_isValid = ::OpenAPI::fromJsonValue(m_updated_time, json[QString("updated_time")]);
    m_updated_time_isSet = !json[QString("updated_time")].isNull() && m_updated_time_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_conversion_learning_mode_type_isValid = ::OpenAPI::fromJsonValue(m_conversion_learning_mode_type, json[QString("conversion_learning_mode_type")]);
    m_conversion_learning_mode_type_isSet = !json[QString("conversion_learning_mode_type")].isNull() && m_conversion_learning_mode_type_isValid;

    m_summary_status_isValid = ::OpenAPI::fromJsonValue(m_summary_status, json[QString("summary_status")]);
    m_summary_status_isSet = !json[QString("summary_status")].isNull() && m_summary_status_isValid;

    m_feed_profile_id_isValid = ::OpenAPI::fromJsonValue(m_feed_profile_id, json[QString("feed_profile_id")]);
    m_feed_profile_id_isSet = !json[QString("feed_profile_id")].isNull() && m_feed_profile_id_isValid;

    m_dca_assets_isValid = ::OpenAPI::fromJsonValue(m_dca_assets, json[QString("dca_assets")]);
    m_dca_assets_isSet = !json[QString("dca_assets")].isNull() && m_dca_assets_isValid;
}

QString OAIAdGroupResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAdGroupResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_budget_in_micro_currency_isSet) {
        obj.insert(QString("budget_in_micro_currency"), ::OpenAPI::toJsonValue(m_budget_in_micro_currency));
    }
    if (m_bid_in_micro_currency_isSet) {
        obj.insert(QString("bid_in_micro_currency"), ::OpenAPI::toJsonValue(m_bid_in_micro_currency));
    }
    if (m_optimization_goal_metadata.isSet()) {
        obj.insert(QString("optimization_goal_metadata"), ::OpenAPI::toJsonValue(m_optimization_goal_metadata));
    }
    if (m_budget_type.isSet()) {
        obj.insert(QString("budget_type"), ::OpenAPI::toJsonValue(m_budget_type));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("start_time"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("end_time"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_targeting_spec.isSet()) {
        obj.insert(QString("targeting_spec"), ::OpenAPI::toJsonValue(m_targeting_spec));
    }
    if (m_lifetime_frequency_cap_isSet) {
        obj.insert(QString("lifetime_frequency_cap"), ::OpenAPI::toJsonValue(m_lifetime_frequency_cap));
    }
    if (m_tracking_urls.isSet()) {
        obj.insert(QString("tracking_urls"), ::OpenAPI::toJsonValue(m_tracking_urls));
    }
    if (m_auto_targeting_enabled_isSet) {
        obj.insert(QString("auto_targeting_enabled"), ::OpenAPI::toJsonValue(m_auto_targeting_enabled));
    }
    if (m_placement_group.isSet()) {
        obj.insert(QString("placement_group"), ::OpenAPI::toJsonValue(m_placement_group));
    }
    if (m_pacing_delivery_type.isSet()) {
        obj.insert(QString("pacing_delivery_type"), ::OpenAPI::toJsonValue(m_pacing_delivery_type));
    }
    if (m_campaign_id_isSet) {
        obj.insert(QString("campaign_id"), ::OpenAPI::toJsonValue(m_campaign_id));
    }
    if (m_billable_event.isSet()) {
        obj.insert(QString("billable_event"), ::OpenAPI::toJsonValue(m_billable_event));
    }
    if (m_bid_strategy_type_isSet) {
        obj.insert(QString("bid_strategy_type"), ::OpenAPI::toJsonValue(m_bid_strategy_type));
    }
    if (m_targeting_template_ids.size() > 0) {
        obj.insert(QString("targeting_template_ids"), ::OpenAPI::toJsonValue(m_targeting_template_ids));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_ad_account_id_isSet) {
        obj.insert(QString("ad_account_id"), ::OpenAPI::toJsonValue(m_ad_account_id));
    }
    if (m_created_time_isSet) {
        obj.insert(QString("created_time"), ::OpenAPI::toJsonValue(m_created_time));
    }
    if (m_updated_time_isSet) {
        obj.insert(QString("updated_time"), ::OpenAPI::toJsonValue(m_updated_time));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_conversion_learning_mode_type_isSet) {
        obj.insert(QString("conversion_learning_mode_type"), ::OpenAPI::toJsonValue(m_conversion_learning_mode_type));
    }
    if (m_summary_status.isSet()) {
        obj.insert(QString("summary_status"), ::OpenAPI::toJsonValue(m_summary_status));
    }
    if (m_feed_profile_id_isSet) {
        obj.insert(QString("feed_profile_id"), ::OpenAPI::toJsonValue(m_feed_profile_id));
    }
    if (m_dca_assets_isSet) {
        obj.insert(QString("dca_assets"), ::OpenAPI::toJsonValue(m_dca_assets));
    }
    return obj;
}

QString OAIAdGroupResponse::getName() const {
    return m_name;
}
void OAIAdGroupResponse::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAdGroupResponse::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAdGroupResponse::is_name_Valid() const{
    return m_name_isValid;
}

OAIEntityStatus OAIAdGroupResponse::getStatus() const {
    return m_status;
}
void OAIAdGroupResponse::setStatus(const OAIEntityStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIAdGroupResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIAdGroupResponse::is_status_Valid() const{
    return m_status_isValid;
}

qint32 OAIAdGroupResponse::getBudgetInMicroCurrency() const {
    return m_budget_in_micro_currency;
}
void OAIAdGroupResponse::setBudgetInMicroCurrency(const qint32 &budget_in_micro_currency) {
    m_budget_in_micro_currency = budget_in_micro_currency;
    m_budget_in_micro_currency_isSet = true;
}

bool OAIAdGroupResponse::is_budget_in_micro_currency_Set() const{
    return m_budget_in_micro_currency_isSet;
}

bool OAIAdGroupResponse::is_budget_in_micro_currency_Valid() const{
    return m_budget_in_micro_currency_isValid;
}

qint32 OAIAdGroupResponse::getBidInMicroCurrency() const {
    return m_bid_in_micro_currency;
}
void OAIAdGroupResponse::setBidInMicroCurrency(const qint32 &bid_in_micro_currency) {
    m_bid_in_micro_currency = bid_in_micro_currency;
    m_bid_in_micro_currency_isSet = true;
}

bool OAIAdGroupResponse::is_bid_in_micro_currency_Set() const{
    return m_bid_in_micro_currency_isSet;
}

bool OAIAdGroupResponse::is_bid_in_micro_currency_Valid() const{
    return m_bid_in_micro_currency_isValid;
}

OAIOptimizationGoalMetadata OAIAdGroupResponse::getOptimizationGoalMetadata() const {
    return m_optimization_goal_metadata;
}
void OAIAdGroupResponse::setOptimizationGoalMetadata(const OAIOptimizationGoalMetadata &optimization_goal_metadata) {
    m_optimization_goal_metadata = optimization_goal_metadata;
    m_optimization_goal_metadata_isSet = true;
}

bool OAIAdGroupResponse::is_optimization_goal_metadata_Set() const{
    return m_optimization_goal_metadata_isSet;
}

bool OAIAdGroupResponse::is_optimization_goal_metadata_Valid() const{
    return m_optimization_goal_metadata_isValid;
}

OAIBudgetType OAIAdGroupResponse::getBudgetType() const {
    return m_budget_type;
}
void OAIAdGroupResponse::setBudgetType(const OAIBudgetType &budget_type) {
    m_budget_type = budget_type;
    m_budget_type_isSet = true;
}

bool OAIAdGroupResponse::is_budget_type_Set() const{
    return m_budget_type_isSet;
}

bool OAIAdGroupResponse::is_budget_type_Valid() const{
    return m_budget_type_isValid;
}

qint32 OAIAdGroupResponse::getStartTime() const {
    return m_start_time;
}
void OAIAdGroupResponse::setStartTime(const qint32 &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIAdGroupResponse::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIAdGroupResponse::is_start_time_Valid() const{
    return m_start_time_isValid;
}

qint32 OAIAdGroupResponse::getEndTime() const {
    return m_end_time;
}
void OAIAdGroupResponse::setEndTime(const qint32 &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIAdGroupResponse::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIAdGroupResponse::is_end_time_Valid() const{
    return m_end_time_isValid;
}

OAITargetingSpec OAIAdGroupResponse::getTargetingSpec() const {
    return m_targeting_spec;
}
void OAIAdGroupResponse::setTargetingSpec(const OAITargetingSpec &targeting_spec) {
    m_targeting_spec = targeting_spec;
    m_targeting_spec_isSet = true;
}

bool OAIAdGroupResponse::is_targeting_spec_Set() const{
    return m_targeting_spec_isSet;
}

bool OAIAdGroupResponse::is_targeting_spec_Valid() const{
    return m_targeting_spec_isValid;
}

qint32 OAIAdGroupResponse::getLifetimeFrequencyCap() const {
    return m_lifetime_frequency_cap;
}
void OAIAdGroupResponse::setLifetimeFrequencyCap(const qint32 &lifetime_frequency_cap) {
    m_lifetime_frequency_cap = lifetime_frequency_cap;
    m_lifetime_frequency_cap_isSet = true;
}

bool OAIAdGroupResponse::is_lifetime_frequency_cap_Set() const{
    return m_lifetime_frequency_cap_isSet;
}

bool OAIAdGroupResponse::is_lifetime_frequency_cap_Valid() const{
    return m_lifetime_frequency_cap_isValid;
}

OAITrackingUrls OAIAdGroupResponse::getTrackingUrls() const {
    return m_tracking_urls;
}
void OAIAdGroupResponse::setTrackingUrls(const OAITrackingUrls &tracking_urls) {
    m_tracking_urls = tracking_urls;
    m_tracking_urls_isSet = true;
}

bool OAIAdGroupResponse::is_tracking_urls_Set() const{
    return m_tracking_urls_isSet;
}

bool OAIAdGroupResponse::is_tracking_urls_Valid() const{
    return m_tracking_urls_isValid;
}

bool OAIAdGroupResponse::isAutoTargetingEnabled() const {
    return m_auto_targeting_enabled;
}
void OAIAdGroupResponse::setAutoTargetingEnabled(const bool &auto_targeting_enabled) {
    m_auto_targeting_enabled = auto_targeting_enabled;
    m_auto_targeting_enabled_isSet = true;
}

bool OAIAdGroupResponse::is_auto_targeting_enabled_Set() const{
    return m_auto_targeting_enabled_isSet;
}

bool OAIAdGroupResponse::is_auto_targeting_enabled_Valid() const{
    return m_auto_targeting_enabled_isValid;
}

OAIPlacementGroupType OAIAdGroupResponse::getPlacementGroup() const {
    return m_placement_group;
}
void OAIAdGroupResponse::setPlacementGroup(const OAIPlacementGroupType &placement_group) {
    m_placement_group = placement_group;
    m_placement_group_isSet = true;
}

bool OAIAdGroupResponse::is_placement_group_Set() const{
    return m_placement_group_isSet;
}

bool OAIAdGroupResponse::is_placement_group_Valid() const{
    return m_placement_group_isValid;
}

OAIPacingDeliveryType OAIAdGroupResponse::getPacingDeliveryType() const {
    return m_pacing_delivery_type;
}
void OAIAdGroupResponse::setPacingDeliveryType(const OAIPacingDeliveryType &pacing_delivery_type) {
    m_pacing_delivery_type = pacing_delivery_type;
    m_pacing_delivery_type_isSet = true;
}

bool OAIAdGroupResponse::is_pacing_delivery_type_Set() const{
    return m_pacing_delivery_type_isSet;
}

bool OAIAdGroupResponse::is_pacing_delivery_type_Valid() const{
    return m_pacing_delivery_type_isValid;
}

QString OAIAdGroupResponse::getCampaignId() const {
    return m_campaign_id;
}
void OAIAdGroupResponse::setCampaignId(const QString &campaign_id) {
    m_campaign_id = campaign_id;
    m_campaign_id_isSet = true;
}

bool OAIAdGroupResponse::is_campaign_id_Set() const{
    return m_campaign_id_isSet;
}

bool OAIAdGroupResponse::is_campaign_id_Valid() const{
    return m_campaign_id_isValid;
}

OAIActionType OAIAdGroupResponse::getBillableEvent() const {
    return m_billable_event;
}
void OAIAdGroupResponse::setBillableEvent(const OAIActionType &billable_event) {
    m_billable_event = billable_event;
    m_billable_event_isSet = true;
}

bool OAIAdGroupResponse::is_billable_event_Set() const{
    return m_billable_event_isSet;
}

bool OAIAdGroupResponse::is_billable_event_Valid() const{
    return m_billable_event_isValid;
}

QString OAIAdGroupResponse::getBidStrategyType() const {
    return m_bid_strategy_type;
}
void OAIAdGroupResponse::setBidStrategyType(const QString &bid_strategy_type) {
    m_bid_strategy_type = bid_strategy_type;
    m_bid_strategy_type_isSet = true;
}

bool OAIAdGroupResponse::is_bid_strategy_type_Set() const{
    return m_bid_strategy_type_isSet;
}

bool OAIAdGroupResponse::is_bid_strategy_type_Valid() const{
    return m_bid_strategy_type_isValid;
}

QList<QString> OAIAdGroupResponse::getTargetingTemplateIds() const {
    return m_targeting_template_ids;
}
void OAIAdGroupResponse::setTargetingTemplateIds(const QList<QString> &targeting_template_ids) {
    m_targeting_template_ids = targeting_template_ids;
    m_targeting_template_ids_isSet = true;
}

bool OAIAdGroupResponse::is_targeting_template_ids_Set() const{
    return m_targeting_template_ids_isSet;
}

bool OAIAdGroupResponse::is_targeting_template_ids_Valid() const{
    return m_targeting_template_ids_isValid;
}

QString OAIAdGroupResponse::getId() const {
    return m_id;
}
void OAIAdGroupResponse::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAdGroupResponse::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAdGroupResponse::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIAdGroupResponse::getAdAccountId() const {
    return m_ad_account_id;
}
void OAIAdGroupResponse::setAdAccountId(const QString &ad_account_id) {
    m_ad_account_id = ad_account_id;
    m_ad_account_id_isSet = true;
}

bool OAIAdGroupResponse::is_ad_account_id_Set() const{
    return m_ad_account_id_isSet;
}

bool OAIAdGroupResponse::is_ad_account_id_Valid() const{
    return m_ad_account_id_isValid;
}

qint32 OAIAdGroupResponse::getCreatedTime() const {
    return m_created_time;
}
void OAIAdGroupResponse::setCreatedTime(const qint32 &created_time) {
    m_created_time = created_time;
    m_created_time_isSet = true;
}

bool OAIAdGroupResponse::is_created_time_Set() const{
    return m_created_time_isSet;
}

bool OAIAdGroupResponse::is_created_time_Valid() const{
    return m_created_time_isValid;
}

qint32 OAIAdGroupResponse::getUpdatedTime() const {
    return m_updated_time;
}
void OAIAdGroupResponse::setUpdatedTime(const qint32 &updated_time) {
    m_updated_time = updated_time;
    m_updated_time_isSet = true;
}

bool OAIAdGroupResponse::is_updated_time_Set() const{
    return m_updated_time_isSet;
}

bool OAIAdGroupResponse::is_updated_time_Valid() const{
    return m_updated_time_isValid;
}

QString OAIAdGroupResponse::getType() const {
    return m_type;
}
void OAIAdGroupResponse::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIAdGroupResponse::is_type_Set() const{
    return m_type_isSet;
}

bool OAIAdGroupResponse::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIAdGroupResponse::getConversionLearningModeType() const {
    return m_conversion_learning_mode_type;
}
void OAIAdGroupResponse::setConversionLearningModeType(const QString &conversion_learning_mode_type) {
    m_conversion_learning_mode_type = conversion_learning_mode_type;
    m_conversion_learning_mode_type_isSet = true;
}

bool OAIAdGroupResponse::is_conversion_learning_mode_type_Set() const{
    return m_conversion_learning_mode_type_isSet;
}

bool OAIAdGroupResponse::is_conversion_learning_mode_type_Valid() const{
    return m_conversion_learning_mode_type_isValid;
}

OAIAdGroupSummaryStatus OAIAdGroupResponse::getSummaryStatus() const {
    return m_summary_status;
}
void OAIAdGroupResponse::setSummaryStatus(const OAIAdGroupSummaryStatus &summary_status) {
    m_summary_status = summary_status;
    m_summary_status_isSet = true;
}

bool OAIAdGroupResponse::is_summary_status_Set() const{
    return m_summary_status_isSet;
}

bool OAIAdGroupResponse::is_summary_status_Valid() const{
    return m_summary_status_isValid;
}

QString OAIAdGroupResponse::getFeedProfileId() const {
    return m_feed_profile_id;
}
void OAIAdGroupResponse::setFeedProfileId(const QString &feed_profile_id) {
    m_feed_profile_id = feed_profile_id;
    m_feed_profile_id_isSet = true;
}

bool OAIAdGroupResponse::is_feed_profile_id_Set() const{
    return m_feed_profile_id_isSet;
}

bool OAIAdGroupResponse::is_feed_profile_id_Valid() const{
    return m_feed_profile_id_isValid;
}

QJsonValue OAIAdGroupResponse::getDcaAssets() const {
    return m_dca_assets;
}
void OAIAdGroupResponse::setDcaAssets(const QJsonValue &dca_assets) {
    m_dca_assets = dca_assets;
    m_dca_assets_isSet = true;
}

bool OAIAdGroupResponse::is_dca_assets_Set() const{
    return m_dca_assets_isSet;
}

bool OAIAdGroupResponse::is_dca_assets_Valid() const{
    return m_dca_assets_isValid;
}

bool OAIAdGroupResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_budget_in_micro_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bid_in_micro_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_optimization_goal_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_budget_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_targeting_spec.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lifetime_frequency_cap_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tracking_urls.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_targeting_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_placement_group.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pacing_delivery_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_campaign_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_billable_event.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_bid_strategy_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_targeting_template_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ad_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conversion_learning_mode_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_summary_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_feed_profile_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dca_assets_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAdGroupResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
