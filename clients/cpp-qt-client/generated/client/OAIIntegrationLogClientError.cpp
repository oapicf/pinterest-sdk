/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIntegrationLogClientError.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIntegrationLogClientError::OAIIntegrationLogClientError(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIntegrationLogClientError::OAIIntegrationLogClientError() {
    this->initializeModel();
}

OAIIntegrationLogClientError::~OAIIntegrationLogClientError() {}

void OAIIntegrationLogClientError::initializeModel() {

    m_cause_isSet = false;
    m_cause_isValid = false;

    m_column_number_isSet = false;
    m_column_number_isValid = false;

    m_file_name_isSet = false;
    m_file_name_isValid = false;

    m_line_number_isSet = false;
    m_line_number_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_message_detail_isSet = false;
    m_message_detail_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_stack_trace_isSet = false;
    m_stack_trace_isValid = false;
}

void OAIIntegrationLogClientError::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIntegrationLogClientError::fromJsonObject(QJsonObject json) {

    m_cause_isValid = ::OpenAPI::fromJsonValue(m_cause, json[QString("cause")]);
    m_cause_isSet = !json[QString("cause")].isNull() && m_cause_isValid;

    m_column_number_isValid = ::OpenAPI::fromJsonValue(m_column_number, json[QString("column_number")]);
    m_column_number_isSet = !json[QString("column_number")].isNull() && m_column_number_isValid;

    m_file_name_isValid = ::OpenAPI::fromJsonValue(m_file_name, json[QString("file_name")]);
    m_file_name_isSet = !json[QString("file_name")].isNull() && m_file_name_isValid;

    m_line_number_isValid = ::OpenAPI::fromJsonValue(m_line_number, json[QString("line_number")]);
    m_line_number_isSet = !json[QString("line_number")].isNull() && m_line_number_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_message_detail_isValid = ::OpenAPI::fromJsonValue(m_message_detail, json[QString("message_detail")]);
    m_message_detail_isSet = !json[QString("message_detail")].isNull() && m_message_detail_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("number")]);
    m_number_isSet = !json[QString("number")].isNull() && m_number_isValid;

    m_stack_trace_isValid = ::OpenAPI::fromJsonValue(m_stack_trace, json[QString("stack_trace")]);
    m_stack_trace_isSet = !json[QString("stack_trace")].isNull() && m_stack_trace_isValid;
}

QString OAIIntegrationLogClientError::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIntegrationLogClientError::asJsonObject() const {
    QJsonObject obj;
    if (m_cause_isSet) {
        obj.insert(QString("cause"), ::OpenAPI::toJsonValue(m_cause));
    }
    if (m_column_number_isSet) {
        obj.insert(QString("column_number"), ::OpenAPI::toJsonValue(m_column_number));
    }
    if (m_file_name_isSet) {
        obj.insert(QString("file_name"), ::OpenAPI::toJsonValue(m_file_name));
    }
    if (m_line_number_isSet) {
        obj.insert(QString("line_number"), ::OpenAPI::toJsonValue(m_line_number));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_message_detail_isSet) {
        obj.insert(QString("message_detail"), ::OpenAPI::toJsonValue(m_message_detail));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_number_isSet) {
        obj.insert(QString("number"), ::OpenAPI::toJsonValue(m_number));
    }
    if (m_stack_trace_isSet) {
        obj.insert(QString("stack_trace"), ::OpenAPI::toJsonValue(m_stack_trace));
    }
    return obj;
}

QString OAIIntegrationLogClientError::getCause() const {
    return m_cause;
}
void OAIIntegrationLogClientError::setCause(const QString &cause) {
    m_cause = cause;
    m_cause_isSet = true;
}

bool OAIIntegrationLogClientError::is_cause_Set() const{
    return m_cause_isSet;
}

bool OAIIntegrationLogClientError::is_cause_Valid() const{
    return m_cause_isValid;
}

qint32 OAIIntegrationLogClientError::getColumnNumber() const {
    return m_column_number;
}
void OAIIntegrationLogClientError::setColumnNumber(const qint32 &column_number) {
    m_column_number = column_number;
    m_column_number_isSet = true;
}

bool OAIIntegrationLogClientError::is_column_number_Set() const{
    return m_column_number_isSet;
}

bool OAIIntegrationLogClientError::is_column_number_Valid() const{
    return m_column_number_isValid;
}

QString OAIIntegrationLogClientError::getFileName() const {
    return m_file_name;
}
void OAIIntegrationLogClientError::setFileName(const QString &file_name) {
    m_file_name = file_name;
    m_file_name_isSet = true;
}

bool OAIIntegrationLogClientError::is_file_name_Set() const{
    return m_file_name_isSet;
}

bool OAIIntegrationLogClientError::is_file_name_Valid() const{
    return m_file_name_isValid;
}

qint32 OAIIntegrationLogClientError::getLineNumber() const {
    return m_line_number;
}
void OAIIntegrationLogClientError::setLineNumber(const qint32 &line_number) {
    m_line_number = line_number;
    m_line_number_isSet = true;
}

bool OAIIntegrationLogClientError::is_line_number_Set() const{
    return m_line_number_isSet;
}

bool OAIIntegrationLogClientError::is_line_number_Valid() const{
    return m_line_number_isValid;
}

QString OAIIntegrationLogClientError::getMessage() const {
    return m_message;
}
void OAIIntegrationLogClientError::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIIntegrationLogClientError::is_message_Set() const{
    return m_message_isSet;
}

bool OAIIntegrationLogClientError::is_message_Valid() const{
    return m_message_isValid;
}

QString OAIIntegrationLogClientError::getMessageDetail() const {
    return m_message_detail;
}
void OAIIntegrationLogClientError::setMessageDetail(const QString &message_detail) {
    m_message_detail = message_detail;
    m_message_detail_isSet = true;
}

bool OAIIntegrationLogClientError::is_message_detail_Set() const{
    return m_message_detail_isSet;
}

bool OAIIntegrationLogClientError::is_message_detail_Valid() const{
    return m_message_detail_isValid;
}

QString OAIIntegrationLogClientError::getName() const {
    return m_name;
}
void OAIIntegrationLogClientError::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIIntegrationLogClientError::is_name_Set() const{
    return m_name_isSet;
}

bool OAIIntegrationLogClientError::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIIntegrationLogClientError::getNumber() const {
    return m_number;
}
void OAIIntegrationLogClientError::setNumber(const qint32 &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAIIntegrationLogClientError::is_number_Set() const{
    return m_number_isSet;
}

bool OAIIntegrationLogClientError::is_number_Valid() const{
    return m_number_isValid;
}

QString OAIIntegrationLogClientError::getStackTrace() const {
    return m_stack_trace;
}
void OAIIntegrationLogClientError::setStackTrace(const QString &stack_trace) {
    m_stack_trace = stack_trace;
    m_stack_trace_isSet = true;
}

bool OAIIntegrationLogClientError::is_stack_trace_Set() const{
    return m_stack_trace_isSet;
}

bool OAIIntegrationLogClientError::is_stack_trace_Valid() const{
    return m_stack_trace_isValid;
}

bool OAIIntegrationLogClientError::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cause_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_column_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_detail_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stack_trace_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIntegrationLogClientError::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
