/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITermsOfService.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITermsOfService::OAITermsOfService(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITermsOfService::OAITermsOfService() {
    this->initializeModel();
}

OAITermsOfService::~OAITermsOfService() {}

void OAITermsOfService::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_html_isSet = false;
    m_html_isValid = false;

    m_has_accepted_isSet = false;
    m_has_accepted_isValid = false;

    m_ad_account_id_isSet = false;
    m_ad_account_id_isValid = false;
}

void OAITermsOfService::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITermsOfService::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_html_isValid = ::OpenAPI::fromJsonValue(m_html, json[QString("html")]);
    m_html_isSet = !json[QString("html")].isNull() && m_html_isValid;

    m_has_accepted_isValid = ::OpenAPI::fromJsonValue(m_has_accepted, json[QString("has_accepted")]);
    m_has_accepted_isSet = !json[QString("has_accepted")].isNull() && m_has_accepted_isValid;

    m_ad_account_id_isValid = ::OpenAPI::fromJsonValue(m_ad_account_id, json[QString("ad_account_id")]);
    m_ad_account_id_isSet = !json[QString("ad_account_id")].isNull() && m_ad_account_id_isValid;
}

QString OAITermsOfService::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITermsOfService::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_html_isSet) {
        obj.insert(QString("html"), ::OpenAPI::toJsonValue(m_html));
    }
    if (m_has_accepted_isSet) {
        obj.insert(QString("has_accepted"), ::OpenAPI::toJsonValue(m_has_accepted));
    }
    if (m_ad_account_id_isSet) {
        obj.insert(QString("ad_account_id"), ::OpenAPI::toJsonValue(m_ad_account_id));
    }
    return obj;
}

QString OAITermsOfService::getId() const {
    return m_id;
}
void OAITermsOfService::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITermsOfService::is_id_Set() const{
    return m_id_isSet;
}

bool OAITermsOfService::is_id_Valid() const{
    return m_id_isValid;
}

QString OAITermsOfService::getHtml() const {
    return m_html;
}
void OAITermsOfService::setHtml(const QString &html) {
    m_html = html;
    m_html_isSet = true;
}

bool OAITermsOfService::is_html_Set() const{
    return m_html_isSet;
}

bool OAITermsOfService::is_html_Valid() const{
    return m_html_isValid;
}

bool OAITermsOfService::isHasAccepted() const {
    return m_has_accepted;
}
void OAITermsOfService::setHasAccepted(const bool &has_accepted) {
    m_has_accepted = has_accepted;
    m_has_accepted_isSet = true;
}

bool OAITermsOfService::is_has_accepted_Set() const{
    return m_has_accepted_isSet;
}

bool OAITermsOfService::is_has_accepted_Valid() const{
    return m_has_accepted_isValid;
}

QString OAITermsOfService::getAdAccountId() const {
    return m_ad_account_id;
}
void OAITermsOfService::setAdAccountId(const QString &ad_account_id) {
    m_ad_account_id = ad_account_id;
    m_ad_account_id_isSet = true;
}

bool OAITermsOfService::is_ad_account_id_Set() const{
    return m_ad_account_id_isSet;
}

bool OAITermsOfService::is_ad_account_id_Valid() const{
    return m_ad_account_id_isValid;
}

bool OAITermsOfService::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_html_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_accepted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ad_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITermsOfService::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
