/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIConversionTagsApi_H
#define OAI_OAIConversionTagsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIConversionEventResponse.h"
#include "OAIConversionTagCreate.h"
#include "OAIConversionTagListResponse.h"
#include "OAIConversionTagResponse.h"
#include "OAIError.h"
#include "OAIPage_visit_conversion_tags_get_200_response.h"
#include <QMap>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIConversionTagsApi : public QObject {
    Q_OBJECT

public:
    OAIConversionTagsApi(const int timeOut = 0);
    ~OAIConversionTagsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  ad_account_id QString [required]
    * @param[in]  oai_conversion_tag_create OAIConversionTagCreate [required]
    */
    virtual void conversionTags_create(const QString &ad_account_id, const OAIConversionTagCreate &oai_conversion_tag_create);

    /**
    * @param[in]  ad_account_id QString [required]
    * @param[in]  conversion_tag_id QString [required]
    */
    virtual void conversionTags_get(const QString &ad_account_id, const QString &conversion_tag_id);

    /**
    * @param[in]  ad_account_id QString [required]
    * @param[in]  filter_deleted bool [optional]
    */
    virtual void conversionTags_list(const QString &ad_account_id, const ::OpenAPI::OptionalParam<bool> &filter_deleted = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  ad_account_id QString [required]
    */
    virtual void ocpmEligibleConversionTags_get(const QString &ad_account_id);

    /**
    * @param[in]  ad_account_id QString [required]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  order QString [optional]
    * @param[in]  bookmark QString [optional]
    */
    virtual void pageVisitConversionTags_get(const QString &ad_account_id, const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &bookmark = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void conversionTags_createCallback(OAIHttpRequestWorker *worker);
    void conversionTags_getCallback(OAIHttpRequestWorker *worker);
    void conversionTags_listCallback(OAIHttpRequestWorker *worker);
    void ocpmEligibleConversionTags_getCallback(OAIHttpRequestWorker *worker);
    void pageVisitConversionTags_getCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void conversionTags_createSignal(OAIConversionTagResponse summary);
    void conversionTags_getSignal(OAIConversionTagResponse summary);
    void conversionTags_listSignal(OAIConversionTagListResponse summary);
    void ocpmEligibleConversionTags_getSignal(QMap<QString, QList<OAIConversionEventResponse>> summary);
    void pageVisitConversionTags_getSignal(OAIPage_visit_conversion_tags_get_200_response summary);


    void conversionTags_createSignalFull(OAIHttpRequestWorker *worker, OAIConversionTagResponse summary);
    void conversionTags_getSignalFull(OAIHttpRequestWorker *worker, OAIConversionTagResponse summary);
    void conversionTags_listSignalFull(OAIHttpRequestWorker *worker, OAIConversionTagListResponse summary);
    void ocpmEligibleConversionTags_getSignalFull(OAIHttpRequestWorker *worker, QMap<QString, QList<OAIConversionEventResponse>> summary);
    void pageVisitConversionTags_getSignalFull(OAIHttpRequestWorker *worker, OAIPage_visit_conversion_tags_get_200_response summary);

    Q_DECL_DEPRECATED_X("Use conversionTags_createSignalError() instead")
    void conversionTags_createSignalE(OAIConversionTagResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void conversionTags_createSignalError(OAIConversionTagResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use conversionTags_getSignalError() instead")
    void conversionTags_getSignalE(OAIConversionTagResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void conversionTags_getSignalError(OAIConversionTagResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use conversionTags_listSignalError() instead")
    void conversionTags_listSignalE(OAIConversionTagListResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void conversionTags_listSignalError(OAIConversionTagListResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ocpmEligibleConversionTags_getSignalError() instead")
    void ocpmEligibleConversionTags_getSignalE(QMap<QString, QList<OAIConversionEventResponse>> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ocpmEligibleConversionTags_getSignalError(QMap<QString, QList<OAIConversionEventResponse>> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pageVisitConversionTags_getSignalError() instead")
    void pageVisitConversionTags_getSignalE(OAIPage_visit_conversion_tags_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pageVisitConversionTags_getSignalError(OAIPage_visit_conversion_tags_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use conversionTags_createSignalErrorFull() instead")
    void conversionTags_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void conversionTags_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use conversionTags_getSignalErrorFull() instead")
    void conversionTags_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void conversionTags_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use conversionTags_listSignalErrorFull() instead")
    void conversionTags_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void conversionTags_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ocpmEligibleConversionTags_getSignalErrorFull() instead")
    void ocpmEligibleConversionTags_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ocpmEligibleConversionTags_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pageVisitConversionTags_getSignalErrorFull() instead")
    void pageVisitConversionTags_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pageVisitConversionTags_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
