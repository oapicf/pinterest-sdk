/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIProductGroupPromotionsApi_H
#define OAI_OAIProductGroupPromotionsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIError.h"
#include "OAIGranularity.h"
#include "OAIProductGroupAnalyticsResponse_inner.h"
#include "OAIProductGroupPromotionCreateRequest.h"
#include "OAIProductGroupPromotionResponse.h"
#include "OAIProductGroupPromotionUpdateRequest.h"
#include "OAIProduct_group_promotions_list_200_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIProductGroupPromotionsApi : public QObject {
    Q_OBJECT

public:
    OAIProductGroupPromotionsApi(const int timeOut = 0);
    ~OAIProductGroupPromotionsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  ad_account_id QString [required]
    * @param[in]  oai_product_group_promotion_create_request OAIProductGroupPromotionCreateRequest [required]
    */
    virtual void productGroupPromotions_create(const QString &ad_account_id, const OAIProductGroupPromotionCreateRequest &oai_product_group_promotion_create_request);

    /**
    * @param[in]  ad_account_id QString [required]
    * @param[in]  product_group_promotion_id QString [required]
    */
    virtual void productGroupPromotions_get(const QString &ad_account_id, const QString &product_group_promotion_id);

    /**
    * @param[in]  ad_account_id QString [required]
    * @param[in]  product_group_promotion_ids QList<QString> [optional]
    * @param[in]  entity_statuses QList<QString> [optional]
    * @param[in]  ad_group_id QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  order QString [optional]
    * @param[in]  bookmark QString [optional]
    */
    virtual void productGroupPromotions_list(const QString &ad_account_id, const ::OpenAPI::OptionalParam<QList<QString>> &product_group_promotion_ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &entity_statuses = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &ad_group_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &bookmark = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  ad_account_id QString [required]
    * @param[in]  oai_product_group_promotion_update_request OAIProductGroupPromotionUpdateRequest [required]
    */
    virtual void productGroupPromotions_update(const QString &ad_account_id, const OAIProductGroupPromotionUpdateRequest &oai_product_group_promotion_update_request);

    /**
    * @param[in]  ad_account_id QString [required]
    * @param[in]  start_date QDate [required]
    * @param[in]  end_date QDate [required]
    * @param[in]  product_group_ids QList<QString> [required]
    * @param[in]  columns QList<QString> [required]
    * @param[in]  granularity OAIGranularity [required]
    * @param[in]  click_window_days qint32 [optional]
    * @param[in]  engagement_window_days qint32 [optional]
    * @param[in]  view_window_days qint32 [optional]
    * @param[in]  conversion_report_time QString [optional]
    */
    virtual void productGroups_analytics(const QString &ad_account_id, const QDate &start_date, const QDate &end_date, const QList<QString> &product_group_ids, const QList<QString> &columns, const OAIGranularity &granularity, const ::OpenAPI::OptionalParam<qint32> &click_window_days = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &engagement_window_days = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &view_window_days = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &conversion_report_time = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void productGroupPromotions_createCallback(OAIHttpRequestWorker *worker);
    void productGroupPromotions_getCallback(OAIHttpRequestWorker *worker);
    void productGroupPromotions_listCallback(OAIHttpRequestWorker *worker);
    void productGroupPromotions_updateCallback(OAIHttpRequestWorker *worker);
    void productGroups_analyticsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void productGroupPromotions_createSignal(OAIProductGroupPromotionResponse summary);
    void productGroupPromotions_getSignal(OAIProductGroupPromotionResponse summary);
    void productGroupPromotions_listSignal(OAIProduct_group_promotions_list_200_response summary);
    void productGroupPromotions_updateSignal(OAIProductGroupPromotionResponse summary);
    void productGroups_analyticsSignal(QList<OAIProductGroupAnalyticsResponse_inner> summary);


    void productGroupPromotions_createSignalFull(OAIHttpRequestWorker *worker, OAIProductGroupPromotionResponse summary);
    void productGroupPromotions_getSignalFull(OAIHttpRequestWorker *worker, OAIProductGroupPromotionResponse summary);
    void productGroupPromotions_listSignalFull(OAIHttpRequestWorker *worker, OAIProduct_group_promotions_list_200_response summary);
    void productGroupPromotions_updateSignalFull(OAIHttpRequestWorker *worker, OAIProductGroupPromotionResponse summary);
    void productGroups_analyticsSignalFull(OAIHttpRequestWorker *worker, QList<OAIProductGroupAnalyticsResponse_inner> summary);

    Q_DECL_DEPRECATED_X("Use productGroupPromotions_createSignalError() instead")
    void productGroupPromotions_createSignalE(OAIProductGroupPromotionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void productGroupPromotions_createSignalError(OAIProductGroupPromotionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productGroupPromotions_getSignalError() instead")
    void productGroupPromotions_getSignalE(OAIProductGroupPromotionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void productGroupPromotions_getSignalError(OAIProductGroupPromotionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productGroupPromotions_listSignalError() instead")
    void productGroupPromotions_listSignalE(OAIProduct_group_promotions_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void productGroupPromotions_listSignalError(OAIProduct_group_promotions_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productGroupPromotions_updateSignalError() instead")
    void productGroupPromotions_updateSignalE(OAIProductGroupPromotionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void productGroupPromotions_updateSignalError(OAIProductGroupPromotionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productGroups_analyticsSignalError() instead")
    void productGroups_analyticsSignalE(QList<OAIProductGroupAnalyticsResponse_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void productGroups_analyticsSignalError(QList<OAIProductGroupAnalyticsResponse_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use productGroupPromotions_createSignalErrorFull() instead")
    void productGroupPromotions_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productGroupPromotions_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productGroupPromotions_getSignalErrorFull() instead")
    void productGroupPromotions_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productGroupPromotions_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productGroupPromotions_listSignalErrorFull() instead")
    void productGroupPromotions_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productGroupPromotions_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productGroupPromotions_updateSignalErrorFull() instead")
    void productGroupPromotions_updateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productGroupPromotions_updateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productGroups_analyticsSignalErrorFull() instead")
    void productGroups_analyticsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productGroups_analyticsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
