/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICatalogsItemsPostFilters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICatalogsItemsPostFilters::OAICatalogsItemsPostFilters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICatalogsItemsPostFilters::OAICatalogsItemsPostFilters() {
    this->initializeModel();
}

OAICatalogsItemsPostFilters::~OAICatalogsItemsPostFilters() {}

void OAICatalogsItemsPostFilters::initializeModel() {

    m_catalog_type_isSet = false;
    m_catalog_type_isValid = false;

    m_item_ids_isSet = false;
    m_item_ids_isValid = false;

    m_catalog_id_isSet = false;
    m_catalog_id_isValid = false;

    m_hotel_ids_isSet = false;
    m_hotel_ids_isValid = false;

    m_creative_assets_ids_isSet = false;
    m_creative_assets_ids_isValid = false;
}

void OAICatalogsItemsPostFilters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICatalogsItemsPostFilters::fromJsonObject(QJsonObject json) {

    m_catalog_type_isValid = ::OpenAPI::fromJsonValue(m_catalog_type, json[QString("catalog_type")]);
    m_catalog_type_isSet = !json[QString("catalog_type")].isNull() && m_catalog_type_isValid;

    m_item_ids_isValid = ::OpenAPI::fromJsonValue(m_item_ids, json[QString("item_ids")]);
    m_item_ids_isSet = !json[QString("item_ids")].isNull() && m_item_ids_isValid;

    m_catalog_id_isValid = ::OpenAPI::fromJsonValue(m_catalog_id, json[QString("catalog_id")]);
    m_catalog_id_isSet = !json[QString("catalog_id")].isNull() && m_catalog_id_isValid;

    m_hotel_ids_isValid = ::OpenAPI::fromJsonValue(m_hotel_ids, json[QString("hotel_ids")]);
    m_hotel_ids_isSet = !json[QString("hotel_ids")].isNull() && m_hotel_ids_isValid;

    m_creative_assets_ids_isValid = ::OpenAPI::fromJsonValue(m_creative_assets_ids, json[QString("creative_assets_ids")]);
    m_creative_assets_ids_isSet = !json[QString("creative_assets_ids")].isNull() && m_creative_assets_ids_isValid;
}

QString OAICatalogsItemsPostFilters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICatalogsItemsPostFilters::asJsonObject() const {
    QJsonObject obj;
    if (m_catalog_type.isSet()) {
        obj.insert(QString("catalog_type"), ::OpenAPI::toJsonValue(m_catalog_type));
    }
    if (m_item_ids.size() > 0) {
        obj.insert(QString("item_ids"), ::OpenAPI::toJsonValue(m_item_ids));
    }
    if (m_catalog_id_isSet) {
        obj.insert(QString("catalog_id"), ::OpenAPI::toJsonValue(m_catalog_id));
    }
    if (m_hotel_ids.size() > 0) {
        obj.insert(QString("hotel_ids"), ::OpenAPI::toJsonValue(m_hotel_ids));
    }
    if (m_creative_assets_ids.size() > 0) {
        obj.insert(QString("creative_assets_ids"), ::OpenAPI::toJsonValue(m_creative_assets_ids));
    }
    return obj;
}

OAICatalogsType OAICatalogsItemsPostFilters::getCatalogType() const {
    return m_catalog_type;
}
void OAICatalogsItemsPostFilters::setCatalogType(const OAICatalogsType &catalog_type) {
    m_catalog_type = catalog_type;
    m_catalog_type_isSet = true;
}

bool OAICatalogsItemsPostFilters::is_catalog_type_Set() const{
    return m_catalog_type_isSet;
}

bool OAICatalogsItemsPostFilters::is_catalog_type_Valid() const{
    return m_catalog_type_isValid;
}

QList<QString> OAICatalogsItemsPostFilters::getItemIds() const {
    return m_item_ids;
}
void OAICatalogsItemsPostFilters::setItemIds(const QList<QString> &item_ids) {
    m_item_ids = item_ids;
    m_item_ids_isSet = true;
}

bool OAICatalogsItemsPostFilters::is_item_ids_Set() const{
    return m_item_ids_isSet;
}

bool OAICatalogsItemsPostFilters::is_item_ids_Valid() const{
    return m_item_ids_isValid;
}

QString OAICatalogsItemsPostFilters::getCatalogId() const {
    return m_catalog_id;
}
void OAICatalogsItemsPostFilters::setCatalogId(const QString &catalog_id) {
    m_catalog_id = catalog_id;
    m_catalog_id_isSet = true;
}

bool OAICatalogsItemsPostFilters::is_catalog_id_Set() const{
    return m_catalog_id_isSet;
}

bool OAICatalogsItemsPostFilters::is_catalog_id_Valid() const{
    return m_catalog_id_isValid;
}

QList<QString> OAICatalogsItemsPostFilters::getHotelIds() const {
    return m_hotel_ids;
}
void OAICatalogsItemsPostFilters::setHotelIds(const QList<QString> &hotel_ids) {
    m_hotel_ids = hotel_ids;
    m_hotel_ids_isSet = true;
}

bool OAICatalogsItemsPostFilters::is_hotel_ids_Set() const{
    return m_hotel_ids_isSet;
}

bool OAICatalogsItemsPostFilters::is_hotel_ids_Valid() const{
    return m_hotel_ids_isValid;
}

QList<QString> OAICatalogsItemsPostFilters::getCreativeAssetsIds() const {
    return m_creative_assets_ids;
}
void OAICatalogsItemsPostFilters::setCreativeAssetsIds(const QList<QString> &creative_assets_ids) {
    m_creative_assets_ids = creative_assets_ids;
    m_creative_assets_ids_isSet = true;
}

bool OAICatalogsItemsPostFilters::is_creative_assets_ids_Set() const{
    return m_creative_assets_ids_isSet;
}

bool OAICatalogsItemsPostFilters::is_creative_assets_ids_Valid() const{
    return m_creative_assets_ids_isValid;
}

bool OAICatalogsItemsPostFilters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_catalog_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_catalog_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hotel_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_creative_assets_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICatalogsItemsPostFilters::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_catalog_type_isValid && m_item_ids_isValid && m_hotel_ids_isValid && m_creative_assets_ids_isValid && true;
}

} // namespace OpenAPI
