/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateAssetAccessRequestErrorMessage_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateAssetAccessRequestErrorMessage_inner::OAICreateAssetAccessRequestErrorMessage_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateAssetAccessRequestErrorMessage_inner::OAICreateAssetAccessRequestErrorMessage_inner() {
    this->initializeModel();
}

OAICreateAssetAccessRequestErrorMessage_inner::~OAICreateAssetAccessRequestErrorMessage_inner() {}

void OAICreateAssetAccessRequestErrorMessage_inner::initializeModel() {

    m_code_isSet = false;
    m_code_isValid = false;

    m_messages_isSet = false;
    m_messages_isValid = false;
}

void OAICreateAssetAccessRequestErrorMessage_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateAssetAccessRequestErrorMessage_inner::fromJsonObject(QJsonObject json) {

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_messages_isValid = ::OpenAPI::fromJsonValue(m_messages, json[QString("messages")]);
    m_messages_isSet = !json[QString("messages")].isNull() && m_messages_isValid;
}

QString OAICreateAssetAccessRequestErrorMessage_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateAssetAccessRequestErrorMessage_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_messages.size() > 0) {
        obj.insert(QString("messages"), ::OpenAPI::toJsonValue(m_messages));
    }
    return obj;
}

qint32 OAICreateAssetAccessRequestErrorMessage_inner::getCode() const {
    return m_code;
}
void OAICreateAssetAccessRequestErrorMessage_inner::setCode(const qint32 &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAICreateAssetAccessRequestErrorMessage_inner::is_code_Set() const{
    return m_code_isSet;
}

bool OAICreateAssetAccessRequestErrorMessage_inner::is_code_Valid() const{
    return m_code_isValid;
}

QList<QString> OAICreateAssetAccessRequestErrorMessage_inner::getMessages() const {
    return m_messages;
}
void OAICreateAssetAccessRequestErrorMessage_inner::setMessages(const QList<QString> &messages) {
    m_messages = messages;
    m_messages_isSet = true;
}

bool OAICreateAssetAccessRequestErrorMessage_inner::is_messages_Set() const{
    return m_messages_isSet;
}

bool OAICreateAssetAccessRequestErrorMessage_inner::is_messages_Valid() const{
    return m_messages_isValid;
}

bool OAICreateAssetAccessRequestErrorMessage_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_messages.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateAssetAccessRequestErrorMessage_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
