/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAudienceCreateCustomRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAudienceCreateCustomRequest::OAIAudienceCreateCustomRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAudienceCreateCustomRequest::OAIAudienceCreateCustomRequest() {
    this->initializeModel();
}

OAIAudienceCreateCustomRequest::~OAIAudienceCreateCustomRequest() {}

void OAIAudienceCreateCustomRequest::initializeModel() {

    m_ad_account_id_isSet = false;
    m_ad_account_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_rule_isSet = false;
    m_rule_isValid = false;

    m_sharing_type_isSet = false;
    m_sharing_type_isValid = false;

    m_data_party_isSet = false;
    m_data_party_isValid = false;

    m_category_isSet = false;
    m_category_isValid = false;
}

void OAIAudienceCreateCustomRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAudienceCreateCustomRequest::fromJsonObject(QJsonObject json) {

    m_ad_account_id_isValid = ::OpenAPI::fromJsonValue(m_ad_account_id, json[QString("ad_account_id")]);
    m_ad_account_id_isSet = !json[QString("ad_account_id")].isNull() && m_ad_account_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_rule_isValid = ::OpenAPI::fromJsonValue(m_rule, json[QString("rule")]);
    m_rule_isSet = !json[QString("rule")].isNull() && m_rule_isValid;

    m_sharing_type_isValid = ::OpenAPI::fromJsonValue(m_sharing_type, json[QString("sharing_type")]);
    m_sharing_type_isSet = !json[QString("sharing_type")].isNull() && m_sharing_type_isValid;

    m_data_party_isValid = ::OpenAPI::fromJsonValue(m_data_party, json[QString("data_party")]);
    m_data_party_isSet = !json[QString("data_party")].isNull() && m_data_party_isValid;

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;
}

QString OAIAudienceCreateCustomRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAudienceCreateCustomRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_ad_account_id_isSet) {
        obj.insert(QString("ad_account_id"), ::OpenAPI::toJsonValue(m_ad_account_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_rule.isSet()) {
        obj.insert(QString("rule"), ::OpenAPI::toJsonValue(m_rule));
    }
    if (m_sharing_type.isSet()) {
        obj.insert(QString("sharing_type"), ::OpenAPI::toJsonValue(m_sharing_type));
    }
    if (m_data_party.isSet()) {
        obj.insert(QString("data_party"), ::OpenAPI::toJsonValue(m_data_party));
    }
    if (m_category_isSet) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    return obj;
}

QString OAIAudienceCreateCustomRequest::getAdAccountId() const {
    return m_ad_account_id;
}
void OAIAudienceCreateCustomRequest::setAdAccountId(const QString &ad_account_id) {
    m_ad_account_id = ad_account_id;
    m_ad_account_id_isSet = true;
}

bool OAIAudienceCreateCustomRequest::is_ad_account_id_Set() const{
    return m_ad_account_id_isSet;
}

bool OAIAudienceCreateCustomRequest::is_ad_account_id_Valid() const{
    return m_ad_account_id_isValid;
}

QString OAIAudienceCreateCustomRequest::getName() const {
    return m_name;
}
void OAIAudienceCreateCustomRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAudienceCreateCustomRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAudienceCreateCustomRequest::is_name_Valid() const{
    return m_name_isValid;
}

OAIAudienceRule OAIAudienceCreateCustomRequest::getRule() const {
    return m_rule;
}
void OAIAudienceCreateCustomRequest::setRule(const OAIAudienceRule &rule) {
    m_rule = rule;
    m_rule_isSet = true;
}

bool OAIAudienceCreateCustomRequest::is_rule_Set() const{
    return m_rule_isSet;
}

bool OAIAudienceCreateCustomRequest::is_rule_Valid() const{
    return m_rule_isValid;
}

OAIAudienceSharingType OAIAudienceCreateCustomRequest::getSharingType() const {
    return m_sharing_type;
}
void OAIAudienceCreateCustomRequest::setSharingType(const OAIAudienceSharingType &sharing_type) {
    m_sharing_type = sharing_type;
    m_sharing_type_isSet = true;
}

bool OAIAudienceCreateCustomRequest::is_sharing_type_Set() const{
    return m_sharing_type_isSet;
}

bool OAIAudienceCreateCustomRequest::is_sharing_type_Valid() const{
    return m_sharing_type_isValid;
}

OAIAudienceDataParty OAIAudienceCreateCustomRequest::getDataParty() const {
    return m_data_party;
}
void OAIAudienceCreateCustomRequest::setDataParty(const OAIAudienceDataParty &data_party) {
    m_data_party = data_party;
    m_data_party_isSet = true;
}

bool OAIAudienceCreateCustomRequest::is_data_party_Set() const{
    return m_data_party_isSet;
}

bool OAIAudienceCreateCustomRequest::is_data_party_Valid() const{
    return m_data_party_isValid;
}

QString OAIAudienceCreateCustomRequest::getCategory() const {
    return m_category;
}
void OAIAudienceCreateCustomRequest::setCategory(const QString &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIAudienceCreateCustomRequest::is_category_Set() const{
    return m_category_isSet;
}

bool OAIAudienceCreateCustomRequest::is_category_Valid() const{
    return m_category_isValid;
}

bool OAIAudienceCreateCustomRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ad_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rule.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sharing_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_party.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAudienceCreateCustomRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_rule_isValid && m_sharing_type_isValid && m_data_party_isValid && true;
}

} // namespace OpenAPI
