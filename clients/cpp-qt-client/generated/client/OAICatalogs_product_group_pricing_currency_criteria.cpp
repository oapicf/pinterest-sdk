/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICatalogs_product_group_pricing_currency_criteria.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICatalogs_product_group_pricing_currency_criteria::OAICatalogs_product_group_pricing_currency_criteria(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICatalogs_product_group_pricing_currency_criteria::OAICatalogs_product_group_pricing_currency_criteria() {
    this->initializeModel();
}

OAICatalogs_product_group_pricing_currency_criteria::~OAICatalogs_product_group_pricing_currency_criteria() {}

void OAICatalogs_product_group_pricing_currency_criteria::initializeModel() {

    m_r_operator_isSet = false;
    m_r_operator_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_negated_isSet = false;
    m_negated_isValid = false;
}

void OAICatalogs_product_group_pricing_currency_criteria::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICatalogs_product_group_pricing_currency_criteria::fromJsonObject(QJsonObject json) {

    m_r_operator_isValid = ::OpenAPI::fromJsonValue(m_r_operator, json[QString("operator")]);
    m_r_operator_isSet = !json[QString("operator")].isNull() && m_r_operator_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_negated_isValid = ::OpenAPI::fromJsonValue(m_negated, json[QString("negated")]);
    m_negated_isSet = !json[QString("negated")].isNull() && m_negated_isValid;
}

QString OAICatalogs_product_group_pricing_currency_criteria::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICatalogs_product_group_pricing_currency_criteria::asJsonObject() const {
    QJsonObject obj;
    if (m_r_operator_isSet) {
        obj.insert(QString("operator"), ::OpenAPI::toJsonValue(m_r_operator));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    if (m_currency.isSet()) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_negated_isSet) {
        obj.insert(QString("negated"), ::OpenAPI::toJsonValue(m_negated));
    }
    return obj;
}

QString OAICatalogs_product_group_pricing_currency_criteria::getROperator() const {
    return m_r_operator;
}
void OAICatalogs_product_group_pricing_currency_criteria::setROperator(const QString &r_operator) {
    m_r_operator = r_operator;
    m_r_operator_isSet = true;
}

bool OAICatalogs_product_group_pricing_currency_criteria::is_r_operator_Set() const{
    return m_r_operator_isSet;
}

bool OAICatalogs_product_group_pricing_currency_criteria::is_r_operator_Valid() const{
    return m_r_operator_isValid;
}

double OAICatalogs_product_group_pricing_currency_criteria::getValue() const {
    return m_value;
}
void OAICatalogs_product_group_pricing_currency_criteria::setValue(const double &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAICatalogs_product_group_pricing_currency_criteria::is_value_Set() const{
    return m_value_isSet;
}

bool OAICatalogs_product_group_pricing_currency_criteria::is_value_Valid() const{
    return m_value_isValid;
}

OAINonNullableCatalogsCurrency OAICatalogs_product_group_pricing_currency_criteria::getCurrency() const {
    return m_currency;
}
void OAICatalogs_product_group_pricing_currency_criteria::setCurrency(const OAINonNullableCatalogsCurrency &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAICatalogs_product_group_pricing_currency_criteria::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAICatalogs_product_group_pricing_currency_criteria::is_currency_Valid() const{
    return m_currency_isValid;
}

bool OAICatalogs_product_group_pricing_currency_criteria::isNegated() const {
    return m_negated;
}
void OAICatalogs_product_group_pricing_currency_criteria::setNegated(const bool &negated) {
    m_negated = negated;
    m_negated_isSet = true;
}

bool OAICatalogs_product_group_pricing_currency_criteria::is_negated_Set() const{
    return m_negated_isSet;
}

bool OAICatalogs_product_group_pricing_currency_criteria::is_negated_Valid() const{
    return m_negated_isValid;
}

bool OAICatalogs_product_group_pricing_currency_criteria::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_r_operator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_negated_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICatalogs_product_group_pricing_currency_criteria::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_r_operator_isValid && m_value_isValid && m_currency_isValid && true;
}

} // namespace OpenAPI
