/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICatalogsUpdateCreativeAssetsItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICatalogsUpdateCreativeAssetsItem::OAICatalogsUpdateCreativeAssetsItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICatalogsUpdateCreativeAssetsItem::OAICatalogsUpdateCreativeAssetsItem() {
    this->initializeModel();
}

OAICatalogsUpdateCreativeAssetsItem::~OAICatalogsUpdateCreativeAssetsItem() {}

void OAICatalogsUpdateCreativeAssetsItem::initializeModel() {

    m_creative_assets_id_isSet = false;
    m_creative_assets_id_isValid = false;

    m_operation_isSet = false;
    m_operation_isValid = false;

    m_attributes_isSet = false;
    m_attributes_isValid = false;
}

void OAICatalogsUpdateCreativeAssetsItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICatalogsUpdateCreativeAssetsItem::fromJsonObject(QJsonObject json) {

    m_creative_assets_id_isValid = ::OpenAPI::fromJsonValue(m_creative_assets_id, json[QString("creative_assets_id")]);
    m_creative_assets_id_isSet = !json[QString("creative_assets_id")].isNull() && m_creative_assets_id_isValid;

    m_operation_isValid = ::OpenAPI::fromJsonValue(m_operation, json[QString("operation")]);
    m_operation_isSet = !json[QString("operation")].isNull() && m_operation_isValid;

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("attributes")]);
    m_attributes_isSet = !json[QString("attributes")].isNull() && m_attributes_isValid;
}

QString OAICatalogsUpdateCreativeAssetsItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICatalogsUpdateCreativeAssetsItem::asJsonObject() const {
    QJsonObject obj;
    if (m_creative_assets_id_isSet) {
        obj.insert(QString("creative_assets_id"), ::OpenAPI::toJsonValue(m_creative_assets_id));
    }
    if (m_operation_isSet) {
        obj.insert(QString("operation"), ::OpenAPI::toJsonValue(m_operation));
    }
    if (m_attributes.isSet()) {
        obj.insert(QString("attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    return obj;
}

QString OAICatalogsUpdateCreativeAssetsItem::getCreativeAssetsId() const {
    return m_creative_assets_id;
}
void OAICatalogsUpdateCreativeAssetsItem::setCreativeAssetsId(const QString &creative_assets_id) {
    m_creative_assets_id = creative_assets_id;
    m_creative_assets_id_isSet = true;
}

bool OAICatalogsUpdateCreativeAssetsItem::is_creative_assets_id_Set() const{
    return m_creative_assets_id_isSet;
}

bool OAICatalogsUpdateCreativeAssetsItem::is_creative_assets_id_Valid() const{
    return m_creative_assets_id_isValid;
}

QString OAICatalogsUpdateCreativeAssetsItem::getOperation() const {
    return m_operation;
}
void OAICatalogsUpdateCreativeAssetsItem::setOperation(const QString &operation) {
    m_operation = operation;
    m_operation_isSet = true;
}

bool OAICatalogsUpdateCreativeAssetsItem::is_operation_Set() const{
    return m_operation_isSet;
}

bool OAICatalogsUpdateCreativeAssetsItem::is_operation_Valid() const{
    return m_operation_isValid;
}

OAICatalogsUpdatableCreativeAssetsAttributes OAICatalogsUpdateCreativeAssetsItem::getAttributes() const {
    return m_attributes;
}
void OAICatalogsUpdateCreativeAssetsItem::setAttributes(const OAICatalogsUpdatableCreativeAssetsAttributes &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAICatalogsUpdateCreativeAssetsItem::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAICatalogsUpdateCreativeAssetsItem::is_attributes_Valid() const{
    return m_attributes_isValid;
}

bool OAICatalogsUpdateCreativeAssetsItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_creative_assets_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICatalogsUpdateCreativeAssetsItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_creative_assets_id_isValid && m_operation_isValid && m_attributes_isValid && true;
}

} // namespace OpenAPI
