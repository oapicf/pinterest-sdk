/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMediaUpload.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMediaUpload::OAIMediaUpload(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMediaUpload::OAIMediaUpload() {
    this->initializeModel();
}

OAIMediaUpload::~OAIMediaUpload() {}

void OAIMediaUpload::initializeModel() {

    m_media_id_isSet = false;
    m_media_id_isValid = false;

    m_media_type_isSet = false;
    m_media_type_isValid = false;

    m_upload_url_isSet = false;
    m_upload_url_isValid = false;

    m_upload_parameters_isSet = false;
    m_upload_parameters_isValid = false;
}

void OAIMediaUpload::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMediaUpload::fromJsonObject(QJsonObject json) {

    m_media_id_isValid = ::OpenAPI::fromJsonValue(m_media_id, json[QString("media_id")]);
    m_media_id_isSet = !json[QString("media_id")].isNull() && m_media_id_isValid;

    m_media_type_isValid = ::OpenAPI::fromJsonValue(m_media_type, json[QString("media_type")]);
    m_media_type_isSet = !json[QString("media_type")].isNull() && m_media_type_isValid;

    m_upload_url_isValid = ::OpenAPI::fromJsonValue(m_upload_url, json[QString("upload_url")]);
    m_upload_url_isSet = !json[QString("upload_url")].isNull() && m_upload_url_isValid;

    m_upload_parameters_isValid = ::OpenAPI::fromJsonValue(m_upload_parameters, json[QString("upload_parameters")]);
    m_upload_parameters_isSet = !json[QString("upload_parameters")].isNull() && m_upload_parameters_isValid;
}

QString OAIMediaUpload::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMediaUpload::asJsonObject() const {
    QJsonObject obj;
    if (m_media_id_isSet) {
        obj.insert(QString("media_id"), ::OpenAPI::toJsonValue(m_media_id));
    }
    if (m_media_type.isSet()) {
        obj.insert(QString("media_type"), ::OpenAPI::toJsonValue(m_media_type));
    }
    if (m_upload_url_isSet) {
        obj.insert(QString("upload_url"), ::OpenAPI::toJsonValue(m_upload_url));
    }
    if (m_upload_parameters.isSet()) {
        obj.insert(QString("upload_parameters"), ::OpenAPI::toJsonValue(m_upload_parameters));
    }
    return obj;
}

QString OAIMediaUpload::getMediaId() const {
    return m_media_id;
}
void OAIMediaUpload::setMediaId(const QString &media_id) {
    m_media_id = media_id;
    m_media_id_isSet = true;
}

bool OAIMediaUpload::is_media_id_Set() const{
    return m_media_id_isSet;
}

bool OAIMediaUpload::is_media_id_Valid() const{
    return m_media_id_isValid;
}

OAIMediaUploadType OAIMediaUpload::getMediaType() const {
    return m_media_type;
}
void OAIMediaUpload::setMediaType(const OAIMediaUploadType &media_type) {
    m_media_type = media_type;
    m_media_type_isSet = true;
}

bool OAIMediaUpload::is_media_type_Set() const{
    return m_media_type_isSet;
}

bool OAIMediaUpload::is_media_type_Valid() const{
    return m_media_type_isValid;
}

QString OAIMediaUpload::getUploadUrl() const {
    return m_upload_url;
}
void OAIMediaUpload::setUploadUrl(const QString &upload_url) {
    m_upload_url = upload_url;
    m_upload_url_isSet = true;
}

bool OAIMediaUpload::is_upload_url_Set() const{
    return m_upload_url_isSet;
}

bool OAIMediaUpload::is_upload_url_Valid() const{
    return m_upload_url_isValid;
}

OAIMediaUpload_allOf_upload_parameters OAIMediaUpload::getUploadParameters() const {
    return m_upload_parameters;
}
void OAIMediaUpload::setUploadParameters(const OAIMediaUpload_allOf_upload_parameters &upload_parameters) {
    m_upload_parameters = upload_parameters;
    m_upload_parameters_isSet = true;
}

bool OAIMediaUpload::is_upload_parameters_Set() const{
    return m_upload_parameters_isSet;
}

bool OAIMediaUpload::is_upload_parameters_Valid() const{
    return m_upload_parameters_isValid;
}

bool OAIMediaUpload::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_media_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_upload_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upload_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMediaUpload::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
