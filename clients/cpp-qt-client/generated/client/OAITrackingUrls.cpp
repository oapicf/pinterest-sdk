/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITrackingUrls.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITrackingUrls::OAITrackingUrls(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITrackingUrls::OAITrackingUrls() {
    this->initializeModel();
}

OAITrackingUrls::~OAITrackingUrls() {}

void OAITrackingUrls::initializeModel() {

    m_impression_isSet = false;
    m_impression_isValid = false;

    m_click_isSet = false;
    m_click_isValid = false;

    m_engagement_isSet = false;
    m_engagement_isValid = false;

    m_buyable_button_isSet = false;
    m_buyable_button_isValid = false;

    m_audience_verification_isSet = false;
    m_audience_verification_isValid = false;
}

void OAITrackingUrls::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITrackingUrls::fromJsonObject(QJsonObject json) {

    m_impression_isValid = ::OpenAPI::fromJsonValue(m_impression, json[QString("impression")]);
    m_impression_isSet = !json[QString("impression")].isNull() && m_impression_isValid;

    m_click_isValid = ::OpenAPI::fromJsonValue(m_click, json[QString("click")]);
    m_click_isSet = !json[QString("click")].isNull() && m_click_isValid;

    m_engagement_isValid = ::OpenAPI::fromJsonValue(m_engagement, json[QString("engagement")]);
    m_engagement_isSet = !json[QString("engagement")].isNull() && m_engagement_isValid;

    m_buyable_button_isValid = ::OpenAPI::fromJsonValue(m_buyable_button, json[QString("buyable_button")]);
    m_buyable_button_isSet = !json[QString("buyable_button")].isNull() && m_buyable_button_isValid;

    m_audience_verification_isValid = ::OpenAPI::fromJsonValue(m_audience_verification, json[QString("audience_verification")]);
    m_audience_verification_isSet = !json[QString("audience_verification")].isNull() && m_audience_verification_isValid;
}

QString OAITrackingUrls::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITrackingUrls::asJsonObject() const {
    QJsonObject obj;
    if (m_impression.size() > 0) {
        obj.insert(QString("impression"), ::OpenAPI::toJsonValue(m_impression));
    }
    if (m_click.size() > 0) {
        obj.insert(QString("click"), ::OpenAPI::toJsonValue(m_click));
    }
    if (m_engagement.size() > 0) {
        obj.insert(QString("engagement"), ::OpenAPI::toJsonValue(m_engagement));
    }
    if (m_buyable_button.size() > 0) {
        obj.insert(QString("buyable_button"), ::OpenAPI::toJsonValue(m_buyable_button));
    }
    if (m_audience_verification.size() > 0) {
        obj.insert(QString("audience_verification"), ::OpenAPI::toJsonValue(m_audience_verification));
    }
    return obj;
}

QList<QString> OAITrackingUrls::getImpression() const {
    return m_impression;
}
void OAITrackingUrls::setImpression(const QList<QString> &impression) {
    m_impression = impression;
    m_impression_isSet = true;
}

bool OAITrackingUrls::is_impression_Set() const{
    return m_impression_isSet;
}

bool OAITrackingUrls::is_impression_Valid() const{
    return m_impression_isValid;
}

QList<QString> OAITrackingUrls::getClick() const {
    return m_click;
}
void OAITrackingUrls::setClick(const QList<QString> &click) {
    m_click = click;
    m_click_isSet = true;
}

bool OAITrackingUrls::is_click_Set() const{
    return m_click_isSet;
}

bool OAITrackingUrls::is_click_Valid() const{
    return m_click_isValid;
}

QList<QString> OAITrackingUrls::getEngagement() const {
    return m_engagement;
}
void OAITrackingUrls::setEngagement(const QList<QString> &engagement) {
    m_engagement = engagement;
    m_engagement_isSet = true;
}

bool OAITrackingUrls::is_engagement_Set() const{
    return m_engagement_isSet;
}

bool OAITrackingUrls::is_engagement_Valid() const{
    return m_engagement_isValid;
}

QList<QString> OAITrackingUrls::getBuyableButton() const {
    return m_buyable_button;
}
void OAITrackingUrls::setBuyableButton(const QList<QString> &buyable_button) {
    m_buyable_button = buyable_button;
    m_buyable_button_isSet = true;
}

bool OAITrackingUrls::is_buyable_button_Set() const{
    return m_buyable_button_isSet;
}

bool OAITrackingUrls::is_buyable_button_Valid() const{
    return m_buyable_button_isValid;
}

QList<QString> OAITrackingUrls::getAudienceVerification() const {
    return m_audience_verification;
}
void OAITrackingUrls::setAudienceVerification(const QList<QString> &audience_verification) {
    m_audience_verification = audience_verification;
    m_audience_verification_isSet = true;
}

bool OAITrackingUrls::is_audience_verification_Set() const{
    return m_audience_verification_isSet;
}

bool OAITrackingUrls::is_audience_verification_Valid() const{
    return m_audience_verification_isValid;
}

bool OAITrackingUrls::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_impression.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_click.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_engagement.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_buyable_button.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_audience_verification.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITrackingUrls::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
