/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBaseInviteDataResponse_invite_data.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBaseInviteDataResponse_invite_data::OAIBaseInviteDataResponse_invite_data(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBaseInviteDataResponse_invite_data::OAIBaseInviteDataResponse_invite_data() {
    this->initializeModel();
}

OAIBaseInviteDataResponse_invite_data::~OAIBaseInviteDataResponse_invite_data() {}

void OAIBaseInviteDataResponse_invite_data::initializeModel() {

    m_invite_expiration_isSet = false;
    m_invite_expiration_isValid = false;

    m_invite_status_isSet = false;
    m_invite_status_isValid = false;

    m_invite_type_isSet = false;
    m_invite_type_isValid = false;

    m_last_updated_time_isSet = false;
    m_last_updated_time_isValid = false;

    m_sent_at_isSet = false;
    m_sent_at_isValid = false;
}

void OAIBaseInviteDataResponse_invite_data::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBaseInviteDataResponse_invite_data::fromJsonObject(QJsonObject json) {

    m_invite_expiration_isValid = ::OpenAPI::fromJsonValue(m_invite_expiration, json[QString("invite_expiration")]);
    m_invite_expiration_isSet = !json[QString("invite_expiration")].isNull() && m_invite_expiration_isValid;

    m_invite_status_isValid = ::OpenAPI::fromJsonValue(m_invite_status, json[QString("invite_status")]);
    m_invite_status_isSet = !json[QString("invite_status")].isNull() && m_invite_status_isValid;

    m_invite_type_isValid = ::OpenAPI::fromJsonValue(m_invite_type, json[QString("invite_type")]);
    m_invite_type_isSet = !json[QString("invite_type")].isNull() && m_invite_type_isValid;

    m_last_updated_time_isValid = ::OpenAPI::fromJsonValue(m_last_updated_time, json[QString("last_updated_time")]);
    m_last_updated_time_isSet = !json[QString("last_updated_time")].isNull() && m_last_updated_time_isValid;

    m_sent_at_isValid = ::OpenAPI::fromJsonValue(m_sent_at, json[QString("sent_at")]);
    m_sent_at_isSet = !json[QString("sent_at")].isNull() && m_sent_at_isValid;
}

QString OAIBaseInviteDataResponse_invite_data::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBaseInviteDataResponse_invite_data::asJsonObject() const {
    QJsonObject obj;
    if (m_invite_expiration_isSet) {
        obj.insert(QString("invite_expiration"), ::OpenAPI::toJsonValue(m_invite_expiration));
    }
    if (m_invite_status_isSet) {
        obj.insert(QString("invite_status"), ::OpenAPI::toJsonValue(m_invite_status));
    }
    if (m_invite_type_isSet) {
        obj.insert(QString("invite_type"), ::OpenAPI::toJsonValue(m_invite_type));
    }
    if (m_last_updated_time_isSet) {
        obj.insert(QString("last_updated_time"), ::OpenAPI::toJsonValue(m_last_updated_time));
    }
    if (m_sent_at_isSet) {
        obj.insert(QString("sent_at"), ::OpenAPI::toJsonValue(m_sent_at));
    }
    return obj;
}

qint32 OAIBaseInviteDataResponse_invite_data::getInviteExpiration() const {
    return m_invite_expiration;
}
void OAIBaseInviteDataResponse_invite_data::setInviteExpiration(const qint32 &invite_expiration) {
    m_invite_expiration = invite_expiration;
    m_invite_expiration_isSet = true;
}

bool OAIBaseInviteDataResponse_invite_data::is_invite_expiration_Set() const{
    return m_invite_expiration_isSet;
}

bool OAIBaseInviteDataResponse_invite_data::is_invite_expiration_Valid() const{
    return m_invite_expiration_isValid;
}

QString OAIBaseInviteDataResponse_invite_data::getInviteStatus() const {
    return m_invite_status;
}
void OAIBaseInviteDataResponse_invite_data::setInviteStatus(const QString &invite_status) {
    m_invite_status = invite_status;
    m_invite_status_isSet = true;
}

bool OAIBaseInviteDataResponse_invite_data::is_invite_status_Set() const{
    return m_invite_status_isSet;
}

bool OAIBaseInviteDataResponse_invite_data::is_invite_status_Valid() const{
    return m_invite_status_isValid;
}

QString OAIBaseInviteDataResponse_invite_data::getInviteType() const {
    return m_invite_type;
}
void OAIBaseInviteDataResponse_invite_data::setInviteType(const QString &invite_type) {
    m_invite_type = invite_type;
    m_invite_type_isSet = true;
}

bool OAIBaseInviteDataResponse_invite_data::is_invite_type_Set() const{
    return m_invite_type_isSet;
}

bool OAIBaseInviteDataResponse_invite_data::is_invite_type_Valid() const{
    return m_invite_type_isValid;
}

qint32 OAIBaseInviteDataResponse_invite_data::getLastUpdatedTime() const {
    return m_last_updated_time;
}
void OAIBaseInviteDataResponse_invite_data::setLastUpdatedTime(const qint32 &last_updated_time) {
    m_last_updated_time = last_updated_time;
    m_last_updated_time_isSet = true;
}

bool OAIBaseInviteDataResponse_invite_data::is_last_updated_time_Set() const{
    return m_last_updated_time_isSet;
}

bool OAIBaseInviteDataResponse_invite_data::is_last_updated_time_Valid() const{
    return m_last_updated_time_isValid;
}

qint32 OAIBaseInviteDataResponse_invite_data::getSentAt() const {
    return m_sent_at;
}
void OAIBaseInviteDataResponse_invite_data::setSentAt(const qint32 &sent_at) {
    m_sent_at = sent_at;
    m_sent_at_isSet = true;
}

bool OAIBaseInviteDataResponse_invite_data::is_sent_at_Set() const{
    return m_sent_at_isSet;
}

bool OAIBaseInviteDataResponse_invite_data::is_sent_at_Valid() const{
    return m_sent_at_isValid;
}

bool OAIBaseInviteDataResponse_invite_data::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_invite_expiration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invite_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invite_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sent_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBaseInviteDataResponse_invite_data::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
