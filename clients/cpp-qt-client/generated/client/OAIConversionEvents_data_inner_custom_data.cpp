/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConversionEvents_data_inner_custom_data.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConversionEvents_data_inner_custom_data::OAIConversionEvents_data_inner_custom_data(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConversionEvents_data_inner_custom_data::OAIConversionEvents_data_inner_custom_data() {
    this->initializeModel();
}

OAIConversionEvents_data_inner_custom_data::~OAIConversionEvents_data_inner_custom_data() {}

void OAIConversionEvents_data_inner_custom_data::initializeModel() {

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;

    m_content_ids_isSet = false;
    m_content_ids_isValid = false;

    m_content_name_isSet = false;
    m_content_name_isValid = false;

    m_content_category_isSet = false;
    m_content_category_isValid = false;

    m_content_brand_isSet = false;
    m_content_brand_isValid = false;

    m_contents_isSet = false;
    m_contents_isValid = false;

    m_num_items_isSet = false;
    m_num_items_isValid = false;

    m_order_id_isSet = false;
    m_order_id_isValid = false;

    m_search_string_isSet = false;
    m_search_string_isValid = false;

    m_opt_out_type_isSet = false;
    m_opt_out_type_isValid = false;

    m_np_isSet = false;
    m_np_isValid = false;
}

void OAIConversionEvents_data_inner_custom_data::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConversionEvents_data_inner_custom_data::fromJsonObject(QJsonObject json) {

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;

    m_content_ids_isValid = ::OpenAPI::fromJsonValue(m_content_ids, json[QString("content_ids")]);
    m_content_ids_isSet = !json[QString("content_ids")].isNull() && m_content_ids_isValid;

    m_content_name_isValid = ::OpenAPI::fromJsonValue(m_content_name, json[QString("content_name")]);
    m_content_name_isSet = !json[QString("content_name")].isNull() && m_content_name_isValid;

    m_content_category_isValid = ::OpenAPI::fromJsonValue(m_content_category, json[QString("content_category")]);
    m_content_category_isSet = !json[QString("content_category")].isNull() && m_content_category_isValid;

    m_content_brand_isValid = ::OpenAPI::fromJsonValue(m_content_brand, json[QString("content_brand")]);
    m_content_brand_isSet = !json[QString("content_brand")].isNull() && m_content_brand_isValid;

    m_contents_isValid = ::OpenAPI::fromJsonValue(m_contents, json[QString("contents")]);
    m_contents_isSet = !json[QString("contents")].isNull() && m_contents_isValid;

    m_num_items_isValid = ::OpenAPI::fromJsonValue(m_num_items, json[QString("num_items")]);
    m_num_items_isSet = !json[QString("num_items")].isNull() && m_num_items_isValid;

    m_order_id_isValid = ::OpenAPI::fromJsonValue(m_order_id, json[QString("order_id")]);
    m_order_id_isSet = !json[QString("order_id")].isNull() && m_order_id_isValid;

    m_search_string_isValid = ::OpenAPI::fromJsonValue(m_search_string, json[QString("search_string")]);
    m_search_string_isSet = !json[QString("search_string")].isNull() && m_search_string_isValid;

    m_opt_out_type_isValid = ::OpenAPI::fromJsonValue(m_opt_out_type, json[QString("opt_out_type")]);
    m_opt_out_type_isSet = !json[QString("opt_out_type")].isNull() && m_opt_out_type_isValid;

    m_np_isValid = ::OpenAPI::fromJsonValue(m_np, json[QString("np")]);
    m_np_isSet = !json[QString("np")].isNull() && m_np_isValid;
}

QString OAIConversionEvents_data_inner_custom_data::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConversionEvents_data_inner_custom_data::asJsonObject() const {
    QJsonObject obj;
    if (m_currency_isSet) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    if (m_content_ids.size() > 0) {
        obj.insert(QString("content_ids"), ::OpenAPI::toJsonValue(m_content_ids));
    }
    if (m_content_name_isSet) {
        obj.insert(QString("content_name"), ::OpenAPI::toJsonValue(m_content_name));
    }
    if (m_content_category_isSet) {
        obj.insert(QString("content_category"), ::OpenAPI::toJsonValue(m_content_category));
    }
    if (m_content_brand_isSet) {
        obj.insert(QString("content_brand"), ::OpenAPI::toJsonValue(m_content_brand));
    }
    if (m_contents.size() > 0) {
        obj.insert(QString("contents"), ::OpenAPI::toJsonValue(m_contents));
    }
    if (m_num_items_isSet) {
        obj.insert(QString("num_items"), ::OpenAPI::toJsonValue(m_num_items));
    }
    if (m_order_id_isSet) {
        obj.insert(QString("order_id"), ::OpenAPI::toJsonValue(m_order_id));
    }
    if (m_search_string_isSet) {
        obj.insert(QString("search_string"), ::OpenAPI::toJsonValue(m_search_string));
    }
    if (m_opt_out_type_isSet) {
        obj.insert(QString("opt_out_type"), ::OpenAPI::toJsonValue(m_opt_out_type));
    }
    if (m_np_isSet) {
        obj.insert(QString("np"), ::OpenAPI::toJsonValue(m_np));
    }
    return obj;
}

QString OAIConversionEvents_data_inner_custom_data::getCurrency() const {
    return m_currency;
}
void OAIConversionEvents_data_inner_custom_data::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAIConversionEvents_data_inner_custom_data::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAIConversionEvents_data_inner_custom_data::is_currency_Valid() const{
    return m_currency_isValid;
}

QString OAIConversionEvents_data_inner_custom_data::getValue() const {
    return m_value;
}
void OAIConversionEvents_data_inner_custom_data::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIConversionEvents_data_inner_custom_data::is_value_Set() const{
    return m_value_isSet;
}

bool OAIConversionEvents_data_inner_custom_data::is_value_Valid() const{
    return m_value_isValid;
}

QList<QString> OAIConversionEvents_data_inner_custom_data::getContentIds() const {
    return m_content_ids;
}
void OAIConversionEvents_data_inner_custom_data::setContentIds(const QList<QString> &content_ids) {
    m_content_ids = content_ids;
    m_content_ids_isSet = true;
}

bool OAIConversionEvents_data_inner_custom_data::is_content_ids_Set() const{
    return m_content_ids_isSet;
}

bool OAIConversionEvents_data_inner_custom_data::is_content_ids_Valid() const{
    return m_content_ids_isValid;
}

QString OAIConversionEvents_data_inner_custom_data::getContentName() const {
    return m_content_name;
}
void OAIConversionEvents_data_inner_custom_data::setContentName(const QString &content_name) {
    m_content_name = content_name;
    m_content_name_isSet = true;
}

bool OAIConversionEvents_data_inner_custom_data::is_content_name_Set() const{
    return m_content_name_isSet;
}

bool OAIConversionEvents_data_inner_custom_data::is_content_name_Valid() const{
    return m_content_name_isValid;
}

QString OAIConversionEvents_data_inner_custom_data::getContentCategory() const {
    return m_content_category;
}
void OAIConversionEvents_data_inner_custom_data::setContentCategory(const QString &content_category) {
    m_content_category = content_category;
    m_content_category_isSet = true;
}

bool OAIConversionEvents_data_inner_custom_data::is_content_category_Set() const{
    return m_content_category_isSet;
}

bool OAIConversionEvents_data_inner_custom_data::is_content_category_Valid() const{
    return m_content_category_isValid;
}

QString OAIConversionEvents_data_inner_custom_data::getContentBrand() const {
    return m_content_brand;
}
void OAIConversionEvents_data_inner_custom_data::setContentBrand(const QString &content_brand) {
    m_content_brand = content_brand;
    m_content_brand_isSet = true;
}

bool OAIConversionEvents_data_inner_custom_data::is_content_brand_Set() const{
    return m_content_brand_isSet;
}

bool OAIConversionEvents_data_inner_custom_data::is_content_brand_Valid() const{
    return m_content_brand_isValid;
}

QList<OAIConversionEvents_data_inner_custom_data_contents_inner> OAIConversionEvents_data_inner_custom_data::getContents() const {
    return m_contents;
}
void OAIConversionEvents_data_inner_custom_data::setContents(const QList<OAIConversionEvents_data_inner_custom_data_contents_inner> &contents) {
    m_contents = contents;
    m_contents_isSet = true;
}

bool OAIConversionEvents_data_inner_custom_data::is_contents_Set() const{
    return m_contents_isSet;
}

bool OAIConversionEvents_data_inner_custom_data::is_contents_Valid() const{
    return m_contents_isValid;
}

qint64 OAIConversionEvents_data_inner_custom_data::getNumItems() const {
    return m_num_items;
}
void OAIConversionEvents_data_inner_custom_data::setNumItems(const qint64 &num_items) {
    m_num_items = num_items;
    m_num_items_isSet = true;
}

bool OAIConversionEvents_data_inner_custom_data::is_num_items_Set() const{
    return m_num_items_isSet;
}

bool OAIConversionEvents_data_inner_custom_data::is_num_items_Valid() const{
    return m_num_items_isValid;
}

QString OAIConversionEvents_data_inner_custom_data::getOrderId() const {
    return m_order_id;
}
void OAIConversionEvents_data_inner_custom_data::setOrderId(const QString &order_id) {
    m_order_id = order_id;
    m_order_id_isSet = true;
}

bool OAIConversionEvents_data_inner_custom_data::is_order_id_Set() const{
    return m_order_id_isSet;
}

bool OAIConversionEvents_data_inner_custom_data::is_order_id_Valid() const{
    return m_order_id_isValid;
}

QString OAIConversionEvents_data_inner_custom_data::getSearchString() const {
    return m_search_string;
}
void OAIConversionEvents_data_inner_custom_data::setSearchString(const QString &search_string) {
    m_search_string = search_string;
    m_search_string_isSet = true;
}

bool OAIConversionEvents_data_inner_custom_data::is_search_string_Set() const{
    return m_search_string_isSet;
}

bool OAIConversionEvents_data_inner_custom_data::is_search_string_Valid() const{
    return m_search_string_isValid;
}

QString OAIConversionEvents_data_inner_custom_data::getOptOutType() const {
    return m_opt_out_type;
}
void OAIConversionEvents_data_inner_custom_data::setOptOutType(const QString &opt_out_type) {
    m_opt_out_type = opt_out_type;
    m_opt_out_type_isSet = true;
}

bool OAIConversionEvents_data_inner_custom_data::is_opt_out_type_Set() const{
    return m_opt_out_type_isSet;
}

bool OAIConversionEvents_data_inner_custom_data::is_opt_out_type_Valid() const{
    return m_opt_out_type_isValid;
}

QString OAIConversionEvents_data_inner_custom_data::getNp() const {
    return m_np;
}
void OAIConversionEvents_data_inner_custom_data::setNp(const QString &np) {
    m_np = np;
    m_np_isSet = true;
}

bool OAIConversionEvents_data_inner_custom_data::is_np_Set() const{
    return m_np_isSet;
}

bool OAIConversionEvents_data_inner_custom_data::is_np_Valid() const{
    return m_np_isValid;
}

bool OAIConversionEvents_data_inner_custom_data::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_brand_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contents.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_items_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_search_string_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opt_out_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_np_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConversionEvents_data_inner_custom_data::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
