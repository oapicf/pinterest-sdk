/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIUserAccountApi_H
#define OAI_OAIUserAccountApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAccount.h"
#include "OAIAnalyticsMetricsResponse.h"
#include "OAIBoards_user_follows_list_200_response.h"
#include "OAIError.h"
#include "OAIFollowUserRequest.h"
#include "OAIFollowers_list_200_response.h"
#include "OAILinkedBusiness.h"
#include "OAITopPinsAnalyticsResponse.h"
#include "OAITopVideoPinsAnalyticsResponse.h"
#include "OAIUserFollowingFeedType.h"
#include "OAIUserSummary.h"
#include "OAIUserWebsiteSummary.h"
#include "OAIUserWebsiteVerificationCode.h"
#include "OAIUserWebsiteVerifyRequest.h"
#include "OAIUser_account_followed_interests_200_response.h"
#include "OAIUser_following_get_200_response.h"
#include "OAIUser_websites_get_200_response.h"
#include <QMap>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIUserAccountApi : public QObject {
    Q_OBJECT

public:
    OAIUserAccountApi(const int timeOut = 0);
    ~OAIUserAccountApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  bookmark QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  explicit_following bool [optional]
    * @param[in]  ad_account_id QString [optional]
    */
    virtual void boardsUserFollows_list(const ::OpenAPI::OptionalParam<QString> &bookmark = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &explicit_following = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &ad_account_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  username QString [required]
    * @param[in]  oai_follow_user_request OAIFollowUserRequest [required]
    */
    virtual void followUser_update(const QString &username, const OAIFollowUserRequest &oai_follow_user_request);

    /**
    * @param[in]  bookmark QString [optional]
    * @param[in]  page_size qint32 [optional]
    */
    virtual void followers_list(const ::OpenAPI::OptionalParam<QString> &bookmark = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>());


    virtual void linkedBusinessAccounts_get();

    /**
    * @param[in]  website QString [required]
    */
    virtual void unverifyWebsite_delete(const QString &website);

    /**
    * @param[in]  start_date QDate [required]
    * @param[in]  end_date QDate [required]
    * @param[in]  from_claimed_content QString [optional]
    * @param[in]  pin_format QString [optional]
    * @param[in]  app_types QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  source QString [optional]
    * @param[in]  metric_types QList<QString> [optional]
    * @param[in]  split_field QString [optional]
    * @param[in]  ad_account_id QString [optional]
    */
    virtual void userAccount_analytics(const QDate &start_date, const QDate &end_date, const ::OpenAPI::OptionalParam<QString> &from_claimed_content = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &pin_format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &app_types = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &source = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &metric_types = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &split_field = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ad_account_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  start_date QDate [required]
    * @param[in]  end_date QDate [required]
    * @param[in]  sort_by QString [required]
    * @param[in]  from_claimed_content QString [optional]
    * @param[in]  pin_format QString [optional]
    * @param[in]  app_types QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  source QString [optional]
    * @param[in]  metric_types QList<QString> [optional]
    * @param[in]  num_of_pins qint32 [optional]
    * @param[in]  created_in_last_n_days qint32 [optional]
    * @param[in]  ad_account_id QString [optional]
    */
    virtual void userAccount_analytics_topPins(const QDate &start_date, const QDate &end_date, const QString &sort_by, const ::OpenAPI::OptionalParam<QString> &from_claimed_content = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &pin_format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &app_types = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &source = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &metric_types = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &num_of_pins = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &created_in_last_n_days = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &ad_account_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  start_date QDate [required]
    * @param[in]  end_date QDate [required]
    * @param[in]  sort_by QString [required]
    * @param[in]  from_claimed_content QString [optional]
    * @param[in]  pin_format QString [optional]
    * @param[in]  app_types QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  source QString [optional]
    * @param[in]  metric_types QList<QString> [optional]
    * @param[in]  num_of_pins qint32 [optional]
    * @param[in]  created_in_last_n_days qint32 [optional]
    * @param[in]  ad_account_id QString [optional]
    */
    virtual void userAccount_analytics_topVideoPins(const QDate &start_date, const QDate &end_date, const QString &sort_by, const ::OpenAPI::OptionalParam<QString> &from_claimed_content = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &pin_format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &app_types = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &source = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &metric_types = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &num_of_pins = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &created_in_last_n_days = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &ad_account_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  username QString [required]
    * @param[in]  bookmark QString [optional]
    * @param[in]  page_size qint32 [optional]
    */
    virtual void userAccount_followedInterests(const QString &username, const ::OpenAPI::OptionalParam<QString> &bookmark = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  ad_account_id QString [optional]
    */
    virtual void userAccount_get(const ::OpenAPI::OptionalParam<QString> &ad_account_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  bookmark QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  feed_type OAIUserFollowingFeedType [optional]
    * @param[in]  explicit_following bool [optional]
    * @param[in]  ad_account_id QString [optional]
    */
    virtual void userFollowing_get(const ::OpenAPI::OptionalParam<QString> &bookmark = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAIUserFollowingFeedType> &feed_type = ::OpenAPI::OptionalParam<OAIUserFollowingFeedType>(), const ::OpenAPI::OptionalParam<bool> &explicit_following = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &ad_account_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  bookmark QString [optional]
    * @param[in]  page_size qint32 [optional]
    */
    virtual void userWebsites_get(const ::OpenAPI::OptionalParam<QString> &bookmark = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  oai_user_website_verify_request OAIUserWebsiteVerifyRequest [required]
    * @param[in]  ad_account_id QString [optional]
    */
    virtual void verifyWebsite_update(const OAIUserWebsiteVerifyRequest &oai_user_website_verify_request, const ::OpenAPI::OptionalParam<QString> &ad_account_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  ad_account_id QString [optional]
    */
    virtual void websiteVerification_get(const ::OpenAPI::OptionalParam<QString> &ad_account_id = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void boardsUserFollows_listCallback(OAIHttpRequestWorker *worker);
    void followUser_updateCallback(OAIHttpRequestWorker *worker);
    void followers_listCallback(OAIHttpRequestWorker *worker);
    void linkedBusinessAccounts_getCallback(OAIHttpRequestWorker *worker);
    void unverifyWebsite_deleteCallback(OAIHttpRequestWorker *worker);
    void userAccount_analyticsCallback(OAIHttpRequestWorker *worker);
    void userAccount_analytics_topPinsCallback(OAIHttpRequestWorker *worker);
    void userAccount_analytics_topVideoPinsCallback(OAIHttpRequestWorker *worker);
    void userAccount_followedInterestsCallback(OAIHttpRequestWorker *worker);
    void userAccount_getCallback(OAIHttpRequestWorker *worker);
    void userFollowing_getCallback(OAIHttpRequestWorker *worker);
    void userWebsites_getCallback(OAIHttpRequestWorker *worker);
    void verifyWebsite_updateCallback(OAIHttpRequestWorker *worker);
    void websiteVerification_getCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void boardsUserFollows_listSignal(OAIBoards_user_follows_list_200_response summary);
    void followUser_updateSignal(OAIUserSummary summary);
    void followers_listSignal(OAIFollowers_list_200_response summary);
    void linkedBusinessAccounts_getSignal(QList<OAILinkedBusiness> summary);
    void unverifyWebsite_deleteSignal();
    void userAccount_analyticsSignal(QMap<QString, OAIAnalyticsMetricsResponse> summary);
    void userAccount_analytics_topPinsSignal(OAITopPinsAnalyticsResponse summary);
    void userAccount_analytics_topVideoPinsSignal(OAITopVideoPinsAnalyticsResponse summary);
    void userAccount_followedInterestsSignal(OAIUser_account_followed_interests_200_response summary);
    void userAccount_getSignal(OAIAccount summary);
    void userFollowing_getSignal(OAIUser_following_get_200_response summary);
    void userWebsites_getSignal(OAIUser_websites_get_200_response summary);
    void verifyWebsite_updateSignal(OAIUserWebsiteSummary summary);
    void websiteVerification_getSignal(OAIUserWebsiteVerificationCode summary);


    void boardsUserFollows_listSignalFull(OAIHttpRequestWorker *worker, OAIBoards_user_follows_list_200_response summary);
    void followUser_updateSignalFull(OAIHttpRequestWorker *worker, OAIUserSummary summary);
    void followers_listSignalFull(OAIHttpRequestWorker *worker, OAIFollowers_list_200_response summary);
    void linkedBusinessAccounts_getSignalFull(OAIHttpRequestWorker *worker, QList<OAILinkedBusiness> summary);
    void unverifyWebsite_deleteSignalFull(OAIHttpRequestWorker *worker);
    void userAccount_analyticsSignalFull(OAIHttpRequestWorker *worker, QMap<QString, OAIAnalyticsMetricsResponse> summary);
    void userAccount_analytics_topPinsSignalFull(OAIHttpRequestWorker *worker, OAITopPinsAnalyticsResponse summary);
    void userAccount_analytics_topVideoPinsSignalFull(OAIHttpRequestWorker *worker, OAITopVideoPinsAnalyticsResponse summary);
    void userAccount_followedInterestsSignalFull(OAIHttpRequestWorker *worker, OAIUser_account_followed_interests_200_response summary);
    void userAccount_getSignalFull(OAIHttpRequestWorker *worker, OAIAccount summary);
    void userFollowing_getSignalFull(OAIHttpRequestWorker *worker, OAIUser_following_get_200_response summary);
    void userWebsites_getSignalFull(OAIHttpRequestWorker *worker, OAIUser_websites_get_200_response summary);
    void verifyWebsite_updateSignalFull(OAIHttpRequestWorker *worker, OAIUserWebsiteSummary summary);
    void websiteVerification_getSignalFull(OAIHttpRequestWorker *worker, OAIUserWebsiteVerificationCode summary);

    Q_DECL_DEPRECATED_X("Use boardsUserFollows_listSignalError() instead")
    void boardsUserFollows_listSignalE(OAIBoards_user_follows_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void boardsUserFollows_listSignalError(OAIBoards_user_follows_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use followUser_updateSignalError() instead")
    void followUser_updateSignalE(OAIUserSummary summary, QNetworkReply::NetworkError error_type, QString error_str);
    void followUser_updateSignalError(OAIUserSummary summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use followers_listSignalError() instead")
    void followers_listSignalE(OAIFollowers_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void followers_listSignalError(OAIFollowers_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use linkedBusinessAccounts_getSignalError() instead")
    void linkedBusinessAccounts_getSignalE(QList<OAILinkedBusiness> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void linkedBusinessAccounts_getSignalError(QList<OAILinkedBusiness> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unverifyWebsite_deleteSignalError() instead")
    void unverifyWebsite_deleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void unverifyWebsite_deleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userAccount_analyticsSignalError() instead")
    void userAccount_analyticsSignalE(QMap<QString, OAIAnalyticsMetricsResponse> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void userAccount_analyticsSignalError(QMap<QString, OAIAnalyticsMetricsResponse> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userAccount_analytics_topPinsSignalError() instead")
    void userAccount_analytics_topPinsSignalE(OAITopPinsAnalyticsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void userAccount_analytics_topPinsSignalError(OAITopPinsAnalyticsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userAccount_analytics_topVideoPinsSignalError() instead")
    void userAccount_analytics_topVideoPinsSignalE(OAITopVideoPinsAnalyticsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void userAccount_analytics_topVideoPinsSignalError(OAITopVideoPinsAnalyticsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userAccount_followedInterestsSignalError() instead")
    void userAccount_followedInterestsSignalE(OAIUser_account_followed_interests_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void userAccount_followedInterestsSignalError(OAIUser_account_followed_interests_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userAccount_getSignalError() instead")
    void userAccount_getSignalE(OAIAccount summary, QNetworkReply::NetworkError error_type, QString error_str);
    void userAccount_getSignalError(OAIAccount summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userFollowing_getSignalError() instead")
    void userFollowing_getSignalE(OAIUser_following_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void userFollowing_getSignalError(OAIUser_following_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userWebsites_getSignalError() instead")
    void userWebsites_getSignalE(OAIUser_websites_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void userWebsites_getSignalError(OAIUser_websites_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use verifyWebsite_updateSignalError() instead")
    void verifyWebsite_updateSignalE(OAIUserWebsiteSummary summary, QNetworkReply::NetworkError error_type, QString error_str);
    void verifyWebsite_updateSignalError(OAIUserWebsiteSummary summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use websiteVerification_getSignalError() instead")
    void websiteVerification_getSignalE(OAIUserWebsiteVerificationCode summary, QNetworkReply::NetworkError error_type, QString error_str);
    void websiteVerification_getSignalError(OAIUserWebsiteVerificationCode summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use boardsUserFollows_listSignalErrorFull() instead")
    void boardsUserFollows_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void boardsUserFollows_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use followUser_updateSignalErrorFull() instead")
    void followUser_updateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void followUser_updateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use followers_listSignalErrorFull() instead")
    void followers_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void followers_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use linkedBusinessAccounts_getSignalErrorFull() instead")
    void linkedBusinessAccounts_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void linkedBusinessAccounts_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unverifyWebsite_deleteSignalErrorFull() instead")
    void unverifyWebsite_deleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void unverifyWebsite_deleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userAccount_analyticsSignalErrorFull() instead")
    void userAccount_analyticsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void userAccount_analyticsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userAccount_analytics_topPinsSignalErrorFull() instead")
    void userAccount_analytics_topPinsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void userAccount_analytics_topPinsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userAccount_analytics_topVideoPinsSignalErrorFull() instead")
    void userAccount_analytics_topVideoPinsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void userAccount_analytics_topVideoPinsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userAccount_followedInterestsSignalErrorFull() instead")
    void userAccount_followedInterestsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void userAccount_followedInterestsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userAccount_getSignalErrorFull() instead")
    void userAccount_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void userAccount_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userFollowing_getSignalErrorFull() instead")
    void userFollowing_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void userFollowing_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userWebsites_getSignalErrorFull() instead")
    void userWebsites_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void userWebsites_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use verifyWebsite_updateSignalErrorFull() instead")
    void verifyWebsite_updateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void verifyWebsite_updateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use websiteVerification_getSignalErrorFull() instead")
    void websiteVerification_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void websiteVerification_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
