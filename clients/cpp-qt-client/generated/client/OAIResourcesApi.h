/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIResourcesApi_H
#define OAI_OAIResourcesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAdAccountsCountryResponse.h"
#include "OAIBookClosedResponse.h"
#include "OAIDeliveryMetricsResponse.h"
#include "OAIError.h"
#include "OAIObject.h"
#include "OAISingleInterestTargetingOptionResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIResourcesApi : public QObject {
    Q_OBJECT

public:
    OAIResourcesApi(const int timeOut = 0);
    ~OAIResourcesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    virtual void adAccountCountries_get();

    /**
    * @param[in]  report_type QString [optional]
    */
    virtual void deliveryMetrics_get(const ::OpenAPI::OptionalParam<QString> &report_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  interest_id QString [required]
    */
    virtual void interestTargetingOptions_get(const QString &interest_id);


    virtual void leadFormQuestions_get();

    /**
    * @param[in]  date QString [required]
    */
    virtual void metricsReadyState_get(const QString &date);

    /**
    * @param[in]  targeting_type QString [required]
    * @param[in]  client_id QString [optional]
    * @param[in]  oauth_signature QString [optional]
    * @param[in]  timestamp QString [optional]
    * @param[in]  ad_account_id QString [optional]
    */
    virtual void targetingOptions_get(const QString &targeting_type, const ::OpenAPI::OptionalParam<QString> &client_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &timestamp = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ad_account_id = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void adAccountCountries_getCallback(OAIHttpRequestWorker *worker);
    void deliveryMetrics_getCallback(OAIHttpRequestWorker *worker);
    void interestTargetingOptions_getCallback(OAIHttpRequestWorker *worker);
    void leadFormQuestions_getCallback(OAIHttpRequestWorker *worker);
    void metricsReadyState_getCallback(OAIHttpRequestWorker *worker);
    void targetingOptions_getCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void adAccountCountries_getSignal(OAIAdAccountsCountryResponse summary);
    void deliveryMetrics_getSignal(OAIDeliveryMetricsResponse summary);
    void interestTargetingOptions_getSignal(OAISingleInterestTargetingOptionResponse summary);
    void leadFormQuestions_getSignal();
    void metricsReadyState_getSignal(OAIBookClosedResponse summary);
    void targetingOptions_getSignal(QList<OAIObject> summary);


    void adAccountCountries_getSignalFull(OAIHttpRequestWorker *worker, OAIAdAccountsCountryResponse summary);
    void deliveryMetrics_getSignalFull(OAIHttpRequestWorker *worker, OAIDeliveryMetricsResponse summary);
    void interestTargetingOptions_getSignalFull(OAIHttpRequestWorker *worker, OAISingleInterestTargetingOptionResponse summary);
    void leadFormQuestions_getSignalFull(OAIHttpRequestWorker *worker);
    void metricsReadyState_getSignalFull(OAIHttpRequestWorker *worker, OAIBookClosedResponse summary);
    void targetingOptions_getSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);

    Q_DECL_DEPRECATED_X("Use adAccountCountries_getSignalError() instead")
    void adAccountCountries_getSignalE(OAIAdAccountsCountryResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adAccountCountries_getSignalError(OAIAdAccountsCountryResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deliveryMetrics_getSignalError() instead")
    void deliveryMetrics_getSignalE(OAIDeliveryMetricsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deliveryMetrics_getSignalError(OAIDeliveryMetricsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use interestTargetingOptions_getSignalError() instead")
    void interestTargetingOptions_getSignalE(OAISingleInterestTargetingOptionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void interestTargetingOptions_getSignalError(OAISingleInterestTargetingOptionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use leadFormQuestions_getSignalError() instead")
    void leadFormQuestions_getSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void leadFormQuestions_getSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metricsReadyState_getSignalError() instead")
    void metricsReadyState_getSignalE(OAIBookClosedResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void metricsReadyState_getSignalError(OAIBookClosedResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use targetingOptions_getSignalError() instead")
    void targetingOptions_getSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void targetingOptions_getSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use adAccountCountries_getSignalErrorFull() instead")
    void adAccountCountries_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adAccountCountries_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deliveryMetrics_getSignalErrorFull() instead")
    void deliveryMetrics_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deliveryMetrics_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use interestTargetingOptions_getSignalErrorFull() instead")
    void interestTargetingOptions_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void interestTargetingOptions_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use leadFormQuestions_getSignalErrorFull() instead")
    void leadFormQuestions_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void leadFormQuestions_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metricsReadyState_getSignalErrorFull() instead")
    void metricsReadyState_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void metricsReadyState_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use targetingOptions_getSignalErrorFull() instead")
    void targetingOptions_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void targetingOptions_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
