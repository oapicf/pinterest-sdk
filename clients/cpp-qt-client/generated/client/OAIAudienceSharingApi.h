/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAudienceSharingApi_H
#define OAI_OAIAudienceSharingApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAd_accounts_audiences_shared_accounts_list_200_response.h"
#include "OAIAudienceAccountType.h"
#include "OAIAudiences_list_200_response.h"
#include "OAIBusinessSharedAudience.h"
#include "OAIBusinessSharedAudienceResponse.h"
#include "OAIError.h"
#include "OAISharedAudience.h"
#include "OAISharedAudienceResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAudienceSharingApi : public QObject {
    Q_OBJECT

public:
    OAIAudienceSharingApi(const int timeOut = 0);
    ~OAIAudienceSharingApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  ad_account_id QString [required]
    * @param[in]  audience_id QString [required]
    * @param[in]  account_type OAIAudienceAccountType [required]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  bookmark QString [optional]
    */
    virtual void adAccountsAudiencesSharedAccounts_list(const QString &ad_account_id, const QString &audience_id, const OAIAudienceAccountType &account_type, const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &bookmark = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  business_id QString [required]
    * @param[in]  audience_id QString [required]
    * @param[in]  account_type OAIAudienceAccountType [required]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  bookmark QString [optional]
    */
    virtual void businessAccountAudiencesSharedAccounts_list(const QString &business_id, const QString &audience_id, const OAIAudienceAccountType &account_type, const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &bookmark = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  business_id QString [required]
    * @param[in]  bookmark QString [optional]
    * @param[in]  order QString [optional]
    * @param[in]  page_size qint32 [optional]
    */
    virtual void sharedAudiencesForBusiness_list(const QString &business_id, const ::OpenAPI::OptionalParam<QString> &bookmark = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  ad_account_id QString [required]
    * @param[in]  oai_shared_audience OAISharedAudience [required]
    */
    virtual void updateAdAccountToAdAccountSharedAudience(const QString &ad_account_id, const OAISharedAudience &oai_shared_audience);

    /**
    * @param[in]  ad_account_id QString [required]
    * @param[in]  oai_business_shared_audience OAIBusinessSharedAudience [required]
    */
    virtual void updateAdAccountToBusinessSharedAudience(const QString &ad_account_id, const OAIBusinessSharedAudience &oai_business_shared_audience);

    /**
    * @param[in]  business_id QString [required]
    * @param[in]  oai_shared_audience OAISharedAudience [required]
    */
    virtual void updateBusinessToAdAccountSharedAudience(const QString &business_id, const OAISharedAudience &oai_shared_audience);

    /**
    * @param[in]  business_id QString [required]
    * @param[in]  oai_business_shared_audience OAIBusinessSharedAudience [required]
    */
    virtual void updateBusinessToBusinessSharedAudience(const QString &business_id, const OAIBusinessSharedAudience &oai_business_shared_audience);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void adAccountsAudiencesSharedAccounts_listCallback(OAIHttpRequestWorker *worker);
    void businessAccountAudiencesSharedAccounts_listCallback(OAIHttpRequestWorker *worker);
    void sharedAudiencesForBusiness_listCallback(OAIHttpRequestWorker *worker);
    void updateAdAccountToAdAccountSharedAudienceCallback(OAIHttpRequestWorker *worker);
    void updateAdAccountToBusinessSharedAudienceCallback(OAIHttpRequestWorker *worker);
    void updateBusinessToAdAccountSharedAudienceCallback(OAIHttpRequestWorker *worker);
    void updateBusinessToBusinessSharedAudienceCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void adAccountsAudiencesSharedAccounts_listSignal(OAIAd_accounts_audiences_shared_accounts_list_200_response summary);
    void businessAccountAudiencesSharedAccounts_listSignal(OAIAd_accounts_audiences_shared_accounts_list_200_response summary);
    void sharedAudiencesForBusiness_listSignal(OAIAudiences_list_200_response summary);
    void updateAdAccountToAdAccountSharedAudienceSignal(OAISharedAudienceResponse summary);
    void updateAdAccountToBusinessSharedAudienceSignal(OAIBusinessSharedAudienceResponse summary);
    void updateBusinessToAdAccountSharedAudienceSignal(OAISharedAudienceResponse summary);
    void updateBusinessToBusinessSharedAudienceSignal(OAIBusinessSharedAudienceResponse summary);


    void adAccountsAudiencesSharedAccounts_listSignalFull(OAIHttpRequestWorker *worker, OAIAd_accounts_audiences_shared_accounts_list_200_response summary);
    void businessAccountAudiencesSharedAccounts_listSignalFull(OAIHttpRequestWorker *worker, OAIAd_accounts_audiences_shared_accounts_list_200_response summary);
    void sharedAudiencesForBusiness_listSignalFull(OAIHttpRequestWorker *worker, OAIAudiences_list_200_response summary);
    void updateAdAccountToAdAccountSharedAudienceSignalFull(OAIHttpRequestWorker *worker, OAISharedAudienceResponse summary);
    void updateAdAccountToBusinessSharedAudienceSignalFull(OAIHttpRequestWorker *worker, OAIBusinessSharedAudienceResponse summary);
    void updateBusinessToAdAccountSharedAudienceSignalFull(OAIHttpRequestWorker *worker, OAISharedAudienceResponse summary);
    void updateBusinessToBusinessSharedAudienceSignalFull(OAIHttpRequestWorker *worker, OAIBusinessSharedAudienceResponse summary);

    Q_DECL_DEPRECATED_X("Use adAccountsAudiencesSharedAccounts_listSignalError() instead")
    void adAccountsAudiencesSharedAccounts_listSignalE(OAIAd_accounts_audiences_shared_accounts_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adAccountsAudiencesSharedAccounts_listSignalError(OAIAd_accounts_audiences_shared_accounts_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use businessAccountAudiencesSharedAccounts_listSignalError() instead")
    void businessAccountAudiencesSharedAccounts_listSignalE(OAIAd_accounts_audiences_shared_accounts_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void businessAccountAudiencesSharedAccounts_listSignalError(OAIAd_accounts_audiences_shared_accounts_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sharedAudiencesForBusiness_listSignalError() instead")
    void sharedAudiencesForBusiness_listSignalE(OAIAudiences_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sharedAudiencesForBusiness_listSignalError(OAIAudiences_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAdAccountToAdAccountSharedAudienceSignalError() instead")
    void updateAdAccountToAdAccountSharedAudienceSignalE(OAISharedAudienceResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateAdAccountToAdAccountSharedAudienceSignalError(OAISharedAudienceResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAdAccountToBusinessSharedAudienceSignalError() instead")
    void updateAdAccountToBusinessSharedAudienceSignalE(OAIBusinessSharedAudienceResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateAdAccountToBusinessSharedAudienceSignalError(OAIBusinessSharedAudienceResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateBusinessToAdAccountSharedAudienceSignalError() instead")
    void updateBusinessToAdAccountSharedAudienceSignalE(OAISharedAudienceResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateBusinessToAdAccountSharedAudienceSignalError(OAISharedAudienceResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateBusinessToBusinessSharedAudienceSignalError() instead")
    void updateBusinessToBusinessSharedAudienceSignalE(OAIBusinessSharedAudienceResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateBusinessToBusinessSharedAudienceSignalError(OAIBusinessSharedAudienceResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use adAccountsAudiencesSharedAccounts_listSignalErrorFull() instead")
    void adAccountsAudiencesSharedAccounts_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adAccountsAudiencesSharedAccounts_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use businessAccountAudiencesSharedAccounts_listSignalErrorFull() instead")
    void businessAccountAudiencesSharedAccounts_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void businessAccountAudiencesSharedAccounts_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sharedAudiencesForBusiness_listSignalErrorFull() instead")
    void sharedAudiencesForBusiness_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sharedAudiencesForBusiness_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAdAccountToAdAccountSharedAudienceSignalErrorFull() instead")
    void updateAdAccountToAdAccountSharedAudienceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateAdAccountToAdAccountSharedAudienceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAdAccountToBusinessSharedAudienceSignalErrorFull() instead")
    void updateAdAccountToBusinessSharedAudienceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateAdAccountToBusinessSharedAudienceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateBusinessToAdAccountSharedAudienceSignalErrorFull() instead")
    void updateBusinessToAdAccountSharedAudienceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateBusinessToAdAccountSharedAudienceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateBusinessToBusinessSharedAudienceSignalErrorFull() instead")
    void updateBusinessToBusinessSharedAudienceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateBusinessToBusinessSharedAudienceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
