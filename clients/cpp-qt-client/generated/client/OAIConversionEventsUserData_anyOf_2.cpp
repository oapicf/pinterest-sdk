/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConversionEventsUserData_anyOf_2.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConversionEventsUserData_anyOf_2::OAIConversionEventsUserData_anyOf_2(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConversionEventsUserData_anyOf_2::OAIConversionEventsUserData_anyOf_2() {
    this->initializeModel();
}

OAIConversionEventsUserData_anyOf_2::~OAIConversionEventsUserData_anyOf_2() {}

void OAIConversionEventsUserData_anyOf_2::initializeModel() {

    m_em_isSet = false;
    m_em_isValid = false;

    m_hashed_maids_isSet = false;
    m_hashed_maids_isValid = false;

    m_client_ip_address_isSet = false;
    m_client_ip_address_isValid = false;

    m_client_user_agent_isSet = false;
    m_client_user_agent_isValid = false;
}

void OAIConversionEventsUserData_anyOf_2::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConversionEventsUserData_anyOf_2::fromJsonObject(QJsonObject json) {

    m_em_isValid = ::OpenAPI::fromJsonValue(m_em, json[QString("em")]);
    m_em_isSet = !json[QString("em")].isNull() && m_em_isValid;

    m_hashed_maids_isValid = ::OpenAPI::fromJsonValue(m_hashed_maids, json[QString("hashed_maids")]);
    m_hashed_maids_isSet = !json[QString("hashed_maids")].isNull() && m_hashed_maids_isValid;

    m_client_ip_address_isValid = ::OpenAPI::fromJsonValue(m_client_ip_address, json[QString("client_ip_address")]);
    m_client_ip_address_isSet = !json[QString("client_ip_address")].isNull() && m_client_ip_address_isValid;

    m_client_user_agent_isValid = ::OpenAPI::fromJsonValue(m_client_user_agent, json[QString("client_user_agent")]);
    m_client_user_agent_isSet = !json[QString("client_user_agent")].isNull() && m_client_user_agent_isValid;
}

QString OAIConversionEventsUserData_anyOf_2::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConversionEventsUserData_anyOf_2::asJsonObject() const {
    QJsonObject obj;
    if (m_em.size() > 0) {
        obj.insert(QString("em"), ::OpenAPI::toJsonValue(m_em));
    }
    if (m_hashed_maids.size() > 0) {
        obj.insert(QString("hashed_maids"), ::OpenAPI::toJsonValue(m_hashed_maids));
    }
    if (m_client_ip_address_isSet) {
        obj.insert(QString("client_ip_address"), ::OpenAPI::toJsonValue(m_client_ip_address));
    }
    if (m_client_user_agent_isSet) {
        obj.insert(QString("client_user_agent"), ::OpenAPI::toJsonValue(m_client_user_agent));
    }
    return obj;
}

QList<QString> OAIConversionEventsUserData_anyOf_2::getEm() const {
    return m_em;
}
void OAIConversionEventsUserData_anyOf_2::setEm(const QList<QString> &em) {
    m_em = em;
    m_em_isSet = true;
}

bool OAIConversionEventsUserData_anyOf_2::is_em_Set() const{
    return m_em_isSet;
}

bool OAIConversionEventsUserData_anyOf_2::is_em_Valid() const{
    return m_em_isValid;
}

QList<QString> OAIConversionEventsUserData_anyOf_2::getHashedMaids() const {
    return m_hashed_maids;
}
void OAIConversionEventsUserData_anyOf_2::setHashedMaids(const QList<QString> &hashed_maids) {
    m_hashed_maids = hashed_maids;
    m_hashed_maids_isSet = true;
}

bool OAIConversionEventsUserData_anyOf_2::is_hashed_maids_Set() const{
    return m_hashed_maids_isSet;
}

bool OAIConversionEventsUserData_anyOf_2::is_hashed_maids_Valid() const{
    return m_hashed_maids_isValid;
}

QString OAIConversionEventsUserData_anyOf_2::getClientIpAddress() const {
    return m_client_ip_address;
}
void OAIConversionEventsUserData_anyOf_2::setClientIpAddress(const QString &client_ip_address) {
    m_client_ip_address = client_ip_address;
    m_client_ip_address_isSet = true;
}

bool OAIConversionEventsUserData_anyOf_2::is_client_ip_address_Set() const{
    return m_client_ip_address_isSet;
}

bool OAIConversionEventsUserData_anyOf_2::is_client_ip_address_Valid() const{
    return m_client_ip_address_isValid;
}

QString OAIConversionEventsUserData_anyOf_2::getClientUserAgent() const {
    return m_client_user_agent;
}
void OAIConversionEventsUserData_anyOf_2::setClientUserAgent(const QString &client_user_agent) {
    m_client_user_agent = client_user_agent;
    m_client_user_agent_isSet = true;
}

bool OAIConversionEventsUserData_anyOf_2::is_client_user_agent_Set() const{
    return m_client_user_agent_isSet;
}

bool OAIConversionEventsUserData_anyOf_2::is_client_user_agent_Valid() const{
    return m_client_user_agent_isValid;
}

bool OAIConversionEventsUserData_anyOf_2::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_em.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_hashed_maids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_user_agent_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConversionEventsUserData_anyOf_2::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_client_ip_address_isValid && m_client_user_agent_isValid && true;
}

} // namespace OpenAPI
