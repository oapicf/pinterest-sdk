/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConversionTagResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConversionTagResponse::OAIConversionTagResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConversionTagResponse::OAIConversionTagResponse() {
    this->initializeModel();
}

OAIConversionTagResponse::~OAIConversionTagResponse() {}

void OAIConversionTagResponse::initializeModel() {

    m_ad_account_id_isSet = false;
    m_ad_account_id_isValid = false;

    m_code_snippet_isSet = false;
    m_code_snippet_isValid = false;

    m_enhanced_match_status_isSet = false;
    m_enhanced_match_status_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_fired_time_ms_isSet = false;
    m_last_fired_time_ms_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;

    m_configs_isSet = false;
    m_configs_isValid = false;
}

void OAIConversionTagResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConversionTagResponse::fromJsonObject(QJsonObject json) {

    m_ad_account_id_isValid = ::OpenAPI::fromJsonValue(m_ad_account_id, json[QString("ad_account_id")]);
    m_ad_account_id_isSet = !json[QString("ad_account_id")].isNull() && m_ad_account_id_isValid;

    m_code_snippet_isValid = ::OpenAPI::fromJsonValue(m_code_snippet, json[QString("code_snippet")]);
    m_code_snippet_isSet = !json[QString("code_snippet")].isNull() && m_code_snippet_isValid;

    m_enhanced_match_status_isValid = ::OpenAPI::fromJsonValue(m_enhanced_match_status, json[QString("enhanced_match_status")]);
    m_enhanced_match_status_isSet = !json[QString("enhanced_match_status")].isNull() && m_enhanced_match_status_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_last_fired_time_ms_isValid = ::OpenAPI::fromJsonValue(m_last_fired_time_ms, json[QString("last_fired_time_ms")]);
    m_last_fired_time_ms_isSet = !json[QString("last_fired_time_ms")].isNull() && m_last_fired_time_ms_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;

    m_configs_isValid = ::OpenAPI::fromJsonValue(m_configs, json[QString("configs")]);
    m_configs_isSet = !json[QString("configs")].isNull() && m_configs_isValid;
}

QString OAIConversionTagResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConversionTagResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_ad_account_id_isSet) {
        obj.insert(QString("ad_account_id"), ::OpenAPI::toJsonValue(m_ad_account_id));
    }
    if (m_code_snippet_isSet) {
        obj.insert(QString("code_snippet"), ::OpenAPI::toJsonValue(m_code_snippet));
    }
    if (m_enhanced_match_status.isSet()) {
        obj.insert(QString("enhanced_match_status"), ::OpenAPI::toJsonValue(m_enhanced_match_status));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_fired_time_ms_isSet) {
        obj.insert(QString("last_fired_time_ms"), ::OpenAPI::toJsonValue(m_last_fired_time_ms));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    if (m_configs.isSet()) {
        obj.insert(QString("configs"), ::OpenAPI::toJsonValue(m_configs));
    }
    return obj;
}

QString OAIConversionTagResponse::getAdAccountId() const {
    return m_ad_account_id;
}
void OAIConversionTagResponse::setAdAccountId(const QString &ad_account_id) {
    m_ad_account_id = ad_account_id;
    m_ad_account_id_isSet = true;
}

bool OAIConversionTagResponse::is_ad_account_id_Set() const{
    return m_ad_account_id_isSet;
}

bool OAIConversionTagResponse::is_ad_account_id_Valid() const{
    return m_ad_account_id_isValid;
}

QString OAIConversionTagResponse::getCodeSnippet() const {
    return m_code_snippet;
}
void OAIConversionTagResponse::setCodeSnippet(const QString &code_snippet) {
    m_code_snippet = code_snippet;
    m_code_snippet_isSet = true;
}

bool OAIConversionTagResponse::is_code_snippet_Set() const{
    return m_code_snippet_isSet;
}

bool OAIConversionTagResponse::is_code_snippet_Valid() const{
    return m_code_snippet_isValid;
}

OAIEnhancedMatchStatusType OAIConversionTagResponse::getEnhancedMatchStatus() const {
    return m_enhanced_match_status;
}
void OAIConversionTagResponse::setEnhancedMatchStatus(const OAIEnhancedMatchStatusType &enhanced_match_status) {
    m_enhanced_match_status = enhanced_match_status;
    m_enhanced_match_status_isSet = true;
}

bool OAIConversionTagResponse::is_enhanced_match_status_Set() const{
    return m_enhanced_match_status_isSet;
}

bool OAIConversionTagResponse::is_enhanced_match_status_Valid() const{
    return m_enhanced_match_status_isValid;
}

QString OAIConversionTagResponse::getId() const {
    return m_id;
}
void OAIConversionTagResponse::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIConversionTagResponse::is_id_Set() const{
    return m_id_isSet;
}

bool OAIConversionTagResponse::is_id_Valid() const{
    return m_id_isValid;
}

double OAIConversionTagResponse::getLastFiredTimeMs() const {
    return m_last_fired_time_ms;
}
void OAIConversionTagResponse::setLastFiredTimeMs(const double &last_fired_time_ms) {
    m_last_fired_time_ms = last_fired_time_ms;
    m_last_fired_time_ms_isSet = true;
}

bool OAIConversionTagResponse::is_last_fired_time_ms_Set() const{
    return m_last_fired_time_ms_isSet;
}

bool OAIConversionTagResponse::is_last_fired_time_ms_Valid() const{
    return m_last_fired_time_ms_isValid;
}

QString OAIConversionTagResponse::getName() const {
    return m_name;
}
void OAIConversionTagResponse::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIConversionTagResponse::is_name_Set() const{
    return m_name_isSet;
}

bool OAIConversionTagResponse::is_name_Valid() const{
    return m_name_isValid;
}

OAIEntityStatus OAIConversionTagResponse::getStatus() const {
    return m_status;
}
void OAIConversionTagResponse::setStatus(const OAIEntityStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIConversionTagResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIConversionTagResponse::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIConversionTagResponse::getVersion() const {
    return m_version;
}
void OAIConversionTagResponse::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIConversionTagResponse::is_version_Set() const{
    return m_version_isSet;
}

bool OAIConversionTagResponse::is_version_Valid() const{
    return m_version_isValid;
}

OAIConversionTagConfigs OAIConversionTagResponse::getConfigs() const {
    return m_configs;
}
void OAIConversionTagResponse::setConfigs(const OAIConversionTagConfigs &configs) {
    m_configs = configs;
    m_configs_isSet = true;
}

bool OAIConversionTagResponse::is_configs_Set() const{
    return m_configs_isSet;
}

bool OAIConversionTagResponse::is_configs_Valid() const{
    return m_configs_isValid;
}

bool OAIConversionTagResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ad_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_snippet_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enhanced_match_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_fired_time_ms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_configs.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConversionTagResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
