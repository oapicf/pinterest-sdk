/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAILeadAdsApi_H
#define OAI_OAILeadAdsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAdAccountCreateSubscriptionRequest.h"
#include "OAIAdAccountCreateSubscriptionResponse.h"
#include "OAIAdAccountGetSubscriptionResponse.h"
#include "OAIAd_accounts_subscriptions_get_list_200_response.h"
#include "OAIError.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAILeadAdsApi : public QObject {
    Q_OBJECT

public:
    OAILeadAdsApi(const int timeOut = 0);
    ~OAILeadAdsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  ad_account_id QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void adAccountsSubscriptions_delById(const QString &ad_account_id, const QString &subscription_id);

    /**
    * @param[in]  ad_account_id QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void adAccountsSubscriptions_getById(const QString &ad_account_id, const QString &subscription_id);

    /**
    * @param[in]  ad_account_id QString [required]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  bookmark QString [optional]
    */
    virtual void adAccountsSubscriptions_getList(const QString &ad_account_id, const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &bookmark = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  ad_account_id QString [required]
    * @param[in]  oaiad_account_create_subscription_request OAIAdAccountCreateSubscriptionRequest [required]
    */
    virtual void adAccountsSubscriptions_post(const QString &ad_account_id, const OAIAdAccountCreateSubscriptionRequest &oaiad_account_create_subscription_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void adAccountsSubscriptions_delByIdCallback(OAIHttpRequestWorker *worker);
    void adAccountsSubscriptions_getByIdCallback(OAIHttpRequestWorker *worker);
    void adAccountsSubscriptions_getListCallback(OAIHttpRequestWorker *worker);
    void adAccountsSubscriptions_postCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void adAccountsSubscriptions_delByIdSignal();
    void adAccountsSubscriptions_getByIdSignal(OAIAdAccountGetSubscriptionResponse summary);
    void adAccountsSubscriptions_getListSignal(OAIAd_accounts_subscriptions_get_list_200_response summary);
    void adAccountsSubscriptions_postSignal(OAIAdAccountCreateSubscriptionResponse summary);


    void adAccountsSubscriptions_delByIdSignalFull(OAIHttpRequestWorker *worker);
    void adAccountsSubscriptions_getByIdSignalFull(OAIHttpRequestWorker *worker, OAIAdAccountGetSubscriptionResponse summary);
    void adAccountsSubscriptions_getListSignalFull(OAIHttpRequestWorker *worker, OAIAd_accounts_subscriptions_get_list_200_response summary);
    void adAccountsSubscriptions_postSignalFull(OAIHttpRequestWorker *worker, OAIAdAccountCreateSubscriptionResponse summary);

    Q_DECL_DEPRECATED_X("Use adAccountsSubscriptions_delByIdSignalError() instead")
    void adAccountsSubscriptions_delByIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void adAccountsSubscriptions_delByIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adAccountsSubscriptions_getByIdSignalError() instead")
    void adAccountsSubscriptions_getByIdSignalE(OAIAdAccountGetSubscriptionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adAccountsSubscriptions_getByIdSignalError(OAIAdAccountGetSubscriptionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adAccountsSubscriptions_getListSignalError() instead")
    void adAccountsSubscriptions_getListSignalE(OAIAd_accounts_subscriptions_get_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adAccountsSubscriptions_getListSignalError(OAIAd_accounts_subscriptions_get_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adAccountsSubscriptions_postSignalError() instead")
    void adAccountsSubscriptions_postSignalE(OAIAdAccountCreateSubscriptionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adAccountsSubscriptions_postSignalError(OAIAdAccountCreateSubscriptionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use adAccountsSubscriptions_delByIdSignalErrorFull() instead")
    void adAccountsSubscriptions_delByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adAccountsSubscriptions_delByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adAccountsSubscriptions_getByIdSignalErrorFull() instead")
    void adAccountsSubscriptions_getByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adAccountsSubscriptions_getByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adAccountsSubscriptions_getListSignalErrorFull() instead")
    void adAccountsSubscriptions_getListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adAccountsSubscriptions_getListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adAccountsSubscriptions_postSignalErrorFull() instead")
    void adAccountsSubscriptions_postSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adAccountsSubscriptions_postSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
