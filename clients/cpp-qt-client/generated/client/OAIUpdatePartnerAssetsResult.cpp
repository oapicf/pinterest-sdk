/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdatePartnerAssetsResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdatePartnerAssetsResult::OAIUpdatePartnerAssetsResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdatePartnerAssetsResult::OAIUpdatePartnerAssetsResult() {
    this->initializeModel();
}

OAIUpdatePartnerAssetsResult::~OAIUpdatePartnerAssetsResult() {}

void OAIUpdatePartnerAssetsResult::initializeModel() {

    m_asset_id_isSet = false;
    m_asset_id_isValid = false;

    m_asset_type_isSet = false;
    m_asset_type_isValid = false;

    m_partner_id_isSet = false;
    m_partner_id_isValid = false;

    m_permissions_isSet = false;
    m_permissions_isValid = false;
}

void OAIUpdatePartnerAssetsResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdatePartnerAssetsResult::fromJsonObject(QJsonObject json) {

    m_asset_id_isValid = ::OpenAPI::fromJsonValue(m_asset_id, json[QString("asset_id")]);
    m_asset_id_isSet = !json[QString("asset_id")].isNull() && m_asset_id_isValid;

    m_asset_type_isValid = ::OpenAPI::fromJsonValue(m_asset_type, json[QString("asset_type")]);
    m_asset_type_isSet = !json[QString("asset_type")].isNull() && m_asset_type_isValid;

    m_partner_id_isValid = ::OpenAPI::fromJsonValue(m_partner_id, json[QString("partner_id")]);
    m_partner_id_isSet = !json[QString("partner_id")].isNull() && m_partner_id_isValid;

    m_permissions_isValid = ::OpenAPI::fromJsonValue(m_permissions, json[QString("permissions")]);
    m_permissions_isSet = !json[QString("permissions")].isNull() && m_permissions_isValid;
}

QString OAIUpdatePartnerAssetsResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdatePartnerAssetsResult::asJsonObject() const {
    QJsonObject obj;
    if (m_asset_id_isSet) {
        obj.insert(QString("asset_id"), ::OpenAPI::toJsonValue(m_asset_id));
    }
    if (m_asset_type_isSet) {
        obj.insert(QString("asset_type"), ::OpenAPI::toJsonValue(m_asset_type));
    }
    if (m_partner_id_isSet) {
        obj.insert(QString("partner_id"), ::OpenAPI::toJsonValue(m_partner_id));
    }
    if (m_permissions.size() > 0) {
        obj.insert(QString("permissions"), ::OpenAPI::toJsonValue(m_permissions));
    }
    return obj;
}

QString OAIUpdatePartnerAssetsResult::getAssetId() const {
    return m_asset_id;
}
void OAIUpdatePartnerAssetsResult::setAssetId(const QString &asset_id) {
    m_asset_id = asset_id;
    m_asset_id_isSet = true;
}

bool OAIUpdatePartnerAssetsResult::is_asset_id_Set() const{
    return m_asset_id_isSet;
}

bool OAIUpdatePartnerAssetsResult::is_asset_id_Valid() const{
    return m_asset_id_isValid;
}

QString OAIUpdatePartnerAssetsResult::getAssetType() const {
    return m_asset_type;
}
void OAIUpdatePartnerAssetsResult::setAssetType(const QString &asset_type) {
    m_asset_type = asset_type;
    m_asset_type_isSet = true;
}

bool OAIUpdatePartnerAssetsResult::is_asset_type_Set() const{
    return m_asset_type_isSet;
}

bool OAIUpdatePartnerAssetsResult::is_asset_type_Valid() const{
    return m_asset_type_isValid;
}

QString OAIUpdatePartnerAssetsResult::getPartnerId() const {
    return m_partner_id;
}
void OAIUpdatePartnerAssetsResult::setPartnerId(const QString &partner_id) {
    m_partner_id = partner_id;
    m_partner_id_isSet = true;
}

bool OAIUpdatePartnerAssetsResult::is_partner_id_Set() const{
    return m_partner_id_isSet;
}

bool OAIUpdatePartnerAssetsResult::is_partner_id_Valid() const{
    return m_partner_id_isValid;
}

QList<QString> OAIUpdatePartnerAssetsResult::getPermissions() const {
    return m_permissions;
}
void OAIUpdatePartnerAssetsResult::setPermissions(const QList<QString> &permissions) {
    m_permissions = permissions;
    m_permissions_isSet = true;
}

bool OAIUpdatePartnerAssetsResult::is_permissions_Set() const{
    return m_permissions_isSet;
}

bool OAIUpdatePartnerAssetsResult::is_permissions_Valid() const{
    return m_permissions_isValid;
}

bool OAIUpdatePartnerAssetsResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_asset_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_asset_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_partner_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_permissions.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdatePartnerAssetsResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
