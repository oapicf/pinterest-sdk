/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPinsApi_H
#define OAI_OAIPinsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIError.h"
#include "OAIPin.h"
#include "OAIPinAnalyticsMetricsResponse.h"
#include "OAIPinCreate.h"
#include "OAIPinUpdate.h"
#include "OAIPins_analytics_metric_types_parameter_inner.h"
#include "OAIPins_list_200_response.h"
#include "OAIPins_save_request.h"
#include <QMap>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPinsApi : public QObject {
    Q_OBJECT

public:
    OAIPinsApi(const int timeOut = 0);
    ~OAIPinsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  pin_ids QList<QString> [required]
    * @param[in]  start_date QDate [required]
    * @param[in]  end_date QDate [required]
    * @param[in]  metric_types QList<OAIPins_analytics_metric_types_parameter_inner> [required]
    * @param[in]  app_types QString [optional]
    * @param[in]  ad_account_id QString [optional]
    */
    virtual void multiPins_analytics(const QList<QString> &pin_ids, const QDate &start_date, const QDate &end_date, const QList<OAIPins_analytics_metric_types_parameter_inner> &metric_types, const ::OpenAPI::OptionalParam<QString> &app_types = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ad_account_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  pin_id QString [required]
    * @param[in]  start_date QDate [required]
    * @param[in]  end_date QDate [required]
    * @param[in]  metric_types QList<OAIPins_analytics_metric_types_parameter_inner> [required]
    * @param[in]  app_types QString [optional]
    * @param[in]  split_field QString [optional]
    * @param[in]  ad_account_id QString [optional]
    */
    virtual void pins_analytics(const QString &pin_id, const QDate &start_date, const QDate &end_date, const QList<OAIPins_analytics_metric_types_parameter_inner> &metric_types, const ::OpenAPI::OptionalParam<QString> &app_types = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &split_field = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ad_account_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_pin_create OAIPinCreate [required]
    * @param[in]  ad_account_id QString [optional]
    */
    virtual void pins_create(const OAIPinCreate &oai_pin_create, const ::OpenAPI::OptionalParam<QString> &ad_account_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  pin_id QString [required]
    * @param[in]  ad_account_id QString [optional]
    */
    virtual void pins_delete(const QString &pin_id, const ::OpenAPI::OptionalParam<QString> &ad_account_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  pin_id QString [required]
    * @param[in]  pin_metrics bool [optional]
    * @param[in]  ad_account_id QString [optional]
    */
    virtual void pins_get(const QString &pin_id, const ::OpenAPI::OptionalParam<bool> &pin_metrics = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &ad_account_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  bookmark QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  pin_filter QString [optional]
    * @param[in]  include_protected_pins bool [optional]
    * @param[in]  pin_type QString [optional]
    * @param[in]  creative_types QList<QString> [optional]
    * @param[in]  ad_account_id QString [optional]
    * @param[in]  pin_metrics bool [optional]
    */
    virtual void pins_list(const ::OpenAPI::OptionalParam<QString> &bookmark = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &pin_filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &include_protected_pins = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &pin_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &creative_types = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &ad_account_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pin_metrics = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  pin_id QString [required]
    * @param[in]  oai_pins_save_request OAIPins_save_request [required]
    * @param[in]  ad_account_id QString [optional]
    */
    virtual void pins_save(const QString &pin_id, const OAIPins_save_request &oai_pins_save_request, const ::OpenAPI::OptionalParam<QString> &ad_account_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  pin_id QString [required]
    * @param[in]  oai_pin_update OAIPinUpdate [required]
    * @param[in]  ad_account_id QString [optional]
    */
    virtual void pins_update(const QString &pin_id, const OAIPinUpdate &oai_pin_update, const ::OpenAPI::OptionalParam<QString> &ad_account_id = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void multiPins_analyticsCallback(OAIHttpRequestWorker *worker);
    void pins_analyticsCallback(OAIHttpRequestWorker *worker);
    void pins_createCallback(OAIHttpRequestWorker *worker);
    void pins_deleteCallback(OAIHttpRequestWorker *worker);
    void pins_getCallback(OAIHttpRequestWorker *worker);
    void pins_listCallback(OAIHttpRequestWorker *worker);
    void pins_saveCallback(OAIHttpRequestWorker *worker);
    void pins_updateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void multiPins_analyticsSignal(QMap<QString, QMap> summary);
    void pins_analyticsSignal(QMap<QString, OAIPinAnalyticsMetricsResponse> summary);
    void pins_createSignal(OAIPin summary);
    void pins_deleteSignal();
    void pins_getSignal(OAIPin summary);
    void pins_listSignal(OAIPins_list_200_response summary);
    void pins_saveSignal(OAIPin summary);
    void pins_updateSignal(OAIPin summary);


    void multiPins_analyticsSignalFull(OAIHttpRequestWorker *worker, QMap<QString, QMap> summary);
    void pins_analyticsSignalFull(OAIHttpRequestWorker *worker, QMap<QString, OAIPinAnalyticsMetricsResponse> summary);
    void pins_createSignalFull(OAIHttpRequestWorker *worker, OAIPin summary);
    void pins_deleteSignalFull(OAIHttpRequestWorker *worker);
    void pins_getSignalFull(OAIHttpRequestWorker *worker, OAIPin summary);
    void pins_listSignalFull(OAIHttpRequestWorker *worker, OAIPins_list_200_response summary);
    void pins_saveSignalFull(OAIHttpRequestWorker *worker, OAIPin summary);
    void pins_updateSignalFull(OAIHttpRequestWorker *worker, OAIPin summary);

    Q_DECL_DEPRECATED_X("Use multiPins_analyticsSignalError() instead")
    void multiPins_analyticsSignalE(QMap<QString, QMap> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void multiPins_analyticsSignalError(QMap<QString, QMap> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pins_analyticsSignalError() instead")
    void pins_analyticsSignalE(QMap<QString, OAIPinAnalyticsMetricsResponse> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pins_analyticsSignalError(QMap<QString, OAIPinAnalyticsMetricsResponse> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pins_createSignalError() instead")
    void pins_createSignalE(OAIPin summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pins_createSignalError(OAIPin summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pins_deleteSignalError() instead")
    void pins_deleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void pins_deleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pins_getSignalError() instead")
    void pins_getSignalE(OAIPin summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pins_getSignalError(OAIPin summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pins_listSignalError() instead")
    void pins_listSignalE(OAIPins_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pins_listSignalError(OAIPins_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pins_saveSignalError() instead")
    void pins_saveSignalE(OAIPin summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pins_saveSignalError(OAIPin summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pins_updateSignalError() instead")
    void pins_updateSignalE(OAIPin summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pins_updateSignalError(OAIPin summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use multiPins_analyticsSignalErrorFull() instead")
    void multiPins_analyticsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void multiPins_analyticsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pins_analyticsSignalErrorFull() instead")
    void pins_analyticsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pins_analyticsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pins_createSignalErrorFull() instead")
    void pins_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pins_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pins_deleteSignalErrorFull() instead")
    void pins_deleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pins_deleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pins_getSignalErrorFull() instead")
    void pins_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pins_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pins_listSignalErrorFull() instead")
    void pins_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pins_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pins_saveSignalErrorFull() instead")
    void pins_saveSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pins_saveSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pins_updateSignalErrorFull() instead")
    void pins_updateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pins_updateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
