/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIBusinessAccessRelationshipsApi_H
#define OAI_OAIBusinessAccessRelationshipsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDeletePartnersRequest.h"
#include "OAIDeletePartnersResponse.h"
#include "OAIDeletedMembersResponse.h"
#include "OAIError.h"
#include "OAIGet_business_employers_200_response.h"
#include "OAIGet_business_members_200_response.h"
#include "OAIGet_business_partners_200_response.h"
#include "OAIMemberBusinessRole.h"
#include "OAIMembersToDeleteBody.h"
#include "OAIPartnerType.h"
#include "OAIUpdateMemberBusinessRoleBody.h"
#include "OAIUpdateMemberResultsResponseArray.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIBusinessAccessRelationshipsApi : public QObject {
    Q_OBJECT

public:
    OAIBusinessAccessRelationshipsApi(const int timeOut = 0);
    ~OAIBusinessAccessRelationshipsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  business_id QString [required]
    * @param[in]  oai_members_to_delete_body OAIMembersToDeleteBody [required]
    */
    virtual void deleteBusinessMembership(const QString &business_id, const OAIMembersToDeleteBody &oai_members_to_delete_body);

    /**
    * @param[in]  business_id QString [required]
    * @param[in]  oai_delete_partners_request OAIDeletePartnersRequest [required]
    */
    virtual void deleteBusinessPartners(const QString &business_id, const OAIDeletePartnersRequest &oai_delete_partners_request);

    /**
    * @param[in]  page_size qint32 [optional]
    * @param[in]  bookmark QString [optional]
    */
    virtual void get_businessEmployers(const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &bookmark = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  business_id QString [required]
    * @param[in]  assets_summary bool [optional]
    * @param[in]  business_roles QList<OAIMemberBusinessRole> [optional]
    * @param[in]  member_ids QString [optional]
    * @param[in]  start_index qint32 [optional]
    * @param[in]  bookmark QString [optional]
    * @param[in]  page_size qint32 [optional]
    */
    virtual void get_businessMembers(const QString &business_id, const ::OpenAPI::OptionalParam<bool> &assets_summary = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<OAIMemberBusinessRole>> &business_roles = ::OpenAPI::OptionalParam<QList<OAIMemberBusinessRole>>(), const ::OpenAPI::OptionalParam<QString> &member_ids = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &start_index = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &bookmark = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  business_id QString [required]
    * @param[in]  assets_summary bool [optional]
    * @param[in]  partner_type OAIPartnerType [optional]
    * @param[in]  partner_ids QString [optional]
    * @param[in]  start_index qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  bookmark QString [optional]
    */
    virtual void get_businessPartners(const QString &business_id, const ::OpenAPI::OptionalParam<bool> &assets_summary = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAIPartnerType> &partner_type = ::OpenAPI::OptionalParam<OAIPartnerType>(), const ::OpenAPI::OptionalParam<QString> &partner_ids = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &start_index = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &bookmark = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  business_id QString [required]
    * @param[in]  oai_update_member_business_role_body QList<OAIUpdateMemberBusinessRoleBody> [required]
    */
    virtual void update_businessMemberships(const QString &business_id, const QList<OAIUpdateMemberBusinessRoleBody> &oai_update_member_business_role_body);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deleteBusinessMembershipCallback(OAIHttpRequestWorker *worker);
    void deleteBusinessPartnersCallback(OAIHttpRequestWorker *worker);
    void get_businessEmployersCallback(OAIHttpRequestWorker *worker);
    void get_businessMembersCallback(OAIHttpRequestWorker *worker);
    void get_businessPartnersCallback(OAIHttpRequestWorker *worker);
    void update_businessMembershipsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deleteBusinessMembershipSignal(OAIDeletedMembersResponse summary);
    void deleteBusinessPartnersSignal(OAIDeletePartnersResponse summary);
    void get_businessEmployersSignal(OAIGet_business_employers_200_response summary);
    void get_businessMembersSignal(OAIGet_business_members_200_response summary);
    void get_businessPartnersSignal(OAIGet_business_partners_200_response summary);
    void update_businessMembershipsSignal(OAIUpdateMemberResultsResponseArray summary);


    void deleteBusinessMembershipSignalFull(OAIHttpRequestWorker *worker, OAIDeletedMembersResponse summary);
    void deleteBusinessPartnersSignalFull(OAIHttpRequestWorker *worker, OAIDeletePartnersResponse summary);
    void get_businessEmployersSignalFull(OAIHttpRequestWorker *worker, OAIGet_business_employers_200_response summary);
    void get_businessMembersSignalFull(OAIHttpRequestWorker *worker, OAIGet_business_members_200_response summary);
    void get_businessPartnersSignalFull(OAIHttpRequestWorker *worker, OAIGet_business_partners_200_response summary);
    void update_businessMembershipsSignalFull(OAIHttpRequestWorker *worker, OAIUpdateMemberResultsResponseArray summary);

    Q_DECL_DEPRECATED_X("Use deleteBusinessMembershipSignalError() instead")
    void deleteBusinessMembershipSignalE(OAIDeletedMembersResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteBusinessMembershipSignalError(OAIDeletedMembersResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteBusinessPartnersSignalError() instead")
    void deleteBusinessPartnersSignalE(OAIDeletePartnersResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteBusinessPartnersSignalError(OAIDeletePartnersResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use get_businessEmployersSignalError() instead")
    void get_businessEmployersSignalE(OAIGet_business_employers_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void get_businessEmployersSignalError(OAIGet_business_employers_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use get_businessMembersSignalError() instead")
    void get_businessMembersSignalE(OAIGet_business_members_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void get_businessMembersSignalError(OAIGet_business_members_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use get_businessPartnersSignalError() instead")
    void get_businessPartnersSignalE(OAIGet_business_partners_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void get_businessPartnersSignalError(OAIGet_business_partners_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use update_businessMembershipsSignalError() instead")
    void update_businessMembershipsSignalE(OAIUpdateMemberResultsResponseArray summary, QNetworkReply::NetworkError error_type, QString error_str);
    void update_businessMembershipsSignalError(OAIUpdateMemberResultsResponseArray summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deleteBusinessMembershipSignalErrorFull() instead")
    void deleteBusinessMembershipSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteBusinessMembershipSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteBusinessPartnersSignalErrorFull() instead")
    void deleteBusinessPartnersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteBusinessPartnersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use get_businessEmployersSignalErrorFull() instead")
    void get_businessEmployersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void get_businessEmployersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use get_businessMembersSignalErrorFull() instead")
    void get_businessMembersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void get_businessMembersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use get_businessPartnersSignalErrorFull() instead")
    void get_businessPartnersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void get_businessPartnersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use update_businessMembershipsSignalErrorFull() instead")
    void update_businessMembershipsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void update_businessMembershipsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
