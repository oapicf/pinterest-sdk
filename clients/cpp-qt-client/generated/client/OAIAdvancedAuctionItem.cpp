/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAdvancedAuctionItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAdvancedAuctionItem::OAIAdvancedAuctionItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAdvancedAuctionItem::OAIAdvancedAuctionItem() {
    this->initializeModel();
}

OAIAdvancedAuctionItem::~OAIAdvancedAuctionItem() {}

void OAIAdvancedAuctionItem::initializeModel() {

    m_item_id_isSet = false;
    m_item_id_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;

    m_bid_options_isSet = false;
    m_bid_options_isValid = false;
}

void OAIAdvancedAuctionItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAdvancedAuctionItem::fromJsonObject(QJsonObject json) {

    m_item_id_isValid = ::OpenAPI::fromJsonValue(m_item_id, json[QString("item_id")]);
    m_item_id_isSet = !json[QString("item_id")].isNull() && m_item_id_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("language")]);
    m_language_isSet = !json[QString("language")].isNull() && m_language_isValid;

    m_bid_options_isValid = ::OpenAPI::fromJsonValue(m_bid_options, json[QString("bid_options")]);
    m_bid_options_isSet = !json[QString("bid_options")].isNull() && m_bid_options_isValid;
}

QString OAIAdvancedAuctionItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAdvancedAuctionItem::asJsonObject() const {
    QJsonObject obj;
    if (m_item_id_isSet) {
        obj.insert(QString("item_id"), ::OpenAPI::toJsonValue(m_item_id));
    }
    if (m_country.isSet()) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_language.isSet()) {
        obj.insert(QString("language"), ::OpenAPI::toJsonValue(m_language));
    }
    if (m_bid_options.isSet()) {
        obj.insert(QString("bid_options"), ::OpenAPI::toJsonValue(m_bid_options));
    }
    return obj;
}

QString OAIAdvancedAuctionItem::getItemId() const {
    return m_item_id;
}
void OAIAdvancedAuctionItem::setItemId(const QString &item_id) {
    m_item_id = item_id;
    m_item_id_isSet = true;
}

bool OAIAdvancedAuctionItem::is_item_id_Set() const{
    return m_item_id_isSet;
}

bool OAIAdvancedAuctionItem::is_item_id_Valid() const{
    return m_item_id_isValid;
}

OAICountry OAIAdvancedAuctionItem::getCountry() const {
    return m_country;
}
void OAIAdvancedAuctionItem::setCountry(const OAICountry &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIAdvancedAuctionItem::is_country_Set() const{
    return m_country_isSet;
}

bool OAIAdvancedAuctionItem::is_country_Valid() const{
    return m_country_isValid;
}

OAILanguage OAIAdvancedAuctionItem::getLanguage() const {
    return m_language;
}
void OAIAdvancedAuctionItem::setLanguage(const OAILanguage &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAIAdvancedAuctionItem::is_language_Set() const{
    return m_language_isSet;
}

bool OAIAdvancedAuctionItem::is_language_Valid() const{
    return m_language_isValid;
}

OAIAdvancedAuctionBidOptions OAIAdvancedAuctionItem::getBidOptions() const {
    return m_bid_options;
}
void OAIAdvancedAuctionItem::setBidOptions(const OAIAdvancedAuctionBidOptions &bid_options) {
    m_bid_options = bid_options;
    m_bid_options_isSet = true;
}

bool OAIAdvancedAuctionItem::is_bid_options_Set() const{
    return m_bid_options_isSet;
}

bool OAIAdvancedAuctionItem::is_bid_options_Valid() const{
    return m_bid_options_isValid;
}

bool OAIAdvancedAuctionItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_item_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_language.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_bid_options.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAdvancedAuctionItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_item_id_isValid && m_country_isValid && m_language_isValid && m_bid_options_isValid && true;
}

} // namespace OpenAPI
