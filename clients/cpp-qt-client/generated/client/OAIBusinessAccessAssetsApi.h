/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIBusinessAccessAssetsApi_H
#define OAI_OAIBusinessAccessAssetsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBusiness_asset_members_get_200_response.h"
#include "OAIBusiness_asset_partners_get_200_response.h"
#include "OAIBusiness_assets_get_200_response.h"
#include "OAIBusiness_member_assets_get_200_response.h"
#include "OAIBusiness_members_asset_access_delete_request.h"
#include "OAIBusiness_partner_asset_access_get_200_response.h"
#include "OAICreateAssetGroupBody.h"
#include "OAICreateAssetGroupResponse.h"
#include "OAIDeleteAssetGroupBody.h"
#include "OAIDeleteAssetGroupResponse.h"
#include "OAIDeleteMemberAccessResultsResponseArray.h"
#include "OAIDeletePartnerAssetAccessBody.h"
#include "OAIDeletePartnerAssetsResultsResponseArray.h"
#include "OAIError.h"
#include "OAIPartnerType.h"
#include "OAIPermissionsWithOwner.h"
#include "OAIUpdateAssetGroupBody.h"
#include "OAIUpdateAssetGroupResponse.h"
#include "OAIUpdateMemberAssetAccessBody.h"
#include "OAIUpdateMemberAssetsResultsResponseArray.h"
#include "OAIUpdatePartnerAssetAccessBody.h"
#include "OAIUpdatePartnerAssetsResultsResponseArray.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIBusinessAccessAssetsApi : public QObject {
    Q_OBJECT

public:
    OAIBusinessAccessAssetsApi(const int timeOut = 0);
    ~OAIBusinessAccessAssetsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  business_id QString [required]
    * @param[in]  oai_create_asset_group_body OAICreateAssetGroupBody [required]
    */
    virtual void assetGroup_create(const QString &business_id, const OAICreateAssetGroupBody &oai_create_asset_group_body);

    /**
    * @param[in]  business_id QString [required]
    * @param[in]  oai_delete_asset_group_body OAIDeleteAssetGroupBody [required]
    */
    virtual void assetGroup_delete(const QString &business_id, const OAIDeleteAssetGroupBody &oai_delete_asset_group_body);

    /**
    * @param[in]  business_id QString [required]
    * @param[in]  oai_update_asset_group_body OAIUpdateAssetGroupBody [required]
    */
    virtual void assetGroup_update(const QString &business_id, const OAIUpdateAssetGroupBody &oai_update_asset_group_body);

    /**
    * @param[in]  business_id QString [required]
    * @param[in]  asset_id QString [required]
    * @param[in]  bookmark QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  start_index qint32 [optional]
    */
    virtual void businessAssetMembers_get(const QString &business_id, const QString &asset_id, const ::OpenAPI::OptionalParam<QString> &bookmark = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &start_index = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  business_id QString [required]
    * @param[in]  asset_id QString [required]
    * @param[in]  start_index qint32 [optional]
    * @param[in]  bookmark QString [optional]
    * @param[in]  page_size qint32 [optional]
    */
    virtual void businessAssetPartners_get(const QString &business_id, const QString &asset_id, const ::OpenAPI::OptionalParam<qint32> &start_index = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &bookmark = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  business_id QString [required]
    * @param[in]  permissions QList<OAIPermissionsWithOwner> [optional]
    * @param[in]  child_asset_id QString [optional]
    * @param[in]  asset_group_id QString [optional]
    * @param[in]  asset_type QString [optional]
    * @param[in]  start_index qint32 [optional]
    * @param[in]  bookmark QString [optional]
    * @param[in]  page_size qint32 [optional]
    */
    virtual void businessAssets_get(const QString &business_id, const ::OpenAPI::OptionalParam<QList<OAIPermissionsWithOwner>> &permissions = ::OpenAPI::OptionalParam<QList<OAIPermissionsWithOwner>>(), const ::OpenAPI::OptionalParam<QString> &child_asset_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &asset_group_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &asset_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &start_index = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &bookmark = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  business_id QString [required]
    * @param[in]  member_id QString [required]
    * @param[in]  asset_type QString [optional]
    * @param[in]  start_index qint32 [optional]
    * @param[in]  bookmark QString [optional]
    * @param[in]  page_size qint32 [optional]
    */
    virtual void businessMemberAssets_get(const QString &business_id, const QString &member_id, const ::OpenAPI::OptionalParam<QString> &asset_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &start_index = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &bookmark = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  business_id QString [required]
    * @param[in]  oai_business_members_asset_access_delete_request OAIBusiness_members_asset_access_delete_request [required]
    */
    virtual void businessMembersAssetAccess_delete(const QString &business_id, const OAIBusiness_members_asset_access_delete_request &oai_business_members_asset_access_delete_request);

    /**
    * @param[in]  business_id QString [required]
    * @param[in]  oai_update_member_asset_access_body OAIUpdateMemberAssetAccessBody [required]
    */
    virtual void businessMembersAssetAccess_update(const QString &business_id, const OAIUpdateMemberAssetAccessBody &oai_update_member_asset_access_body);

    /**
    * @param[in]  business_id QString [required]
    * @param[in]  partner_id QString [required]
    * @param[in]  partner_type OAIPartnerType [optional]
    * @param[in]  asset_type QString [optional]
    * @param[in]  start_index qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  bookmark QString [optional]
    */
    virtual void businessPartnerAssetAccess_get(const QString &business_id, const QString &partner_id, const ::OpenAPI::OptionalParam<OAIPartnerType> &partner_type = ::OpenAPI::OptionalParam<OAIPartnerType>(), const ::OpenAPI::OptionalParam<QString> &asset_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &start_index = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &bookmark = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  business_id QString [required]
    * @param[in]  oai_delete_partner_asset_access_body OAIDeletePartnerAssetAccessBody [required]
    */
    virtual void deletePartnerAssetAccessHandlerImpl(const QString &business_id, const OAIDeletePartnerAssetAccessBody &oai_delete_partner_asset_access_body);

    /**
    * @param[in]  business_id QString [required]
    * @param[in]  oai_update_partner_asset_access_body OAIUpdatePartnerAssetAccessBody [required]
    */
    virtual void updatePartnerAssetAccessHandlerImpl(const QString &business_id, const OAIUpdatePartnerAssetAccessBody &oai_update_partner_asset_access_body);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void assetGroup_createCallback(OAIHttpRequestWorker *worker);
    void assetGroup_deleteCallback(OAIHttpRequestWorker *worker);
    void assetGroup_updateCallback(OAIHttpRequestWorker *worker);
    void businessAssetMembers_getCallback(OAIHttpRequestWorker *worker);
    void businessAssetPartners_getCallback(OAIHttpRequestWorker *worker);
    void businessAssets_getCallback(OAIHttpRequestWorker *worker);
    void businessMemberAssets_getCallback(OAIHttpRequestWorker *worker);
    void businessMembersAssetAccess_deleteCallback(OAIHttpRequestWorker *worker);
    void businessMembersAssetAccess_updateCallback(OAIHttpRequestWorker *worker);
    void businessPartnerAssetAccess_getCallback(OAIHttpRequestWorker *worker);
    void deletePartnerAssetAccessHandlerImplCallback(OAIHttpRequestWorker *worker);
    void updatePartnerAssetAccessHandlerImplCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void assetGroup_createSignal(OAICreateAssetGroupResponse summary);
    void assetGroup_deleteSignal(OAIDeleteAssetGroupResponse summary);
    void assetGroup_updateSignal(OAIUpdateAssetGroupResponse summary);
    void businessAssetMembers_getSignal(OAIBusiness_asset_members_get_200_response summary);
    void businessAssetPartners_getSignal(OAIBusiness_asset_partners_get_200_response summary);
    void businessAssets_getSignal(OAIBusiness_assets_get_200_response summary);
    void businessMemberAssets_getSignal(OAIBusiness_member_assets_get_200_response summary);
    void businessMembersAssetAccess_deleteSignal(OAIDeleteMemberAccessResultsResponseArray summary);
    void businessMembersAssetAccess_updateSignal(OAIUpdateMemberAssetsResultsResponseArray summary);
    void businessPartnerAssetAccess_getSignal(OAIBusiness_partner_asset_access_get_200_response summary);
    void deletePartnerAssetAccessHandlerImplSignal(OAIDeletePartnerAssetsResultsResponseArray summary);
    void updatePartnerAssetAccessHandlerImplSignal(OAIUpdatePartnerAssetsResultsResponseArray summary);


    void assetGroup_createSignalFull(OAIHttpRequestWorker *worker, OAICreateAssetGroupResponse summary);
    void assetGroup_deleteSignalFull(OAIHttpRequestWorker *worker, OAIDeleteAssetGroupResponse summary);
    void assetGroup_updateSignalFull(OAIHttpRequestWorker *worker, OAIUpdateAssetGroupResponse summary);
    void businessAssetMembers_getSignalFull(OAIHttpRequestWorker *worker, OAIBusiness_asset_members_get_200_response summary);
    void businessAssetPartners_getSignalFull(OAIHttpRequestWorker *worker, OAIBusiness_asset_partners_get_200_response summary);
    void businessAssets_getSignalFull(OAIHttpRequestWorker *worker, OAIBusiness_assets_get_200_response summary);
    void businessMemberAssets_getSignalFull(OAIHttpRequestWorker *worker, OAIBusiness_member_assets_get_200_response summary);
    void businessMembersAssetAccess_deleteSignalFull(OAIHttpRequestWorker *worker, OAIDeleteMemberAccessResultsResponseArray summary);
    void businessMembersAssetAccess_updateSignalFull(OAIHttpRequestWorker *worker, OAIUpdateMemberAssetsResultsResponseArray summary);
    void businessPartnerAssetAccess_getSignalFull(OAIHttpRequestWorker *worker, OAIBusiness_partner_asset_access_get_200_response summary);
    void deletePartnerAssetAccessHandlerImplSignalFull(OAIHttpRequestWorker *worker, OAIDeletePartnerAssetsResultsResponseArray summary);
    void updatePartnerAssetAccessHandlerImplSignalFull(OAIHttpRequestWorker *worker, OAIUpdatePartnerAssetsResultsResponseArray summary);

    Q_DECL_DEPRECATED_X("Use assetGroup_createSignalError() instead")
    void assetGroup_createSignalE(OAICreateAssetGroupResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void assetGroup_createSignalError(OAICreateAssetGroupResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetGroup_deleteSignalError() instead")
    void assetGroup_deleteSignalE(OAIDeleteAssetGroupResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void assetGroup_deleteSignalError(OAIDeleteAssetGroupResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetGroup_updateSignalError() instead")
    void assetGroup_updateSignalE(OAIUpdateAssetGroupResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void assetGroup_updateSignalError(OAIUpdateAssetGroupResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use businessAssetMembers_getSignalError() instead")
    void businessAssetMembers_getSignalE(OAIBusiness_asset_members_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void businessAssetMembers_getSignalError(OAIBusiness_asset_members_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use businessAssetPartners_getSignalError() instead")
    void businessAssetPartners_getSignalE(OAIBusiness_asset_partners_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void businessAssetPartners_getSignalError(OAIBusiness_asset_partners_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use businessAssets_getSignalError() instead")
    void businessAssets_getSignalE(OAIBusiness_assets_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void businessAssets_getSignalError(OAIBusiness_assets_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use businessMemberAssets_getSignalError() instead")
    void businessMemberAssets_getSignalE(OAIBusiness_member_assets_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void businessMemberAssets_getSignalError(OAIBusiness_member_assets_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use businessMembersAssetAccess_deleteSignalError() instead")
    void businessMembersAssetAccess_deleteSignalE(OAIDeleteMemberAccessResultsResponseArray summary, QNetworkReply::NetworkError error_type, QString error_str);
    void businessMembersAssetAccess_deleteSignalError(OAIDeleteMemberAccessResultsResponseArray summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use businessMembersAssetAccess_updateSignalError() instead")
    void businessMembersAssetAccess_updateSignalE(OAIUpdateMemberAssetsResultsResponseArray summary, QNetworkReply::NetworkError error_type, QString error_str);
    void businessMembersAssetAccess_updateSignalError(OAIUpdateMemberAssetsResultsResponseArray summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use businessPartnerAssetAccess_getSignalError() instead")
    void businessPartnerAssetAccess_getSignalE(OAIBusiness_partner_asset_access_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void businessPartnerAssetAccess_getSignalError(OAIBusiness_partner_asset_access_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletePartnerAssetAccessHandlerImplSignalError() instead")
    void deletePartnerAssetAccessHandlerImplSignalE(OAIDeletePartnerAssetsResultsResponseArray summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deletePartnerAssetAccessHandlerImplSignalError(OAIDeletePartnerAssetsResultsResponseArray summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePartnerAssetAccessHandlerImplSignalError() instead")
    void updatePartnerAssetAccessHandlerImplSignalE(OAIUpdatePartnerAssetsResultsResponseArray summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updatePartnerAssetAccessHandlerImplSignalError(OAIUpdatePartnerAssetsResultsResponseArray summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use assetGroup_createSignalErrorFull() instead")
    void assetGroup_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assetGroup_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetGroup_deleteSignalErrorFull() instead")
    void assetGroup_deleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assetGroup_deleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetGroup_updateSignalErrorFull() instead")
    void assetGroup_updateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assetGroup_updateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use businessAssetMembers_getSignalErrorFull() instead")
    void businessAssetMembers_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void businessAssetMembers_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use businessAssetPartners_getSignalErrorFull() instead")
    void businessAssetPartners_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void businessAssetPartners_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use businessAssets_getSignalErrorFull() instead")
    void businessAssets_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void businessAssets_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use businessMemberAssets_getSignalErrorFull() instead")
    void businessMemberAssets_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void businessMemberAssets_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use businessMembersAssetAccess_deleteSignalErrorFull() instead")
    void businessMembersAssetAccess_deleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void businessMembersAssetAccess_deleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use businessMembersAssetAccess_updateSignalErrorFull() instead")
    void businessMembersAssetAccess_updateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void businessMembersAssetAccess_updateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use businessPartnerAssetAccess_getSignalErrorFull() instead")
    void businessPartnerAssetAccess_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void businessPartnerAssetAccess_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletePartnerAssetAccessHandlerImplSignalErrorFull() instead")
    void deletePartnerAssetAccessHandlerImplSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deletePartnerAssetAccessHandlerImplSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePartnerAssetAccessHandlerImplSignalErrorFull() instead")
    void updatePartnerAssetAccessHandlerImplSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updatePartnerAssetAccessHandlerImplSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
