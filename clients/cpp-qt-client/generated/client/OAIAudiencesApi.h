/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAudiencesApi_H
#define OAI_OAIAudiencesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAudience.h"
#include "OAIAudienceCreateCustomRequest.h"
#include "OAIAudienceCreateRequest.h"
#include "OAIAudienceUpdateRequest.h"
#include "OAIAudiences_list_200_response.h"
#include "OAIError.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAudiencesApi : public QObject {
    Q_OBJECT

public:
    OAIAudiencesApi(const int timeOut = 0);
    ~OAIAudiencesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  ad_account_id QString [required]
    * @param[in]  oai_audience_create_request OAIAudienceCreateRequest [required]
    */
    virtual void audiences_create(const QString &ad_account_id, const OAIAudienceCreateRequest &oai_audience_create_request);

    /**
    * @param[in]  ad_account_id QString [required]
    * @param[in]  oai_audience_create_custom_request OAIAudienceCreateCustomRequest [required]
    */
    virtual void audiences_createCustom(const QString &ad_account_id, const OAIAudienceCreateCustomRequest &oai_audience_create_custom_request);

    /**
    * @param[in]  ad_account_id QString [required]
    * @param[in]  audience_id QString [required]
    */
    virtual void audiences_get(const QString &ad_account_id, const QString &audience_id);

    /**
    * @param[in]  ad_account_id QString [required]
    * @param[in]  bookmark QString [optional]
    * @param[in]  order QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  ownership_type QString [optional]
    */
    virtual void audiences_list(const QString &ad_account_id, const ::OpenAPI::OptionalParam<QString> &bookmark = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &ownership_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  ad_account_id QString [required]
    * @param[in]  audience_id QString [required]
    * @param[in]  oai_audience_update_request OAIAudienceUpdateRequest [optional]
    */
    virtual void audiences_update(const QString &ad_account_id, const QString &audience_id, const ::OpenAPI::OptionalParam<OAIAudienceUpdateRequest> &oai_audience_update_request = ::OpenAPI::OptionalParam<OAIAudienceUpdateRequest>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void audiences_createCallback(OAIHttpRequestWorker *worker);
    void audiences_createCustomCallback(OAIHttpRequestWorker *worker);
    void audiences_getCallback(OAIHttpRequestWorker *worker);
    void audiences_listCallback(OAIHttpRequestWorker *worker);
    void audiences_updateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void audiences_createSignal(OAIAudience summary);
    void audiences_createCustomSignal(OAIAudience summary);
    void audiences_getSignal(OAIAudience summary);
    void audiences_listSignal(OAIAudiences_list_200_response summary);
    void audiences_updateSignal(OAIAudience summary);


    void audiences_createSignalFull(OAIHttpRequestWorker *worker, OAIAudience summary);
    void audiences_createCustomSignalFull(OAIHttpRequestWorker *worker, OAIAudience summary);
    void audiences_getSignalFull(OAIHttpRequestWorker *worker, OAIAudience summary);
    void audiences_listSignalFull(OAIHttpRequestWorker *worker, OAIAudiences_list_200_response summary);
    void audiences_updateSignalFull(OAIHttpRequestWorker *worker, OAIAudience summary);

    Q_DECL_DEPRECATED_X("Use audiences_createSignalError() instead")
    void audiences_createSignalE(OAIAudience summary, QNetworkReply::NetworkError error_type, QString error_str);
    void audiences_createSignalError(OAIAudience summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use audiences_createCustomSignalError() instead")
    void audiences_createCustomSignalE(OAIAudience summary, QNetworkReply::NetworkError error_type, QString error_str);
    void audiences_createCustomSignalError(OAIAudience summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use audiences_getSignalError() instead")
    void audiences_getSignalE(OAIAudience summary, QNetworkReply::NetworkError error_type, QString error_str);
    void audiences_getSignalError(OAIAudience summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use audiences_listSignalError() instead")
    void audiences_listSignalE(OAIAudiences_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void audiences_listSignalError(OAIAudiences_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use audiences_updateSignalError() instead")
    void audiences_updateSignalE(OAIAudience summary, QNetworkReply::NetworkError error_type, QString error_str);
    void audiences_updateSignalError(OAIAudience summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use audiences_createSignalErrorFull() instead")
    void audiences_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void audiences_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use audiences_createCustomSignalErrorFull() instead")
    void audiences_createCustomSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void audiences_createCustomSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use audiences_getSignalErrorFull() instead")
    void audiences_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void audiences_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use audiences_listSignalErrorFull() instead")
    void audiences_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void audiences_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use audiences_updateSignalErrorFull() instead")
    void audiences_updateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void audiences_updateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
