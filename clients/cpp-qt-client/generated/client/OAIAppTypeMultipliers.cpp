/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAppTypeMultipliers.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAppTypeMultipliers::OAIAppTypeMultipliers(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAppTypeMultipliers::OAIAppTypeMultipliers() {
    this->initializeModel();
}

OAIAppTypeMultipliers::~OAIAppTypeMultipliers() {}

void OAIAppTypeMultipliers::initializeModel() {

    m_app_type_isSet = false;
    m_app_type_isValid = false;
}

void OAIAppTypeMultipliers::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAppTypeMultipliers::fromJsonObject(QJsonObject json) {

    m_app_type_isValid = ::OpenAPI::fromJsonValue(m_app_type, json[QString("APP_TYPE")]);
    m_app_type_isSet = !json[QString("APP_TYPE")].isNull() && m_app_type_isValid;
}

QString OAIAppTypeMultipliers::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAppTypeMultipliers::asJsonObject() const {
    QJsonObject obj;
    if (m_app_type.isSet()) {
        obj.insert(QString("APP_TYPE"), ::OpenAPI::toJsonValue(m_app_type));
    }
    return obj;
}

OAITargetingSpecAppType OAIAppTypeMultipliers::getAppType() const {
    return m_app_type;
}
void OAIAppTypeMultipliers::setAppType(const OAITargetingSpecAppType &app_type) {
    m_app_type = app_type;
    m_app_type_isSet = true;
}

bool OAIAppTypeMultipliers::is_app_type_Set() const{
    return m_app_type_isSet;
}

bool OAIAppTypeMultipliers::is_app_type_Valid() const{
    return m_app_type_isValid;
}

bool OAIAppTypeMultipliers::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAppTypeMultipliers::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
