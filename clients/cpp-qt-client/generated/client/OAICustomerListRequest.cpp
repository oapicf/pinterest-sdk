/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICustomerListRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICustomerListRequest::OAICustomerListRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICustomerListRequest::OAICustomerListRequest() {
    this->initializeModel();
}

OAICustomerListRequest::~OAICustomerListRequest() {}

void OAICustomerListRequest::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_records_isSet = false;
    m_records_isValid = false;

    m_list_type_isSet = false;
    m_list_type_isValid = false;

    m_exceptions_isSet = false;
    m_exceptions_isValid = false;
}

void OAICustomerListRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICustomerListRequest::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_records_isValid = ::OpenAPI::fromJsonValue(m_records, json[QString("records")]);
    m_records_isSet = !json[QString("records")].isNull() && m_records_isValid;

    m_list_type_isValid = ::OpenAPI::fromJsonValue(m_list_type, json[QString("list_type")]);
    m_list_type_isSet = !json[QString("list_type")].isNull() && m_list_type_isValid;

    m_exceptions_isValid = ::OpenAPI::fromJsonValue(m_exceptions, json[QString("exceptions")]);
    m_exceptions_isSet = !json[QString("exceptions")].isNull() && m_exceptions_isValid;
}

QString OAICustomerListRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICustomerListRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_records_isSet) {
        obj.insert(QString("records"), ::OpenAPI::toJsonValue(m_records));
    }
    if (m_list_type.isSet()) {
        obj.insert(QString("list_type"), ::OpenAPI::toJsonValue(m_list_type));
    }
    if (m_exceptions_isSet) {
        obj.insert(QString("exceptions"), ::OpenAPI::toJsonValue(m_exceptions));
    }
    return obj;
}

QString OAICustomerListRequest::getName() const {
    return m_name;
}
void OAICustomerListRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICustomerListRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAICustomerListRequest::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICustomerListRequest::getRecords() const {
    return m_records;
}
void OAICustomerListRequest::setRecords(const QString &records) {
    m_records = records;
    m_records_isSet = true;
}

bool OAICustomerListRequest::is_records_Set() const{
    return m_records_isSet;
}

bool OAICustomerListRequest::is_records_Valid() const{
    return m_records_isValid;
}

OAIUserListType OAICustomerListRequest::getListType() const {
    return m_list_type;
}
void OAICustomerListRequest::setListType(const OAIUserListType &list_type) {
    m_list_type = list_type;
    m_list_type_isSet = true;
}

bool OAICustomerListRequest::is_list_type_Set() const{
    return m_list_type_isSet;
}

bool OAICustomerListRequest::is_list_type_Valid() const{
    return m_list_type_isValid;
}

OAIObject OAICustomerListRequest::getExceptions() const {
    return m_exceptions;
}
void OAICustomerListRequest::setExceptions(const OAIObject &exceptions) {
    m_exceptions = exceptions;
    m_exceptions_isSet = true;
}

bool OAICustomerListRequest::is_exceptions_Set() const{
    return m_exceptions_isSet;
}

bool OAICustomerListRequest::is_exceptions_Valid() const{
    return m_exceptions_isValid;
}

bool OAICustomerListRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_records_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_list_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_exceptions_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICustomerListRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_records_isValid && true;
}

} // namespace OpenAPI
