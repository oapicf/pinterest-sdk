/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAuthRespondInvitesBody_invites_inner_action.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAuthRespondInvitesBody_invites_inner_action::OAIAuthRespondInvitesBody_invites_inner_action(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAuthRespondInvitesBody_invites_inner_action::OAIAuthRespondInvitesBody_invites_inner_action() {
    this->initializeModel();
}

OAIAuthRespondInvitesBody_invites_inner_action::~OAIAuthRespondInvitesBody_invites_inner_action() {}

void OAIAuthRespondInvitesBody_invites_inner_action::initializeModel() {

    m_accept_invite_isSet = false;
    m_accept_invite_isValid = false;

    m_asset_id_to_permissions_isSet = false;
    m_asset_id_to_permissions_isValid = false;
}

void OAIAuthRespondInvitesBody_invites_inner_action::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAuthRespondInvitesBody_invites_inner_action::fromJsonObject(QJsonObject json) {

    m_accept_invite_isValid = ::OpenAPI::fromJsonValue(m_accept_invite, json[QString("accept_invite")]);
    m_accept_invite_isSet = !json[QString("accept_invite")].isNull() && m_accept_invite_isValid;

    if(json["asset_id_to_permissions"].isObject()){
        auto varmap = json["asset_id_to_permissions"].toObject().toVariantMap();
        m_asset_id_to_permissions_isValid = true;
        if(varmap.count() > 0){
            for(auto val : varmap.keys()){
                QList<OAIPermissions> item;
                auto jval = QJsonValue::fromVariant(varmap.value(val));
                m_asset_id_to_permissions_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_asset_id_to_permissions_isSet &= !jval.isNull() && m_asset_id_to_permissions_isValid;
                m_asset_id_to_permissions.insert(m_asset_id_to_permissions.end(), val, item);
            }
        }
    }
}

QString OAIAuthRespondInvitesBody_invites_inner_action::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAuthRespondInvitesBody_invites_inner_action::asJsonObject() const {
    QJsonObject obj;
    if (m_accept_invite_isSet) {
        obj.insert(QString("accept_invite"), ::OpenAPI::toJsonValue(m_accept_invite));
    }
    if (m_asset_id_to_permissions.size() > 0) {
        
        obj.insert(QString("asset_id_to_permissions"), toJsonValue(m_asset_id_to_permissions));
    }
    return obj;
}

bool OAIAuthRespondInvitesBody_invites_inner_action::isAcceptInvite() const {
    return m_accept_invite;
}
void OAIAuthRespondInvitesBody_invites_inner_action::setAcceptInvite(const bool &accept_invite) {
    m_accept_invite = accept_invite;
    m_accept_invite_isSet = true;
}

bool OAIAuthRespondInvitesBody_invites_inner_action::is_accept_invite_Set() const{
    return m_accept_invite_isSet;
}

bool OAIAuthRespondInvitesBody_invites_inner_action::is_accept_invite_Valid() const{
    return m_accept_invite_isValid;
}

QMap<QString, QList<OAIPermissions>> OAIAuthRespondInvitesBody_invites_inner_action::getAssetIdToPermissions() const {
    return m_asset_id_to_permissions;
}
void OAIAuthRespondInvitesBody_invites_inner_action::setAssetIdToPermissions(const QMap<QString, QList<OAIPermissions>> &asset_id_to_permissions) {
    m_asset_id_to_permissions = asset_id_to_permissions;
    m_asset_id_to_permissions_isSet = true;
}

bool OAIAuthRespondInvitesBody_invites_inner_action::is_asset_id_to_permissions_Set() const{
    return m_asset_id_to_permissions_isSet;
}

bool OAIAuthRespondInvitesBody_invites_inner_action::is_asset_id_to_permissions_Valid() const{
    return m_asset_id_to_permissions_isValid;
}

bool OAIAuthRespondInvitesBody_invites_inner_action::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accept_invite_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_asset_id_to_permissions.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAuthRespondInvitesBody_invites_inner_action::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_accept_invite_isValid && true;
}

} // namespace OpenAPI
