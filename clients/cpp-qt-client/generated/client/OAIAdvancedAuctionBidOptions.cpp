/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAdvancedAuctionBidOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAdvancedAuctionBidOptions::OAIAdvancedAuctionBidOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAdvancedAuctionBidOptions::OAIAdvancedAuctionBidOptions() {
    this->initializeModel();
}

OAIAdvancedAuctionBidOptions::~OAIAdvancedAuctionBidOptions() {}

void OAIAdvancedAuctionBidOptions::initializeModel() {

    m_bid_in_micro_currency_isSet = false;
    m_bid_in_micro_currency_isValid = false;

    m_app_type_multipliers_isSet = false;
    m_app_type_multipliers_isValid = false;

    m_placement_multipliers_isSet = false;
    m_placement_multipliers_isValid = false;
}

void OAIAdvancedAuctionBidOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAdvancedAuctionBidOptions::fromJsonObject(QJsonObject json) {

    m_bid_in_micro_currency_isValid = ::OpenAPI::fromJsonValue(m_bid_in_micro_currency, json[QString("bid_in_micro_currency")]);
    m_bid_in_micro_currency_isSet = !json[QString("bid_in_micro_currency")].isNull() && m_bid_in_micro_currency_isValid;

    m_app_type_multipliers_isValid = ::OpenAPI::fromJsonValue(m_app_type_multipliers, json[QString("app_type_multipliers")]);
    m_app_type_multipliers_isSet = !json[QString("app_type_multipliers")].isNull() && m_app_type_multipliers_isValid;

    m_placement_multipliers_isValid = ::OpenAPI::fromJsonValue(m_placement_multipliers, json[QString("placement_multipliers")]);
    m_placement_multipliers_isSet = !json[QString("placement_multipliers")].isNull() && m_placement_multipliers_isValid;
}

QString OAIAdvancedAuctionBidOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAdvancedAuctionBidOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_bid_in_micro_currency_isSet) {
        obj.insert(QString("bid_in_micro_currency"), ::OpenAPI::toJsonValue(m_bid_in_micro_currency));
    }
    if (m_app_type_multipliers.isSet()) {
        obj.insert(QString("app_type_multipliers"), ::OpenAPI::toJsonValue(m_app_type_multipliers));
    }
    if (m_placement_multipliers.isSet()) {
        obj.insert(QString("placement_multipliers"), ::OpenAPI::toJsonValue(m_placement_multipliers));
    }
    return obj;
}

qint64 OAIAdvancedAuctionBidOptions::getBidInMicroCurrency() const {
    return m_bid_in_micro_currency;
}
void OAIAdvancedAuctionBidOptions::setBidInMicroCurrency(const qint64 &bid_in_micro_currency) {
    m_bid_in_micro_currency = bid_in_micro_currency;
    m_bid_in_micro_currency_isSet = true;
}

bool OAIAdvancedAuctionBidOptions::is_bid_in_micro_currency_Set() const{
    return m_bid_in_micro_currency_isSet;
}

bool OAIAdvancedAuctionBidOptions::is_bid_in_micro_currency_Valid() const{
    return m_bid_in_micro_currency_isValid;
}

OAIAppTypeMultipliers OAIAdvancedAuctionBidOptions::getAppTypeMultipliers() const {
    return m_app_type_multipliers;
}
void OAIAdvancedAuctionBidOptions::setAppTypeMultipliers(const OAIAppTypeMultipliers &app_type_multipliers) {
    m_app_type_multipliers = app_type_multipliers;
    m_app_type_multipliers_isSet = true;
}

bool OAIAdvancedAuctionBidOptions::is_app_type_multipliers_Set() const{
    return m_app_type_multipliers_isSet;
}

bool OAIAdvancedAuctionBidOptions::is_app_type_multipliers_Valid() const{
    return m_app_type_multipliers_isValid;
}

OAIPlacementMultipliers OAIAdvancedAuctionBidOptions::getPlacementMultipliers() const {
    return m_placement_multipliers;
}
void OAIAdvancedAuctionBidOptions::setPlacementMultipliers(const OAIPlacementMultipliers &placement_multipliers) {
    m_placement_multipliers = placement_multipliers;
    m_placement_multipliers_isSet = true;
}

bool OAIAdvancedAuctionBidOptions::is_placement_multipliers_Set() const{
    return m_placement_multipliers_isSet;
}

bool OAIAdvancedAuctionBidOptions::is_placement_multipliers_Valid() const{
    return m_placement_multipliers_isValid;
}

bool OAIAdvancedAuctionBidOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bid_in_micro_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_type_multipliers.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_placement_multipliers.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAdvancedAuctionBidOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
