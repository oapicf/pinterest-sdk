/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConversionTagType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConversionTagType::OAIConversionTagType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConversionTagType::OAIConversionTagType() {
    this->initializeModel();
}

OAIConversionTagType::~OAIConversionTagType() {}

void OAIConversionTagType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIConversionTagType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIConversionTagType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("PAGE_LOAD", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConversionTagType::PAGE_LOAD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UNKNOWN", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConversionTagType::UNKNOWN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INITIALIZED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConversionTagType::INITIALIZED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PAGE_VISIT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConversionTagType::PAGE_VISIT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SIGNUP", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConversionTagType::SIGNUP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CHECKOUT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConversionTagType::CHECKOUT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CUSTOM", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConversionTagType::CUSTOM;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("VIEW_CATEGORY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConversionTagType::VIEW_CATEGORY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SEARCH", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConversionTagType::SEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ADD_TO_CART", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConversionTagType::ADD_TO_CART;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("WATCH_VIDEO", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConversionTagType::WATCH_VIDEO;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LEAD", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConversionTagType::LEAD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("APP_INSTALL", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConversionTagType::APP_INSTALL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("WEB_SESSION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConversionTagType::WEB_SESSION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EXTERNAL_MEASUREMENT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConversionTagType::EXTERNAL_MEASUREMENT;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIConversionTagType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIConversionTagType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIConversionTagType::PAGE_LOAD:
            val = "PAGE_LOAD";
            break;
        case eOAIConversionTagType::UNKNOWN:
            val = "UNKNOWN";
            break;
        case eOAIConversionTagType::INITIALIZED:
            val = "INITIALIZED";
            break;
        case eOAIConversionTagType::PAGE_VISIT:
            val = "PAGE_VISIT";
            break;
        case eOAIConversionTagType::SIGNUP:
            val = "SIGNUP";
            break;
        case eOAIConversionTagType::CHECKOUT:
            val = "CHECKOUT";
            break;
        case eOAIConversionTagType::CUSTOM:
            val = "CUSTOM";
            break;
        case eOAIConversionTagType::VIEW_CATEGORY:
            val = "VIEW_CATEGORY";
            break;
        case eOAIConversionTagType::SEARCH:
            val = "SEARCH";
            break;
        case eOAIConversionTagType::ADD_TO_CART:
            val = "ADD_TO_CART";
            break;
        case eOAIConversionTagType::WATCH_VIDEO:
            val = "WATCH_VIDEO";
            break;
        case eOAIConversionTagType::LEAD:
            val = "LEAD";
            break;
        case eOAIConversionTagType::APP_INSTALL:
            val = "APP_INSTALL";
            break;
        case eOAIConversionTagType::WEB_SESSION:
            val = "WEB_SESSION";
            break;
        case eOAIConversionTagType::EXTERNAL_MEASUREMENT:
            val = "EXTERNAL_MEASUREMENT";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIConversionTagType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIConversionTagType::eOAIConversionTagType OAIConversionTagType::getValue() const {
    return m_value;
}

void OAIConversionTagType::setValue(const OAIConversionTagType::eOAIConversionTagType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIConversionTagType::isSet() const {
    
    return m_value_isSet;
}

bool OAIConversionTagType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
