/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIKeywordsApi_H
#define OAI_OAIKeywordsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIError.h"
#include "OAIKeywordUpdateBody.h"
#include "OAIKeywordsMetricsArrayResponse.h"
#include "OAIKeywordsRequest.h"
#include "OAIKeywordsResponse.h"
#include "OAIKeywords_get_200_response.h"
#include "OAIMatchType.h"
#include "OAITrendType.h"
#include "OAITrendingKeywordsResponse.h"
#include "OAITrendsSupportedRegion.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIKeywordsApi : public QObject {
    Q_OBJECT

public:
    OAIKeywordsApi(const int timeOut = 0);
    ~OAIKeywordsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  ad_account_id QString [required]
    * @param[in]  country_code QString [required]
    * @param[in]  keywords QList<QString> [required]
    */
    virtual void countryKeywordsMetrics_get(const QString &ad_account_id, const QString &country_code, const QList<QString> &keywords);

    /**
    * @param[in]  ad_account_id QString [required]
    * @param[in]  oai_keywords_request OAIKeywordsRequest [required]
    */
    virtual void keywords_create(const QString &ad_account_id, const OAIKeywordsRequest &oai_keywords_request);

    /**
    * @param[in]  ad_account_id QString [required]
    * @param[in]  campaign_id QString [optional]
    * @param[in]  ad_group_id QString [optional]
    * @param[in]  match_types QList<OAIMatchType> [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  bookmark QString [optional]
    */
    virtual void keywords_get(const QString &ad_account_id, const ::OpenAPI::OptionalParam<QString> &campaign_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ad_group_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAIMatchType>> &match_types = ::OpenAPI::OptionalParam<QList<OAIMatchType>>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &bookmark = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  ad_account_id QString [required]
    * @param[in]  oai_keyword_update_body OAIKeywordUpdateBody [required]
    */
    virtual void keywords_update(const QString &ad_account_id, const OAIKeywordUpdateBody &oai_keyword_update_body);

    /**
    * @param[in]  region OAITrendsSupportedRegion [required]
    * @param[in]  trend_type OAITrendType [required]
    * @param[in]  interests QList<QString> [optional]
    * @param[in]  genders QList<QString> [optional]
    * @param[in]  ages QList<QString> [optional]
    * @param[in]  include_keywords QList<QString> [optional]
    * @param[in]  normalize_against_group bool [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void trendingKeywords_list(const OAITrendsSupportedRegion &region, const OAITrendType &trend_type, const ::OpenAPI::OptionalParam<QList<QString>> &interests = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &genders = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &ages = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &include_keywords = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &normalize_against_group = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void countryKeywordsMetrics_getCallback(OAIHttpRequestWorker *worker);
    void keywords_createCallback(OAIHttpRequestWorker *worker);
    void keywords_getCallback(OAIHttpRequestWorker *worker);
    void keywords_updateCallback(OAIHttpRequestWorker *worker);
    void trendingKeywords_listCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void countryKeywordsMetrics_getSignal(OAIKeywordsMetricsArrayResponse summary);
    void keywords_createSignal(OAIKeywordsResponse summary);
    void keywords_getSignal(OAIKeywords_get_200_response summary);
    void keywords_updateSignal(OAIKeywordsResponse summary);
    void trendingKeywords_listSignal(OAITrendingKeywordsResponse summary);


    void countryKeywordsMetrics_getSignalFull(OAIHttpRequestWorker *worker, OAIKeywordsMetricsArrayResponse summary);
    void keywords_createSignalFull(OAIHttpRequestWorker *worker, OAIKeywordsResponse summary);
    void keywords_getSignalFull(OAIHttpRequestWorker *worker, OAIKeywords_get_200_response summary);
    void keywords_updateSignalFull(OAIHttpRequestWorker *worker, OAIKeywordsResponse summary);
    void trendingKeywords_listSignalFull(OAIHttpRequestWorker *worker, OAITrendingKeywordsResponse summary);

    Q_DECL_DEPRECATED_X("Use countryKeywordsMetrics_getSignalError() instead")
    void countryKeywordsMetrics_getSignalE(OAIKeywordsMetricsArrayResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void countryKeywordsMetrics_getSignalError(OAIKeywordsMetricsArrayResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use keywords_createSignalError() instead")
    void keywords_createSignalE(OAIKeywordsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void keywords_createSignalError(OAIKeywordsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use keywords_getSignalError() instead")
    void keywords_getSignalE(OAIKeywords_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void keywords_getSignalError(OAIKeywords_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use keywords_updateSignalError() instead")
    void keywords_updateSignalE(OAIKeywordsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void keywords_updateSignalError(OAIKeywordsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use trendingKeywords_listSignalError() instead")
    void trendingKeywords_listSignalE(OAITrendingKeywordsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void trendingKeywords_listSignalError(OAITrendingKeywordsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use countryKeywordsMetrics_getSignalErrorFull() instead")
    void countryKeywordsMetrics_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void countryKeywordsMetrics_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use keywords_createSignalErrorFull() instead")
    void keywords_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void keywords_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use keywords_getSignalErrorFull() instead")
    void keywords_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void keywords_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use keywords_updateSignalErrorFull() instead")
    void keywords_updateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void keywords_updateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use trendingKeywords_listSignalErrorFull() instead")
    void trendingKeywords_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void trendingKeywords_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
