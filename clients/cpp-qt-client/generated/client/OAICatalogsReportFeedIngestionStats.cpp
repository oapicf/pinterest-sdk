/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICatalogsReportFeedIngestionStats.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICatalogsReportFeedIngestionStats::OAICatalogsReportFeedIngestionStats(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICatalogsReportFeedIngestionStats::OAICatalogsReportFeedIngestionStats() {
    this->initializeModel();
}

OAICatalogsReportFeedIngestionStats::~OAICatalogsReportFeedIngestionStats() {}

void OAICatalogsReportFeedIngestionStats::initializeModel() {

    m_report_type_isSet = false;
    m_report_type_isValid = false;

    m_catalog_id_isSet = false;
    m_catalog_id_isValid = false;

    m_code_isSet = false;
    m_code_isValid = false;

    m_code_label_isSet = false;
    m_code_label_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_occurrences_isSet = false;
    m_occurrences_isValid = false;

    m_severity_isSet = false;
    m_severity_isValid = false;
}

void OAICatalogsReportFeedIngestionStats::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICatalogsReportFeedIngestionStats::fromJsonObject(QJsonObject json) {

    m_report_type_isValid = ::OpenAPI::fromJsonValue(m_report_type, json[QString("report_type")]);
    m_report_type_isSet = !json[QString("report_type")].isNull() && m_report_type_isValid;

    m_catalog_id_isValid = ::OpenAPI::fromJsonValue(m_catalog_id, json[QString("catalog_id")]);
    m_catalog_id_isSet = !json[QString("catalog_id")].isNull() && m_catalog_id_isValid;

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_code_label_isValid = ::OpenAPI::fromJsonValue(m_code_label, json[QString("code_label")]);
    m_code_label_isSet = !json[QString("code_label")].isNull() && m_code_label_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_occurrences_isValid = ::OpenAPI::fromJsonValue(m_occurrences, json[QString("occurrences")]);
    m_occurrences_isSet = !json[QString("occurrences")].isNull() && m_occurrences_isValid;

    m_severity_isValid = ::OpenAPI::fromJsonValue(m_severity, json[QString("severity")]);
    m_severity_isSet = !json[QString("severity")].isNull() && m_severity_isValid;
}

QString OAICatalogsReportFeedIngestionStats::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICatalogsReportFeedIngestionStats::asJsonObject() const {
    QJsonObject obj;
    if (m_report_type_isSet) {
        obj.insert(QString("report_type"), ::OpenAPI::toJsonValue(m_report_type));
    }
    if (m_catalog_id_isSet) {
        obj.insert(QString("catalog_id"), ::OpenAPI::toJsonValue(m_catalog_id));
    }
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_code_label_isSet) {
        obj.insert(QString("code_label"), ::OpenAPI::toJsonValue(m_code_label));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_occurrences_isSet) {
        obj.insert(QString("occurrences"), ::OpenAPI::toJsonValue(m_occurrences));
    }
    if (m_severity_isSet) {
        obj.insert(QString("severity"), ::OpenAPI::toJsonValue(m_severity));
    }
    return obj;
}

QString OAICatalogsReportFeedIngestionStats::getReportType() const {
    return m_report_type;
}
void OAICatalogsReportFeedIngestionStats::setReportType(const QString &report_type) {
    m_report_type = report_type;
    m_report_type_isSet = true;
}

bool OAICatalogsReportFeedIngestionStats::is_report_type_Set() const{
    return m_report_type_isSet;
}

bool OAICatalogsReportFeedIngestionStats::is_report_type_Valid() const{
    return m_report_type_isValid;
}

QString OAICatalogsReportFeedIngestionStats::getCatalogId() const {
    return m_catalog_id;
}
void OAICatalogsReportFeedIngestionStats::setCatalogId(const QString &catalog_id) {
    m_catalog_id = catalog_id;
    m_catalog_id_isSet = true;
}

bool OAICatalogsReportFeedIngestionStats::is_catalog_id_Set() const{
    return m_catalog_id_isSet;
}

bool OAICatalogsReportFeedIngestionStats::is_catalog_id_Valid() const{
    return m_catalog_id_isValid;
}

qint32 OAICatalogsReportFeedIngestionStats::getCode() const {
    return m_code;
}
void OAICatalogsReportFeedIngestionStats::setCode(const qint32 &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAICatalogsReportFeedIngestionStats::is_code_Set() const{
    return m_code_isSet;
}

bool OAICatalogsReportFeedIngestionStats::is_code_Valid() const{
    return m_code_isValid;
}

QString OAICatalogsReportFeedIngestionStats::getCodeLabel() const {
    return m_code_label;
}
void OAICatalogsReportFeedIngestionStats::setCodeLabel(const QString &code_label) {
    m_code_label = code_label;
    m_code_label_isSet = true;
}

bool OAICatalogsReportFeedIngestionStats::is_code_label_Set() const{
    return m_code_label_isSet;
}

bool OAICatalogsReportFeedIngestionStats::is_code_label_Valid() const{
    return m_code_label_isValid;
}

QString OAICatalogsReportFeedIngestionStats::getMessage() const {
    return m_message;
}
void OAICatalogsReportFeedIngestionStats::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAICatalogsReportFeedIngestionStats::is_message_Set() const{
    return m_message_isSet;
}

bool OAICatalogsReportFeedIngestionStats::is_message_Valid() const{
    return m_message_isValid;
}

qint32 OAICatalogsReportFeedIngestionStats::getOccurrences() const {
    return m_occurrences;
}
void OAICatalogsReportFeedIngestionStats::setOccurrences(const qint32 &occurrences) {
    m_occurrences = occurrences;
    m_occurrences_isSet = true;
}

bool OAICatalogsReportFeedIngestionStats::is_occurrences_Set() const{
    return m_occurrences_isSet;
}

bool OAICatalogsReportFeedIngestionStats::is_occurrences_Valid() const{
    return m_occurrences_isValid;
}

QString OAICatalogsReportFeedIngestionStats::getSeverity() const {
    return m_severity;
}
void OAICatalogsReportFeedIngestionStats::setSeverity(const QString &severity) {
    m_severity = severity;
    m_severity_isSet = true;
}

bool OAICatalogsReportFeedIngestionStats::is_severity_Set() const{
    return m_severity_isSet;
}

bool OAICatalogsReportFeedIngestionStats::is_severity_Valid() const{
    return m_severity_isValid;
}

bool OAICatalogsReportFeedIngestionStats::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_report_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_catalog_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_occurrences_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_severity_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICatalogsReportFeedIngestionStats::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
