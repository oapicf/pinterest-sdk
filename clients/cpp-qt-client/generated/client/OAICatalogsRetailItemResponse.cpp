/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICatalogsRetailItemResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICatalogsRetailItemResponse::OAICatalogsRetailItemResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICatalogsRetailItemResponse::OAICatalogsRetailItemResponse() {
    this->initializeModel();
}

OAICatalogsRetailItemResponse::~OAICatalogsRetailItemResponse() {}

void OAICatalogsRetailItemResponse::initializeModel() {

    m_catalog_type_isSet = false;
    m_catalog_type_isValid = false;

    m_item_id_isSet = false;
    m_item_id_isValid = false;

    m_pins_isSet = false;
    m_pins_isValid = false;

    m_attributes_isSet = false;
    m_attributes_isValid = false;
}

void OAICatalogsRetailItemResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICatalogsRetailItemResponse::fromJsonObject(QJsonObject json) {

    m_catalog_type_isValid = ::OpenAPI::fromJsonValue(m_catalog_type, json[QString("catalog_type")]);
    m_catalog_type_isSet = !json[QString("catalog_type")].isNull() && m_catalog_type_isValid;

    m_item_id_isValid = ::OpenAPI::fromJsonValue(m_item_id, json[QString("item_id")]);
    m_item_id_isSet = !json[QString("item_id")].isNull() && m_item_id_isValid;

    m_pins_isValid = ::OpenAPI::fromJsonValue(m_pins, json[QString("pins")]);
    m_pins_isSet = !json[QString("pins")].isNull() && m_pins_isValid;

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("attributes")]);
    m_attributes_isSet = !json[QString("attributes")].isNull() && m_attributes_isValid;
}

QString OAICatalogsRetailItemResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICatalogsRetailItemResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_catalog_type.isSet()) {
        obj.insert(QString("catalog_type"), ::OpenAPI::toJsonValue(m_catalog_type));
    }
    if (m_item_id_isSet) {
        obj.insert(QString("item_id"), ::OpenAPI::toJsonValue(m_item_id));
    }
    if (m_pins.size() > 0) {
        obj.insert(QString("pins"), ::OpenAPI::toJsonValue(m_pins));
    }
    if (m_attributes.isSet()) {
        obj.insert(QString("attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    return obj;
}

OAICatalogsType OAICatalogsRetailItemResponse::getCatalogType() const {
    return m_catalog_type;
}
void OAICatalogsRetailItemResponse::setCatalogType(const OAICatalogsType &catalog_type) {
    m_catalog_type = catalog_type;
    m_catalog_type_isSet = true;
}

bool OAICatalogsRetailItemResponse::is_catalog_type_Set() const{
    return m_catalog_type_isSet;
}

bool OAICatalogsRetailItemResponse::is_catalog_type_Valid() const{
    return m_catalog_type_isValid;
}

QString OAICatalogsRetailItemResponse::getItemId() const {
    return m_item_id;
}
void OAICatalogsRetailItemResponse::setItemId(const QString &item_id) {
    m_item_id = item_id;
    m_item_id_isSet = true;
}

bool OAICatalogsRetailItemResponse::is_item_id_Set() const{
    return m_item_id_isSet;
}

bool OAICatalogsRetailItemResponse::is_item_id_Valid() const{
    return m_item_id_isValid;
}

QList<OAIPin> OAICatalogsRetailItemResponse::getPins() const {
    return m_pins;
}
void OAICatalogsRetailItemResponse::setPins(const QList<OAIPin> &pins) {
    m_pins = pins;
    m_pins_isSet = true;
}

bool OAICatalogsRetailItemResponse::is_pins_Set() const{
    return m_pins_isSet;
}

bool OAICatalogsRetailItemResponse::is_pins_Valid() const{
    return m_pins_isValid;
}

OAIItemAttributes OAICatalogsRetailItemResponse::getAttributes() const {
    return m_attributes;
}
void OAICatalogsRetailItemResponse::setAttributes(const OAIItemAttributes &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAICatalogsRetailItemResponse::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAICatalogsRetailItemResponse::is_attributes_Valid() const{
    return m_attributes_isValid;
}

bool OAICatalogsRetailItemResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_catalog_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pins.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICatalogsRetailItemResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_catalog_type_isValid && true;
}

} // namespace OpenAPI
