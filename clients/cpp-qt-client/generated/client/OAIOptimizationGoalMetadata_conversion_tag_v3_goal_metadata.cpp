/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOptimizationGoalMetadata_conversion_tag_v3_goal_metadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOptimizationGoalMetadata_conversion_tag_v3_goal_metadata::OAIOptimizationGoalMetadata_conversion_tag_v3_goal_metadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOptimizationGoalMetadata_conversion_tag_v3_goal_metadata::OAIOptimizationGoalMetadata_conversion_tag_v3_goal_metadata() {
    this->initializeModel();
}

OAIOptimizationGoalMetadata_conversion_tag_v3_goal_metadata::~OAIOptimizationGoalMetadata_conversion_tag_v3_goal_metadata() {}

void OAIOptimizationGoalMetadata_conversion_tag_v3_goal_metadata::initializeModel() {

    m_attribution_windows_isSet = false;
    m_attribution_windows_isValid = false;

    m_conversion_event_isSet = false;
    m_conversion_event_isValid = false;

    m_conversion_tag_id_isSet = false;
    m_conversion_tag_id_isValid = false;

    m_cpa_goal_value_in_micro_currency_isSet = false;
    m_cpa_goal_value_in_micro_currency_isValid = false;

    m_is_roas_optimized_isSet = false;
    m_is_roas_optimized_isValid = false;

    m_learning_mode_type_isSet = false;
    m_learning_mode_type_isValid = false;
}

void OAIOptimizationGoalMetadata_conversion_tag_v3_goal_metadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOptimizationGoalMetadata_conversion_tag_v3_goal_metadata::fromJsonObject(QJsonObject json) {

    m_attribution_windows_isValid = ::OpenAPI::fromJsonValue(m_attribution_windows, json[QString("attribution_windows")]);
    m_attribution_windows_isSet = !json[QString("attribution_windows")].isNull() && m_attribution_windows_isValid;

    m_conversion_event_isValid = ::OpenAPI::fromJsonValue(m_conversion_event, json[QString("conversion_event")]);
    m_conversion_event_isSet = !json[QString("conversion_event")].isNull() && m_conversion_event_isValid;

    m_conversion_tag_id_isValid = ::OpenAPI::fromJsonValue(m_conversion_tag_id, json[QString("conversion_tag_id")]);
    m_conversion_tag_id_isSet = !json[QString("conversion_tag_id")].isNull() && m_conversion_tag_id_isValid;

    m_cpa_goal_value_in_micro_currency_isValid = ::OpenAPI::fromJsonValue(m_cpa_goal_value_in_micro_currency, json[QString("cpa_goal_value_in_micro_currency")]);
    m_cpa_goal_value_in_micro_currency_isSet = !json[QString("cpa_goal_value_in_micro_currency")].isNull() && m_cpa_goal_value_in_micro_currency_isValid;

    m_is_roas_optimized_isValid = ::OpenAPI::fromJsonValue(m_is_roas_optimized, json[QString("is_roas_optimized")]);
    m_is_roas_optimized_isSet = !json[QString("is_roas_optimized")].isNull() && m_is_roas_optimized_isValid;

    m_learning_mode_type_isValid = ::OpenAPI::fromJsonValue(m_learning_mode_type, json[QString("learning_mode_type")]);
    m_learning_mode_type_isSet = !json[QString("learning_mode_type")].isNull() && m_learning_mode_type_isValid;
}

QString OAIOptimizationGoalMetadata_conversion_tag_v3_goal_metadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOptimizationGoalMetadata_conversion_tag_v3_goal_metadata::asJsonObject() const {
    QJsonObject obj;
    if (m_attribution_windows.isSet()) {
        obj.insert(QString("attribution_windows"), ::OpenAPI::toJsonValue(m_attribution_windows));
    }
    if (m_conversion_event_isSet) {
        obj.insert(QString("conversion_event"), ::OpenAPI::toJsonValue(m_conversion_event));
    }
    if (m_conversion_tag_id_isSet) {
        obj.insert(QString("conversion_tag_id"), ::OpenAPI::toJsonValue(m_conversion_tag_id));
    }
    if (m_cpa_goal_value_in_micro_currency_isSet) {
        obj.insert(QString("cpa_goal_value_in_micro_currency"), ::OpenAPI::toJsonValue(m_cpa_goal_value_in_micro_currency));
    }
    if (m_is_roas_optimized_isSet) {
        obj.insert(QString("is_roas_optimized"), ::OpenAPI::toJsonValue(m_is_roas_optimized));
    }
    if (m_learning_mode_type_isSet) {
        obj.insert(QString("learning_mode_type"), ::OpenAPI::toJsonValue(m_learning_mode_type));
    }
    return obj;
}

OAIOptimizationGoalMetadata_conversion_tag_v3_goal_metadata_attribution_windows OAIOptimizationGoalMetadata_conversion_tag_v3_goal_metadata::getAttributionWindows() const {
    return m_attribution_windows;
}
void OAIOptimizationGoalMetadata_conversion_tag_v3_goal_metadata::setAttributionWindows(const OAIOptimizationGoalMetadata_conversion_tag_v3_goal_metadata_attribution_windows &attribution_windows) {
    m_attribution_windows = attribution_windows;
    m_attribution_windows_isSet = true;
}

bool OAIOptimizationGoalMetadata_conversion_tag_v3_goal_metadata::is_attribution_windows_Set() const{
    return m_attribution_windows_isSet;
}

bool OAIOptimizationGoalMetadata_conversion_tag_v3_goal_metadata::is_attribution_windows_Valid() const{
    return m_attribution_windows_isValid;
}

QString OAIOptimizationGoalMetadata_conversion_tag_v3_goal_metadata::getConversionEvent() const {
    return m_conversion_event;
}
void OAIOptimizationGoalMetadata_conversion_tag_v3_goal_metadata::setConversionEvent(const QString &conversion_event) {
    m_conversion_event = conversion_event;
    m_conversion_event_isSet = true;
}

bool OAIOptimizationGoalMetadata_conversion_tag_v3_goal_metadata::is_conversion_event_Set() const{
    return m_conversion_event_isSet;
}

bool OAIOptimizationGoalMetadata_conversion_tag_v3_goal_metadata::is_conversion_event_Valid() const{
    return m_conversion_event_isValid;
}

QString OAIOptimizationGoalMetadata_conversion_tag_v3_goal_metadata::getConversionTagId() const {
    return m_conversion_tag_id;
}
void OAIOptimizationGoalMetadata_conversion_tag_v3_goal_metadata::setConversionTagId(const QString &conversion_tag_id) {
    m_conversion_tag_id = conversion_tag_id;
    m_conversion_tag_id_isSet = true;
}

bool OAIOptimizationGoalMetadata_conversion_tag_v3_goal_metadata::is_conversion_tag_id_Set() const{
    return m_conversion_tag_id_isSet;
}

bool OAIOptimizationGoalMetadata_conversion_tag_v3_goal_metadata::is_conversion_tag_id_Valid() const{
    return m_conversion_tag_id_isValid;
}

QString OAIOptimizationGoalMetadata_conversion_tag_v3_goal_metadata::getCpaGoalValueInMicroCurrency() const {
    return m_cpa_goal_value_in_micro_currency;
}
void OAIOptimizationGoalMetadata_conversion_tag_v3_goal_metadata::setCpaGoalValueInMicroCurrency(const QString &cpa_goal_value_in_micro_currency) {
    m_cpa_goal_value_in_micro_currency = cpa_goal_value_in_micro_currency;
    m_cpa_goal_value_in_micro_currency_isSet = true;
}

bool OAIOptimizationGoalMetadata_conversion_tag_v3_goal_metadata::is_cpa_goal_value_in_micro_currency_Set() const{
    return m_cpa_goal_value_in_micro_currency_isSet;
}

bool OAIOptimizationGoalMetadata_conversion_tag_v3_goal_metadata::is_cpa_goal_value_in_micro_currency_Valid() const{
    return m_cpa_goal_value_in_micro_currency_isValid;
}

bool OAIOptimizationGoalMetadata_conversion_tag_v3_goal_metadata::isIsRoasOptimized() const {
    return m_is_roas_optimized;
}
void OAIOptimizationGoalMetadata_conversion_tag_v3_goal_metadata::setIsRoasOptimized(const bool &is_roas_optimized) {
    m_is_roas_optimized = is_roas_optimized;
    m_is_roas_optimized_isSet = true;
}

bool OAIOptimizationGoalMetadata_conversion_tag_v3_goal_metadata::is_is_roas_optimized_Set() const{
    return m_is_roas_optimized_isSet;
}

bool OAIOptimizationGoalMetadata_conversion_tag_v3_goal_metadata::is_is_roas_optimized_Valid() const{
    return m_is_roas_optimized_isValid;
}

QString OAIOptimizationGoalMetadata_conversion_tag_v3_goal_metadata::getLearningModeType() const {
    return m_learning_mode_type;
}
void OAIOptimizationGoalMetadata_conversion_tag_v3_goal_metadata::setLearningModeType(const QString &learning_mode_type) {
    m_learning_mode_type = learning_mode_type;
    m_learning_mode_type_isSet = true;
}

bool OAIOptimizationGoalMetadata_conversion_tag_v3_goal_metadata::is_learning_mode_type_Set() const{
    return m_learning_mode_type_isSet;
}

bool OAIOptimizationGoalMetadata_conversion_tag_v3_goal_metadata::is_learning_mode_type_Valid() const{
    return m_learning_mode_type_isValid;
}

bool OAIOptimizationGoalMetadata_conversion_tag_v3_goal_metadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attribution_windows.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_conversion_event_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conversion_tag_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cpa_goal_value_in_micro_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_roas_optimized_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_learning_mode_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOptimizationGoalMetadata_conversion_tag_v3_goal_metadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
