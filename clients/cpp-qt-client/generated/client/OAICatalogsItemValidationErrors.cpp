/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICatalogsItemValidationErrors.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICatalogsItemValidationErrors::OAICatalogsItemValidationErrors(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICatalogsItemValidationErrors::OAICatalogsItemValidationErrors() {
    this->initializeModel();
}

OAICatalogsItemValidationErrors::~OAICatalogsItemValidationErrors() {}

void OAICatalogsItemValidationErrors::initializeModel() {

    m_adult_invalid_isSet = false;
    m_adult_invalid_isValid = false;

    m_adwords_format_invalid_isSet = false;
    m_adwords_format_invalid_isValid = false;

    m_availability_invalid_isSet = false;
    m_availability_invalid_isValid = false;

    m_blocklisted_image_signature_isSet = false;
    m_blocklisted_image_signature_isValid = false;

    m_description_missing_isSet = false;
    m_description_missing_isValid = false;

    m_duplicate_products_isSet = false;
    m_duplicate_products_isValid = false;

    m_image_link_invalid_isSet = false;
    m_image_link_invalid_isValid = false;

    m_image_link_length_too_long_isSet = false;
    m_image_link_length_too_long_isValid = false;

    m_image_link_missing_isSet = false;
    m_image_link_missing_isValid = false;

    m_invalid_domain_isSet = false;
    m_invalid_domain_isValid = false;

    m_itemid_missing_isSet = false;
    m_itemid_missing_isValid = false;

    m_item_main_image_download_failure_isSet = false;
    m_item_main_image_download_failure_isValid = false;

    m_link_format_invalid_isSet = false;
    m_link_format_invalid_isValid = false;

    m_link_length_too_long_isSet = false;
    m_link_length_too_long_isValid = false;

    m_list_price_invalid_isSet = false;
    m_list_price_invalid_isValid = false;

    m_max_items_per_item_group_exceeded_isSet = false;
    m_max_items_per_item_group_exceeded_isValid = false;

    m_parse_line_error_isSet = false;
    m_parse_line_error_isValid = false;

    m_pinjoin_content_unsafe_isSet = false;
    m_pinjoin_content_unsafe_isValid = false;

    m_price_cannot_be_determined_isSet = false;
    m_price_cannot_be_determined_isValid = false;

    m_price_missing_isSet = false;
    m_price_missing_isValid = false;

    m_product_link_missing_isSet = false;
    m_product_link_missing_isValid = false;

    m_product_price_invalid_isSet = false;
    m_product_price_invalid_isValid = false;

    m_title_missing_isSet = false;
    m_title_missing_isValid = false;
}

void OAICatalogsItemValidationErrors::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICatalogsItemValidationErrors::fromJsonObject(QJsonObject json) {

    m_adult_invalid_isValid = ::OpenAPI::fromJsonValue(m_adult_invalid, json[QString("ADULT_INVALID")]);
    m_adult_invalid_isSet = !json[QString("ADULT_INVALID")].isNull() && m_adult_invalid_isValid;

    m_adwords_format_invalid_isValid = ::OpenAPI::fromJsonValue(m_adwords_format_invalid, json[QString("ADWORDS_FORMAT_INVALID")]);
    m_adwords_format_invalid_isSet = !json[QString("ADWORDS_FORMAT_INVALID")].isNull() && m_adwords_format_invalid_isValid;

    m_availability_invalid_isValid = ::OpenAPI::fromJsonValue(m_availability_invalid, json[QString("AVAILABILITY_INVALID")]);
    m_availability_invalid_isSet = !json[QString("AVAILABILITY_INVALID")].isNull() && m_availability_invalid_isValid;

    m_blocklisted_image_signature_isValid = ::OpenAPI::fromJsonValue(m_blocklisted_image_signature, json[QString("BLOCKLISTED_IMAGE_SIGNATURE")]);
    m_blocklisted_image_signature_isSet = !json[QString("BLOCKLISTED_IMAGE_SIGNATURE")].isNull() && m_blocklisted_image_signature_isValid;

    m_description_missing_isValid = ::OpenAPI::fromJsonValue(m_description_missing, json[QString("DESCRIPTION_MISSING")]);
    m_description_missing_isSet = !json[QString("DESCRIPTION_MISSING")].isNull() && m_description_missing_isValid;

    m_duplicate_products_isValid = ::OpenAPI::fromJsonValue(m_duplicate_products, json[QString("DUPLICATE_PRODUCTS")]);
    m_duplicate_products_isSet = !json[QString("DUPLICATE_PRODUCTS")].isNull() && m_duplicate_products_isValid;

    m_image_link_invalid_isValid = ::OpenAPI::fromJsonValue(m_image_link_invalid, json[QString("IMAGE_LINK_INVALID")]);
    m_image_link_invalid_isSet = !json[QString("IMAGE_LINK_INVALID")].isNull() && m_image_link_invalid_isValid;

    m_image_link_length_too_long_isValid = ::OpenAPI::fromJsonValue(m_image_link_length_too_long, json[QString("IMAGE_LINK_LENGTH_TOO_LONG")]);
    m_image_link_length_too_long_isSet = !json[QString("IMAGE_LINK_LENGTH_TOO_LONG")].isNull() && m_image_link_length_too_long_isValid;

    m_image_link_missing_isValid = ::OpenAPI::fromJsonValue(m_image_link_missing, json[QString("IMAGE_LINK_MISSING")]);
    m_image_link_missing_isSet = !json[QString("IMAGE_LINK_MISSING")].isNull() && m_image_link_missing_isValid;

    m_invalid_domain_isValid = ::OpenAPI::fromJsonValue(m_invalid_domain, json[QString("INVALID_DOMAIN")]);
    m_invalid_domain_isSet = !json[QString("INVALID_DOMAIN")].isNull() && m_invalid_domain_isValid;

    m_itemid_missing_isValid = ::OpenAPI::fromJsonValue(m_itemid_missing, json[QString("ITEMID_MISSING")]);
    m_itemid_missing_isSet = !json[QString("ITEMID_MISSING")].isNull() && m_itemid_missing_isValid;

    m_item_main_image_download_failure_isValid = ::OpenAPI::fromJsonValue(m_item_main_image_download_failure, json[QString("ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE")]);
    m_item_main_image_download_failure_isSet = !json[QString("ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE")].isNull() && m_item_main_image_download_failure_isValid;

    m_link_format_invalid_isValid = ::OpenAPI::fromJsonValue(m_link_format_invalid, json[QString("LINK_FORMAT_INVALID")]);
    m_link_format_invalid_isSet = !json[QString("LINK_FORMAT_INVALID")].isNull() && m_link_format_invalid_isValid;

    m_link_length_too_long_isValid = ::OpenAPI::fromJsonValue(m_link_length_too_long, json[QString("LINK_LENGTH_TOO_LONG")]);
    m_link_length_too_long_isSet = !json[QString("LINK_LENGTH_TOO_LONG")].isNull() && m_link_length_too_long_isValid;

    m_list_price_invalid_isValid = ::OpenAPI::fromJsonValue(m_list_price_invalid, json[QString("LIST_PRICE_INVALID")]);
    m_list_price_invalid_isSet = !json[QString("LIST_PRICE_INVALID")].isNull() && m_list_price_invalid_isValid;

    m_max_items_per_item_group_exceeded_isValid = ::OpenAPI::fromJsonValue(m_max_items_per_item_group_exceeded, json[QString("MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED")]);
    m_max_items_per_item_group_exceeded_isSet = !json[QString("MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED")].isNull() && m_max_items_per_item_group_exceeded_isValid;

    m_parse_line_error_isValid = ::OpenAPI::fromJsonValue(m_parse_line_error, json[QString("PARSE_LINE_ERROR")]);
    m_parse_line_error_isSet = !json[QString("PARSE_LINE_ERROR")].isNull() && m_parse_line_error_isValid;

    m_pinjoin_content_unsafe_isValid = ::OpenAPI::fromJsonValue(m_pinjoin_content_unsafe, json[QString("PINJOIN_CONTENT_UNSAFE")]);
    m_pinjoin_content_unsafe_isSet = !json[QString("PINJOIN_CONTENT_UNSAFE")].isNull() && m_pinjoin_content_unsafe_isValid;

    m_price_cannot_be_determined_isValid = ::OpenAPI::fromJsonValue(m_price_cannot_be_determined, json[QString("PRICE_CANNOT_BE_DETERMINED")]);
    m_price_cannot_be_determined_isSet = !json[QString("PRICE_CANNOT_BE_DETERMINED")].isNull() && m_price_cannot_be_determined_isValid;

    m_price_missing_isValid = ::OpenAPI::fromJsonValue(m_price_missing, json[QString("PRICE_MISSING")]);
    m_price_missing_isSet = !json[QString("PRICE_MISSING")].isNull() && m_price_missing_isValid;

    m_product_link_missing_isValid = ::OpenAPI::fromJsonValue(m_product_link_missing, json[QString("PRODUCT_LINK_MISSING")]);
    m_product_link_missing_isSet = !json[QString("PRODUCT_LINK_MISSING")].isNull() && m_product_link_missing_isValid;

    m_product_price_invalid_isValid = ::OpenAPI::fromJsonValue(m_product_price_invalid, json[QString("PRODUCT_PRICE_INVALID")]);
    m_product_price_invalid_isSet = !json[QString("PRODUCT_PRICE_INVALID")].isNull() && m_product_price_invalid_isValid;

    m_title_missing_isValid = ::OpenAPI::fromJsonValue(m_title_missing, json[QString("TITLE_MISSING")]);
    m_title_missing_isSet = !json[QString("TITLE_MISSING")].isNull() && m_title_missing_isValid;
}

QString OAICatalogsItemValidationErrors::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICatalogsItemValidationErrors::asJsonObject() const {
    QJsonObject obj;
    if (m_adult_invalid.isSet()) {
        obj.insert(QString("ADULT_INVALID"), ::OpenAPI::toJsonValue(m_adult_invalid));
    }
    if (m_adwords_format_invalid.isSet()) {
        obj.insert(QString("ADWORDS_FORMAT_INVALID"), ::OpenAPI::toJsonValue(m_adwords_format_invalid));
    }
    if (m_availability_invalid.isSet()) {
        obj.insert(QString("AVAILABILITY_INVALID"), ::OpenAPI::toJsonValue(m_availability_invalid));
    }
    if (m_blocklisted_image_signature.isSet()) {
        obj.insert(QString("BLOCKLISTED_IMAGE_SIGNATURE"), ::OpenAPI::toJsonValue(m_blocklisted_image_signature));
    }
    if (m_description_missing.isSet()) {
        obj.insert(QString("DESCRIPTION_MISSING"), ::OpenAPI::toJsonValue(m_description_missing));
    }
    if (m_duplicate_products.isSet()) {
        obj.insert(QString("DUPLICATE_PRODUCTS"), ::OpenAPI::toJsonValue(m_duplicate_products));
    }
    if (m_image_link_invalid.isSet()) {
        obj.insert(QString("IMAGE_LINK_INVALID"), ::OpenAPI::toJsonValue(m_image_link_invalid));
    }
    if (m_image_link_length_too_long.isSet()) {
        obj.insert(QString("IMAGE_LINK_LENGTH_TOO_LONG"), ::OpenAPI::toJsonValue(m_image_link_length_too_long));
    }
    if (m_image_link_missing.isSet()) {
        obj.insert(QString("IMAGE_LINK_MISSING"), ::OpenAPI::toJsonValue(m_image_link_missing));
    }
    if (m_invalid_domain.isSet()) {
        obj.insert(QString("INVALID_DOMAIN"), ::OpenAPI::toJsonValue(m_invalid_domain));
    }
    if (m_itemid_missing.isSet()) {
        obj.insert(QString("ITEMID_MISSING"), ::OpenAPI::toJsonValue(m_itemid_missing));
    }
    if (m_item_main_image_download_failure.isSet()) {
        obj.insert(QString("ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE"), ::OpenAPI::toJsonValue(m_item_main_image_download_failure));
    }
    if (m_link_format_invalid.isSet()) {
        obj.insert(QString("LINK_FORMAT_INVALID"), ::OpenAPI::toJsonValue(m_link_format_invalid));
    }
    if (m_link_length_too_long.isSet()) {
        obj.insert(QString("LINK_LENGTH_TOO_LONG"), ::OpenAPI::toJsonValue(m_link_length_too_long));
    }
    if (m_list_price_invalid.isSet()) {
        obj.insert(QString("LIST_PRICE_INVALID"), ::OpenAPI::toJsonValue(m_list_price_invalid));
    }
    if (m_max_items_per_item_group_exceeded.isSet()) {
        obj.insert(QString("MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED"), ::OpenAPI::toJsonValue(m_max_items_per_item_group_exceeded));
    }
    if (m_parse_line_error.isSet()) {
        obj.insert(QString("PARSE_LINE_ERROR"), ::OpenAPI::toJsonValue(m_parse_line_error));
    }
    if (m_pinjoin_content_unsafe.isSet()) {
        obj.insert(QString("PINJOIN_CONTENT_UNSAFE"), ::OpenAPI::toJsonValue(m_pinjoin_content_unsafe));
    }
    if (m_price_cannot_be_determined.isSet()) {
        obj.insert(QString("PRICE_CANNOT_BE_DETERMINED"), ::OpenAPI::toJsonValue(m_price_cannot_be_determined));
    }
    if (m_price_missing.isSet()) {
        obj.insert(QString("PRICE_MISSING"), ::OpenAPI::toJsonValue(m_price_missing));
    }
    if (m_product_link_missing.isSet()) {
        obj.insert(QString("PRODUCT_LINK_MISSING"), ::OpenAPI::toJsonValue(m_product_link_missing));
    }
    if (m_product_price_invalid.isSet()) {
        obj.insert(QString("PRODUCT_PRICE_INVALID"), ::OpenAPI::toJsonValue(m_product_price_invalid));
    }
    if (m_title_missing.isSet()) {
        obj.insert(QString("TITLE_MISSING"), ::OpenAPI::toJsonValue(m_title_missing));
    }
    return obj;
}

OAICatalogsItemValidationDetails OAICatalogsItemValidationErrors::getAdultInvalid() const {
    return m_adult_invalid;
}
void OAICatalogsItemValidationErrors::setAdultInvalid(const OAICatalogsItemValidationDetails &adult_invalid) {
    m_adult_invalid = adult_invalid;
    m_adult_invalid_isSet = true;
}

bool OAICatalogsItemValidationErrors::is_adult_invalid_Set() const{
    return m_adult_invalid_isSet;
}

bool OAICatalogsItemValidationErrors::is_adult_invalid_Valid() const{
    return m_adult_invalid_isValid;
}

OAICatalogsItemValidationDetails OAICatalogsItemValidationErrors::getAdwordsFormatInvalid() const {
    return m_adwords_format_invalid;
}
void OAICatalogsItemValidationErrors::setAdwordsFormatInvalid(const OAICatalogsItemValidationDetails &adwords_format_invalid) {
    m_adwords_format_invalid = adwords_format_invalid;
    m_adwords_format_invalid_isSet = true;
}

bool OAICatalogsItemValidationErrors::is_adwords_format_invalid_Set() const{
    return m_adwords_format_invalid_isSet;
}

bool OAICatalogsItemValidationErrors::is_adwords_format_invalid_Valid() const{
    return m_adwords_format_invalid_isValid;
}

OAICatalogsItemValidationDetails OAICatalogsItemValidationErrors::getAvailabilityInvalid() const {
    return m_availability_invalid;
}
void OAICatalogsItemValidationErrors::setAvailabilityInvalid(const OAICatalogsItemValidationDetails &availability_invalid) {
    m_availability_invalid = availability_invalid;
    m_availability_invalid_isSet = true;
}

bool OAICatalogsItemValidationErrors::is_availability_invalid_Set() const{
    return m_availability_invalid_isSet;
}

bool OAICatalogsItemValidationErrors::is_availability_invalid_Valid() const{
    return m_availability_invalid_isValid;
}

OAICatalogsItemValidationDetails OAICatalogsItemValidationErrors::getBlocklistedImageSignature() const {
    return m_blocklisted_image_signature;
}
void OAICatalogsItemValidationErrors::setBlocklistedImageSignature(const OAICatalogsItemValidationDetails &blocklisted_image_signature) {
    m_blocklisted_image_signature = blocklisted_image_signature;
    m_blocklisted_image_signature_isSet = true;
}

bool OAICatalogsItemValidationErrors::is_blocklisted_image_signature_Set() const{
    return m_blocklisted_image_signature_isSet;
}

bool OAICatalogsItemValidationErrors::is_blocklisted_image_signature_Valid() const{
    return m_blocklisted_image_signature_isValid;
}

OAICatalogsItemValidationDetails OAICatalogsItemValidationErrors::getDescriptionMissing() const {
    return m_description_missing;
}
void OAICatalogsItemValidationErrors::setDescriptionMissing(const OAICatalogsItemValidationDetails &description_missing) {
    m_description_missing = description_missing;
    m_description_missing_isSet = true;
}

bool OAICatalogsItemValidationErrors::is_description_missing_Set() const{
    return m_description_missing_isSet;
}

bool OAICatalogsItemValidationErrors::is_description_missing_Valid() const{
    return m_description_missing_isValid;
}

OAICatalogsItemValidationDetails OAICatalogsItemValidationErrors::getDuplicateProducts() const {
    return m_duplicate_products;
}
void OAICatalogsItemValidationErrors::setDuplicateProducts(const OAICatalogsItemValidationDetails &duplicate_products) {
    m_duplicate_products = duplicate_products;
    m_duplicate_products_isSet = true;
}

bool OAICatalogsItemValidationErrors::is_duplicate_products_Set() const{
    return m_duplicate_products_isSet;
}

bool OAICatalogsItemValidationErrors::is_duplicate_products_Valid() const{
    return m_duplicate_products_isValid;
}

OAICatalogsItemValidationDetails OAICatalogsItemValidationErrors::getImageLinkInvalid() const {
    return m_image_link_invalid;
}
void OAICatalogsItemValidationErrors::setImageLinkInvalid(const OAICatalogsItemValidationDetails &image_link_invalid) {
    m_image_link_invalid = image_link_invalid;
    m_image_link_invalid_isSet = true;
}

bool OAICatalogsItemValidationErrors::is_image_link_invalid_Set() const{
    return m_image_link_invalid_isSet;
}

bool OAICatalogsItemValidationErrors::is_image_link_invalid_Valid() const{
    return m_image_link_invalid_isValid;
}

OAICatalogsItemValidationDetails OAICatalogsItemValidationErrors::getImageLinkLengthTooLong() const {
    return m_image_link_length_too_long;
}
void OAICatalogsItemValidationErrors::setImageLinkLengthTooLong(const OAICatalogsItemValidationDetails &image_link_length_too_long) {
    m_image_link_length_too_long = image_link_length_too_long;
    m_image_link_length_too_long_isSet = true;
}

bool OAICatalogsItemValidationErrors::is_image_link_length_too_long_Set() const{
    return m_image_link_length_too_long_isSet;
}

bool OAICatalogsItemValidationErrors::is_image_link_length_too_long_Valid() const{
    return m_image_link_length_too_long_isValid;
}

OAICatalogsItemValidationDetails OAICatalogsItemValidationErrors::getImageLinkMissing() const {
    return m_image_link_missing;
}
void OAICatalogsItemValidationErrors::setImageLinkMissing(const OAICatalogsItemValidationDetails &image_link_missing) {
    m_image_link_missing = image_link_missing;
    m_image_link_missing_isSet = true;
}

bool OAICatalogsItemValidationErrors::is_image_link_missing_Set() const{
    return m_image_link_missing_isSet;
}

bool OAICatalogsItemValidationErrors::is_image_link_missing_Valid() const{
    return m_image_link_missing_isValid;
}

OAICatalogsItemValidationDetails OAICatalogsItemValidationErrors::getInvalidDomain() const {
    return m_invalid_domain;
}
void OAICatalogsItemValidationErrors::setInvalidDomain(const OAICatalogsItemValidationDetails &invalid_domain) {
    m_invalid_domain = invalid_domain;
    m_invalid_domain_isSet = true;
}

bool OAICatalogsItemValidationErrors::is_invalid_domain_Set() const{
    return m_invalid_domain_isSet;
}

bool OAICatalogsItemValidationErrors::is_invalid_domain_Valid() const{
    return m_invalid_domain_isValid;
}

OAICatalogsItemValidationDetails OAICatalogsItemValidationErrors::getItemidMissing() const {
    return m_itemid_missing;
}
void OAICatalogsItemValidationErrors::setItemidMissing(const OAICatalogsItemValidationDetails &itemid_missing) {
    m_itemid_missing = itemid_missing;
    m_itemid_missing_isSet = true;
}

bool OAICatalogsItemValidationErrors::is_itemid_missing_Set() const{
    return m_itemid_missing_isSet;
}

bool OAICatalogsItemValidationErrors::is_itemid_missing_Valid() const{
    return m_itemid_missing_isValid;
}

OAICatalogsItemValidationDetails OAICatalogsItemValidationErrors::getItemMainImageDownloadFailure() const {
    return m_item_main_image_download_failure;
}
void OAICatalogsItemValidationErrors::setItemMainImageDownloadFailure(const OAICatalogsItemValidationDetails &item_main_image_download_failure) {
    m_item_main_image_download_failure = item_main_image_download_failure;
    m_item_main_image_download_failure_isSet = true;
}

bool OAICatalogsItemValidationErrors::is_item_main_image_download_failure_Set() const{
    return m_item_main_image_download_failure_isSet;
}

bool OAICatalogsItemValidationErrors::is_item_main_image_download_failure_Valid() const{
    return m_item_main_image_download_failure_isValid;
}

OAICatalogsItemValidationDetails OAICatalogsItemValidationErrors::getLinkFormatInvalid() const {
    return m_link_format_invalid;
}
void OAICatalogsItemValidationErrors::setLinkFormatInvalid(const OAICatalogsItemValidationDetails &link_format_invalid) {
    m_link_format_invalid = link_format_invalid;
    m_link_format_invalid_isSet = true;
}

bool OAICatalogsItemValidationErrors::is_link_format_invalid_Set() const{
    return m_link_format_invalid_isSet;
}

bool OAICatalogsItemValidationErrors::is_link_format_invalid_Valid() const{
    return m_link_format_invalid_isValid;
}

OAICatalogsItemValidationDetails OAICatalogsItemValidationErrors::getLinkLengthTooLong() const {
    return m_link_length_too_long;
}
void OAICatalogsItemValidationErrors::setLinkLengthTooLong(const OAICatalogsItemValidationDetails &link_length_too_long) {
    m_link_length_too_long = link_length_too_long;
    m_link_length_too_long_isSet = true;
}

bool OAICatalogsItemValidationErrors::is_link_length_too_long_Set() const{
    return m_link_length_too_long_isSet;
}

bool OAICatalogsItemValidationErrors::is_link_length_too_long_Valid() const{
    return m_link_length_too_long_isValid;
}

OAICatalogsItemValidationDetails OAICatalogsItemValidationErrors::getListPriceInvalid() const {
    return m_list_price_invalid;
}
void OAICatalogsItemValidationErrors::setListPriceInvalid(const OAICatalogsItemValidationDetails &list_price_invalid) {
    m_list_price_invalid = list_price_invalid;
    m_list_price_invalid_isSet = true;
}

bool OAICatalogsItemValidationErrors::is_list_price_invalid_Set() const{
    return m_list_price_invalid_isSet;
}

bool OAICatalogsItemValidationErrors::is_list_price_invalid_Valid() const{
    return m_list_price_invalid_isValid;
}

OAICatalogsItemValidationDetails OAICatalogsItemValidationErrors::getMaxItemsPerItemGroupExceeded() const {
    return m_max_items_per_item_group_exceeded;
}
void OAICatalogsItemValidationErrors::setMaxItemsPerItemGroupExceeded(const OAICatalogsItemValidationDetails &max_items_per_item_group_exceeded) {
    m_max_items_per_item_group_exceeded = max_items_per_item_group_exceeded;
    m_max_items_per_item_group_exceeded_isSet = true;
}

bool OAICatalogsItemValidationErrors::is_max_items_per_item_group_exceeded_Set() const{
    return m_max_items_per_item_group_exceeded_isSet;
}

bool OAICatalogsItemValidationErrors::is_max_items_per_item_group_exceeded_Valid() const{
    return m_max_items_per_item_group_exceeded_isValid;
}

OAICatalogsItemValidationDetails OAICatalogsItemValidationErrors::getParseLineError() const {
    return m_parse_line_error;
}
void OAICatalogsItemValidationErrors::setParseLineError(const OAICatalogsItemValidationDetails &parse_line_error) {
    m_parse_line_error = parse_line_error;
    m_parse_line_error_isSet = true;
}

bool OAICatalogsItemValidationErrors::is_parse_line_error_Set() const{
    return m_parse_line_error_isSet;
}

bool OAICatalogsItemValidationErrors::is_parse_line_error_Valid() const{
    return m_parse_line_error_isValid;
}

OAICatalogsItemValidationDetails OAICatalogsItemValidationErrors::getPinjoinContentUnsafe() const {
    return m_pinjoin_content_unsafe;
}
void OAICatalogsItemValidationErrors::setPinjoinContentUnsafe(const OAICatalogsItemValidationDetails &pinjoin_content_unsafe) {
    m_pinjoin_content_unsafe = pinjoin_content_unsafe;
    m_pinjoin_content_unsafe_isSet = true;
}

bool OAICatalogsItemValidationErrors::is_pinjoin_content_unsafe_Set() const{
    return m_pinjoin_content_unsafe_isSet;
}

bool OAICatalogsItemValidationErrors::is_pinjoin_content_unsafe_Valid() const{
    return m_pinjoin_content_unsafe_isValid;
}

OAICatalogsItemValidationDetails OAICatalogsItemValidationErrors::getPriceCannotBeDetermined() const {
    return m_price_cannot_be_determined;
}
void OAICatalogsItemValidationErrors::setPriceCannotBeDetermined(const OAICatalogsItemValidationDetails &price_cannot_be_determined) {
    m_price_cannot_be_determined = price_cannot_be_determined;
    m_price_cannot_be_determined_isSet = true;
}

bool OAICatalogsItemValidationErrors::is_price_cannot_be_determined_Set() const{
    return m_price_cannot_be_determined_isSet;
}

bool OAICatalogsItemValidationErrors::is_price_cannot_be_determined_Valid() const{
    return m_price_cannot_be_determined_isValid;
}

OAICatalogsItemValidationDetails OAICatalogsItemValidationErrors::getPriceMissing() const {
    return m_price_missing;
}
void OAICatalogsItemValidationErrors::setPriceMissing(const OAICatalogsItemValidationDetails &price_missing) {
    m_price_missing = price_missing;
    m_price_missing_isSet = true;
}

bool OAICatalogsItemValidationErrors::is_price_missing_Set() const{
    return m_price_missing_isSet;
}

bool OAICatalogsItemValidationErrors::is_price_missing_Valid() const{
    return m_price_missing_isValid;
}

OAICatalogsItemValidationDetails OAICatalogsItemValidationErrors::getProductLinkMissing() const {
    return m_product_link_missing;
}
void OAICatalogsItemValidationErrors::setProductLinkMissing(const OAICatalogsItemValidationDetails &product_link_missing) {
    m_product_link_missing = product_link_missing;
    m_product_link_missing_isSet = true;
}

bool OAICatalogsItemValidationErrors::is_product_link_missing_Set() const{
    return m_product_link_missing_isSet;
}

bool OAICatalogsItemValidationErrors::is_product_link_missing_Valid() const{
    return m_product_link_missing_isValid;
}

OAICatalogsItemValidationDetails OAICatalogsItemValidationErrors::getProductPriceInvalid() const {
    return m_product_price_invalid;
}
void OAICatalogsItemValidationErrors::setProductPriceInvalid(const OAICatalogsItemValidationDetails &product_price_invalid) {
    m_product_price_invalid = product_price_invalid;
    m_product_price_invalid_isSet = true;
}

bool OAICatalogsItemValidationErrors::is_product_price_invalid_Set() const{
    return m_product_price_invalid_isSet;
}

bool OAICatalogsItemValidationErrors::is_product_price_invalid_Valid() const{
    return m_product_price_invalid_isValid;
}

OAICatalogsItemValidationDetails OAICatalogsItemValidationErrors::getTitleMissing() const {
    return m_title_missing;
}
void OAICatalogsItemValidationErrors::setTitleMissing(const OAICatalogsItemValidationDetails &title_missing) {
    m_title_missing = title_missing;
    m_title_missing_isSet = true;
}

bool OAICatalogsItemValidationErrors::is_title_missing_Set() const{
    return m_title_missing_isSet;
}

bool OAICatalogsItemValidationErrors::is_title_missing_Valid() const{
    return m_title_missing_isValid;
}

bool OAICatalogsItemValidationErrors::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_adult_invalid.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_adwords_format_invalid.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_availability_invalid.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_blocklisted_image_signature.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_missing.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_duplicate_products.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_link_invalid.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_link_length_too_long.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_link_missing.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_invalid_domain.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_itemid_missing.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_main_image_download_failure.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_format_invalid.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_length_too_long.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_list_price_invalid.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_items_per_item_group_exceeded.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_parse_line_error.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pinjoin_content_unsafe.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_cannot_be_determined.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_missing.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_link_missing.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_price_invalid.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_missing.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICatalogsItemValidationErrors::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
