/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.client.api

import org.openapitools.client.model.BulkDownloadRequest
import org.openapitools.client.model.BulkDownloadResponse
import org.openapitools.client.model.BulkUpsertRequest
import org.openapitools.client.model.BulkUpsertResponse
import org.openapitools.client.model.BulkUpsertStatusResponse
import org.openapitools.client.model.Error
import org.openapitools.client.core._
import org.openapitools.client.core.CollectionFormats._
import org.openapitools.client.core.ApiKeyLocations._

object BulkApi {

  def apply(baseUrl: String = "https://api.pinterest.com/v5") = new BulkApi(baseUrl)
}

class BulkApi(baseUrl: String) {

  /**
   * Create an asynchronous report that may include information on campaigns, ad groups, product groups, ads, and/or keywords; can filter by campaigns. Though the entities may be active, archived, or paused, only active entities will return data.
   * 
   * Expected answers:
   *   code 200 : BulkDownloadResponse (Success)
   *   code 0 : Error (Unexpected error)
   * 
   * @param adAccountId Unique identifier of an ad account.
   * @param bulkDownloadRequest Parameters to get ad entities in bulk
   */
  def bulkDownloadCreate(adAccountId: String, bulkDownloadRequest: BulkDownloadRequest): ApiRequest[BulkDownloadResponse] =
    ApiRequest[BulkDownloadResponse](ApiMethods.POST, baseUrl, "/ad_accounts/{ad_account_id}/bulk/download", "application/json")
      .withBody(bulkDownloadRequest)
      .withPathParam("ad_account_id", adAccountId)
      .withSuccessResponse[BulkDownloadResponse](200)
      .withDefaultErrorResponse[Error]
      

  /**
   * Get the status of a bulk request by <code>request_id</code>, along with a download URL that will allow you to download the new or updated entity data (campaigns, ad groups, product groups, ads, or keywords).
   * 
   * Expected answers:
   *   code 200 : BulkUpsertStatusResponse (Success)
   *   code 0 : Error (Unexpected error)
   * 
   * @param adAccountId Unique identifier of an ad account.
   * @param bulkRequestId Unique identifier of a bulk upsert request.
   * @param includeDetails if set to True then attach the errors/details to all the requests
   */
  def bulkRequestGet(adAccountId: String, bulkRequestId: String, includeDetails: Option[Boolean] = None): ApiRequest[BulkUpsertStatusResponse] =
    ApiRequest[BulkUpsertStatusResponse](ApiMethods.GET, baseUrl, "/ad_accounts/{ad_account_id}/bulk/{bulk_request_id}", "application/json")
      .withQueryParam("include_details", includeDetails)
      .withPathParam("ad_account_id", adAccountId)
      .withPathParam("bulk_request_id", bulkRequestId)
      .withSuccessResponse[BulkUpsertStatusResponse](200)
      .withDefaultErrorResponse[Error]
      

  /**
   * Either create or update any combination of campaigns, ad groups, product groups, ads, or keywords. Note that this request will be processed asynchronously; the response will include a <code>request_id</code> that can be used to obtain the status of the request.
   * 
   * Expected answers:
   *   code 200 : BulkUpsertResponse (Success)
   *   code 0 : Error (Unexpected error)
   * 
   * @param adAccountId Unique identifier of an ad account.
   * @param bulkUpsertRequest Parameters to get create/update ad entities in bulk
   */
  def bulkUpsertCreate(adAccountId: String, bulkUpsertRequest: BulkUpsertRequest): ApiRequest[BulkUpsertResponse] =
    ApiRequest[BulkUpsertResponse](ApiMethods.POST, baseUrl, "/ad_accounts/{ad_account_id}/bulk/upsert", "application/json")
      .withBody(bulkUpsertRequest)
      .withPathParam("ad_account_id", adAccountId)
      .withSuccessResponse[BulkUpsertResponse](200)
      .withDefaultErrorResponse[Error]
      



}

