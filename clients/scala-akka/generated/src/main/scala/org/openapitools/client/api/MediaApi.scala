/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.client.api

import org.openapitools.client.model.Error
import org.openapitools.client.model.MediaList200Response
import org.openapitools.client.model.MediaUpload
import org.openapitools.client.model.MediaUploadDetails
import org.openapitools.client.model.MediaUploadRequest
import org.openapitools.client.core._
import org.openapitools.client.core.CollectionFormats._
import org.openapitools.client.core.ApiKeyLocations._

object MediaApi {

  def apply(baseUrl: String = "https://api.pinterest.com/v5") = new MediaApi(baseUrl)
}

class MediaApi(baseUrl: String) {

  /**
   * Register your intent to upload media  The response includes all of the information needed to upload the media to Pinterest.  To upload the media, make an HTTP POST request (using <tt>curl</tt>, for example) to <tt>upload_url</tt> using the <tt>Content-Type</tt> header value. Send the media file's contents as the request's <tt>file</tt> parameter and also include all of the parameters from <tt>upload_parameters</tt>.  <strong><a href='/docs/api-features/creating-boards-and-pins/#creating-video-pins'>Learn more</a></strong> about video Pin creation.
   * 
   * Expected answers:
   *   code 201 : MediaUpload (response)
   *   code 0 : Error (Unexpected error)
   * 
   * @param mediaUploadRequest Create a media upload request
   */
  def mediaCreate(mediaUploadRequest: MediaUploadRequest): ApiRequest[MediaUpload] =
    ApiRequest[MediaUpload](ApiMethods.POST, baseUrl, "/media", "application/json")
      .withBody(mediaUploadRequest)
      .withSuccessResponse[MediaUpload](201)
      .withDefaultErrorResponse[Error]
      

  /**
   * Get details for a registered media upload, including its current status.  <strong><a href='/docs/api-features/creating-boards-and-pins/#creating-video-pins'>Learn more</a></strong> about video Pin creation.
   * 
   * Expected answers:
   *   code 200 : MediaUploadDetails (response)
   *   code 404 : Error (Media upload not found)
   *   code 0 : Error (Unexpected error)
   * 
   * @param mediaId Media identifier
   */
  def mediaGet(mediaId: String): ApiRequest[MediaUploadDetails] =
    ApiRequest[MediaUploadDetails](ApiMethods.GET, baseUrl, "/media/{media_id}", "application/json")
      .withPathParam("media_id", mediaId)
      .withSuccessResponse[MediaUploadDetails](200)
      .withErrorResponse[Error](404)
      .withDefaultErrorResponse[Error]
      

  /**
   * List media uploads filtered by given parameters.  <strong><a href='/docs/api-features/creating-boards-and-pins/#creating-video-pins'>Learn more</a></strong> about video Pin creation.
   * 
   * Expected answers:
   *   code 200 : MediaList200Response (response)
   *   code 0 : Error (Unexpected error)
   * 
   * @param bookmark Cursor used to fetch the next page of items
   * @param pageSize Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/reference/pagination/'>Pagination</a> for more information.
   */
  def mediaList(bookmark: Option[String] = None, pageSize: Option[Int] = None): ApiRequest[MediaList200Response] =
    ApiRequest[MediaList200Response](ApiMethods.GET, baseUrl, "/media", "application/json")
      .withQueryParam("bookmark", bookmark)
      .withQueryParam("page_size", pageSize)
      .withSuccessResponse[MediaList200Response](200)
      .withDefaultErrorResponse[Error]
      



}

