/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.client.api

import org.openapitools.client.model.DeletePartnersRequest
import org.openapitools.client.model.DeletePartnersResponse
import org.openapitools.client.model.DeletedMembersResponse
import org.openapitools.client.model.Error
import org.openapitools.client.model.GetBusinessEmployers200Response
import org.openapitools.client.model.GetBusinessMembers200Response
import org.openapitools.client.model.GetBusinessPartners200Response
import org.openapitools.client.model.MemberBusinessRole
import org.openapitools.client.model.MembersToDeleteBody
import org.openapitools.client.model.PartnerType
import org.openapitools.client.model.UpdateMemberBusinessRoleBody
import org.openapitools.client.model.UpdateMemberResultsResponseArray
import org.openapitools.client.core._
import org.openapitools.client.core.CollectionFormats._
import org.openapitools.client.core.ApiKeyLocations._

object BusinessAccessRelationshipsApi {

  def apply(baseUrl: String = "https://api.pinterest.com/v5") = new BusinessAccessRelationshipsApi(baseUrl)
}

class BusinessAccessRelationshipsApi(baseUrl: String) {

  /**
   * Terminate memberships between the specified members and your business.
   * 
   * Expected answers:
   *   code 200 : DeletedMembersResponse (Success)
   *   code 0 : Error (Unexpected error)
   * 
   * @param businessId Business id
   * @param membersToDeleteBody List of members with role to delete.
   */
  def deleteBusinessMembership(businessId: String, membersToDeleteBody: MembersToDeleteBody): ApiRequest[DeletedMembersResponse] =
    ApiRequest[DeletedMembersResponse](ApiMethods.DELETE, baseUrl, "/businesses/{business_id}/members", "application/json")
      .withBody(membersToDeleteBody)
      .withPathParam("business_id", businessId)
      .withSuccessResponse[DeletedMembersResponse](200)
      .withDefaultErrorResponse[Error]
      

  /**
   * Terminate partnerships between the specified partners and your business. Note: You may only batch terminate partners of the same partner type.
   * 
   * Expected answers:
   *   code 200 : DeletePartnersResponse (Success)
   *   code 404 : Error (A supplied partner id doesn't exist)
   *   code 0 : Error (Unexpected error)
   * 
   * @param businessId Unique identifier of the requesting business.
   * @param deletePartnersRequest An object containing a \"partner_ids\" property composed of a list of partner IDs and a \"partners_type\" property specifying the type of partners to delete. 
   */
  def deleteBusinessPartners(businessId: String, deletePartnersRequest: DeletePartnersRequest): ApiRequest[DeletePartnersResponse] =
    ApiRequest[DeletePartnersResponse](ApiMethods.DELETE, baseUrl, "/businesses/{business_id}/partners", "application/json")
      .withBody(deletePartnersRequest)
      .withPathParam("business_id", businessId)
      .withSuccessResponse[DeletePartnersResponse](200)
      .withErrorResponse[Error](404)
      .withDefaultErrorResponse[Error]
      

  /**
   * Get all of the viewing user's business employers.
   * 
   * Expected answers:
   *   code 200 : GetBusinessEmployers200Response (Success)
   *   code 0 : Error (Unexpected error)
   * 
   * @param pageSize Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/reference/pagination/'>Pagination</a> for more information.
   * @param bookmark Cursor used to fetch the next page of items
   */
  def getBusinessEmployers(pageSize: Option[Int] = None, bookmark: Option[String] = None): ApiRequest[GetBusinessEmployers200Response] =
    ApiRequest[GetBusinessEmployers200Response](ApiMethods.GET, baseUrl, "/businesses/employers", "application/json")
      .withQueryParam("page_size", pageSize)
      .withQueryParam("bookmark", bookmark)
      .withSuccessResponse[GetBusinessEmployers200Response](200)
      .withDefaultErrorResponse[Error]
      

  /**
   * Get all members of the specified business. The return response will include the member's business_role and assets they have access to if assets_summary=TRUE
   * 
   * Expected answers:
   *   code 200 : GetBusinessMembers200Response (Success)
   *   code 0 : Error (Unexpected error)
   * 
   * @param businessId Unique identifier of the requesting business.
   * @param assetsSummary Include assets summary in the response if this is true.  The assets summary returns a dictionary representing a summary of the assets for the business user ID, with information like the ad accounts and profiles the user has permissions for and what those permissions are
   * @param businessRoles A list of business roles to filter the members by. Only members whose roles are in the specified roles will be returned.
   * @param memberIds A list of business members ids separated by comma.
   * @param startIndex An index to start fetching the results from. Only the results starting from this index will be returned.
   * @param bookmark Cursor used to fetch the next page of items
   * @param pageSize Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/reference/pagination/'>Pagination</a> for more information.
   */
  def getBusinessMembers(businessId: String, assetsSummary: Option[Boolean] = None, businessRoles: Seq[MemberBusinessRole], memberIds: Option[String] = None, startIndex: Option[Int] = None, bookmark: Option[String] = None, pageSize: Option[Int] = None): ApiRequest[GetBusinessMembers200Response] =
    ApiRequest[GetBusinessMembers200Response](ApiMethods.GET, baseUrl, "/businesses/{business_id}/members", "application/json")
      .withQueryParam("assets_summary", assetsSummary)
      .withQueryParam("business_roles", ArrayValues(businessRoles, MULTI))
      .withQueryParam("member_ids", memberIds)
      .withQueryParam("start_index", startIndex)
      .withQueryParam("bookmark", bookmark)
      .withQueryParam("page_size", pageSize)
      .withPathParam("business_id", businessId)
      .withSuccessResponse[GetBusinessMembers200Response](200)
      .withDefaultErrorResponse[Error]
      

  /**
   * Get all partners of the specified business.  If the assets_summary=TRUE and: - partner_type=INTERNAL, the business assets returned are your business assets the partner has access to. - partner_type=EXTERNAL, the business assets returned are your partner's business assets the partner has granted you   access to.
   * 
   * Expected answers:
   *   code 200 : GetBusinessPartners200Response (Success)
   *   code 0 : Error (Unexpected error)
   * 
   * @param businessId Unique identifier of the requesting business.
   * @param assetsSummary Include assets summary in the response if this is true.  The assets summary returns a dictionary representing a summary of the assets for the business user ID, with information like the ad accounts and profiles the user has permissions for and what those permissions are
   * @param partnerType Specifies whether to fetch internal or external (shared) partners. If partner_type=INTERNAL, the asset being queried is for accesses the partner has to your business assets.<br> If partner_type=EXTERNAL, the asset being queried is for the accesses you have to the partner's business asset.
   * @param partnerIds A list of business partner ids separated by commas used to filter the results. Only partners with the specified ids will be returned.
   * @param startIndex An index to start fetching the results from. Only the results starting from this index will be returned.
   * @param pageSize Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/reference/pagination/'>Pagination</a> for more information.
   * @param bookmark Cursor used to fetch the next page of items
   */
  def getBusinessPartners(businessId: String, assetsSummary: Option[Boolean] = None, partnerType: Option[PartnerType] = None, partnerIds: Option[String] = None, startIndex: Option[Int] = None, pageSize: Option[Int] = None, bookmark: Option[String] = None): ApiRequest[GetBusinessPartners200Response] =
    ApiRequest[GetBusinessPartners200Response](ApiMethods.GET, baseUrl, "/businesses/{business_id}/partners", "application/json")
      .withQueryParam("assets_summary", assetsSummary)
      .withQueryParam("partner_type", partnerType)
      .withQueryParam("partner_ids", partnerIds)
      .withQueryParam("start_index", startIndex)
      .withQueryParam("page_size", pageSize)
      .withQueryParam("bookmark", bookmark)
      .withPathParam("business_id", businessId)
      .withSuccessResponse[GetBusinessPartners200Response](200)
      .withDefaultErrorResponse[Error]
      

  /**
   * Update a member's business role within the business.
   * 
   * Expected answers:
   *   code 200 : UpdateMemberResultsResponseArray (response)
   *   code 0 : Error (Unexpected error)
   * 
   * @param businessId Business id
   * @param updateMemberBusinessRoleBody List of objects with the member id and the business_role.
   */
  def updateBusinessMemberships(businessId: String, updateMemberBusinessRoleBody: Seq[UpdateMemberBusinessRoleBody]): ApiRequest[UpdateMemberResultsResponseArray] =
    ApiRequest[UpdateMemberResultsResponseArray](ApiMethods.PATCH, baseUrl, "/businesses/{business_id}/members", "application/json")
      .withBody(updateMemberBusinessRoleBody)
      .withPathParam("business_id", businessId)
      .withSuccessResponse[UpdateMemberResultsResponseArray](200)
      .withDefaultErrorResponse[Error]
      



}

