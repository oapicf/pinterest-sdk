/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>
#include <QDebug>

#include "OAIHelpers.h"
#include "OAICustomerListsApiRequest.h"

namespace OpenAPI {

OAICustomerListsApiRequest::OAICustomerListsApiRequest(QHttpEngine::Socket *s, QSharedPointer<OAICustomerListsApiHandler> hdl) : QObject(s), socket(s), handler(hdl) {
    auto headers = s->headers();
    for(auto itr = headers.begin(); itr != headers.end(); itr++) {
        requestHeaders.insert(QString(itr.key()), QString(itr.value()));
    }
}

OAICustomerListsApiRequest::~OAICustomerListsApiRequest(){
    disconnect(this, nullptr, nullptr, nullptr);
    qDebug() << "OAICustomerListsApiRequest::~OAICustomerListsApiRequest()";
}

QMap<QString, QString>
OAICustomerListsApiRequest::getRequestHeaders() const {
    return requestHeaders;
}

void OAICustomerListsApiRequest::setResponseHeaders(const QMultiMap<QString, QString>& headers){
    for(auto itr = headers.begin(); itr != headers.end(); ++itr) {
        responseHeaders.insert(itr.key(), itr.value());
    }
}


QHttpEngine::Socket* OAICustomerListsApiRequest::getRawSocket(){
    return socket;
}


void OAICustomerListsApiRequest::customerLists_createRequest(const QString& ad_account_idstr){
    qDebug() << "/v5/ad_accounts/{ad_account_id}/customer_lists";
    connect(this, &OAICustomerListsApiRequest::customerLists_create, handler.data(), &OAICustomerListsApiHandler::customerLists_create);

    
    QString ad_account_id;
    fromStringValue(ad_account_idstr, ad_account_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAICustomerListRequest oai_customer_list_request;
    ::OpenAPI::fromJsonValue(oai_customer_list_request, obj);
    

    Q_EMIT customerLists_create(ad_account_id, oai_customer_list_request);
}


void OAICustomerListsApiRequest::customerLists_getRequest(const QString& ad_account_idstr, const QString& customer_list_idstr){
    qDebug() << "/v5/ad_accounts/{ad_account_id}/customer_lists/{customer_list_id}";
    connect(this, &OAICustomerListsApiRequest::customerLists_get, handler.data(), &OAICustomerListsApiHandler::customerLists_get);

    
    QString ad_account_id;
    fromStringValue(ad_account_idstr, ad_account_id);
        QString customer_list_id;
    fromStringValue(customer_list_idstr, customer_list_id);
    

    Q_EMIT customerLists_get(ad_account_id, customer_list_id);
}


void OAICustomerListsApiRequest::customerLists_listRequest(const QString& ad_account_idstr){
    qDebug() << "/v5/ad_accounts/{ad_account_id}/customer_lists";
    connect(this, &OAICustomerListsApiRequest::customerLists_list, handler.data(), &OAICustomerListsApiHandler::customerLists_list);

    
    qint32 page_size;
    if(socket->queryString().keys().contains("page_size")){
        fromStringValue(socket->queryString().value("page_size"), page_size);
    }
    
    QString order;
    if(socket->queryString().keys().contains("order")){
        fromStringValue(socket->queryString().value("order"), order);
    }
    
    QString bookmark;
    if(socket->queryString().keys().contains("bookmark")){
        fromStringValue(socket->queryString().value("bookmark"), bookmark);
    }
    
    QString ad_account_id;
    fromStringValue(ad_account_idstr, ad_account_id);
    

    Q_EMIT customerLists_list(ad_account_id, page_size, order, bookmark);
}


void OAICustomerListsApiRequest::customerLists_updateRequest(const QString& ad_account_idstr, const QString& customer_list_idstr){
    qDebug() << "/v5/ad_accounts/{ad_account_id}/customer_lists/{customer_list_id}";
    connect(this, &OAICustomerListsApiRequest::customerLists_update, handler.data(), &OAICustomerListsApiHandler::customerLists_update);

    
    QString ad_account_id;
    fromStringValue(ad_account_idstr, ad_account_id);
        QString customer_list_id;
    fromStringValue(customer_list_idstr, customer_list_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAICustomerListUpdateRequest oai_customer_list_update_request;
    ::OpenAPI::fromJsonValue(oai_customer_list_update_request, obj);
    

    Q_EMIT customerLists_update(ad_account_id, customer_list_id, oai_customer_list_update_request);
}



void OAICustomerListsApiRequest::customerLists_createResponse(const OAICustomerList& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAICustomerListsApiRequest::customerLists_getResponse(const OAICustomerList& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAICustomerListsApiRequest::customerLists_listResponse(const OAICustomer_lists_list_200_response& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAICustomerListsApiRequest::customerLists_updateResponse(const OAICustomerList& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAICustomerListsApiRequest::customerLists_createError(const OAICustomerList& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAICustomerListsApiRequest::customerLists_getError(const OAICustomerList& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAICustomerListsApiRequest::customerLists_listError(const OAICustomer_lists_list_200_response& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAICustomerListsApiRequest::customerLists_updateError(const OAICustomerList& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAICustomerListsApiRequest::sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type); // TODO
    socket->write(res);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAICustomerListsApiRequest::sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type);  // TODO
    socket->write(res->readAll());
    if(socket->isOpen()){
        socket->close();
    }
}

}
