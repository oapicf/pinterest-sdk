/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>
#include <QDebug>

#include "OAIHelpers.h"
#include "OAIOauthApiRequest.h"

namespace OpenAPI {

OAIOauthApiRequest::OAIOauthApiRequest(QHttpEngine::Socket *s, QSharedPointer<OAIOauthApiHandler> hdl) : QObject(s), socket(s), handler(hdl) {
    auto headers = s->headers();
    for(auto itr = headers.begin(); itr != headers.end(); itr++) {
        requestHeaders.insert(QString(itr.key()), QString(itr.value()));
    }
}

OAIOauthApiRequest::~OAIOauthApiRequest(){
    disconnect(this, nullptr, nullptr, nullptr);
    qDebug() << "OAIOauthApiRequest::~OAIOauthApiRequest()";
}

QMap<QString, QString>
OAIOauthApiRequest::getRequestHeaders() const {
    return requestHeaders;
}

void OAIOauthApiRequest::setResponseHeaders(const QMultiMap<QString, QString>& headers){
    for(auto itr = headers.begin(); itr != headers.end(); ++itr) {
        responseHeaders.insert(itr.key(), itr.value());
    }
}


QHttpEngine::Socket* OAIOauthApiRequest::getRawSocket(){
    return socket;
}


void OAIOauthApiRequest::oauth_tokenRequest(){
    qDebug() << "/v5/oauth/token";
    connect(this, &OAIOauthApiRequest::oauth_token, handler.data(), &OAIOauthApiHandler::oauth_token);

    

    QString grant_type;

    Q_EMIT oauth_token(grant_type);
}



void OAIOauthApiRequest::oauth_tokenResponse(const OAIOauthAccessTokenResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAIOauthApiRequest::oauth_tokenError(const OAIOauthAccessTokenResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAIOauthApiRequest::sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type); // TODO
    socket->write(res);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIOauthApiRequest::sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type);  // TODO
    socket->write(res->readAll());
    if(socket->isOpen()){
        socket->close();
    }
}

}
