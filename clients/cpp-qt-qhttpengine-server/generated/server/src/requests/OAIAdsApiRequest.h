/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAdsApiRequest_H
#define OAI_OAIAdsApiRequest_H

#include <QObject>
#include <QStringList>
#include <QMultiMap>
#include <QNetworkReply>
#include <QSharedPointer>

#include <qhttpengine/socket.h>
#include "OAIAdArrayResponse.h"
#include "OAIAdCreateRequest.h"
#include "OAIAdPreviewRequest.h"
#include "OAIAdPreviewURLResponse.h"
#include "OAIAdResponse.h"
#include "OAIAdUpdateRequest.h"
#include "OAIAdsAnalyticsAdTargetingType.h"
#include "OAIAdsAnalyticsResponse_inner.h"
#include "OAIAds_list_200_response.h"
#include "OAIConversionReportAttributionType.h"
#include "OAIError.h"
#include "OAIGranularity.h"
#include "OAIMetricsResponse.h"
#include <QList>
#include <QString>
#include "OAIAdsApiHandler.h"

namespace OpenAPI {

class OAIAdsApiRequest : public QObject
{
    Q_OBJECT

public:
    OAIAdsApiRequest(QHttpEngine::Socket *s, QSharedPointer<OAIAdsApiHandler> handler);
    virtual ~OAIAdsApiRequest();

    void adPreviews_createRequest(const QString& ad_account_id);
    void adTargetingAnalytics_getRequest(const QString& ad_account_id);
    void ads_analyticsRequest(const QString& ad_account_id);
    void ads_createRequest(const QString& ad_account_id);
    void ads_getRequest(const QString& ad_account_id, const QString& ad_id);
    void ads_listRequest(const QString& ad_account_id);
    void ads_updateRequest(const QString& ad_account_id);
    

    void adPreviews_createResponse(const OAIAdPreviewURLResponse& res);
    void adTargetingAnalytics_getResponse(const OAIMetricsResponse& res);
    void ads_analyticsResponse(const QList<OAIAdsAnalyticsResponse_inner>& res);
    void ads_createResponse(const OAIAdArrayResponse& res);
    void ads_getResponse(const OAIAdResponse& res);
    void ads_listResponse(const OAIAds_list_200_response& res);
    void ads_updateResponse(const OAIAdArrayResponse& res);
    

    void adPreviews_createError(const OAIAdPreviewURLResponse& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void adTargetingAnalytics_getError(const OAIMetricsResponse& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void ads_analyticsError(const QList<OAIAdsAnalyticsResponse_inner>& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void ads_createError(const OAIAdArrayResponse& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void ads_getError(const OAIAdResponse& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void ads_listError(const OAIAds_list_200_response& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void ads_updateError(const OAIAdArrayResponse& res, QNetworkReply::NetworkError error_type, QString& error_str);
    

    void sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type);

    void sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type);

    QMap<QString, QString> getRequestHeaders() const;

    QHttpEngine::Socket* getRawSocket();

    void setResponseHeaders(const QMultiMap<QString,QString>& headers);

Q_SIGNALS:
    void adPreviews_create(QString ad_account_id, OAIAdPreviewRequest oaiad_preview_request);
    void adTargetingAnalytics_get(QString ad_account_id, QList<QString> ad_ids, QDate start_date, QDate end_date, QList<OAIAdsAnalyticsAdTargetingType> targeting_types, QList<QString> columns, OAIGranularity granularity, qint32 click_window_days, qint32 engagement_window_days, qint32 view_window_days, QString conversion_report_time, OAIConversionReportAttributionType attribution_types);
    void ads_analytics(QString ad_account_id, QDate start_date, QDate end_date, QList<QString> columns, OAIGranularity granularity, QList<QString> ad_ids, qint32 click_window_days, qint32 engagement_window_days, qint32 view_window_days, QString conversion_report_time, QList<QString> pin_ids, QList<QString> campaign_ids);
    void ads_create(QString ad_account_id, QList<OAIAdCreateRequest> oaiad_create_request);
    void ads_get(QString ad_account_id, QString ad_id);
    void ads_list(QString ad_account_id, QList<QString> campaign_ids, QList<QString> ad_group_ids, QList<QString> ad_ids, QList<QString> entity_statuses, qint32 page_size, QString order, QString bookmark);
    void ads_update(QString ad_account_id, QList<OAIAdUpdateRequest> oaiad_update_request);
    

private:
    QMap<QString, QString> requestHeaders;
    QMap<QString, QString> responseHeaders;
    QHttpEngine::Socket  *socket;
    QSharedPointer<OAIAdsApiHandler> handler;

    inline void setSocketResponseHeaders(){
        QHttpEngine::Socket::HeaderMap resHeaders;
        for(auto itr = responseHeaders.begin(); itr != responseHeaders.end(); ++itr) {
            resHeaders.insert(itr.key().toUtf8(), itr.value().toUtf8());
        }
        socket->setHeaders(resHeaders);
    }
};

}

#endif // OAI_OAIAdsApiRequest_H
