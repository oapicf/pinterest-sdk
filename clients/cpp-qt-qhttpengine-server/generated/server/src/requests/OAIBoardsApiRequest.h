/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIBoardsApiRequest_H
#define OAI_OAIBoardsApiRequest_H

#include <QObject>
#include <QStringList>
#include <QMultiMap>
#include <QNetworkReply>
#include <QSharedPointer>

#include <qhttpengine/socket.h>
#include "OAIBoard.h"
#include "OAIBoardSection.h"
#include "OAIBoardUpdate.h"
#include "OAIBoard_sections_list_200_response.h"
#include "OAIBoards_list_200_response.h"
#include "OAIBoards_list_pins_200_response.h"
#include "OAIError.h"
#include <QList>
#include <QString>
#include "OAIBoardsApiHandler.h"

namespace OpenAPI {

class OAIBoardsApiRequest : public QObject
{
    Q_OBJECT

public:
    OAIBoardsApiRequest(QHttpEngine::Socket *s, QSharedPointer<OAIBoardsApiHandler> handler);
    virtual ~OAIBoardsApiRequest();

    void boardSections_createRequest(const QString& board_id);
    void boardSections_deleteRequest(const QString& board_id, const QString& section_id);
    void boardSections_listRequest(const QString& board_id);
    void boardSections_listPinsRequest(const QString& board_id, const QString& section_id);
    void boardSections_updateRequest(const QString& board_id, const QString& section_id);
    void boards_createRequest();
    void boards_deleteRequest(const QString& board_id);
    void boards_getRequest(const QString& board_id);
    void boards_listRequest();
    void boards_listPinsRequest(const QString& board_id);
    void boards_updateRequest(const QString& board_id);
    

    void boardSections_createResponse(const OAIBoardSection& res);
    void boardSections_deleteResponse();
    void boardSections_listResponse(const OAIBoard_sections_list_200_response& res);
    void boardSections_listPinsResponse(const OAIBoards_list_pins_200_response& res);
    void boardSections_updateResponse(const OAIBoardSection& res);
    void boards_createResponse(const OAIBoard& res);
    void boards_deleteResponse();
    void boards_getResponse(const OAIBoard& res);
    void boards_listResponse(const OAIBoards_list_200_response& res);
    void boards_listPinsResponse(const OAIBoards_list_pins_200_response& res);
    void boards_updateResponse(const OAIBoard& res);
    

    void boardSections_createError(const OAIBoardSection& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void boardSections_deleteError(QNetworkReply::NetworkError error_type, QString& error_str);
    void boardSections_listError(const OAIBoard_sections_list_200_response& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void boardSections_listPinsError(const OAIBoards_list_pins_200_response& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void boardSections_updateError(const OAIBoardSection& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void boards_createError(const OAIBoard& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void boards_deleteError(QNetworkReply::NetworkError error_type, QString& error_str);
    void boards_getError(const OAIBoard& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void boards_listError(const OAIBoards_list_200_response& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void boards_listPinsError(const OAIBoards_list_pins_200_response& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void boards_updateError(const OAIBoard& res, QNetworkReply::NetworkError error_type, QString& error_str);
    

    void sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type);

    void sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type);

    QMap<QString, QString> getRequestHeaders() const;

    QHttpEngine::Socket* getRawSocket();

    void setResponseHeaders(const QMultiMap<QString,QString>& headers);

Q_SIGNALS:
    void boardSections_create(QString board_id, OAIBoardSection oai_board_section, QString ad_account_id);
    void boardSections_delete(QString board_id, QString section_id, QString ad_account_id);
    void boardSections_list(QString board_id, QString ad_account_id, QString bookmark, qint32 page_size);
    void boardSections_listPins(QString board_id, QString section_id, QString ad_account_id, QString bookmark, qint32 page_size);
    void boardSections_update(QString board_id, QString section_id, OAIBoardSection oai_board_section, QString ad_account_id);
    void boards_create(OAIBoard oai_board, QString ad_account_id);
    void boards_delete(QString board_id, QString ad_account_id);
    void boards_get(QString board_id, QString ad_account_id);
    void boards_list(QString ad_account_id, QString bookmark, qint32 page_size, QString privacy);
    void boards_listPins(QString board_id, QString bookmark, qint32 page_size, QList<QString> creative_types, QString ad_account_id, bool pin_metrics);
    void boards_update(QString board_id, OAIBoardUpdate oai_board_update, QString ad_account_id);
    

private:
    QMap<QString, QString> requestHeaders;
    QMap<QString, QString> responseHeaders;
    QHttpEngine::Socket  *socket;
    QSharedPointer<OAIBoardsApiHandler> handler;

    inline void setSocketResponseHeaders(){
        QHttpEngine::Socket::HeaderMap resHeaders;
        for(auto itr = responseHeaders.begin(); itr != responseHeaders.end(); ++itr) {
            resHeaders.insert(itr.key().toUtf8(), itr.value().toUtf8());
        }
        socket->setHeaders(resHeaders);
    }
};

}

#endif // OAI_OAIBoardsApiRequest_H
