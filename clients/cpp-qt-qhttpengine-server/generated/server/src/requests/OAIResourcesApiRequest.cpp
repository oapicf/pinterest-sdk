/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>
#include <QDebug>

#include "OAIHelpers.h"
#include "OAIResourcesApiRequest.h"

namespace OpenAPI {

OAIResourcesApiRequest::OAIResourcesApiRequest(QHttpEngine::Socket *s, QSharedPointer<OAIResourcesApiHandler> hdl) : QObject(s), socket(s), handler(hdl) {
    auto headers = s->headers();
    for(auto itr = headers.begin(); itr != headers.end(); itr++) {
        requestHeaders.insert(QString(itr.key()), QString(itr.value()));
    }
}

OAIResourcesApiRequest::~OAIResourcesApiRequest(){
    disconnect(this, nullptr, nullptr, nullptr);
    qDebug() << "OAIResourcesApiRequest::~OAIResourcesApiRequest()";
}

QMap<QString, QString>
OAIResourcesApiRequest::getRequestHeaders() const {
    return requestHeaders;
}

void OAIResourcesApiRequest::setResponseHeaders(const QMultiMap<QString, QString>& headers){
    for(auto itr = headers.begin(); itr != headers.end(); ++itr) {
        responseHeaders.insert(itr.key(), itr.value());
    }
}


QHttpEngine::Socket* OAIResourcesApiRequest::getRawSocket(){
    return socket;
}


void OAIResourcesApiRequest::adAccountCountries_getRequest(){
    qDebug() << "/v5/resources/ad_account_countries";
    connect(this, &OAIResourcesApiRequest::adAccountCountries_get, handler.data(), &OAIResourcesApiHandler::adAccountCountries_get);

    


    Q_EMIT adAccountCountries_get();
}


void OAIResourcesApiRequest::deliveryMetrics_getRequest(){
    qDebug() << "/v5/resources/delivery_metrics";
    connect(this, &OAIResourcesApiRequest::deliveryMetrics_get, handler.data(), &OAIResourcesApiHandler::deliveryMetrics_get);

    
    QString report_type;
    if(socket->queryString().keys().contains("report_type")){
        fromStringValue(socket->queryString().value("report_type"), report_type);
    }
    


    Q_EMIT deliveryMetrics_get(report_type);
}


void OAIResourcesApiRequest::interestTargetingOptions_getRequest(const QString& interest_idstr){
    qDebug() << "/v5/resources/targeting/interests/{interest_id}";
    connect(this, &OAIResourcesApiRequest::interestTargetingOptions_get, handler.data(), &OAIResourcesApiHandler::interestTargetingOptions_get);

    
    QString interest_id;
    fromStringValue(interest_idstr, interest_id);
    

    Q_EMIT interestTargetingOptions_get(interest_id);
}


void OAIResourcesApiRequest::leadFormQuestions_getRequest(){
    qDebug() << "/v5/resources/lead_form_questions";
    connect(this, &OAIResourcesApiRequest::leadFormQuestions_get, handler.data(), &OAIResourcesApiHandler::leadFormQuestions_get);

    


    Q_EMIT leadFormQuestions_get();
}


void OAIResourcesApiRequest::metricsReadyState_getRequest(){
    qDebug() << "/v5/resources/metrics_ready_state";
    connect(this, &OAIResourcesApiRequest::metricsReadyState_get, handler.data(), &OAIResourcesApiHandler::metricsReadyState_get);

    
    QString date;
    if(socket->queryString().keys().contains("date")){
        fromStringValue(socket->queryString().value("date"), date);
    }
    


    Q_EMIT metricsReadyState_get(date);
}


void OAIResourcesApiRequest::targetingOptions_getRequest(const QString& targeting_typestr){
    qDebug() << "/v5/resources/targeting/{targeting_type}";
    connect(this, &OAIResourcesApiRequest::targetingOptions_get, handler.data(), &OAIResourcesApiHandler::targetingOptions_get);

    
    QString client_id;
    if(socket->queryString().keys().contains("client_id")){
        fromStringValue(socket->queryString().value("client_id"), client_id);
    }
    
    QString oauth_signature;
    if(socket->queryString().keys().contains("oauth_signature")){
        fromStringValue(socket->queryString().value("oauth_signature"), oauth_signature);
    }
    
    QString timestamp;
    if(socket->queryString().keys().contains("timestamp")){
        fromStringValue(socket->queryString().value("timestamp"), timestamp);
    }
    
    QString ad_account_id;
    if(socket->queryString().keys().contains("ad_account_id")){
        fromStringValue(socket->queryString().value("ad_account_id"), ad_account_id);
    }
    
    QString targeting_type;
    fromStringValue(targeting_typestr, targeting_type);
    

    Q_EMIT targetingOptions_get(targeting_type, client_id, oauth_signature, timestamp, ad_account_id);
}



void OAIResourcesApiRequest::adAccountCountries_getResponse(const OAIAdAccountsCountryResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIResourcesApiRequest::deliveryMetrics_getResponse(const OAIDeliveryMetricsResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIResourcesApiRequest::interestTargetingOptions_getResponse(const OAISingleInterestTargetingOptionResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIResourcesApiRequest::leadFormQuestions_getResponse(){
    setSocketResponseHeaders();
    socket->setStatusCode(QHttpEngine::Socket::OK);
    socket->writeHeaders();
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIResourcesApiRequest::metricsReadyState_getResponse(const OAIBookClosedResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIResourcesApiRequest::targetingOptions_getResponse(const QList<OAIObject>& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toArray());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAIResourcesApiRequest::adAccountCountries_getError(const OAIAdAccountsCountryResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIResourcesApiRequest::deliveryMetrics_getError(const OAIDeliveryMetricsResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIResourcesApiRequest::interestTargetingOptions_getError(const OAISingleInterestTargetingOptionResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIResourcesApiRequest::leadFormQuestions_getError(QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    socket->setStatusCode(QHttpEngine::Socket::NotFound);
    socket->write(error_str.toUtf8());
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIResourcesApiRequest::metricsReadyState_getError(const OAIBookClosedResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIResourcesApiRequest::targetingOptions_getError(const QList<OAIObject>& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toArray());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAIResourcesApiRequest::sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type); // TODO
    socket->write(res);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIResourcesApiRequest::sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type);  // TODO
    socket->write(res->readAll());
    if(socket->isOpen()){
        socket->close();
    }
}

}
