/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>
#include <QDebug>

#include "OAIHelpers.h"
#include "OAIAdGroupsApiRequest.h"

namespace OpenAPI {

OAIAdGroupsApiRequest::OAIAdGroupsApiRequest(QHttpEngine::Socket *s, QSharedPointer<OAIAdGroupsApiHandler> hdl) : QObject(s), socket(s), handler(hdl) {
    auto headers = s->headers();
    for(auto itr = headers.begin(); itr != headers.end(); itr++) {
        requestHeaders.insert(QString(itr.key()), QString(itr.value()));
    }
}

OAIAdGroupsApiRequest::~OAIAdGroupsApiRequest(){
    disconnect(this, nullptr, nullptr, nullptr);
    qDebug() << "OAIAdGroupsApiRequest::~OAIAdGroupsApiRequest()";
}

QMap<QString, QString>
OAIAdGroupsApiRequest::getRequestHeaders() const {
    return requestHeaders;
}

void OAIAdGroupsApiRequest::setResponseHeaders(const QMultiMap<QString, QString>& headers){
    for(auto itr = headers.begin(); itr != headers.end(); ++itr) {
        responseHeaders.insert(itr.key(), itr.value());
    }
}


QHttpEngine::Socket* OAIAdGroupsApiRequest::getRawSocket(){
    return socket;
}


void OAIAdGroupsApiRequest::adGroupsBidFloor_getRequest(const QString& ad_account_idstr){
    qDebug() << "/v5/ad_accounts/{ad_account_id}/bid_floor";
    connect(this, &OAIAdGroupsApiRequest::adGroupsBidFloor_get, handler.data(), &OAIAdGroupsApiHandler::adGroupsBidFloor_get);

    
    QString ad_account_id;
    fromStringValue(ad_account_idstr, ad_account_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIBidFloorRequest oai_bid_floor_request;
    ::OpenAPI::fromJsonValue(oai_bid_floor_request, obj);
    

    Q_EMIT adGroupsBidFloor_get(ad_account_id, oai_bid_floor_request);
}


void OAIAdGroupsApiRequest::adGroupsTargetingAnalytics_getRequest(const QString& ad_account_idstr){
    qDebug() << "/v5/ad_accounts/{ad_account_id}/ad_groups/targeting_analytics";
    connect(this, &OAIAdGroupsApiRequest::adGroupsTargetingAnalytics_get, handler.data(), &OAIAdGroupsApiHandler::adGroupsTargetingAnalytics_get);

    
    QList<QString> ad_group_ids;
    if(socket->queryString().keys().contains("ad_group_ids")){
        fromStringValue(socket->queryString().values("ad_group_ids"), ad_group_ids);
    }
    
    QDate start_date;
    if(socket->queryString().keys().contains("start_date")){
        fromStringValue(socket->queryString().value("start_date"), start_date);
    }
    
    QDate end_date;
    if(socket->queryString().keys().contains("end_date")){
        fromStringValue(socket->queryString().value("end_date"), end_date);
    }
    
    QList<OAIAdsAnalyticsTargetingType> targeting_types;
    if(socket->queryString().keys().contains("targeting_types")){
        fromStringValue(socket->queryString().values("targeting_types"), targeting_types);
    }
    
    QList<QString> columns;
    if(socket->queryString().keys().contains("columns")){
        fromStringValue(socket->queryString().values("columns"), columns);
    }
    
    OAIGranularity granularity;
    if(socket->queryString().keys().contains("granularity")){
        fromStringValue(socket->queryString().value("granularity"), granularity);
    }
    
    qint32 click_window_days;
    if(socket->queryString().keys().contains("click_window_days")){
        fromStringValue(socket->queryString().value("click_window_days"), click_window_days);
    }
    
    qint32 engagement_window_days;
    if(socket->queryString().keys().contains("engagement_window_days")){
        fromStringValue(socket->queryString().value("engagement_window_days"), engagement_window_days);
    }
    
    qint32 view_window_days;
    if(socket->queryString().keys().contains("view_window_days")){
        fromStringValue(socket->queryString().value("view_window_days"), view_window_days);
    }
    
    QString conversion_report_time;
    if(socket->queryString().keys().contains("conversion_report_time")){
        fromStringValue(socket->queryString().value("conversion_report_time"), conversion_report_time);
    }
    
    OAIConversionReportAttributionType attribution_types;
    if(socket->queryString().keys().contains("attribution_types")){
        fromStringValue(socket->queryString().value("attribution_types"), attribution_types);
    }
    
    QString ad_account_id;
    fromStringValue(ad_account_idstr, ad_account_id);
    

    Q_EMIT adGroupsTargetingAnalytics_get(ad_account_id, ad_group_ids, start_date, end_date, targeting_types, columns, granularity, click_window_days, engagement_window_days, view_window_days, conversion_report_time, attribution_types);
}


void OAIAdGroupsApiRequest::adGroups_analyticsRequest(const QString& ad_account_idstr){
    qDebug() << "/v5/ad_accounts/{ad_account_id}/ad_groups/analytics";
    connect(this, &OAIAdGroupsApiRequest::adGroups_analytics, handler.data(), &OAIAdGroupsApiHandler::adGroups_analytics);

    
    QDate start_date;
    if(socket->queryString().keys().contains("start_date")){
        fromStringValue(socket->queryString().value("start_date"), start_date);
    }
    
    QDate end_date;
    if(socket->queryString().keys().contains("end_date")){
        fromStringValue(socket->queryString().value("end_date"), end_date);
    }
    
    QList<QString> ad_group_ids;
    if(socket->queryString().keys().contains("ad_group_ids")){
        fromStringValue(socket->queryString().values("ad_group_ids"), ad_group_ids);
    }
    
    QList<QString> columns;
    if(socket->queryString().keys().contains("columns")){
        fromStringValue(socket->queryString().values("columns"), columns);
    }
    
    OAIGranularity granularity;
    if(socket->queryString().keys().contains("granularity")){
        fromStringValue(socket->queryString().value("granularity"), granularity);
    }
    
    qint32 click_window_days;
    if(socket->queryString().keys().contains("click_window_days")){
        fromStringValue(socket->queryString().value("click_window_days"), click_window_days);
    }
    
    qint32 engagement_window_days;
    if(socket->queryString().keys().contains("engagement_window_days")){
        fromStringValue(socket->queryString().value("engagement_window_days"), engagement_window_days);
    }
    
    qint32 view_window_days;
    if(socket->queryString().keys().contains("view_window_days")){
        fromStringValue(socket->queryString().value("view_window_days"), view_window_days);
    }
    
    QString conversion_report_time;
    if(socket->queryString().keys().contains("conversion_report_time")){
        fromStringValue(socket->queryString().value("conversion_report_time"), conversion_report_time);
    }
    
    QString ad_account_id;
    fromStringValue(ad_account_idstr, ad_account_id);
    

    Q_EMIT adGroups_analytics(ad_account_id, start_date, end_date, ad_group_ids, columns, granularity, click_window_days, engagement_window_days, view_window_days, conversion_report_time);
}


void OAIAdGroupsApiRequest::adGroups_audienceSizingRequest(const QString& ad_account_idstr){
    qDebug() << "/v5/ad_accounts/{ad_account_id}/ad_groups/audience_sizing";
    connect(this, &OAIAdGroupsApiRequest::adGroups_audienceSizing, handler.data(), &OAIAdGroupsApiHandler::adGroups_audienceSizing);

    
    QString ad_account_id;
    fromStringValue(ad_account_idstr, ad_account_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIAdGroupAudienceSizingRequest oaiad_group_audience_sizing_request;
    ::OpenAPI::fromJsonValue(oaiad_group_audience_sizing_request, obj);
    

    Q_EMIT adGroups_audienceSizing(ad_account_id, oaiad_group_audience_sizing_request);
}


void OAIAdGroupsApiRequest::adGroups_createRequest(const QString& ad_account_idstr){
    qDebug() << "/v5/ad_accounts/{ad_account_id}/ad_groups";
    connect(this, &OAIAdGroupsApiRequest::adGroups_create, handler.data(), &OAIAdGroupsApiHandler::adGroups_create);

    
    QString ad_account_id;
    fromStringValue(ad_account_idstr, ad_account_id);
     
    QJsonDocument doc;
    QList<OAIAdGroupCreateRequest> oaiad_group_create_request;
    if(socket->readJson(doc)){
        QJsonArray jsonArray = doc.array();
        foreach(QJsonValue obj, jsonArray) {
            OAIAdGroupCreateRequest o;
            ::OpenAPI::fromJsonValue(o, obj);
            oaiad_group_create_request.append(o);
        }
    }
    

    Q_EMIT adGroups_create(ad_account_id, oaiad_group_create_request);
}


void OAIAdGroupsApiRequest::adGroups_getRequest(const QString& ad_account_idstr, const QString& ad_group_idstr){
    qDebug() << "/v5/ad_accounts/{ad_account_id}/ad_groups/{ad_group_id}";
    connect(this, &OAIAdGroupsApiRequest::adGroups_get, handler.data(), &OAIAdGroupsApiHandler::adGroups_get);

    
    QString ad_account_id;
    fromStringValue(ad_account_idstr, ad_account_id);
        QString ad_group_id;
    fromStringValue(ad_group_idstr, ad_group_id);
    

    Q_EMIT adGroups_get(ad_account_id, ad_group_id);
}


void OAIAdGroupsApiRequest::adGroups_listRequest(const QString& ad_account_idstr){
    qDebug() << "/v5/ad_accounts/{ad_account_id}/ad_groups";
    connect(this, &OAIAdGroupsApiRequest::adGroups_list, handler.data(), &OAIAdGroupsApiHandler::adGroups_list);

    
    QList<QString> campaign_ids;
    if(socket->queryString().keys().contains("campaign_ids")){
        fromStringValue(socket->queryString().values("campaign_ids"), campaign_ids);
    }
    
    QList<QString> ad_group_ids;
    if(socket->queryString().keys().contains("ad_group_ids")){
        fromStringValue(socket->queryString().values("ad_group_ids"), ad_group_ids);
    }
    
    QList<QString> entity_statuses;
    if(socket->queryString().keys().contains("entity_statuses")){
        fromStringValue(socket->queryString().values("entity_statuses"), entity_statuses);
    }
    
    qint32 page_size;
    if(socket->queryString().keys().contains("page_size")){
        fromStringValue(socket->queryString().value("page_size"), page_size);
    }
    
    QString order;
    if(socket->queryString().keys().contains("order")){
        fromStringValue(socket->queryString().value("order"), order);
    }
    
    QString bookmark;
    if(socket->queryString().keys().contains("bookmark")){
        fromStringValue(socket->queryString().value("bookmark"), bookmark);
    }
    
    bool translate_interests_to_names;
    if(socket->queryString().keys().contains("translate_interests_to_names")){
        fromStringValue(socket->queryString().value("translate_interests_to_names"), translate_interests_to_names);
    }
    
    QString ad_account_id;
    fromStringValue(ad_account_idstr, ad_account_id);
    

    Q_EMIT adGroups_list(ad_account_id, campaign_ids, ad_group_ids, entity_statuses, page_size, order, bookmark, translate_interests_to_names);
}


void OAIAdGroupsApiRequest::adGroups_updateRequest(const QString& ad_account_idstr){
    qDebug() << "/v5/ad_accounts/{ad_account_id}/ad_groups";
    connect(this, &OAIAdGroupsApiRequest::adGroups_update, handler.data(), &OAIAdGroupsApiHandler::adGroups_update);

    
    QString ad_account_id;
    fromStringValue(ad_account_idstr, ad_account_id);
     
    QJsonDocument doc;
    QList<OAIAdGroupUpdateRequest> oaiad_group_update_request;
    if(socket->readJson(doc)){
        QJsonArray jsonArray = doc.array();
        foreach(QJsonValue obj, jsonArray) {
            OAIAdGroupUpdateRequest o;
            ::OpenAPI::fromJsonValue(o, obj);
            oaiad_group_update_request.append(o);
        }
    }
    

    Q_EMIT adGroups_update(ad_account_id, oaiad_group_update_request);
}



void OAIAdGroupsApiRequest::adGroupsBidFloor_getResponse(const OAIBidFloor& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIAdGroupsApiRequest::adGroupsTargetingAnalytics_getResponse(const OAIMetricsResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIAdGroupsApiRequest::adGroups_analyticsResponse(const QList<OAIAdGroupsAnalyticsResponse_inner>& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toArray());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIAdGroupsApiRequest::adGroups_audienceSizingResponse(const OAIAdGroupAudienceSizingResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIAdGroupsApiRequest::adGroups_createResponse(const OAIAdGroupArrayResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIAdGroupsApiRequest::adGroups_getResponse(const OAIAdGroupResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIAdGroupsApiRequest::adGroups_listResponse(const OAIAd_groups_list_200_response& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIAdGroupsApiRequest::adGroups_updateResponse(const OAIAdGroupArrayResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAIAdGroupsApiRequest::adGroupsBidFloor_getError(const OAIBidFloor& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIAdGroupsApiRequest::adGroupsTargetingAnalytics_getError(const OAIMetricsResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIAdGroupsApiRequest::adGroups_analyticsError(const QList<OAIAdGroupsAnalyticsResponse_inner>& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toArray());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIAdGroupsApiRequest::adGroups_audienceSizingError(const OAIAdGroupAudienceSizingResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIAdGroupsApiRequest::adGroups_createError(const OAIAdGroupArrayResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIAdGroupsApiRequest::adGroups_getError(const OAIAdGroupResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIAdGroupsApiRequest::adGroups_listError(const OAIAd_groups_list_200_response& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIAdGroupsApiRequest::adGroups_updateError(const OAIAdGroupArrayResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAIAdGroupsApiRequest::sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type); // TODO
    socket->write(res);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIAdGroupsApiRequest::sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type);  // TODO
    socket->write(res->readAll());
    if(socket->isOpen()){
        socket->close();
    }
}

}
