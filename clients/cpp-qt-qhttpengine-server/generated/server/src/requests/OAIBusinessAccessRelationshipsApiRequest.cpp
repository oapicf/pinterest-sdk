/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>
#include <QDebug>

#include "OAIHelpers.h"
#include "OAIBusinessAccessRelationshipsApiRequest.h"

namespace OpenAPI {

OAIBusinessAccessRelationshipsApiRequest::OAIBusinessAccessRelationshipsApiRequest(QHttpEngine::Socket *s, QSharedPointer<OAIBusinessAccessRelationshipsApiHandler> hdl) : QObject(s), socket(s), handler(hdl) {
    auto headers = s->headers();
    for(auto itr = headers.begin(); itr != headers.end(); itr++) {
        requestHeaders.insert(QString(itr.key()), QString(itr.value()));
    }
}

OAIBusinessAccessRelationshipsApiRequest::~OAIBusinessAccessRelationshipsApiRequest(){
    disconnect(this, nullptr, nullptr, nullptr);
    qDebug() << "OAIBusinessAccessRelationshipsApiRequest::~OAIBusinessAccessRelationshipsApiRequest()";
}

QMap<QString, QString>
OAIBusinessAccessRelationshipsApiRequest::getRequestHeaders() const {
    return requestHeaders;
}

void OAIBusinessAccessRelationshipsApiRequest::setResponseHeaders(const QMultiMap<QString, QString>& headers){
    for(auto itr = headers.begin(); itr != headers.end(); ++itr) {
        responseHeaders.insert(itr.key(), itr.value());
    }
}


QHttpEngine::Socket* OAIBusinessAccessRelationshipsApiRequest::getRawSocket(){
    return socket;
}


void OAIBusinessAccessRelationshipsApiRequest::deleteBusinessMembershipRequest(const QString& business_idstr){
    qDebug() << "/v5/businesses/{business_id}/members";
    connect(this, &OAIBusinessAccessRelationshipsApiRequest::deleteBusinessMembership, handler.data(), &OAIBusinessAccessRelationshipsApiHandler::deleteBusinessMembership);

    
    QString business_id;
    fromStringValue(business_idstr, business_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIMembersToDeleteBody oai_members_to_delete_body;
    ::OpenAPI::fromJsonValue(oai_members_to_delete_body, obj);
    

    Q_EMIT deleteBusinessMembership(business_id, oai_members_to_delete_body);
}


void OAIBusinessAccessRelationshipsApiRequest::deleteBusinessPartnersRequest(const QString& business_idstr){
    qDebug() << "/v5/businesses/{business_id}/partners";
    connect(this, &OAIBusinessAccessRelationshipsApiRequest::deleteBusinessPartners, handler.data(), &OAIBusinessAccessRelationshipsApiHandler::deleteBusinessPartners);

    
    QString business_id;
    fromStringValue(business_idstr, business_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIDeletePartnersRequest oai_delete_partners_request;
    ::OpenAPI::fromJsonValue(oai_delete_partners_request, obj);
    

    Q_EMIT deleteBusinessPartners(business_id, oai_delete_partners_request);
}


void OAIBusinessAccessRelationshipsApiRequest::get_businessEmployersRequest(){
    qDebug() << "/v5/businesses/employers";
    connect(this, &OAIBusinessAccessRelationshipsApiRequest::get_businessEmployers, handler.data(), &OAIBusinessAccessRelationshipsApiHandler::get_businessEmployers);

    
    qint32 page_size;
    if(socket->queryString().keys().contains("page_size")){
        fromStringValue(socket->queryString().value("page_size"), page_size);
    }
    
    QString bookmark;
    if(socket->queryString().keys().contains("bookmark")){
        fromStringValue(socket->queryString().value("bookmark"), bookmark);
    }
    


    Q_EMIT get_businessEmployers(page_size, bookmark);
}


void OAIBusinessAccessRelationshipsApiRequest::get_businessMembersRequest(const QString& business_idstr){
    qDebug() << "/v5/businesses/{business_id}/members";
    connect(this, &OAIBusinessAccessRelationshipsApiRequest::get_businessMembers, handler.data(), &OAIBusinessAccessRelationshipsApiHandler::get_businessMembers);

    
    bool assets_summary;
    if(socket->queryString().keys().contains("assets_summary")){
        fromStringValue(socket->queryString().value("assets_summary"), assets_summary);
    }
    
    QList<OAIMemberBusinessRole> business_roles;
    if(socket->queryString().keys().contains("business_roles")){
        fromStringValue(socket->queryString().values("business_roles"), business_roles);
    }
    
    QString member_ids;
    if(socket->queryString().keys().contains("member_ids")){
        fromStringValue(socket->queryString().value("member_ids"), member_ids);
    }
    
    qint32 start_index;
    if(socket->queryString().keys().contains("start_index")){
        fromStringValue(socket->queryString().value("start_index"), start_index);
    }
    
    QString bookmark;
    if(socket->queryString().keys().contains("bookmark")){
        fromStringValue(socket->queryString().value("bookmark"), bookmark);
    }
    
    qint32 page_size;
    if(socket->queryString().keys().contains("page_size")){
        fromStringValue(socket->queryString().value("page_size"), page_size);
    }
    
    QString business_id;
    fromStringValue(business_idstr, business_id);
    

    Q_EMIT get_businessMembers(business_id, assets_summary, business_roles, member_ids, start_index, bookmark, page_size);
}


void OAIBusinessAccessRelationshipsApiRequest::get_businessPartnersRequest(const QString& business_idstr){
    qDebug() << "/v5/businesses/{business_id}/partners";
    connect(this, &OAIBusinessAccessRelationshipsApiRequest::get_businessPartners, handler.data(), &OAIBusinessAccessRelationshipsApiHandler::get_businessPartners);

    
    bool assets_summary;
    if(socket->queryString().keys().contains("assets_summary")){
        fromStringValue(socket->queryString().value("assets_summary"), assets_summary);
    }
    
    OAIPartnerType partner_type;
    if(socket->queryString().keys().contains("partner_type")){
        fromStringValue(socket->queryString().value("partner_type"), partner_type);
    }
    
    QString partner_ids;
    if(socket->queryString().keys().contains("partner_ids")){
        fromStringValue(socket->queryString().value("partner_ids"), partner_ids);
    }
    
    qint32 start_index;
    if(socket->queryString().keys().contains("start_index")){
        fromStringValue(socket->queryString().value("start_index"), start_index);
    }
    
    qint32 page_size;
    if(socket->queryString().keys().contains("page_size")){
        fromStringValue(socket->queryString().value("page_size"), page_size);
    }
    
    QString bookmark;
    if(socket->queryString().keys().contains("bookmark")){
        fromStringValue(socket->queryString().value("bookmark"), bookmark);
    }
    
    QString business_id;
    fromStringValue(business_idstr, business_id);
    

    Q_EMIT get_businessPartners(business_id, assets_summary, partner_type, partner_ids, start_index, page_size, bookmark);
}


void OAIBusinessAccessRelationshipsApiRequest::update_businessMembershipsRequest(const QString& business_idstr){
    qDebug() << "/v5/businesses/{business_id}/members";
    connect(this, &OAIBusinessAccessRelationshipsApiRequest::update_businessMemberships, handler.data(), &OAIBusinessAccessRelationshipsApiHandler::update_businessMemberships);

    
    QString business_id;
    fromStringValue(business_idstr, business_id);
     
    QJsonDocument doc;
    QList<OAIUpdateMemberBusinessRoleBody> oai_update_member_business_role_body;
    if(socket->readJson(doc)){
        QJsonArray jsonArray = doc.array();
        foreach(QJsonValue obj, jsonArray) {
            OAIUpdateMemberBusinessRoleBody o;
            ::OpenAPI::fromJsonValue(o, obj);
            oai_update_member_business_role_body.append(o);
        }
    }
    

    Q_EMIT update_businessMemberships(business_id, oai_update_member_business_role_body);
}



void OAIBusinessAccessRelationshipsApiRequest::deleteBusinessMembershipResponse(const OAIDeletedMembersResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBusinessAccessRelationshipsApiRequest::deleteBusinessPartnersResponse(const OAIDeletePartnersResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBusinessAccessRelationshipsApiRequest::get_businessEmployersResponse(const OAIGet_business_employers_200_response& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBusinessAccessRelationshipsApiRequest::get_businessMembersResponse(const OAIGet_business_members_200_response& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBusinessAccessRelationshipsApiRequest::get_businessPartnersResponse(const OAIGet_business_partners_200_response& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBusinessAccessRelationshipsApiRequest::update_businessMembershipsResponse(const OAIUpdateMemberResultsResponseArray& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAIBusinessAccessRelationshipsApiRequest::deleteBusinessMembershipError(const OAIDeletedMembersResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBusinessAccessRelationshipsApiRequest::deleteBusinessPartnersError(const OAIDeletePartnersResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBusinessAccessRelationshipsApiRequest::get_businessEmployersError(const OAIGet_business_employers_200_response& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBusinessAccessRelationshipsApiRequest::get_businessMembersError(const OAIGet_business_members_200_response& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBusinessAccessRelationshipsApiRequest::get_businessPartnersError(const OAIGet_business_partners_200_response& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBusinessAccessRelationshipsApiRequest::update_businessMembershipsError(const OAIUpdateMemberResultsResponseArray& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAIBusinessAccessRelationshipsApiRequest::sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type); // TODO
    socket->write(res);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBusinessAccessRelationshipsApiRequest::sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type);  // TODO
    socket->write(res->readAll());
    if(socket->isOpen()){
        socket->close();
    }
}

}
