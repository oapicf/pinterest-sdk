/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>
#include <QDebug>

#include "OAIHelpers.h"
#include "OAIBillingApiRequest.h"

namespace OpenAPI {

OAIBillingApiRequest::OAIBillingApiRequest(QHttpEngine::Socket *s, QSharedPointer<OAIBillingApiHandler> hdl) : QObject(s), socket(s), handler(hdl) {
    auto headers = s->headers();
    for(auto itr = headers.begin(); itr != headers.end(); itr++) {
        requestHeaders.insert(QString(itr.key()), QString(itr.value()));
    }
}

OAIBillingApiRequest::~OAIBillingApiRequest(){
    disconnect(this, nullptr, nullptr, nullptr);
    qDebug() << "OAIBillingApiRequest::~OAIBillingApiRequest()";
}

QMap<QString, QString>
OAIBillingApiRequest::getRequestHeaders() const {
    return requestHeaders;
}

void OAIBillingApiRequest::setResponseHeaders(const QMultiMap<QString, QString>& headers){
    for(auto itr = headers.begin(); itr != headers.end(); ++itr) {
        responseHeaders.insert(itr.key(), itr.value());
    }
}


QHttpEngine::Socket* OAIBillingApiRequest::getRawSocket(){
    return socket;
}


void OAIBillingApiRequest::adsCredit_redeemRequest(const QString& ad_account_idstr){
    qDebug() << "/v5/ad_accounts/{ad_account_id}/ads_credit/redeem";
    connect(this, &OAIBillingApiRequest::adsCredit_redeem, handler.data(), &OAIBillingApiHandler::adsCredit_redeem);

    
    QString ad_account_id;
    fromStringValue(ad_account_idstr, ad_account_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIAdsCreditRedeemRequest oai_ads_credit_redeem_request;
    ::OpenAPI::fromJsonValue(oai_ads_credit_redeem_request, obj);
    

    Q_EMIT adsCredit_redeem(ad_account_id, oai_ads_credit_redeem_request);
}


void OAIBillingApiRequest::adsCreditsDiscounts_getRequest(const QString& ad_account_idstr){
    qDebug() << "/v5/ad_accounts/{ad_account_id}/ads_credit/discounts";
    connect(this, &OAIBillingApiRequest::adsCreditsDiscounts_get, handler.data(), &OAIBillingApiHandler::adsCreditsDiscounts_get);

    
    QString bookmark;
    if(socket->queryString().keys().contains("bookmark")){
        fromStringValue(socket->queryString().value("bookmark"), bookmark);
    }
    
    qint32 page_size;
    if(socket->queryString().keys().contains("page_size")){
        fromStringValue(socket->queryString().value("page_size"), page_size);
    }
    
    QString ad_account_id;
    fromStringValue(ad_account_idstr, ad_account_id);
    

    Q_EMIT adsCreditsDiscounts_get(ad_account_id, bookmark, page_size);
}


void OAIBillingApiRequest::billingProfiles_getRequest(const QString& ad_account_idstr){
    qDebug() << "/v5/ad_accounts/{ad_account_id}/billing_profiles";
    connect(this, &OAIBillingApiRequest::billingProfiles_get, handler.data(), &OAIBillingApiHandler::billingProfiles_get);

    
    bool is_active;
    if(socket->queryString().keys().contains("is_active")){
        fromStringValue(socket->queryString().value("is_active"), is_active);
    }
    
    QString bookmark;
    if(socket->queryString().keys().contains("bookmark")){
        fromStringValue(socket->queryString().value("bookmark"), bookmark);
    }
    
    qint32 page_size;
    if(socket->queryString().keys().contains("page_size")){
        fromStringValue(socket->queryString().value("page_size"), page_size);
    }
    
    QString ad_account_id;
    fromStringValue(ad_account_idstr, ad_account_id);
    

    Q_EMIT billingProfiles_get(ad_account_id, is_active, bookmark, page_size);
}


void OAIBillingApiRequest::ssioAccounts_getRequest(const QString& ad_account_idstr){
    qDebug() << "/v5/ad_accounts/{ad_account_id}/ssio/accounts";
    connect(this, &OAIBillingApiRequest::ssioAccounts_get, handler.data(), &OAIBillingApiHandler::ssioAccounts_get);

    
    QString ad_account_id;
    fromStringValue(ad_account_idstr, ad_account_id);
    

    Q_EMIT ssioAccounts_get(ad_account_id);
}


void OAIBillingApiRequest::ssioInsertionOrder_createRequest(const QString& ad_account_idstr){
    qDebug() << "/v5/ad_accounts/{ad_account_id}/ssio/insertion_orders";
    connect(this, &OAIBillingApiRequest::ssioInsertionOrder_create, handler.data(), &OAIBillingApiHandler::ssioInsertionOrder_create);

    
    QString ad_account_id;
    fromStringValue(ad_account_idstr, ad_account_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAISSIOCreateInsertionOrderRequest oaissio_create_insertion_order_request;
    ::OpenAPI::fromJsonValue(oaissio_create_insertion_order_request, obj);
    

    Q_EMIT ssioInsertionOrder_create(ad_account_id, oaissio_create_insertion_order_request);
}


void OAIBillingApiRequest::ssioInsertionOrder_editRequest(const QString& ad_account_idstr){
    qDebug() << "/v5/ad_accounts/{ad_account_id}/ssio/insertion_orders";
    connect(this, &OAIBillingApiRequest::ssioInsertionOrder_edit, handler.data(), &OAIBillingApiHandler::ssioInsertionOrder_edit);

    
    QString ad_account_id;
    fromStringValue(ad_account_idstr, ad_account_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAISSIOEditInsertionOrderRequest oaissio_edit_insertion_order_request;
    ::OpenAPI::fromJsonValue(oaissio_edit_insertion_order_request, obj);
    

    Q_EMIT ssioInsertionOrder_edit(ad_account_id, oaissio_edit_insertion_order_request);
}


void OAIBillingApiRequest::ssioInsertionOrdersStatus_getByAdAccountRequest(const QString& ad_account_idstr){
    qDebug() << "/v5/ad_accounts/{ad_account_id}/ssio/insertion_orders/status";
    connect(this, &OAIBillingApiRequest::ssioInsertionOrdersStatus_getByAdAccount, handler.data(), &OAIBillingApiHandler::ssioInsertionOrdersStatus_getByAdAccount);

    
    QString bookmark;
    if(socket->queryString().keys().contains("bookmark")){
        fromStringValue(socket->queryString().value("bookmark"), bookmark);
    }
    
    qint32 page_size;
    if(socket->queryString().keys().contains("page_size")){
        fromStringValue(socket->queryString().value("page_size"), page_size);
    }
    
    QString ad_account_id;
    fromStringValue(ad_account_idstr, ad_account_id);
    

    Q_EMIT ssioInsertionOrdersStatus_getByAdAccount(ad_account_id, bookmark, page_size);
}


void OAIBillingApiRequest::ssioInsertionOrdersStatus_getByPinOrderIdRequest(const QString& ad_account_idstr, const QString& pin_order_idstr){
    qDebug() << "/v5/ad_accounts/{ad_account_id}/ssio/insertion_orders/{pin_order_id}/status";
    connect(this, &OAIBillingApiRequest::ssioInsertionOrdersStatus_getByPinOrderId, handler.data(), &OAIBillingApiHandler::ssioInsertionOrdersStatus_getByPinOrderId);

    
    QString ad_account_id;
    fromStringValue(ad_account_idstr, ad_account_id);
        QString pin_order_id;
    fromStringValue(pin_order_idstr, pin_order_id);
    

    Q_EMIT ssioInsertionOrdersStatus_getByPinOrderId(ad_account_id, pin_order_id);
}


void OAIBillingApiRequest::ssioOrderLines_getByAdAccountRequest(const QString& ad_account_idstr){
    qDebug() << "/v5/ad_accounts/{ad_account_id}/ssio/order_lines";
    connect(this, &OAIBillingApiRequest::ssioOrderLines_getByAdAccount, handler.data(), &OAIBillingApiHandler::ssioOrderLines_getByAdAccount);

    
    QString bookmark;
    if(socket->queryString().keys().contains("bookmark")){
        fromStringValue(socket->queryString().value("bookmark"), bookmark);
    }
    
    qint32 page_size;
    if(socket->queryString().keys().contains("page_size")){
        fromStringValue(socket->queryString().value("page_size"), page_size);
    }
    
    QString pin_order_id;
    if(socket->queryString().keys().contains("pin_order_id")){
        fromStringValue(socket->queryString().value("pin_order_id"), pin_order_id);
    }
    
    QString ad_account_id;
    fromStringValue(ad_account_idstr, ad_account_id);
    

    Q_EMIT ssioOrderLines_getByAdAccount(ad_account_id, bookmark, page_size, pin_order_id);
}



void OAIBillingApiRequest::adsCredit_redeemResponse(const OAIAdsCreditRedeemResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBillingApiRequest::adsCreditsDiscounts_getResponse(const OAIAds_credits_discounts_get_200_response& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBillingApiRequest::billingProfiles_getResponse(const OAIBilling_profiles_get_200_response& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBillingApiRequest::ssioAccounts_getResponse(const OAISSIOAccountResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBillingApiRequest::ssioInsertionOrder_createResponse(const OAISSIOCreateInsertionOrderResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBillingApiRequest::ssioInsertionOrder_editResponse(const OAISSIOEditInsertionOrderResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBillingApiRequest::ssioInsertionOrdersStatus_getByAdAccountResponse(const OAISsio_insertion_orders_status_get_by_ad_account_200_response& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBillingApiRequest::ssioInsertionOrdersStatus_getByPinOrderIdResponse(const OAISSIOInsertionOrderStatusResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBillingApiRequest::ssioOrderLines_getByAdAccountResponse(const OAISsio_order_lines_get_by_ad_account_200_response& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAIBillingApiRequest::adsCredit_redeemError(const OAIAdsCreditRedeemResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBillingApiRequest::adsCreditsDiscounts_getError(const OAIAds_credits_discounts_get_200_response& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBillingApiRequest::billingProfiles_getError(const OAIBilling_profiles_get_200_response& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBillingApiRequest::ssioAccounts_getError(const OAISSIOAccountResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBillingApiRequest::ssioInsertionOrder_createError(const OAISSIOCreateInsertionOrderResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBillingApiRequest::ssioInsertionOrder_editError(const OAISSIOEditInsertionOrderResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBillingApiRequest::ssioInsertionOrdersStatus_getByAdAccountError(const OAISsio_insertion_orders_status_get_by_ad_account_200_response& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBillingApiRequest::ssioInsertionOrdersStatus_getByPinOrderIdError(const OAISSIOInsertionOrderStatusResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBillingApiRequest::ssioOrderLines_getByAdAccountError(const OAISsio_order_lines_get_by_ad_account_200_response& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAIBillingApiRequest::sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type); // TODO
    socket->write(res);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBillingApiRequest::sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type);  // TODO
    socket->write(res->readAll());
    if(socket->isOpen()){
        socket->close();
    }
}

}
