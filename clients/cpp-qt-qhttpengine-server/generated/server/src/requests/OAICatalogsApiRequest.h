/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICatalogsApiRequest_H
#define OAI_OAICatalogsApiRequest_H

#include <QObject>
#include <QStringList>
#include <QMultiMap>
#include <QNetworkReply>
#include <QSharedPointer>

#include <qhttpengine/socket.h>
#include "OAICatalog.h"
#include "OAICatalogsCreateReportResponse.h"
#include "OAICatalogsCreateRequest.h"
#include "OAICatalogsFeed.h"
#include "OAICatalogsFeedIngestion.h"
#include "OAICatalogsItemValidationIssue.h"
#include "OAICatalogsItems.h"
#include "OAICatalogsItemsBatch.h"
#include "OAICatalogsItemsFilters.h"
#include "OAICatalogsItemsRequest.h"
#include "OAICatalogsListProductsByFilterRequest.h"
#include "OAICatalogsProductGroupProductCountsVertical.h"
#include "OAICatalogsReport.h"
#include "OAICatalogsReportParameters.h"
#include "OAICatalogsVerticalProductGroup.h"
#include "OAICatalogs_list_200_response.h"
#include "OAICatalogs_product_group_pins_list_200_response.h"
#include "OAICatalogs_product_groups_list_200_response.h"
#include "OAICatalogs_product_groups_update_request.h"
#include "OAIError.h"
#include "OAIFeed_processing_results_list_200_response.h"
#include "OAIFeeds_create_request.h"
#include "OAIFeeds_list_200_response.h"
#include "OAIFeeds_update_request.h"
#include "OAIItems_batch_post_request.h"
#include "OAIItems_issues_list_200_response.h"
#include "OAIMultiple_product_groups_inner.h"
#include "OAIReports_stats_200_response.h"
#include <QList>
#include <QString>
#include "OAICatalogsApiHandler.h"

namespace OpenAPI {

class OAICatalogsApiRequest : public QObject
{
    Q_OBJECT

public:
    OAICatalogsApiRequest(QHttpEngine::Socket *s, QSharedPointer<OAICatalogsApiHandler> handler);
    virtual ~OAICatalogsApiRequest();

    void catalogsProductGroupPins_listRequest(const QString& product_group_id);
    void catalogsProductGroups_createRequest();
    void catalogsProductGroups_createManyRequest();
    void catalogsProductGroups_deleteRequest(const QString& product_group_id);
    void catalogsProductGroups_deleteManyRequest();
    void catalogsProductGroups_getRequest(const QString& product_group_id);
    void catalogsProductGroups_listRequest();
    void catalogsProductGroups_productCountsGetRequest(const QString& product_group_id);
    void catalogsProductGroups_updateRequest(const QString& product_group_id);
    void catalogs_createRequest();
    void catalogs_listRequest();
    void feedProcessingResults_listRequest(const QString& feed_id);
    void feeds_createRequest();
    void feeds_deleteRequest(const QString& feed_id);
    void feeds_getRequest(const QString& feed_id);
    void feeds_ingestRequest(const QString& feed_id);
    void feeds_listRequest();
    void feeds_updateRequest(const QString& feed_id);
    void itemsBatch_getRequest(const QString& batch_id);
    void itemsBatch_postRequest();
    void itemsIssues_listRequest(const QString& processing_result_id);
    void items_getRequest();
    void items_postRequest();
    void productsByProductGroupFilter_listRequest();
    void reports_createRequest();
    void reports_getRequest();
    void reports_statsRequest();
    

    void catalogsProductGroupPins_listResponse(const OAICatalogs_product_group_pins_list_200_response& res);
    void catalogsProductGroups_createResponse(const OAICatalogsVerticalProductGroup& res);
    void catalogsProductGroups_createManyResponse(const QList<QString>& res);
    void catalogsProductGroups_deleteResponse();
    void catalogsProductGroups_deleteManyResponse();
    void catalogsProductGroups_getResponse(const OAICatalogsVerticalProductGroup& res);
    void catalogsProductGroups_listResponse(const OAICatalogs_product_groups_list_200_response& res);
    void catalogsProductGroups_productCountsGetResponse(const OAICatalogsProductGroupProductCountsVertical& res);
    void catalogsProductGroups_updateResponse(const OAICatalogsVerticalProductGroup& res);
    void catalogs_createResponse(const OAICatalog& res);
    void catalogs_listResponse(const OAICatalogs_list_200_response& res);
    void feedProcessingResults_listResponse(const OAIFeed_processing_results_list_200_response& res);
    void feeds_createResponse(const OAICatalogsFeed& res);
    void feeds_deleteResponse();
    void feeds_getResponse(const OAICatalogsFeed& res);
    void feeds_ingestResponse(const OAICatalogsFeedIngestion& res);
    void feeds_listResponse(const OAIFeeds_list_200_response& res);
    void feeds_updateResponse(const OAICatalogsFeed& res);
    void itemsBatch_getResponse(const OAICatalogsItemsBatch& res);
    void itemsBatch_postResponse(const OAICatalogsItemsBatch& res);
    void itemsIssues_listResponse(const OAIItems_issues_list_200_response& res);
    void items_getResponse(const OAICatalogsItems& res);
    void items_postResponse(const OAICatalogsItems& res);
    void productsByProductGroupFilter_listResponse(const OAICatalogs_product_group_pins_list_200_response& res);
    void reports_createResponse(const OAICatalogsCreateReportResponse& res);
    void reports_getResponse(const OAICatalogsReport& res);
    void reports_statsResponse(const OAIReports_stats_200_response& res);
    

    void catalogsProductGroupPins_listError(const OAICatalogs_product_group_pins_list_200_response& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void catalogsProductGroups_createError(const OAICatalogsVerticalProductGroup& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void catalogsProductGroups_createManyError(const QList<QString>& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void catalogsProductGroups_deleteError(QNetworkReply::NetworkError error_type, QString& error_str);
    void catalogsProductGroups_deleteManyError(QNetworkReply::NetworkError error_type, QString& error_str);
    void catalogsProductGroups_getError(const OAICatalogsVerticalProductGroup& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void catalogsProductGroups_listError(const OAICatalogs_product_groups_list_200_response& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void catalogsProductGroups_productCountsGetError(const OAICatalogsProductGroupProductCountsVertical& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void catalogsProductGroups_updateError(const OAICatalogsVerticalProductGroup& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void catalogs_createError(const OAICatalog& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void catalogs_listError(const OAICatalogs_list_200_response& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void feedProcessingResults_listError(const OAIFeed_processing_results_list_200_response& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void feeds_createError(const OAICatalogsFeed& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void feeds_deleteError(QNetworkReply::NetworkError error_type, QString& error_str);
    void feeds_getError(const OAICatalogsFeed& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void feeds_ingestError(const OAICatalogsFeedIngestion& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void feeds_listError(const OAIFeeds_list_200_response& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void feeds_updateError(const OAICatalogsFeed& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void itemsBatch_getError(const OAICatalogsItemsBatch& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void itemsBatch_postError(const OAICatalogsItemsBatch& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void itemsIssues_listError(const OAIItems_issues_list_200_response& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void items_getError(const OAICatalogsItems& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void items_postError(const OAICatalogsItems& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void productsByProductGroupFilter_listError(const OAICatalogs_product_group_pins_list_200_response& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void reports_createError(const OAICatalogsCreateReportResponse& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void reports_getError(const OAICatalogsReport& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void reports_statsError(const OAIReports_stats_200_response& res, QNetworkReply::NetworkError error_type, QString& error_str);
    

    void sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type);

    void sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type);

    QMap<QString, QString> getRequestHeaders() const;

    QHttpEngine::Socket* getRawSocket();

    void setResponseHeaders(const QMultiMap<QString,QString>& headers);

Q_SIGNALS:
    void catalogsProductGroupPins_list(QString product_group_id, QString bookmark, qint32 page_size, QString ad_account_id, bool pin_metrics);
    void catalogsProductGroups_create(OAIMultiple_product_groups_inner oai_multiple_product_groups_inner, QString ad_account_id);
    void catalogsProductGroups_createMany(QList<OAIMultiple_product_groups_inner> oai_multiple_product_groups_inner, QString ad_account_id);
    void catalogsProductGroups_delete(QString product_group_id, QString ad_account_id);
    void catalogsProductGroups_deleteMany(QList<qint32> id, QString ad_account_id);
    void catalogsProductGroups_get(QString product_group_id, QString ad_account_id);
    void catalogsProductGroups_list(QList<qint32> id, QString feed_id, QString catalog_id, QString bookmark, qint32 page_size, QString ad_account_id);
    void catalogsProductGroups_productCountsGet(QString product_group_id, QString ad_account_id);
    void catalogsProductGroups_update(QString product_group_id, OAICatalogs_product_groups_update_request oai_catalogs_product_groups_update_request, QString ad_account_id);
    void catalogs_create(OAICatalogsCreateRequest oai_catalogs_create_request, QString ad_account_id);
    void catalogs_list(QString bookmark, qint32 page_size, QString ad_account_id);
    void feedProcessingResults_list(QString feed_id, QString bookmark, qint32 page_size, QString ad_account_id);
    void feeds_create(OAIFeeds_create_request oai_feeds_create_request, QString ad_account_id);
    void feeds_delete(QString feed_id, QString ad_account_id);
    void feeds_get(QString feed_id, QString ad_account_id);
    void feeds_ingest(QString feed_id, QString ad_account_id);
    void feeds_list(QString bookmark, qint32 page_size, QString catalog_id, QString ad_account_id);
    void feeds_update(QString feed_id, OAIFeeds_update_request oai_feeds_update_request, QString ad_account_id);
    void itemsBatch_get(QString batch_id, QString ad_account_id);
    void itemsBatch_post(OAIItems_batch_post_request oai_items_batch_post_request, QString ad_account_id);
    void itemsIssues_list(QString processing_result_id, QString bookmark, qint32 page_size, QList<qint32> item_numbers, OAICatalogsItemValidationIssue item_validation_issue, QString ad_account_id);
    void items_get(QString country, QString language, QString ad_account_id, QList<QString> item_ids, OAICatalogsItemsFilters filters);
    void items_post(OAICatalogsItemsRequest oai_catalogs_items_request, QString ad_account_id);
    void productsByProductGroupFilter_list(OAICatalogsListProductsByFilterRequest oai_catalogs_list_products_by_filter_request, QString bookmark, qint32 page_size, QString ad_account_id, bool pin_metrics);
    void reports_create(OAICatalogsReportParameters oai_catalogs_report_parameters, QString ad_account_id);
    void reports_get(QString token, QString ad_account_id);
    void reports_stats(OAICatalogsReportParameters parameters, QString ad_account_id, qint32 page_size, QString bookmark);
    

private:
    QMap<QString, QString> requestHeaders;
    QMap<QString, QString> responseHeaders;
    QHttpEngine::Socket  *socket;
    QSharedPointer<OAICatalogsApiHandler> handler;

    inline void setSocketResponseHeaders(){
        QHttpEngine::Socket::HeaderMap resHeaders;
        for(auto itr = responseHeaders.begin(); itr != responseHeaders.end(); ++itr) {
            resHeaders.insert(itr.key().toUtf8(), itr.value().toUtf8());
        }
        socket->setHeaders(resHeaders);
    }
};

}

#endif // OAI_OAICatalogsApiRequest_H
