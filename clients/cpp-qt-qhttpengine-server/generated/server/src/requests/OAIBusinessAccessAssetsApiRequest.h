/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIBusinessAccessAssetsApiRequest_H
#define OAI_OAIBusinessAccessAssetsApiRequest_H

#include <QObject>
#include <QStringList>
#include <QMultiMap>
#include <QNetworkReply>
#include <QSharedPointer>

#include <qhttpengine/socket.h>
#include "OAIBusiness_asset_members_get_200_response.h"
#include "OAIBusiness_asset_partners_get_200_response.h"
#include "OAIBusiness_assets_get_200_response.h"
#include "OAIBusiness_member_assets_get_200_response.h"
#include "OAIBusiness_members_asset_access_delete_request.h"
#include "OAIBusiness_partner_asset_access_get_200_response.h"
#include "OAICreateAssetGroupBody.h"
#include "OAICreateAssetGroupResponse.h"
#include "OAIDeleteAssetGroupBody.h"
#include "OAIDeleteAssetGroupResponse.h"
#include "OAIDeleteMemberAccessResultsResponseArray.h"
#include "OAIDeletePartnerAssetAccessBody.h"
#include "OAIDeletePartnerAssetsResultsResponseArray.h"
#include "OAIError.h"
#include "OAIPartnerType.h"
#include "OAIPermissionsWithOwner.h"
#include "OAIUpdateAssetGroupBody.h"
#include "OAIUpdateAssetGroupResponse.h"
#include "OAIUpdateMemberAssetAccessBody.h"
#include "OAIUpdateMemberAssetsResultsResponseArray.h"
#include "OAIUpdatePartnerAssetAccessBody.h"
#include "OAIUpdatePartnerAssetsResultsResponseArray.h"
#include <QList>
#include <QString>
#include "OAIBusinessAccessAssetsApiHandler.h"

namespace OpenAPI {

class OAIBusinessAccessAssetsApiRequest : public QObject
{
    Q_OBJECT

public:
    OAIBusinessAccessAssetsApiRequest(QHttpEngine::Socket *s, QSharedPointer<OAIBusinessAccessAssetsApiHandler> handler);
    virtual ~OAIBusinessAccessAssetsApiRequest();

    void assetGroup_createRequest(const QString& business_id);
    void assetGroup_deleteRequest(const QString& business_id);
    void assetGroup_updateRequest(const QString& business_id);
    void businessAssetMembers_getRequest(const QString& business_id, const QString& asset_id);
    void businessAssetPartners_getRequest(const QString& business_id, const QString& asset_id);
    void businessAssets_getRequest(const QString& business_id);
    void businessMemberAssets_getRequest(const QString& business_id, const QString& member_id);
    void businessMembersAssetAccess_deleteRequest(const QString& business_id);
    void businessMembersAssetAccess_updateRequest(const QString& business_id);
    void businessPartnerAssetAccess_getRequest(const QString& business_id, const QString& partner_id);
    void deletePartnerAssetAccessHandlerImplRequest(const QString& business_id);
    void updatePartnerAssetAccessHandlerImplRequest(const QString& business_id);
    

    void assetGroup_createResponse(const OAICreateAssetGroupResponse& res);
    void assetGroup_deleteResponse(const OAIDeleteAssetGroupResponse& res);
    void assetGroup_updateResponse(const OAIUpdateAssetGroupResponse& res);
    void businessAssetMembers_getResponse(const OAIBusiness_asset_members_get_200_response& res);
    void businessAssetPartners_getResponse(const OAIBusiness_asset_partners_get_200_response& res);
    void businessAssets_getResponse(const OAIBusiness_assets_get_200_response& res);
    void businessMemberAssets_getResponse(const OAIBusiness_member_assets_get_200_response& res);
    void businessMembersAssetAccess_deleteResponse(const OAIDeleteMemberAccessResultsResponseArray& res);
    void businessMembersAssetAccess_updateResponse(const OAIUpdateMemberAssetsResultsResponseArray& res);
    void businessPartnerAssetAccess_getResponse(const OAIBusiness_partner_asset_access_get_200_response& res);
    void deletePartnerAssetAccessHandlerImplResponse(const OAIDeletePartnerAssetsResultsResponseArray& res);
    void updatePartnerAssetAccessHandlerImplResponse(const OAIUpdatePartnerAssetsResultsResponseArray& res);
    

    void assetGroup_createError(const OAICreateAssetGroupResponse& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void assetGroup_deleteError(const OAIDeleteAssetGroupResponse& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void assetGroup_updateError(const OAIUpdateAssetGroupResponse& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void businessAssetMembers_getError(const OAIBusiness_asset_members_get_200_response& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void businessAssetPartners_getError(const OAIBusiness_asset_partners_get_200_response& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void businessAssets_getError(const OAIBusiness_assets_get_200_response& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void businessMemberAssets_getError(const OAIBusiness_member_assets_get_200_response& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void businessMembersAssetAccess_deleteError(const OAIDeleteMemberAccessResultsResponseArray& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void businessMembersAssetAccess_updateError(const OAIUpdateMemberAssetsResultsResponseArray& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void businessPartnerAssetAccess_getError(const OAIBusiness_partner_asset_access_get_200_response& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void deletePartnerAssetAccessHandlerImplError(const OAIDeletePartnerAssetsResultsResponseArray& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void updatePartnerAssetAccessHandlerImplError(const OAIUpdatePartnerAssetsResultsResponseArray& res, QNetworkReply::NetworkError error_type, QString& error_str);
    

    void sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type);

    void sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type);

    QMap<QString, QString> getRequestHeaders() const;

    QHttpEngine::Socket* getRawSocket();

    void setResponseHeaders(const QMultiMap<QString,QString>& headers);

Q_SIGNALS:
    void assetGroup_create(QString business_id, OAICreateAssetGroupBody oai_create_asset_group_body);
    void assetGroup_delete(QString business_id, OAIDeleteAssetGroupBody oai_delete_asset_group_body);
    void assetGroup_update(QString business_id, OAIUpdateAssetGroupBody oai_update_asset_group_body);
    void businessAssetMembers_get(QString business_id, QString asset_id, QString bookmark, qint32 page_size, qint32 start_index);
    void businessAssetPartners_get(QString business_id, QString asset_id, qint32 start_index, QString bookmark, qint32 page_size);
    void businessAssets_get(QString business_id, QList<OAIPermissionsWithOwner> permissions, QString child_asset_id, QString asset_group_id, QString asset_type, qint32 start_index, QString bookmark, qint32 page_size);
    void businessMemberAssets_get(QString business_id, QString member_id, QString asset_type, qint32 start_index, QString bookmark, qint32 page_size);
    void businessMembersAssetAccess_delete(QString business_id, OAIBusiness_members_asset_access_delete_request oai_business_members_asset_access_delete_request);
    void businessMembersAssetAccess_update(QString business_id, OAIUpdateMemberAssetAccessBody oai_update_member_asset_access_body);
    void businessPartnerAssetAccess_get(QString business_id, QString partner_id, OAIPartnerType partner_type, QString asset_type, qint32 start_index, qint32 page_size, QString bookmark);
    void deletePartnerAssetAccessHandlerImpl(QString business_id, OAIDeletePartnerAssetAccessBody oai_delete_partner_asset_access_body);
    void updatePartnerAssetAccessHandlerImpl(QString business_id, OAIUpdatePartnerAssetAccessBody oai_update_partner_asset_access_body);
    

private:
    QMap<QString, QString> requestHeaders;
    QMap<QString, QString> responseHeaders;
    QHttpEngine::Socket  *socket;
    QSharedPointer<OAIBusinessAccessAssetsApiHandler> handler;

    inline void setSocketResponseHeaders(){
        QHttpEngine::Socket::HeaderMap resHeaders;
        for(auto itr = responseHeaders.begin(); itr != responseHeaders.end(); ++itr) {
            resHeaders.insert(itr.key().toUtf8(), itr.value().toUtf8());
        }
        socket->setHeaders(resHeaders);
    }
};

}

#endif // OAI_OAIBusinessAccessAssetsApiRequest_H
