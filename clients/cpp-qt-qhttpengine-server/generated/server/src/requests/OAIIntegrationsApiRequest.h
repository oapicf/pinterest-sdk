/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIIntegrationsApiRequest_H
#define OAI_OAIIntegrationsApiRequest_H

#include <QObject>
#include <QStringList>
#include <QMultiMap>
#include <QNetworkReply>
#include <QSharedPointer>

#include <qhttpengine/socket.h>
#include "OAIDetailedError.h"
#include "OAIError.h"
#include "OAIIntegrationLogsRequest.h"
#include "OAIIntegrationLogsSuccessResponse.h"
#include "OAIIntegrationMetadata.h"
#include "OAIIntegrationRecord.h"
#include "OAIIntegrationRequest.h"
#include "OAIIntegrationRequestPatch.h"
#include "OAIIntegrations_get_list_200_response.h"
#include <QString>
#include "OAIIntegrationsApiHandler.h"

namespace OpenAPI {

class OAIIntegrationsApiRequest : public QObject
{
    Q_OBJECT

public:
    OAIIntegrationsApiRequest(QHttpEngine::Socket *s, QSharedPointer<OAIIntegrationsApiHandler> handler);
    virtual ~OAIIntegrationsApiRequest();

    void integrationsCommerce_delRequest(const QString& external_business_id);
    void integrationsCommerce_getRequest(const QString& external_business_id);
    void integrationsCommerce_patchRequest(const QString& external_business_id);
    void integrationsCommerce_postRequest();
    void integrationsLogs_postRequest();
    void integrations_getByIdRequest(const QString& id);
    void integrations_getListRequest();
    

    void integrationsCommerce_delResponse();
    void integrationsCommerce_getResponse(const OAIIntegrationMetadata& res);
    void integrationsCommerce_patchResponse(const OAIIntegrationMetadata& res);
    void integrationsCommerce_postResponse(const OAIIntegrationMetadata& res);
    void integrationsLogs_postResponse(const OAIIntegrationLogsSuccessResponse& res);
    void integrations_getByIdResponse(const OAIIntegrationRecord& res);
    void integrations_getListResponse(const OAIIntegrations_get_list_200_response& res);
    

    void integrationsCommerce_delError(QNetworkReply::NetworkError error_type, QString& error_str);
    void integrationsCommerce_getError(const OAIIntegrationMetadata& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void integrationsCommerce_patchError(const OAIIntegrationMetadata& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void integrationsCommerce_postError(const OAIIntegrationMetadata& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void integrationsLogs_postError(const OAIIntegrationLogsSuccessResponse& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void integrations_getByIdError(const OAIIntegrationRecord& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void integrations_getListError(const OAIIntegrations_get_list_200_response& res, QNetworkReply::NetworkError error_type, QString& error_str);
    

    void sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type);

    void sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type);

    QMap<QString, QString> getRequestHeaders() const;

    QHttpEngine::Socket* getRawSocket();

    void setResponseHeaders(const QMultiMap<QString,QString>& headers);

Q_SIGNALS:
    void integrationsCommerce_del(QString external_business_id);
    void integrationsCommerce_get(QString external_business_id);
    void integrationsCommerce_patch(QString external_business_id, OAIIntegrationRequestPatch oai_integration_request_patch);
    void integrationsCommerce_post(OAIIntegrationRequest oai_integration_request);
    void integrationsLogs_post(OAIIntegrationLogsRequest oai_integration_logs_request);
    void integrations_getById(QString id);
    void integrations_getList(QString bookmark, qint32 page_size);
    

private:
    QMap<QString, QString> requestHeaders;
    QMap<QString, QString> responseHeaders;
    QHttpEngine::Socket  *socket;
    QSharedPointer<OAIIntegrationsApiHandler> handler;

    inline void setSocketResponseHeaders(){
        QHttpEngine::Socket::HeaderMap resHeaders;
        for(auto itr = responseHeaders.begin(); itr != responseHeaders.end(); ++itr) {
            resHeaders.insert(itr.key().toUtf8(), itr.value().toUtf8());
        }
        socket->setHeaders(resHeaders);
    }
};

}

#endif // OAI_OAIIntegrationsApiRequest_H
