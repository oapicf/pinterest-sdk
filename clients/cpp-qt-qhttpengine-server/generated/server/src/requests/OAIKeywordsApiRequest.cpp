/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>
#include <QDebug>

#include "OAIHelpers.h"
#include "OAIKeywordsApiRequest.h"

namespace OpenAPI {

OAIKeywordsApiRequest::OAIKeywordsApiRequest(QHttpEngine::Socket *s, QSharedPointer<OAIKeywordsApiHandler> hdl) : QObject(s), socket(s), handler(hdl) {
    auto headers = s->headers();
    for(auto itr = headers.begin(); itr != headers.end(); itr++) {
        requestHeaders.insert(QString(itr.key()), QString(itr.value()));
    }
}

OAIKeywordsApiRequest::~OAIKeywordsApiRequest(){
    disconnect(this, nullptr, nullptr, nullptr);
    qDebug() << "OAIKeywordsApiRequest::~OAIKeywordsApiRequest()";
}

QMap<QString, QString>
OAIKeywordsApiRequest::getRequestHeaders() const {
    return requestHeaders;
}

void OAIKeywordsApiRequest::setResponseHeaders(const QMultiMap<QString, QString>& headers){
    for(auto itr = headers.begin(); itr != headers.end(); ++itr) {
        responseHeaders.insert(itr.key(), itr.value());
    }
}


QHttpEngine::Socket* OAIKeywordsApiRequest::getRawSocket(){
    return socket;
}


void OAIKeywordsApiRequest::countryKeywordsMetrics_getRequest(const QString& ad_account_idstr){
    qDebug() << "/v5/ad_accounts/{ad_account_id}/keywords/metrics";
    connect(this, &OAIKeywordsApiRequest::countryKeywordsMetrics_get, handler.data(), &OAIKeywordsApiHandler::countryKeywordsMetrics_get);

    
    QString country_code;
    if(socket->queryString().keys().contains("country_code")){
        fromStringValue(socket->queryString().value("country_code"), country_code);
    }
    
    QList<QString> keywords;
    if(socket->queryString().keys().contains("keywords")){
        fromStringValue(socket->queryString().values("keywords"), keywords);
    }
    
    QString ad_account_id;
    fromStringValue(ad_account_idstr, ad_account_id);
    

    Q_EMIT countryKeywordsMetrics_get(ad_account_id, country_code, keywords);
}


void OAIKeywordsApiRequest::keywords_createRequest(const QString& ad_account_idstr){
    qDebug() << "/v5/ad_accounts/{ad_account_id}/keywords";
    connect(this, &OAIKeywordsApiRequest::keywords_create, handler.data(), &OAIKeywordsApiHandler::keywords_create);

    
    QString ad_account_id;
    fromStringValue(ad_account_idstr, ad_account_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIKeywordsRequest oai_keywords_request;
    ::OpenAPI::fromJsonValue(oai_keywords_request, obj);
    

    Q_EMIT keywords_create(ad_account_id, oai_keywords_request);
}


void OAIKeywordsApiRequest::keywords_getRequest(const QString& ad_account_idstr){
    qDebug() << "/v5/ad_accounts/{ad_account_id}/keywords";
    connect(this, &OAIKeywordsApiRequest::keywords_get, handler.data(), &OAIKeywordsApiHandler::keywords_get);

    
    QString campaign_id;
    if(socket->queryString().keys().contains("campaign_id")){
        fromStringValue(socket->queryString().value("campaign_id"), campaign_id);
    }
    
    QString ad_group_id;
    if(socket->queryString().keys().contains("ad_group_id")){
        fromStringValue(socket->queryString().value("ad_group_id"), ad_group_id);
    }
    
    QList<OAIMatchType> match_types;
    if(socket->queryString().keys().contains("match_types")){
        fromStringValue(socket->queryString().values("match_types"), match_types);
    }
    
    qint32 page_size;
    if(socket->queryString().keys().contains("page_size")){
        fromStringValue(socket->queryString().value("page_size"), page_size);
    }
    
    QString bookmark;
    if(socket->queryString().keys().contains("bookmark")){
        fromStringValue(socket->queryString().value("bookmark"), bookmark);
    }
    
    QString ad_account_id;
    fromStringValue(ad_account_idstr, ad_account_id);
    

    Q_EMIT keywords_get(ad_account_id, campaign_id, ad_group_id, match_types, page_size, bookmark);
}


void OAIKeywordsApiRequest::keywords_updateRequest(const QString& ad_account_idstr){
    qDebug() << "/v5/ad_accounts/{ad_account_id}/keywords";
    connect(this, &OAIKeywordsApiRequest::keywords_update, handler.data(), &OAIKeywordsApiHandler::keywords_update);

    
    QString ad_account_id;
    fromStringValue(ad_account_idstr, ad_account_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIKeywordUpdateBody oai_keyword_update_body;
    ::OpenAPI::fromJsonValue(oai_keyword_update_body, obj);
    

    Q_EMIT keywords_update(ad_account_id, oai_keyword_update_body);
}


void OAIKeywordsApiRequest::trendingKeywords_listRequest(const QString& regionstr, const QString& trend_typestr){
    qDebug() << "/v5/trends/keywords/{region}/top/{trend_type}";
    connect(this, &OAIKeywordsApiRequest::trendingKeywords_list, handler.data(), &OAIKeywordsApiHandler::trendingKeywords_list);

    
    QList<QString> interests;
    if(socket->queryString().keys().contains("interests")){
        fromStringValue(socket->queryString().values("interests"), interests);
    }
    
    QList<QString> genders;
    if(socket->queryString().keys().contains("genders")){
        fromStringValue(socket->queryString().values("genders"), genders);
    }
    
    QList<QString> ages;
    if(socket->queryString().keys().contains("ages")){
        fromStringValue(socket->queryString().values("ages"), ages);
    }
    
    QList<QString> include_keywords;
    if(socket->queryString().keys().contains("include_keywords")){
        fromStringValue(socket->queryString().values("include_keywords"), include_keywords);
    }
    
    bool normalize_against_group;
    if(socket->queryString().keys().contains("normalize_against_group")){
        fromStringValue(socket->queryString().value("normalize_against_group"), normalize_against_group);
    }
    
    qint32 limit;
    if(socket->queryString().keys().contains("limit")){
        fromStringValue(socket->queryString().value("limit"), limit);
    }
    
    OAITrendsSupportedRegion region;
    fromStringValue(regionstr, region);
        OAITrendType trend_type;
    fromStringValue(trend_typestr, trend_type);
    

    Q_EMIT trendingKeywords_list(region, trend_type, interests, genders, ages, include_keywords, normalize_against_group, limit);
}



void OAIKeywordsApiRequest::countryKeywordsMetrics_getResponse(const OAIKeywordsMetricsArrayResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIKeywordsApiRequest::keywords_createResponse(const OAIKeywordsResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIKeywordsApiRequest::keywords_getResponse(const OAIKeywords_get_200_response& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIKeywordsApiRequest::keywords_updateResponse(const OAIKeywordsResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIKeywordsApiRequest::trendingKeywords_listResponse(const OAITrendingKeywordsResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAIKeywordsApiRequest::countryKeywordsMetrics_getError(const OAIKeywordsMetricsArrayResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIKeywordsApiRequest::keywords_createError(const OAIKeywordsResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIKeywordsApiRequest::keywords_getError(const OAIKeywords_get_200_response& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIKeywordsApiRequest::keywords_updateError(const OAIKeywordsResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIKeywordsApiRequest::trendingKeywords_listError(const OAITrendingKeywordsResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAIKeywordsApiRequest::sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type); // TODO
    socket->write(res);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIKeywordsApiRequest::sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type);  // TODO
    socket->write(res->readAll());
    if(socket->isOpen()){
        socket->close();
    }
}

}
