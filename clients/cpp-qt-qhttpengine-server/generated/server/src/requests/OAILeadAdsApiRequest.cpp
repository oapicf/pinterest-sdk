/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>
#include <QDebug>

#include "OAIHelpers.h"
#include "OAILeadAdsApiRequest.h"

namespace OpenAPI {

OAILeadAdsApiRequest::OAILeadAdsApiRequest(QHttpEngine::Socket *s, QSharedPointer<OAILeadAdsApiHandler> hdl) : QObject(s), socket(s), handler(hdl) {
    auto headers = s->headers();
    for(auto itr = headers.begin(); itr != headers.end(); itr++) {
        requestHeaders.insert(QString(itr.key()), QString(itr.value()));
    }
}

OAILeadAdsApiRequest::~OAILeadAdsApiRequest(){
    disconnect(this, nullptr, nullptr, nullptr);
    qDebug() << "OAILeadAdsApiRequest::~OAILeadAdsApiRequest()";
}

QMap<QString, QString>
OAILeadAdsApiRequest::getRequestHeaders() const {
    return requestHeaders;
}

void OAILeadAdsApiRequest::setResponseHeaders(const QMultiMap<QString, QString>& headers){
    for(auto itr = headers.begin(); itr != headers.end(); ++itr) {
        responseHeaders.insert(itr.key(), itr.value());
    }
}


QHttpEngine::Socket* OAILeadAdsApiRequest::getRawSocket(){
    return socket;
}


void OAILeadAdsApiRequest::adAccountsSubscriptions_delByIdRequest(const QString& ad_account_idstr, const QString& subscription_idstr){
    qDebug() << "/v5/ad_accounts/{ad_account_id}/leads/subscriptions/{subscription_id}";
    connect(this, &OAILeadAdsApiRequest::adAccountsSubscriptions_delById, handler.data(), &OAILeadAdsApiHandler::adAccountsSubscriptions_delById);

    
    QString ad_account_id;
    fromStringValue(ad_account_idstr, ad_account_id);
        QString subscription_id;
    fromStringValue(subscription_idstr, subscription_id);
    

    Q_EMIT adAccountsSubscriptions_delById(ad_account_id, subscription_id);
}


void OAILeadAdsApiRequest::adAccountsSubscriptions_getByIdRequest(const QString& ad_account_idstr, const QString& subscription_idstr){
    qDebug() << "/v5/ad_accounts/{ad_account_id}/leads/subscriptions/{subscription_id}";
    connect(this, &OAILeadAdsApiRequest::adAccountsSubscriptions_getById, handler.data(), &OAILeadAdsApiHandler::adAccountsSubscriptions_getById);

    
    QString ad_account_id;
    fromStringValue(ad_account_idstr, ad_account_id);
        QString subscription_id;
    fromStringValue(subscription_idstr, subscription_id);
    

    Q_EMIT adAccountsSubscriptions_getById(ad_account_id, subscription_id);
}


void OAILeadAdsApiRequest::adAccountsSubscriptions_getListRequest(const QString& ad_account_idstr){
    qDebug() << "/v5/ad_accounts/{ad_account_id}/leads/subscriptions";
    connect(this, &OAILeadAdsApiRequest::adAccountsSubscriptions_getList, handler.data(), &OAILeadAdsApiHandler::adAccountsSubscriptions_getList);

    
    qint32 page_size;
    if(socket->queryString().keys().contains("page_size")){
        fromStringValue(socket->queryString().value("page_size"), page_size);
    }
    
    QString bookmark;
    if(socket->queryString().keys().contains("bookmark")){
        fromStringValue(socket->queryString().value("bookmark"), bookmark);
    }
    
    QString ad_account_id;
    fromStringValue(ad_account_idstr, ad_account_id);
    

    Q_EMIT adAccountsSubscriptions_getList(ad_account_id, page_size, bookmark);
}


void OAILeadAdsApiRequest::adAccountsSubscriptions_postRequest(const QString& ad_account_idstr){
    qDebug() << "/v5/ad_accounts/{ad_account_id}/leads/subscriptions";
    connect(this, &OAILeadAdsApiRequest::adAccountsSubscriptions_post, handler.data(), &OAILeadAdsApiHandler::adAccountsSubscriptions_post);

    
    QString ad_account_id;
    fromStringValue(ad_account_idstr, ad_account_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIAdAccountCreateSubscriptionRequest oaiad_account_create_subscription_request;
    ::OpenAPI::fromJsonValue(oaiad_account_create_subscription_request, obj);
    

    Q_EMIT adAccountsSubscriptions_post(ad_account_id, oaiad_account_create_subscription_request);
}



void OAILeadAdsApiRequest::adAccountsSubscriptions_delByIdResponse(){
    setSocketResponseHeaders();
    socket->setStatusCode(QHttpEngine::Socket::OK);
    socket->writeHeaders();
    if(socket->isOpen()){
        socket->close();
    }
}

void OAILeadAdsApiRequest::adAccountsSubscriptions_getByIdResponse(const OAIAdAccountGetSubscriptionResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAILeadAdsApiRequest::adAccountsSubscriptions_getListResponse(const OAIAd_accounts_subscriptions_get_list_200_response& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAILeadAdsApiRequest::adAccountsSubscriptions_postResponse(const OAIAdAccountCreateSubscriptionResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAILeadAdsApiRequest::adAccountsSubscriptions_delByIdError(QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    socket->setStatusCode(QHttpEngine::Socket::NotFound);
    socket->write(error_str.toUtf8());
    if(socket->isOpen()){
        socket->close();
    }
}

void OAILeadAdsApiRequest::adAccountsSubscriptions_getByIdError(const OAIAdAccountGetSubscriptionResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAILeadAdsApiRequest::adAccountsSubscriptions_getListError(const OAIAd_accounts_subscriptions_get_list_200_response& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAILeadAdsApiRequest::adAccountsSubscriptions_postError(const OAIAdAccountCreateSubscriptionResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAILeadAdsApiRequest::sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type); // TODO
    socket->write(res);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAILeadAdsApiRequest::sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type);  // TODO
    socket->write(res->readAll());
    if(socket->isOpen()){
        socket->close();
    }
}

}
