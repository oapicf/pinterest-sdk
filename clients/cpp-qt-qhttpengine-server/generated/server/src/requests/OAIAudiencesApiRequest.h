/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAudiencesApiRequest_H
#define OAI_OAIAudiencesApiRequest_H

#include <QObject>
#include <QStringList>
#include <QMultiMap>
#include <QNetworkReply>
#include <QSharedPointer>

#include <qhttpengine/socket.h>
#include "OAIAudience.h"
#include "OAIAudienceCreateCustomRequest.h"
#include "OAIAudienceCreateRequest.h"
#include "OAIAudienceUpdateRequest.h"
#include "OAIAudiences_list_200_response.h"
#include "OAIError.h"
#include <QString>
#include "OAIAudiencesApiHandler.h"

namespace OpenAPI {

class OAIAudiencesApiRequest : public QObject
{
    Q_OBJECT

public:
    OAIAudiencesApiRequest(QHttpEngine::Socket *s, QSharedPointer<OAIAudiencesApiHandler> handler);
    virtual ~OAIAudiencesApiRequest();

    void audiences_createRequest(const QString& ad_account_id);
    void audiences_createCustomRequest(const QString& ad_account_id);
    void audiences_getRequest(const QString& ad_account_id, const QString& audience_id);
    void audiences_listRequest(const QString& ad_account_id);
    void audiences_updateRequest(const QString& ad_account_id, const QString& audience_id);
    

    void audiences_createResponse(const OAIAudience& res);
    void audiences_createCustomResponse(const OAIAudience& res);
    void audiences_getResponse(const OAIAudience& res);
    void audiences_listResponse(const OAIAudiences_list_200_response& res);
    void audiences_updateResponse(const OAIAudience& res);
    

    void audiences_createError(const OAIAudience& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void audiences_createCustomError(const OAIAudience& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void audiences_getError(const OAIAudience& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void audiences_listError(const OAIAudiences_list_200_response& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void audiences_updateError(const OAIAudience& res, QNetworkReply::NetworkError error_type, QString& error_str);
    

    void sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type);

    void sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type);

    QMap<QString, QString> getRequestHeaders() const;

    QHttpEngine::Socket* getRawSocket();

    void setResponseHeaders(const QMultiMap<QString,QString>& headers);

Q_SIGNALS:
    void audiences_create(QString ad_account_id, OAIAudienceCreateRequest oai_audience_create_request);
    void audiences_createCustom(QString ad_account_id, OAIAudienceCreateCustomRequest oai_audience_create_custom_request);
    void audiences_get(QString ad_account_id, QString audience_id);
    void audiences_list(QString ad_account_id, QString bookmark, QString order, qint32 page_size, QString ownership_type);
    void audiences_update(QString ad_account_id, QString audience_id, OAIAudienceUpdateRequest oai_audience_update_request);
    

private:
    QMap<QString, QString> requestHeaders;
    QMap<QString, QString> responseHeaders;
    QHttpEngine::Socket  *socket;
    QSharedPointer<OAIAudiencesApiHandler> handler;

    inline void setSocketResponseHeaders(){
        QHttpEngine::Socket::HeaderMap resHeaders;
        for(auto itr = responseHeaders.begin(); itr != responseHeaders.end(); ++itr) {
            resHeaders.insert(itr.key().toUtf8(), itr.value().toUtf8());
        }
        socket->setHeaders(resHeaders);
    }
};

}

#endif // OAI_OAIAudiencesApiRequest_H
