/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>
#include <QDebug>

#include "OAIHelpers.h"
#include "OAIAudienceSharingApiRequest.h"

namespace OpenAPI {

OAIAudienceSharingApiRequest::OAIAudienceSharingApiRequest(QHttpEngine::Socket *s, QSharedPointer<OAIAudienceSharingApiHandler> hdl) : QObject(s), socket(s), handler(hdl) {
    auto headers = s->headers();
    for(auto itr = headers.begin(); itr != headers.end(); itr++) {
        requestHeaders.insert(QString(itr.key()), QString(itr.value()));
    }
}

OAIAudienceSharingApiRequest::~OAIAudienceSharingApiRequest(){
    disconnect(this, nullptr, nullptr, nullptr);
    qDebug() << "OAIAudienceSharingApiRequest::~OAIAudienceSharingApiRequest()";
}

QMap<QString, QString>
OAIAudienceSharingApiRequest::getRequestHeaders() const {
    return requestHeaders;
}

void OAIAudienceSharingApiRequest::setResponseHeaders(const QMultiMap<QString, QString>& headers){
    for(auto itr = headers.begin(); itr != headers.end(); ++itr) {
        responseHeaders.insert(itr.key(), itr.value());
    }
}


QHttpEngine::Socket* OAIAudienceSharingApiRequest::getRawSocket(){
    return socket;
}


void OAIAudienceSharingApiRequest::adAccountsAudiencesSharedAccounts_listRequest(const QString& ad_account_idstr){
    qDebug() << "/v5/ad_accounts/{ad_account_id}/audiences/shared/accounts";
    connect(this, &OAIAudienceSharingApiRequest::adAccountsAudiencesSharedAccounts_list, handler.data(), &OAIAudienceSharingApiHandler::adAccountsAudiencesSharedAccounts_list);

    
    QString audience_id;
    if(socket->queryString().keys().contains("audience_id")){
        fromStringValue(socket->queryString().value("audience_id"), audience_id);
    }
    
    OAIAudienceAccountType account_type;
    if(socket->queryString().keys().contains("account_type")){
        fromStringValue(socket->queryString().value("account_type"), account_type);
    }
    
    qint32 page_size;
    if(socket->queryString().keys().contains("page_size")){
        fromStringValue(socket->queryString().value("page_size"), page_size);
    }
    
    QString bookmark;
    if(socket->queryString().keys().contains("bookmark")){
        fromStringValue(socket->queryString().value("bookmark"), bookmark);
    }
    
    QString ad_account_id;
    fromStringValue(ad_account_idstr, ad_account_id);
    

    Q_EMIT adAccountsAudiencesSharedAccounts_list(ad_account_id, audience_id, account_type, page_size, bookmark);
}


void OAIAudienceSharingApiRequest::businessAccountAudiencesSharedAccounts_listRequest(const QString& business_idstr){
    qDebug() << "/v5/businesses/{business_id}/audiences/shared/accounts";
    connect(this, &OAIAudienceSharingApiRequest::businessAccountAudiencesSharedAccounts_list, handler.data(), &OAIAudienceSharingApiHandler::businessAccountAudiencesSharedAccounts_list);

    
    QString audience_id;
    if(socket->queryString().keys().contains("audience_id")){
        fromStringValue(socket->queryString().value("audience_id"), audience_id);
    }
    
    OAIAudienceAccountType account_type;
    if(socket->queryString().keys().contains("account_type")){
        fromStringValue(socket->queryString().value("account_type"), account_type);
    }
    
    qint32 page_size;
    if(socket->queryString().keys().contains("page_size")){
        fromStringValue(socket->queryString().value("page_size"), page_size);
    }
    
    QString bookmark;
    if(socket->queryString().keys().contains("bookmark")){
        fromStringValue(socket->queryString().value("bookmark"), bookmark);
    }
    
    QString business_id;
    fromStringValue(business_idstr, business_id);
    

    Q_EMIT businessAccountAudiencesSharedAccounts_list(business_id, audience_id, account_type, page_size, bookmark);
}


void OAIAudienceSharingApiRequest::sharedAudiencesForBusiness_listRequest(const QString& business_idstr){
    qDebug() << "/v5/businesses/{business_id}/audiences";
    connect(this, &OAIAudienceSharingApiRequest::sharedAudiencesForBusiness_list, handler.data(), &OAIAudienceSharingApiHandler::sharedAudiencesForBusiness_list);

    
    QString bookmark;
    if(socket->queryString().keys().contains("bookmark")){
        fromStringValue(socket->queryString().value("bookmark"), bookmark);
    }
    
    QString order;
    if(socket->queryString().keys().contains("order")){
        fromStringValue(socket->queryString().value("order"), order);
    }
    
    qint32 page_size;
    if(socket->queryString().keys().contains("page_size")){
        fromStringValue(socket->queryString().value("page_size"), page_size);
    }
    
    QString business_id;
    fromStringValue(business_idstr, business_id);
    

    Q_EMIT sharedAudiencesForBusiness_list(business_id, bookmark, order, page_size);
}


void OAIAudienceSharingApiRequest::updateAdAccountToAdAccountSharedAudienceRequest(const QString& ad_account_idstr){
    qDebug() << "/v5/ad_accounts/{ad_account_id}/audiences/ad_accounts/shared";
    connect(this, &OAIAudienceSharingApiRequest::updateAdAccountToAdAccountSharedAudience, handler.data(), &OAIAudienceSharingApiHandler::updateAdAccountToAdAccountSharedAudience);

    
    QString ad_account_id;
    fromStringValue(ad_account_idstr, ad_account_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAISharedAudience oai_shared_audience;
    ::OpenAPI::fromJsonValue(oai_shared_audience, obj);
    

    Q_EMIT updateAdAccountToAdAccountSharedAudience(ad_account_id, oai_shared_audience);
}


void OAIAudienceSharingApiRequest::updateAdAccountToBusinessSharedAudienceRequest(const QString& ad_account_idstr){
    qDebug() << "/v5/ad_accounts/{ad_account_id}/audiences/businesses/shared";
    connect(this, &OAIAudienceSharingApiRequest::updateAdAccountToBusinessSharedAudience, handler.data(), &OAIAudienceSharingApiHandler::updateAdAccountToBusinessSharedAudience);

    
    QString ad_account_id;
    fromStringValue(ad_account_idstr, ad_account_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIBusinessSharedAudience oai_business_shared_audience;
    ::OpenAPI::fromJsonValue(oai_business_shared_audience, obj);
    

    Q_EMIT updateAdAccountToBusinessSharedAudience(ad_account_id, oai_business_shared_audience);
}


void OAIAudienceSharingApiRequest::updateBusinessToAdAccountSharedAudienceRequest(const QString& business_idstr){
    qDebug() << "/v5/businesses/{business_id}/audiences/ad_accounts/shared";
    connect(this, &OAIAudienceSharingApiRequest::updateBusinessToAdAccountSharedAudience, handler.data(), &OAIAudienceSharingApiHandler::updateBusinessToAdAccountSharedAudience);

    
    QString business_id;
    fromStringValue(business_idstr, business_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAISharedAudience oai_shared_audience;
    ::OpenAPI::fromJsonValue(oai_shared_audience, obj);
    

    Q_EMIT updateBusinessToAdAccountSharedAudience(business_id, oai_shared_audience);
}


void OAIAudienceSharingApiRequest::updateBusinessToBusinessSharedAudienceRequest(const QString& business_idstr){
    qDebug() << "/v5/businesses/{business_id}/audiences/businesses/shared";
    connect(this, &OAIAudienceSharingApiRequest::updateBusinessToBusinessSharedAudience, handler.data(), &OAIAudienceSharingApiHandler::updateBusinessToBusinessSharedAudience);

    
    QString business_id;
    fromStringValue(business_idstr, business_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIBusinessSharedAudience oai_business_shared_audience;
    ::OpenAPI::fromJsonValue(oai_business_shared_audience, obj);
    

    Q_EMIT updateBusinessToBusinessSharedAudience(business_id, oai_business_shared_audience);
}



void OAIAudienceSharingApiRequest::adAccountsAudiencesSharedAccounts_listResponse(const OAIAd_accounts_audiences_shared_accounts_list_200_response& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIAudienceSharingApiRequest::businessAccountAudiencesSharedAccounts_listResponse(const OAIAd_accounts_audiences_shared_accounts_list_200_response& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIAudienceSharingApiRequest::sharedAudiencesForBusiness_listResponse(const OAIAudiences_list_200_response& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIAudienceSharingApiRequest::updateAdAccountToAdAccountSharedAudienceResponse(const OAISharedAudienceResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIAudienceSharingApiRequest::updateAdAccountToBusinessSharedAudienceResponse(const OAIBusinessSharedAudienceResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIAudienceSharingApiRequest::updateBusinessToAdAccountSharedAudienceResponse(const OAISharedAudienceResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIAudienceSharingApiRequest::updateBusinessToBusinessSharedAudienceResponse(const OAIBusinessSharedAudienceResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAIAudienceSharingApiRequest::adAccountsAudiencesSharedAccounts_listError(const OAIAd_accounts_audiences_shared_accounts_list_200_response& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIAudienceSharingApiRequest::businessAccountAudiencesSharedAccounts_listError(const OAIAd_accounts_audiences_shared_accounts_list_200_response& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIAudienceSharingApiRequest::sharedAudiencesForBusiness_listError(const OAIAudiences_list_200_response& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIAudienceSharingApiRequest::updateAdAccountToAdAccountSharedAudienceError(const OAISharedAudienceResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIAudienceSharingApiRequest::updateAdAccountToBusinessSharedAudienceError(const OAIBusinessSharedAudienceResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIAudienceSharingApiRequest::updateBusinessToAdAccountSharedAudienceError(const OAISharedAudienceResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIAudienceSharingApiRequest::updateBusinessToBusinessSharedAudienceError(const OAIBusinessSharedAudienceResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAIAudienceSharingApiRequest::sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type); // TODO
    socket->write(res);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIAudienceSharingApiRequest::sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type);  // TODO
    socket->write(res->readAll());
    if(socket->isOpen()){
        socket->close();
    }
}

}
