/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>
#include <QDebug>

#include "OAIHelpers.h"
#include "OAISearchApiRequest.h"

namespace OpenAPI {

OAISearchApiRequest::OAISearchApiRequest(QHttpEngine::Socket *s, QSharedPointer<OAISearchApiHandler> hdl) : QObject(s), socket(s), handler(hdl) {
    auto headers = s->headers();
    for(auto itr = headers.begin(); itr != headers.end(); itr++) {
        requestHeaders.insert(QString(itr.key()), QString(itr.value()));
    }
}

OAISearchApiRequest::~OAISearchApiRequest(){
    disconnect(this, nullptr, nullptr, nullptr);
    qDebug() << "OAISearchApiRequest::~OAISearchApiRequest()";
}

QMap<QString, QString>
OAISearchApiRequest::getRequestHeaders() const {
    return requestHeaders;
}

void OAISearchApiRequest::setResponseHeaders(const QMultiMap<QString, QString>& headers){
    for(auto itr = headers.begin(); itr != headers.end(); ++itr) {
        responseHeaders.insert(itr.key(), itr.value());
    }
}


QHttpEngine::Socket* OAISearchApiRequest::getRawSocket(){
    return socket;
}


void OAISearchApiRequest::searchPartnerPinsRequest(){
    qDebug() << "/v5/search/partner/pins";
    connect(this, &OAISearchApiRequest::searchPartnerPins, handler.data(), &OAISearchApiHandler::searchPartnerPins);

    
    QString term;
    if(socket->queryString().keys().contains("term")){
        fromStringValue(socket->queryString().value("term"), term);
    }
    
    QString country_code;
    if(socket->queryString().keys().contains("country_code")){
        fromStringValue(socket->queryString().value("country_code"), country_code);
    }
    
    QString bookmark;
    if(socket->queryString().keys().contains("bookmark")){
        fromStringValue(socket->queryString().value("bookmark"), bookmark);
    }
    
    QString locale;
    if(socket->queryString().keys().contains("locale")){
        fromStringValue(socket->queryString().value("locale"), locale);
    }
    
    qint32 limit;
    if(socket->queryString().keys().contains("limit")){
        fromStringValue(socket->queryString().value("limit"), limit);
    }
    


    Q_EMIT searchPartnerPins(term, country_code, bookmark, locale, limit);
}


void OAISearchApiRequest::searchUserBoards_getRequest(){
    qDebug() << "/v5/search/boards";
    connect(this, &OAISearchApiRequest::searchUserBoards_get, handler.data(), &OAISearchApiHandler::searchUserBoards_get);

    
    QString ad_account_id;
    if(socket->queryString().keys().contains("ad_account_id")){
        fromStringValue(socket->queryString().value("ad_account_id"), ad_account_id);
    }
    
    QString bookmark;
    if(socket->queryString().keys().contains("bookmark")){
        fromStringValue(socket->queryString().value("bookmark"), bookmark);
    }
    
    qint32 page_size;
    if(socket->queryString().keys().contains("page_size")){
        fromStringValue(socket->queryString().value("page_size"), page_size);
    }
    
    QString query;
    if(socket->queryString().keys().contains("query")){
        fromStringValue(socket->queryString().value("query"), query);
    }
    


    Q_EMIT searchUserBoards_get(ad_account_id, bookmark, page_size, query);
}


void OAISearchApiRequest::searchUserPins_listRequest(){
    qDebug() << "/v5/search/pins";
    connect(this, &OAISearchApiRequest::searchUserPins_list, handler.data(), &OAISearchApiHandler::searchUserPins_list);

    
    QString ad_account_id;
    if(socket->queryString().keys().contains("ad_account_id")){
        fromStringValue(socket->queryString().value("ad_account_id"), ad_account_id);
    }
    
    QString query;
    if(socket->queryString().keys().contains("query")){
        fromStringValue(socket->queryString().value("query"), query);
    }
    
    QString bookmark;
    if(socket->queryString().keys().contains("bookmark")){
        fromStringValue(socket->queryString().value("bookmark"), bookmark);
    }
    


    Q_EMIT searchUserPins_list(query, ad_account_id, bookmark);
}



void OAISearchApiRequest::searchPartnerPinsResponse(const OAISearch_partner_pins_200_response& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAISearchApiRequest::searchUserBoards_getResponse(const OAISearch_user_boards_get_200_response& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAISearchApiRequest::searchUserPins_listResponse(const OAIPins_list_200_response& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAISearchApiRequest::searchPartnerPinsError(const OAISearch_partner_pins_200_response& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAISearchApiRequest::searchUserBoards_getError(const OAISearch_user_boards_get_200_response& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAISearchApiRequest::searchUserPins_listError(const OAIPins_list_200_response& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAISearchApiRequest::sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type); // TODO
    socket->write(res);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAISearchApiRequest::sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type);  // TODO
    socket->write(res->readAll());
    if(socket->isOpen()){
        socket->close();
    }
}

}
