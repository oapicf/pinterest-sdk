/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIConversionTagsApiRequest_H
#define OAI_OAIConversionTagsApiRequest_H

#include <QObject>
#include <QStringList>
#include <QMultiMap>
#include <QNetworkReply>
#include <QSharedPointer>

#include <qhttpengine/socket.h>
#include "OAIConversionEventResponse.h"
#include "OAIConversionTagCreate.h"
#include "OAIConversionTagListResponse.h"
#include "OAIConversionTagResponse.h"
#include "OAIError.h"
#include "OAIPage_visit_conversion_tags_get_200_response.h"
#include <QList>
#include <QMap>
#include <QString>
#include "OAIConversionTagsApiHandler.h"

namespace OpenAPI {

class OAIConversionTagsApiRequest : public QObject
{
    Q_OBJECT

public:
    OAIConversionTagsApiRequest(QHttpEngine::Socket *s, QSharedPointer<OAIConversionTagsApiHandler> handler);
    virtual ~OAIConversionTagsApiRequest();

    void conversionTags_createRequest(const QString& ad_account_id);
    void conversionTags_getRequest(const QString& ad_account_id, const QString& conversion_tag_id);
    void conversionTags_listRequest(const QString& ad_account_id);
    void ocpmEligibleConversionTags_getRequest(const QString& ad_account_id);
    void pageVisitConversionTags_getRequest(const QString& ad_account_id);
    

    void conversionTags_createResponse(const OAIConversionTagResponse& res);
    void conversionTags_getResponse(const OAIConversionTagResponse& res);
    void conversionTags_listResponse(const OAIConversionTagListResponse& res);
    void ocpmEligibleConversionTags_getResponse(const QMap<QString, QList<OAIConversionEventResponse>>& res);
    void pageVisitConversionTags_getResponse(const OAIPage_visit_conversion_tags_get_200_response& res);
    

    void conversionTags_createError(const OAIConversionTagResponse& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void conversionTags_getError(const OAIConversionTagResponse& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void conversionTags_listError(const OAIConversionTagListResponse& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void ocpmEligibleConversionTags_getError(const QMap<QString, QList<OAIConversionEventResponse>>& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void pageVisitConversionTags_getError(const OAIPage_visit_conversion_tags_get_200_response& res, QNetworkReply::NetworkError error_type, QString& error_str);
    

    void sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type);

    void sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type);

    QMap<QString, QString> getRequestHeaders() const;

    QHttpEngine::Socket* getRawSocket();

    void setResponseHeaders(const QMultiMap<QString,QString>& headers);

Q_SIGNALS:
    void conversionTags_create(QString ad_account_id, OAIConversionTagCreate oai_conversion_tag_create);
    void conversionTags_get(QString ad_account_id, QString conversion_tag_id);
    void conversionTags_list(QString ad_account_id, bool filter_deleted);
    void ocpmEligibleConversionTags_get(QString ad_account_id);
    void pageVisitConversionTags_get(QString ad_account_id, qint32 page_size, QString order, QString bookmark);
    

private:
    QMap<QString, QString> requestHeaders;
    QMap<QString, QString> responseHeaders;
    QHttpEngine::Socket  *socket;
    QSharedPointer<OAIConversionTagsApiHandler> handler;

    inline void setSocketResponseHeaders(){
        QHttpEngine::Socket::HeaderMap resHeaders;
        for(auto itr = responseHeaders.begin(); itr != responseHeaders.end(); ++itr) {
            resHeaders.insert(itr.key().toUtf8(), itr.value().toUtf8());
        }
        socket->setHeaders(resHeaders);
    }
};

}

#endif // OAI_OAIConversionTagsApiRequest_H
