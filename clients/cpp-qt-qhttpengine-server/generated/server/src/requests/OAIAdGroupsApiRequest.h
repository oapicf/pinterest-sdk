/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAdGroupsApiRequest_H
#define OAI_OAIAdGroupsApiRequest_H

#include <QObject>
#include <QStringList>
#include <QMultiMap>
#include <QNetworkReply>
#include <QSharedPointer>

#include <qhttpengine/socket.h>
#include "OAIAdGroupArrayResponse.h"
#include "OAIAdGroupAudienceSizingRequest.h"
#include "OAIAdGroupAudienceSizingResponse.h"
#include "OAIAdGroupCreateRequest.h"
#include "OAIAdGroupResponse.h"
#include "OAIAdGroupUpdateRequest.h"
#include "OAIAdGroupsAnalyticsResponse_inner.h"
#include "OAIAd_groups_list_200_response.h"
#include "OAIAdsAnalyticsTargetingType.h"
#include "OAIBidFloor.h"
#include "OAIBidFloorRequest.h"
#include "OAIConversionReportAttributionType.h"
#include "OAIError.h"
#include "OAIGranularity.h"
#include "OAIMetricsResponse.h"
#include <QList>
#include <QString>
#include "OAIAdGroupsApiHandler.h"

namespace OpenAPI {

class OAIAdGroupsApiRequest : public QObject
{
    Q_OBJECT

public:
    OAIAdGroupsApiRequest(QHttpEngine::Socket *s, QSharedPointer<OAIAdGroupsApiHandler> handler);
    virtual ~OAIAdGroupsApiRequest();

    void adGroupsBidFloor_getRequest(const QString& ad_account_id);
    void adGroupsTargetingAnalytics_getRequest(const QString& ad_account_id);
    void adGroups_analyticsRequest(const QString& ad_account_id);
    void adGroups_audienceSizingRequest(const QString& ad_account_id);
    void adGroups_createRequest(const QString& ad_account_id);
    void adGroups_getRequest(const QString& ad_account_id, const QString& ad_group_id);
    void adGroups_listRequest(const QString& ad_account_id);
    void adGroups_updateRequest(const QString& ad_account_id);
    

    void adGroupsBidFloor_getResponse(const OAIBidFloor& res);
    void adGroupsTargetingAnalytics_getResponse(const OAIMetricsResponse& res);
    void adGroups_analyticsResponse(const QList<OAIAdGroupsAnalyticsResponse_inner>& res);
    void adGroups_audienceSizingResponse(const OAIAdGroupAudienceSizingResponse& res);
    void adGroups_createResponse(const OAIAdGroupArrayResponse& res);
    void adGroups_getResponse(const OAIAdGroupResponse& res);
    void adGroups_listResponse(const OAIAd_groups_list_200_response& res);
    void adGroups_updateResponse(const OAIAdGroupArrayResponse& res);
    

    void adGroupsBidFloor_getError(const OAIBidFloor& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void adGroupsTargetingAnalytics_getError(const OAIMetricsResponse& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void adGroups_analyticsError(const QList<OAIAdGroupsAnalyticsResponse_inner>& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void adGroups_audienceSizingError(const OAIAdGroupAudienceSizingResponse& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void adGroups_createError(const OAIAdGroupArrayResponse& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void adGroups_getError(const OAIAdGroupResponse& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void adGroups_listError(const OAIAd_groups_list_200_response& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void adGroups_updateError(const OAIAdGroupArrayResponse& res, QNetworkReply::NetworkError error_type, QString& error_str);
    

    void sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type);

    void sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type);

    QMap<QString, QString> getRequestHeaders() const;

    QHttpEngine::Socket* getRawSocket();

    void setResponseHeaders(const QMultiMap<QString,QString>& headers);

Q_SIGNALS:
    void adGroupsBidFloor_get(QString ad_account_id, OAIBidFloorRequest oai_bid_floor_request);
    void adGroupsTargetingAnalytics_get(QString ad_account_id, QList<QString> ad_group_ids, QDate start_date, QDate end_date, QList<OAIAdsAnalyticsTargetingType> targeting_types, QList<QString> columns, OAIGranularity granularity, qint32 click_window_days, qint32 engagement_window_days, qint32 view_window_days, QString conversion_report_time, OAIConversionReportAttributionType attribution_types);
    void adGroups_analytics(QString ad_account_id, QDate start_date, QDate end_date, QList<QString> ad_group_ids, QList<QString> columns, OAIGranularity granularity, qint32 click_window_days, qint32 engagement_window_days, qint32 view_window_days, QString conversion_report_time);
    void adGroups_audienceSizing(QString ad_account_id, OAIAdGroupAudienceSizingRequest oaiad_group_audience_sizing_request);
    void adGroups_create(QString ad_account_id, QList<OAIAdGroupCreateRequest> oaiad_group_create_request);
    void adGroups_get(QString ad_account_id, QString ad_group_id);
    void adGroups_list(QString ad_account_id, QList<QString> campaign_ids, QList<QString> ad_group_ids, QList<QString> entity_statuses, qint32 page_size, QString order, QString bookmark, bool translate_interests_to_names);
    void adGroups_update(QString ad_account_id, QList<OAIAdGroupUpdateRequest> oaiad_group_update_request);
    

private:
    QMap<QString, QString> requestHeaders;
    QMap<QString, QString> responseHeaders;
    QHttpEngine::Socket  *socket;
    QSharedPointer<OAIAdGroupsApiHandler> handler;

    inline void setSocketResponseHeaders(){
        QHttpEngine::Socket::HeaderMap resHeaders;
        for(auto itr = responseHeaders.begin(); itr != responseHeaders.end(); ++itr) {
            resHeaders.insert(itr.key().toUtf8(), itr.value().toUtf8());
        }
        socket->setHeaders(resHeaders);
    }
};

}

#endif // OAI_OAIAdGroupsApiRequest_H
