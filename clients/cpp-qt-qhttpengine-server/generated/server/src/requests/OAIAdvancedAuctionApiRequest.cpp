/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>
#include <QDebug>

#include "OAIHelpers.h"
#include "OAIAdvancedAuctionApiRequest.h"

namespace OpenAPI {

OAIAdvancedAuctionApiRequest::OAIAdvancedAuctionApiRequest(QHttpEngine::Socket *s, QSharedPointer<OAIAdvancedAuctionApiHandler> hdl) : QObject(s), socket(s), handler(hdl) {
    auto headers = s->headers();
    for(auto itr = headers.begin(); itr != headers.end(); itr++) {
        requestHeaders.insert(QString(itr.key()), QString(itr.value()));
    }
}

OAIAdvancedAuctionApiRequest::~OAIAdvancedAuctionApiRequest(){
    disconnect(this, nullptr, nullptr, nullptr);
    qDebug() << "OAIAdvancedAuctionApiRequest::~OAIAdvancedAuctionApiRequest()";
}

QMap<QString, QString>
OAIAdvancedAuctionApiRequest::getRequestHeaders() const {
    return requestHeaders;
}

void OAIAdvancedAuctionApiRequest::setResponseHeaders(const QMultiMap<QString, QString>& headers){
    for(auto itr = headers.begin(); itr != headers.end(); ++itr) {
        responseHeaders.insert(itr.key(), itr.value());
    }
}


QHttpEngine::Socket* OAIAdvancedAuctionApiRequest::getRawSocket(){
    return socket;
}


void OAIAdvancedAuctionApiRequest::advancedAuctionItemsGet_postRequest(){
    qDebug() << "/v5/advanced_auction/items/get";
    connect(this, &OAIAdvancedAuctionApiRequest::advancedAuctionItemsGet_post, handler.data(), &OAIAdvancedAuctionApiHandler::advancedAuctionItemsGet_post);

    
    QString ad_account_id;
    if(socket->queryString().keys().contains("ad_account_id")){
        fromStringValue(socket->queryString().value("ad_account_id"), ad_account_id);
    }
    
 
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIAdvancedAuctionItemsGetRequest oai_advanced_auction_items_get_request;
    ::OpenAPI::fromJsonValue(oai_advanced_auction_items_get_request, obj);
    

    Q_EMIT advancedAuctionItemsGet_post(oai_advanced_auction_items_get_request, ad_account_id);
}


void OAIAdvancedAuctionApiRequest::advancedAuctionItemsSubmit_postRequest(){
    qDebug() << "/v5/advanced_auction/items/submit";
    connect(this, &OAIAdvancedAuctionApiRequest::advancedAuctionItemsSubmit_post, handler.data(), &OAIAdvancedAuctionApiHandler::advancedAuctionItemsSubmit_post);

    
    QString ad_account_id;
    if(socket->queryString().keys().contains("ad_account_id")){
        fromStringValue(socket->queryString().value("ad_account_id"), ad_account_id);
    }
    
 
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIAdvancedAuctionItemsSubmitRequest oai_advanced_auction_items_submit_request;
    ::OpenAPI::fromJsonValue(oai_advanced_auction_items_submit_request, obj);
    

    Q_EMIT advancedAuctionItemsSubmit_post(oai_advanced_auction_items_submit_request, ad_account_id);
}



void OAIAdvancedAuctionApiRequest::advancedAuctionItemsGet_postResponse(const OAIAdvancedAuctionItems& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIAdvancedAuctionApiRequest::advancedAuctionItemsSubmit_postResponse(const OAIAdvancedAuctionProcessedItems& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAIAdvancedAuctionApiRequest::advancedAuctionItemsGet_postError(const OAIAdvancedAuctionItems& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIAdvancedAuctionApiRequest::advancedAuctionItemsSubmit_postError(const OAIAdvancedAuctionProcessedItems& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAIAdvancedAuctionApiRequest::sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type); // TODO
    socket->write(res);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIAdvancedAuctionApiRequest::sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type);  // TODO
    socket->write(res->readAll());
    if(socket->isOpen()){
        socket->close();
    }
}

}
