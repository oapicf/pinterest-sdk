/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAudienceSharingApiRequest_H
#define OAI_OAIAudienceSharingApiRequest_H

#include <QObject>
#include <QStringList>
#include <QMultiMap>
#include <QNetworkReply>
#include <QSharedPointer>

#include <qhttpengine/socket.h>
#include "OAIAd_accounts_audiences_shared_accounts_list_200_response.h"
#include "OAIAudienceAccountType.h"
#include "OAIAudiences_list_200_response.h"
#include "OAIBusinessSharedAudience.h"
#include "OAIBusinessSharedAudienceResponse.h"
#include "OAIError.h"
#include "OAISharedAudience.h"
#include "OAISharedAudienceResponse.h"
#include <QString>
#include "OAIAudienceSharingApiHandler.h"

namespace OpenAPI {

class OAIAudienceSharingApiRequest : public QObject
{
    Q_OBJECT

public:
    OAIAudienceSharingApiRequest(QHttpEngine::Socket *s, QSharedPointer<OAIAudienceSharingApiHandler> handler);
    virtual ~OAIAudienceSharingApiRequest();

    void adAccountsAudiencesSharedAccounts_listRequest(const QString& ad_account_id);
    void businessAccountAudiencesSharedAccounts_listRequest(const QString& business_id);
    void sharedAudiencesForBusiness_listRequest(const QString& business_id);
    void updateAdAccountToAdAccountSharedAudienceRequest(const QString& ad_account_id);
    void updateAdAccountToBusinessSharedAudienceRequest(const QString& ad_account_id);
    void updateBusinessToAdAccountSharedAudienceRequest(const QString& business_id);
    void updateBusinessToBusinessSharedAudienceRequest(const QString& business_id);
    

    void adAccountsAudiencesSharedAccounts_listResponse(const OAIAd_accounts_audiences_shared_accounts_list_200_response& res);
    void businessAccountAudiencesSharedAccounts_listResponse(const OAIAd_accounts_audiences_shared_accounts_list_200_response& res);
    void sharedAudiencesForBusiness_listResponse(const OAIAudiences_list_200_response& res);
    void updateAdAccountToAdAccountSharedAudienceResponse(const OAISharedAudienceResponse& res);
    void updateAdAccountToBusinessSharedAudienceResponse(const OAIBusinessSharedAudienceResponse& res);
    void updateBusinessToAdAccountSharedAudienceResponse(const OAISharedAudienceResponse& res);
    void updateBusinessToBusinessSharedAudienceResponse(const OAIBusinessSharedAudienceResponse& res);
    

    void adAccountsAudiencesSharedAccounts_listError(const OAIAd_accounts_audiences_shared_accounts_list_200_response& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void businessAccountAudiencesSharedAccounts_listError(const OAIAd_accounts_audiences_shared_accounts_list_200_response& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void sharedAudiencesForBusiness_listError(const OAIAudiences_list_200_response& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void updateAdAccountToAdAccountSharedAudienceError(const OAISharedAudienceResponse& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void updateAdAccountToBusinessSharedAudienceError(const OAIBusinessSharedAudienceResponse& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void updateBusinessToAdAccountSharedAudienceError(const OAISharedAudienceResponse& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void updateBusinessToBusinessSharedAudienceError(const OAIBusinessSharedAudienceResponse& res, QNetworkReply::NetworkError error_type, QString& error_str);
    

    void sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type);

    void sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type);

    QMap<QString, QString> getRequestHeaders() const;

    QHttpEngine::Socket* getRawSocket();

    void setResponseHeaders(const QMultiMap<QString,QString>& headers);

Q_SIGNALS:
    void adAccountsAudiencesSharedAccounts_list(QString ad_account_id, QString audience_id, OAIAudienceAccountType account_type, qint32 page_size, QString bookmark);
    void businessAccountAudiencesSharedAccounts_list(QString business_id, QString audience_id, OAIAudienceAccountType account_type, qint32 page_size, QString bookmark);
    void sharedAudiencesForBusiness_list(QString business_id, QString bookmark, QString order, qint32 page_size);
    void updateAdAccountToAdAccountSharedAudience(QString ad_account_id, OAISharedAudience oai_shared_audience);
    void updateAdAccountToBusinessSharedAudience(QString ad_account_id, OAIBusinessSharedAudience oai_business_shared_audience);
    void updateBusinessToAdAccountSharedAudience(QString business_id, OAISharedAudience oai_shared_audience);
    void updateBusinessToBusinessSharedAudience(QString business_id, OAIBusinessSharedAudience oai_business_shared_audience);
    

private:
    QMap<QString, QString> requestHeaders;
    QMap<QString, QString> responseHeaders;
    QHttpEngine::Socket  *socket;
    QSharedPointer<OAIAudienceSharingApiHandler> handler;

    inline void setSocketResponseHeaders(){
        QHttpEngine::Socket::HeaderMap resHeaders;
        for(auto itr = responseHeaders.begin(); itr != responseHeaders.end(); ++itr) {
            resHeaders.insert(itr.key().toUtf8(), itr.value().toUtf8());
        }
        socket->setHeaders(resHeaders);
    }
};

}

#endif // OAI_OAIAudienceSharingApiRequest_H
