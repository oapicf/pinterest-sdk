/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIUserAccountApiRequest_H
#define OAI_OAIUserAccountApiRequest_H

#include <QObject>
#include <QStringList>
#include <QMultiMap>
#include <QNetworkReply>
#include <QSharedPointer>

#include <qhttpengine/socket.h>
#include "OAIAccount.h"
#include "OAIAnalyticsMetricsResponse.h"
#include "OAIBoards_user_follows_list_200_response.h"
#include "OAIError.h"
#include "OAIFollowUserRequest.h"
#include "OAIFollowers_list_200_response.h"
#include "OAILinkedBusiness.h"
#include "OAITopPinsAnalyticsResponse.h"
#include "OAITopVideoPinsAnalyticsResponse.h"
#include "OAIUserFollowingFeedType.h"
#include "OAIUserSummary.h"
#include "OAIUserWebsiteSummary.h"
#include "OAIUserWebsiteVerificationCode.h"
#include "OAIUserWebsiteVerifyRequest.h"
#include "OAIUser_account_followed_interests_200_response.h"
#include "OAIUser_following_get_200_response.h"
#include "OAIUser_websites_get_200_response.h"
#include <QList>
#include <QMap>
#include <QString>
#include "OAIUserAccountApiHandler.h"

namespace OpenAPI {

class OAIUserAccountApiRequest : public QObject
{
    Q_OBJECT

public:
    OAIUserAccountApiRequest(QHttpEngine::Socket *s, QSharedPointer<OAIUserAccountApiHandler> handler);
    virtual ~OAIUserAccountApiRequest();

    void boardsUserFollows_listRequest();
    void followUser_updateRequest(const QString& username);
    void followers_listRequest();
    void linkedBusinessAccounts_getRequest();
    void unverifyWebsite_deleteRequest();
    void userAccount_analyticsRequest();
    void userAccount_analytics_topPinsRequest();
    void userAccount_analytics_topVideoPinsRequest();
    void userAccount_followedInterestsRequest(const QString& username);
    void userAccount_getRequest();
    void userFollowing_getRequest();
    void userWebsites_getRequest();
    void verifyWebsite_updateRequest();
    void websiteVerification_getRequest();
    

    void boardsUserFollows_listResponse(const OAIBoards_user_follows_list_200_response& res);
    void followUser_updateResponse(const OAIUserSummary& res);
    void followers_listResponse(const OAIFollowers_list_200_response& res);
    void linkedBusinessAccounts_getResponse(const QList<OAILinkedBusiness>& res);
    void unverifyWebsite_deleteResponse();
    void userAccount_analyticsResponse(const QMap<QString, OAIAnalyticsMetricsResponse>& res);
    void userAccount_analytics_topPinsResponse(const OAITopPinsAnalyticsResponse& res);
    void userAccount_analytics_topVideoPinsResponse(const OAITopVideoPinsAnalyticsResponse& res);
    void userAccount_followedInterestsResponse(const OAIUser_account_followed_interests_200_response& res);
    void userAccount_getResponse(const OAIAccount& res);
    void userFollowing_getResponse(const OAIUser_following_get_200_response& res);
    void userWebsites_getResponse(const OAIUser_websites_get_200_response& res);
    void verifyWebsite_updateResponse(const OAIUserWebsiteSummary& res);
    void websiteVerification_getResponse(const OAIUserWebsiteVerificationCode& res);
    

    void boardsUserFollows_listError(const OAIBoards_user_follows_list_200_response& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void followUser_updateError(const OAIUserSummary& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void followers_listError(const OAIFollowers_list_200_response& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void linkedBusinessAccounts_getError(const QList<OAILinkedBusiness>& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void unverifyWebsite_deleteError(QNetworkReply::NetworkError error_type, QString& error_str);
    void userAccount_analyticsError(const QMap<QString, OAIAnalyticsMetricsResponse>& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void userAccount_analytics_topPinsError(const OAITopPinsAnalyticsResponse& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void userAccount_analytics_topVideoPinsError(const OAITopVideoPinsAnalyticsResponse& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void userAccount_followedInterestsError(const OAIUser_account_followed_interests_200_response& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void userAccount_getError(const OAIAccount& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void userFollowing_getError(const OAIUser_following_get_200_response& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void userWebsites_getError(const OAIUser_websites_get_200_response& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void verifyWebsite_updateError(const OAIUserWebsiteSummary& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void websiteVerification_getError(const OAIUserWebsiteVerificationCode& res, QNetworkReply::NetworkError error_type, QString& error_str);
    

    void sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type);

    void sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type);

    QMap<QString, QString> getRequestHeaders() const;

    QHttpEngine::Socket* getRawSocket();

    void setResponseHeaders(const QMultiMap<QString,QString>& headers);

Q_SIGNALS:
    void boardsUserFollows_list(QString bookmark, qint32 page_size, bool explicit_following, QString ad_account_id);
    void followUser_update(QString username, OAIFollowUserRequest oai_follow_user_request);
    void followers_list(QString bookmark, qint32 page_size);
    void linkedBusinessAccounts_get();
    void unverifyWebsite_delete(QString website);
    void userAccount_analytics(QDate start_date, QDate end_date, QString from_claimed_content, QString pin_format, QString app_types, QString content_type, QString source, QList<QString> metric_types, QString split_field, QString ad_account_id);
    void userAccount_analytics_topPins(QDate start_date, QDate end_date, QString sort_by, QString from_claimed_content, QString pin_format, QString app_types, QString content_type, QString source, QList<QString> metric_types, qint32 num_of_pins, qint32 created_in_last_n_days, QString ad_account_id);
    void userAccount_analytics_topVideoPins(QDate start_date, QDate end_date, QString sort_by, QString from_claimed_content, QString pin_format, QString app_types, QString content_type, QString source, QList<QString> metric_types, qint32 num_of_pins, qint32 created_in_last_n_days, QString ad_account_id);
    void userAccount_followedInterests(QString username, QString bookmark, qint32 page_size);
    void userAccount_get(QString ad_account_id);
    void userFollowing_get(QString bookmark, qint32 page_size, OAIUserFollowingFeedType feed_type, bool explicit_following, QString ad_account_id);
    void userWebsites_get(QString bookmark, qint32 page_size);
    void verifyWebsite_update(OAIUserWebsiteVerifyRequest oai_user_website_verify_request, QString ad_account_id);
    void websiteVerification_get(QString ad_account_id);
    

private:
    QMap<QString, QString> requestHeaders;
    QMap<QString, QString> responseHeaders;
    QHttpEngine::Socket  *socket;
    QSharedPointer<OAIUserAccountApiHandler> handler;

    inline void setSocketResponseHeaders(){
        QHttpEngine::Socket::HeaderMap resHeaders;
        for(auto itr = responseHeaders.begin(); itr != responseHeaders.end(); ++itr) {
            resHeaders.insert(itr.key().toUtf8(), itr.value().toUtf8());
        }
        socket->setHeaders(resHeaders);
    }
};

}

#endif // OAI_OAIUserAccountApiRequest_H
