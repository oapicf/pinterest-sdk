/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>
#include <QDebug>

#include "OAIHelpers.h"
#include "OAILeadFormsApiRequest.h"

namespace OpenAPI {

OAILeadFormsApiRequest::OAILeadFormsApiRequest(QHttpEngine::Socket *s, QSharedPointer<OAILeadFormsApiHandler> hdl) : QObject(s), socket(s), handler(hdl) {
    auto headers = s->headers();
    for(auto itr = headers.begin(); itr != headers.end(); itr++) {
        requestHeaders.insert(QString(itr.key()), QString(itr.value()));
    }
}

OAILeadFormsApiRequest::~OAILeadFormsApiRequest(){
    disconnect(this, nullptr, nullptr, nullptr);
    qDebug() << "OAILeadFormsApiRequest::~OAILeadFormsApiRequest()";
}

QMap<QString, QString>
OAILeadFormsApiRequest::getRequestHeaders() const {
    return requestHeaders;
}

void OAILeadFormsApiRequest::setResponseHeaders(const QMultiMap<QString, QString>& headers){
    for(auto itr = headers.begin(); itr != headers.end(); ++itr) {
        responseHeaders.insert(itr.key(), itr.value());
    }
}


QHttpEngine::Socket* OAILeadFormsApiRequest::getRawSocket(){
    return socket;
}


void OAILeadFormsApiRequest::leadFormTest_createRequest(const QString& ad_account_idstr, const QString& lead_form_idstr){
    qDebug() << "/v5/ad_accounts/{ad_account_id}/lead_forms/{lead_form_id}/test";
    connect(this, &OAILeadFormsApiRequest::leadFormTest_create, handler.data(), &OAILeadFormsApiHandler::leadFormTest_create);

    
    QString ad_account_id;
    fromStringValue(ad_account_idstr, ad_account_id);
        QString lead_form_id;
    fromStringValue(lead_form_idstr, lead_form_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAILeadFormTestRequest oai_lead_form_test_request;
    ::OpenAPI::fromJsonValue(oai_lead_form_test_request, obj);
    

    Q_EMIT leadFormTest_create(ad_account_id, lead_form_id, oai_lead_form_test_request);
}


void OAILeadFormsApiRequest::leadForm_getRequest(const QString& ad_account_idstr, const QString& lead_form_idstr){
    qDebug() << "/v5/ad_accounts/{ad_account_id}/lead_forms/{lead_form_id}";
    connect(this, &OAILeadFormsApiRequest::leadForm_get, handler.data(), &OAILeadFormsApiHandler::leadForm_get);

    
    QString ad_account_id;
    fromStringValue(ad_account_idstr, ad_account_id);
        QString lead_form_id;
    fromStringValue(lead_form_idstr, lead_form_id);
    

    Q_EMIT leadForm_get(ad_account_id, lead_form_id);
}


void OAILeadFormsApiRequest::leadForms_createRequest(const QString& ad_account_idstr){
    qDebug() << "/v5/ad_accounts/{ad_account_id}/lead_forms";
    connect(this, &OAILeadFormsApiRequest::leadForms_create, handler.data(), &OAILeadFormsApiHandler::leadForms_create);

    
    QString ad_account_id;
    fromStringValue(ad_account_idstr, ad_account_id);
     
    QJsonDocument doc;
    QList<OAILeadFormCreateRequest> oai_lead_form_create_request;
    if(socket->readJson(doc)){
        QJsonArray jsonArray = doc.array();
        foreach(QJsonValue obj, jsonArray) {
            OAILeadFormCreateRequest o;
            ::OpenAPI::fromJsonValue(o, obj);
            oai_lead_form_create_request.append(o);
        }
    }
    

    Q_EMIT leadForms_create(ad_account_id, oai_lead_form_create_request);
}


void OAILeadFormsApiRequest::leadForms_listRequest(const QString& ad_account_idstr){
    qDebug() << "/v5/ad_accounts/{ad_account_id}/lead_forms";
    connect(this, &OAILeadFormsApiRequest::leadForms_list, handler.data(), &OAILeadFormsApiHandler::leadForms_list);

    
    qint32 page_size;
    if(socket->queryString().keys().contains("page_size")){
        fromStringValue(socket->queryString().value("page_size"), page_size);
    }
    
    QString order;
    if(socket->queryString().keys().contains("order")){
        fromStringValue(socket->queryString().value("order"), order);
    }
    
    QString bookmark;
    if(socket->queryString().keys().contains("bookmark")){
        fromStringValue(socket->queryString().value("bookmark"), bookmark);
    }
    
    QString ad_account_id;
    fromStringValue(ad_account_idstr, ad_account_id);
    

    Q_EMIT leadForms_list(ad_account_id, page_size, order, bookmark);
}


void OAILeadFormsApiRequest::leadForms_updateRequest(const QString& ad_account_idstr){
    qDebug() << "/v5/ad_accounts/{ad_account_id}/lead_forms";
    connect(this, &OAILeadFormsApiRequest::leadForms_update, handler.data(), &OAILeadFormsApiHandler::leadForms_update);

    
    QString ad_account_id;
    fromStringValue(ad_account_idstr, ad_account_id);
     
    QJsonDocument doc;
    QList<OAILeadFormUpdateRequest> oai_lead_form_update_request;
    if(socket->readJson(doc)){
        QJsonArray jsonArray = doc.array();
        foreach(QJsonValue obj, jsonArray) {
            OAILeadFormUpdateRequest o;
            ::OpenAPI::fromJsonValue(o, obj);
            oai_lead_form_update_request.append(o);
        }
    }
    

    Q_EMIT leadForms_update(ad_account_id, oai_lead_form_update_request);
}



void OAILeadFormsApiRequest::leadFormTest_createResponse(const OAILeadFormTestResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAILeadFormsApiRequest::leadForm_getResponse(const OAILeadFormResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAILeadFormsApiRequest::leadForms_createResponse(const OAILeadFormArrayResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAILeadFormsApiRequest::leadForms_listResponse(const OAILead_forms_list_200_response& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAILeadFormsApiRequest::leadForms_updateResponse(const OAILeadFormArrayResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAILeadFormsApiRequest::leadFormTest_createError(const OAILeadFormTestResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAILeadFormsApiRequest::leadForm_getError(const OAILeadFormResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAILeadFormsApiRequest::leadForms_createError(const OAILeadFormArrayResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAILeadFormsApiRequest::leadForms_listError(const OAILead_forms_list_200_response& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAILeadFormsApiRequest::leadForms_updateError(const OAILeadFormArrayResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAILeadFormsApiRequest::sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type); // TODO
    socket->write(res);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAILeadFormsApiRequest::sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type);  // TODO
    socket->write(res->readAll());
    if(socket->isOpen()){
        socket->close();
    }
}

}
