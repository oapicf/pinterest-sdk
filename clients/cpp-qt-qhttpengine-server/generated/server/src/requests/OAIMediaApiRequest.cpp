/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>
#include <QDebug>

#include "OAIHelpers.h"
#include "OAIMediaApiRequest.h"

namespace OpenAPI {

OAIMediaApiRequest::OAIMediaApiRequest(QHttpEngine::Socket *s, QSharedPointer<OAIMediaApiHandler> hdl) : QObject(s), socket(s), handler(hdl) {
    auto headers = s->headers();
    for(auto itr = headers.begin(); itr != headers.end(); itr++) {
        requestHeaders.insert(QString(itr.key()), QString(itr.value()));
    }
}

OAIMediaApiRequest::~OAIMediaApiRequest(){
    disconnect(this, nullptr, nullptr, nullptr);
    qDebug() << "OAIMediaApiRequest::~OAIMediaApiRequest()";
}

QMap<QString, QString>
OAIMediaApiRequest::getRequestHeaders() const {
    return requestHeaders;
}

void OAIMediaApiRequest::setResponseHeaders(const QMultiMap<QString, QString>& headers){
    for(auto itr = headers.begin(); itr != headers.end(); ++itr) {
        responseHeaders.insert(itr.key(), itr.value());
    }
}


QHttpEngine::Socket* OAIMediaApiRequest::getRawSocket(){
    return socket;
}


void OAIMediaApiRequest::media_createRequest(){
    qDebug() << "/v5/media";
    connect(this, &OAIMediaApiRequest::media_create, handler.data(), &OAIMediaApiHandler::media_create);

    
 
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIMediaUploadRequest oai_media_upload_request;
    ::OpenAPI::fromJsonValue(oai_media_upload_request, obj);
    

    Q_EMIT media_create(oai_media_upload_request);
}


void OAIMediaApiRequest::media_getRequest(const QString& media_idstr){
    qDebug() << "/v5/media/{media_id}";
    connect(this, &OAIMediaApiRequest::media_get, handler.data(), &OAIMediaApiHandler::media_get);

    
    QString media_id;
    fromStringValue(media_idstr, media_id);
    

    Q_EMIT media_get(media_id);
}


void OAIMediaApiRequest::media_listRequest(){
    qDebug() << "/v5/media";
    connect(this, &OAIMediaApiRequest::media_list, handler.data(), &OAIMediaApiHandler::media_list);

    
    QString bookmark;
    if(socket->queryString().keys().contains("bookmark")){
        fromStringValue(socket->queryString().value("bookmark"), bookmark);
    }
    
    qint32 page_size;
    if(socket->queryString().keys().contains("page_size")){
        fromStringValue(socket->queryString().value("page_size"), page_size);
    }
    


    Q_EMIT media_list(bookmark, page_size);
}



void OAIMediaApiRequest::media_createResponse(const OAIMediaUpload& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIMediaApiRequest::media_getResponse(const OAIMediaUploadDetails& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIMediaApiRequest::media_listResponse(const OAIMedia_list_200_response& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAIMediaApiRequest::media_createError(const OAIMediaUpload& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIMediaApiRequest::media_getError(const OAIMediaUploadDetails& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIMediaApiRequest::media_listError(const OAIMedia_list_200_response& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAIMediaApiRequest::sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type); // TODO
    socket->write(res);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIMediaApiRequest::sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type);  // TODO
    socket->write(res->readAll());
    if(socket->isOpen()){
        socket->close();
    }
}

}
