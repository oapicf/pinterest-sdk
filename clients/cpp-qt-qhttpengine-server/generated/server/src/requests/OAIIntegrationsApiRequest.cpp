/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>
#include <QDebug>

#include "OAIHelpers.h"
#include "OAIIntegrationsApiRequest.h"

namespace OpenAPI {

OAIIntegrationsApiRequest::OAIIntegrationsApiRequest(QHttpEngine::Socket *s, QSharedPointer<OAIIntegrationsApiHandler> hdl) : QObject(s), socket(s), handler(hdl) {
    auto headers = s->headers();
    for(auto itr = headers.begin(); itr != headers.end(); itr++) {
        requestHeaders.insert(QString(itr.key()), QString(itr.value()));
    }
}

OAIIntegrationsApiRequest::~OAIIntegrationsApiRequest(){
    disconnect(this, nullptr, nullptr, nullptr);
    qDebug() << "OAIIntegrationsApiRequest::~OAIIntegrationsApiRequest()";
}

QMap<QString, QString>
OAIIntegrationsApiRequest::getRequestHeaders() const {
    return requestHeaders;
}

void OAIIntegrationsApiRequest::setResponseHeaders(const QMultiMap<QString, QString>& headers){
    for(auto itr = headers.begin(); itr != headers.end(); ++itr) {
        responseHeaders.insert(itr.key(), itr.value());
    }
}


QHttpEngine::Socket* OAIIntegrationsApiRequest::getRawSocket(){
    return socket;
}


void OAIIntegrationsApiRequest::integrationsCommerce_delRequest(const QString& external_business_idstr){
    qDebug() << "/v5/integrations/commerce/{external_business_id}";
    connect(this, &OAIIntegrationsApiRequest::integrationsCommerce_del, handler.data(), &OAIIntegrationsApiHandler::integrationsCommerce_del);

    
    QString external_business_id;
    fromStringValue(external_business_idstr, external_business_id);
    

    Q_EMIT integrationsCommerce_del(external_business_id);
}


void OAIIntegrationsApiRequest::integrationsCommerce_getRequest(const QString& external_business_idstr){
    qDebug() << "/v5/integrations/commerce/{external_business_id}";
    connect(this, &OAIIntegrationsApiRequest::integrationsCommerce_get, handler.data(), &OAIIntegrationsApiHandler::integrationsCommerce_get);

    
    QString external_business_id;
    fromStringValue(external_business_idstr, external_business_id);
    

    Q_EMIT integrationsCommerce_get(external_business_id);
}


void OAIIntegrationsApiRequest::integrationsCommerce_patchRequest(const QString& external_business_idstr){
    qDebug() << "/v5/integrations/commerce/{external_business_id}";
    connect(this, &OAIIntegrationsApiRequest::integrationsCommerce_patch, handler.data(), &OAIIntegrationsApiHandler::integrationsCommerce_patch);

    
    QString external_business_id;
    fromStringValue(external_business_idstr, external_business_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIIntegrationRequestPatch oai_integration_request_patch;
    ::OpenAPI::fromJsonValue(oai_integration_request_patch, obj);
    

    Q_EMIT integrationsCommerce_patch(external_business_id, oai_integration_request_patch);
}


void OAIIntegrationsApiRequest::integrationsCommerce_postRequest(){
    qDebug() << "/v5/integrations/commerce";
    connect(this, &OAIIntegrationsApiRequest::integrationsCommerce_post, handler.data(), &OAIIntegrationsApiHandler::integrationsCommerce_post);

    
 
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIIntegrationRequest oai_integration_request;
    ::OpenAPI::fromJsonValue(oai_integration_request, obj);
    

    Q_EMIT integrationsCommerce_post(oai_integration_request);
}


void OAIIntegrationsApiRequest::integrationsLogs_postRequest(){
    qDebug() << "/v5/integrations/logs";
    connect(this, &OAIIntegrationsApiRequest::integrationsLogs_post, handler.data(), &OAIIntegrationsApiHandler::integrationsLogs_post);

    
 
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIIntegrationLogsRequest oai_integration_logs_request;
    ::OpenAPI::fromJsonValue(oai_integration_logs_request, obj);
    

    Q_EMIT integrationsLogs_post(oai_integration_logs_request);
}


void OAIIntegrationsApiRequest::integrations_getByIdRequest(const QString& idstr){
    qDebug() << "/v5/integrations/{id}";
    connect(this, &OAIIntegrationsApiRequest::integrations_getById, handler.data(), &OAIIntegrationsApiHandler::integrations_getById);

    
    QString id;
    fromStringValue(idstr, id);
    

    Q_EMIT integrations_getById(id);
}


void OAIIntegrationsApiRequest::integrations_getListRequest(){
    qDebug() << "/v5/integrations";
    connect(this, &OAIIntegrationsApiRequest::integrations_getList, handler.data(), &OAIIntegrationsApiHandler::integrations_getList);

    
    QString bookmark;
    if(socket->queryString().keys().contains("bookmark")){
        fromStringValue(socket->queryString().value("bookmark"), bookmark);
    }
    
    qint32 page_size;
    if(socket->queryString().keys().contains("page_size")){
        fromStringValue(socket->queryString().value("page_size"), page_size);
    }
    


    Q_EMIT integrations_getList(bookmark, page_size);
}



void OAIIntegrationsApiRequest::integrationsCommerce_delResponse(){
    setSocketResponseHeaders();
    socket->setStatusCode(QHttpEngine::Socket::OK);
    socket->writeHeaders();
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIIntegrationsApiRequest::integrationsCommerce_getResponse(const OAIIntegrationMetadata& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIIntegrationsApiRequest::integrationsCommerce_patchResponse(const OAIIntegrationMetadata& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIIntegrationsApiRequest::integrationsCommerce_postResponse(const OAIIntegrationMetadata& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIIntegrationsApiRequest::integrationsLogs_postResponse(const OAIIntegrationLogsSuccessResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIIntegrationsApiRequest::integrations_getByIdResponse(const OAIIntegrationRecord& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIIntegrationsApiRequest::integrations_getListResponse(const OAIIntegrations_get_list_200_response& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAIIntegrationsApiRequest::integrationsCommerce_delError(QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    socket->setStatusCode(QHttpEngine::Socket::NotFound);
    socket->write(error_str.toUtf8());
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIIntegrationsApiRequest::integrationsCommerce_getError(const OAIIntegrationMetadata& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIIntegrationsApiRequest::integrationsCommerce_patchError(const OAIIntegrationMetadata& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIIntegrationsApiRequest::integrationsCommerce_postError(const OAIIntegrationMetadata& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIIntegrationsApiRequest::integrationsLogs_postError(const OAIIntegrationLogsSuccessResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIIntegrationsApiRequest::integrations_getByIdError(const OAIIntegrationRecord& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIIntegrationsApiRequest::integrations_getListError(const OAIIntegrations_get_list_200_response& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAIIntegrationsApiRequest::sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type); // TODO
    socket->write(res);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIIntegrationsApiRequest::sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type);  // TODO
    socket->write(res->readAll());
    if(socket->isOpen()){
        socket->close();
    }
}

}
