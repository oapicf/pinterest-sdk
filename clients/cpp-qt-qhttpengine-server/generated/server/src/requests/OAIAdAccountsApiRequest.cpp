/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>
#include <QDebug>

#include "OAIHelpers.h"
#include "OAIAdAccountsApiRequest.h"

namespace OpenAPI {

OAIAdAccountsApiRequest::OAIAdAccountsApiRequest(QHttpEngine::Socket *s, QSharedPointer<OAIAdAccountsApiHandler> hdl) : QObject(s), socket(s), handler(hdl) {
    auto headers = s->headers();
    for(auto itr = headers.begin(); itr != headers.end(); itr++) {
        requestHeaders.insert(QString(itr.key()), QString(itr.value()));
    }
}

OAIAdAccountsApiRequest::~OAIAdAccountsApiRequest(){
    disconnect(this, nullptr, nullptr, nullptr);
    qDebug() << "OAIAdAccountsApiRequest::~OAIAdAccountsApiRequest()";
}

QMap<QString, QString>
OAIAdAccountsApiRequest::getRequestHeaders() const {
    return requestHeaders;
}

void OAIAdAccountsApiRequest::setResponseHeaders(const QMultiMap<QString, QString>& headers){
    for(auto itr = headers.begin(); itr != headers.end(); ++itr) {
        responseHeaders.insert(itr.key(), itr.value());
    }
}


QHttpEngine::Socket* OAIAdAccountsApiRequest::getRawSocket(){
    return socket;
}


void OAIAdAccountsApiRequest::adAccountTargetingAnalytics_getRequest(const QString& ad_account_idstr){
    qDebug() << "/v5/ad_accounts/{ad_account_id}/targeting_analytics";
    connect(this, &OAIAdAccountsApiRequest::adAccountTargetingAnalytics_get, handler.data(), &OAIAdAccountsApiHandler::adAccountTargetingAnalytics_get);

    
    QDate start_date;
    if(socket->queryString().keys().contains("start_date")){
        fromStringValue(socket->queryString().value("start_date"), start_date);
    }
    
    QDate end_date;
    if(socket->queryString().keys().contains("end_date")){
        fromStringValue(socket->queryString().value("end_date"), end_date);
    }
    
    QList<OAIAdsAnalyticsTargetingType> targeting_types;
    if(socket->queryString().keys().contains("targeting_types")){
        fromStringValue(socket->queryString().values("targeting_types"), targeting_types);
    }
    
    QList<QString> columns;
    if(socket->queryString().keys().contains("columns")){
        fromStringValue(socket->queryString().values("columns"), columns);
    }
    
    OAIGranularity granularity;
    if(socket->queryString().keys().contains("granularity")){
        fromStringValue(socket->queryString().value("granularity"), granularity);
    }
    
    qint32 click_window_days;
    if(socket->queryString().keys().contains("click_window_days")){
        fromStringValue(socket->queryString().value("click_window_days"), click_window_days);
    }
    
    qint32 engagement_window_days;
    if(socket->queryString().keys().contains("engagement_window_days")){
        fromStringValue(socket->queryString().value("engagement_window_days"), engagement_window_days);
    }
    
    qint32 view_window_days;
    if(socket->queryString().keys().contains("view_window_days")){
        fromStringValue(socket->queryString().value("view_window_days"), view_window_days);
    }
    
    QString conversion_report_time;
    if(socket->queryString().keys().contains("conversion_report_time")){
        fromStringValue(socket->queryString().value("conversion_report_time"), conversion_report_time);
    }
    
    OAIConversionReportAttributionType attribution_types;
    if(socket->queryString().keys().contains("attribution_types")){
        fromStringValue(socket->queryString().value("attribution_types"), attribution_types);
    }
    
    QString ad_account_id;
    fromStringValue(ad_account_idstr, ad_account_id);
    

    Q_EMIT adAccountTargetingAnalytics_get(ad_account_id, start_date, end_date, targeting_types, columns, granularity, click_window_days, engagement_window_days, view_window_days, conversion_report_time, attribution_types);
}


void OAIAdAccountsApiRequest::adAccount_analyticsRequest(const QString& ad_account_idstr){
    qDebug() << "/v5/ad_accounts/{ad_account_id}/analytics";
    connect(this, &OAIAdAccountsApiRequest::adAccount_analytics, handler.data(), &OAIAdAccountsApiHandler::adAccount_analytics);

    
    QDate start_date;
    if(socket->queryString().keys().contains("start_date")){
        fromStringValue(socket->queryString().value("start_date"), start_date);
    }
    
    QDate end_date;
    if(socket->queryString().keys().contains("end_date")){
        fromStringValue(socket->queryString().value("end_date"), end_date);
    }
    
    QList<QString> columns;
    if(socket->queryString().keys().contains("columns")){
        fromStringValue(socket->queryString().values("columns"), columns);
    }
    
    OAIGranularity granularity;
    if(socket->queryString().keys().contains("granularity")){
        fromStringValue(socket->queryString().value("granularity"), granularity);
    }
    
    qint32 click_window_days;
    if(socket->queryString().keys().contains("click_window_days")){
        fromStringValue(socket->queryString().value("click_window_days"), click_window_days);
    }
    
    qint32 engagement_window_days;
    if(socket->queryString().keys().contains("engagement_window_days")){
        fromStringValue(socket->queryString().value("engagement_window_days"), engagement_window_days);
    }
    
    qint32 view_window_days;
    if(socket->queryString().keys().contains("view_window_days")){
        fromStringValue(socket->queryString().value("view_window_days"), view_window_days);
    }
    
    QString conversion_report_time;
    if(socket->queryString().keys().contains("conversion_report_time")){
        fromStringValue(socket->queryString().value("conversion_report_time"), conversion_report_time);
    }
    
    QString ad_account_id;
    fromStringValue(ad_account_idstr, ad_account_id);
    

    Q_EMIT adAccount_analytics(ad_account_id, start_date, end_date, columns, granularity, click_window_days, engagement_window_days, view_window_days, conversion_report_time);
}


void OAIAdAccountsApiRequest::adAccounts_createRequest(){
    qDebug() << "/v5/ad_accounts";
    connect(this, &OAIAdAccountsApiRequest::adAccounts_create, handler.data(), &OAIAdAccountsApiHandler::adAccounts_create);

    
 
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIAdAccountCreateRequest oaiad_account_create_request;
    ::OpenAPI::fromJsonValue(oaiad_account_create_request, obj);
    

    Q_EMIT adAccounts_create(oaiad_account_create_request);
}


void OAIAdAccountsApiRequest::adAccounts_getRequest(const QString& ad_account_idstr){
    qDebug() << "/v5/ad_accounts/{ad_account_id}";
    connect(this, &OAIAdAccountsApiRequest::adAccounts_get, handler.data(), &OAIAdAccountsApiHandler::adAccounts_get);

    
    QString ad_account_id;
    fromStringValue(ad_account_idstr, ad_account_id);
    

    Q_EMIT adAccounts_get(ad_account_id);
}


void OAIAdAccountsApiRequest::adAccounts_listRequest(){
    qDebug() << "/v5/ad_accounts";
    connect(this, &OAIAdAccountsApiRequest::adAccounts_list, handler.data(), &OAIAdAccountsApiHandler::adAccounts_list);

    
    QString bookmark;
    if(socket->queryString().keys().contains("bookmark")){
        fromStringValue(socket->queryString().value("bookmark"), bookmark);
    }
    
    qint32 page_size;
    if(socket->queryString().keys().contains("page_size")){
        fromStringValue(socket->queryString().value("page_size"), page_size);
    }
    
    bool include_shared_accounts;
    if(socket->queryString().keys().contains("include_shared_accounts")){
        fromStringValue(socket->queryString().value("include_shared_accounts"), include_shared_accounts);
    }
    


    Q_EMIT adAccounts_list(bookmark, page_size, include_shared_accounts);
}


void OAIAdAccountsApiRequest::analytics_createMmmReportRequest(const QString& ad_account_idstr){
    qDebug() << "/v5/ad_accounts/{ad_account_id}/mmm_reports";
    connect(this, &OAIAdAccountsApiRequest::analytics_createMmmReport, handler.data(), &OAIAdAccountsApiHandler::analytics_createMmmReport);

    
    QString ad_account_id;
    fromStringValue(ad_account_idstr, ad_account_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAICreateMMMReportRequest oai_create_mmm_report_request;
    ::OpenAPI::fromJsonValue(oai_create_mmm_report_request, obj);
    

    Q_EMIT analytics_createMmmReport(ad_account_id, oai_create_mmm_report_request);
}


void OAIAdAccountsApiRequest::analytics_createReportRequest(const QString& ad_account_idstr){
    qDebug() << "/v5/ad_accounts/{ad_account_id}/reports";
    connect(this, &OAIAdAccountsApiRequest::analytics_createReport, handler.data(), &OAIAdAccountsApiHandler::analytics_createReport);

    
    QString ad_account_id;
    fromStringValue(ad_account_idstr, ad_account_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIAdsAnalyticsCreateAsyncRequest oai_ads_analytics_create_async_request;
    ::OpenAPI::fromJsonValue(oai_ads_analytics_create_async_request, obj);
    

    Q_EMIT analytics_createReport(ad_account_id, oai_ads_analytics_create_async_request);
}


void OAIAdAccountsApiRequest::analytics_createTemplateReportRequest(const QString& ad_account_idstr, const QString& template_idstr){
    qDebug() << "/v5/ad_accounts/{ad_account_id}/templates/{template_id}/reports";
    connect(this, &OAIAdAccountsApiRequest::analytics_createTemplateReport, handler.data(), &OAIAdAccountsApiHandler::analytics_createTemplateReport);

    
    QDate start_date;
    if(socket->queryString().keys().contains("start_date")){
        fromStringValue(socket->queryString().value("start_date"), start_date);
    }
    
    QDate end_date;
    if(socket->queryString().keys().contains("end_date")){
        fromStringValue(socket->queryString().value("end_date"), end_date);
    }
    
    OAIGranularity granularity;
    if(socket->queryString().keys().contains("granularity")){
        fromStringValue(socket->queryString().value("granularity"), granularity);
    }
    
    QString ad_account_id;
    fromStringValue(ad_account_idstr, ad_account_id);
        QString template_id;
    fromStringValue(template_idstr, template_id);
    

    Q_EMIT analytics_createTemplateReport(ad_account_id, template_id, start_date, end_date, granularity);
}


void OAIAdAccountsApiRequest::analytics_getMmmReportRequest(const QString& ad_account_idstr){
    qDebug() << "/v5/ad_accounts/{ad_account_id}/mmm_reports";
    connect(this, &OAIAdAccountsApiRequest::analytics_getMmmReport, handler.data(), &OAIAdAccountsApiHandler::analytics_getMmmReport);

    
    QString token;
    if(socket->queryString().keys().contains("token")){
        fromStringValue(socket->queryString().value("token"), token);
    }
    
    QString ad_account_id;
    fromStringValue(ad_account_idstr, ad_account_id);
    

    Q_EMIT analytics_getMmmReport(ad_account_id, token);
}


void OAIAdAccountsApiRequest::analytics_getReportRequest(const QString& ad_account_idstr){
    qDebug() << "/v5/ad_accounts/{ad_account_id}/reports";
    connect(this, &OAIAdAccountsApiRequest::analytics_getReport, handler.data(), &OAIAdAccountsApiHandler::analytics_getReport);

    
    QString token;
    if(socket->queryString().keys().contains("token")){
        fromStringValue(socket->queryString().value("token"), token);
    }
    
    QString ad_account_id;
    fromStringValue(ad_account_idstr, ad_account_id);
    

    Q_EMIT analytics_getReport(ad_account_id, token);
}


void OAIAdAccountsApiRequest::sandbox_deleteRequest(const QString& ad_account_idstr){
    qDebug() << "/v5/ad_accounts/{ad_account_id}/sandbox";
    connect(this, &OAIAdAccountsApiRequest::sandbox_delete, handler.data(), &OAIAdAccountsApiHandler::sandbox_delete);

    
    QString ad_account_id;
    fromStringValue(ad_account_idstr, ad_account_id);
    

    Q_EMIT sandbox_delete(ad_account_id);
}


void OAIAdAccountsApiRequest::templates_listRequest(const QString& ad_account_idstr){
    qDebug() << "/v5/ad_accounts/{ad_account_id}/templates";
    connect(this, &OAIAdAccountsApiRequest::templates_list, handler.data(), &OAIAdAccountsApiHandler::templates_list);

    
    qint32 page_size;
    if(socket->queryString().keys().contains("page_size")){
        fromStringValue(socket->queryString().value("page_size"), page_size);
    }
    
    QString order;
    if(socket->queryString().keys().contains("order")){
        fromStringValue(socket->queryString().value("order"), order);
    }
    
    QString bookmark;
    if(socket->queryString().keys().contains("bookmark")){
        fromStringValue(socket->queryString().value("bookmark"), bookmark);
    }
    
    QString ad_account_id;
    fromStringValue(ad_account_idstr, ad_account_id);
    

    Q_EMIT templates_list(ad_account_id, page_size, order, bookmark);
}



void OAIAdAccountsApiRequest::adAccountTargetingAnalytics_getResponse(const OAIMetricsResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIAdAccountsApiRequest::adAccount_analyticsResponse(const QList<OAIAdAccountAnalyticsResponse_inner>& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toArray());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIAdAccountsApiRequest::adAccounts_createResponse(const OAIAdAccount& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIAdAccountsApiRequest::adAccounts_getResponse(const OAIAdAccount& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIAdAccountsApiRequest::adAccounts_listResponse(const OAIAd_accounts_list_200_response& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIAdAccountsApiRequest::analytics_createMmmReportResponse(const OAICreateMMMReportResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIAdAccountsApiRequest::analytics_createReportResponse(const OAIAdsAnalyticsCreateAsyncResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIAdAccountsApiRequest::analytics_createTemplateReportResponse(const OAIAdsAnalyticsCreateAsyncResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIAdAccountsApiRequest::analytics_getMmmReportResponse(const OAIGetMMMReportResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIAdAccountsApiRequest::analytics_getReportResponse(const OAIAdsAnalyticsGetAsyncResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIAdAccountsApiRequest::sandbox_deleteResponse(const QString& res){
    setSocketResponseHeaders();
    socket->write(::OpenAPI::toStringValue(res).toUtf8());
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIAdAccountsApiRequest::templates_listResponse(const OAITemplates_list_200_response& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAIAdAccountsApiRequest::adAccountTargetingAnalytics_getError(const OAIMetricsResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIAdAccountsApiRequest::adAccount_analyticsError(const QList<OAIAdAccountAnalyticsResponse_inner>& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toArray());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIAdAccountsApiRequest::adAccounts_createError(const OAIAdAccount& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIAdAccountsApiRequest::adAccounts_getError(const OAIAdAccount& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIAdAccountsApiRequest::adAccounts_listError(const OAIAd_accounts_list_200_response& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIAdAccountsApiRequest::analytics_createMmmReportError(const OAICreateMMMReportResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIAdAccountsApiRequest::analytics_createReportError(const OAIAdsAnalyticsCreateAsyncResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIAdAccountsApiRequest::analytics_createTemplateReportError(const OAIAdsAnalyticsCreateAsyncResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIAdAccountsApiRequest::analytics_getMmmReportError(const OAIGetMMMReportResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIAdAccountsApiRequest::analytics_getReportError(const OAIAdsAnalyticsGetAsyncResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIAdAccountsApiRequest::sandbox_deleteError(const QString& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    socket->write(::OpenAPI::toStringValue(res).toUtf8());
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIAdAccountsApiRequest::templates_listError(const OAITemplates_list_200_response& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAIAdAccountsApiRequest::sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type); // TODO
    socket->write(res);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIAdAccountsApiRequest::sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type);  // TODO
    socket->write(res->readAll());
    if(socket->isOpen()){
        socket->close();
    }
}

}
