/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>
#include <QDebug>

#include "OAIHelpers.h"
#include "OAITermsApiRequest.h"

namespace OpenAPI {

OAITermsApiRequest::OAITermsApiRequest(QHttpEngine::Socket *s, QSharedPointer<OAITermsApiHandler> hdl) : QObject(s), socket(s), handler(hdl) {
    auto headers = s->headers();
    for(auto itr = headers.begin(); itr != headers.end(); itr++) {
        requestHeaders.insert(QString(itr.key()), QString(itr.value()));
    }
}

OAITermsApiRequest::~OAITermsApiRequest(){
    disconnect(this, nullptr, nullptr, nullptr);
    qDebug() << "OAITermsApiRequest::~OAITermsApiRequest()";
}

QMap<QString, QString>
OAITermsApiRequest::getRequestHeaders() const {
    return requestHeaders;
}

void OAITermsApiRequest::setResponseHeaders(const QMultiMap<QString, QString>& headers){
    for(auto itr = headers.begin(); itr != headers.end(); ++itr) {
        responseHeaders.insert(itr.key(), itr.value());
    }
}


QHttpEngine::Socket* OAITermsApiRequest::getRawSocket(){
    return socket;
}


void OAITermsApiRequest::termsRelated_listRequest(){
    qDebug() << "/v5/terms/related";
    connect(this, &OAITermsApiRequest::termsRelated_list, handler.data(), &OAITermsApiHandler::termsRelated_list);

    
    QList<QString> terms;
    if(socket->queryString().keys().contains("terms")){
        fromStringValue(socket->queryString().values("terms"), terms);
    }
    


    Q_EMIT termsRelated_list(terms);
}


void OAITermsApiRequest::termsSuggested_listRequest(){
    qDebug() << "/v5/terms/suggested";
    connect(this, &OAITermsApiRequest::termsSuggested_list, handler.data(), &OAITermsApiHandler::termsSuggested_list);

    
    QString term;
    if(socket->queryString().keys().contains("term")){
        fromStringValue(socket->queryString().value("term"), term);
    }
    
    qint32 limit;
    if(socket->queryString().keys().contains("limit")){
        fromStringValue(socket->queryString().value("limit"), limit);
    }
    


    Q_EMIT termsSuggested_list(term, limit);
}



void OAITermsApiRequest::termsRelated_listResponse(const OAIRelatedTerms& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAITermsApiRequest::termsSuggested_listResponse(const QList<QString>& res){
    setSocketResponseHeaders();
    socket->write(QString("["+::OpenAPI::toStringValue(res)+"]").toUtf8());
    if(socket->isOpen()){
        socket->close();
    }
}


void OAITermsApiRequest::termsRelated_listError(const OAIRelatedTerms& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAITermsApiRequest::termsSuggested_listError(const QList<QString>& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    socket->write(QString("["+::OpenAPI::toStringValue(res)+"]").toUtf8());
    if(socket->isOpen()){
        socket->close();
    }
}


void OAITermsApiRequest::sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type); // TODO
    socket->write(res);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAITermsApiRequest::sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type);  // TODO
    socket->write(res->readAll());
    if(socket->isOpen()){
        socket->close();
    }
}

}
