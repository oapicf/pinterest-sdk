/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>
#include <QDebug>

#include "OAIHelpers.h"
#include "OAIBusinessAccessInviteApiRequest.h"

namespace OpenAPI {

OAIBusinessAccessInviteApiRequest::OAIBusinessAccessInviteApiRequest(QHttpEngine::Socket *s, QSharedPointer<OAIBusinessAccessInviteApiHandler> hdl) : QObject(s), socket(s), handler(hdl) {
    auto headers = s->headers();
    for(auto itr = headers.begin(); itr != headers.end(); itr++) {
        requestHeaders.insert(QString(itr.key()), QString(itr.value()));
    }
}

OAIBusinessAccessInviteApiRequest::~OAIBusinessAccessInviteApiRequest(){
    disconnect(this, nullptr, nullptr, nullptr);
    qDebug() << "OAIBusinessAccessInviteApiRequest::~OAIBusinessAccessInviteApiRequest()";
}

QMap<QString, QString>
OAIBusinessAccessInviteApiRequest::getRequestHeaders() const {
    return requestHeaders;
}

void OAIBusinessAccessInviteApiRequest::setResponseHeaders(const QMultiMap<QString, QString>& headers){
    for(auto itr = headers.begin(); itr != headers.end(); ++itr) {
        responseHeaders.insert(itr.key(), itr.value());
    }
}


QHttpEngine::Socket* OAIBusinessAccessInviteApiRequest::getRawSocket(){
    return socket;
}


void OAIBusinessAccessInviteApiRequest::assetAccessRequests_createRequest(const QString& business_idstr){
    qDebug() << "/v5/businesses/{business_id}/requests/assets/access";
    connect(this, &OAIBusinessAccessInviteApiRequest::assetAccessRequests_create, handler.data(), &OAIBusinessAccessInviteApiHandler::assetAccessRequests_create);

    
    QString business_id;
    fromStringValue(business_idstr, business_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAICreateAssetAccessRequestBody oai_create_asset_access_request_body;
    ::OpenAPI::fromJsonValue(oai_create_asset_access_request_body, obj);
    

    Q_EMIT assetAccessRequests_create(business_id, oai_create_asset_access_request_body);
}


void OAIBusinessAccessInviteApiRequest::cancelInvitesOrRequestsRequest(const QString& business_idstr){
    qDebug() << "/v5/businesses/{business_id}/invites";
    connect(this, &OAIBusinessAccessInviteApiRequest::cancelInvitesOrRequests, handler.data(), &OAIBusinessAccessInviteApiHandler::cancelInvitesOrRequests);

    
    QString business_id;
    fromStringValue(business_idstr, business_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAICancelInvitesBody oai_cancel_invites_body;
    ::OpenAPI::fromJsonValue(oai_cancel_invites_body, obj);
    

    Q_EMIT cancelInvitesOrRequests(business_id, oai_cancel_invites_body);
}


void OAIBusinessAccessInviteApiRequest::createAssetInvitesRequest(const QString& business_idstr){
    qDebug() << "/v5/businesses/{business_id}/invites/assets/access";
    connect(this, &OAIBusinessAccessInviteApiRequest::createAssetInvites, handler.data(), &OAIBusinessAccessInviteApiHandler::createAssetInvites);

    
    QString business_id;
    fromStringValue(business_idstr, business_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAICreateAssetInvitesRequest oai_create_asset_invites_request;
    ::OpenAPI::fromJsonValue(oai_create_asset_invites_request, obj);
    

    Q_EMIT createAssetInvites(business_id, oai_create_asset_invites_request);
}


void OAIBusinessAccessInviteApiRequest::createMembershipOrPartnershipInvitesRequest(const QString& business_idstr){
    qDebug() << "/v5/businesses/{business_id}/invites";
    connect(this, &OAIBusinessAccessInviteApiRequest::createMembershipOrPartnershipInvites, handler.data(), &OAIBusinessAccessInviteApiHandler::createMembershipOrPartnershipInvites);

    
    QString business_id;
    fromStringValue(business_idstr, business_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAICreateMembershipOrPartnershipInvitesBody oai_create_membership_or_partnership_invites_body;
    ::OpenAPI::fromJsonValue(oai_create_membership_or_partnership_invites_body, obj);
    

    Q_EMIT createMembershipOrPartnershipInvites(business_id, oai_create_membership_or_partnership_invites_body);
}


void OAIBusinessAccessInviteApiRequest::get_invitesRequest(const QString& business_idstr){
    qDebug() << "/v5/businesses/{business_id}/invites";
    connect(this, &OAIBusinessAccessInviteApiRequest::get_invites, handler.data(), &OAIBusinessAccessInviteApiHandler::get_invites);

    
    bool is_member;
    if(socket->queryString().keys().contains("is_member")){
        fromStringValue(socket->queryString().value("is_member"), is_member);
    }
    
    QList<QString> invite_status;
    if(socket->queryString().keys().contains("invite_status")){
        fromStringValue(socket->queryString().values("invite_status"), invite_status);
    }
    
    OAIInviteType invite_type;
    if(socket->queryString().keys().contains("invite_type")){
        fromStringValue(socket->queryString().value("invite_type"), invite_type);
    }
    
    QString bookmark;
    if(socket->queryString().keys().contains("bookmark")){
        fromStringValue(socket->queryString().value("bookmark"), bookmark);
    }
    
    qint32 page_size;
    if(socket->queryString().keys().contains("page_size")){
        fromStringValue(socket->queryString().value("page_size"), page_size);
    }
    
    QString business_id;
    fromStringValue(business_idstr, business_id);
    

    Q_EMIT get_invites(business_id, is_member, invite_status, invite_type, bookmark, page_size);
}


void OAIBusinessAccessInviteApiRequest::respondBusinessAccessInvitesRequest(){
    qDebug() << "/v5/businesses/invites";
    connect(this, &OAIBusinessAccessInviteApiRequest::respondBusinessAccessInvites, handler.data(), &OAIBusinessAccessInviteApiHandler::respondBusinessAccessInvites);

    
 
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIAuthRespondInvitesBody oai_auth_respond_invites_body;
    ::OpenAPI::fromJsonValue(oai_auth_respond_invites_body, obj);
    

    Q_EMIT respondBusinessAccessInvites(oai_auth_respond_invites_body);
}



void OAIBusinessAccessInviteApiRequest::assetAccessRequests_createResponse(const OAICreateAssetAccessRequestResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBusinessAccessInviteApiRequest::cancelInvitesOrRequestsResponse(const OAIDeleteInvitesResultsResponseArray& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBusinessAccessInviteApiRequest::createAssetInvitesResponse(const OAIUpdateInvitesResultsResponseArray& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBusinessAccessInviteApiRequest::createMembershipOrPartnershipInvitesResponse(const OAICreateInvitesResultsResponseArray& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBusinessAccessInviteApiRequest::get_invitesResponse(const OAIGet_invites_200_response& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBusinessAccessInviteApiRequest::respondBusinessAccessInvitesResponse(const OAIRespondToInvitesResponseArray& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAIBusinessAccessInviteApiRequest::assetAccessRequests_createError(const OAICreateAssetAccessRequestResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBusinessAccessInviteApiRequest::cancelInvitesOrRequestsError(const OAIDeleteInvitesResultsResponseArray& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBusinessAccessInviteApiRequest::createAssetInvitesError(const OAIUpdateInvitesResultsResponseArray& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBusinessAccessInviteApiRequest::createMembershipOrPartnershipInvitesError(const OAICreateInvitesResultsResponseArray& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBusinessAccessInviteApiRequest::get_invitesError(const OAIGet_invites_200_response& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBusinessAccessInviteApiRequest::respondBusinessAccessInvitesError(const OAIRespondToInvitesResponseArray& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAIBusinessAccessInviteApiRequest::sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type); // TODO
    socket->write(res);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBusinessAccessInviteApiRequest::sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type);  // TODO
    socket->write(res->readAll());
    if(socket->isOpen()){
        socket->close();
    }
}

}
