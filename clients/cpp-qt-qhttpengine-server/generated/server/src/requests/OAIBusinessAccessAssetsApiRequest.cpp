/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>
#include <QDebug>

#include "OAIHelpers.h"
#include "OAIBusinessAccessAssetsApiRequest.h"

namespace OpenAPI {

OAIBusinessAccessAssetsApiRequest::OAIBusinessAccessAssetsApiRequest(QHttpEngine::Socket *s, QSharedPointer<OAIBusinessAccessAssetsApiHandler> hdl) : QObject(s), socket(s), handler(hdl) {
    auto headers = s->headers();
    for(auto itr = headers.begin(); itr != headers.end(); itr++) {
        requestHeaders.insert(QString(itr.key()), QString(itr.value()));
    }
}

OAIBusinessAccessAssetsApiRequest::~OAIBusinessAccessAssetsApiRequest(){
    disconnect(this, nullptr, nullptr, nullptr);
    qDebug() << "OAIBusinessAccessAssetsApiRequest::~OAIBusinessAccessAssetsApiRequest()";
}

QMap<QString, QString>
OAIBusinessAccessAssetsApiRequest::getRequestHeaders() const {
    return requestHeaders;
}

void OAIBusinessAccessAssetsApiRequest::setResponseHeaders(const QMultiMap<QString, QString>& headers){
    for(auto itr = headers.begin(); itr != headers.end(); ++itr) {
        responseHeaders.insert(itr.key(), itr.value());
    }
}


QHttpEngine::Socket* OAIBusinessAccessAssetsApiRequest::getRawSocket(){
    return socket;
}


void OAIBusinessAccessAssetsApiRequest::assetGroup_createRequest(const QString& business_idstr){
    qDebug() << "/v5/businesses/{business_id}/asset_groups";
    connect(this, &OAIBusinessAccessAssetsApiRequest::assetGroup_create, handler.data(), &OAIBusinessAccessAssetsApiHandler::assetGroup_create);

    
    QString business_id;
    fromStringValue(business_idstr, business_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAICreateAssetGroupBody oai_create_asset_group_body;
    ::OpenAPI::fromJsonValue(oai_create_asset_group_body, obj);
    

    Q_EMIT assetGroup_create(business_id, oai_create_asset_group_body);
}


void OAIBusinessAccessAssetsApiRequest::assetGroup_deleteRequest(const QString& business_idstr){
    qDebug() << "/v5/businesses/{business_id}/asset_groups";
    connect(this, &OAIBusinessAccessAssetsApiRequest::assetGroup_delete, handler.data(), &OAIBusinessAccessAssetsApiHandler::assetGroup_delete);

    
    QString business_id;
    fromStringValue(business_idstr, business_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIDeleteAssetGroupBody oai_delete_asset_group_body;
    ::OpenAPI::fromJsonValue(oai_delete_asset_group_body, obj);
    

    Q_EMIT assetGroup_delete(business_id, oai_delete_asset_group_body);
}


void OAIBusinessAccessAssetsApiRequest::assetGroup_updateRequest(const QString& business_idstr){
    qDebug() << "/v5/businesses/{business_id}/asset_groups";
    connect(this, &OAIBusinessAccessAssetsApiRequest::assetGroup_update, handler.data(), &OAIBusinessAccessAssetsApiHandler::assetGroup_update);

    
    QString business_id;
    fromStringValue(business_idstr, business_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIUpdateAssetGroupBody oai_update_asset_group_body;
    ::OpenAPI::fromJsonValue(oai_update_asset_group_body, obj);
    

    Q_EMIT assetGroup_update(business_id, oai_update_asset_group_body);
}


void OAIBusinessAccessAssetsApiRequest::businessAssetMembers_getRequest(const QString& business_idstr, const QString& asset_idstr){
    qDebug() << "/v5/businesses/{business_id}/assets/{asset_id}/members";
    connect(this, &OAIBusinessAccessAssetsApiRequest::businessAssetMembers_get, handler.data(), &OAIBusinessAccessAssetsApiHandler::businessAssetMembers_get);

    
    QString bookmark;
    if(socket->queryString().keys().contains("bookmark")){
        fromStringValue(socket->queryString().value("bookmark"), bookmark);
    }
    
    qint32 page_size;
    if(socket->queryString().keys().contains("page_size")){
        fromStringValue(socket->queryString().value("page_size"), page_size);
    }
    
    qint32 start_index;
    if(socket->queryString().keys().contains("start_index")){
        fromStringValue(socket->queryString().value("start_index"), start_index);
    }
    
    QString business_id;
    fromStringValue(business_idstr, business_id);
        QString asset_id;
    fromStringValue(asset_idstr, asset_id);
    

    Q_EMIT businessAssetMembers_get(business_id, asset_id, bookmark, page_size, start_index);
}


void OAIBusinessAccessAssetsApiRequest::businessAssetPartners_getRequest(const QString& business_idstr, const QString& asset_idstr){
    qDebug() << "/v5/businesses/{business_id}/assets/{asset_id}/partners";
    connect(this, &OAIBusinessAccessAssetsApiRequest::businessAssetPartners_get, handler.data(), &OAIBusinessAccessAssetsApiHandler::businessAssetPartners_get);

    
    qint32 start_index;
    if(socket->queryString().keys().contains("start_index")){
        fromStringValue(socket->queryString().value("start_index"), start_index);
    }
    
    QString bookmark;
    if(socket->queryString().keys().contains("bookmark")){
        fromStringValue(socket->queryString().value("bookmark"), bookmark);
    }
    
    qint32 page_size;
    if(socket->queryString().keys().contains("page_size")){
        fromStringValue(socket->queryString().value("page_size"), page_size);
    }
    
    QString business_id;
    fromStringValue(business_idstr, business_id);
        QString asset_id;
    fromStringValue(asset_idstr, asset_id);
    

    Q_EMIT businessAssetPartners_get(business_id, asset_id, start_index, bookmark, page_size);
}


void OAIBusinessAccessAssetsApiRequest::businessAssets_getRequest(const QString& business_idstr){
    qDebug() << "/v5/businesses/{business_id}/assets";
    connect(this, &OAIBusinessAccessAssetsApiRequest::businessAssets_get, handler.data(), &OAIBusinessAccessAssetsApiHandler::businessAssets_get);

    
    QList<OAIPermissionsWithOwner> permissions;
    if(socket->queryString().keys().contains("permissions")){
        fromStringValue(socket->queryString().values("permissions"), permissions);
    }
    
    QString child_asset_id;
    if(socket->queryString().keys().contains("child_asset_id")){
        fromStringValue(socket->queryString().value("child_asset_id"), child_asset_id);
    }
    
    QString asset_group_id;
    if(socket->queryString().keys().contains("asset_group_id")){
        fromStringValue(socket->queryString().value("asset_group_id"), asset_group_id);
    }
    
    QString asset_type;
    if(socket->queryString().keys().contains("asset_type")){
        fromStringValue(socket->queryString().value("asset_type"), asset_type);
    }
    
    qint32 start_index;
    if(socket->queryString().keys().contains("start_index")){
        fromStringValue(socket->queryString().value("start_index"), start_index);
    }
    
    QString bookmark;
    if(socket->queryString().keys().contains("bookmark")){
        fromStringValue(socket->queryString().value("bookmark"), bookmark);
    }
    
    qint32 page_size;
    if(socket->queryString().keys().contains("page_size")){
        fromStringValue(socket->queryString().value("page_size"), page_size);
    }
    
    QString business_id;
    fromStringValue(business_idstr, business_id);
    

    Q_EMIT businessAssets_get(business_id, permissions, child_asset_id, asset_group_id, asset_type, start_index, bookmark, page_size);
}


void OAIBusinessAccessAssetsApiRequest::businessMemberAssets_getRequest(const QString& business_idstr, const QString& member_idstr){
    qDebug() << "/v5/businesses/{business_id}/members/{member_id}/assets";
    connect(this, &OAIBusinessAccessAssetsApiRequest::businessMemberAssets_get, handler.data(), &OAIBusinessAccessAssetsApiHandler::businessMemberAssets_get);

    
    QString asset_type;
    if(socket->queryString().keys().contains("asset_type")){
        fromStringValue(socket->queryString().value("asset_type"), asset_type);
    }
    
    qint32 start_index;
    if(socket->queryString().keys().contains("start_index")){
        fromStringValue(socket->queryString().value("start_index"), start_index);
    }
    
    QString bookmark;
    if(socket->queryString().keys().contains("bookmark")){
        fromStringValue(socket->queryString().value("bookmark"), bookmark);
    }
    
    qint32 page_size;
    if(socket->queryString().keys().contains("page_size")){
        fromStringValue(socket->queryString().value("page_size"), page_size);
    }
    
    QString business_id;
    fromStringValue(business_idstr, business_id);
        QString member_id;
    fromStringValue(member_idstr, member_id);
    

    Q_EMIT businessMemberAssets_get(business_id, member_id, asset_type, start_index, bookmark, page_size);
}


void OAIBusinessAccessAssetsApiRequest::businessMembersAssetAccess_deleteRequest(const QString& business_idstr){
    qDebug() << "/v5/businesses/{business_id}/members/assets/access";
    connect(this, &OAIBusinessAccessAssetsApiRequest::businessMembersAssetAccess_delete, handler.data(), &OAIBusinessAccessAssetsApiHandler::businessMembersAssetAccess_delete);

    
    QString business_id;
    fromStringValue(business_idstr, business_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIBusiness_members_asset_access_delete_request oai_business_members_asset_access_delete_request;
    ::OpenAPI::fromJsonValue(oai_business_members_asset_access_delete_request, obj);
    

    Q_EMIT businessMembersAssetAccess_delete(business_id, oai_business_members_asset_access_delete_request);
}


void OAIBusinessAccessAssetsApiRequest::businessMembersAssetAccess_updateRequest(const QString& business_idstr){
    qDebug() << "/v5/businesses/{business_id}/members/assets/access";
    connect(this, &OAIBusinessAccessAssetsApiRequest::businessMembersAssetAccess_update, handler.data(), &OAIBusinessAccessAssetsApiHandler::businessMembersAssetAccess_update);

    
    QString business_id;
    fromStringValue(business_idstr, business_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIUpdateMemberAssetAccessBody oai_update_member_asset_access_body;
    ::OpenAPI::fromJsonValue(oai_update_member_asset_access_body, obj);
    

    Q_EMIT businessMembersAssetAccess_update(business_id, oai_update_member_asset_access_body);
}


void OAIBusinessAccessAssetsApiRequest::businessPartnerAssetAccess_getRequest(const QString& business_idstr, const QString& partner_idstr){
    qDebug() << "/v5/businesses/{business_id}/partners/{partner_id}/assets";
    connect(this, &OAIBusinessAccessAssetsApiRequest::businessPartnerAssetAccess_get, handler.data(), &OAIBusinessAccessAssetsApiHandler::businessPartnerAssetAccess_get);

    
    OAIPartnerType partner_type;
    if(socket->queryString().keys().contains("partner_type")){
        fromStringValue(socket->queryString().value("partner_type"), partner_type);
    }
    
    QString asset_type;
    if(socket->queryString().keys().contains("asset_type")){
        fromStringValue(socket->queryString().value("asset_type"), asset_type);
    }
    
    qint32 start_index;
    if(socket->queryString().keys().contains("start_index")){
        fromStringValue(socket->queryString().value("start_index"), start_index);
    }
    
    qint32 page_size;
    if(socket->queryString().keys().contains("page_size")){
        fromStringValue(socket->queryString().value("page_size"), page_size);
    }
    
    QString bookmark;
    if(socket->queryString().keys().contains("bookmark")){
        fromStringValue(socket->queryString().value("bookmark"), bookmark);
    }
    
    QString business_id;
    fromStringValue(business_idstr, business_id);
        QString partner_id;
    fromStringValue(partner_idstr, partner_id);
    

    Q_EMIT businessPartnerAssetAccess_get(business_id, partner_id, partner_type, asset_type, start_index, page_size, bookmark);
}


void OAIBusinessAccessAssetsApiRequest::deletePartnerAssetAccessHandlerImplRequest(const QString& business_idstr){
    qDebug() << "/v5/businesses/{business_id}/partners/assets";
    connect(this, &OAIBusinessAccessAssetsApiRequest::deletePartnerAssetAccessHandlerImpl, handler.data(), &OAIBusinessAccessAssetsApiHandler::deletePartnerAssetAccessHandlerImpl);

    
    QString business_id;
    fromStringValue(business_idstr, business_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIDeletePartnerAssetAccessBody oai_delete_partner_asset_access_body;
    ::OpenAPI::fromJsonValue(oai_delete_partner_asset_access_body, obj);
    

    Q_EMIT deletePartnerAssetAccessHandlerImpl(business_id, oai_delete_partner_asset_access_body);
}


void OAIBusinessAccessAssetsApiRequest::updatePartnerAssetAccessHandlerImplRequest(const QString& business_idstr){
    qDebug() << "/v5/businesses/{business_id}/partners/assets";
    connect(this, &OAIBusinessAccessAssetsApiRequest::updatePartnerAssetAccessHandlerImpl, handler.data(), &OAIBusinessAccessAssetsApiHandler::updatePartnerAssetAccessHandlerImpl);

    
    QString business_id;
    fromStringValue(business_idstr, business_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIUpdatePartnerAssetAccessBody oai_update_partner_asset_access_body;
    ::OpenAPI::fromJsonValue(oai_update_partner_asset_access_body, obj);
    

    Q_EMIT updatePartnerAssetAccessHandlerImpl(business_id, oai_update_partner_asset_access_body);
}



void OAIBusinessAccessAssetsApiRequest::assetGroup_createResponse(const OAICreateAssetGroupResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBusinessAccessAssetsApiRequest::assetGroup_deleteResponse(const OAIDeleteAssetGroupResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBusinessAccessAssetsApiRequest::assetGroup_updateResponse(const OAIUpdateAssetGroupResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBusinessAccessAssetsApiRequest::businessAssetMembers_getResponse(const OAIBusiness_asset_members_get_200_response& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBusinessAccessAssetsApiRequest::businessAssetPartners_getResponse(const OAIBusiness_asset_partners_get_200_response& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBusinessAccessAssetsApiRequest::businessAssets_getResponse(const OAIBusiness_assets_get_200_response& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBusinessAccessAssetsApiRequest::businessMemberAssets_getResponse(const OAIBusiness_member_assets_get_200_response& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBusinessAccessAssetsApiRequest::businessMembersAssetAccess_deleteResponse(const OAIDeleteMemberAccessResultsResponseArray& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBusinessAccessAssetsApiRequest::businessMembersAssetAccess_updateResponse(const OAIUpdateMemberAssetsResultsResponseArray& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBusinessAccessAssetsApiRequest::businessPartnerAssetAccess_getResponse(const OAIBusiness_partner_asset_access_get_200_response& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBusinessAccessAssetsApiRequest::deletePartnerAssetAccessHandlerImplResponse(const OAIDeletePartnerAssetsResultsResponseArray& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBusinessAccessAssetsApiRequest::updatePartnerAssetAccessHandlerImplResponse(const OAIUpdatePartnerAssetsResultsResponseArray& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAIBusinessAccessAssetsApiRequest::assetGroup_createError(const OAICreateAssetGroupResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBusinessAccessAssetsApiRequest::assetGroup_deleteError(const OAIDeleteAssetGroupResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBusinessAccessAssetsApiRequest::assetGroup_updateError(const OAIUpdateAssetGroupResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBusinessAccessAssetsApiRequest::businessAssetMembers_getError(const OAIBusiness_asset_members_get_200_response& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBusinessAccessAssetsApiRequest::businessAssetPartners_getError(const OAIBusiness_asset_partners_get_200_response& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBusinessAccessAssetsApiRequest::businessAssets_getError(const OAIBusiness_assets_get_200_response& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBusinessAccessAssetsApiRequest::businessMemberAssets_getError(const OAIBusiness_member_assets_get_200_response& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBusinessAccessAssetsApiRequest::businessMembersAssetAccess_deleteError(const OAIDeleteMemberAccessResultsResponseArray& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBusinessAccessAssetsApiRequest::businessMembersAssetAccess_updateError(const OAIUpdateMemberAssetsResultsResponseArray& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBusinessAccessAssetsApiRequest::businessPartnerAssetAccess_getError(const OAIBusiness_partner_asset_access_get_200_response& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBusinessAccessAssetsApiRequest::deletePartnerAssetAccessHandlerImplError(const OAIDeletePartnerAssetsResultsResponseArray& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBusinessAccessAssetsApiRequest::updatePartnerAssetAccessHandlerImplError(const OAIUpdatePartnerAssetsResultsResponseArray& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAIBusinessAccessAssetsApiRequest::sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type); // TODO
    socket->write(res);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBusinessAccessAssetsApiRequest::sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type);  // TODO
    socket->write(res->readAll());
    if(socket->isOpen()){
        socket->close();
    }
}

}
