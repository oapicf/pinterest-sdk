/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAILeadsExportApiRequest_H
#define OAI_OAILeadsExportApiRequest_H

#include <QObject>
#include <QStringList>
#include <QMultiMap>
#include <QNetworkReply>
#include <QSharedPointer>

#include <qhttpengine/socket.h>
#include "OAIError.h"
#include "OAILeadsExportCreateRequest.h"
#include "OAILeadsExportCreateResponse.h"
#include "OAILeadsExportResponseData.h"
#include <QString>
#include "OAILeadsExportApiHandler.h"

namespace OpenAPI {

class OAILeadsExportApiRequest : public QObject
{
    Q_OBJECT

public:
    OAILeadsExportApiRequest(QHttpEngine::Socket *s, QSharedPointer<OAILeadsExportApiHandler> handler);
    virtual ~OAILeadsExportApiRequest();

    void leadsExport_createRequest(const QString& ad_account_id);
    void leadsExport_getRequest(const QString& ad_account_id, const QString& leads_export_id);
    

    void leadsExport_createResponse(const OAILeadsExportCreateResponse& res);
    void leadsExport_getResponse(const OAILeadsExportResponseData& res);
    

    void leadsExport_createError(const OAILeadsExportCreateResponse& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void leadsExport_getError(const OAILeadsExportResponseData& res, QNetworkReply::NetworkError error_type, QString& error_str);
    

    void sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type);

    void sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type);

    QMap<QString, QString> getRequestHeaders() const;

    QHttpEngine::Socket* getRawSocket();

    void setResponseHeaders(const QMultiMap<QString,QString>& headers);

Q_SIGNALS:
    void leadsExport_create(QString ad_account_id, OAILeadsExportCreateRequest oai_leads_export_create_request);
    void leadsExport_get(QString ad_account_id, QString leads_export_id);
    

private:
    QMap<QString, QString> requestHeaders;
    QMap<QString, QString> responseHeaders;
    QHttpEngine::Socket  *socket;
    QSharedPointer<OAILeadsExportApiHandler> handler;

    inline void setSocketResponseHeaders(){
        QHttpEngine::Socket::HeaderMap resHeaders;
        for(auto itr = responseHeaders.begin(); itr != responseHeaders.end(); ++itr) {
            resHeaders.insert(itr.key().toUtf8(), itr.value().toUtf8());
        }
        socket->setHeaders(resHeaders);
    }
};

}

#endif // OAI_OAILeadsExportApiRequest_H
