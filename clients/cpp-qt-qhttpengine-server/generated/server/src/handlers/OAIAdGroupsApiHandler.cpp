/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>
#include <QDebug>

#include "OAIAdGroupsApiHandler.h"
#include "OAIAdGroupsApiRequest.h"

namespace OpenAPI {

OAIAdGroupsApiHandler::OAIAdGroupsApiHandler(){

}

OAIAdGroupsApiHandler::~OAIAdGroupsApiHandler(){

}

void OAIAdGroupsApiHandler::adGroupsBidFloor_get(QString ad_account_id, OAIBidFloorRequest oai_bid_floor_request) {
    Q_UNUSED(ad_account_id);
    Q_UNUSED(oai_bid_floor_request);
    auto reqObj = qobject_cast<OAIAdGroupsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIBidFloor res;
        reqObj->adGroupsBidFloor_getResponse(res);
    }
}
void OAIAdGroupsApiHandler::adGroupsTargetingAnalytics_get(QString ad_account_id, QList<QString> ad_group_ids, QDate start_date, QDate end_date, QList<OAIAdsAnalyticsTargetingType> targeting_types, QList<QString> columns, OAIGranularity granularity, qint32 click_window_days, qint32 engagement_window_days, qint32 view_window_days, QString conversion_report_time, OAIConversionReportAttributionType attribution_types) {
    Q_UNUSED(ad_account_id);
    Q_UNUSED(ad_group_ids);
    Q_UNUSED(start_date);
    Q_UNUSED(end_date);
    Q_UNUSED(targeting_types);
    Q_UNUSED(columns);
    Q_UNUSED(granularity);
    Q_UNUSED(click_window_days);
    Q_UNUSED(engagement_window_days);
    Q_UNUSED(view_window_days);
    Q_UNUSED(conversion_report_time);
    Q_UNUSED(attribution_types);
    auto reqObj = qobject_cast<OAIAdGroupsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIMetricsResponse res;
        reqObj->adGroupsTargetingAnalytics_getResponse(res);
    }
}
void OAIAdGroupsApiHandler::adGroups_analytics(QString ad_account_id, QDate start_date, QDate end_date, QList<QString> ad_group_ids, QList<QString> columns, OAIGranularity granularity, qint32 click_window_days, qint32 engagement_window_days, qint32 view_window_days, QString conversion_report_time) {
    Q_UNUSED(ad_account_id);
    Q_UNUSED(start_date);
    Q_UNUSED(end_date);
    Q_UNUSED(ad_group_ids);
    Q_UNUSED(columns);
    Q_UNUSED(granularity);
    Q_UNUSED(click_window_days);
    Q_UNUSED(engagement_window_days);
    Q_UNUSED(view_window_days);
    Q_UNUSED(conversion_report_time);
    auto reqObj = qobject_cast<OAIAdGroupsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        QList<OAIAdGroupsAnalyticsResponse_inner> res;
        reqObj->adGroups_analyticsResponse(res);
    }
}
void OAIAdGroupsApiHandler::adGroups_audienceSizing(QString ad_account_id, OAIAdGroupAudienceSizingRequest oaiad_group_audience_sizing_request) {
    Q_UNUSED(ad_account_id);
    Q_UNUSED(oaiad_group_audience_sizing_request);
    auto reqObj = qobject_cast<OAIAdGroupsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIAdGroupAudienceSizingResponse res;
        reqObj->adGroups_audienceSizingResponse(res);
    }
}
void OAIAdGroupsApiHandler::adGroups_create(QString ad_account_id, QList<OAIAdGroupCreateRequest> oaiad_group_create_request) {
    Q_UNUSED(ad_account_id);
    Q_UNUSED(oaiad_group_create_request);
    auto reqObj = qobject_cast<OAIAdGroupsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIAdGroupArrayResponse res;
        reqObj->adGroups_createResponse(res);
    }
}
void OAIAdGroupsApiHandler::adGroups_get(QString ad_account_id, QString ad_group_id) {
    Q_UNUSED(ad_account_id);
    Q_UNUSED(ad_group_id);
    auto reqObj = qobject_cast<OAIAdGroupsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIAdGroupResponse res;
        reqObj->adGroups_getResponse(res);
    }
}
void OAIAdGroupsApiHandler::adGroups_list(QString ad_account_id, QList<QString> campaign_ids, QList<QString> ad_group_ids, QList<QString> entity_statuses, qint32 page_size, QString order, QString bookmark, bool translate_interests_to_names) {
    Q_UNUSED(ad_account_id);
    Q_UNUSED(campaign_ids);
    Q_UNUSED(ad_group_ids);
    Q_UNUSED(entity_statuses);
    Q_UNUSED(page_size);
    Q_UNUSED(order);
    Q_UNUSED(bookmark);
    Q_UNUSED(translate_interests_to_names);
    auto reqObj = qobject_cast<OAIAdGroupsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIAd_groups_list_200_response res;
        reqObj->adGroups_listResponse(res);
    }
}
void OAIAdGroupsApiHandler::adGroups_update(QString ad_account_id, QList<OAIAdGroupUpdateRequest> oaiad_group_update_request) {
    Q_UNUSED(ad_account_id);
    Q_UNUSED(oaiad_group_update_request);
    auto reqObj = qobject_cast<OAIAdGroupsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIAdGroupArrayResponse res;
        reqObj->adGroups_updateResponse(res);
    }
}


}
