/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>
#include <QDebug>

#include "OAIUserAccountApiHandler.h"
#include "OAIUserAccountApiRequest.h"

namespace OpenAPI {

OAIUserAccountApiHandler::OAIUserAccountApiHandler(){

}

OAIUserAccountApiHandler::~OAIUserAccountApiHandler(){

}

void OAIUserAccountApiHandler::boardsUserFollows_list(QString bookmark, qint32 page_size, bool explicit_following, QString ad_account_id) {
    Q_UNUSED(bookmark);
    Q_UNUSED(page_size);
    Q_UNUSED(explicit_following);
    Q_UNUSED(ad_account_id);
    auto reqObj = qobject_cast<OAIUserAccountApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIBoards_user_follows_list_200_response res;
        reqObj->boardsUserFollows_listResponse(res);
    }
}
void OAIUserAccountApiHandler::followUser_update(QString username, OAIFollowUserRequest oai_follow_user_request) {
    Q_UNUSED(username);
    Q_UNUSED(oai_follow_user_request);
    auto reqObj = qobject_cast<OAIUserAccountApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIUserSummary res;
        reqObj->followUser_updateResponse(res);
    }
}
void OAIUserAccountApiHandler::followers_list(QString bookmark, qint32 page_size) {
    Q_UNUSED(bookmark);
    Q_UNUSED(page_size);
    auto reqObj = qobject_cast<OAIUserAccountApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIFollowers_list_200_response res;
        reqObj->followers_listResponse(res);
    }
}
void OAIUserAccountApiHandler::linkedBusinessAccounts_get() {
    auto reqObj = qobject_cast<OAIUserAccountApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        QList<OAILinkedBusiness> res;
        reqObj->linkedBusinessAccounts_getResponse(res);
    }
}
void OAIUserAccountApiHandler::unverifyWebsite_delete(QString website) {
    Q_UNUSED(website);
    auto reqObj = qobject_cast<OAIUserAccountApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        
        reqObj->unverifyWebsite_deleteResponse();
    }
}
void OAIUserAccountApiHandler::userAccount_analytics(QDate start_date, QDate end_date, QString from_claimed_content, QString pin_format, QString app_types, QString content_type, QString source, QList<QString> metric_types, QString split_field, QString ad_account_id) {
    Q_UNUSED(start_date);
    Q_UNUSED(end_date);
    Q_UNUSED(from_claimed_content);
    Q_UNUSED(pin_format);
    Q_UNUSED(app_types);
    Q_UNUSED(content_type);
    Q_UNUSED(source);
    Q_UNUSED(metric_types);
    Q_UNUSED(split_field);
    Q_UNUSED(ad_account_id);
    auto reqObj = qobject_cast<OAIUserAccountApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        QMap<QString, OAIAnalyticsMetricsResponse> res;
        reqObj->userAccount_analyticsResponse(res);
    }
}
void OAIUserAccountApiHandler::userAccount_analytics_topPins(QDate start_date, QDate end_date, QString sort_by, QString from_claimed_content, QString pin_format, QString app_types, QString content_type, QString source, QList<QString> metric_types, qint32 num_of_pins, qint32 created_in_last_n_days, QString ad_account_id) {
    Q_UNUSED(start_date);
    Q_UNUSED(end_date);
    Q_UNUSED(sort_by);
    Q_UNUSED(from_claimed_content);
    Q_UNUSED(pin_format);
    Q_UNUSED(app_types);
    Q_UNUSED(content_type);
    Q_UNUSED(source);
    Q_UNUSED(metric_types);
    Q_UNUSED(num_of_pins);
    Q_UNUSED(created_in_last_n_days);
    Q_UNUSED(ad_account_id);
    auto reqObj = qobject_cast<OAIUserAccountApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAITopPinsAnalyticsResponse res;
        reqObj->userAccount_analytics_topPinsResponse(res);
    }
}
void OAIUserAccountApiHandler::userAccount_analytics_topVideoPins(QDate start_date, QDate end_date, QString sort_by, QString from_claimed_content, QString pin_format, QString app_types, QString content_type, QString source, QList<QString> metric_types, qint32 num_of_pins, qint32 created_in_last_n_days, QString ad_account_id) {
    Q_UNUSED(start_date);
    Q_UNUSED(end_date);
    Q_UNUSED(sort_by);
    Q_UNUSED(from_claimed_content);
    Q_UNUSED(pin_format);
    Q_UNUSED(app_types);
    Q_UNUSED(content_type);
    Q_UNUSED(source);
    Q_UNUSED(metric_types);
    Q_UNUSED(num_of_pins);
    Q_UNUSED(created_in_last_n_days);
    Q_UNUSED(ad_account_id);
    auto reqObj = qobject_cast<OAIUserAccountApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAITopVideoPinsAnalyticsResponse res;
        reqObj->userAccount_analytics_topVideoPinsResponse(res);
    }
}
void OAIUserAccountApiHandler::userAccount_followedInterests(QString username, QString bookmark, qint32 page_size) {
    Q_UNUSED(username);
    Q_UNUSED(bookmark);
    Q_UNUSED(page_size);
    auto reqObj = qobject_cast<OAIUserAccountApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIUser_account_followed_interests_200_response res;
        reqObj->userAccount_followedInterestsResponse(res);
    }
}
void OAIUserAccountApiHandler::userAccount_get(QString ad_account_id) {
    Q_UNUSED(ad_account_id);
    auto reqObj = qobject_cast<OAIUserAccountApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIAccount res;
        reqObj->userAccount_getResponse(res);
    }
}
void OAIUserAccountApiHandler::userFollowing_get(QString bookmark, qint32 page_size, OAIUserFollowingFeedType feed_type, bool explicit_following, QString ad_account_id) {
    Q_UNUSED(bookmark);
    Q_UNUSED(page_size);
    Q_UNUSED(feed_type);
    Q_UNUSED(explicit_following);
    Q_UNUSED(ad_account_id);
    auto reqObj = qobject_cast<OAIUserAccountApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIUser_following_get_200_response res;
        reqObj->userFollowing_getResponse(res);
    }
}
void OAIUserAccountApiHandler::userWebsites_get(QString bookmark, qint32 page_size) {
    Q_UNUSED(bookmark);
    Q_UNUSED(page_size);
    auto reqObj = qobject_cast<OAIUserAccountApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIUser_websites_get_200_response res;
        reqObj->userWebsites_getResponse(res);
    }
}
void OAIUserAccountApiHandler::verifyWebsite_update(OAIUserWebsiteVerifyRequest oai_user_website_verify_request, QString ad_account_id) {
    Q_UNUSED(oai_user_website_verify_request);
    Q_UNUSED(ad_account_id);
    auto reqObj = qobject_cast<OAIUserAccountApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIUserWebsiteSummary res;
        reqObj->verifyWebsite_updateResponse(res);
    }
}
void OAIUserAccountApiHandler::websiteVerification_get(QString ad_account_id) {
    Q_UNUSED(ad_account_id);
    auto reqObj = qobject_cast<OAIUserAccountApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIUserWebsiteVerificationCode res;
        reqObj->websiteVerification_getResponse(res);
    }
}


}
