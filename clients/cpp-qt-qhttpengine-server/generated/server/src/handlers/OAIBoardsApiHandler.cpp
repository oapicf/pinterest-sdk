/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>
#include <QDebug>

#include "OAIBoardsApiHandler.h"
#include "OAIBoardsApiRequest.h"

namespace OpenAPI {

OAIBoardsApiHandler::OAIBoardsApiHandler(){

}

OAIBoardsApiHandler::~OAIBoardsApiHandler(){

}

void OAIBoardsApiHandler::boardSections_create(QString board_id, OAIBoardSection oai_board_section, QString ad_account_id) {
    Q_UNUSED(board_id);
    Q_UNUSED(oai_board_section);
    Q_UNUSED(ad_account_id);
    auto reqObj = qobject_cast<OAIBoardsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIBoardSection res;
        reqObj->boardSections_createResponse(res);
    }
}
void OAIBoardsApiHandler::boardSections_delete(QString board_id, QString section_id, QString ad_account_id) {
    Q_UNUSED(board_id);
    Q_UNUSED(section_id);
    Q_UNUSED(ad_account_id);
    auto reqObj = qobject_cast<OAIBoardsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        
        reqObj->boardSections_deleteResponse();
    }
}
void OAIBoardsApiHandler::boardSections_list(QString board_id, QString ad_account_id, QString bookmark, qint32 page_size) {
    Q_UNUSED(board_id);
    Q_UNUSED(ad_account_id);
    Q_UNUSED(bookmark);
    Q_UNUSED(page_size);
    auto reqObj = qobject_cast<OAIBoardsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIBoard_sections_list_200_response res;
        reqObj->boardSections_listResponse(res);
    }
}
void OAIBoardsApiHandler::boardSections_listPins(QString board_id, QString section_id, QString ad_account_id, QString bookmark, qint32 page_size) {
    Q_UNUSED(board_id);
    Q_UNUSED(section_id);
    Q_UNUSED(ad_account_id);
    Q_UNUSED(bookmark);
    Q_UNUSED(page_size);
    auto reqObj = qobject_cast<OAIBoardsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIBoards_list_pins_200_response res;
        reqObj->boardSections_listPinsResponse(res);
    }
}
void OAIBoardsApiHandler::boardSections_update(QString board_id, QString section_id, OAIBoardSection oai_board_section, QString ad_account_id) {
    Q_UNUSED(board_id);
    Q_UNUSED(section_id);
    Q_UNUSED(oai_board_section);
    Q_UNUSED(ad_account_id);
    auto reqObj = qobject_cast<OAIBoardsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIBoardSection res;
        reqObj->boardSections_updateResponse(res);
    }
}
void OAIBoardsApiHandler::boards_create(OAIBoard oai_board, QString ad_account_id) {
    Q_UNUSED(oai_board);
    Q_UNUSED(ad_account_id);
    auto reqObj = qobject_cast<OAIBoardsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIBoard res;
        reqObj->boards_createResponse(res);
    }
}
void OAIBoardsApiHandler::boards_delete(QString board_id, QString ad_account_id) {
    Q_UNUSED(board_id);
    Q_UNUSED(ad_account_id);
    auto reqObj = qobject_cast<OAIBoardsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        
        reqObj->boards_deleteResponse();
    }
}
void OAIBoardsApiHandler::boards_get(QString board_id, QString ad_account_id) {
    Q_UNUSED(board_id);
    Q_UNUSED(ad_account_id);
    auto reqObj = qobject_cast<OAIBoardsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIBoard res;
        reqObj->boards_getResponse(res);
    }
}
void OAIBoardsApiHandler::boards_list(QString ad_account_id, QString bookmark, qint32 page_size, QString privacy) {
    Q_UNUSED(ad_account_id);
    Q_UNUSED(bookmark);
    Q_UNUSED(page_size);
    Q_UNUSED(privacy);
    auto reqObj = qobject_cast<OAIBoardsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIBoards_list_200_response res;
        reqObj->boards_listResponse(res);
    }
}
void OAIBoardsApiHandler::boards_listPins(QString board_id, QString bookmark, qint32 page_size, QList<QString> creative_types, QString ad_account_id, bool pin_metrics) {
    Q_UNUSED(board_id);
    Q_UNUSED(bookmark);
    Q_UNUSED(page_size);
    Q_UNUSED(creative_types);
    Q_UNUSED(ad_account_id);
    Q_UNUSED(pin_metrics);
    auto reqObj = qobject_cast<OAIBoardsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIBoards_list_pins_200_response res;
        reqObj->boards_listPinsResponse(res);
    }
}
void OAIBoardsApiHandler::boards_update(QString board_id, OAIBoardUpdate oai_board_update, QString ad_account_id) {
    Q_UNUSED(board_id);
    Q_UNUSED(oai_board_update);
    Q_UNUSED(ad_account_id);
    auto reqObj = qobject_cast<OAIBoardsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIBoard res;
        reqObj->boards_updateResponse(res);
    }
}


}
