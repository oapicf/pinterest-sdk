/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>
#include <QDebug>

#include "OAIAdsApiHandler.h"
#include "OAIAdsApiRequest.h"

namespace OpenAPI {

OAIAdsApiHandler::OAIAdsApiHandler(){

}

OAIAdsApiHandler::~OAIAdsApiHandler(){

}

void OAIAdsApiHandler::adPreviews_create(QString ad_account_id, OAIAdPreviewRequest oaiad_preview_request) {
    Q_UNUSED(ad_account_id);
    Q_UNUSED(oaiad_preview_request);
    auto reqObj = qobject_cast<OAIAdsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIAdPreviewURLResponse res;
        reqObj->adPreviews_createResponse(res);
    }
}
void OAIAdsApiHandler::adTargetingAnalytics_get(QString ad_account_id, QList<QString> ad_ids, QDate start_date, QDate end_date, QList<OAIAdsAnalyticsAdTargetingType> targeting_types, QList<QString> columns, OAIGranularity granularity, qint32 click_window_days, qint32 engagement_window_days, qint32 view_window_days, QString conversion_report_time, OAIConversionReportAttributionType attribution_types) {
    Q_UNUSED(ad_account_id);
    Q_UNUSED(ad_ids);
    Q_UNUSED(start_date);
    Q_UNUSED(end_date);
    Q_UNUSED(targeting_types);
    Q_UNUSED(columns);
    Q_UNUSED(granularity);
    Q_UNUSED(click_window_days);
    Q_UNUSED(engagement_window_days);
    Q_UNUSED(view_window_days);
    Q_UNUSED(conversion_report_time);
    Q_UNUSED(attribution_types);
    auto reqObj = qobject_cast<OAIAdsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIMetricsResponse res;
        reqObj->adTargetingAnalytics_getResponse(res);
    }
}
void OAIAdsApiHandler::ads_analytics(QString ad_account_id, QDate start_date, QDate end_date, QList<QString> columns, OAIGranularity granularity, QList<QString> ad_ids, qint32 click_window_days, qint32 engagement_window_days, qint32 view_window_days, QString conversion_report_time, QList<QString> pin_ids, QList<QString> campaign_ids) {
    Q_UNUSED(ad_account_id);
    Q_UNUSED(start_date);
    Q_UNUSED(end_date);
    Q_UNUSED(columns);
    Q_UNUSED(granularity);
    Q_UNUSED(ad_ids);
    Q_UNUSED(click_window_days);
    Q_UNUSED(engagement_window_days);
    Q_UNUSED(view_window_days);
    Q_UNUSED(conversion_report_time);
    Q_UNUSED(pin_ids);
    Q_UNUSED(campaign_ids);
    auto reqObj = qobject_cast<OAIAdsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        QList<OAIAdsAnalyticsResponse_inner> res;
        reqObj->ads_analyticsResponse(res);
    }
}
void OAIAdsApiHandler::ads_create(QString ad_account_id, QList<OAIAdCreateRequest> oaiad_create_request) {
    Q_UNUSED(ad_account_id);
    Q_UNUSED(oaiad_create_request);
    auto reqObj = qobject_cast<OAIAdsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIAdArrayResponse res;
        reqObj->ads_createResponse(res);
    }
}
void OAIAdsApiHandler::ads_get(QString ad_account_id, QString ad_id) {
    Q_UNUSED(ad_account_id);
    Q_UNUSED(ad_id);
    auto reqObj = qobject_cast<OAIAdsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIAdResponse res;
        reqObj->ads_getResponse(res);
    }
}
void OAIAdsApiHandler::ads_list(QString ad_account_id, QList<QString> campaign_ids, QList<QString> ad_group_ids, QList<QString> ad_ids, QList<QString> entity_statuses, qint32 page_size, QString order, QString bookmark) {
    Q_UNUSED(ad_account_id);
    Q_UNUSED(campaign_ids);
    Q_UNUSED(ad_group_ids);
    Q_UNUSED(ad_ids);
    Q_UNUSED(entity_statuses);
    Q_UNUSED(page_size);
    Q_UNUSED(order);
    Q_UNUSED(bookmark);
    auto reqObj = qobject_cast<OAIAdsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIAds_list_200_response res;
        reqObj->ads_listResponse(res);
    }
}
void OAIAdsApiHandler::ads_update(QString ad_account_id, QList<OAIAdUpdateRequest> oaiad_update_request) {
    Q_UNUSED(ad_account_id);
    Q_UNUSED(oaiad_update_request);
    auto reqObj = qobject_cast<OAIAdsApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIAdArrayResponse res;
        reqObj->ads_updateResponse(res);
    }
}


}
