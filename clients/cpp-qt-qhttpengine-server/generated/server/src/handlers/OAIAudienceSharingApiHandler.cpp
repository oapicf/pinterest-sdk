/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>
#include <QDebug>

#include "OAIAudienceSharingApiHandler.h"
#include "OAIAudienceSharingApiRequest.h"

namespace OpenAPI {

OAIAudienceSharingApiHandler::OAIAudienceSharingApiHandler(){

}

OAIAudienceSharingApiHandler::~OAIAudienceSharingApiHandler(){

}

void OAIAudienceSharingApiHandler::adAccountsAudiencesSharedAccounts_list(QString ad_account_id, QString audience_id, OAIAudienceAccountType account_type, qint32 page_size, QString bookmark) {
    Q_UNUSED(ad_account_id);
    Q_UNUSED(audience_id);
    Q_UNUSED(account_type);
    Q_UNUSED(page_size);
    Q_UNUSED(bookmark);
    auto reqObj = qobject_cast<OAIAudienceSharingApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIAd_accounts_audiences_shared_accounts_list_200_response res;
        reqObj->adAccountsAudiencesSharedAccounts_listResponse(res);
    }
}
void OAIAudienceSharingApiHandler::businessAccountAudiencesSharedAccounts_list(QString business_id, QString audience_id, OAIAudienceAccountType account_type, qint32 page_size, QString bookmark) {
    Q_UNUSED(business_id);
    Q_UNUSED(audience_id);
    Q_UNUSED(account_type);
    Q_UNUSED(page_size);
    Q_UNUSED(bookmark);
    auto reqObj = qobject_cast<OAIAudienceSharingApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIAd_accounts_audiences_shared_accounts_list_200_response res;
        reqObj->businessAccountAudiencesSharedAccounts_listResponse(res);
    }
}
void OAIAudienceSharingApiHandler::sharedAudiencesForBusiness_list(QString business_id, QString bookmark, QString order, qint32 page_size) {
    Q_UNUSED(business_id);
    Q_UNUSED(bookmark);
    Q_UNUSED(order);
    Q_UNUSED(page_size);
    auto reqObj = qobject_cast<OAIAudienceSharingApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIAudiences_list_200_response res;
        reqObj->sharedAudiencesForBusiness_listResponse(res);
    }
}
void OAIAudienceSharingApiHandler::updateAdAccountToAdAccountSharedAudience(QString ad_account_id, OAISharedAudience oai_shared_audience) {
    Q_UNUSED(ad_account_id);
    Q_UNUSED(oai_shared_audience);
    auto reqObj = qobject_cast<OAIAudienceSharingApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAISharedAudienceResponse res;
        reqObj->updateAdAccountToAdAccountSharedAudienceResponse(res);
    }
}
void OAIAudienceSharingApiHandler::updateAdAccountToBusinessSharedAudience(QString ad_account_id, OAIBusinessSharedAudience oai_business_shared_audience) {
    Q_UNUSED(ad_account_id);
    Q_UNUSED(oai_business_shared_audience);
    auto reqObj = qobject_cast<OAIAudienceSharingApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIBusinessSharedAudienceResponse res;
        reqObj->updateAdAccountToBusinessSharedAudienceResponse(res);
    }
}
void OAIAudienceSharingApiHandler::updateBusinessToAdAccountSharedAudience(QString business_id, OAISharedAudience oai_shared_audience) {
    Q_UNUSED(business_id);
    Q_UNUSED(oai_shared_audience);
    auto reqObj = qobject_cast<OAIAudienceSharingApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAISharedAudienceResponse res;
        reqObj->updateBusinessToAdAccountSharedAudienceResponse(res);
    }
}
void OAIAudienceSharingApiHandler::updateBusinessToBusinessSharedAudience(QString business_id, OAIBusinessSharedAudience oai_business_shared_audience) {
    Q_UNUSED(business_id);
    Q_UNUSED(oai_business_shared_audience);
    auto reqObj = qobject_cast<OAIAudienceSharingApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIBusinessSharedAudienceResponse res;
        reqObj->updateBusinessToBusinessSharedAudienceResponse(res);
    }
}


}
