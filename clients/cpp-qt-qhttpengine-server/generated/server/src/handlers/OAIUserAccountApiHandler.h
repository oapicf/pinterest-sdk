/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIUserAccountApiHandler_H
#define OAI_OAIUserAccountApiHandler_H

#include <QObject>

#include "OAIAccount.h"
#include "OAIAnalyticsMetricsResponse.h"
#include "OAIBoards_user_follows_list_200_response.h"
#include "OAIError.h"
#include "OAIFollowUserRequest.h"
#include "OAIFollowers_list_200_response.h"
#include "OAILinkedBusiness.h"
#include "OAITopPinsAnalyticsResponse.h"
#include "OAITopVideoPinsAnalyticsResponse.h"
#include "OAIUserFollowingFeedType.h"
#include "OAIUserSummary.h"
#include "OAIUserWebsiteSummary.h"
#include "OAIUserWebsiteVerificationCode.h"
#include "OAIUserWebsiteVerifyRequest.h"
#include "OAIUser_account_followed_interests_200_response.h"
#include "OAIUser_following_get_200_response.h"
#include "OAIUser_websites_get_200_response.h"
#include <QList>
#include <QMap>
#include <QString>

namespace OpenAPI {

class OAIUserAccountApiHandler : public QObject
{
    Q_OBJECT

public:
    OAIUserAccountApiHandler();
    virtual ~OAIUserAccountApiHandler();


public Q_SLOTS:
    virtual void boardsUserFollows_list(QString bookmark, qint32 page_size, bool explicit_following, QString ad_account_id);
    virtual void followUser_update(QString username, OAIFollowUserRequest oai_follow_user_request);
    virtual void followers_list(QString bookmark, qint32 page_size);
    virtual void linkedBusinessAccounts_get();
    virtual void unverifyWebsite_delete(QString website);
    virtual void userAccount_analytics(QDate start_date, QDate end_date, QString from_claimed_content, QString pin_format, QString app_types, QString content_type, QString source, QList<QString> metric_types, QString split_field, QString ad_account_id);
    virtual void userAccount_analytics_topPins(QDate start_date, QDate end_date, QString sort_by, QString from_claimed_content, QString pin_format, QString app_types, QString content_type, QString source, QList<QString> metric_types, qint32 num_of_pins, qint32 created_in_last_n_days, QString ad_account_id);
    virtual void userAccount_analytics_topVideoPins(QDate start_date, QDate end_date, QString sort_by, QString from_claimed_content, QString pin_format, QString app_types, QString content_type, QString source, QList<QString> metric_types, qint32 num_of_pins, qint32 created_in_last_n_days, QString ad_account_id);
    virtual void userAccount_followedInterests(QString username, QString bookmark, qint32 page_size);
    virtual void userAccount_get(QString ad_account_id);
    virtual void userFollowing_get(QString bookmark, qint32 page_size, OAIUserFollowingFeedType feed_type, bool explicit_following, QString ad_account_id);
    virtual void userWebsites_get(QString bookmark, qint32 page_size);
    virtual void verifyWebsite_update(OAIUserWebsiteVerifyRequest oai_user_website_verify_request, QString ad_account_id);
    virtual void websiteVerification_get(QString ad_account_id);
    

};

}

#endif // OAI_OAIUserAccountApiHandler_H
