/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_APIROUTER_H
#define OAI_APIROUTER_H

#include <functional>
#include <QObject>
#include <QStringList>
#include <QSharedPointer>
#include <QList>
#include <QMultiMap>
#include <QRegularExpression>

#include <qhttpengine/socket.h>
#include <qhttpengine/handler.h>
#include <qhttpengine/qobjecthandler.h>

#include "OAIAdAccountsApiHandler.h"
#include "OAIAdGroupsApiHandler.h"
#include "OAIAdsApiHandler.h"
#include "OAIAdvancedAuctionApiHandler.h"
#include "OAIAudienceInsightsApiHandler.h"
#include "OAIAudienceSharingApiHandler.h"
#include "OAIAudiencesApiHandler.h"
#include "OAIBillingApiHandler.h"
#include "OAIBoardsApiHandler.h"
#include "OAIBulkApiHandler.h"
#include "OAIBusinessAccessAssetsApiHandler.h"
#include "OAIBusinessAccessInviteApiHandler.h"
#include "OAIBusinessAccessRelationshipsApiHandler.h"
#include "OAICampaignsApiHandler.h"
#include "OAICatalogsApiHandler.h"
#include "OAIConversionEventsApiHandler.h"
#include "OAIConversionTagsApiHandler.h"
#include "OAICustomerListsApiHandler.h"
#include "OAIIntegrationsApiHandler.h"
#include "OAIKeywordsApiHandler.h"
#include "OAILeadAdsApiHandler.h"
#include "OAILeadFormsApiHandler.h"
#include "OAILeadsExportApiHandler.h"
#include "OAIMediaApiHandler.h"
#include "OAIOauthApiHandler.h"
#include "OAIOrderLinesApiHandler.h"
#include "OAIPinsApiHandler.h"
#include "OAIProductGroupPromotionsApiHandler.h"
#include "OAIResourcesApiHandler.h"
#include "OAISearchApiHandler.h"
#include "OAITargetingTemplateApiHandler.h"
#include "OAITermsApiHandler.h"
#include "OAITermsOfServiceApiHandler.h"
#include "OAIUserAccountApiHandler.h"


namespace OpenAPI {

class OAIApiRequestHandler : public  QHttpEngine::QObjectHandler
{
    Q_OBJECT
Q_SIGNALS:
    void requestReceived(QHttpEngine::Socket *socket);

protected:
    virtual void process(QHttpEngine::Socket *socket, const QString &path){
        Q_UNUSED(path);

        // If the slot requires all data to be received, check to see if this is
        // already the case, otherwise, wait until the rest of it arrives
        if (socket->bytesAvailable() >= socket->contentLength()) {
            Q_EMIT requestReceived(socket);
        } else {
            connect(socket, &QHttpEngine::Socket::readChannelFinished, [this, socket]() {
                Q_EMIT requestReceived(socket);
            });
        }
    }
};

class OAIApiRouter : public QObject
{
    Q_OBJECT
public:
    OAIApiRouter();
    virtual ~OAIApiRouter();

    void setUpRoutes();
    void processRequest(QHttpEngine::Socket *socket);
    
    void setOAIAdAccountsApiHandler(QSharedPointer<OAIAdAccountsApiHandler> handler);
    void setOAIAdGroupsApiHandler(QSharedPointer<OAIAdGroupsApiHandler> handler);
    void setOAIAdsApiHandler(QSharedPointer<OAIAdsApiHandler> handler);
    void setOAIAdvancedAuctionApiHandler(QSharedPointer<OAIAdvancedAuctionApiHandler> handler);
    void setOAIAudienceInsightsApiHandler(QSharedPointer<OAIAudienceInsightsApiHandler> handler);
    void setOAIAudienceSharingApiHandler(QSharedPointer<OAIAudienceSharingApiHandler> handler);
    void setOAIAudiencesApiHandler(QSharedPointer<OAIAudiencesApiHandler> handler);
    void setOAIBillingApiHandler(QSharedPointer<OAIBillingApiHandler> handler);
    void setOAIBoardsApiHandler(QSharedPointer<OAIBoardsApiHandler> handler);
    void setOAIBulkApiHandler(QSharedPointer<OAIBulkApiHandler> handler);
    void setOAIBusinessAccessAssetsApiHandler(QSharedPointer<OAIBusinessAccessAssetsApiHandler> handler);
    void setOAIBusinessAccessInviteApiHandler(QSharedPointer<OAIBusinessAccessInviteApiHandler> handler);
    void setOAIBusinessAccessRelationshipsApiHandler(QSharedPointer<OAIBusinessAccessRelationshipsApiHandler> handler);
    void setOAICampaignsApiHandler(QSharedPointer<OAICampaignsApiHandler> handler);
    void setOAICatalogsApiHandler(QSharedPointer<OAICatalogsApiHandler> handler);
    void setOAIConversionEventsApiHandler(QSharedPointer<OAIConversionEventsApiHandler> handler);
    void setOAIConversionTagsApiHandler(QSharedPointer<OAIConversionTagsApiHandler> handler);
    void setOAICustomerListsApiHandler(QSharedPointer<OAICustomerListsApiHandler> handler);
    void setOAIIntegrationsApiHandler(QSharedPointer<OAIIntegrationsApiHandler> handler);
    void setOAIKeywordsApiHandler(QSharedPointer<OAIKeywordsApiHandler> handler);
    void setOAILeadAdsApiHandler(QSharedPointer<OAILeadAdsApiHandler> handler);
    void setOAILeadFormsApiHandler(QSharedPointer<OAILeadFormsApiHandler> handler);
    void setOAILeadsExportApiHandler(QSharedPointer<OAILeadsExportApiHandler> handler);
    void setOAIMediaApiHandler(QSharedPointer<OAIMediaApiHandler> handler);
    void setOAIOauthApiHandler(QSharedPointer<OAIOauthApiHandler> handler);
    void setOAIOrderLinesApiHandler(QSharedPointer<OAIOrderLinesApiHandler> handler);
    void setOAIPinsApiHandler(QSharedPointer<OAIPinsApiHandler> handler);
    void setOAIProductGroupPromotionsApiHandler(QSharedPointer<OAIProductGroupPromotionsApiHandler> handler);
    void setOAIResourcesApiHandler(QSharedPointer<OAIResourcesApiHandler> handler);
    void setOAISearchApiHandler(QSharedPointer<OAISearchApiHandler> handler);
    void setOAITargetingTemplateApiHandler(QSharedPointer<OAITargetingTemplateApiHandler> handler);
    void setOAITermsApiHandler(QSharedPointer<OAITermsApiHandler> handler);
    void setOAITermsOfServiceApiHandler(QSharedPointer<OAITermsOfServiceApiHandler> handler);
    void setOAIUserAccountApiHandler(QSharedPointer<OAIUserAccountApiHandler> handler);
private:
    QMap<QString, std::function<void(QHttpEngine::Socket *)>> Routes;
    QMultiMap<QString, std::function<void(QHttpEngine::Socket *)>> RoutesWithPathParam;

    bool handleRequest(QHttpEngine::Socket *socket);
    bool handleRequestAndExtractPathParam(QHttpEngine::Socket *socket);

    
    QSharedPointer<OAIAdAccountsApiHandler> mOAIAdAccountsApiHandler;
    QSharedPointer<OAIAdGroupsApiHandler> mOAIAdGroupsApiHandler;
    QSharedPointer<OAIAdsApiHandler> mOAIAdsApiHandler;
    QSharedPointer<OAIAdvancedAuctionApiHandler> mOAIAdvancedAuctionApiHandler;
    QSharedPointer<OAIAudienceInsightsApiHandler> mOAIAudienceInsightsApiHandler;
    QSharedPointer<OAIAudienceSharingApiHandler> mOAIAudienceSharingApiHandler;
    QSharedPointer<OAIAudiencesApiHandler> mOAIAudiencesApiHandler;
    QSharedPointer<OAIBillingApiHandler> mOAIBillingApiHandler;
    QSharedPointer<OAIBoardsApiHandler> mOAIBoardsApiHandler;
    QSharedPointer<OAIBulkApiHandler> mOAIBulkApiHandler;
    QSharedPointer<OAIBusinessAccessAssetsApiHandler> mOAIBusinessAccessAssetsApiHandler;
    QSharedPointer<OAIBusinessAccessInviteApiHandler> mOAIBusinessAccessInviteApiHandler;
    QSharedPointer<OAIBusinessAccessRelationshipsApiHandler> mOAIBusinessAccessRelationshipsApiHandler;
    QSharedPointer<OAICampaignsApiHandler> mOAICampaignsApiHandler;
    QSharedPointer<OAICatalogsApiHandler> mOAICatalogsApiHandler;
    QSharedPointer<OAIConversionEventsApiHandler> mOAIConversionEventsApiHandler;
    QSharedPointer<OAIConversionTagsApiHandler> mOAIConversionTagsApiHandler;
    QSharedPointer<OAICustomerListsApiHandler> mOAICustomerListsApiHandler;
    QSharedPointer<OAIIntegrationsApiHandler> mOAIIntegrationsApiHandler;
    QSharedPointer<OAIKeywordsApiHandler> mOAIKeywordsApiHandler;
    QSharedPointer<OAILeadAdsApiHandler> mOAILeadAdsApiHandler;
    QSharedPointer<OAILeadFormsApiHandler> mOAILeadFormsApiHandler;
    QSharedPointer<OAILeadsExportApiHandler> mOAILeadsExportApiHandler;
    QSharedPointer<OAIMediaApiHandler> mOAIMediaApiHandler;
    QSharedPointer<OAIOauthApiHandler> mOAIOauthApiHandler;
    QSharedPointer<OAIOrderLinesApiHandler> mOAIOrderLinesApiHandler;
    QSharedPointer<OAIPinsApiHandler> mOAIPinsApiHandler;
    QSharedPointer<OAIProductGroupPromotionsApiHandler> mOAIProductGroupPromotionsApiHandler;
    QSharedPointer<OAIResourcesApiHandler> mOAIResourcesApiHandler;
    QSharedPointer<OAISearchApiHandler> mOAISearchApiHandler;
    QSharedPointer<OAITargetingTemplateApiHandler> mOAITargetingTemplateApiHandler;
    QSharedPointer<OAITermsApiHandler> mOAITermsApiHandler;
    QSharedPointer<OAITermsOfServiceApiHandler> mOAITermsOfServiceApiHandler;
    QSharedPointer<OAIUserAccountApiHandler> mOAIUserAccountApiHandler;
protected:
    // override this method to provide custom class derived from ApiHandler classes
    virtual void createApiHandlers();

private :
    inline QString fromQHttpEngineMethod(QHttpEngine::Socket::Method method){
        switch( method ){
            case QHttpEngine::Socket::Method::OPTIONS:
                return QStringLiteral("OPTIONS");
            case QHttpEngine::Socket::Method::GET:
                return QStringLiteral("GET");
            case QHttpEngine::Socket::Method::HEAD:
                return QStringLiteral("HEAD");
            case QHttpEngine::Socket::Method::POST:
                return QStringLiteral("POST");
            case QHttpEngine::Socket::Method::PUT:
                return QStringLiteral("PUT");
            case QHttpEngine::Socket::Method::DELETE:
                return QStringLiteral("DELETE");
            case QHttpEngine::Socket::Method::TRACE:
                return QStringLiteral("TRACE");
            case QHttpEngine::Socket::Method::CONNECT:
                return QStringLiteral("CONNECT");
        }
        return QStringLiteral("");
    }

    inline QRegularExpressionMatch getRequestMatch(QString serverTemplatePath, QString requestPath){
        QRegularExpression parExpr( R"(\{([^\/\s]+)\})" );
        serverTemplatePath.replace( parExpr, R"((?<\1>[^\/\s]+))" );
        serverTemplatePath.append("[\\/]?$");
        QRegularExpression pathExpr( serverTemplatePath );
        return pathExpr.match( requestPath );
    }

};


}

#endif // OAI_APIROUTER_H
