/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>
#include <QDebug>

#include "OAIBusinessAccessInviteApiHandler.h"
#include "OAIBusinessAccessInviteApiRequest.h"

namespace OpenAPI {

OAIBusinessAccessInviteApiHandler::OAIBusinessAccessInviteApiHandler(){

}

OAIBusinessAccessInviteApiHandler::~OAIBusinessAccessInviteApiHandler(){

}

void OAIBusinessAccessInviteApiHandler::assetAccessRequests_create(QString business_id, OAICreateAssetAccessRequestBody oai_create_asset_access_request_body) {
    Q_UNUSED(business_id);
    Q_UNUSED(oai_create_asset_access_request_body);
    auto reqObj = qobject_cast<OAIBusinessAccessInviteApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAICreateAssetAccessRequestResponse res;
        reqObj->assetAccessRequests_createResponse(res);
    }
}
void OAIBusinessAccessInviteApiHandler::cancelInvitesOrRequests(QString business_id, OAICancelInvitesBody oai_cancel_invites_body) {
    Q_UNUSED(business_id);
    Q_UNUSED(oai_cancel_invites_body);
    auto reqObj = qobject_cast<OAIBusinessAccessInviteApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIDeleteInvitesResultsResponseArray res;
        reqObj->cancelInvitesOrRequestsResponse(res);
    }
}
void OAIBusinessAccessInviteApiHandler::createAssetInvites(QString business_id, OAICreateAssetInvitesRequest oai_create_asset_invites_request) {
    Q_UNUSED(business_id);
    Q_UNUSED(oai_create_asset_invites_request);
    auto reqObj = qobject_cast<OAIBusinessAccessInviteApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIUpdateInvitesResultsResponseArray res;
        reqObj->createAssetInvitesResponse(res);
    }
}
void OAIBusinessAccessInviteApiHandler::createMembershipOrPartnershipInvites(QString business_id, OAICreateMembershipOrPartnershipInvitesBody oai_create_membership_or_partnership_invites_body) {
    Q_UNUSED(business_id);
    Q_UNUSED(oai_create_membership_or_partnership_invites_body);
    auto reqObj = qobject_cast<OAIBusinessAccessInviteApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAICreateInvitesResultsResponseArray res;
        reqObj->createMembershipOrPartnershipInvitesResponse(res);
    }
}
void OAIBusinessAccessInviteApiHandler::get_invites(QString business_id, bool is_member, QList<QString> invite_status, OAIInviteType invite_type, QString bookmark, qint32 page_size) {
    Q_UNUSED(business_id);
    Q_UNUSED(is_member);
    Q_UNUSED(invite_status);
    Q_UNUSED(invite_type);
    Q_UNUSED(bookmark);
    Q_UNUSED(page_size);
    auto reqObj = qobject_cast<OAIBusinessAccessInviteApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIGet_invites_200_response res;
        reqObj->get_invitesResponse(res);
    }
}
void OAIBusinessAccessInviteApiHandler::respondBusinessAccessInvites(OAIAuthRespondInvitesBody oai_auth_respond_invites_body) {
    Q_UNUSED(oai_auth_respond_invites_body);
    auto reqObj = qobject_cast<OAIBusinessAccessInviteApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIRespondToInvitesResponseArray res;
        reqObj->respondBusinessAccessInvitesResponse(res);
    }
}


}
