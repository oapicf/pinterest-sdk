/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITargetingTemplateKeyword.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITargetingTemplateKeyword::OAITargetingTemplateKeyword(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITargetingTemplateKeyword::OAITargetingTemplateKeyword() {
    this->initializeModel();
}

OAITargetingTemplateKeyword::~OAITargetingTemplateKeyword() {}

void OAITargetingTemplateKeyword::initializeModel() {

    m_match_type_isSet = false;
    m_match_type_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAITargetingTemplateKeyword::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITargetingTemplateKeyword::fromJsonObject(QJsonObject json) {

    m_match_type_isValid = ::OpenAPI::fromJsonValue(match_type, json[QString("match_type")]);
    m_match_type_isSet = !json[QString("match_type")].isNull() && m_match_type_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAITargetingTemplateKeyword::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITargetingTemplateKeyword::asJsonObject() const {
    QJsonObject obj;
    if (match_type.isSet()) {
        obj.insert(QString("match_type"), ::OpenAPI::toJsonValue(match_type));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(value));
    }
    return obj;
}

OAIMatchType OAITargetingTemplateKeyword::getMatchType() const {
    return match_type;
}
void OAITargetingTemplateKeyword::setMatchType(const OAIMatchType &match_type) {
    this->match_type = match_type;
    this->m_match_type_isSet = true;
}

bool OAITargetingTemplateKeyword::is_match_type_Set() const{
    return m_match_type_isSet;
}

bool OAITargetingTemplateKeyword::is_match_type_Valid() const{
    return m_match_type_isValid;
}

QString OAITargetingTemplateKeyword::getValue() const {
    return value;
}
void OAITargetingTemplateKeyword::setValue(const QString &value) {
    this->value = value;
    this->m_value_isSet = true;
}

bool OAITargetingTemplateKeyword::is_value_Set() const{
    return m_value_isSet;
}

bool OAITargetingTemplateKeyword::is_value_Valid() const{
    return m_value_isValid;
}

bool OAITargetingTemplateKeyword::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (match_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITargetingTemplateKeyword::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
