/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAdAccountGetSubscriptionResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAdAccountGetSubscriptionResponse::OAIAdAccountGetSubscriptionResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAdAccountGetSubscriptionResponse::OAIAdAccountGetSubscriptionResponse() {
    this->initializeModel();
}

OAIAdAccountGetSubscriptionResponse::~OAIAdAccountGetSubscriptionResponse() {}

void OAIAdAccountGetSubscriptionResponse::initializeModel() {

    m_lead_form_id_isSet = false;
    m_lead_form_id_isValid = false;

    m_webhook_url_isSet = false;
    m_webhook_url_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_user_account_id_isSet = false;
    m_user_account_id_isValid = false;

    m_ad_account_id_isSet = false;
    m_ad_account_id_isValid = false;

    m_api_version_isSet = false;
    m_api_version_isValid = false;

    m_cryptographic_key_isSet = false;
    m_cryptographic_key_isValid = false;

    m_cryptographic_algorithm_isSet = false;
    m_cryptographic_algorithm_isValid = false;

    m_created_time_isSet = false;
    m_created_time_isValid = false;
}

void OAIAdAccountGetSubscriptionResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAdAccountGetSubscriptionResponse::fromJsonObject(QJsonObject json) {

    m_lead_form_id_isValid = ::OpenAPI::fromJsonValue(lead_form_id, json[QString("lead_form_id")]);
    m_lead_form_id_isSet = !json[QString("lead_form_id")].isNull() && m_lead_form_id_isValid;

    m_webhook_url_isValid = ::OpenAPI::fromJsonValue(webhook_url, json[QString("webhook_url")]);
    m_webhook_url_isSet = !json[QString("webhook_url")].isNull() && m_webhook_url_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_user_account_id_isValid = ::OpenAPI::fromJsonValue(user_account_id, json[QString("user_account_id")]);
    m_user_account_id_isSet = !json[QString("user_account_id")].isNull() && m_user_account_id_isValid;

    m_ad_account_id_isValid = ::OpenAPI::fromJsonValue(ad_account_id, json[QString("ad_account_id")]);
    m_ad_account_id_isSet = !json[QString("ad_account_id")].isNull() && m_ad_account_id_isValid;

    m_api_version_isValid = ::OpenAPI::fromJsonValue(api_version, json[QString("api_version")]);
    m_api_version_isSet = !json[QString("api_version")].isNull() && m_api_version_isValid;

    m_cryptographic_key_isValid = ::OpenAPI::fromJsonValue(cryptographic_key, json[QString("cryptographic_key")]);
    m_cryptographic_key_isSet = !json[QString("cryptographic_key")].isNull() && m_cryptographic_key_isValid;

    m_cryptographic_algorithm_isValid = ::OpenAPI::fromJsonValue(cryptographic_algorithm, json[QString("cryptographic_algorithm")]);
    m_cryptographic_algorithm_isSet = !json[QString("cryptographic_algorithm")].isNull() && m_cryptographic_algorithm_isValid;

    m_created_time_isValid = ::OpenAPI::fromJsonValue(created_time, json[QString("created_time")]);
    m_created_time_isSet = !json[QString("created_time")].isNull() && m_created_time_isValid;
}

QString OAIAdAccountGetSubscriptionResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAdAccountGetSubscriptionResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_lead_form_id_isSet) {
        obj.insert(QString("lead_form_id"), ::OpenAPI::toJsonValue(lead_form_id));
    }
    if (m_webhook_url_isSet) {
        obj.insert(QString("webhook_url"), ::OpenAPI::toJsonValue(webhook_url));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(id));
    }
    if (m_user_account_id_isSet) {
        obj.insert(QString("user_account_id"), ::OpenAPI::toJsonValue(user_account_id));
    }
    if (m_ad_account_id_isSet) {
        obj.insert(QString("ad_account_id"), ::OpenAPI::toJsonValue(ad_account_id));
    }
    if (m_api_version_isSet) {
        obj.insert(QString("api_version"), ::OpenAPI::toJsonValue(api_version));
    }
    if (m_cryptographic_key_isSet) {
        obj.insert(QString("cryptographic_key"), ::OpenAPI::toJsonValue(cryptographic_key));
    }
    if (m_cryptographic_algorithm_isSet) {
        obj.insert(QString("cryptographic_algorithm"), ::OpenAPI::toJsonValue(cryptographic_algorithm));
    }
    if (m_created_time_isSet) {
        obj.insert(QString("created_time"), ::OpenAPI::toJsonValue(created_time));
    }
    return obj;
}

QString OAIAdAccountGetSubscriptionResponse::getLeadFormId() const {
    return lead_form_id;
}
void OAIAdAccountGetSubscriptionResponse::setLeadFormId(const QString &lead_form_id) {
    this->lead_form_id = lead_form_id;
    this->m_lead_form_id_isSet = true;
}

bool OAIAdAccountGetSubscriptionResponse::is_lead_form_id_Set() const{
    return m_lead_form_id_isSet;
}

bool OAIAdAccountGetSubscriptionResponse::is_lead_form_id_Valid() const{
    return m_lead_form_id_isValid;
}

QString OAIAdAccountGetSubscriptionResponse::getWebhookUrl() const {
    return webhook_url;
}
void OAIAdAccountGetSubscriptionResponse::setWebhookUrl(const QString &webhook_url) {
    this->webhook_url = webhook_url;
    this->m_webhook_url_isSet = true;
}

bool OAIAdAccountGetSubscriptionResponse::is_webhook_url_Set() const{
    return m_webhook_url_isSet;
}

bool OAIAdAccountGetSubscriptionResponse::is_webhook_url_Valid() const{
    return m_webhook_url_isValid;
}

QString OAIAdAccountGetSubscriptionResponse::getId() const {
    return id;
}
void OAIAdAccountGetSubscriptionResponse::setId(const QString &id) {
    this->id = id;
    this->m_id_isSet = true;
}

bool OAIAdAccountGetSubscriptionResponse::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAdAccountGetSubscriptionResponse::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIAdAccountGetSubscriptionResponse::getUserAccountId() const {
    return user_account_id;
}
void OAIAdAccountGetSubscriptionResponse::setUserAccountId(const QString &user_account_id) {
    this->user_account_id = user_account_id;
    this->m_user_account_id_isSet = true;
}

bool OAIAdAccountGetSubscriptionResponse::is_user_account_id_Set() const{
    return m_user_account_id_isSet;
}

bool OAIAdAccountGetSubscriptionResponse::is_user_account_id_Valid() const{
    return m_user_account_id_isValid;
}

QString OAIAdAccountGetSubscriptionResponse::getAdAccountId() const {
    return ad_account_id;
}
void OAIAdAccountGetSubscriptionResponse::setAdAccountId(const QString &ad_account_id) {
    this->ad_account_id = ad_account_id;
    this->m_ad_account_id_isSet = true;
}

bool OAIAdAccountGetSubscriptionResponse::is_ad_account_id_Set() const{
    return m_ad_account_id_isSet;
}

bool OAIAdAccountGetSubscriptionResponse::is_ad_account_id_Valid() const{
    return m_ad_account_id_isValid;
}

QString OAIAdAccountGetSubscriptionResponse::getApiVersion() const {
    return api_version;
}
void OAIAdAccountGetSubscriptionResponse::setApiVersion(const QString &api_version) {
    this->api_version = api_version;
    this->m_api_version_isSet = true;
}

bool OAIAdAccountGetSubscriptionResponse::is_api_version_Set() const{
    return m_api_version_isSet;
}

bool OAIAdAccountGetSubscriptionResponse::is_api_version_Valid() const{
    return m_api_version_isValid;
}

QString OAIAdAccountGetSubscriptionResponse::getCryptographicKey() const {
    return cryptographic_key;
}
void OAIAdAccountGetSubscriptionResponse::setCryptographicKey(const QString &cryptographic_key) {
    this->cryptographic_key = cryptographic_key;
    this->m_cryptographic_key_isSet = true;
}

bool OAIAdAccountGetSubscriptionResponse::is_cryptographic_key_Set() const{
    return m_cryptographic_key_isSet;
}

bool OAIAdAccountGetSubscriptionResponse::is_cryptographic_key_Valid() const{
    return m_cryptographic_key_isValid;
}

QString OAIAdAccountGetSubscriptionResponse::getCryptographicAlgorithm() const {
    return cryptographic_algorithm;
}
void OAIAdAccountGetSubscriptionResponse::setCryptographicAlgorithm(const QString &cryptographic_algorithm) {
    this->cryptographic_algorithm = cryptographic_algorithm;
    this->m_cryptographic_algorithm_isSet = true;
}

bool OAIAdAccountGetSubscriptionResponse::is_cryptographic_algorithm_Set() const{
    return m_cryptographic_algorithm_isSet;
}

bool OAIAdAccountGetSubscriptionResponse::is_cryptographic_algorithm_Valid() const{
    return m_cryptographic_algorithm_isValid;
}

qint32 OAIAdAccountGetSubscriptionResponse::getCreatedTime() const {
    return created_time;
}
void OAIAdAccountGetSubscriptionResponse::setCreatedTime(const qint32 &created_time) {
    this->created_time = created_time;
    this->m_created_time_isSet = true;
}

bool OAIAdAccountGetSubscriptionResponse::is_created_time_Set() const{
    return m_created_time_isSet;
}

bool OAIAdAccountGetSubscriptionResponse::is_created_time_Valid() const{
    return m_created_time_isValid;
}

bool OAIAdAccountGetSubscriptionResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_lead_form_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_webhook_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ad_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_api_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cryptographic_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cryptographic_algorithm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAdAccountGetSubscriptionResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
