/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataStatus::OAIDataStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataStatus::OAIDataStatus() {
    this->initializeModel();
}

OAIDataStatus::~OAIDataStatus() {}

void OAIDataStatus::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIDataStatus::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIDataStatus::fromJson(QString jsonString) {
    
    if ( jsonString.compare("PROCESSING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataStatus::PROCESSING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("READY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataStatus::READY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ESTIMATE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataStatus::ESTIMATE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BEFORE_BUSINESS_CREATED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataStatus::BEFORE_BUSINESS_CREATED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BEFORE_DATA_RETENTION_PERIOD", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataStatus::BEFORE_DATA_RETENTION_PERIOD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BEFORE_PIN_DATA_RETENTION_PERIOD", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataStatus::BEFORE_PIN_DATA_RETENTION_PERIOD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BEFORE_METRIC_START_DATE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataStatus::BEFORE_METRIC_START_DATE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BEFORE_CORE_METRIC_START_DATE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataStatus::BEFORE_CORE_METRIC_START_DATE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BEFORE_PIN_FORMAT_METRIC_START_DATE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataStatus::BEFORE_PIN_FORMAT_METRIC_START_DATE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BEFORE_AUDIENCE_METRIC_START_DATE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataStatus::BEFORE_AUDIENCE_METRIC_START_DATE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BEFORE_AUDIENCE_MONTHLY_METRIC_START_DATE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataStatus::BEFORE_AUDIENCE_MONTHLY_METRIC_START_DATE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BEFORE_VIDEO_METRIC_START_DATE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataStatus::BEFORE_VIDEO_METRIC_START_DATE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BEFORE_CONVERSION_METRIC_START_DATE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataStatus::BEFORE_CONVERSION_METRIC_START_DATE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PURCHASERS_METRIC_SMALLER_THAN_THRESHOLD", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataStatus::PURCHASERS_METRIC_SMALLER_THAN_THRESHOLD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("IN_BAD_TAG_DATE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataStatus::IN_BAD_TAG_DATE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BEFORE_PUBLISHED_METRIC_START_DATE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataStatus::BEFORE_PUBLISHED_METRIC_START_DATE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BEFORE_ASSIST_METRIC_START_DATE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataStatus::BEFORE_ASSIST_METRIC_START_DATE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BEFORE_PIN_CREATED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataStatus::BEFORE_PIN_CREATED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BEFORE_ACCOUNT_CLAIMED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataStatus::BEFORE_ACCOUNT_CLAIMED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BEFORE_DEMOGRAPHIC_FILTERS_START_DATE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataStatus::BEFORE_DEMOGRAPHIC_FILTERS_START_DATE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AUDIENCE_SEGMENT_SMALLER_THAN_THRESHOLD", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataStatus::AUDIENCE_SEGMENT_SMALLER_THAN_THRESHOLD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AUDIENCE_TOTAL_SMALLER_THAN_THRESHOLD", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataStatus::AUDIENCE_TOTAL_SMALLER_THAN_THRESHOLD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BEFORE_PRODUCT_GROUP_FILTER_START_DATE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataStatus::BEFORE_PRODUCT_GROUP_FILTER_START_DATE;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIDataStatus::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIDataStatus::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIDataStatus::PROCESSING:
            val = "PROCESSING";
            break;
        case eOAIDataStatus::READY:
            val = "READY";
            break;
        case eOAIDataStatus::ESTIMATE:
            val = "ESTIMATE";
            break;
        case eOAIDataStatus::BEFORE_BUSINESS_CREATED:
            val = "BEFORE_BUSINESS_CREATED";
            break;
        case eOAIDataStatus::BEFORE_DATA_RETENTION_PERIOD:
            val = "BEFORE_DATA_RETENTION_PERIOD";
            break;
        case eOAIDataStatus::BEFORE_PIN_DATA_RETENTION_PERIOD:
            val = "BEFORE_PIN_DATA_RETENTION_PERIOD";
            break;
        case eOAIDataStatus::BEFORE_METRIC_START_DATE:
            val = "BEFORE_METRIC_START_DATE";
            break;
        case eOAIDataStatus::BEFORE_CORE_METRIC_START_DATE:
            val = "BEFORE_CORE_METRIC_START_DATE";
            break;
        case eOAIDataStatus::BEFORE_PIN_FORMAT_METRIC_START_DATE:
            val = "BEFORE_PIN_FORMAT_METRIC_START_DATE";
            break;
        case eOAIDataStatus::BEFORE_AUDIENCE_METRIC_START_DATE:
            val = "BEFORE_AUDIENCE_METRIC_START_DATE";
            break;
        case eOAIDataStatus::BEFORE_AUDIENCE_MONTHLY_METRIC_START_DATE:
            val = "BEFORE_AUDIENCE_MONTHLY_METRIC_START_DATE";
            break;
        case eOAIDataStatus::BEFORE_VIDEO_METRIC_START_DATE:
            val = "BEFORE_VIDEO_METRIC_START_DATE";
            break;
        case eOAIDataStatus::BEFORE_CONVERSION_METRIC_START_DATE:
            val = "BEFORE_CONVERSION_METRIC_START_DATE";
            break;
        case eOAIDataStatus::PURCHASERS_METRIC_SMALLER_THAN_THRESHOLD:
            val = "PURCHASERS_METRIC_SMALLER_THAN_THRESHOLD";
            break;
        case eOAIDataStatus::IN_BAD_TAG_DATE:
            val = "IN_BAD_TAG_DATE";
            break;
        case eOAIDataStatus::BEFORE_PUBLISHED_METRIC_START_DATE:
            val = "BEFORE_PUBLISHED_METRIC_START_DATE";
            break;
        case eOAIDataStatus::BEFORE_ASSIST_METRIC_START_DATE:
            val = "BEFORE_ASSIST_METRIC_START_DATE";
            break;
        case eOAIDataStatus::BEFORE_PIN_CREATED:
            val = "BEFORE_PIN_CREATED";
            break;
        case eOAIDataStatus::BEFORE_ACCOUNT_CLAIMED:
            val = "BEFORE_ACCOUNT_CLAIMED";
            break;
        case eOAIDataStatus::BEFORE_DEMOGRAPHIC_FILTERS_START_DATE:
            val = "BEFORE_DEMOGRAPHIC_FILTERS_START_DATE";
            break;
        case eOAIDataStatus::AUDIENCE_SEGMENT_SMALLER_THAN_THRESHOLD:
            val = "AUDIENCE_SEGMENT_SMALLER_THAN_THRESHOLD";
            break;
        case eOAIDataStatus::AUDIENCE_TOTAL_SMALLER_THAN_THRESHOLD:
            val = "AUDIENCE_TOTAL_SMALLER_THAN_THRESHOLD";
            break;
        case eOAIDataStatus::BEFORE_PRODUCT_GROUP_FILTER_START_DATE:
            val = "BEFORE_PRODUCT_GROUP_FILTER_START_DATE";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIDataStatus::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIDataStatus::eOAIDataStatus OAIDataStatus::getValue() const {
    return m_value;
}

void OAIDataStatus::setValue(const OAIDataStatus::eOAIDataStatus& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIDataStatus::isSet() const {
    
    return m_value_isSet;
}

bool OAIDataStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
