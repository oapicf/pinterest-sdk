/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICatalogsFeedValidationErrors.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICatalogsFeedValidationErrors::OAICatalogsFeedValidationErrors(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICatalogsFeedValidationErrors::OAICatalogsFeedValidationErrors() {
    this->initializeModel();
}

OAICatalogsFeedValidationErrors::~OAICatalogsFeedValidationErrors() {}

void OAICatalogsFeedValidationErrors::initializeModel() {

    m_fetch_error_isSet = false;
    m_fetch_error_isValid = false;

    m_fetch_inactive_feed_error_isSet = false;
    m_fetch_inactive_feed_error_isValid = false;

    m_encoding_error_isSet = false;
    m_encoding_error_isValid = false;

    m_delimiter_error_isSet = false;
    m_delimiter_error_isValid = false;

    m_required_columns_missing_isSet = false;
    m_required_columns_missing_isValid = false;

    m_duplicate_products_isSet = false;
    m_duplicate_products_isValid = false;

    m_image_link_invalid_isSet = false;
    m_image_link_invalid_isValid = false;

    m_itemid_missing_isSet = false;
    m_itemid_missing_isValid = false;

    m_title_missing_isSet = false;
    m_title_missing_isValid = false;

    m_description_missing_isSet = false;
    m_description_missing_isValid = false;

    m_product_link_missing_isSet = false;
    m_product_link_missing_isValid = false;

    m_image_link_missing_isSet = false;
    m_image_link_missing_isValid = false;

    m_availability_invalid_isSet = false;
    m_availability_invalid_isValid = false;

    m_product_price_invalid_isSet = false;
    m_product_price_invalid_isValid = false;

    m_link_format_invalid_isSet = false;
    m_link_format_invalid_isValid = false;

    m_parse_line_error_isSet = false;
    m_parse_line_error_isValid = false;

    m_adwords_format_invalid_isSet = false;
    m_adwords_format_invalid_isValid = false;

    m_internal_service_error_isSet = false;
    m_internal_service_error_isValid = false;

    m_no_verified_domain_isSet = false;
    m_no_verified_domain_isValid = false;

    m_adult_invalid_isSet = false;
    m_adult_invalid_isValid = false;

    m_image_link_length_too_long_isSet = false;
    m_image_link_length_too_long_isValid = false;

    m_invalid_domain_isSet = false;
    m_invalid_domain_isValid = false;

    m_feed_length_too_long_isSet = false;
    m_feed_length_too_long_isValid = false;

    m_link_length_too_long_isSet = false;
    m_link_length_too_long_isValid = false;

    m_malformed_xml_isSet = false;
    m_malformed_xml_isValid = false;

    m_price_missing_isSet = false;
    m_price_missing_isValid = false;

    m_feed_too_small_isSet = false;
    m_feed_too_small_isValid = false;

    m_max_items_per_item_group_exceeded_isSet = false;
    m_max_items_per_item_group_exceeded_isValid = false;

    m_item_main_image_download_failure_isSet = false;
    m_item_main_image_download_failure_isValid = false;

    m_pinjoin_content_unsafe_isSet = false;
    m_pinjoin_content_unsafe_isValid = false;

    m_blocklisted_image_signature_isSet = false;
    m_blocklisted_image_signature_isValid = false;

    m_list_price_invalid_isSet = false;
    m_list_price_invalid_isValid = false;

    m_price_cannot_be_determined_isSet = false;
    m_price_cannot_be_determined_isValid = false;
}

void OAICatalogsFeedValidationErrors::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICatalogsFeedValidationErrors::fromJsonObject(QJsonObject json) {

    m_fetch_error_isValid = ::OpenAPI::fromJsonValue(fetch_error, json[QString("FETCH_ERROR")]);
    m_fetch_error_isSet = !json[QString("FETCH_ERROR")].isNull() && m_fetch_error_isValid;

    m_fetch_inactive_feed_error_isValid = ::OpenAPI::fromJsonValue(fetch_inactive_feed_error, json[QString("FETCH_INACTIVE_FEED_ERROR")]);
    m_fetch_inactive_feed_error_isSet = !json[QString("FETCH_INACTIVE_FEED_ERROR")].isNull() && m_fetch_inactive_feed_error_isValid;

    m_encoding_error_isValid = ::OpenAPI::fromJsonValue(encoding_error, json[QString("ENCODING_ERROR")]);
    m_encoding_error_isSet = !json[QString("ENCODING_ERROR")].isNull() && m_encoding_error_isValid;

    m_delimiter_error_isValid = ::OpenAPI::fromJsonValue(delimiter_error, json[QString("DELIMITER_ERROR")]);
    m_delimiter_error_isSet = !json[QString("DELIMITER_ERROR")].isNull() && m_delimiter_error_isValid;

    m_required_columns_missing_isValid = ::OpenAPI::fromJsonValue(required_columns_missing, json[QString("REQUIRED_COLUMNS_MISSING")]);
    m_required_columns_missing_isSet = !json[QString("REQUIRED_COLUMNS_MISSING")].isNull() && m_required_columns_missing_isValid;

    m_duplicate_products_isValid = ::OpenAPI::fromJsonValue(duplicate_products, json[QString("DUPLICATE_PRODUCTS")]);
    m_duplicate_products_isSet = !json[QString("DUPLICATE_PRODUCTS")].isNull() && m_duplicate_products_isValid;

    m_image_link_invalid_isValid = ::OpenAPI::fromJsonValue(image_link_invalid, json[QString("IMAGE_LINK_INVALID")]);
    m_image_link_invalid_isSet = !json[QString("IMAGE_LINK_INVALID")].isNull() && m_image_link_invalid_isValid;

    m_itemid_missing_isValid = ::OpenAPI::fromJsonValue(itemid_missing, json[QString("ITEMID_MISSING")]);
    m_itemid_missing_isSet = !json[QString("ITEMID_MISSING")].isNull() && m_itemid_missing_isValid;

    m_title_missing_isValid = ::OpenAPI::fromJsonValue(title_missing, json[QString("TITLE_MISSING")]);
    m_title_missing_isSet = !json[QString("TITLE_MISSING")].isNull() && m_title_missing_isValid;

    m_description_missing_isValid = ::OpenAPI::fromJsonValue(description_missing, json[QString("DESCRIPTION_MISSING")]);
    m_description_missing_isSet = !json[QString("DESCRIPTION_MISSING")].isNull() && m_description_missing_isValid;

    m_product_link_missing_isValid = ::OpenAPI::fromJsonValue(product_link_missing, json[QString("PRODUCT_LINK_MISSING")]);
    m_product_link_missing_isSet = !json[QString("PRODUCT_LINK_MISSING")].isNull() && m_product_link_missing_isValid;

    m_image_link_missing_isValid = ::OpenAPI::fromJsonValue(image_link_missing, json[QString("IMAGE_LINK_MISSING")]);
    m_image_link_missing_isSet = !json[QString("IMAGE_LINK_MISSING")].isNull() && m_image_link_missing_isValid;

    m_availability_invalid_isValid = ::OpenAPI::fromJsonValue(availability_invalid, json[QString("AVAILABILITY_INVALID")]);
    m_availability_invalid_isSet = !json[QString("AVAILABILITY_INVALID")].isNull() && m_availability_invalid_isValid;

    m_product_price_invalid_isValid = ::OpenAPI::fromJsonValue(product_price_invalid, json[QString("PRODUCT_PRICE_INVALID")]);
    m_product_price_invalid_isSet = !json[QString("PRODUCT_PRICE_INVALID")].isNull() && m_product_price_invalid_isValid;

    m_link_format_invalid_isValid = ::OpenAPI::fromJsonValue(link_format_invalid, json[QString("LINK_FORMAT_INVALID")]);
    m_link_format_invalid_isSet = !json[QString("LINK_FORMAT_INVALID")].isNull() && m_link_format_invalid_isValid;

    m_parse_line_error_isValid = ::OpenAPI::fromJsonValue(parse_line_error, json[QString("PARSE_LINE_ERROR")]);
    m_parse_line_error_isSet = !json[QString("PARSE_LINE_ERROR")].isNull() && m_parse_line_error_isValid;

    m_adwords_format_invalid_isValid = ::OpenAPI::fromJsonValue(adwords_format_invalid, json[QString("ADWORDS_FORMAT_INVALID")]);
    m_adwords_format_invalid_isSet = !json[QString("ADWORDS_FORMAT_INVALID")].isNull() && m_adwords_format_invalid_isValid;

    m_internal_service_error_isValid = ::OpenAPI::fromJsonValue(internal_service_error, json[QString("INTERNAL_SERVICE_ERROR")]);
    m_internal_service_error_isSet = !json[QString("INTERNAL_SERVICE_ERROR")].isNull() && m_internal_service_error_isValid;

    m_no_verified_domain_isValid = ::OpenAPI::fromJsonValue(no_verified_domain, json[QString("NO_VERIFIED_DOMAIN")]);
    m_no_verified_domain_isSet = !json[QString("NO_VERIFIED_DOMAIN")].isNull() && m_no_verified_domain_isValid;

    m_adult_invalid_isValid = ::OpenAPI::fromJsonValue(adult_invalid, json[QString("ADULT_INVALID")]);
    m_adult_invalid_isSet = !json[QString("ADULT_INVALID")].isNull() && m_adult_invalid_isValid;

    m_image_link_length_too_long_isValid = ::OpenAPI::fromJsonValue(image_link_length_too_long, json[QString("IMAGE_LINK_LENGTH_TOO_LONG")]);
    m_image_link_length_too_long_isSet = !json[QString("IMAGE_LINK_LENGTH_TOO_LONG")].isNull() && m_image_link_length_too_long_isValid;

    m_invalid_domain_isValid = ::OpenAPI::fromJsonValue(invalid_domain, json[QString("INVALID_DOMAIN")]);
    m_invalid_domain_isSet = !json[QString("INVALID_DOMAIN")].isNull() && m_invalid_domain_isValid;

    m_feed_length_too_long_isValid = ::OpenAPI::fromJsonValue(feed_length_too_long, json[QString("FEED_LENGTH_TOO_LONG")]);
    m_feed_length_too_long_isSet = !json[QString("FEED_LENGTH_TOO_LONG")].isNull() && m_feed_length_too_long_isValid;

    m_link_length_too_long_isValid = ::OpenAPI::fromJsonValue(link_length_too_long, json[QString("LINK_LENGTH_TOO_LONG")]);
    m_link_length_too_long_isSet = !json[QString("LINK_LENGTH_TOO_LONG")].isNull() && m_link_length_too_long_isValid;

    m_malformed_xml_isValid = ::OpenAPI::fromJsonValue(malformed_xml, json[QString("MALFORMED_XML")]);
    m_malformed_xml_isSet = !json[QString("MALFORMED_XML")].isNull() && m_malformed_xml_isValid;

    m_price_missing_isValid = ::OpenAPI::fromJsonValue(price_missing, json[QString("PRICE_MISSING")]);
    m_price_missing_isSet = !json[QString("PRICE_MISSING")].isNull() && m_price_missing_isValid;

    m_feed_too_small_isValid = ::OpenAPI::fromJsonValue(feed_too_small, json[QString("FEED_TOO_SMALL")]);
    m_feed_too_small_isSet = !json[QString("FEED_TOO_SMALL")].isNull() && m_feed_too_small_isValid;

    m_max_items_per_item_group_exceeded_isValid = ::OpenAPI::fromJsonValue(max_items_per_item_group_exceeded, json[QString("MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED")]);
    m_max_items_per_item_group_exceeded_isSet = !json[QString("MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED")].isNull() && m_max_items_per_item_group_exceeded_isValid;

    m_item_main_image_download_failure_isValid = ::OpenAPI::fromJsonValue(item_main_image_download_failure, json[QString("ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE")]);
    m_item_main_image_download_failure_isSet = !json[QString("ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE")].isNull() && m_item_main_image_download_failure_isValid;

    m_pinjoin_content_unsafe_isValid = ::OpenAPI::fromJsonValue(pinjoin_content_unsafe, json[QString("PINJOIN_CONTENT_UNSAFE")]);
    m_pinjoin_content_unsafe_isSet = !json[QString("PINJOIN_CONTENT_UNSAFE")].isNull() && m_pinjoin_content_unsafe_isValid;

    m_blocklisted_image_signature_isValid = ::OpenAPI::fromJsonValue(blocklisted_image_signature, json[QString("BLOCKLISTED_IMAGE_SIGNATURE")]);
    m_blocklisted_image_signature_isSet = !json[QString("BLOCKLISTED_IMAGE_SIGNATURE")].isNull() && m_blocklisted_image_signature_isValid;

    m_list_price_invalid_isValid = ::OpenAPI::fromJsonValue(list_price_invalid, json[QString("LIST_PRICE_INVALID")]);
    m_list_price_invalid_isSet = !json[QString("LIST_PRICE_INVALID")].isNull() && m_list_price_invalid_isValid;

    m_price_cannot_be_determined_isValid = ::OpenAPI::fromJsonValue(price_cannot_be_determined, json[QString("PRICE_CANNOT_BE_DETERMINED")]);
    m_price_cannot_be_determined_isSet = !json[QString("PRICE_CANNOT_BE_DETERMINED")].isNull() && m_price_cannot_be_determined_isValid;
}

QString OAICatalogsFeedValidationErrors::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICatalogsFeedValidationErrors::asJsonObject() const {
    QJsonObject obj;
    if (m_fetch_error_isSet) {
        obj.insert(QString("FETCH_ERROR"), ::OpenAPI::toJsonValue(fetch_error));
    }
    if (m_fetch_inactive_feed_error_isSet) {
        obj.insert(QString("FETCH_INACTIVE_FEED_ERROR"), ::OpenAPI::toJsonValue(fetch_inactive_feed_error));
    }
    if (m_encoding_error_isSet) {
        obj.insert(QString("ENCODING_ERROR"), ::OpenAPI::toJsonValue(encoding_error));
    }
    if (m_delimiter_error_isSet) {
        obj.insert(QString("DELIMITER_ERROR"), ::OpenAPI::toJsonValue(delimiter_error));
    }
    if (m_required_columns_missing_isSet) {
        obj.insert(QString("REQUIRED_COLUMNS_MISSING"), ::OpenAPI::toJsonValue(required_columns_missing));
    }
    if (m_duplicate_products_isSet) {
        obj.insert(QString("DUPLICATE_PRODUCTS"), ::OpenAPI::toJsonValue(duplicate_products));
    }
    if (m_image_link_invalid_isSet) {
        obj.insert(QString("IMAGE_LINK_INVALID"), ::OpenAPI::toJsonValue(image_link_invalid));
    }
    if (m_itemid_missing_isSet) {
        obj.insert(QString("ITEMID_MISSING"), ::OpenAPI::toJsonValue(itemid_missing));
    }
    if (m_title_missing_isSet) {
        obj.insert(QString("TITLE_MISSING"), ::OpenAPI::toJsonValue(title_missing));
    }
    if (m_description_missing_isSet) {
        obj.insert(QString("DESCRIPTION_MISSING"), ::OpenAPI::toJsonValue(description_missing));
    }
    if (m_product_link_missing_isSet) {
        obj.insert(QString("PRODUCT_LINK_MISSING"), ::OpenAPI::toJsonValue(product_link_missing));
    }
    if (m_image_link_missing_isSet) {
        obj.insert(QString("IMAGE_LINK_MISSING"), ::OpenAPI::toJsonValue(image_link_missing));
    }
    if (m_availability_invalid_isSet) {
        obj.insert(QString("AVAILABILITY_INVALID"), ::OpenAPI::toJsonValue(availability_invalid));
    }
    if (m_product_price_invalid_isSet) {
        obj.insert(QString("PRODUCT_PRICE_INVALID"), ::OpenAPI::toJsonValue(product_price_invalid));
    }
    if (m_link_format_invalid_isSet) {
        obj.insert(QString("LINK_FORMAT_INVALID"), ::OpenAPI::toJsonValue(link_format_invalid));
    }
    if (m_parse_line_error_isSet) {
        obj.insert(QString("PARSE_LINE_ERROR"), ::OpenAPI::toJsonValue(parse_line_error));
    }
    if (m_adwords_format_invalid_isSet) {
        obj.insert(QString("ADWORDS_FORMAT_INVALID"), ::OpenAPI::toJsonValue(adwords_format_invalid));
    }
    if (m_internal_service_error_isSet) {
        obj.insert(QString("INTERNAL_SERVICE_ERROR"), ::OpenAPI::toJsonValue(internal_service_error));
    }
    if (m_no_verified_domain_isSet) {
        obj.insert(QString("NO_VERIFIED_DOMAIN"), ::OpenAPI::toJsonValue(no_verified_domain));
    }
    if (m_adult_invalid_isSet) {
        obj.insert(QString("ADULT_INVALID"), ::OpenAPI::toJsonValue(adult_invalid));
    }
    if (m_image_link_length_too_long_isSet) {
        obj.insert(QString("IMAGE_LINK_LENGTH_TOO_LONG"), ::OpenAPI::toJsonValue(image_link_length_too_long));
    }
    if (m_invalid_domain_isSet) {
        obj.insert(QString("INVALID_DOMAIN"), ::OpenAPI::toJsonValue(invalid_domain));
    }
    if (m_feed_length_too_long_isSet) {
        obj.insert(QString("FEED_LENGTH_TOO_LONG"), ::OpenAPI::toJsonValue(feed_length_too_long));
    }
    if (m_link_length_too_long_isSet) {
        obj.insert(QString("LINK_LENGTH_TOO_LONG"), ::OpenAPI::toJsonValue(link_length_too_long));
    }
    if (m_malformed_xml_isSet) {
        obj.insert(QString("MALFORMED_XML"), ::OpenAPI::toJsonValue(malformed_xml));
    }
    if (m_price_missing_isSet) {
        obj.insert(QString("PRICE_MISSING"), ::OpenAPI::toJsonValue(price_missing));
    }
    if (m_feed_too_small_isSet) {
        obj.insert(QString("FEED_TOO_SMALL"), ::OpenAPI::toJsonValue(feed_too_small));
    }
    if (m_max_items_per_item_group_exceeded_isSet) {
        obj.insert(QString("MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED"), ::OpenAPI::toJsonValue(max_items_per_item_group_exceeded));
    }
    if (m_item_main_image_download_failure_isSet) {
        obj.insert(QString("ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE"), ::OpenAPI::toJsonValue(item_main_image_download_failure));
    }
    if (m_pinjoin_content_unsafe_isSet) {
        obj.insert(QString("PINJOIN_CONTENT_UNSAFE"), ::OpenAPI::toJsonValue(pinjoin_content_unsafe));
    }
    if (m_blocklisted_image_signature_isSet) {
        obj.insert(QString("BLOCKLISTED_IMAGE_SIGNATURE"), ::OpenAPI::toJsonValue(blocklisted_image_signature));
    }
    if (m_list_price_invalid_isSet) {
        obj.insert(QString("LIST_PRICE_INVALID"), ::OpenAPI::toJsonValue(list_price_invalid));
    }
    if (m_price_cannot_be_determined_isSet) {
        obj.insert(QString("PRICE_CANNOT_BE_DETERMINED"), ::OpenAPI::toJsonValue(price_cannot_be_determined));
    }
    return obj;
}

qint32 OAICatalogsFeedValidationErrors::getFetchError() const {
    return fetch_error;
}
void OAICatalogsFeedValidationErrors::setFetchError(const qint32 &fetch_error) {
    this->fetch_error = fetch_error;
    this->m_fetch_error_isSet = true;
}

bool OAICatalogsFeedValidationErrors::is_fetch_error_Set() const{
    return m_fetch_error_isSet;
}

bool OAICatalogsFeedValidationErrors::is_fetch_error_Valid() const{
    return m_fetch_error_isValid;
}

qint32 OAICatalogsFeedValidationErrors::getFetchInactiveFeedError() const {
    return fetch_inactive_feed_error;
}
void OAICatalogsFeedValidationErrors::setFetchInactiveFeedError(const qint32 &fetch_inactive_feed_error) {
    this->fetch_inactive_feed_error = fetch_inactive_feed_error;
    this->m_fetch_inactive_feed_error_isSet = true;
}

bool OAICatalogsFeedValidationErrors::is_fetch_inactive_feed_error_Set() const{
    return m_fetch_inactive_feed_error_isSet;
}

bool OAICatalogsFeedValidationErrors::is_fetch_inactive_feed_error_Valid() const{
    return m_fetch_inactive_feed_error_isValid;
}

qint32 OAICatalogsFeedValidationErrors::getEncodingError() const {
    return encoding_error;
}
void OAICatalogsFeedValidationErrors::setEncodingError(const qint32 &encoding_error) {
    this->encoding_error = encoding_error;
    this->m_encoding_error_isSet = true;
}

bool OAICatalogsFeedValidationErrors::is_encoding_error_Set() const{
    return m_encoding_error_isSet;
}

bool OAICatalogsFeedValidationErrors::is_encoding_error_Valid() const{
    return m_encoding_error_isValid;
}

qint32 OAICatalogsFeedValidationErrors::getDelimiterError() const {
    return delimiter_error;
}
void OAICatalogsFeedValidationErrors::setDelimiterError(const qint32 &delimiter_error) {
    this->delimiter_error = delimiter_error;
    this->m_delimiter_error_isSet = true;
}

bool OAICatalogsFeedValidationErrors::is_delimiter_error_Set() const{
    return m_delimiter_error_isSet;
}

bool OAICatalogsFeedValidationErrors::is_delimiter_error_Valid() const{
    return m_delimiter_error_isValid;
}

qint32 OAICatalogsFeedValidationErrors::getRequiredColumnsMissing() const {
    return required_columns_missing;
}
void OAICatalogsFeedValidationErrors::setRequiredColumnsMissing(const qint32 &required_columns_missing) {
    this->required_columns_missing = required_columns_missing;
    this->m_required_columns_missing_isSet = true;
}

bool OAICatalogsFeedValidationErrors::is_required_columns_missing_Set() const{
    return m_required_columns_missing_isSet;
}

bool OAICatalogsFeedValidationErrors::is_required_columns_missing_Valid() const{
    return m_required_columns_missing_isValid;
}

qint32 OAICatalogsFeedValidationErrors::getDuplicateProducts() const {
    return duplicate_products;
}
void OAICatalogsFeedValidationErrors::setDuplicateProducts(const qint32 &duplicate_products) {
    this->duplicate_products = duplicate_products;
    this->m_duplicate_products_isSet = true;
}

bool OAICatalogsFeedValidationErrors::is_duplicate_products_Set() const{
    return m_duplicate_products_isSet;
}

bool OAICatalogsFeedValidationErrors::is_duplicate_products_Valid() const{
    return m_duplicate_products_isValid;
}

qint32 OAICatalogsFeedValidationErrors::getImageLinkInvalid() const {
    return image_link_invalid;
}
void OAICatalogsFeedValidationErrors::setImageLinkInvalid(const qint32 &image_link_invalid) {
    this->image_link_invalid = image_link_invalid;
    this->m_image_link_invalid_isSet = true;
}

bool OAICatalogsFeedValidationErrors::is_image_link_invalid_Set() const{
    return m_image_link_invalid_isSet;
}

bool OAICatalogsFeedValidationErrors::is_image_link_invalid_Valid() const{
    return m_image_link_invalid_isValid;
}

qint32 OAICatalogsFeedValidationErrors::getItemidMissing() const {
    return itemid_missing;
}
void OAICatalogsFeedValidationErrors::setItemidMissing(const qint32 &itemid_missing) {
    this->itemid_missing = itemid_missing;
    this->m_itemid_missing_isSet = true;
}

bool OAICatalogsFeedValidationErrors::is_itemid_missing_Set() const{
    return m_itemid_missing_isSet;
}

bool OAICatalogsFeedValidationErrors::is_itemid_missing_Valid() const{
    return m_itemid_missing_isValid;
}

qint32 OAICatalogsFeedValidationErrors::getTitleMissing() const {
    return title_missing;
}
void OAICatalogsFeedValidationErrors::setTitleMissing(const qint32 &title_missing) {
    this->title_missing = title_missing;
    this->m_title_missing_isSet = true;
}

bool OAICatalogsFeedValidationErrors::is_title_missing_Set() const{
    return m_title_missing_isSet;
}

bool OAICatalogsFeedValidationErrors::is_title_missing_Valid() const{
    return m_title_missing_isValid;
}

qint32 OAICatalogsFeedValidationErrors::getDescriptionMissing() const {
    return description_missing;
}
void OAICatalogsFeedValidationErrors::setDescriptionMissing(const qint32 &description_missing) {
    this->description_missing = description_missing;
    this->m_description_missing_isSet = true;
}

bool OAICatalogsFeedValidationErrors::is_description_missing_Set() const{
    return m_description_missing_isSet;
}

bool OAICatalogsFeedValidationErrors::is_description_missing_Valid() const{
    return m_description_missing_isValid;
}

qint32 OAICatalogsFeedValidationErrors::getProductLinkMissing() const {
    return product_link_missing;
}
void OAICatalogsFeedValidationErrors::setProductLinkMissing(const qint32 &product_link_missing) {
    this->product_link_missing = product_link_missing;
    this->m_product_link_missing_isSet = true;
}

bool OAICatalogsFeedValidationErrors::is_product_link_missing_Set() const{
    return m_product_link_missing_isSet;
}

bool OAICatalogsFeedValidationErrors::is_product_link_missing_Valid() const{
    return m_product_link_missing_isValid;
}

qint32 OAICatalogsFeedValidationErrors::getImageLinkMissing() const {
    return image_link_missing;
}
void OAICatalogsFeedValidationErrors::setImageLinkMissing(const qint32 &image_link_missing) {
    this->image_link_missing = image_link_missing;
    this->m_image_link_missing_isSet = true;
}

bool OAICatalogsFeedValidationErrors::is_image_link_missing_Set() const{
    return m_image_link_missing_isSet;
}

bool OAICatalogsFeedValidationErrors::is_image_link_missing_Valid() const{
    return m_image_link_missing_isValid;
}

qint32 OAICatalogsFeedValidationErrors::getAvailabilityInvalid() const {
    return availability_invalid;
}
void OAICatalogsFeedValidationErrors::setAvailabilityInvalid(const qint32 &availability_invalid) {
    this->availability_invalid = availability_invalid;
    this->m_availability_invalid_isSet = true;
}

bool OAICatalogsFeedValidationErrors::is_availability_invalid_Set() const{
    return m_availability_invalid_isSet;
}

bool OAICatalogsFeedValidationErrors::is_availability_invalid_Valid() const{
    return m_availability_invalid_isValid;
}

qint32 OAICatalogsFeedValidationErrors::getProductPriceInvalid() const {
    return product_price_invalid;
}
void OAICatalogsFeedValidationErrors::setProductPriceInvalid(const qint32 &product_price_invalid) {
    this->product_price_invalid = product_price_invalid;
    this->m_product_price_invalid_isSet = true;
}

bool OAICatalogsFeedValidationErrors::is_product_price_invalid_Set() const{
    return m_product_price_invalid_isSet;
}

bool OAICatalogsFeedValidationErrors::is_product_price_invalid_Valid() const{
    return m_product_price_invalid_isValid;
}

qint32 OAICatalogsFeedValidationErrors::getLinkFormatInvalid() const {
    return link_format_invalid;
}
void OAICatalogsFeedValidationErrors::setLinkFormatInvalid(const qint32 &link_format_invalid) {
    this->link_format_invalid = link_format_invalid;
    this->m_link_format_invalid_isSet = true;
}

bool OAICatalogsFeedValidationErrors::is_link_format_invalid_Set() const{
    return m_link_format_invalid_isSet;
}

bool OAICatalogsFeedValidationErrors::is_link_format_invalid_Valid() const{
    return m_link_format_invalid_isValid;
}

qint32 OAICatalogsFeedValidationErrors::getParseLineError() const {
    return parse_line_error;
}
void OAICatalogsFeedValidationErrors::setParseLineError(const qint32 &parse_line_error) {
    this->parse_line_error = parse_line_error;
    this->m_parse_line_error_isSet = true;
}

bool OAICatalogsFeedValidationErrors::is_parse_line_error_Set() const{
    return m_parse_line_error_isSet;
}

bool OAICatalogsFeedValidationErrors::is_parse_line_error_Valid() const{
    return m_parse_line_error_isValid;
}

qint32 OAICatalogsFeedValidationErrors::getAdwordsFormatInvalid() const {
    return adwords_format_invalid;
}
void OAICatalogsFeedValidationErrors::setAdwordsFormatInvalid(const qint32 &adwords_format_invalid) {
    this->adwords_format_invalid = adwords_format_invalid;
    this->m_adwords_format_invalid_isSet = true;
}

bool OAICatalogsFeedValidationErrors::is_adwords_format_invalid_Set() const{
    return m_adwords_format_invalid_isSet;
}

bool OAICatalogsFeedValidationErrors::is_adwords_format_invalid_Valid() const{
    return m_adwords_format_invalid_isValid;
}

qint32 OAICatalogsFeedValidationErrors::getInternalServiceError() const {
    return internal_service_error;
}
void OAICatalogsFeedValidationErrors::setInternalServiceError(const qint32 &internal_service_error) {
    this->internal_service_error = internal_service_error;
    this->m_internal_service_error_isSet = true;
}

bool OAICatalogsFeedValidationErrors::is_internal_service_error_Set() const{
    return m_internal_service_error_isSet;
}

bool OAICatalogsFeedValidationErrors::is_internal_service_error_Valid() const{
    return m_internal_service_error_isValid;
}

qint32 OAICatalogsFeedValidationErrors::getNoVerifiedDomain() const {
    return no_verified_domain;
}
void OAICatalogsFeedValidationErrors::setNoVerifiedDomain(const qint32 &no_verified_domain) {
    this->no_verified_domain = no_verified_domain;
    this->m_no_verified_domain_isSet = true;
}

bool OAICatalogsFeedValidationErrors::is_no_verified_domain_Set() const{
    return m_no_verified_domain_isSet;
}

bool OAICatalogsFeedValidationErrors::is_no_verified_domain_Valid() const{
    return m_no_verified_domain_isValid;
}

qint32 OAICatalogsFeedValidationErrors::getAdultInvalid() const {
    return adult_invalid;
}
void OAICatalogsFeedValidationErrors::setAdultInvalid(const qint32 &adult_invalid) {
    this->adult_invalid = adult_invalid;
    this->m_adult_invalid_isSet = true;
}

bool OAICatalogsFeedValidationErrors::is_adult_invalid_Set() const{
    return m_adult_invalid_isSet;
}

bool OAICatalogsFeedValidationErrors::is_adult_invalid_Valid() const{
    return m_adult_invalid_isValid;
}

qint32 OAICatalogsFeedValidationErrors::getImageLinkLengthTooLong() const {
    return image_link_length_too_long;
}
void OAICatalogsFeedValidationErrors::setImageLinkLengthTooLong(const qint32 &image_link_length_too_long) {
    this->image_link_length_too_long = image_link_length_too_long;
    this->m_image_link_length_too_long_isSet = true;
}

bool OAICatalogsFeedValidationErrors::is_image_link_length_too_long_Set() const{
    return m_image_link_length_too_long_isSet;
}

bool OAICatalogsFeedValidationErrors::is_image_link_length_too_long_Valid() const{
    return m_image_link_length_too_long_isValid;
}

qint32 OAICatalogsFeedValidationErrors::getInvalidDomain() const {
    return invalid_domain;
}
void OAICatalogsFeedValidationErrors::setInvalidDomain(const qint32 &invalid_domain) {
    this->invalid_domain = invalid_domain;
    this->m_invalid_domain_isSet = true;
}

bool OAICatalogsFeedValidationErrors::is_invalid_domain_Set() const{
    return m_invalid_domain_isSet;
}

bool OAICatalogsFeedValidationErrors::is_invalid_domain_Valid() const{
    return m_invalid_domain_isValid;
}

qint32 OAICatalogsFeedValidationErrors::getFeedLengthTooLong() const {
    return feed_length_too_long;
}
void OAICatalogsFeedValidationErrors::setFeedLengthTooLong(const qint32 &feed_length_too_long) {
    this->feed_length_too_long = feed_length_too_long;
    this->m_feed_length_too_long_isSet = true;
}

bool OAICatalogsFeedValidationErrors::is_feed_length_too_long_Set() const{
    return m_feed_length_too_long_isSet;
}

bool OAICatalogsFeedValidationErrors::is_feed_length_too_long_Valid() const{
    return m_feed_length_too_long_isValid;
}

qint32 OAICatalogsFeedValidationErrors::getLinkLengthTooLong() const {
    return link_length_too_long;
}
void OAICatalogsFeedValidationErrors::setLinkLengthTooLong(const qint32 &link_length_too_long) {
    this->link_length_too_long = link_length_too_long;
    this->m_link_length_too_long_isSet = true;
}

bool OAICatalogsFeedValidationErrors::is_link_length_too_long_Set() const{
    return m_link_length_too_long_isSet;
}

bool OAICatalogsFeedValidationErrors::is_link_length_too_long_Valid() const{
    return m_link_length_too_long_isValid;
}

qint32 OAICatalogsFeedValidationErrors::getMalformedXml() const {
    return malformed_xml;
}
void OAICatalogsFeedValidationErrors::setMalformedXml(const qint32 &malformed_xml) {
    this->malformed_xml = malformed_xml;
    this->m_malformed_xml_isSet = true;
}

bool OAICatalogsFeedValidationErrors::is_malformed_xml_Set() const{
    return m_malformed_xml_isSet;
}

bool OAICatalogsFeedValidationErrors::is_malformed_xml_Valid() const{
    return m_malformed_xml_isValid;
}

qint32 OAICatalogsFeedValidationErrors::getPriceMissing() const {
    return price_missing;
}
void OAICatalogsFeedValidationErrors::setPriceMissing(const qint32 &price_missing) {
    this->price_missing = price_missing;
    this->m_price_missing_isSet = true;
}

bool OAICatalogsFeedValidationErrors::is_price_missing_Set() const{
    return m_price_missing_isSet;
}

bool OAICatalogsFeedValidationErrors::is_price_missing_Valid() const{
    return m_price_missing_isValid;
}

qint32 OAICatalogsFeedValidationErrors::getFeedTooSmall() const {
    return feed_too_small;
}
void OAICatalogsFeedValidationErrors::setFeedTooSmall(const qint32 &feed_too_small) {
    this->feed_too_small = feed_too_small;
    this->m_feed_too_small_isSet = true;
}

bool OAICatalogsFeedValidationErrors::is_feed_too_small_Set() const{
    return m_feed_too_small_isSet;
}

bool OAICatalogsFeedValidationErrors::is_feed_too_small_Valid() const{
    return m_feed_too_small_isValid;
}

qint32 OAICatalogsFeedValidationErrors::getMaxItemsPerItemGroupExceeded() const {
    return max_items_per_item_group_exceeded;
}
void OAICatalogsFeedValidationErrors::setMaxItemsPerItemGroupExceeded(const qint32 &max_items_per_item_group_exceeded) {
    this->max_items_per_item_group_exceeded = max_items_per_item_group_exceeded;
    this->m_max_items_per_item_group_exceeded_isSet = true;
}

bool OAICatalogsFeedValidationErrors::is_max_items_per_item_group_exceeded_Set() const{
    return m_max_items_per_item_group_exceeded_isSet;
}

bool OAICatalogsFeedValidationErrors::is_max_items_per_item_group_exceeded_Valid() const{
    return m_max_items_per_item_group_exceeded_isValid;
}

qint32 OAICatalogsFeedValidationErrors::getItemMainImageDownloadFailure() const {
    return item_main_image_download_failure;
}
void OAICatalogsFeedValidationErrors::setItemMainImageDownloadFailure(const qint32 &item_main_image_download_failure) {
    this->item_main_image_download_failure = item_main_image_download_failure;
    this->m_item_main_image_download_failure_isSet = true;
}

bool OAICatalogsFeedValidationErrors::is_item_main_image_download_failure_Set() const{
    return m_item_main_image_download_failure_isSet;
}

bool OAICatalogsFeedValidationErrors::is_item_main_image_download_failure_Valid() const{
    return m_item_main_image_download_failure_isValid;
}

qint32 OAICatalogsFeedValidationErrors::getPinjoinContentUnsafe() const {
    return pinjoin_content_unsafe;
}
void OAICatalogsFeedValidationErrors::setPinjoinContentUnsafe(const qint32 &pinjoin_content_unsafe) {
    this->pinjoin_content_unsafe = pinjoin_content_unsafe;
    this->m_pinjoin_content_unsafe_isSet = true;
}

bool OAICatalogsFeedValidationErrors::is_pinjoin_content_unsafe_Set() const{
    return m_pinjoin_content_unsafe_isSet;
}

bool OAICatalogsFeedValidationErrors::is_pinjoin_content_unsafe_Valid() const{
    return m_pinjoin_content_unsafe_isValid;
}

qint32 OAICatalogsFeedValidationErrors::getBlocklistedImageSignature() const {
    return blocklisted_image_signature;
}
void OAICatalogsFeedValidationErrors::setBlocklistedImageSignature(const qint32 &blocklisted_image_signature) {
    this->blocklisted_image_signature = blocklisted_image_signature;
    this->m_blocklisted_image_signature_isSet = true;
}

bool OAICatalogsFeedValidationErrors::is_blocklisted_image_signature_Set() const{
    return m_blocklisted_image_signature_isSet;
}

bool OAICatalogsFeedValidationErrors::is_blocklisted_image_signature_Valid() const{
    return m_blocklisted_image_signature_isValid;
}

qint32 OAICatalogsFeedValidationErrors::getListPriceInvalid() const {
    return list_price_invalid;
}
void OAICatalogsFeedValidationErrors::setListPriceInvalid(const qint32 &list_price_invalid) {
    this->list_price_invalid = list_price_invalid;
    this->m_list_price_invalid_isSet = true;
}

bool OAICatalogsFeedValidationErrors::is_list_price_invalid_Set() const{
    return m_list_price_invalid_isSet;
}

bool OAICatalogsFeedValidationErrors::is_list_price_invalid_Valid() const{
    return m_list_price_invalid_isValid;
}

qint32 OAICatalogsFeedValidationErrors::getPriceCannotBeDetermined() const {
    return price_cannot_be_determined;
}
void OAICatalogsFeedValidationErrors::setPriceCannotBeDetermined(const qint32 &price_cannot_be_determined) {
    this->price_cannot_be_determined = price_cannot_be_determined;
    this->m_price_cannot_be_determined_isSet = true;
}

bool OAICatalogsFeedValidationErrors::is_price_cannot_be_determined_Set() const{
    return m_price_cannot_be_determined_isSet;
}

bool OAICatalogsFeedValidationErrors::is_price_cannot_be_determined_Valid() const{
    return m_price_cannot_be_determined_isValid;
}

bool OAICatalogsFeedValidationErrors::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_fetch_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fetch_inactive_feed_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encoding_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delimiter_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_required_columns_missing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duplicate_products_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_link_invalid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_itemid_missing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_missing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_missing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_link_missing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_link_missing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_availability_invalid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_price_invalid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_format_invalid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parse_line_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_adwords_format_invalid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_internal_service_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_no_verified_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_adult_invalid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_link_length_too_long_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invalid_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_feed_length_too_long_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_length_too_long_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_malformed_xml_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_missing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_feed_too_small_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_items_per_item_group_exceeded_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_main_image_download_failure_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pinjoin_content_unsafe_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_blocklisted_image_signature_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_list_price_invalid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_cannot_be_determined_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICatalogsFeedValidationErrors::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
