/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILeadFormCreateRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILeadFormCreateRequest::OAILeadFormCreateRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILeadFormCreateRequest::OAILeadFormCreateRequest() {
    this->initializeModel();
}

OAILeadFormCreateRequest::~OAILeadFormCreateRequest() {}

void OAILeadFormCreateRequest::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_privacy_policy_link_isSet = false;
    m_privacy_policy_link_isValid = false;

    m_has_accepted_terms_isSet = false;
    m_has_accepted_terms_isValid = false;

    m_completion_message_isSet = false;
    m_completion_message_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_disclosure_language_isSet = false;
    m_disclosure_language_isValid = false;

    m_questions_isSet = false;
    m_questions_isValid = false;

    m_policy_links_isSet = false;
    m_policy_links_isValid = false;
}

void OAILeadFormCreateRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILeadFormCreateRequest::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_privacy_policy_link_isValid = ::OpenAPI::fromJsonValue(privacy_policy_link, json[QString("privacy_policy_link")]);
    m_privacy_policy_link_isSet = !json[QString("privacy_policy_link")].isNull() && m_privacy_policy_link_isValid;

    m_has_accepted_terms_isValid = ::OpenAPI::fromJsonValue(has_accepted_terms, json[QString("has_accepted_terms")]);
    m_has_accepted_terms_isSet = !json[QString("has_accepted_terms")].isNull() && m_has_accepted_terms_isValid;

    m_completion_message_isValid = ::OpenAPI::fromJsonValue(completion_message, json[QString("completion_message")]);
    m_completion_message_isSet = !json[QString("completion_message")].isNull() && m_completion_message_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_disclosure_language_isValid = ::OpenAPI::fromJsonValue(disclosure_language, json[QString("disclosure_language")]);
    m_disclosure_language_isSet = !json[QString("disclosure_language")].isNull() && m_disclosure_language_isValid;

    m_questions_isValid = ::OpenAPI::fromJsonValue(questions, json[QString("questions")]);
    m_questions_isSet = !json[QString("questions")].isNull() && m_questions_isValid;

    m_policy_links_isValid = ::OpenAPI::fromJsonValue(policy_links, json[QString("policy_links")]);
    m_policy_links_isSet = !json[QString("policy_links")].isNull() && m_policy_links_isValid;
}

QString OAILeadFormCreateRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILeadFormCreateRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(name));
    }
    if (m_privacy_policy_link_isSet) {
        obj.insert(QString("privacy_policy_link"), ::OpenAPI::toJsonValue(privacy_policy_link));
    }
    if (m_has_accepted_terms_isSet) {
        obj.insert(QString("has_accepted_terms"), ::OpenAPI::toJsonValue(has_accepted_terms));
    }
    if (m_completion_message_isSet) {
        obj.insert(QString("completion_message"), ::OpenAPI::toJsonValue(completion_message));
    }
    if (status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(status));
    }
    if (m_disclosure_language_isSet) {
        obj.insert(QString("disclosure_language"), ::OpenAPI::toJsonValue(disclosure_language));
    }
    if (questions.size() > 0) {
        obj.insert(QString("questions"), ::OpenAPI::toJsonValue(questions));
    }
    if (policy_links.size() > 0) {
        obj.insert(QString("policy_links"), ::OpenAPI::toJsonValue(policy_links));
    }
    return obj;
}

QString OAILeadFormCreateRequest::getName() const {
    return name;
}
void OAILeadFormCreateRequest::setName(const QString &name) {
    this->name = name;
    this->m_name_isSet = true;
}

bool OAILeadFormCreateRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAILeadFormCreateRequest::is_name_Valid() const{
    return m_name_isValid;
}

QString OAILeadFormCreateRequest::getPrivacyPolicyLink() const {
    return privacy_policy_link;
}
void OAILeadFormCreateRequest::setPrivacyPolicyLink(const QString &privacy_policy_link) {
    this->privacy_policy_link = privacy_policy_link;
    this->m_privacy_policy_link_isSet = true;
}

bool OAILeadFormCreateRequest::is_privacy_policy_link_Set() const{
    return m_privacy_policy_link_isSet;
}

bool OAILeadFormCreateRequest::is_privacy_policy_link_Valid() const{
    return m_privacy_policy_link_isValid;
}

bool OAILeadFormCreateRequest::isHasAcceptedTerms() const {
    return has_accepted_terms;
}
void OAILeadFormCreateRequest::setHasAcceptedTerms(const bool &has_accepted_terms) {
    this->has_accepted_terms = has_accepted_terms;
    this->m_has_accepted_terms_isSet = true;
}

bool OAILeadFormCreateRequest::is_has_accepted_terms_Set() const{
    return m_has_accepted_terms_isSet;
}

bool OAILeadFormCreateRequest::is_has_accepted_terms_Valid() const{
    return m_has_accepted_terms_isValid;
}

QString OAILeadFormCreateRequest::getCompletionMessage() const {
    return completion_message;
}
void OAILeadFormCreateRequest::setCompletionMessage(const QString &completion_message) {
    this->completion_message = completion_message;
    this->m_completion_message_isSet = true;
}

bool OAILeadFormCreateRequest::is_completion_message_Set() const{
    return m_completion_message_isSet;
}

bool OAILeadFormCreateRequest::is_completion_message_Valid() const{
    return m_completion_message_isValid;
}

OAILeadFormStatus OAILeadFormCreateRequest::getStatus() const {
    return status;
}
void OAILeadFormCreateRequest::setStatus(const OAILeadFormStatus &status) {
    this->status = status;
    this->m_status_isSet = true;
}

bool OAILeadFormCreateRequest::is_status_Set() const{
    return m_status_isSet;
}

bool OAILeadFormCreateRequest::is_status_Valid() const{
    return m_status_isValid;
}

QString OAILeadFormCreateRequest::getDisclosureLanguage() const {
    return disclosure_language;
}
void OAILeadFormCreateRequest::setDisclosureLanguage(const QString &disclosure_language) {
    this->disclosure_language = disclosure_language;
    this->m_disclosure_language_isSet = true;
}

bool OAILeadFormCreateRequest::is_disclosure_language_Set() const{
    return m_disclosure_language_isSet;
}

bool OAILeadFormCreateRequest::is_disclosure_language_Valid() const{
    return m_disclosure_language_isValid;
}

QList<OAILeadFormQuestion> OAILeadFormCreateRequest::getQuestions() const {
    return questions;
}
void OAILeadFormCreateRequest::setQuestions(const QList<OAILeadFormQuestion> &questions) {
    this->questions = questions;
    this->m_questions_isSet = true;
}

bool OAILeadFormCreateRequest::is_questions_Set() const{
    return m_questions_isSet;
}

bool OAILeadFormCreateRequest::is_questions_Valid() const{
    return m_questions_isValid;
}

QList<OAILeadFormCommon_policy_links_inner> OAILeadFormCreateRequest::getPolicyLinks() const {
    return policy_links;
}
void OAILeadFormCreateRequest::setPolicyLinks(const QList<OAILeadFormCommon_policy_links_inner> &policy_links) {
    this->policy_links = policy_links;
    this->m_policy_links_isSet = true;
}

bool OAILeadFormCreateRequest::is_policy_links_Set() const{
    return m_policy_links_isSet;
}

bool OAILeadFormCreateRequest::is_policy_links_Valid() const{
    return m_policy_links_isValid;
}

bool OAILeadFormCreateRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_privacy_policy_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_accepted_terms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_completion_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_disclosure_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (questions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (policy_links.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILeadFormCreateRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_privacy_policy_link_isValid && m_has_accepted_terms_isValid && m_completion_message_isValid && m_questions_isValid && true;
}

} // namespace OpenAPI
