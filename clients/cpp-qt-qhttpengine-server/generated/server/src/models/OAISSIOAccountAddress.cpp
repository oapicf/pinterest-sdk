/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISSIOAccountAddress.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISSIOAccountAddress::OAISSIOAccountAddress(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISSIOAccountAddress::OAISSIOAccountAddress() {
    this->initializeModel();
}

OAISSIOAccountAddress::~OAISSIOAccountAddress() {}

void OAISSIOAccountAddress::initializeModel() {

    m_display_isSet = false;
    m_display_isValid = false;

    m_purpose_isSet = false;
    m_purpose_isValid = false;

    m_address_id_isSet = false;
    m_address_id_isValid = false;

    m_order_legal_entity_isSet = false;
    m_order_legal_entity_isValid = false;
}

void OAISSIOAccountAddress::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISSIOAccountAddress::fromJsonObject(QJsonObject json) {

    m_display_isValid = ::OpenAPI::fromJsonValue(display, json[QString("display")]);
    m_display_isSet = !json[QString("display")].isNull() && m_display_isValid;

    m_purpose_isValid = ::OpenAPI::fromJsonValue(purpose, json[QString("purpose")]);
    m_purpose_isSet = !json[QString("purpose")].isNull() && m_purpose_isValid;

    m_address_id_isValid = ::OpenAPI::fromJsonValue(address_id, json[QString("address_id")]);
    m_address_id_isSet = !json[QString("address_id")].isNull() && m_address_id_isValid;

    m_order_legal_entity_isValid = ::OpenAPI::fromJsonValue(order_legal_entity, json[QString("order_legal_entity")]);
    m_order_legal_entity_isSet = !json[QString("order_legal_entity")].isNull() && m_order_legal_entity_isValid;
}

QString OAISSIOAccountAddress::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISSIOAccountAddress::asJsonObject() const {
    QJsonObject obj;
    if (m_display_isSet) {
        obj.insert(QString("display"), ::OpenAPI::toJsonValue(display));
    }
    if (m_purpose_isSet) {
        obj.insert(QString("purpose"), ::OpenAPI::toJsonValue(purpose));
    }
    if (m_address_id_isSet) {
        obj.insert(QString("address_id"), ::OpenAPI::toJsonValue(address_id));
    }
    if (m_order_legal_entity_isSet) {
        obj.insert(QString("order_legal_entity"), ::OpenAPI::toJsonValue(order_legal_entity));
    }
    return obj;
}

QString OAISSIOAccountAddress::getDisplay() const {
    return display;
}
void OAISSIOAccountAddress::setDisplay(const QString &display) {
    this->display = display;
    this->m_display_isSet = true;
}

bool OAISSIOAccountAddress::is_display_Set() const{
    return m_display_isSet;
}

bool OAISSIOAccountAddress::is_display_Valid() const{
    return m_display_isValid;
}

QString OAISSIOAccountAddress::getPurpose() const {
    return purpose;
}
void OAISSIOAccountAddress::setPurpose(const QString &purpose) {
    this->purpose = purpose;
    this->m_purpose_isSet = true;
}

bool OAISSIOAccountAddress::is_purpose_Set() const{
    return m_purpose_isSet;
}

bool OAISSIOAccountAddress::is_purpose_Valid() const{
    return m_purpose_isValid;
}

QString OAISSIOAccountAddress::getAddressId() const {
    return address_id;
}
void OAISSIOAccountAddress::setAddressId(const QString &address_id) {
    this->address_id = address_id;
    this->m_address_id_isSet = true;
}

bool OAISSIOAccountAddress::is_address_id_Set() const{
    return m_address_id_isSet;
}

bool OAISSIOAccountAddress::is_address_id_Valid() const{
    return m_address_id_isValid;
}

QString OAISSIOAccountAddress::getOrderLegalEntity() const {
    return order_legal_entity;
}
void OAISSIOAccountAddress::setOrderLegalEntity(const QString &order_legal_entity) {
    this->order_legal_entity = order_legal_entity;
    this->m_order_legal_entity_isSet = true;
}

bool OAISSIOAccountAddress::is_order_legal_entity_Set() const{
    return m_order_legal_entity_isSet;
}

bool OAISSIOAccountAddress::is_order_legal_entity_Valid() const{
    return m_order_legal_entity_isValid;
}

bool OAISSIOAccountAddress::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_display_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_purpose_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_legal_entity_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISSIOAccountAddress::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
