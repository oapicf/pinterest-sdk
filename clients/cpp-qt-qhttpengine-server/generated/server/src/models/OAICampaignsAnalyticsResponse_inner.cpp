/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICampaignsAnalyticsResponse_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICampaignsAnalyticsResponse_inner::OAICampaignsAnalyticsResponse_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICampaignsAnalyticsResponse_inner::OAICampaignsAnalyticsResponse_inner() {
    this->initializeModel();
}

OAICampaignsAnalyticsResponse_inner::~OAICampaignsAnalyticsResponse_inner() {}

void OAICampaignsAnalyticsResponse_inner::initializeModel() {

    m_campaign_id_isSet = false;
    m_campaign_id_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;
}

void OAICampaignsAnalyticsResponse_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICampaignsAnalyticsResponse_inner::fromJsonObject(QJsonObject json) {

    m_campaign_id_isValid = ::OpenAPI::fromJsonValue(campaign_id, json[QString("CAMPAIGN_ID")]);
    m_campaign_id_isSet = !json[QString("CAMPAIGN_ID")].isNull() && m_campaign_id_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(date, json[QString("DATE")]);
    m_date_isSet = !json[QString("DATE")].isNull() && m_date_isValid;
}

QString OAICampaignsAnalyticsResponse_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICampaignsAnalyticsResponse_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_campaign_id_isSet) {
        obj.insert(QString("CAMPAIGN_ID"), ::OpenAPI::toJsonValue(campaign_id));
    }
    if (m_date_isSet) {
        obj.insert(QString("DATE"), ::OpenAPI::toJsonValue(date));
    }
    return obj;
}

QString OAICampaignsAnalyticsResponse_inner::getCampaignId() const {
    return campaign_id;
}
void OAICampaignsAnalyticsResponse_inner::setCampaignId(const QString &campaign_id) {
    this->campaign_id = campaign_id;
    this->m_campaign_id_isSet = true;
}

bool OAICampaignsAnalyticsResponse_inner::is_campaign_id_Set() const{
    return m_campaign_id_isSet;
}

bool OAICampaignsAnalyticsResponse_inner::is_campaign_id_Valid() const{
    return m_campaign_id_isValid;
}

QDate OAICampaignsAnalyticsResponse_inner::getDate() const {
    return date;
}
void OAICampaignsAnalyticsResponse_inner::setDate(const QDate &date) {
    this->date = date;
    this->m_date_isSet = true;
}

bool OAICampaignsAnalyticsResponse_inner::is_date_Set() const{
    return m_date_isSet;
}

bool OAICampaignsAnalyticsResponse_inner::is_date_Valid() const{
    return m_date_isValid;
}

bool OAICampaignsAnalyticsResponse_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_campaign_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICampaignsAnalyticsResponse_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_campaign_id_isValid && true;
}

} // namespace OpenAPI
