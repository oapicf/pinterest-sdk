/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAdvancedAuctionItemsSubmitUpsertRecord.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAdvancedAuctionItemsSubmitUpsertRecord::OAIAdvancedAuctionItemsSubmitUpsertRecord(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAdvancedAuctionItemsSubmitUpsertRecord::OAIAdvancedAuctionItemsSubmitUpsertRecord() {
    this->initializeModel();
}

OAIAdvancedAuctionItemsSubmitUpsertRecord::~OAIAdvancedAuctionItemsSubmitUpsertRecord() {}

void OAIAdvancedAuctionItemsSubmitUpsertRecord::initializeModel() {

    m_item_id_isSet = false;
    m_item_id_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;

    m_bid_options_isSet = false;
    m_bid_options_isValid = false;

    m_update_mask_isSet = false;
    m_update_mask_isValid = false;
}

void OAIAdvancedAuctionItemsSubmitUpsertRecord::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAdvancedAuctionItemsSubmitUpsertRecord::fromJsonObject(QJsonObject json) {

    m_item_id_isValid = ::OpenAPI::fromJsonValue(item_id, json[QString("item_id")]);
    m_item_id_isSet = !json[QString("item_id")].isNull() && m_item_id_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(language, json[QString("language")]);
    m_language_isSet = !json[QString("language")].isNull() && m_language_isValid;

    m_bid_options_isValid = ::OpenAPI::fromJsonValue(bid_options, json[QString("bid_options")]);
    m_bid_options_isSet = !json[QString("bid_options")].isNull() && m_bid_options_isValid;

    m_update_mask_isValid = ::OpenAPI::fromJsonValue(update_mask, json[QString("update_mask")]);
    m_update_mask_isSet = !json[QString("update_mask")].isNull() && m_update_mask_isValid;
}

QString OAIAdvancedAuctionItemsSubmitUpsertRecord::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAdvancedAuctionItemsSubmitUpsertRecord::asJsonObject() const {
    QJsonObject obj;
    if (m_item_id_isSet) {
        obj.insert(QString("item_id"), ::OpenAPI::toJsonValue(item_id));
    }
    if (country.isSet()) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(country));
    }
    if (language.isSet()) {
        obj.insert(QString("language"), ::OpenAPI::toJsonValue(language));
    }
    if (bid_options.isSet()) {
        obj.insert(QString("bid_options"), ::OpenAPI::toJsonValue(bid_options));
    }
    if (update_mask.size() > 0) {
        obj.insert(QString("update_mask"), ::OpenAPI::toJsonValue(update_mask));
    }
    return obj;
}

QString OAIAdvancedAuctionItemsSubmitUpsertRecord::getItemId() const {
    return item_id;
}
void OAIAdvancedAuctionItemsSubmitUpsertRecord::setItemId(const QString &item_id) {
    this->item_id = item_id;
    this->m_item_id_isSet = true;
}

bool OAIAdvancedAuctionItemsSubmitUpsertRecord::is_item_id_Set() const{
    return m_item_id_isSet;
}

bool OAIAdvancedAuctionItemsSubmitUpsertRecord::is_item_id_Valid() const{
    return m_item_id_isValid;
}

OAICountry OAIAdvancedAuctionItemsSubmitUpsertRecord::getCountry() const {
    return country;
}
void OAIAdvancedAuctionItemsSubmitUpsertRecord::setCountry(const OAICountry &country) {
    this->country = country;
    this->m_country_isSet = true;
}

bool OAIAdvancedAuctionItemsSubmitUpsertRecord::is_country_Set() const{
    return m_country_isSet;
}

bool OAIAdvancedAuctionItemsSubmitUpsertRecord::is_country_Valid() const{
    return m_country_isValid;
}

OAILanguage OAIAdvancedAuctionItemsSubmitUpsertRecord::getLanguage() const {
    return language;
}
void OAIAdvancedAuctionItemsSubmitUpsertRecord::setLanguage(const OAILanguage &language) {
    this->language = language;
    this->m_language_isSet = true;
}

bool OAIAdvancedAuctionItemsSubmitUpsertRecord::is_language_Set() const{
    return m_language_isSet;
}

bool OAIAdvancedAuctionItemsSubmitUpsertRecord::is_language_Valid() const{
    return m_language_isValid;
}

OAIAdvancedAuctionBidOptions OAIAdvancedAuctionItemsSubmitUpsertRecord::getBidOptions() const {
    return bid_options;
}
void OAIAdvancedAuctionItemsSubmitUpsertRecord::setBidOptions(const OAIAdvancedAuctionBidOptions &bid_options) {
    this->bid_options = bid_options;
    this->m_bid_options_isSet = true;
}

bool OAIAdvancedAuctionItemsSubmitUpsertRecord::is_bid_options_Set() const{
    return m_bid_options_isSet;
}

bool OAIAdvancedAuctionItemsSubmitUpsertRecord::is_bid_options_Valid() const{
    return m_bid_options_isValid;
}

QList<OAIUpdateMaskBidOptionField> OAIAdvancedAuctionItemsSubmitUpsertRecord::getUpdateMask() const {
    return update_mask;
}
void OAIAdvancedAuctionItemsSubmitUpsertRecord::setUpdateMask(const QList<OAIUpdateMaskBidOptionField> &update_mask) {
    this->update_mask = update_mask;
    this->m_update_mask_isSet = true;
}

bool OAIAdvancedAuctionItemsSubmitUpsertRecord::is_update_mask_Set() const{
    return m_update_mask_isSet;
}

bool OAIAdvancedAuctionItemsSubmitUpsertRecord::is_update_mask_Valid() const{
    return m_update_mask_isValid;
}

bool OAIAdvancedAuctionItemsSubmitUpsertRecord::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_item_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (country.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (language.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (bid_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (update_mask.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAdvancedAuctionItemsSubmitUpsertRecord::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_item_id_isValid && m_country_isValid && m_language_isValid && m_bid_options_isValid && m_update_mask_isValid && true;
}

} // namespace OpenAPI
