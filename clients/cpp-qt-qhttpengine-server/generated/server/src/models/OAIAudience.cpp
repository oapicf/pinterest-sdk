/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAudience.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAudience::OAIAudience(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAudience::OAIAudience() {
    this->initializeModel();
}

OAIAudience::~OAIAudience() {}

void OAIAudience::initializeModel() {

    m_ad_account_id_isSet = false;
    m_ad_account_id_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_audience_type_isSet = false;
    m_audience_type_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_rule_isSet = false;
    m_rule_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_created_timestamp_isSet = false;
    m_created_timestamp_isValid = false;

    m_updated_timestamp_isSet = false;
    m_updated_timestamp_isValid = false;
}

void OAIAudience::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAudience::fromJsonObject(QJsonObject json) {

    m_ad_account_id_isValid = ::OpenAPI::fromJsonValue(ad_account_id, json[QString("ad_account_id")]);
    m_ad_account_id_isSet = !json[QString("ad_account_id")].isNull() && m_ad_account_id_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_audience_type_isValid = ::OpenAPI::fromJsonValue(audience_type, json[QString("audience_type")]);
    m_audience_type_isSet = !json[QString("audience_type")].isNull() && m_audience_type_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_rule_isValid = ::OpenAPI::fromJsonValue(rule, json[QString("rule")]);
    m_rule_isSet = !json[QString("rule")].isNull() && m_rule_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_created_timestamp_isValid = ::OpenAPI::fromJsonValue(created_timestamp, json[QString("created_timestamp")]);
    m_created_timestamp_isSet = !json[QString("created_timestamp")].isNull() && m_created_timestamp_isValid;

    m_updated_timestamp_isValid = ::OpenAPI::fromJsonValue(updated_timestamp, json[QString("updated_timestamp")]);
    m_updated_timestamp_isSet = !json[QString("updated_timestamp")].isNull() && m_updated_timestamp_isValid;
}

QString OAIAudience::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAudience::asJsonObject() const {
    QJsonObject obj;
    if (m_ad_account_id_isSet) {
        obj.insert(QString("ad_account_id"), ::OpenAPI::toJsonValue(ad_account_id));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(name));
    }
    if (m_audience_type_isSet) {
        obj.insert(QString("audience_type"), ::OpenAPI::toJsonValue(audience_type));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(description));
    }
    if (rule.isSet()) {
        obj.insert(QString("rule"), ::OpenAPI::toJsonValue(rule));
    }
    if (m_size_isSet) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(size));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(status));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(type));
    }
    if (m_created_timestamp_isSet) {
        obj.insert(QString("created_timestamp"), ::OpenAPI::toJsonValue(created_timestamp));
    }
    if (m_updated_timestamp_isSet) {
        obj.insert(QString("updated_timestamp"), ::OpenAPI::toJsonValue(updated_timestamp));
    }
    return obj;
}

QString OAIAudience::getAdAccountId() const {
    return ad_account_id;
}
void OAIAudience::setAdAccountId(const QString &ad_account_id) {
    this->ad_account_id = ad_account_id;
    this->m_ad_account_id_isSet = true;
}

bool OAIAudience::is_ad_account_id_Set() const{
    return m_ad_account_id_isSet;
}

bool OAIAudience::is_ad_account_id_Valid() const{
    return m_ad_account_id_isValid;
}

QString OAIAudience::getId() const {
    return id;
}
void OAIAudience::setId(const QString &id) {
    this->id = id;
    this->m_id_isSet = true;
}

bool OAIAudience::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAudience::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIAudience::getName() const {
    return name;
}
void OAIAudience::setName(const QString &name) {
    this->name = name;
    this->m_name_isSet = true;
}

bool OAIAudience::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAudience::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIAudience::getAudienceType() const {
    return audience_type;
}
void OAIAudience::setAudienceType(const QString &audience_type) {
    this->audience_type = audience_type;
    this->m_audience_type_isSet = true;
}

bool OAIAudience::is_audience_type_Set() const{
    return m_audience_type_isSet;
}

bool OAIAudience::is_audience_type_Valid() const{
    return m_audience_type_isValid;
}

QString OAIAudience::getDescription() const {
    return description;
}
void OAIAudience::setDescription(const QString &description) {
    this->description = description;
    this->m_description_isSet = true;
}

bool OAIAudience::is_description_Set() const{
    return m_description_isSet;
}

bool OAIAudience::is_description_Valid() const{
    return m_description_isValid;
}

OAIAudienceRule OAIAudience::getRule() const {
    return rule;
}
void OAIAudience::setRule(const OAIAudienceRule &rule) {
    this->rule = rule;
    this->m_rule_isSet = true;
}

bool OAIAudience::is_rule_Set() const{
    return m_rule_isSet;
}

bool OAIAudience::is_rule_Valid() const{
    return m_rule_isValid;
}

qint32 OAIAudience::getSize() const {
    return size;
}
void OAIAudience::setSize(const qint32 &size) {
    this->size = size;
    this->m_size_isSet = true;
}

bool OAIAudience::is_size_Set() const{
    return m_size_isSet;
}

bool OAIAudience::is_size_Valid() const{
    return m_size_isValid;
}

QString OAIAudience::getStatus() const {
    return status;
}
void OAIAudience::setStatus(const QString &status) {
    this->status = status;
    this->m_status_isSet = true;
}

bool OAIAudience::is_status_Set() const{
    return m_status_isSet;
}

bool OAIAudience::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIAudience::getType() const {
    return type;
}
void OAIAudience::setType(const QString &type) {
    this->type = type;
    this->m_type_isSet = true;
}

bool OAIAudience::is_type_Set() const{
    return m_type_isSet;
}

bool OAIAudience::is_type_Valid() const{
    return m_type_isValid;
}

qint32 OAIAudience::getCreatedTimestamp() const {
    return created_timestamp;
}
void OAIAudience::setCreatedTimestamp(const qint32 &created_timestamp) {
    this->created_timestamp = created_timestamp;
    this->m_created_timestamp_isSet = true;
}

bool OAIAudience::is_created_timestamp_Set() const{
    return m_created_timestamp_isSet;
}

bool OAIAudience::is_created_timestamp_Valid() const{
    return m_created_timestamp_isValid;
}

qint32 OAIAudience::getUpdatedTimestamp() const {
    return updated_timestamp;
}
void OAIAudience::setUpdatedTimestamp(const qint32 &updated_timestamp) {
    this->updated_timestamp = updated_timestamp;
    this->m_updated_timestamp_isSet = true;
}

bool OAIAudience::is_updated_timestamp_Set() const{
    return m_updated_timestamp_isSet;
}

bool OAIAudience::is_updated_timestamp_Valid() const{
    return m_updated_timestamp_isValid;
}

bool OAIAudience::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ad_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_audience_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (rule.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAudience::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
