/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConversionTagCreate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConversionTagCreate::OAIConversionTagCreate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConversionTagCreate::OAIConversionTagCreate() {
    this->initializeModel();
}

OAIConversionTagCreate::~OAIConversionTagCreate() {}

void OAIConversionTagCreate::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_aem_enabled_isSet = false;
    m_aem_enabled_isValid = false;

    m_md_frequency_isSet = false;
    m_md_frequency_isValid = false;

    m_aem_fnln_enabled_isSet = false;
    m_aem_fnln_enabled_isValid = false;

    m_aem_ph_enabled_isSet = false;
    m_aem_ph_enabled_isValid = false;

    m_aem_ge_enabled_isSet = false;
    m_aem_ge_enabled_isValid = false;

    m_aem_db_enabled_isSet = false;
    m_aem_db_enabled_isValid = false;

    m_aem_loc_enabled_isSet = false;
    m_aem_loc_enabled_isValid = false;
}

void OAIConversionTagCreate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConversionTagCreate::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_aem_enabled_isValid = ::OpenAPI::fromJsonValue(aem_enabled, json[QString("aem_enabled")]);
    m_aem_enabled_isSet = !json[QString("aem_enabled")].isNull() && m_aem_enabled_isValid;

    m_md_frequency_isValid = ::OpenAPI::fromJsonValue(md_frequency, json[QString("md_frequency")]);
    m_md_frequency_isSet = !json[QString("md_frequency")].isNull() && m_md_frequency_isValid;

    m_aem_fnln_enabled_isValid = ::OpenAPI::fromJsonValue(aem_fnln_enabled, json[QString("aem_fnln_enabled")]);
    m_aem_fnln_enabled_isSet = !json[QString("aem_fnln_enabled")].isNull() && m_aem_fnln_enabled_isValid;

    m_aem_ph_enabled_isValid = ::OpenAPI::fromJsonValue(aem_ph_enabled, json[QString("aem_ph_enabled")]);
    m_aem_ph_enabled_isSet = !json[QString("aem_ph_enabled")].isNull() && m_aem_ph_enabled_isValid;

    m_aem_ge_enabled_isValid = ::OpenAPI::fromJsonValue(aem_ge_enabled, json[QString("aem_ge_enabled")]);
    m_aem_ge_enabled_isSet = !json[QString("aem_ge_enabled")].isNull() && m_aem_ge_enabled_isValid;

    m_aem_db_enabled_isValid = ::OpenAPI::fromJsonValue(aem_db_enabled, json[QString("aem_db_enabled")]);
    m_aem_db_enabled_isSet = !json[QString("aem_db_enabled")].isNull() && m_aem_db_enabled_isValid;

    m_aem_loc_enabled_isValid = ::OpenAPI::fromJsonValue(aem_loc_enabled, json[QString("aem_loc_enabled")]);
    m_aem_loc_enabled_isSet = !json[QString("aem_loc_enabled")].isNull() && m_aem_loc_enabled_isValid;
}

QString OAIConversionTagCreate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConversionTagCreate::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(name));
    }
    if (m_aem_enabled_isSet) {
        obj.insert(QString("aem_enabled"), ::OpenAPI::toJsonValue(aem_enabled));
    }
    if (m_md_frequency_isSet) {
        obj.insert(QString("md_frequency"), ::OpenAPI::toJsonValue(md_frequency));
    }
    if (m_aem_fnln_enabled_isSet) {
        obj.insert(QString("aem_fnln_enabled"), ::OpenAPI::toJsonValue(aem_fnln_enabled));
    }
    if (m_aem_ph_enabled_isSet) {
        obj.insert(QString("aem_ph_enabled"), ::OpenAPI::toJsonValue(aem_ph_enabled));
    }
    if (m_aem_ge_enabled_isSet) {
        obj.insert(QString("aem_ge_enabled"), ::OpenAPI::toJsonValue(aem_ge_enabled));
    }
    if (m_aem_db_enabled_isSet) {
        obj.insert(QString("aem_db_enabled"), ::OpenAPI::toJsonValue(aem_db_enabled));
    }
    if (m_aem_loc_enabled_isSet) {
        obj.insert(QString("aem_loc_enabled"), ::OpenAPI::toJsonValue(aem_loc_enabled));
    }
    return obj;
}

QString OAIConversionTagCreate::getName() const {
    return name;
}
void OAIConversionTagCreate::setName(const QString &name) {
    this->name = name;
    this->m_name_isSet = true;
}

bool OAIConversionTagCreate::is_name_Set() const{
    return m_name_isSet;
}

bool OAIConversionTagCreate::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIConversionTagCreate::isAemEnabled() const {
    return aem_enabled;
}
void OAIConversionTagCreate::setAemEnabled(const bool &aem_enabled) {
    this->aem_enabled = aem_enabled;
    this->m_aem_enabled_isSet = true;
}

bool OAIConversionTagCreate::is_aem_enabled_Set() const{
    return m_aem_enabled_isSet;
}

bool OAIConversionTagCreate::is_aem_enabled_Valid() const{
    return m_aem_enabled_isValid;
}

double OAIConversionTagCreate::getMdFrequency() const {
    return md_frequency;
}
void OAIConversionTagCreate::setMdFrequency(const double &md_frequency) {
    this->md_frequency = md_frequency;
    this->m_md_frequency_isSet = true;
}

bool OAIConversionTagCreate::is_md_frequency_Set() const{
    return m_md_frequency_isSet;
}

bool OAIConversionTagCreate::is_md_frequency_Valid() const{
    return m_md_frequency_isValid;
}

bool OAIConversionTagCreate::isAemFnlnEnabled() const {
    return aem_fnln_enabled;
}
void OAIConversionTagCreate::setAemFnlnEnabled(const bool &aem_fnln_enabled) {
    this->aem_fnln_enabled = aem_fnln_enabled;
    this->m_aem_fnln_enabled_isSet = true;
}

bool OAIConversionTagCreate::is_aem_fnln_enabled_Set() const{
    return m_aem_fnln_enabled_isSet;
}

bool OAIConversionTagCreate::is_aem_fnln_enabled_Valid() const{
    return m_aem_fnln_enabled_isValid;
}

bool OAIConversionTagCreate::isAemPhEnabled() const {
    return aem_ph_enabled;
}
void OAIConversionTagCreate::setAemPhEnabled(const bool &aem_ph_enabled) {
    this->aem_ph_enabled = aem_ph_enabled;
    this->m_aem_ph_enabled_isSet = true;
}

bool OAIConversionTagCreate::is_aem_ph_enabled_Set() const{
    return m_aem_ph_enabled_isSet;
}

bool OAIConversionTagCreate::is_aem_ph_enabled_Valid() const{
    return m_aem_ph_enabled_isValid;
}

bool OAIConversionTagCreate::isAemGeEnabled() const {
    return aem_ge_enabled;
}
void OAIConversionTagCreate::setAemGeEnabled(const bool &aem_ge_enabled) {
    this->aem_ge_enabled = aem_ge_enabled;
    this->m_aem_ge_enabled_isSet = true;
}

bool OAIConversionTagCreate::is_aem_ge_enabled_Set() const{
    return m_aem_ge_enabled_isSet;
}

bool OAIConversionTagCreate::is_aem_ge_enabled_Valid() const{
    return m_aem_ge_enabled_isValid;
}

bool OAIConversionTagCreate::isAemDbEnabled() const {
    return aem_db_enabled;
}
void OAIConversionTagCreate::setAemDbEnabled(const bool &aem_db_enabled) {
    this->aem_db_enabled = aem_db_enabled;
    this->m_aem_db_enabled_isSet = true;
}

bool OAIConversionTagCreate::is_aem_db_enabled_Set() const{
    return m_aem_db_enabled_isSet;
}

bool OAIConversionTagCreate::is_aem_db_enabled_Valid() const{
    return m_aem_db_enabled_isValid;
}

bool OAIConversionTagCreate::isAemLocEnabled() const {
    return aem_loc_enabled;
}
void OAIConversionTagCreate::setAemLocEnabled(const bool &aem_loc_enabled) {
    this->aem_loc_enabled = aem_loc_enabled;
    this->m_aem_loc_enabled_isSet = true;
}

bool OAIConversionTagCreate::is_aem_loc_enabled_Set() const{
    return m_aem_loc_enabled_isSet;
}

bool OAIConversionTagCreate::is_aem_loc_enabled_Valid() const{
    return m_aem_loc_enabled_isValid;
}

bool OAIConversionTagCreate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_aem_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_md_frequency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_aem_fnln_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_aem_ph_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_aem_ge_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_aem_db_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_aem_loc_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConversionTagCreate::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && true;
}

} // namespace OpenAPI
