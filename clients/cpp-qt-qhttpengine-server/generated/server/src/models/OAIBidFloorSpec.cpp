/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBidFloorSpec.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBidFloorSpec::OAIBidFloorSpec(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBidFloorSpec::OAIBidFloorSpec() {
    this->initializeModel();
}

OAIBidFloorSpec::~OAIBidFloorSpec() {}

void OAIBidFloorSpec::initializeModel() {

    m_countries_isSet = false;
    m_countries_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_objective_type_isSet = false;
    m_objective_type_isValid = false;

    m_billable_event_isSet = false;
    m_billable_event_isValid = false;

    m_optimization_goal_metadata_isSet = false;
    m_optimization_goal_metadata_isValid = false;

    m_creative_type_isSet = false;
    m_creative_type_isValid = false;
}

void OAIBidFloorSpec::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBidFloorSpec::fromJsonObject(QJsonObject json) {

    m_countries_isValid = ::OpenAPI::fromJsonValue(countries, json[QString("countries")]);
    m_countries_isSet = !json[QString("countries")].isNull() && m_countries_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_objective_type_isValid = ::OpenAPI::fromJsonValue(objective_type, json[QString("objective_type")]);
    m_objective_type_isSet = !json[QString("objective_type")].isNull() && m_objective_type_isValid;

    m_billable_event_isValid = ::OpenAPI::fromJsonValue(billable_event, json[QString("billable_event")]);
    m_billable_event_isSet = !json[QString("billable_event")].isNull() && m_billable_event_isValid;

    m_optimization_goal_metadata_isValid = ::OpenAPI::fromJsonValue(optimization_goal_metadata, json[QString("optimization_goal_metadata")]);
    m_optimization_goal_metadata_isSet = !json[QString("optimization_goal_metadata")].isNull() && m_optimization_goal_metadata_isValid;

    m_creative_type_isValid = ::OpenAPI::fromJsonValue(creative_type, json[QString("creative_type")]);
    m_creative_type_isSet = !json[QString("creative_type")].isNull() && m_creative_type_isValid;
}

QString OAIBidFloorSpec::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBidFloorSpec::asJsonObject() const {
    QJsonObject obj;
    if (countries.size() > 0) {
        obj.insert(QString("countries"), ::OpenAPI::toJsonValue(countries));
    }
    if (currency.isSet()) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(currency));
    }
    if (objective_type.isSet()) {
        obj.insert(QString("objective_type"), ::OpenAPI::toJsonValue(objective_type));
    }
    if (billable_event.isSet()) {
        obj.insert(QString("billable_event"), ::OpenAPI::toJsonValue(billable_event));
    }
    if (optimization_goal_metadata.isSet()) {
        obj.insert(QString("optimization_goal_metadata"), ::OpenAPI::toJsonValue(optimization_goal_metadata));
    }
    if (creative_type.isSet()) {
        obj.insert(QString("creative_type"), ::OpenAPI::toJsonValue(creative_type));
    }
    return obj;
}

QList<OAICountry> OAIBidFloorSpec::getCountries() const {
    return countries;
}
void OAIBidFloorSpec::setCountries(const QList<OAICountry> &countries) {
    this->countries = countries;
    this->m_countries_isSet = true;
}

bool OAIBidFloorSpec::is_countries_Set() const{
    return m_countries_isSet;
}

bool OAIBidFloorSpec::is_countries_Valid() const{
    return m_countries_isValid;
}

OAICurrency OAIBidFloorSpec::getCurrency() const {
    return currency;
}
void OAIBidFloorSpec::setCurrency(const OAICurrency &currency) {
    this->currency = currency;
    this->m_currency_isSet = true;
}

bool OAIBidFloorSpec::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAIBidFloorSpec::is_currency_Valid() const{
    return m_currency_isValid;
}

OAIObjectiveType OAIBidFloorSpec::getObjectiveType() const {
    return objective_type;
}
void OAIBidFloorSpec::setObjectiveType(const OAIObjectiveType &objective_type) {
    this->objective_type = objective_type;
    this->m_objective_type_isSet = true;
}

bool OAIBidFloorSpec::is_objective_type_Set() const{
    return m_objective_type_isSet;
}

bool OAIBidFloorSpec::is_objective_type_Valid() const{
    return m_objective_type_isValid;
}

OAIActionType OAIBidFloorSpec::getBillableEvent() const {
    return billable_event;
}
void OAIBidFloorSpec::setBillableEvent(const OAIActionType &billable_event) {
    this->billable_event = billable_event;
    this->m_billable_event_isSet = true;
}

bool OAIBidFloorSpec::is_billable_event_Set() const{
    return m_billable_event_isSet;
}

bool OAIBidFloorSpec::is_billable_event_Valid() const{
    return m_billable_event_isValid;
}

OAIOptimizationGoalMetadata OAIBidFloorSpec::getOptimizationGoalMetadata() const {
    return optimization_goal_metadata;
}
void OAIBidFloorSpec::setOptimizationGoalMetadata(const OAIOptimizationGoalMetadata &optimization_goal_metadata) {
    this->optimization_goal_metadata = optimization_goal_metadata;
    this->m_optimization_goal_metadata_isSet = true;
}

bool OAIBidFloorSpec::is_optimization_goal_metadata_Set() const{
    return m_optimization_goal_metadata_isSet;
}

bool OAIBidFloorSpec::is_optimization_goal_metadata_Valid() const{
    return m_optimization_goal_metadata_isValid;
}

OAICreativeType OAIBidFloorSpec::getCreativeType() const {
    return creative_type;
}
void OAIBidFloorSpec::setCreativeType(const OAICreativeType &creative_type) {
    this->creative_type = creative_type;
    this->m_creative_type_isSet = true;
}

bool OAIBidFloorSpec::is_creative_type_Set() const{
    return m_creative_type_isSet;
}

bool OAIBidFloorSpec::is_creative_type_Valid() const{
    return m_creative_type_isValid;
}

bool OAIBidFloorSpec::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (countries.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (currency.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (objective_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (billable_event.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (optimization_goal_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (creative_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBidFloorSpec::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_currency_isValid && m_billable_event_isValid && true;
}

} // namespace OpenAPI
