/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICatalogsHotelFeed.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICatalogsHotelFeed::OAICatalogsHotelFeed(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICatalogsHotelFeed::OAICatalogsHotelFeed() {
    this->initializeModel();
}

OAICatalogsHotelFeed::~OAICatalogsHotelFeed() {}

void OAICatalogsHotelFeed::initializeModel() {

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_format_isSet = false;
    m_format_isValid = false;

    m_catalog_type_isSet = false;
    m_catalog_type_isValid = false;

    m_credentials_isSet = false;
    m_credentials_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_preferred_processing_schedule_isSet = false;
    m_preferred_processing_schedule_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_default_currency_isSet = false;
    m_default_currency_isValid = false;

    m_default_locale_isSet = false;
    m_default_locale_isValid = false;

    m_catalog_id_isSet = false;
    m_catalog_id_isValid = false;
}

void OAICatalogsHotelFeed::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICatalogsHotelFeed::fromJsonObject(QJsonObject json) {

    m_created_at_isValid = ::OpenAPI::fromJsonValue(created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_format_isValid = ::OpenAPI::fromJsonValue(format, json[QString("format")]);
    m_format_isSet = !json[QString("format")].isNull() && m_format_isValid;

    m_catalog_type_isValid = ::OpenAPI::fromJsonValue(catalog_type, json[QString("catalog_type")]);
    m_catalog_type_isSet = !json[QString("catalog_type")].isNull() && m_catalog_type_isValid;

    m_credentials_isValid = ::OpenAPI::fromJsonValue(credentials, json[QString("credentials")]);
    m_credentials_isSet = !json[QString("credentials")].isNull() && m_credentials_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_preferred_processing_schedule_isValid = ::OpenAPI::fromJsonValue(preferred_processing_schedule, json[QString("preferred_processing_schedule")]);
    m_preferred_processing_schedule_isSet = !json[QString("preferred_processing_schedule")].isNull() && m_preferred_processing_schedule_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_default_currency_isValid = ::OpenAPI::fromJsonValue(default_currency, json[QString("default_currency")]);
    m_default_currency_isSet = !json[QString("default_currency")].isNull() && m_default_currency_isValid;

    m_default_locale_isValid = ::OpenAPI::fromJsonValue(default_locale, json[QString("default_locale")]);
    m_default_locale_isSet = !json[QString("default_locale")].isNull() && m_default_locale_isValid;

    m_catalog_id_isValid = ::OpenAPI::fromJsonValue(catalog_id, json[QString("catalog_id")]);
    m_catalog_id_isSet = !json[QString("catalog_id")].isNull() && m_catalog_id_isValid;
}

QString OAICatalogsHotelFeed::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICatalogsHotelFeed::asJsonObject() const {
    QJsonObject obj;
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(created_at));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(id));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(updated_at));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(name));
    }
    if (format.isSet()) {
        obj.insert(QString("format"), ::OpenAPI::toJsonValue(format));
    }
    if (catalog_type.isSet()) {
        obj.insert(QString("catalog_type"), ::OpenAPI::toJsonValue(catalog_type));
    }
    if (credentials.isSet()) {
        obj.insert(QString("credentials"), ::OpenAPI::toJsonValue(credentials));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(location));
    }
    if (preferred_processing_schedule.isSet()) {
        obj.insert(QString("preferred_processing_schedule"), ::OpenAPI::toJsonValue(preferred_processing_schedule));
    }
    if (status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(status));
    }
    if (default_currency.isSet()) {
        obj.insert(QString("default_currency"), ::OpenAPI::toJsonValue(default_currency));
    }
    if (m_default_locale_isSet) {
        obj.insert(QString("default_locale"), ::OpenAPI::toJsonValue(default_locale));
    }
    if (m_catalog_id_isSet) {
        obj.insert(QString("catalog_id"), ::OpenAPI::toJsonValue(catalog_id));
    }
    return obj;
}

QDateTime OAICatalogsHotelFeed::getCreatedAt() const {
    return created_at;
}
void OAICatalogsHotelFeed::setCreatedAt(const QDateTime &created_at) {
    this->created_at = created_at;
    this->m_created_at_isSet = true;
}

bool OAICatalogsHotelFeed::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAICatalogsHotelFeed::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAICatalogsHotelFeed::getId() const {
    return id;
}
void OAICatalogsHotelFeed::setId(const QString &id) {
    this->id = id;
    this->m_id_isSet = true;
}

bool OAICatalogsHotelFeed::is_id_Set() const{
    return m_id_isSet;
}

bool OAICatalogsHotelFeed::is_id_Valid() const{
    return m_id_isValid;
}

QDateTime OAICatalogsHotelFeed::getUpdatedAt() const {
    return updated_at;
}
void OAICatalogsHotelFeed::setUpdatedAt(const QDateTime &updated_at) {
    this->updated_at = updated_at;
    this->m_updated_at_isSet = true;
}

bool OAICatalogsHotelFeed::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAICatalogsHotelFeed::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

QString OAICatalogsHotelFeed::getName() const {
    return name;
}
void OAICatalogsHotelFeed::setName(const QString &name) {
    this->name = name;
    this->m_name_isSet = true;
}

bool OAICatalogsHotelFeed::is_name_Set() const{
    return m_name_isSet;
}

bool OAICatalogsHotelFeed::is_name_Valid() const{
    return m_name_isValid;
}

OAICatalogsFormat OAICatalogsHotelFeed::getFormat() const {
    return format;
}
void OAICatalogsHotelFeed::setFormat(const OAICatalogsFormat &format) {
    this->format = format;
    this->m_format_isSet = true;
}

bool OAICatalogsHotelFeed::is_format_Set() const{
    return m_format_isSet;
}

bool OAICatalogsHotelFeed::is_format_Valid() const{
    return m_format_isValid;
}

OAICatalogsType OAICatalogsHotelFeed::getCatalogType() const {
    return catalog_type;
}
void OAICatalogsHotelFeed::setCatalogType(const OAICatalogsType &catalog_type) {
    this->catalog_type = catalog_type;
    this->m_catalog_type_isSet = true;
}

bool OAICatalogsHotelFeed::is_catalog_type_Set() const{
    return m_catalog_type_isSet;
}

bool OAICatalogsHotelFeed::is_catalog_type_Valid() const{
    return m_catalog_type_isValid;
}

OAICatalogsFeedCredentials OAICatalogsHotelFeed::getCredentials() const {
    return credentials;
}
void OAICatalogsHotelFeed::setCredentials(const OAICatalogsFeedCredentials &credentials) {
    this->credentials = credentials;
    this->m_credentials_isSet = true;
}

bool OAICatalogsHotelFeed::is_credentials_Set() const{
    return m_credentials_isSet;
}

bool OAICatalogsHotelFeed::is_credentials_Valid() const{
    return m_credentials_isValid;
}

QString OAICatalogsHotelFeed::getLocation() const {
    return location;
}
void OAICatalogsHotelFeed::setLocation(const QString &location) {
    this->location = location;
    this->m_location_isSet = true;
}

bool OAICatalogsHotelFeed::is_location_Set() const{
    return m_location_isSet;
}

bool OAICatalogsHotelFeed::is_location_Valid() const{
    return m_location_isValid;
}

OAICatalogsFeedProcessingSchedule OAICatalogsHotelFeed::getPreferredProcessingSchedule() const {
    return preferred_processing_schedule;
}
void OAICatalogsHotelFeed::setPreferredProcessingSchedule(const OAICatalogsFeedProcessingSchedule &preferred_processing_schedule) {
    this->preferred_processing_schedule = preferred_processing_schedule;
    this->m_preferred_processing_schedule_isSet = true;
}

bool OAICatalogsHotelFeed::is_preferred_processing_schedule_Set() const{
    return m_preferred_processing_schedule_isSet;
}

bool OAICatalogsHotelFeed::is_preferred_processing_schedule_Valid() const{
    return m_preferred_processing_schedule_isValid;
}

OAICatalogsStatus OAICatalogsHotelFeed::getStatus() const {
    return status;
}
void OAICatalogsHotelFeed::setStatus(const OAICatalogsStatus &status) {
    this->status = status;
    this->m_status_isSet = true;
}

bool OAICatalogsHotelFeed::is_status_Set() const{
    return m_status_isSet;
}

bool OAICatalogsHotelFeed::is_status_Valid() const{
    return m_status_isValid;
}

OAINullableCurrency OAICatalogsHotelFeed::getDefaultCurrency() const {
    return default_currency;
}
void OAICatalogsHotelFeed::setDefaultCurrency(const OAINullableCurrency &default_currency) {
    this->default_currency = default_currency;
    this->m_default_currency_isSet = true;
}

bool OAICatalogsHotelFeed::is_default_currency_Set() const{
    return m_default_currency_isSet;
}

bool OAICatalogsHotelFeed::is_default_currency_Valid() const{
    return m_default_currency_isValid;
}

QString OAICatalogsHotelFeed::getDefaultLocale() const {
    return default_locale;
}
void OAICatalogsHotelFeed::setDefaultLocale(const QString &default_locale) {
    this->default_locale = default_locale;
    this->m_default_locale_isSet = true;
}

bool OAICatalogsHotelFeed::is_default_locale_Set() const{
    return m_default_locale_isSet;
}

bool OAICatalogsHotelFeed::is_default_locale_Valid() const{
    return m_default_locale_isValid;
}

QString OAICatalogsHotelFeed::getCatalogId() const {
    return catalog_id;
}
void OAICatalogsHotelFeed::setCatalogId(const QString &catalog_id) {
    this->catalog_id = catalog_id;
    this->m_catalog_id_isSet = true;
}

bool OAICatalogsHotelFeed::is_catalog_id_Set() const{
    return m_catalog_id_isSet;
}

bool OAICatalogsHotelFeed::is_catalog_id_Valid() const{
    return m_catalog_id_isValid;
}

bool OAICatalogsHotelFeed::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (format.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (catalog_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (credentials.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (preferred_processing_schedule.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (default_currency.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_locale_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_catalog_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICatalogsHotelFeed::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_created_at_isValid && m_id_isValid && m_updated_at_isValid && m_name_isValid && m_format_isValid && m_catalog_type_isValid && m_credentials_isValid && m_location_isValid && m_preferred_processing_schedule_isValid && m_status_isValid && m_default_currency_isValid && m_default_locale_isValid && m_catalog_id_isValid && true;
}

} // namespace OpenAPI
