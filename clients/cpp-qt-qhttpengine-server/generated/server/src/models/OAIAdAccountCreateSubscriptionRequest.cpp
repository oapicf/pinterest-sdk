/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAdAccountCreateSubscriptionRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAdAccountCreateSubscriptionRequest::OAIAdAccountCreateSubscriptionRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAdAccountCreateSubscriptionRequest::OAIAdAccountCreateSubscriptionRequest() {
    this->initializeModel();
}

OAIAdAccountCreateSubscriptionRequest::~OAIAdAccountCreateSubscriptionRequest() {}

void OAIAdAccountCreateSubscriptionRequest::initializeModel() {

    m_webhook_url_isSet = false;
    m_webhook_url_isValid = false;

    m_lead_form_id_isSet = false;
    m_lead_form_id_isValid = false;

    m_partner_access_token_isSet = false;
    m_partner_access_token_isValid = false;

    m_partner_refresh_token_isSet = false;
    m_partner_refresh_token_isValid = false;

    m_partner_metadata_isSet = false;
    m_partner_metadata_isValid = false;
}

void OAIAdAccountCreateSubscriptionRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAdAccountCreateSubscriptionRequest::fromJsonObject(QJsonObject json) {

    m_webhook_url_isValid = ::OpenAPI::fromJsonValue(webhook_url, json[QString("webhook_url")]);
    m_webhook_url_isSet = !json[QString("webhook_url")].isNull() && m_webhook_url_isValid;

    m_lead_form_id_isValid = ::OpenAPI::fromJsonValue(lead_form_id, json[QString("lead_form_id")]);
    m_lead_form_id_isSet = !json[QString("lead_form_id")].isNull() && m_lead_form_id_isValid;

    m_partner_access_token_isValid = ::OpenAPI::fromJsonValue(partner_access_token, json[QString("partner_access_token")]);
    m_partner_access_token_isSet = !json[QString("partner_access_token")].isNull() && m_partner_access_token_isValid;

    m_partner_refresh_token_isValid = ::OpenAPI::fromJsonValue(partner_refresh_token, json[QString("partner_refresh_token")]);
    m_partner_refresh_token_isSet = !json[QString("partner_refresh_token")].isNull() && m_partner_refresh_token_isValid;

    m_partner_metadata_isValid = ::OpenAPI::fromJsonValue(partner_metadata, json[QString("partner_metadata")]);
    m_partner_metadata_isSet = !json[QString("partner_metadata")].isNull() && m_partner_metadata_isValid;
}

QString OAIAdAccountCreateSubscriptionRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAdAccountCreateSubscriptionRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_webhook_url_isSet) {
        obj.insert(QString("webhook_url"), ::OpenAPI::toJsonValue(webhook_url));
    }
    if (m_lead_form_id_isSet) {
        obj.insert(QString("lead_form_id"), ::OpenAPI::toJsonValue(lead_form_id));
    }
    if (m_partner_access_token_isSet) {
        obj.insert(QString("partner_access_token"), ::OpenAPI::toJsonValue(partner_access_token));
    }
    if (m_partner_refresh_token_isSet) {
        obj.insert(QString("partner_refresh_token"), ::OpenAPI::toJsonValue(partner_refresh_token));
    }
    if (partner_metadata.isSet()) {
        obj.insert(QString("partner_metadata"), ::OpenAPI::toJsonValue(partner_metadata));
    }
    return obj;
}

QString OAIAdAccountCreateSubscriptionRequest::getWebhookUrl() const {
    return webhook_url;
}
void OAIAdAccountCreateSubscriptionRequest::setWebhookUrl(const QString &webhook_url) {
    this->webhook_url = webhook_url;
    this->m_webhook_url_isSet = true;
}

bool OAIAdAccountCreateSubscriptionRequest::is_webhook_url_Set() const{
    return m_webhook_url_isSet;
}

bool OAIAdAccountCreateSubscriptionRequest::is_webhook_url_Valid() const{
    return m_webhook_url_isValid;
}

QString OAIAdAccountCreateSubscriptionRequest::getLeadFormId() const {
    return lead_form_id;
}
void OAIAdAccountCreateSubscriptionRequest::setLeadFormId(const QString &lead_form_id) {
    this->lead_form_id = lead_form_id;
    this->m_lead_form_id_isSet = true;
}

bool OAIAdAccountCreateSubscriptionRequest::is_lead_form_id_Set() const{
    return m_lead_form_id_isSet;
}

bool OAIAdAccountCreateSubscriptionRequest::is_lead_form_id_Valid() const{
    return m_lead_form_id_isValid;
}

QString OAIAdAccountCreateSubscriptionRequest::getPartnerAccessToken() const {
    return partner_access_token;
}
void OAIAdAccountCreateSubscriptionRequest::setPartnerAccessToken(const QString &partner_access_token) {
    this->partner_access_token = partner_access_token;
    this->m_partner_access_token_isSet = true;
}

bool OAIAdAccountCreateSubscriptionRequest::is_partner_access_token_Set() const{
    return m_partner_access_token_isSet;
}

bool OAIAdAccountCreateSubscriptionRequest::is_partner_access_token_Valid() const{
    return m_partner_access_token_isValid;
}

QString OAIAdAccountCreateSubscriptionRequest::getPartnerRefreshToken() const {
    return partner_refresh_token;
}
void OAIAdAccountCreateSubscriptionRequest::setPartnerRefreshToken(const QString &partner_refresh_token) {
    this->partner_refresh_token = partner_refresh_token;
    this->m_partner_refresh_token_isSet = true;
}

bool OAIAdAccountCreateSubscriptionRequest::is_partner_refresh_token_Set() const{
    return m_partner_refresh_token_isSet;
}

bool OAIAdAccountCreateSubscriptionRequest::is_partner_refresh_token_Valid() const{
    return m_partner_refresh_token_isValid;
}

OAIAdAccountCreateSubscriptionRequest_partner_metadata OAIAdAccountCreateSubscriptionRequest::getPartnerMetadata() const {
    return partner_metadata;
}
void OAIAdAccountCreateSubscriptionRequest::setPartnerMetadata(const OAIAdAccountCreateSubscriptionRequest_partner_metadata &partner_metadata) {
    this->partner_metadata = partner_metadata;
    this->m_partner_metadata_isSet = true;
}

bool OAIAdAccountCreateSubscriptionRequest::is_partner_metadata_Set() const{
    return m_partner_metadata_isSet;
}

bool OAIAdAccountCreateSubscriptionRequest::is_partner_metadata_Valid() const{
    return m_partner_metadata_isValid;
}

bool OAIAdAccountCreateSubscriptionRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_webhook_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lead_form_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_partner_access_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_partner_refresh_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (partner_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAdAccountCreateSubscriptionRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_webhook_url_isValid && true;
}

} // namespace OpenAPI
