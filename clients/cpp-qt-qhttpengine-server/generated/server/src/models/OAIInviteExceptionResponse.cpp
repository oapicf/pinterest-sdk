/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInviteExceptionResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInviteExceptionResponse::OAIInviteExceptionResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInviteExceptionResponse::OAIInviteExceptionResponse() {
    this->initializeModel();
}

OAIInviteExceptionResponse::~OAIInviteExceptionResponse() {}

void OAIInviteExceptionResponse::initializeModel() {

    m_invite_or_request_id_isSet = false;
    m_invite_or_request_id_isValid = false;

    m_code_isSet = false;
    m_code_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_users_or_partner_ids_isSet = false;
    m_users_or_partner_ids_isValid = false;
}

void OAIInviteExceptionResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInviteExceptionResponse::fromJsonObject(QJsonObject json) {

    m_invite_or_request_id_isValid = ::OpenAPI::fromJsonValue(invite_or_request_id, json[QString("invite_or_request_id")]);
    m_invite_or_request_id_isSet = !json[QString("invite_or_request_id")].isNull() && m_invite_or_request_id_isValid;

    m_code_isValid = ::OpenAPI::fromJsonValue(code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_users_or_partner_ids_isValid = ::OpenAPI::fromJsonValue(users_or_partner_ids, json[QString("users_or_partner_ids")]);
    m_users_or_partner_ids_isSet = !json[QString("users_or_partner_ids")].isNull() && m_users_or_partner_ids_isValid;
}

QString OAIInviteExceptionResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInviteExceptionResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_invite_or_request_id_isSet) {
        obj.insert(QString("invite_or_request_id"), ::OpenAPI::toJsonValue(invite_or_request_id));
    }
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(code));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(message));
    }
    if (users_or_partner_ids.size() > 0) {
        obj.insert(QString("users_or_partner_ids"), ::OpenAPI::toJsonValue(users_or_partner_ids));
    }
    return obj;
}

QString OAIInviteExceptionResponse::getInviteOrRequestId() const {
    return invite_or_request_id;
}
void OAIInviteExceptionResponse::setInviteOrRequestId(const QString &invite_or_request_id) {
    this->invite_or_request_id = invite_or_request_id;
    this->m_invite_or_request_id_isSet = true;
}

bool OAIInviteExceptionResponse::is_invite_or_request_id_Set() const{
    return m_invite_or_request_id_isSet;
}

bool OAIInviteExceptionResponse::is_invite_or_request_id_Valid() const{
    return m_invite_or_request_id_isValid;
}

qint32 OAIInviteExceptionResponse::getCode() const {
    return code;
}
void OAIInviteExceptionResponse::setCode(const qint32 &code) {
    this->code = code;
    this->m_code_isSet = true;
}

bool OAIInviteExceptionResponse::is_code_Set() const{
    return m_code_isSet;
}

bool OAIInviteExceptionResponse::is_code_Valid() const{
    return m_code_isValid;
}

QString OAIInviteExceptionResponse::getMessage() const {
    return message;
}
void OAIInviteExceptionResponse::setMessage(const QString &message) {
    this->message = message;
    this->m_message_isSet = true;
}

bool OAIInviteExceptionResponse::is_message_Set() const{
    return m_message_isSet;
}

bool OAIInviteExceptionResponse::is_message_Valid() const{
    return m_message_isValid;
}

QList<QString> OAIInviteExceptionResponse::getUsersOrPartnerIds() const {
    return users_or_partner_ids;
}
void OAIInviteExceptionResponse::setUsersOrPartnerIds(const QList<QString> &users_or_partner_ids) {
    this->users_or_partner_ids = users_or_partner_ids;
    this->m_users_or_partner_ids_isSet = true;
}

bool OAIInviteExceptionResponse::is_users_or_partner_ids_Set() const{
    return m_users_or_partner_ids_isSet;
}

bool OAIInviteExceptionResponse::is_users_or_partner_ids_Valid() const{
    return m_users_or_partner_ids_isValid;
}

bool OAIInviteExceptionResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_invite_or_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (users_or_partner_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInviteExceptionResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
