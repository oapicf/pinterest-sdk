/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConversionEventResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConversionEventResponse::OAIConversionEventResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConversionEventResponse::OAIConversionEventResponse() {
    this->initializeModel();
}

OAIConversionEventResponse::~OAIConversionEventResponse() {}

void OAIConversionEventResponse::initializeModel() {

    m_conversion_event_isSet = false;
    m_conversion_event_isValid = false;

    m_conversion_tag_id_isSet = false;
    m_conversion_tag_id_isValid = false;

    m_ad_account_id_isSet = false;
    m_ad_account_id_isValid = false;

    m_created_time_isSet = false;
    m_created_time_isValid = false;
}

void OAIConversionEventResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConversionEventResponse::fromJsonObject(QJsonObject json) {

    m_conversion_event_isValid = ::OpenAPI::fromJsonValue(conversion_event, json[QString("conversion_event")]);
    m_conversion_event_isSet = !json[QString("conversion_event")].isNull() && m_conversion_event_isValid;

    m_conversion_tag_id_isValid = ::OpenAPI::fromJsonValue(conversion_tag_id, json[QString("conversion_tag_id")]);
    m_conversion_tag_id_isSet = !json[QString("conversion_tag_id")].isNull() && m_conversion_tag_id_isValid;

    m_ad_account_id_isValid = ::OpenAPI::fromJsonValue(ad_account_id, json[QString("ad_account_id")]);
    m_ad_account_id_isSet = !json[QString("ad_account_id")].isNull() && m_ad_account_id_isValid;

    m_created_time_isValid = ::OpenAPI::fromJsonValue(created_time, json[QString("created_time")]);
    m_created_time_isSet = !json[QString("created_time")].isNull() && m_created_time_isValid;
}

QString OAIConversionEventResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConversionEventResponse::asJsonObject() const {
    QJsonObject obj;
    if (conversion_event.isSet()) {
        obj.insert(QString("conversion_event"), ::OpenAPI::toJsonValue(conversion_event));
    }
    if (m_conversion_tag_id_isSet) {
        obj.insert(QString("conversion_tag_id"), ::OpenAPI::toJsonValue(conversion_tag_id));
    }
    if (m_ad_account_id_isSet) {
        obj.insert(QString("ad_account_id"), ::OpenAPI::toJsonValue(ad_account_id));
    }
    if (m_created_time_isSet) {
        obj.insert(QString("created_time"), ::OpenAPI::toJsonValue(created_time));
    }
    return obj;
}

OAIConversionTagType OAIConversionEventResponse::getConversionEvent() const {
    return conversion_event;
}
void OAIConversionEventResponse::setConversionEvent(const OAIConversionTagType &conversion_event) {
    this->conversion_event = conversion_event;
    this->m_conversion_event_isSet = true;
}

bool OAIConversionEventResponse::is_conversion_event_Set() const{
    return m_conversion_event_isSet;
}

bool OAIConversionEventResponse::is_conversion_event_Valid() const{
    return m_conversion_event_isValid;
}

QString OAIConversionEventResponse::getConversionTagId() const {
    return conversion_tag_id;
}
void OAIConversionEventResponse::setConversionTagId(const QString &conversion_tag_id) {
    this->conversion_tag_id = conversion_tag_id;
    this->m_conversion_tag_id_isSet = true;
}

bool OAIConversionEventResponse::is_conversion_tag_id_Set() const{
    return m_conversion_tag_id_isSet;
}

bool OAIConversionEventResponse::is_conversion_tag_id_Valid() const{
    return m_conversion_tag_id_isValid;
}

QString OAIConversionEventResponse::getAdAccountId() const {
    return ad_account_id;
}
void OAIConversionEventResponse::setAdAccountId(const QString &ad_account_id) {
    this->ad_account_id = ad_account_id;
    this->m_ad_account_id_isSet = true;
}

bool OAIConversionEventResponse::is_ad_account_id_Set() const{
    return m_ad_account_id_isSet;
}

bool OAIConversionEventResponse::is_ad_account_id_Valid() const{
    return m_ad_account_id_isValid;
}

qint32 OAIConversionEventResponse::getCreatedTime() const {
    return created_time;
}
void OAIConversionEventResponse::setCreatedTime(const qint32 &created_time) {
    this->created_time = created_time;
    this->m_created_time_isSet = true;
}

bool OAIConversionEventResponse::is_created_time_Set() const{
    return m_created_time_isSet;
}

bool OAIConversionEventResponse::is_created_time_Valid() const{
    return m_created_time_isValid;
}

bool OAIConversionEventResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (conversion_event.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_conversion_tag_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ad_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConversionEventResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
