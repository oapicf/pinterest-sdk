/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConversionApiResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConversionApiResponse::OAIConversionApiResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConversionApiResponse::OAIConversionApiResponse() {
    this->initializeModel();
}

OAIConversionApiResponse::~OAIConversionApiResponse() {}

void OAIConversionApiResponse::initializeModel() {

    m_num_events_received_isSet = false;
    m_num_events_received_isValid = false;

    m_num_events_processed_isSet = false;
    m_num_events_processed_isValid = false;

    m_events_isSet = false;
    m_events_isValid = false;
}

void OAIConversionApiResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConversionApiResponse::fromJsonObject(QJsonObject json) {

    m_num_events_received_isValid = ::OpenAPI::fromJsonValue(num_events_received, json[QString("num_events_received")]);
    m_num_events_received_isSet = !json[QString("num_events_received")].isNull() && m_num_events_received_isValid;

    m_num_events_processed_isValid = ::OpenAPI::fromJsonValue(num_events_processed, json[QString("num_events_processed")]);
    m_num_events_processed_isSet = !json[QString("num_events_processed")].isNull() && m_num_events_processed_isValid;

    m_events_isValid = ::OpenAPI::fromJsonValue(events, json[QString("events")]);
    m_events_isSet = !json[QString("events")].isNull() && m_events_isValid;
}

QString OAIConversionApiResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConversionApiResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_num_events_received_isSet) {
        obj.insert(QString("num_events_received"), ::OpenAPI::toJsonValue(num_events_received));
    }
    if (m_num_events_processed_isSet) {
        obj.insert(QString("num_events_processed"), ::OpenAPI::toJsonValue(num_events_processed));
    }
    if (events.size() > 0) {
        obj.insert(QString("events"), ::OpenAPI::toJsonValue(events));
    }
    return obj;
}

qint32 OAIConversionApiResponse::getNumEventsReceived() const {
    return num_events_received;
}
void OAIConversionApiResponse::setNumEventsReceived(const qint32 &num_events_received) {
    this->num_events_received = num_events_received;
    this->m_num_events_received_isSet = true;
}

bool OAIConversionApiResponse::is_num_events_received_Set() const{
    return m_num_events_received_isSet;
}

bool OAIConversionApiResponse::is_num_events_received_Valid() const{
    return m_num_events_received_isValid;
}

qint32 OAIConversionApiResponse::getNumEventsProcessed() const {
    return num_events_processed;
}
void OAIConversionApiResponse::setNumEventsProcessed(const qint32 &num_events_processed) {
    this->num_events_processed = num_events_processed;
    this->m_num_events_processed_isSet = true;
}

bool OAIConversionApiResponse::is_num_events_processed_Set() const{
    return m_num_events_processed_isSet;
}

bool OAIConversionApiResponse::is_num_events_processed_Valid() const{
    return m_num_events_processed_isValid;
}

QList<OAIConversionApiResponse_events_inner> OAIConversionApiResponse::getEvents() const {
    return events;
}
void OAIConversionApiResponse::setEvents(const QList<OAIConversionApiResponse_events_inner> &events) {
    this->events = events;
    this->m_events_isSet = true;
}

bool OAIConversionApiResponse::is_events_Set() const{
    return m_events_isSet;
}

bool OAIConversionApiResponse::is_events_Valid() const{
    return m_events_isValid;
}

bool OAIConversionApiResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_num_events_received_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_events_processed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (events.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConversionApiResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_num_events_received_isValid && m_num_events_processed_isValid && m_events_isValid && true;
}

} // namespace OpenAPI
