/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAudienceDemographics.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAudienceDemographics::OAIAudienceDemographics(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAudienceDemographics::OAIAudienceDemographics() {
    this->initializeModel();
}

OAIAudienceDemographics::~OAIAudienceDemographics() {}

void OAIAudienceDemographics::initializeModel() {

    m_ages_isSet = false;
    m_ages_isValid = false;

    m_genders_isSet = false;
    m_genders_isValid = false;

    m_devices_isSet = false;
    m_devices_isValid = false;

    m_metros_isSet = false;
    m_metros_isValid = false;

    m_countries_isSet = false;
    m_countries_isValid = false;
}

void OAIAudienceDemographics::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAudienceDemographics::fromJsonObject(QJsonObject json) {

    m_ages_isValid = ::OpenAPI::fromJsonValue(ages, json[QString("ages")]);
    m_ages_isSet = !json[QString("ages")].isNull() && m_ages_isValid;

    m_genders_isValid = ::OpenAPI::fromJsonValue(genders, json[QString("genders")]);
    m_genders_isSet = !json[QString("genders")].isNull() && m_genders_isValid;

    m_devices_isValid = ::OpenAPI::fromJsonValue(devices, json[QString("devices")]);
    m_devices_isSet = !json[QString("devices")].isNull() && m_devices_isValid;

    m_metros_isValid = ::OpenAPI::fromJsonValue(metros, json[QString("metros")]);
    m_metros_isSet = !json[QString("metros")].isNull() && m_metros_isValid;

    m_countries_isValid = ::OpenAPI::fromJsonValue(countries, json[QString("countries")]);
    m_countries_isSet = !json[QString("countries")].isNull() && m_countries_isValid;
}

QString OAIAudienceDemographics::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAudienceDemographics::asJsonObject() const {
    QJsonObject obj;
    if (ages.size() > 0) {
        obj.insert(QString("ages"), ::OpenAPI::toJsonValue(ages));
    }
    if (genders.size() > 0) {
        obj.insert(QString("genders"), ::OpenAPI::toJsonValue(genders));
    }
    if (devices.size() > 0) {
        obj.insert(QString("devices"), ::OpenAPI::toJsonValue(devices));
    }
    if (metros.size() > 0) {
        obj.insert(QString("metros"), ::OpenAPI::toJsonValue(metros));
    }
    if (countries.size() > 0) {
        obj.insert(QString("countries"), ::OpenAPI::toJsonValue(countries));
    }
    return obj;
}

QList<OAIAudienceDemographicValue> OAIAudienceDemographics::getAges() const {
    return ages;
}
void OAIAudienceDemographics::setAges(const QList<OAIAudienceDemographicValue> &ages) {
    this->ages = ages;
    this->m_ages_isSet = true;
}

bool OAIAudienceDemographics::is_ages_Set() const{
    return m_ages_isSet;
}

bool OAIAudienceDemographics::is_ages_Valid() const{
    return m_ages_isValid;
}

QList<OAIAudienceDemographicValue> OAIAudienceDemographics::getGenders() const {
    return genders;
}
void OAIAudienceDemographics::setGenders(const QList<OAIAudienceDemographicValue> &genders) {
    this->genders = genders;
    this->m_genders_isSet = true;
}

bool OAIAudienceDemographics::is_genders_Set() const{
    return m_genders_isSet;
}

bool OAIAudienceDemographics::is_genders_Valid() const{
    return m_genders_isValid;
}

QList<OAIAudienceDemographicValue> OAIAudienceDemographics::getDevices() const {
    return devices;
}
void OAIAudienceDemographics::setDevices(const QList<OAIAudienceDemographicValue> &devices) {
    this->devices = devices;
    this->m_devices_isSet = true;
}

bool OAIAudienceDemographics::is_devices_Set() const{
    return m_devices_isSet;
}

bool OAIAudienceDemographics::is_devices_Valid() const{
    return m_devices_isValid;
}

QList<OAIAudienceDemographicValue> OAIAudienceDemographics::getMetros() const {
    return metros;
}
void OAIAudienceDemographics::setMetros(const QList<OAIAudienceDemographicValue> &metros) {
    this->metros = metros;
    this->m_metros_isSet = true;
}

bool OAIAudienceDemographics::is_metros_Set() const{
    return m_metros_isSet;
}

bool OAIAudienceDemographics::is_metros_Valid() const{
    return m_metros_isValid;
}

QList<OAIAudienceDemographicValue> OAIAudienceDemographics::getCountries() const {
    return countries;
}
void OAIAudienceDemographics::setCountries(const QList<OAIAudienceDemographicValue> &countries) {
    this->countries = countries;
    this->m_countries_isSet = true;
}

bool OAIAudienceDemographics::is_countries_Set() const{
    return m_countries_isSet;
}

bool OAIAudienceDemographics::is_countries_Valid() const{
    return m_countries_isValid;
}

bool OAIAudienceDemographics::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (ages.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (genders.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (devices.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (metros.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (countries.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAudienceDemographics::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
