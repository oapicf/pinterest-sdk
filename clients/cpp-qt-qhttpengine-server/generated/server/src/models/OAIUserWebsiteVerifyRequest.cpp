/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserWebsiteVerifyRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserWebsiteVerifyRequest::OAIUserWebsiteVerifyRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserWebsiteVerifyRequest::OAIUserWebsiteVerifyRequest() {
    this->initializeModel();
}

OAIUserWebsiteVerifyRequest::~OAIUserWebsiteVerifyRequest() {}

void OAIUserWebsiteVerifyRequest::initializeModel() {

    m_website_isSet = false;
    m_website_isValid = false;

    m_verification_method_isSet = false;
    m_verification_method_isValid = false;
}

void OAIUserWebsiteVerifyRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserWebsiteVerifyRequest::fromJsonObject(QJsonObject json) {

    m_website_isValid = ::OpenAPI::fromJsonValue(website, json[QString("website")]);
    m_website_isSet = !json[QString("website")].isNull() && m_website_isValid;

    m_verification_method_isValid = ::OpenAPI::fromJsonValue(verification_method, json[QString("verification_method")]);
    m_verification_method_isSet = !json[QString("verification_method")].isNull() && m_verification_method_isValid;
}

QString OAIUserWebsiteVerifyRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserWebsiteVerifyRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_website_isSet) {
        obj.insert(QString("website"), ::OpenAPI::toJsonValue(website));
    }
    if (m_verification_method_isSet) {
        obj.insert(QString("verification_method"), ::OpenAPI::toJsonValue(verification_method));
    }
    return obj;
}

QString OAIUserWebsiteVerifyRequest::getWebsite() const {
    return website;
}
void OAIUserWebsiteVerifyRequest::setWebsite(const QString &website) {
    this->website = website;
    this->m_website_isSet = true;
}

bool OAIUserWebsiteVerifyRequest::is_website_Set() const{
    return m_website_isSet;
}

bool OAIUserWebsiteVerifyRequest::is_website_Valid() const{
    return m_website_isValid;
}

QString OAIUserWebsiteVerifyRequest::getVerificationMethod() const {
    return verification_method;
}
void OAIUserWebsiteVerifyRequest::setVerificationMethod(const QString &verification_method) {
    this->verification_method = verification_method;
    this->m_verification_method_isSet = true;
}

bool OAIUserWebsiteVerifyRequest::is_verification_method_Set() const{
    return m_verification_method_isSet;
}

bool OAIUserWebsiteVerifyRequest::is_verification_method_Valid() const{
    return m_verification_method_isValid;
}

bool OAIUserWebsiteVerifyRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_website_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_verification_method_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserWebsiteVerifyRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
