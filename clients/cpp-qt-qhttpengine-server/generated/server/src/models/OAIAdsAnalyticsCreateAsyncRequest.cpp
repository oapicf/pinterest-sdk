/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAdsAnalyticsCreateAsyncRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAdsAnalyticsCreateAsyncRequest::OAIAdsAnalyticsCreateAsyncRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAdsAnalyticsCreateAsyncRequest::OAIAdsAnalyticsCreateAsyncRequest() {
    this->initializeModel();
}

OAIAdsAnalyticsCreateAsyncRequest::~OAIAdsAnalyticsCreateAsyncRequest() {}

void OAIAdsAnalyticsCreateAsyncRequest::initializeModel() {

    m_start_date_isSet = false;
    m_start_date_isValid = false;

    m_end_date_isSet = false;
    m_end_date_isValid = false;

    m_granularity_isSet = false;
    m_granularity_isValid = false;

    m_click_window_days_isSet = false;
    m_click_window_days_isValid = false;

    m_engagement_window_days_isSet = false;
    m_engagement_window_days_isValid = false;

    m_view_window_days_isSet = false;
    m_view_window_days_isValid = false;

    m_conversion_report_time_isSet = false;
    m_conversion_report_time_isValid = false;

    m_attribution_types_isSet = false;
    m_attribution_types_isValid = false;

    m_campaign_ids_isSet = false;
    m_campaign_ids_isValid = false;

    m_campaign_statuses_isSet = false;
    m_campaign_statuses_isValid = false;

    m_campaign_objective_types_isSet = false;
    m_campaign_objective_types_isValid = false;

    m_ad_group_ids_isSet = false;
    m_ad_group_ids_isValid = false;

    m_ad_group_statuses_isSet = false;
    m_ad_group_statuses_isValid = false;

    m_ad_ids_isSet = false;
    m_ad_ids_isValid = false;

    m_ad_statuses_isSet = false;
    m_ad_statuses_isValid = false;

    m_product_group_ids_isSet = false;
    m_product_group_ids_isValid = false;

    m_product_group_statuses_isSet = false;
    m_product_group_statuses_isValid = false;

    m_product_item_ids_isSet = false;
    m_product_item_ids_isValid = false;

    m_targeting_types_isSet = false;
    m_targeting_types_isValid = false;

    m_metrics_filters_isSet = false;
    m_metrics_filters_isValid = false;

    m_columns_isSet = false;
    m_columns_isValid = false;

    m_level_isSet = false;
    m_level_isValid = false;

    m_report_format_isSet = false;
    m_report_format_isValid = false;

    m_primary_sort_isSet = false;
    m_primary_sort_isValid = false;

    m_start_hour_isSet = false;
    m_start_hour_isValid = false;

    m_end_hour_isSet = false;
    m_end_hour_isValid = false;
}

void OAIAdsAnalyticsCreateAsyncRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAdsAnalyticsCreateAsyncRequest::fromJsonObject(QJsonObject json) {

    m_start_date_isValid = ::OpenAPI::fromJsonValue(start_date, json[QString("start_date")]);
    m_start_date_isSet = !json[QString("start_date")].isNull() && m_start_date_isValid;

    m_end_date_isValid = ::OpenAPI::fromJsonValue(end_date, json[QString("end_date")]);
    m_end_date_isSet = !json[QString("end_date")].isNull() && m_end_date_isValid;

    m_granularity_isValid = ::OpenAPI::fromJsonValue(granularity, json[QString("granularity")]);
    m_granularity_isSet = !json[QString("granularity")].isNull() && m_granularity_isValid;

    m_click_window_days_isValid = ::OpenAPI::fromJsonValue(click_window_days, json[QString("click_window_days")]);
    m_click_window_days_isSet = !json[QString("click_window_days")].isNull() && m_click_window_days_isValid;

    m_engagement_window_days_isValid = ::OpenAPI::fromJsonValue(engagement_window_days, json[QString("engagement_window_days")]);
    m_engagement_window_days_isSet = !json[QString("engagement_window_days")].isNull() && m_engagement_window_days_isValid;

    m_view_window_days_isValid = ::OpenAPI::fromJsonValue(view_window_days, json[QString("view_window_days")]);
    m_view_window_days_isSet = !json[QString("view_window_days")].isNull() && m_view_window_days_isValid;

    m_conversion_report_time_isValid = ::OpenAPI::fromJsonValue(conversion_report_time, json[QString("conversion_report_time")]);
    m_conversion_report_time_isSet = !json[QString("conversion_report_time")].isNull() && m_conversion_report_time_isValid;

    m_attribution_types_isValid = ::OpenAPI::fromJsonValue(attribution_types, json[QString("attribution_types")]);
    m_attribution_types_isSet = !json[QString("attribution_types")].isNull() && m_attribution_types_isValid;

    m_campaign_ids_isValid = ::OpenAPI::fromJsonValue(campaign_ids, json[QString("campaign_ids")]);
    m_campaign_ids_isSet = !json[QString("campaign_ids")].isNull() && m_campaign_ids_isValid;

    m_campaign_statuses_isValid = ::OpenAPI::fromJsonValue(campaign_statuses, json[QString("campaign_statuses")]);
    m_campaign_statuses_isSet = !json[QString("campaign_statuses")].isNull() && m_campaign_statuses_isValid;

    m_campaign_objective_types_isValid = ::OpenAPI::fromJsonValue(campaign_objective_types, json[QString("campaign_objective_types")]);
    m_campaign_objective_types_isSet = !json[QString("campaign_objective_types")].isNull() && m_campaign_objective_types_isValid;

    m_ad_group_ids_isValid = ::OpenAPI::fromJsonValue(ad_group_ids, json[QString("ad_group_ids")]);
    m_ad_group_ids_isSet = !json[QString("ad_group_ids")].isNull() && m_ad_group_ids_isValid;

    m_ad_group_statuses_isValid = ::OpenAPI::fromJsonValue(ad_group_statuses, json[QString("ad_group_statuses")]);
    m_ad_group_statuses_isSet = !json[QString("ad_group_statuses")].isNull() && m_ad_group_statuses_isValid;

    m_ad_ids_isValid = ::OpenAPI::fromJsonValue(ad_ids, json[QString("ad_ids")]);
    m_ad_ids_isSet = !json[QString("ad_ids")].isNull() && m_ad_ids_isValid;

    m_ad_statuses_isValid = ::OpenAPI::fromJsonValue(ad_statuses, json[QString("ad_statuses")]);
    m_ad_statuses_isSet = !json[QString("ad_statuses")].isNull() && m_ad_statuses_isValid;

    m_product_group_ids_isValid = ::OpenAPI::fromJsonValue(product_group_ids, json[QString("product_group_ids")]);
    m_product_group_ids_isSet = !json[QString("product_group_ids")].isNull() && m_product_group_ids_isValid;

    m_product_group_statuses_isValid = ::OpenAPI::fromJsonValue(product_group_statuses, json[QString("product_group_statuses")]);
    m_product_group_statuses_isSet = !json[QString("product_group_statuses")].isNull() && m_product_group_statuses_isValid;

    m_product_item_ids_isValid = ::OpenAPI::fromJsonValue(product_item_ids, json[QString("product_item_ids")]);
    m_product_item_ids_isSet = !json[QString("product_item_ids")].isNull() && m_product_item_ids_isValid;

    m_targeting_types_isValid = ::OpenAPI::fromJsonValue(targeting_types, json[QString("targeting_types")]);
    m_targeting_types_isSet = !json[QString("targeting_types")].isNull() && m_targeting_types_isValid;

    m_metrics_filters_isValid = ::OpenAPI::fromJsonValue(metrics_filters, json[QString("metrics_filters")]);
    m_metrics_filters_isSet = !json[QString("metrics_filters")].isNull() && m_metrics_filters_isValid;

    m_columns_isValid = ::OpenAPI::fromJsonValue(columns, json[QString("columns")]);
    m_columns_isSet = !json[QString("columns")].isNull() && m_columns_isValid;

    m_level_isValid = ::OpenAPI::fromJsonValue(level, json[QString("level")]);
    m_level_isSet = !json[QString("level")].isNull() && m_level_isValid;

    m_report_format_isValid = ::OpenAPI::fromJsonValue(report_format, json[QString("report_format")]);
    m_report_format_isSet = !json[QString("report_format")].isNull() && m_report_format_isValid;

    m_primary_sort_isValid = ::OpenAPI::fromJsonValue(primary_sort, json[QString("primary_sort")]);
    m_primary_sort_isSet = !json[QString("primary_sort")].isNull() && m_primary_sort_isValid;

    m_start_hour_isValid = ::OpenAPI::fromJsonValue(start_hour, json[QString("start_hour")]);
    m_start_hour_isSet = !json[QString("start_hour")].isNull() && m_start_hour_isValid;

    m_end_hour_isValid = ::OpenAPI::fromJsonValue(end_hour, json[QString("end_hour")]);
    m_end_hour_isSet = !json[QString("end_hour")].isNull() && m_end_hour_isValid;
}

QString OAIAdsAnalyticsCreateAsyncRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAdsAnalyticsCreateAsyncRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_start_date_isSet) {
        obj.insert(QString("start_date"), ::OpenAPI::toJsonValue(start_date));
    }
    if (m_end_date_isSet) {
        obj.insert(QString("end_date"), ::OpenAPI::toJsonValue(end_date));
    }
    if (granularity.isSet()) {
        obj.insert(QString("granularity"), ::OpenAPI::toJsonValue(granularity));
    }
    if (click_window_days.isSet()) {
        obj.insert(QString("click_window_days"), ::OpenAPI::toJsonValue(click_window_days));
    }
    if (engagement_window_days.isSet()) {
        obj.insert(QString("engagement_window_days"), ::OpenAPI::toJsonValue(engagement_window_days));
    }
    if (view_window_days.isSet()) {
        obj.insert(QString("view_window_days"), ::OpenAPI::toJsonValue(view_window_days));
    }
    if (conversion_report_time.isSet()) {
        obj.insert(QString("conversion_report_time"), ::OpenAPI::toJsonValue(conversion_report_time));
    }
    if (attribution_types.size() > 0) {
        obj.insert(QString("attribution_types"), ::OpenAPI::toJsonValue(attribution_types));
    }
    if (campaign_ids.size() > 0) {
        obj.insert(QString("campaign_ids"), ::OpenAPI::toJsonValue(campaign_ids));
    }
    if (campaign_statuses.size() > 0) {
        obj.insert(QString("campaign_statuses"), ::OpenAPI::toJsonValue(campaign_statuses));
    }
    if (campaign_objective_types.size() > 0) {
        obj.insert(QString("campaign_objective_types"), ::OpenAPI::toJsonValue(campaign_objective_types));
    }
    if (ad_group_ids.size() > 0) {
        obj.insert(QString("ad_group_ids"), ::OpenAPI::toJsonValue(ad_group_ids));
    }
    if (ad_group_statuses.size() > 0) {
        obj.insert(QString("ad_group_statuses"), ::OpenAPI::toJsonValue(ad_group_statuses));
    }
    if (ad_ids.size() > 0) {
        obj.insert(QString("ad_ids"), ::OpenAPI::toJsonValue(ad_ids));
    }
    if (ad_statuses.size() > 0) {
        obj.insert(QString("ad_statuses"), ::OpenAPI::toJsonValue(ad_statuses));
    }
    if (product_group_ids.size() > 0) {
        obj.insert(QString("product_group_ids"), ::OpenAPI::toJsonValue(product_group_ids));
    }
    if (product_group_statuses.size() > 0) {
        obj.insert(QString("product_group_statuses"), ::OpenAPI::toJsonValue(product_group_statuses));
    }
    if (product_item_ids.size() > 0) {
        obj.insert(QString("product_item_ids"), ::OpenAPI::toJsonValue(product_item_ids));
    }
    if (targeting_types.size() > 0) {
        obj.insert(QString("targeting_types"), ::OpenAPI::toJsonValue(targeting_types));
    }
    if (metrics_filters.size() > 0) {
        obj.insert(QString("metrics_filters"), ::OpenAPI::toJsonValue(metrics_filters));
    }
    if (columns.size() > 0) {
        obj.insert(QString("columns"), ::OpenAPI::toJsonValue(columns));
    }
    if (level.isSet()) {
        obj.insert(QString("level"), ::OpenAPI::toJsonValue(level));
    }
    if (report_format.isSet()) {
        obj.insert(QString("report_format"), ::OpenAPI::toJsonValue(report_format));
    }
    if (m_primary_sort_isSet) {
        obj.insert(QString("primary_sort"), ::OpenAPI::toJsonValue(primary_sort));
    }
    if (m_start_hour_isSet) {
        obj.insert(QString("start_hour"), ::OpenAPI::toJsonValue(start_hour));
    }
    if (m_end_hour_isSet) {
        obj.insert(QString("end_hour"), ::OpenAPI::toJsonValue(end_hour));
    }
    return obj;
}

QString OAIAdsAnalyticsCreateAsyncRequest::getStartDate() const {
    return start_date;
}
void OAIAdsAnalyticsCreateAsyncRequest::setStartDate(const QString &start_date) {
    this->start_date = start_date;
    this->m_start_date_isSet = true;
}

bool OAIAdsAnalyticsCreateAsyncRequest::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAIAdsAnalyticsCreateAsyncRequest::is_start_date_Valid() const{
    return m_start_date_isValid;
}

QString OAIAdsAnalyticsCreateAsyncRequest::getEndDate() const {
    return end_date;
}
void OAIAdsAnalyticsCreateAsyncRequest::setEndDate(const QString &end_date) {
    this->end_date = end_date;
    this->m_end_date_isSet = true;
}

bool OAIAdsAnalyticsCreateAsyncRequest::is_end_date_Set() const{
    return m_end_date_isSet;
}

bool OAIAdsAnalyticsCreateAsyncRequest::is_end_date_Valid() const{
    return m_end_date_isValid;
}

OAIGranularity OAIAdsAnalyticsCreateAsyncRequest::getGranularity() const {
    return granularity;
}
void OAIAdsAnalyticsCreateAsyncRequest::setGranularity(const OAIGranularity &granularity) {
    this->granularity = granularity;
    this->m_granularity_isSet = true;
}

bool OAIAdsAnalyticsCreateAsyncRequest::is_granularity_Set() const{
    return m_granularity_isSet;
}

bool OAIAdsAnalyticsCreateAsyncRequest::is_granularity_Valid() const{
    return m_granularity_isValid;
}

OAIConversionAttributionWindowDays OAIAdsAnalyticsCreateAsyncRequest::getClickWindowDays() const {
    return click_window_days;
}
void OAIAdsAnalyticsCreateAsyncRequest::setClickWindowDays(const OAIConversionAttributionWindowDays &click_window_days) {
    this->click_window_days = click_window_days;
    this->m_click_window_days_isSet = true;
}

bool OAIAdsAnalyticsCreateAsyncRequest::is_click_window_days_Set() const{
    return m_click_window_days_isSet;
}

bool OAIAdsAnalyticsCreateAsyncRequest::is_click_window_days_Valid() const{
    return m_click_window_days_isValid;
}

OAIConversionAttributionWindowDays OAIAdsAnalyticsCreateAsyncRequest::getEngagementWindowDays() const {
    return engagement_window_days;
}
void OAIAdsAnalyticsCreateAsyncRequest::setEngagementWindowDays(const OAIConversionAttributionWindowDays &engagement_window_days) {
    this->engagement_window_days = engagement_window_days;
    this->m_engagement_window_days_isSet = true;
}

bool OAIAdsAnalyticsCreateAsyncRequest::is_engagement_window_days_Set() const{
    return m_engagement_window_days_isSet;
}

bool OAIAdsAnalyticsCreateAsyncRequest::is_engagement_window_days_Valid() const{
    return m_engagement_window_days_isValid;
}

OAIConversionAttributionWindowDays OAIAdsAnalyticsCreateAsyncRequest::getViewWindowDays() const {
    return view_window_days;
}
void OAIAdsAnalyticsCreateAsyncRequest::setViewWindowDays(const OAIConversionAttributionWindowDays &view_window_days) {
    this->view_window_days = view_window_days;
    this->m_view_window_days_isSet = true;
}

bool OAIAdsAnalyticsCreateAsyncRequest::is_view_window_days_Set() const{
    return m_view_window_days_isSet;
}

bool OAIAdsAnalyticsCreateAsyncRequest::is_view_window_days_Valid() const{
    return m_view_window_days_isValid;
}

OAIConversionReportTimeType OAIAdsAnalyticsCreateAsyncRequest::getConversionReportTime() const {
    return conversion_report_time;
}
void OAIAdsAnalyticsCreateAsyncRequest::setConversionReportTime(const OAIConversionReportTimeType &conversion_report_time) {
    this->conversion_report_time = conversion_report_time;
    this->m_conversion_report_time_isSet = true;
}

bool OAIAdsAnalyticsCreateAsyncRequest::is_conversion_report_time_Set() const{
    return m_conversion_report_time_isSet;
}

bool OAIAdsAnalyticsCreateAsyncRequest::is_conversion_report_time_Valid() const{
    return m_conversion_report_time_isValid;
}

QList<OAIConversionReportAttributionType> OAIAdsAnalyticsCreateAsyncRequest::getAttributionTypes() const {
    return attribution_types;
}
void OAIAdsAnalyticsCreateAsyncRequest::setAttributionTypes(const QList<OAIConversionReportAttributionType> &attribution_types) {
    this->attribution_types = attribution_types;
    this->m_attribution_types_isSet = true;
}

bool OAIAdsAnalyticsCreateAsyncRequest::is_attribution_types_Set() const{
    return m_attribution_types_isSet;
}

bool OAIAdsAnalyticsCreateAsyncRequest::is_attribution_types_Valid() const{
    return m_attribution_types_isValid;
}

QList<QString> OAIAdsAnalyticsCreateAsyncRequest::getCampaignIds() const {
    return campaign_ids;
}
void OAIAdsAnalyticsCreateAsyncRequest::setCampaignIds(const QList<QString> &campaign_ids) {
    this->campaign_ids = campaign_ids;
    this->m_campaign_ids_isSet = true;
}

bool OAIAdsAnalyticsCreateAsyncRequest::is_campaign_ids_Set() const{
    return m_campaign_ids_isSet;
}

bool OAIAdsAnalyticsCreateAsyncRequest::is_campaign_ids_Valid() const{
    return m_campaign_ids_isValid;
}

QList<OAICampaignSummaryStatus> OAIAdsAnalyticsCreateAsyncRequest::getCampaignStatuses() const {
    return campaign_statuses;
}
void OAIAdsAnalyticsCreateAsyncRequest::setCampaignStatuses(const QList<OAICampaignSummaryStatus> &campaign_statuses) {
    this->campaign_statuses = campaign_statuses;
    this->m_campaign_statuses_isSet = true;
}

bool OAIAdsAnalyticsCreateAsyncRequest::is_campaign_statuses_Set() const{
    return m_campaign_statuses_isSet;
}

bool OAIAdsAnalyticsCreateAsyncRequest::is_campaign_statuses_Valid() const{
    return m_campaign_statuses_isValid;
}

QList<OAIObjectiveType> OAIAdsAnalyticsCreateAsyncRequest::getCampaignObjectiveTypes() const {
    return campaign_objective_types;
}
void OAIAdsAnalyticsCreateAsyncRequest::setCampaignObjectiveTypes(const QList<OAIObjectiveType> &campaign_objective_types) {
    this->campaign_objective_types = campaign_objective_types;
    this->m_campaign_objective_types_isSet = true;
}

bool OAIAdsAnalyticsCreateAsyncRequest::is_campaign_objective_types_Set() const{
    return m_campaign_objective_types_isSet;
}

bool OAIAdsAnalyticsCreateAsyncRequest::is_campaign_objective_types_Valid() const{
    return m_campaign_objective_types_isValid;
}

QList<QString> OAIAdsAnalyticsCreateAsyncRequest::getAdGroupIds() const {
    return ad_group_ids;
}
void OAIAdsAnalyticsCreateAsyncRequest::setAdGroupIds(const QList<QString> &ad_group_ids) {
    this->ad_group_ids = ad_group_ids;
    this->m_ad_group_ids_isSet = true;
}

bool OAIAdsAnalyticsCreateAsyncRequest::is_ad_group_ids_Set() const{
    return m_ad_group_ids_isSet;
}

bool OAIAdsAnalyticsCreateAsyncRequest::is_ad_group_ids_Valid() const{
    return m_ad_group_ids_isValid;
}

QList<OAIAdGroupSummaryStatus> OAIAdsAnalyticsCreateAsyncRequest::getAdGroupStatuses() const {
    return ad_group_statuses;
}
void OAIAdsAnalyticsCreateAsyncRequest::setAdGroupStatuses(const QList<OAIAdGroupSummaryStatus> &ad_group_statuses) {
    this->ad_group_statuses = ad_group_statuses;
    this->m_ad_group_statuses_isSet = true;
}

bool OAIAdsAnalyticsCreateAsyncRequest::is_ad_group_statuses_Set() const{
    return m_ad_group_statuses_isSet;
}

bool OAIAdsAnalyticsCreateAsyncRequest::is_ad_group_statuses_Valid() const{
    return m_ad_group_statuses_isValid;
}

QList<QString> OAIAdsAnalyticsCreateAsyncRequest::getAdIds() const {
    return ad_ids;
}
void OAIAdsAnalyticsCreateAsyncRequest::setAdIds(const QList<QString> &ad_ids) {
    this->ad_ids = ad_ids;
    this->m_ad_ids_isSet = true;
}

bool OAIAdsAnalyticsCreateAsyncRequest::is_ad_ids_Set() const{
    return m_ad_ids_isSet;
}

bool OAIAdsAnalyticsCreateAsyncRequest::is_ad_ids_Valid() const{
    return m_ad_ids_isValid;
}

QList<OAIPinPromotionSummaryStatus> OAIAdsAnalyticsCreateAsyncRequest::getAdStatuses() const {
    return ad_statuses;
}
void OAIAdsAnalyticsCreateAsyncRequest::setAdStatuses(const QList<OAIPinPromotionSummaryStatus> &ad_statuses) {
    this->ad_statuses = ad_statuses;
    this->m_ad_statuses_isSet = true;
}

bool OAIAdsAnalyticsCreateAsyncRequest::is_ad_statuses_Set() const{
    return m_ad_statuses_isSet;
}

bool OAIAdsAnalyticsCreateAsyncRequest::is_ad_statuses_Valid() const{
    return m_ad_statuses_isValid;
}

QList<QString> OAIAdsAnalyticsCreateAsyncRequest::getProductGroupIds() const {
    return product_group_ids;
}
void OAIAdsAnalyticsCreateAsyncRequest::setProductGroupIds(const QList<QString> &product_group_ids) {
    this->product_group_ids = product_group_ids;
    this->m_product_group_ids_isSet = true;
}

bool OAIAdsAnalyticsCreateAsyncRequest::is_product_group_ids_Set() const{
    return m_product_group_ids_isSet;
}

bool OAIAdsAnalyticsCreateAsyncRequest::is_product_group_ids_Valid() const{
    return m_product_group_ids_isValid;
}

QList<OAIProductGroupSummaryStatus> OAIAdsAnalyticsCreateAsyncRequest::getProductGroupStatuses() const {
    return product_group_statuses;
}
void OAIAdsAnalyticsCreateAsyncRequest::setProductGroupStatuses(const QList<OAIProductGroupSummaryStatus> &product_group_statuses) {
    this->product_group_statuses = product_group_statuses;
    this->m_product_group_statuses_isSet = true;
}

bool OAIAdsAnalyticsCreateAsyncRequest::is_product_group_statuses_Set() const{
    return m_product_group_statuses_isSet;
}

bool OAIAdsAnalyticsCreateAsyncRequest::is_product_group_statuses_Valid() const{
    return m_product_group_statuses_isValid;
}

QList<QString> OAIAdsAnalyticsCreateAsyncRequest::getProductItemIds() const {
    return product_item_ids;
}
void OAIAdsAnalyticsCreateAsyncRequest::setProductItemIds(const QList<QString> &product_item_ids) {
    this->product_item_ids = product_item_ids;
    this->m_product_item_ids_isSet = true;
}

bool OAIAdsAnalyticsCreateAsyncRequest::is_product_item_ids_Set() const{
    return m_product_item_ids_isSet;
}

bool OAIAdsAnalyticsCreateAsyncRequest::is_product_item_ids_Valid() const{
    return m_product_item_ids_isValid;
}

QList<OAIAdsAnalyticsTargetingType> OAIAdsAnalyticsCreateAsyncRequest::getTargetingTypes() const {
    return targeting_types;
}
void OAIAdsAnalyticsCreateAsyncRequest::setTargetingTypes(const QList<OAIAdsAnalyticsTargetingType> &targeting_types) {
    this->targeting_types = targeting_types;
    this->m_targeting_types_isSet = true;
}

bool OAIAdsAnalyticsCreateAsyncRequest::is_targeting_types_Set() const{
    return m_targeting_types_isSet;
}

bool OAIAdsAnalyticsCreateAsyncRequest::is_targeting_types_Valid() const{
    return m_targeting_types_isValid;
}

QList<OAIAdsAnalyticsMetricsFilter> OAIAdsAnalyticsCreateAsyncRequest::getMetricsFilters() const {
    return metrics_filters;
}
void OAIAdsAnalyticsCreateAsyncRequest::setMetricsFilters(const QList<OAIAdsAnalyticsMetricsFilter> &metrics_filters) {
    this->metrics_filters = metrics_filters;
    this->m_metrics_filters_isSet = true;
}

bool OAIAdsAnalyticsCreateAsyncRequest::is_metrics_filters_Set() const{
    return m_metrics_filters_isSet;
}

bool OAIAdsAnalyticsCreateAsyncRequest::is_metrics_filters_Valid() const{
    return m_metrics_filters_isValid;
}

QList<OAIReportingColumnAsync> OAIAdsAnalyticsCreateAsyncRequest::getColumns() const {
    return columns;
}
void OAIAdsAnalyticsCreateAsyncRequest::setColumns(const QList<OAIReportingColumnAsync> &columns) {
    this->columns = columns;
    this->m_columns_isSet = true;
}

bool OAIAdsAnalyticsCreateAsyncRequest::is_columns_Set() const{
    return m_columns_isSet;
}

bool OAIAdsAnalyticsCreateAsyncRequest::is_columns_Valid() const{
    return m_columns_isValid;
}

OAIMetricsReportingLevel OAIAdsAnalyticsCreateAsyncRequest::getLevel() const {
    return level;
}
void OAIAdsAnalyticsCreateAsyncRequest::setLevel(const OAIMetricsReportingLevel &level) {
    this->level = level;
    this->m_level_isSet = true;
}

bool OAIAdsAnalyticsCreateAsyncRequest::is_level_Set() const{
    return m_level_isSet;
}

bool OAIAdsAnalyticsCreateAsyncRequest::is_level_Valid() const{
    return m_level_isValid;
}

OAIDataOutputFormat OAIAdsAnalyticsCreateAsyncRequest::getReportFormat() const {
    return report_format;
}
void OAIAdsAnalyticsCreateAsyncRequest::setReportFormat(const OAIDataOutputFormat &report_format) {
    this->report_format = report_format;
    this->m_report_format_isSet = true;
}

bool OAIAdsAnalyticsCreateAsyncRequest::is_report_format_Set() const{
    return m_report_format_isSet;
}

bool OAIAdsAnalyticsCreateAsyncRequest::is_report_format_Valid() const{
    return m_report_format_isValid;
}

QString OAIAdsAnalyticsCreateAsyncRequest::getPrimarySort() const {
    return primary_sort;
}
void OAIAdsAnalyticsCreateAsyncRequest::setPrimarySort(const QString &primary_sort) {
    this->primary_sort = primary_sort;
    this->m_primary_sort_isSet = true;
}

bool OAIAdsAnalyticsCreateAsyncRequest::is_primary_sort_Set() const{
    return m_primary_sort_isSet;
}

bool OAIAdsAnalyticsCreateAsyncRequest::is_primary_sort_Valid() const{
    return m_primary_sort_isValid;
}

qint32 OAIAdsAnalyticsCreateAsyncRequest::getStartHour() const {
    return start_hour;
}
void OAIAdsAnalyticsCreateAsyncRequest::setStartHour(const qint32 &start_hour) {
    this->start_hour = start_hour;
    this->m_start_hour_isSet = true;
}

bool OAIAdsAnalyticsCreateAsyncRequest::is_start_hour_Set() const{
    return m_start_hour_isSet;
}

bool OAIAdsAnalyticsCreateAsyncRequest::is_start_hour_Valid() const{
    return m_start_hour_isValid;
}

qint32 OAIAdsAnalyticsCreateAsyncRequest::getEndHour() const {
    return end_hour;
}
void OAIAdsAnalyticsCreateAsyncRequest::setEndHour(const qint32 &end_hour) {
    this->end_hour = end_hour;
    this->m_end_hour_isSet = true;
}

bool OAIAdsAnalyticsCreateAsyncRequest::is_end_hour_Set() const{
    return m_end_hour_isSet;
}

bool OAIAdsAnalyticsCreateAsyncRequest::is_end_hour_Valid() const{
    return m_end_hour_isValid;
}

bool OAIAdsAnalyticsCreateAsyncRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (granularity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (click_window_days.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (engagement_window_days.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (view_window_days.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (conversion_report_time.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (attribution_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (campaign_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (campaign_statuses.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (campaign_objective_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (ad_group_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (ad_group_statuses.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (ad_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (ad_statuses.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (product_group_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (product_group_statuses.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (product_item_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (targeting_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (metrics_filters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (columns.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (level.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (report_format.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_sort_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_hour_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_hour_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAdsAnalyticsCreateAsyncRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_start_date_isValid && m_end_date_isValid && m_granularity_isValid && m_columns_isValid && m_level_isValid && true;
}

} // namespace OpenAPI
