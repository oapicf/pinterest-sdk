/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICampaignCreateResponseItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICampaignCreateResponseItem::OAICampaignCreateResponseItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICampaignCreateResponseItem::OAICampaignCreateResponseItem() {
    this->initializeModel();
}

OAICampaignCreateResponseItem::~OAICampaignCreateResponseItem() {}

void OAICampaignCreateResponseItem::initializeModel() {

    m_data_isSet = false;
    m_data_isValid = false;

    m_exceptions_isSet = false;
    m_exceptions_isValid = false;
}

void OAICampaignCreateResponseItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICampaignCreateResponseItem::fromJsonObject(QJsonObject json) {

    m_data_isValid = ::OpenAPI::fromJsonValue(data, json[QString("data")]);
    m_data_isSet = !json[QString("data")].isNull() && m_data_isValid;

    m_exceptions_isValid = ::OpenAPI::fromJsonValue(exceptions, json[QString("exceptions")]);
    m_exceptions_isSet = !json[QString("exceptions")].isNull() && m_exceptions_isValid;
}

QString OAICampaignCreateResponseItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICampaignCreateResponseItem::asJsonObject() const {
    QJsonObject obj;
    if (data.isSet()) {
        obj.insert(QString("data"), ::OpenAPI::toJsonValue(data));
    }
    if (exceptions.size() > 0) {
        obj.insert(QString("exceptions"), ::OpenAPI::toJsonValue(exceptions));
    }
    return obj;
}

OAICampaignCreateResponseData OAICampaignCreateResponseItem::getData() const {
    return data;
}
void OAICampaignCreateResponseItem::setData(const OAICampaignCreateResponseData &data) {
    this->data = data;
    this->m_data_isSet = true;
}

bool OAICampaignCreateResponseItem::is_data_Set() const{
    return m_data_isSet;
}

bool OAICampaignCreateResponseItem::is_data_Valid() const{
    return m_data_isValid;
}

QList<OAIException> OAICampaignCreateResponseItem::getExceptions() const {
    return exceptions;
}
void OAICampaignCreateResponseItem::setExceptions(const QList<OAIException> &exceptions) {
    this->exceptions = exceptions;
    this->m_exceptions_isSet = true;
}

bool OAICampaignCreateResponseItem::is_exceptions_Set() const{
    return m_exceptions_isSet;
}

bool OAICampaignCreateResponseItem::is_exceptions_Valid() const{
    return m_exceptions_isValid;
}

bool OAICampaignCreateResponseItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (exceptions.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICampaignCreateResponseItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
