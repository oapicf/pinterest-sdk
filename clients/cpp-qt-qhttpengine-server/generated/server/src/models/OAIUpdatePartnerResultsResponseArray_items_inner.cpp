/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdatePartnerResultsResponseArray_items_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdatePartnerResultsResponseArray_items_inner::OAIUpdatePartnerResultsResponseArray_items_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdatePartnerResultsResponseArray_items_inner::OAIUpdatePartnerResultsResponseArray_items_inner() {
    this->initializeModel();
}

OAIUpdatePartnerResultsResponseArray_items_inner::~OAIUpdatePartnerResultsResponseArray_items_inner() {}

void OAIUpdatePartnerResultsResponseArray_items_inner::initializeModel() {

    m_exception_isSet = false;
    m_exception_isValid = false;

    m_member_or_partner_id_isSet = false;
    m_member_or_partner_id_isValid = false;
}

void OAIUpdatePartnerResultsResponseArray_items_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdatePartnerResultsResponseArray_items_inner::fromJsonObject(QJsonObject json) {

    m_exception_isValid = ::OpenAPI::fromJsonValue(exception, json[QString("exception")]);
    m_exception_isSet = !json[QString("exception")].isNull() && m_exception_isValid;

    m_member_or_partner_id_isValid = ::OpenAPI::fromJsonValue(member_or_partner_id, json[QString("member_or_partner_id")]);
    m_member_or_partner_id_isSet = !json[QString("member_or_partner_id")].isNull() && m_member_or_partner_id_isValid;
}

QString OAIUpdatePartnerResultsResponseArray_items_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdatePartnerResultsResponseArray_items_inner::asJsonObject() const {
    QJsonObject obj;
    if (exception.isSet()) {
        obj.insert(QString("exception"), ::OpenAPI::toJsonValue(exception));
    }
    if (m_member_or_partner_id_isSet) {
        obj.insert(QString("member_or_partner_id"), ::OpenAPI::toJsonValue(member_or_partner_id));
    }
    return obj;
}

OAIBusinessAccessError OAIUpdatePartnerResultsResponseArray_items_inner::getException() const {
    return exception;
}
void OAIUpdatePartnerResultsResponseArray_items_inner::setException(const OAIBusinessAccessError &exception) {
    this->exception = exception;
    this->m_exception_isSet = true;
}

bool OAIUpdatePartnerResultsResponseArray_items_inner::is_exception_Set() const{
    return m_exception_isSet;
}

bool OAIUpdatePartnerResultsResponseArray_items_inner::is_exception_Valid() const{
    return m_exception_isValid;
}

QString OAIUpdatePartnerResultsResponseArray_items_inner::getMemberOrPartnerId() const {
    return member_or_partner_id;
}
void OAIUpdatePartnerResultsResponseArray_items_inner::setMemberOrPartnerId(const QString &member_or_partner_id) {
    this->member_or_partner_id = member_or_partner_id;
    this->m_member_or_partner_id_isSet = true;
}

bool OAIUpdatePartnerResultsResponseArray_items_inner::is_member_or_partner_id_Set() const{
    return m_member_or_partner_id_isSet;
}

bool OAIUpdatePartnerResultsResponseArray_items_inner::is_member_or_partner_id_Valid() const{
    return m_member_or_partner_id_isValid;
}

bool OAIUpdatePartnerResultsResponseArray_items_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (exception.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_member_or_partner_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdatePartnerResultsResponseArray_items_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
