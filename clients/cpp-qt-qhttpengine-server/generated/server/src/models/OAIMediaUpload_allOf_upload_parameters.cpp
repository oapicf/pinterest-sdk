/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMediaUpload_allOf_upload_parameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMediaUpload_allOf_upload_parameters::OAIMediaUpload_allOf_upload_parameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMediaUpload_allOf_upload_parameters::OAIMediaUpload_allOf_upload_parameters() {
    this->initializeModel();
}

OAIMediaUpload_allOf_upload_parameters::~OAIMediaUpload_allOf_upload_parameters() {}

void OAIMediaUpload_allOf_upload_parameters::initializeModel() {

    m_x_amz_date_isSet = false;
    m_x_amz_date_isValid = false;

    m_x_amz_signature_isSet = false;
    m_x_amz_signature_isValid = false;

    m_x_amz_security_token_isSet = false;
    m_x_amz_security_token_isValid = false;

    m_x_amz_algorithm_isSet = false;
    m_x_amz_algorithm_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_policy_isSet = false;
    m_policy_isValid = false;

    m_x_amz_credential_isSet = false;
    m_x_amz_credential_isValid = false;

    m_content_type_isSet = false;
    m_content_type_isValid = false;
}

void OAIMediaUpload_allOf_upload_parameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMediaUpload_allOf_upload_parameters::fromJsonObject(QJsonObject json) {

    m_x_amz_date_isValid = ::OpenAPI::fromJsonValue(x_amz_date, json[QString("x-amz-date")]);
    m_x_amz_date_isSet = !json[QString("x-amz-date")].isNull() && m_x_amz_date_isValid;

    m_x_amz_signature_isValid = ::OpenAPI::fromJsonValue(x_amz_signature, json[QString("x-amz-signature")]);
    m_x_amz_signature_isSet = !json[QString("x-amz-signature")].isNull() && m_x_amz_signature_isValid;

    m_x_amz_security_token_isValid = ::OpenAPI::fromJsonValue(x_amz_security_token, json[QString("x-amz-security-token")]);
    m_x_amz_security_token_isSet = !json[QString("x-amz-security-token")].isNull() && m_x_amz_security_token_isValid;

    m_x_amz_algorithm_isValid = ::OpenAPI::fromJsonValue(x_amz_algorithm, json[QString("x-amz-algorithm")]);
    m_x_amz_algorithm_isSet = !json[QString("x-amz-algorithm")].isNull() && m_x_amz_algorithm_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_policy_isValid = ::OpenAPI::fromJsonValue(policy, json[QString("policy")]);
    m_policy_isSet = !json[QString("policy")].isNull() && m_policy_isValid;

    m_x_amz_credential_isValid = ::OpenAPI::fromJsonValue(x_amz_credential, json[QString("x-amz-credential")]);
    m_x_amz_credential_isSet = !json[QString("x-amz-credential")].isNull() && m_x_amz_credential_isValid;

    m_content_type_isValid = ::OpenAPI::fromJsonValue(content_type, json[QString("Content-Type")]);
    m_content_type_isSet = !json[QString("Content-Type")].isNull() && m_content_type_isValid;
}

QString OAIMediaUpload_allOf_upload_parameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMediaUpload_allOf_upload_parameters::asJsonObject() const {
    QJsonObject obj;
    if (m_x_amz_date_isSet) {
        obj.insert(QString("x-amz-date"), ::OpenAPI::toJsonValue(x_amz_date));
    }
    if (m_x_amz_signature_isSet) {
        obj.insert(QString("x-amz-signature"), ::OpenAPI::toJsonValue(x_amz_signature));
    }
    if (m_x_amz_security_token_isSet) {
        obj.insert(QString("x-amz-security-token"), ::OpenAPI::toJsonValue(x_amz_security_token));
    }
    if (m_x_amz_algorithm_isSet) {
        obj.insert(QString("x-amz-algorithm"), ::OpenAPI::toJsonValue(x_amz_algorithm));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(key));
    }
    if (m_policy_isSet) {
        obj.insert(QString("policy"), ::OpenAPI::toJsonValue(policy));
    }
    if (m_x_amz_credential_isSet) {
        obj.insert(QString("x-amz-credential"), ::OpenAPI::toJsonValue(x_amz_credential));
    }
    if (m_content_type_isSet) {
        obj.insert(QString("Content-Type"), ::OpenAPI::toJsonValue(content_type));
    }
    return obj;
}

QString OAIMediaUpload_allOf_upload_parameters::getXAmzDate() const {
    return x_amz_date;
}
void OAIMediaUpload_allOf_upload_parameters::setXAmzDate(const QString &x_amz_date) {
    this->x_amz_date = x_amz_date;
    this->m_x_amz_date_isSet = true;
}

bool OAIMediaUpload_allOf_upload_parameters::is_x_amz_date_Set() const{
    return m_x_amz_date_isSet;
}

bool OAIMediaUpload_allOf_upload_parameters::is_x_amz_date_Valid() const{
    return m_x_amz_date_isValid;
}

QString OAIMediaUpload_allOf_upload_parameters::getXAmzSignature() const {
    return x_amz_signature;
}
void OAIMediaUpload_allOf_upload_parameters::setXAmzSignature(const QString &x_amz_signature) {
    this->x_amz_signature = x_amz_signature;
    this->m_x_amz_signature_isSet = true;
}

bool OAIMediaUpload_allOf_upload_parameters::is_x_amz_signature_Set() const{
    return m_x_amz_signature_isSet;
}

bool OAIMediaUpload_allOf_upload_parameters::is_x_amz_signature_Valid() const{
    return m_x_amz_signature_isValid;
}

QString OAIMediaUpload_allOf_upload_parameters::getXAmzSecurityToken() const {
    return x_amz_security_token;
}
void OAIMediaUpload_allOf_upload_parameters::setXAmzSecurityToken(const QString &x_amz_security_token) {
    this->x_amz_security_token = x_amz_security_token;
    this->m_x_amz_security_token_isSet = true;
}

bool OAIMediaUpload_allOf_upload_parameters::is_x_amz_security_token_Set() const{
    return m_x_amz_security_token_isSet;
}

bool OAIMediaUpload_allOf_upload_parameters::is_x_amz_security_token_Valid() const{
    return m_x_amz_security_token_isValid;
}

QString OAIMediaUpload_allOf_upload_parameters::getXAmzAlgorithm() const {
    return x_amz_algorithm;
}
void OAIMediaUpload_allOf_upload_parameters::setXAmzAlgorithm(const QString &x_amz_algorithm) {
    this->x_amz_algorithm = x_amz_algorithm;
    this->m_x_amz_algorithm_isSet = true;
}

bool OAIMediaUpload_allOf_upload_parameters::is_x_amz_algorithm_Set() const{
    return m_x_amz_algorithm_isSet;
}

bool OAIMediaUpload_allOf_upload_parameters::is_x_amz_algorithm_Valid() const{
    return m_x_amz_algorithm_isValid;
}

QString OAIMediaUpload_allOf_upload_parameters::getKey() const {
    return key;
}
void OAIMediaUpload_allOf_upload_parameters::setKey(const QString &key) {
    this->key = key;
    this->m_key_isSet = true;
}

bool OAIMediaUpload_allOf_upload_parameters::is_key_Set() const{
    return m_key_isSet;
}

bool OAIMediaUpload_allOf_upload_parameters::is_key_Valid() const{
    return m_key_isValid;
}

QString OAIMediaUpload_allOf_upload_parameters::getPolicy() const {
    return policy;
}
void OAIMediaUpload_allOf_upload_parameters::setPolicy(const QString &policy) {
    this->policy = policy;
    this->m_policy_isSet = true;
}

bool OAIMediaUpload_allOf_upload_parameters::is_policy_Set() const{
    return m_policy_isSet;
}

bool OAIMediaUpload_allOf_upload_parameters::is_policy_Valid() const{
    return m_policy_isValid;
}

QString OAIMediaUpload_allOf_upload_parameters::getXAmzCredential() const {
    return x_amz_credential;
}
void OAIMediaUpload_allOf_upload_parameters::setXAmzCredential(const QString &x_amz_credential) {
    this->x_amz_credential = x_amz_credential;
    this->m_x_amz_credential_isSet = true;
}

bool OAIMediaUpload_allOf_upload_parameters::is_x_amz_credential_Set() const{
    return m_x_amz_credential_isSet;
}

bool OAIMediaUpload_allOf_upload_parameters::is_x_amz_credential_Valid() const{
    return m_x_amz_credential_isValid;
}

QString OAIMediaUpload_allOf_upload_parameters::getContentType() const {
    return content_type;
}
void OAIMediaUpload_allOf_upload_parameters::setContentType(const QString &content_type) {
    this->content_type = content_type;
    this->m_content_type_isSet = true;
}

bool OAIMediaUpload_allOf_upload_parameters::is_content_type_Set() const{
    return m_content_type_isSet;
}

bool OAIMediaUpload_allOf_upload_parameters::is_content_type_Valid() const{
    return m_content_type_isValid;
}

bool OAIMediaUpload_allOf_upload_parameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_x_amz_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_x_amz_signature_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_x_amz_security_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_x_amz_algorithm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_x_amz_credential_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMediaUpload_allOf_upload_parameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
