/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateMMMReportRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateMMMReportRequest::OAICreateMMMReportRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateMMMReportRequest::OAICreateMMMReportRequest() {
    this->initializeModel();
}

OAICreateMMMReportRequest::~OAICreateMMMReportRequest() {}

void OAICreateMMMReportRequest::initializeModel() {

    m_report_name_isSet = false;
    m_report_name_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;

    m_end_date_isSet = false;
    m_end_date_isValid = false;

    m_granularity_isSet = false;
    m_granularity_isValid = false;

    m_level_isSet = false;
    m_level_isValid = false;

    m_targeting_types_isSet = false;
    m_targeting_types_isValid = false;

    m_columns_isSet = false;
    m_columns_isValid = false;

    m_countries_isSet = false;
    m_countries_isValid = false;
}

void OAICreateMMMReportRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateMMMReportRequest::fromJsonObject(QJsonObject json) {

    m_report_name_isValid = ::OpenAPI::fromJsonValue(report_name, json[QString("report_name")]);
    m_report_name_isSet = !json[QString("report_name")].isNull() && m_report_name_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(start_date, json[QString("start_date")]);
    m_start_date_isSet = !json[QString("start_date")].isNull() && m_start_date_isValid;

    m_end_date_isValid = ::OpenAPI::fromJsonValue(end_date, json[QString("end_date")]);
    m_end_date_isSet = !json[QString("end_date")].isNull() && m_end_date_isValid;

    m_granularity_isValid = ::OpenAPI::fromJsonValue(granularity, json[QString("granularity")]);
    m_granularity_isSet = !json[QString("granularity")].isNull() && m_granularity_isValid;

    m_level_isValid = ::OpenAPI::fromJsonValue(level, json[QString("level")]);
    m_level_isSet = !json[QString("level")].isNull() && m_level_isValid;

    m_targeting_types_isValid = ::OpenAPI::fromJsonValue(targeting_types, json[QString("targeting_types")]);
    m_targeting_types_isSet = !json[QString("targeting_types")].isNull() && m_targeting_types_isValid;

    m_columns_isValid = ::OpenAPI::fromJsonValue(columns, json[QString("columns")]);
    m_columns_isSet = !json[QString("columns")].isNull() && m_columns_isValid;

    m_countries_isValid = ::OpenAPI::fromJsonValue(countries, json[QString("countries")]);
    m_countries_isSet = !json[QString("countries")].isNull() && m_countries_isValid;
}

QString OAICreateMMMReportRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateMMMReportRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_report_name_isSet) {
        obj.insert(QString("report_name"), ::OpenAPI::toJsonValue(report_name));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("start_date"), ::OpenAPI::toJsonValue(start_date));
    }
    if (m_end_date_isSet) {
        obj.insert(QString("end_date"), ::OpenAPI::toJsonValue(end_date));
    }
    if (m_granularity_isSet) {
        obj.insert(QString("granularity"), ::OpenAPI::toJsonValue(granularity));
    }
    if (m_level_isSet) {
        obj.insert(QString("level"), ::OpenAPI::toJsonValue(level));
    }
    if (targeting_types.size() > 0) {
        obj.insert(QString("targeting_types"), ::OpenAPI::toJsonValue(targeting_types));
    }
    if (columns.size() > 0) {
        obj.insert(QString("columns"), ::OpenAPI::toJsonValue(columns));
    }
    if (countries.size() > 0) {
        obj.insert(QString("countries"), ::OpenAPI::toJsonValue(countries));
    }
    return obj;
}

QString OAICreateMMMReportRequest::getReportName() const {
    return report_name;
}
void OAICreateMMMReportRequest::setReportName(const QString &report_name) {
    this->report_name = report_name;
    this->m_report_name_isSet = true;
}

bool OAICreateMMMReportRequest::is_report_name_Set() const{
    return m_report_name_isSet;
}

bool OAICreateMMMReportRequest::is_report_name_Valid() const{
    return m_report_name_isValid;
}

QString OAICreateMMMReportRequest::getStartDate() const {
    return start_date;
}
void OAICreateMMMReportRequest::setStartDate(const QString &start_date) {
    this->start_date = start_date;
    this->m_start_date_isSet = true;
}

bool OAICreateMMMReportRequest::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAICreateMMMReportRequest::is_start_date_Valid() const{
    return m_start_date_isValid;
}

QString OAICreateMMMReportRequest::getEndDate() const {
    return end_date;
}
void OAICreateMMMReportRequest::setEndDate(const QString &end_date) {
    this->end_date = end_date;
    this->m_end_date_isSet = true;
}

bool OAICreateMMMReportRequest::is_end_date_Set() const{
    return m_end_date_isSet;
}

bool OAICreateMMMReportRequest::is_end_date_Valid() const{
    return m_end_date_isValid;
}

QString OAICreateMMMReportRequest::getGranularity() const {
    return granularity;
}
void OAICreateMMMReportRequest::setGranularity(const QString &granularity) {
    this->granularity = granularity;
    this->m_granularity_isSet = true;
}

bool OAICreateMMMReportRequest::is_granularity_Set() const{
    return m_granularity_isSet;
}

bool OAICreateMMMReportRequest::is_granularity_Valid() const{
    return m_granularity_isValid;
}

QString OAICreateMMMReportRequest::getLevel() const {
    return level;
}
void OAICreateMMMReportRequest::setLevel(const QString &level) {
    this->level = level;
    this->m_level_isSet = true;
}

bool OAICreateMMMReportRequest::is_level_Set() const{
    return m_level_isSet;
}

bool OAICreateMMMReportRequest::is_level_Valid() const{
    return m_level_isValid;
}

QList<OAIMMMReportingTargetingType> OAICreateMMMReportRequest::getTargetingTypes() const {
    return targeting_types;
}
void OAICreateMMMReportRequest::setTargetingTypes(const QList<OAIMMMReportingTargetingType> &targeting_types) {
    this->targeting_types = targeting_types;
    this->m_targeting_types_isSet = true;
}

bool OAICreateMMMReportRequest::is_targeting_types_Set() const{
    return m_targeting_types_isSet;
}

bool OAICreateMMMReportRequest::is_targeting_types_Valid() const{
    return m_targeting_types_isValid;
}

QList<OAIMMMReportingColumn> OAICreateMMMReportRequest::getColumns() const {
    return columns;
}
void OAICreateMMMReportRequest::setColumns(const QList<OAIMMMReportingColumn> &columns) {
    this->columns = columns;
    this->m_columns_isSet = true;
}

bool OAICreateMMMReportRequest::is_columns_Set() const{
    return m_columns_isSet;
}

bool OAICreateMMMReportRequest::is_columns_Valid() const{
    return m_columns_isValid;
}

QList<OAITargetingAdvertiserCountry> OAICreateMMMReportRequest::getCountries() const {
    return countries;
}
void OAICreateMMMReportRequest::setCountries(const QList<OAITargetingAdvertiserCountry> &countries) {
    this->countries = countries;
    this->m_countries_isSet = true;
}

bool OAICreateMMMReportRequest::is_countries_Set() const{
    return m_countries_isSet;
}

bool OAICreateMMMReportRequest::is_countries_Valid() const{
    return m_countries_isValid;
}

bool OAICreateMMMReportRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_report_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_granularity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (targeting_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (columns.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (countries.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateMMMReportRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_report_name_isValid && m_start_date_isValid && m_end_date_isValid && m_granularity_isValid && m_level_isValid && m_targeting_types_isValid && m_columns_isValid && true;
}

} // namespace OpenAPI
