/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPinMediaSourceImagesURL_items_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPinMediaSourceImagesURL_items_inner::OAIPinMediaSourceImagesURL_items_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPinMediaSourceImagesURL_items_inner::OAIPinMediaSourceImagesURL_items_inner() {
    this->initializeModel();
}

OAIPinMediaSourceImagesURL_items_inner::~OAIPinMediaSourceImagesURL_items_inner() {}

void OAIPinMediaSourceImagesURL_items_inner::initializeModel() {

    m_title_isSet = false;
    m_title_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_link_isSet = false;
    m_link_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIPinMediaSourceImagesURL_items_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPinMediaSourceImagesURL_items_inner::fromJsonObject(QJsonObject json) {

    m_title_isValid = ::OpenAPI::fromJsonValue(title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_link_isValid = ::OpenAPI::fromJsonValue(link, json[QString("link")]);
    m_link_isSet = !json[QString("link")].isNull() && m_link_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIPinMediaSourceImagesURL_items_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPinMediaSourceImagesURL_items_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(title));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(description));
    }
    if (m_link_isSet) {
        obj.insert(QString("link"), ::OpenAPI::toJsonValue(link));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(url));
    }
    return obj;
}

QString OAIPinMediaSourceImagesURL_items_inner::getTitle() const {
    return title;
}
void OAIPinMediaSourceImagesURL_items_inner::setTitle(const QString &title) {
    this->title = title;
    this->m_title_isSet = true;
}

bool OAIPinMediaSourceImagesURL_items_inner::is_title_Set() const{
    return m_title_isSet;
}

bool OAIPinMediaSourceImagesURL_items_inner::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIPinMediaSourceImagesURL_items_inner::getDescription() const {
    return description;
}
void OAIPinMediaSourceImagesURL_items_inner::setDescription(const QString &description) {
    this->description = description;
    this->m_description_isSet = true;
}

bool OAIPinMediaSourceImagesURL_items_inner::is_description_Set() const{
    return m_description_isSet;
}

bool OAIPinMediaSourceImagesURL_items_inner::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIPinMediaSourceImagesURL_items_inner::getLink() const {
    return link;
}
void OAIPinMediaSourceImagesURL_items_inner::setLink(const QString &link) {
    this->link = link;
    this->m_link_isSet = true;
}

bool OAIPinMediaSourceImagesURL_items_inner::is_link_Set() const{
    return m_link_isSet;
}

bool OAIPinMediaSourceImagesURL_items_inner::is_link_Valid() const{
    return m_link_isValid;
}

QString OAIPinMediaSourceImagesURL_items_inner::getUrl() const {
    return url;
}
void OAIPinMediaSourceImagesURL_items_inner::setUrl(const QString &url) {
    this->url = url;
    this->m_url_isSet = true;
}

bool OAIPinMediaSourceImagesURL_items_inner::is_url_Set() const{
    return m_url_isSet;
}

bool OAIPinMediaSourceImagesURL_items_inner::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIPinMediaSourceImagesURL_items_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPinMediaSourceImagesURL_items_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_url_isValid && true;
}

} // namespace OpenAPI
