/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateAssetGroupBody_asset_groups_to_update_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateAssetGroupBody_asset_groups_to_update_inner::OAIUpdateAssetGroupBody_asset_groups_to_update_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateAssetGroupBody_asset_groups_to_update_inner::OAIUpdateAssetGroupBody_asset_groups_to_update_inner() {
    this->initializeModel();
}

OAIUpdateAssetGroupBody_asset_groups_to_update_inner::~OAIUpdateAssetGroupBody_asset_groups_to_update_inner() {}

void OAIUpdateAssetGroupBody_asset_groups_to_update_inner::initializeModel() {

    m_asset_group_id_isSet = false;
    m_asset_group_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_asset_group_types_isSet = false;
    m_asset_group_types_isValid = false;

    m_assets_to_add_isSet = false;
    m_assets_to_add_isValid = false;

    m_assets_to_remove_isSet = false;
    m_assets_to_remove_isValid = false;
}

void OAIUpdateAssetGroupBody_asset_groups_to_update_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateAssetGroupBody_asset_groups_to_update_inner::fromJsonObject(QJsonObject json) {

    m_asset_group_id_isValid = ::OpenAPI::fromJsonValue(asset_group_id, json[QString("asset_group_id")]);
    m_asset_group_id_isSet = !json[QString("asset_group_id")].isNull() && m_asset_group_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_asset_group_types_isValid = ::OpenAPI::fromJsonValue(asset_group_types, json[QString("asset_group_types")]);
    m_asset_group_types_isSet = !json[QString("asset_group_types")].isNull() && m_asset_group_types_isValid;

    m_assets_to_add_isValid = ::OpenAPI::fromJsonValue(assets_to_add, json[QString("assets_to_add")]);
    m_assets_to_add_isSet = !json[QString("assets_to_add")].isNull() && m_assets_to_add_isValid;

    m_assets_to_remove_isValid = ::OpenAPI::fromJsonValue(assets_to_remove, json[QString("assets_to_remove")]);
    m_assets_to_remove_isSet = !json[QString("assets_to_remove")].isNull() && m_assets_to_remove_isValid;
}

QString OAIUpdateAssetGroupBody_asset_groups_to_update_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateAssetGroupBody_asset_groups_to_update_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_asset_group_id_isSet) {
        obj.insert(QString("asset_group_id"), ::OpenAPI::toJsonValue(asset_group_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(name));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(description));
    }
    if (asset_group_types.size() > 0) {
        obj.insert(QString("asset_group_types"), ::OpenAPI::toJsonValue(asset_group_types));
    }
    if (assets_to_add.size() > 0) {
        obj.insert(QString("assets_to_add"), ::OpenAPI::toJsonValue(assets_to_add));
    }
    if (assets_to_remove.size() > 0) {
        obj.insert(QString("assets_to_remove"), ::OpenAPI::toJsonValue(assets_to_remove));
    }
    return obj;
}

QString OAIUpdateAssetGroupBody_asset_groups_to_update_inner::getAssetGroupId() const {
    return asset_group_id;
}
void OAIUpdateAssetGroupBody_asset_groups_to_update_inner::setAssetGroupId(const QString &asset_group_id) {
    this->asset_group_id = asset_group_id;
    this->m_asset_group_id_isSet = true;
}

bool OAIUpdateAssetGroupBody_asset_groups_to_update_inner::is_asset_group_id_Set() const{
    return m_asset_group_id_isSet;
}

bool OAIUpdateAssetGroupBody_asset_groups_to_update_inner::is_asset_group_id_Valid() const{
    return m_asset_group_id_isValid;
}

QString OAIUpdateAssetGroupBody_asset_groups_to_update_inner::getName() const {
    return name;
}
void OAIUpdateAssetGroupBody_asset_groups_to_update_inner::setName(const QString &name) {
    this->name = name;
    this->m_name_isSet = true;
}

bool OAIUpdateAssetGroupBody_asset_groups_to_update_inner::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUpdateAssetGroupBody_asset_groups_to_update_inner::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIUpdateAssetGroupBody_asset_groups_to_update_inner::getDescription() const {
    return description;
}
void OAIUpdateAssetGroupBody_asset_groups_to_update_inner::setDescription(const QString &description) {
    this->description = description;
    this->m_description_isSet = true;
}

bool OAIUpdateAssetGroupBody_asset_groups_to_update_inner::is_description_Set() const{
    return m_description_isSet;
}

bool OAIUpdateAssetGroupBody_asset_groups_to_update_inner::is_description_Valid() const{
    return m_description_isValid;
}

QList<OAIAssetGroupType> OAIUpdateAssetGroupBody_asset_groups_to_update_inner::getAssetGroupTypes() const {
    return asset_group_types;
}
void OAIUpdateAssetGroupBody_asset_groups_to_update_inner::setAssetGroupTypes(const QList<OAIAssetGroupType> &asset_group_types) {
    this->asset_group_types = asset_group_types;
    this->m_asset_group_types_isSet = true;
}

bool OAIUpdateAssetGroupBody_asset_groups_to_update_inner::is_asset_group_types_Set() const{
    return m_asset_group_types_isSet;
}

bool OAIUpdateAssetGroupBody_asset_groups_to_update_inner::is_asset_group_types_Valid() const{
    return m_asset_group_types_isValid;
}

QList<QString> OAIUpdateAssetGroupBody_asset_groups_to_update_inner::getAssetsToAdd() const {
    return assets_to_add;
}
void OAIUpdateAssetGroupBody_asset_groups_to_update_inner::setAssetsToAdd(const QList<QString> &assets_to_add) {
    this->assets_to_add = assets_to_add;
    this->m_assets_to_add_isSet = true;
}

bool OAIUpdateAssetGroupBody_asset_groups_to_update_inner::is_assets_to_add_Set() const{
    return m_assets_to_add_isSet;
}

bool OAIUpdateAssetGroupBody_asset_groups_to_update_inner::is_assets_to_add_Valid() const{
    return m_assets_to_add_isValid;
}

QList<QString> OAIUpdateAssetGroupBody_asset_groups_to_update_inner::getAssetsToRemove() const {
    return assets_to_remove;
}
void OAIUpdateAssetGroupBody_asset_groups_to_update_inner::setAssetsToRemove(const QList<QString> &assets_to_remove) {
    this->assets_to_remove = assets_to_remove;
    this->m_assets_to_remove_isSet = true;
}

bool OAIUpdateAssetGroupBody_asset_groups_to_update_inner::is_assets_to_remove_Set() const{
    return m_assets_to_remove_isSet;
}

bool OAIUpdateAssetGroupBody_asset_groups_to_update_inner::is_assets_to_remove_Valid() const{
    return m_assets_to_remove_isValid;
}

bool OAIUpdateAssetGroupBody_asset_groups_to_update_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_asset_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (asset_group_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (assets_to_add.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (assets_to_remove.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateAssetGroupBody_asset_groups_to_update_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_asset_group_id_isValid && true;
}

} // namespace OpenAPI
