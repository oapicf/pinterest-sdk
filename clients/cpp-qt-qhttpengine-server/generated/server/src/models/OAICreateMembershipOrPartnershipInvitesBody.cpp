/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateMembershipOrPartnershipInvitesBody.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateMembershipOrPartnershipInvitesBody::OAICreateMembershipOrPartnershipInvitesBody(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateMembershipOrPartnershipInvitesBody::OAICreateMembershipOrPartnershipInvitesBody() {
    this->initializeModel();
}

OAICreateMembershipOrPartnershipInvitesBody::~OAICreateMembershipOrPartnershipInvitesBody() {}

void OAICreateMembershipOrPartnershipInvitesBody::initializeModel() {

    m_business_role_isSet = false;
    m_business_role_isValid = false;

    m_invite_type_isSet = false;
    m_invite_type_isValid = false;

    m_members_isSet = false;
    m_members_isValid = false;

    m_partners_isSet = false;
    m_partners_isValid = false;
}

void OAICreateMembershipOrPartnershipInvitesBody::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateMembershipOrPartnershipInvitesBody::fromJsonObject(QJsonObject json) {

    m_business_role_isValid = ::OpenAPI::fromJsonValue(business_role, json[QString("business_role")]);
    m_business_role_isSet = !json[QString("business_role")].isNull() && m_business_role_isValid;

    m_invite_type_isValid = ::OpenAPI::fromJsonValue(invite_type, json[QString("invite_type")]);
    m_invite_type_isSet = !json[QString("invite_type")].isNull() && m_invite_type_isValid;

    m_members_isValid = ::OpenAPI::fromJsonValue(members, json[QString("members")]);
    m_members_isSet = !json[QString("members")].isNull() && m_members_isValid;

    m_partners_isValid = ::OpenAPI::fromJsonValue(partners, json[QString("partners")]);
    m_partners_isSet = !json[QString("partners")].isNull() && m_partners_isValid;
}

QString OAICreateMembershipOrPartnershipInvitesBody::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateMembershipOrPartnershipInvitesBody::asJsonObject() const {
    QJsonObject obj;
    if (m_business_role_isSet) {
        obj.insert(QString("business_role"), ::OpenAPI::toJsonValue(business_role));
    }
    if (invite_type.isSet()) {
        obj.insert(QString("invite_type"), ::OpenAPI::toJsonValue(invite_type));
    }
    if (members.size() > 0) {
        obj.insert(QString("members"), ::OpenAPI::toJsonValue(members));
    }
    if (partners.size() > 0) {
        obj.insert(QString("partners"), ::OpenAPI::toJsonValue(partners));
    }
    return obj;
}

QString OAICreateMembershipOrPartnershipInvitesBody::getBusinessRole() const {
    return business_role;
}
void OAICreateMembershipOrPartnershipInvitesBody::setBusinessRole(const QString &business_role) {
    this->business_role = business_role;
    this->m_business_role_isSet = true;
}

bool OAICreateMembershipOrPartnershipInvitesBody::is_business_role_Set() const{
    return m_business_role_isSet;
}

bool OAICreateMembershipOrPartnershipInvitesBody::is_business_role_Valid() const{
    return m_business_role_isValid;
}

OAIInviteType OAICreateMembershipOrPartnershipInvitesBody::getInviteType() const {
    return invite_type;
}
void OAICreateMembershipOrPartnershipInvitesBody::setInviteType(const OAIInviteType &invite_type) {
    this->invite_type = invite_type;
    this->m_invite_type_isSet = true;
}

bool OAICreateMembershipOrPartnershipInvitesBody::is_invite_type_Set() const{
    return m_invite_type_isSet;
}

bool OAICreateMembershipOrPartnershipInvitesBody::is_invite_type_Valid() const{
    return m_invite_type_isValid;
}

QList<QString> OAICreateMembershipOrPartnershipInvitesBody::getMembers() const {
    return members;
}
void OAICreateMembershipOrPartnershipInvitesBody::setMembers(const QList<QString> &members) {
    this->members = members;
    this->m_members_isSet = true;
}

bool OAICreateMembershipOrPartnershipInvitesBody::is_members_Set() const{
    return m_members_isSet;
}

bool OAICreateMembershipOrPartnershipInvitesBody::is_members_Valid() const{
    return m_members_isValid;
}

QList<QString> OAICreateMembershipOrPartnershipInvitesBody::getPartners() const {
    return partners;
}
void OAICreateMembershipOrPartnershipInvitesBody::setPartners(const QList<QString> &partners) {
    this->partners = partners;
    this->m_partners_isSet = true;
}

bool OAICreateMembershipOrPartnershipInvitesBody::is_partners_Set() const{
    return m_partners_isSet;
}

bool OAICreateMembershipOrPartnershipInvitesBody::is_partners_Valid() const{
    return m_partners_isValid;
}

bool OAICreateMembershipOrPartnershipInvitesBody::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_business_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (invite_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (members.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (partners.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateMembershipOrPartnershipInvitesBody::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_business_role_isValid && m_invite_type_isValid && true;
}

} // namespace OpenAPI
