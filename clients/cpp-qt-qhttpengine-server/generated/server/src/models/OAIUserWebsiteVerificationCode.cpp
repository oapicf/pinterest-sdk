/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserWebsiteVerificationCode.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserWebsiteVerificationCode::OAIUserWebsiteVerificationCode(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserWebsiteVerificationCode::OAIUserWebsiteVerificationCode() {
    this->initializeModel();
}

OAIUserWebsiteVerificationCode::~OAIUserWebsiteVerificationCode() {}

void OAIUserWebsiteVerificationCode::initializeModel() {

    m_verification_code_isSet = false;
    m_verification_code_isValid = false;

    m_dns_txt_record_isSet = false;
    m_dns_txt_record_isValid = false;

    m_metatag_isSet = false;
    m_metatag_isValid = false;

    m_filename_isSet = false;
    m_filename_isValid = false;

    m_file_content_isSet = false;
    m_file_content_isValid = false;
}

void OAIUserWebsiteVerificationCode::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserWebsiteVerificationCode::fromJsonObject(QJsonObject json) {

    m_verification_code_isValid = ::OpenAPI::fromJsonValue(verification_code, json[QString("verification_code")]);
    m_verification_code_isSet = !json[QString("verification_code")].isNull() && m_verification_code_isValid;

    m_dns_txt_record_isValid = ::OpenAPI::fromJsonValue(dns_txt_record, json[QString("dns_txt_record")]);
    m_dns_txt_record_isSet = !json[QString("dns_txt_record")].isNull() && m_dns_txt_record_isValid;

    m_metatag_isValid = ::OpenAPI::fromJsonValue(metatag, json[QString("metatag")]);
    m_metatag_isSet = !json[QString("metatag")].isNull() && m_metatag_isValid;

    m_filename_isValid = ::OpenAPI::fromJsonValue(filename, json[QString("filename")]);
    m_filename_isSet = !json[QString("filename")].isNull() && m_filename_isValid;

    m_file_content_isValid = ::OpenAPI::fromJsonValue(file_content, json[QString("file_content")]);
    m_file_content_isSet = !json[QString("file_content")].isNull() && m_file_content_isValid;
}

QString OAIUserWebsiteVerificationCode::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserWebsiteVerificationCode::asJsonObject() const {
    QJsonObject obj;
    if (m_verification_code_isSet) {
        obj.insert(QString("verification_code"), ::OpenAPI::toJsonValue(verification_code));
    }
    if (m_dns_txt_record_isSet) {
        obj.insert(QString("dns_txt_record"), ::OpenAPI::toJsonValue(dns_txt_record));
    }
    if (m_metatag_isSet) {
        obj.insert(QString("metatag"), ::OpenAPI::toJsonValue(metatag));
    }
    if (m_filename_isSet) {
        obj.insert(QString("filename"), ::OpenAPI::toJsonValue(filename));
    }
    if (m_file_content_isSet) {
        obj.insert(QString("file_content"), ::OpenAPI::toJsonValue(file_content));
    }
    return obj;
}

QString OAIUserWebsiteVerificationCode::getVerificationCode() const {
    return verification_code;
}
void OAIUserWebsiteVerificationCode::setVerificationCode(const QString &verification_code) {
    this->verification_code = verification_code;
    this->m_verification_code_isSet = true;
}

bool OAIUserWebsiteVerificationCode::is_verification_code_Set() const{
    return m_verification_code_isSet;
}

bool OAIUserWebsiteVerificationCode::is_verification_code_Valid() const{
    return m_verification_code_isValid;
}

QString OAIUserWebsiteVerificationCode::getDnsTxtRecord() const {
    return dns_txt_record;
}
void OAIUserWebsiteVerificationCode::setDnsTxtRecord(const QString &dns_txt_record) {
    this->dns_txt_record = dns_txt_record;
    this->m_dns_txt_record_isSet = true;
}

bool OAIUserWebsiteVerificationCode::is_dns_txt_record_Set() const{
    return m_dns_txt_record_isSet;
}

bool OAIUserWebsiteVerificationCode::is_dns_txt_record_Valid() const{
    return m_dns_txt_record_isValid;
}

QString OAIUserWebsiteVerificationCode::getMetatag() const {
    return metatag;
}
void OAIUserWebsiteVerificationCode::setMetatag(const QString &metatag) {
    this->metatag = metatag;
    this->m_metatag_isSet = true;
}

bool OAIUserWebsiteVerificationCode::is_metatag_Set() const{
    return m_metatag_isSet;
}

bool OAIUserWebsiteVerificationCode::is_metatag_Valid() const{
    return m_metatag_isValid;
}

QString OAIUserWebsiteVerificationCode::getFilename() const {
    return filename;
}
void OAIUserWebsiteVerificationCode::setFilename(const QString &filename) {
    this->filename = filename;
    this->m_filename_isSet = true;
}

bool OAIUserWebsiteVerificationCode::is_filename_Set() const{
    return m_filename_isSet;
}

bool OAIUserWebsiteVerificationCode::is_filename_Valid() const{
    return m_filename_isValid;
}

QString OAIUserWebsiteVerificationCode::getFileContent() const {
    return file_content;
}
void OAIUserWebsiteVerificationCode::setFileContent(const QString &file_content) {
    this->file_content = file_content;
    this->m_file_content_isSet = true;
}

bool OAIUserWebsiteVerificationCode::is_file_content_Set() const{
    return m_file_content_isSet;
}

bool OAIUserWebsiteVerificationCode::is_file_content_Valid() const{
    return m_file_content_isValid;
}

bool OAIUserWebsiteVerificationCode::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_verification_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dns_txt_record_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metatag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filename_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_content_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserWebsiteVerificationCode::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
