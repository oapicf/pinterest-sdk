/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISharedAudienceAccount.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISharedAudienceAccount::OAISharedAudienceAccount(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISharedAudienceAccount::OAISharedAudienceAccount() {
    this->initializeModel();
}

OAISharedAudienceAccount::~OAISharedAudienceAccount() {}

void OAISharedAudienceAccount::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_account_name_isSet = false;
    m_account_name_isValid = false;

    m_account_type_isSet = false;
    m_account_type_isValid = false;

    m_shared_on_timestamp_isSet = false;
    m_shared_on_timestamp_isValid = false;
}

void OAISharedAudienceAccount::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISharedAudienceAccount::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(account_id, json[QString("account_id")]);
    m_account_id_isSet = !json[QString("account_id")].isNull() && m_account_id_isValid;

    m_account_name_isValid = ::OpenAPI::fromJsonValue(account_name, json[QString("account_name")]);
    m_account_name_isSet = !json[QString("account_name")].isNull() && m_account_name_isValid;

    m_account_type_isValid = ::OpenAPI::fromJsonValue(account_type, json[QString("account_type")]);
    m_account_type_isSet = !json[QString("account_type")].isNull() && m_account_type_isValid;

    m_shared_on_timestamp_isValid = ::OpenAPI::fromJsonValue(shared_on_timestamp, json[QString("shared_on_timestamp")]);
    m_shared_on_timestamp_isSet = !json[QString("shared_on_timestamp")].isNull() && m_shared_on_timestamp_isValid;
}

QString OAISharedAudienceAccount::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISharedAudienceAccount::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("account_id"), ::OpenAPI::toJsonValue(account_id));
    }
    if (m_account_name_isSet) {
        obj.insert(QString("account_name"), ::OpenAPI::toJsonValue(account_name));
    }
    if (m_account_type_isSet) {
        obj.insert(QString("account_type"), ::OpenAPI::toJsonValue(account_type));
    }
    if (m_shared_on_timestamp_isSet) {
        obj.insert(QString("shared_on_timestamp"), ::OpenAPI::toJsonValue(shared_on_timestamp));
    }
    return obj;
}

QString OAISharedAudienceAccount::getAccountId() const {
    return account_id;
}
void OAISharedAudienceAccount::setAccountId(const QString &account_id) {
    this->account_id = account_id;
    this->m_account_id_isSet = true;
}

bool OAISharedAudienceAccount::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAISharedAudienceAccount::is_account_id_Valid() const{
    return m_account_id_isValid;
}

QString OAISharedAudienceAccount::getAccountName() const {
    return account_name;
}
void OAISharedAudienceAccount::setAccountName(const QString &account_name) {
    this->account_name = account_name;
    this->m_account_name_isSet = true;
}

bool OAISharedAudienceAccount::is_account_name_Set() const{
    return m_account_name_isSet;
}

bool OAISharedAudienceAccount::is_account_name_Valid() const{
    return m_account_name_isValid;
}

QString OAISharedAudienceAccount::getAccountType() const {
    return account_type;
}
void OAISharedAudienceAccount::setAccountType(const QString &account_type) {
    this->account_type = account_type;
    this->m_account_type_isSet = true;
}

bool OAISharedAudienceAccount::is_account_type_Set() const{
    return m_account_type_isSet;
}

bool OAISharedAudienceAccount::is_account_type_Valid() const{
    return m_account_type_isValid;
}

qint32 OAISharedAudienceAccount::getSharedOnTimestamp() const {
    return shared_on_timestamp;
}
void OAISharedAudienceAccount::setSharedOnTimestamp(const qint32 &shared_on_timestamp) {
    this->shared_on_timestamp = shared_on_timestamp;
    this->m_shared_on_timestamp_isSet = true;
}

bool OAISharedAudienceAccount::is_shared_on_timestamp_Set() const{
    return m_shared_on_timestamp_isSet;
}

bool OAISharedAudienceAccount::is_shared_on_timestamp_Valid() const{
    return m_shared_on_timestamp_isValid;
}

bool OAISharedAudienceAccount::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shared_on_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISharedAudienceAccount::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_account_id_isValid && m_account_name_isValid && m_account_type_isValid && m_shared_on_timestamp_isValid && true;
}

} // namespace OpenAPI
