/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUsersForIndividualAssetResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUsersForIndividualAssetResponse::OAIUsersForIndividualAssetResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUsersForIndividualAssetResponse::OAIUsersForIndividualAssetResponse() {
    this->initializeModel();
}

OAIUsersForIndividualAssetResponse::~OAIUsersForIndividualAssetResponse() {}

void OAIUsersForIndividualAssetResponse::initializeModel() {

    m_asset_id_isSet = false;
    m_asset_id_isValid = false;

    m_member_id_isSet = false;
    m_member_id_isValid = false;

    m_permissions_isSet = false;
    m_permissions_isValid = false;
}

void OAIUsersForIndividualAssetResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUsersForIndividualAssetResponse::fromJsonObject(QJsonObject json) {

    m_asset_id_isValid = ::OpenAPI::fromJsonValue(asset_id, json[QString("asset_id")]);
    m_asset_id_isSet = !json[QString("asset_id")].isNull() && m_asset_id_isValid;

    m_member_id_isValid = ::OpenAPI::fromJsonValue(member_id, json[QString("member_id")]);
    m_member_id_isSet = !json[QString("member_id")].isNull() && m_member_id_isValid;

    m_permissions_isValid = ::OpenAPI::fromJsonValue(permissions, json[QString("permissions")]);
    m_permissions_isSet = !json[QString("permissions")].isNull() && m_permissions_isValid;
}

QString OAIUsersForIndividualAssetResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUsersForIndividualAssetResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_asset_id_isSet) {
        obj.insert(QString("asset_id"), ::OpenAPI::toJsonValue(asset_id));
    }
    if (m_member_id_isSet) {
        obj.insert(QString("member_id"), ::OpenAPI::toJsonValue(member_id));
    }
    if (permissions.size() > 0) {
        obj.insert(QString("permissions"), ::OpenAPI::toJsonValue(permissions));
    }
    return obj;
}

QString OAIUsersForIndividualAssetResponse::getAssetId() const {
    return asset_id;
}
void OAIUsersForIndividualAssetResponse::setAssetId(const QString &asset_id) {
    this->asset_id = asset_id;
    this->m_asset_id_isSet = true;
}

bool OAIUsersForIndividualAssetResponse::is_asset_id_Set() const{
    return m_asset_id_isSet;
}

bool OAIUsersForIndividualAssetResponse::is_asset_id_Valid() const{
    return m_asset_id_isValid;
}

QString OAIUsersForIndividualAssetResponse::getMemberId() const {
    return member_id;
}
void OAIUsersForIndividualAssetResponse::setMemberId(const QString &member_id) {
    this->member_id = member_id;
    this->m_member_id_isSet = true;
}

bool OAIUsersForIndividualAssetResponse::is_member_id_Set() const{
    return m_member_id_isSet;
}

bool OAIUsersForIndividualAssetResponse::is_member_id_Valid() const{
    return m_member_id_isValid;
}

QList<QString> OAIUsersForIndividualAssetResponse::getPermissions() const {
    return permissions;
}
void OAIUsersForIndividualAssetResponse::setPermissions(const QList<QString> &permissions) {
    this->permissions = permissions;
    this->m_permissions_isSet = true;
}

bool OAIUsersForIndividualAssetResponse::is_permissions_Set() const{
    return m_permissions_isSet;
}

bool OAIUsersForIndividualAssetResponse::is_permissions_Valid() const{
    return m_permissions_isValid;
}

bool OAIUsersForIndividualAssetResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_asset_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_member_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (permissions.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUsersForIndividualAssetResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
