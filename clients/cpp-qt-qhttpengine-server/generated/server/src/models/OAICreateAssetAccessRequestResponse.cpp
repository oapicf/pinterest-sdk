/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateAssetAccessRequestResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateAssetAccessRequestResponse::OAICreateAssetAccessRequestResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateAssetAccessRequestResponse::OAICreateAssetAccessRequestResponse() {
    this->initializeModel();
}

OAICreateAssetAccessRequestResponse::~OAICreateAssetAccessRequestResponse() {}

void OAICreateAssetAccessRequestResponse::initializeModel() {

    m_exceptions_isSet = false;
    m_exceptions_isValid = false;

    m_invites_isSet = false;
    m_invites_isValid = false;
}

void OAICreateAssetAccessRequestResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateAssetAccessRequestResponse::fromJsonObject(QJsonObject json) {

    m_exceptions_isValid = ::OpenAPI::fromJsonValue(exceptions, json[QString("exceptions")]);
    m_exceptions_isSet = !json[QString("exceptions")].isNull() && m_exceptions_isValid;

    m_invites_isValid = ::OpenAPI::fromJsonValue(invites, json[QString("invites")]);
    m_invites_isSet = !json[QString("invites")].isNull() && m_invites_isValid;
}

QString OAICreateAssetAccessRequestResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateAssetAccessRequestResponse::asJsonObject() const {
    QJsonObject obj;
    if (exceptions.size() > 0) {
        obj.insert(QString("exceptions"), ::OpenAPI::toJsonValue(exceptions));
    }
    if (invites.size() > 0) {
        obj.insert(QString("invites"), ::OpenAPI::toJsonValue(invites));
    }
    return obj;
}

QList<OAICreateAssetAccessRequestErrorMessage_inner> OAICreateAssetAccessRequestResponse::getExceptions() const {
    return exceptions;
}
void OAICreateAssetAccessRequestResponse::setExceptions(const QList<OAICreateAssetAccessRequestErrorMessage_inner> &exceptions) {
    this->exceptions = exceptions;
    this->m_exceptions_isSet = true;
}

bool OAICreateAssetAccessRequestResponse::is_exceptions_Set() const{
    return m_exceptions_isSet;
}

bool OAICreateAssetAccessRequestResponse::is_exceptions_Valid() const{
    return m_exceptions_isValid;
}

QMap<QString, QString> OAICreateAssetAccessRequestResponse::getInvites() const {
    return invites;
}
void OAICreateAssetAccessRequestResponse::setInvites(const QMap<QString, QString> &invites) {
    this->invites = invites;
    this->m_invites_isSet = true;
}

bool OAICreateAssetAccessRequestResponse::is_invites_Set() const{
    return m_invites_isSet;
}

bool OAICreateAssetAccessRequestResponse::is_invites_Valid() const{
    return m_invites_isValid;
}

bool OAICreateAssetAccessRequestResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (exceptions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (invites.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateAssetAccessRequestResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
