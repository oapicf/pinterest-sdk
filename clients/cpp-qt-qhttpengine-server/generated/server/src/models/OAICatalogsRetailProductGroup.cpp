/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICatalogsRetailProductGroup.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICatalogsRetailProductGroup::OAICatalogsRetailProductGroup(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICatalogsRetailProductGroup::OAICatalogsRetailProductGroup() {
    this->initializeModel();
}

OAICatalogsRetailProductGroup::~OAICatalogsRetailProductGroup() {}

void OAICatalogsRetailProductGroup::initializeModel() {

    m_catalog_type_isSet = false;
    m_catalog_type_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_filters_isSet = false;
    m_filters_isValid = false;

    m_is_featured_isSet = false;
    m_is_featured_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_catalog_id_isSet = false;
    m_catalog_id_isValid = false;

    m_feed_id_isSet = false;
    m_feed_id_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_locale_isSet = false;
    m_locale_isValid = false;
}

void OAICatalogsRetailProductGroup::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICatalogsRetailProductGroup::fromJsonObject(QJsonObject json) {

    m_catalog_type_isValid = ::OpenAPI::fromJsonValue(catalog_type, json[QString("catalog_type")]);
    m_catalog_type_isSet = !json[QString("catalog_type")].isNull() && m_catalog_type_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_filters_isValid = ::OpenAPI::fromJsonValue(filters, json[QString("filters")]);
    m_filters_isSet = !json[QString("filters")].isNull() && m_filters_isValid;

    m_is_featured_isValid = ::OpenAPI::fromJsonValue(is_featured, json[QString("is_featured")]);
    m_is_featured_isSet = !json[QString("is_featured")].isNull() && m_is_featured_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_catalog_id_isValid = ::OpenAPI::fromJsonValue(catalog_id, json[QString("catalog_id")]);
    m_catalog_id_isSet = !json[QString("catalog_id")].isNull() && m_catalog_id_isValid;

    m_feed_id_isValid = ::OpenAPI::fromJsonValue(feed_id, json[QString("feed_id")]);
    m_feed_id_isSet = !json[QString("feed_id")].isNull() && m_feed_id_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_locale_isValid = ::OpenAPI::fromJsonValue(locale, json[QString("locale")]);
    m_locale_isSet = !json[QString("locale")].isNull() && m_locale_isValid;
}

QString OAICatalogsRetailProductGroup::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICatalogsRetailProductGroup::asJsonObject() const {
    QJsonObject obj;
    if (m_catalog_type_isSet) {
        obj.insert(QString("catalog_type"), ::OpenAPI::toJsonValue(catalog_type));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(name));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(description));
    }
    if (filters.isSet()) {
        obj.insert(QString("filters"), ::OpenAPI::toJsonValue(filters));
    }
    if (m_is_featured_isSet) {
        obj.insert(QString("is_featured"), ::OpenAPI::toJsonValue(is_featured));
    }
    if (type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(type));
    }
    if (status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(status));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(created_at));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(updated_at));
    }
    if (m_catalog_id_isSet) {
        obj.insert(QString("catalog_id"), ::OpenAPI::toJsonValue(catalog_id));
    }
    if (m_feed_id_isSet) {
        obj.insert(QString("feed_id"), ::OpenAPI::toJsonValue(feed_id));
    }
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(country));
    }
    if (m_locale_isSet) {
        obj.insert(QString("locale"), ::OpenAPI::toJsonValue(locale));
    }
    return obj;
}

QString OAICatalogsRetailProductGroup::getCatalogType() const {
    return catalog_type;
}
void OAICatalogsRetailProductGroup::setCatalogType(const QString &catalog_type) {
    this->catalog_type = catalog_type;
    this->m_catalog_type_isSet = true;
}

bool OAICatalogsRetailProductGroup::is_catalog_type_Set() const{
    return m_catalog_type_isSet;
}

bool OAICatalogsRetailProductGroup::is_catalog_type_Valid() const{
    return m_catalog_type_isValid;
}

QString OAICatalogsRetailProductGroup::getId() const {
    return id;
}
void OAICatalogsRetailProductGroup::setId(const QString &id) {
    this->id = id;
    this->m_id_isSet = true;
}

bool OAICatalogsRetailProductGroup::is_id_Set() const{
    return m_id_isSet;
}

bool OAICatalogsRetailProductGroup::is_id_Valid() const{
    return m_id_isValid;
}

QString OAICatalogsRetailProductGroup::getName() const {
    return name;
}
void OAICatalogsRetailProductGroup::setName(const QString &name) {
    this->name = name;
    this->m_name_isSet = true;
}

bool OAICatalogsRetailProductGroup::is_name_Set() const{
    return m_name_isSet;
}

bool OAICatalogsRetailProductGroup::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICatalogsRetailProductGroup::getDescription() const {
    return description;
}
void OAICatalogsRetailProductGroup::setDescription(const QString &description) {
    this->description = description;
    this->m_description_isSet = true;
}

bool OAICatalogsRetailProductGroup::is_description_Set() const{
    return m_description_isSet;
}

bool OAICatalogsRetailProductGroup::is_description_Valid() const{
    return m_description_isValid;
}

OAICatalogsProductGroupFilters OAICatalogsRetailProductGroup::getFilters() const {
    return filters;
}
void OAICatalogsRetailProductGroup::setFilters(const OAICatalogsProductGroupFilters &filters) {
    this->filters = filters;
    this->m_filters_isSet = true;
}

bool OAICatalogsRetailProductGroup::is_filters_Set() const{
    return m_filters_isSet;
}

bool OAICatalogsRetailProductGroup::is_filters_Valid() const{
    return m_filters_isValid;
}

bool OAICatalogsRetailProductGroup::isIsFeatured() const {
    return is_featured;
}
void OAICatalogsRetailProductGroup::setIsFeatured(const bool &is_featured) {
    this->is_featured = is_featured;
    this->m_is_featured_isSet = true;
}

bool OAICatalogsRetailProductGroup::is_is_featured_Set() const{
    return m_is_featured_isSet;
}

bool OAICatalogsRetailProductGroup::is_is_featured_Valid() const{
    return m_is_featured_isValid;
}

OAICatalogsProductGroupType OAICatalogsRetailProductGroup::getType() const {
    return type;
}
void OAICatalogsRetailProductGroup::setType(const OAICatalogsProductGroupType &type) {
    this->type = type;
    this->m_type_isSet = true;
}

bool OAICatalogsRetailProductGroup::is_type_Set() const{
    return m_type_isSet;
}

bool OAICatalogsRetailProductGroup::is_type_Valid() const{
    return m_type_isValid;
}

OAICatalogsProductGroupStatus OAICatalogsRetailProductGroup::getStatus() const {
    return status;
}
void OAICatalogsRetailProductGroup::setStatus(const OAICatalogsProductGroupStatus &status) {
    this->status = status;
    this->m_status_isSet = true;
}

bool OAICatalogsRetailProductGroup::is_status_Set() const{
    return m_status_isSet;
}

bool OAICatalogsRetailProductGroup::is_status_Valid() const{
    return m_status_isValid;
}

qint32 OAICatalogsRetailProductGroup::getCreatedAt() const {
    return created_at;
}
void OAICatalogsRetailProductGroup::setCreatedAt(const qint32 &created_at) {
    this->created_at = created_at;
    this->m_created_at_isSet = true;
}

bool OAICatalogsRetailProductGroup::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAICatalogsRetailProductGroup::is_created_at_Valid() const{
    return m_created_at_isValid;
}

qint32 OAICatalogsRetailProductGroup::getUpdatedAt() const {
    return updated_at;
}
void OAICatalogsRetailProductGroup::setUpdatedAt(const qint32 &updated_at) {
    this->updated_at = updated_at;
    this->m_updated_at_isSet = true;
}

bool OAICatalogsRetailProductGroup::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAICatalogsRetailProductGroup::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

QString OAICatalogsRetailProductGroup::getCatalogId() const {
    return catalog_id;
}
void OAICatalogsRetailProductGroup::setCatalogId(const QString &catalog_id) {
    this->catalog_id = catalog_id;
    this->m_catalog_id_isSet = true;
}

bool OAICatalogsRetailProductGroup::is_catalog_id_Set() const{
    return m_catalog_id_isSet;
}

bool OAICatalogsRetailProductGroup::is_catalog_id_Valid() const{
    return m_catalog_id_isValid;
}

QString OAICatalogsRetailProductGroup::getFeedId() const {
    return feed_id;
}
void OAICatalogsRetailProductGroup::setFeedId(const QString &feed_id) {
    this->feed_id = feed_id;
    this->m_feed_id_isSet = true;
}

bool OAICatalogsRetailProductGroup::is_feed_id_Set() const{
    return m_feed_id_isSet;
}

bool OAICatalogsRetailProductGroup::is_feed_id_Valid() const{
    return m_feed_id_isValid;
}

QString OAICatalogsRetailProductGroup::getCountry() const {
    return country;
}
void OAICatalogsRetailProductGroup::setCountry(const QString &country) {
    this->country = country;
    this->m_country_isSet = true;
}

bool OAICatalogsRetailProductGroup::is_country_Set() const{
    return m_country_isSet;
}

bool OAICatalogsRetailProductGroup::is_country_Valid() const{
    return m_country_isValid;
}

QString OAICatalogsRetailProductGroup::getLocale() const {
    return locale;
}
void OAICatalogsRetailProductGroup::setLocale(const QString &locale) {
    this->locale = locale;
    this->m_locale_isSet = true;
}

bool OAICatalogsRetailProductGroup::is_locale_Set() const{
    return m_locale_isSet;
}

bool OAICatalogsRetailProductGroup::is_locale_Valid() const{
    return m_locale_isValid;
}

bool OAICatalogsRetailProductGroup::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_catalog_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (filters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_featured_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_catalog_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_feed_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locale_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICatalogsRetailProductGroup::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_catalog_type_isValid && m_id_isValid && m_filters_isValid && m_catalog_id_isValid && m_feed_id_isValid && true;
}

} // namespace OpenAPI
