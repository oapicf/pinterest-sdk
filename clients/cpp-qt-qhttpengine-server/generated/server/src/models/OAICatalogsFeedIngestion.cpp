/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICatalogsFeedIngestion.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICatalogsFeedIngestion::OAICatalogsFeedIngestion(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICatalogsFeedIngestion::OAICatalogsFeedIngestion() {
    this->initializeModel();
}

OAICatalogsFeedIngestion::~OAICatalogsFeedIngestion() {}

void OAICatalogsFeedIngestion::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_feed_id_isSet = false;
    m_feed_id_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAICatalogsFeedIngestion::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICatalogsFeedIngestion::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_feed_id_isValid = ::OpenAPI::fromJsonValue(feed_id, json[QString("feed_id")]);
    m_feed_id_isSet = !json[QString("feed_id")].isNull() && m_feed_id_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAICatalogsFeedIngestion::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICatalogsFeedIngestion::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(id));
    }
    if (m_feed_id_isSet) {
        obj.insert(QString("feed_id"), ::OpenAPI::toJsonValue(feed_id));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(created_at));
    }
    if (status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(status));
    }
    return obj;
}

QString OAICatalogsFeedIngestion::getId() const {
    return id;
}
void OAICatalogsFeedIngestion::setId(const QString &id) {
    this->id = id;
    this->m_id_isSet = true;
}

bool OAICatalogsFeedIngestion::is_id_Set() const{
    return m_id_isSet;
}

bool OAICatalogsFeedIngestion::is_id_Valid() const{
    return m_id_isValid;
}

QString OAICatalogsFeedIngestion::getFeedId() const {
    return feed_id;
}
void OAICatalogsFeedIngestion::setFeedId(const QString &feed_id) {
    this->feed_id = feed_id;
    this->m_feed_id_isSet = true;
}

bool OAICatalogsFeedIngestion::is_feed_id_Set() const{
    return m_feed_id_isSet;
}

bool OAICatalogsFeedIngestion::is_feed_id_Valid() const{
    return m_feed_id_isValid;
}

QDateTime OAICatalogsFeedIngestion::getCreatedAt() const {
    return created_at;
}
void OAICatalogsFeedIngestion::setCreatedAt(const QDateTime &created_at) {
    this->created_at = created_at;
    this->m_created_at_isSet = true;
}

bool OAICatalogsFeedIngestion::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAICatalogsFeedIngestion::is_created_at_Valid() const{
    return m_created_at_isValid;
}

OAICatalogsFeedProcessingStatus OAICatalogsFeedIngestion::getStatus() const {
    return status;
}
void OAICatalogsFeedIngestion::setStatus(const OAICatalogsFeedProcessingStatus &status) {
    this->status = status;
    this->m_status_isSet = true;
}

bool OAICatalogsFeedIngestion::is_status_Set() const{
    return m_status_isSet;
}

bool OAICatalogsFeedIngestion::is_status_Valid() const{
    return m_status_isValid;
}

bool OAICatalogsFeedIngestion::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_feed_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICatalogsFeedIngestion::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_feed_id_isValid && m_created_at_isValid && m_status_isValid && true;
}

} // namespace OpenAPI
