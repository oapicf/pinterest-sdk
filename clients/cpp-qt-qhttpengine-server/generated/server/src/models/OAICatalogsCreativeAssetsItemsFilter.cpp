/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICatalogsCreativeAssetsItemsFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICatalogsCreativeAssetsItemsFilter::OAICatalogsCreativeAssetsItemsFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICatalogsCreativeAssetsItemsFilter::OAICatalogsCreativeAssetsItemsFilter() {
    this->initializeModel();
}

OAICatalogsCreativeAssetsItemsFilter::~OAICatalogsCreativeAssetsItemsFilter() {}

void OAICatalogsCreativeAssetsItemsFilter::initializeModel() {

    m_catalog_type_isSet = false;
    m_catalog_type_isValid = false;

    m_creative_assets_ids_isSet = false;
    m_creative_assets_ids_isValid = false;

    m_catalog_id_isSet = false;
    m_catalog_id_isValid = false;
}

void OAICatalogsCreativeAssetsItemsFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICatalogsCreativeAssetsItemsFilter::fromJsonObject(QJsonObject json) {

    m_catalog_type_isValid = ::OpenAPI::fromJsonValue(catalog_type, json[QString("catalog_type")]);
    m_catalog_type_isSet = !json[QString("catalog_type")].isNull() && m_catalog_type_isValid;

    m_creative_assets_ids_isValid = ::OpenAPI::fromJsonValue(creative_assets_ids, json[QString("creative_assets_ids")]);
    m_creative_assets_ids_isSet = !json[QString("creative_assets_ids")].isNull() && m_creative_assets_ids_isValid;

    m_catalog_id_isValid = ::OpenAPI::fromJsonValue(catalog_id, json[QString("catalog_id")]);
    m_catalog_id_isSet = !json[QString("catalog_id")].isNull() && m_catalog_id_isValid;
}

QString OAICatalogsCreativeAssetsItemsFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICatalogsCreativeAssetsItemsFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_catalog_type_isSet) {
        obj.insert(QString("catalog_type"), ::OpenAPI::toJsonValue(catalog_type));
    }
    if (creative_assets_ids.size() > 0) {
        obj.insert(QString("creative_assets_ids"), ::OpenAPI::toJsonValue(creative_assets_ids));
    }
    if (m_catalog_id_isSet) {
        obj.insert(QString("catalog_id"), ::OpenAPI::toJsonValue(catalog_id));
    }
    return obj;
}

QString OAICatalogsCreativeAssetsItemsFilter::getCatalogType() const {
    return catalog_type;
}
void OAICatalogsCreativeAssetsItemsFilter::setCatalogType(const QString &catalog_type) {
    this->catalog_type = catalog_type;
    this->m_catalog_type_isSet = true;
}

bool OAICatalogsCreativeAssetsItemsFilter::is_catalog_type_Set() const{
    return m_catalog_type_isSet;
}

bool OAICatalogsCreativeAssetsItemsFilter::is_catalog_type_Valid() const{
    return m_catalog_type_isValid;
}

QList<QString> OAICatalogsCreativeAssetsItemsFilter::getCreativeAssetsIds() const {
    return creative_assets_ids;
}
void OAICatalogsCreativeAssetsItemsFilter::setCreativeAssetsIds(const QList<QString> &creative_assets_ids) {
    this->creative_assets_ids = creative_assets_ids;
    this->m_creative_assets_ids_isSet = true;
}

bool OAICatalogsCreativeAssetsItemsFilter::is_creative_assets_ids_Set() const{
    return m_creative_assets_ids_isSet;
}

bool OAICatalogsCreativeAssetsItemsFilter::is_creative_assets_ids_Valid() const{
    return m_creative_assets_ids_isValid;
}

QString OAICatalogsCreativeAssetsItemsFilter::getCatalogId() const {
    return catalog_id;
}
void OAICatalogsCreativeAssetsItemsFilter::setCatalogId(const QString &catalog_id) {
    this->catalog_id = catalog_id;
    this->m_catalog_id_isSet = true;
}

bool OAICatalogsCreativeAssetsItemsFilter::is_catalog_id_Set() const{
    return m_catalog_id_isSet;
}

bool OAICatalogsCreativeAssetsItemsFilter::is_catalog_id_Valid() const{
    return m_catalog_id_isValid;
}

bool OAICatalogsCreativeAssetsItemsFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_catalog_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (creative_assets_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_catalog_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICatalogsCreativeAssetsItemsFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_catalog_type_isValid && m_creative_assets_ids_isValid && true;
}

} // namespace OpenAPI
