/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAudienceDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAudienceDefinition::OAIAudienceDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAudienceDefinition::OAIAudienceDefinition() {
    this->initializeModel();
}

OAIAudienceDefinition::~OAIAudienceDefinition() {}

void OAIAudienceDefinition::initializeModel() {

    m_date_isSet = false;
    m_date_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_scope_isSet = false;
    m_scope_isValid = false;
}

void OAIAudienceDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAudienceDefinition::fromJsonObject(QJsonObject json) {

    m_date_isValid = ::OpenAPI::fromJsonValue(date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_scope_isValid = ::OpenAPI::fromJsonValue(scope, json[QString("scope")]);
    m_scope_isSet = !json[QString("scope")].isNull() && m_scope_isValid;
}

QString OAIAudienceDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAudienceDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(date));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(type));
    }
    if (m_scope_isSet) {
        obj.insert(QString("scope"), ::OpenAPI::toJsonValue(scope));
    }
    return obj;
}

QString OAIAudienceDefinition::getDate() const {
    return date;
}
void OAIAudienceDefinition::setDate(const QString &date) {
    this->date = date;
    this->m_date_isSet = true;
}

bool OAIAudienceDefinition::is_date_Set() const{
    return m_date_isSet;
}

bool OAIAudienceDefinition::is_date_Valid() const{
    return m_date_isValid;
}

QString OAIAudienceDefinition::getType() const {
    return type;
}
void OAIAudienceDefinition::setType(const QString &type) {
    this->type = type;
    this->m_type_isSet = true;
}

bool OAIAudienceDefinition::is_type_Set() const{
    return m_type_isSet;
}

bool OAIAudienceDefinition::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIAudienceDefinition::getScope() const {
    return scope;
}
void OAIAudienceDefinition::setScope(const QString &scope) {
    this->scope = scope;
    this->m_scope_isSet = true;
}

bool OAIAudienceDefinition::is_scope_Set() const{
    return m_scope_isSet;
}

bool OAIAudienceDefinition::is_scope_Valid() const{
    return m_scope_isValid;
}

bool OAIAudienceDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scope_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAudienceDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
