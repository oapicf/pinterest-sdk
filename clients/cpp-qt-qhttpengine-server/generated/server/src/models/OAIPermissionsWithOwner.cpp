/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPermissionsWithOwner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPermissionsWithOwner::OAIPermissionsWithOwner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPermissionsWithOwner::OAIPermissionsWithOwner() {
    this->initializeModel();
}

OAIPermissionsWithOwner::~OAIPermissionsWithOwner() {}

void OAIPermissionsWithOwner::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIPermissionsWithOwner::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIPermissionsWithOwner::fromJson(QString jsonString) {
    
    if ( jsonString.compare("ADMIN", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPermissionsWithOwner::ADMIN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ANALYST", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPermissionsWithOwner::ANALYST;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FINANCE_MANAGER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPermissionsWithOwner::FINANCE_MANAGER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AUDIENCE_MANAGER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPermissionsWithOwner::AUDIENCE_MANAGER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CAMPAIGN_MANAGER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPermissionsWithOwner::CAMPAIGN_MANAGER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CATALOGS_MANAGER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPermissionsWithOwner::CATALOGS_MANAGER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CATALOGS_VIEWER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPermissionsWithOwner::CATALOGS_VIEWER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PROFILE_PUBLISHER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPermissionsWithOwner::PROFILE_PUBLISHER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("OWNER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPermissionsWithOwner::OWNER;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIPermissionsWithOwner::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIPermissionsWithOwner::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIPermissionsWithOwner::ADMIN:
            val = "ADMIN";
            break;
        case eOAIPermissionsWithOwner::ANALYST:
            val = "ANALYST";
            break;
        case eOAIPermissionsWithOwner::FINANCE_MANAGER:
            val = "FINANCE_MANAGER";
            break;
        case eOAIPermissionsWithOwner::AUDIENCE_MANAGER:
            val = "AUDIENCE_MANAGER";
            break;
        case eOAIPermissionsWithOwner::CAMPAIGN_MANAGER:
            val = "CAMPAIGN_MANAGER";
            break;
        case eOAIPermissionsWithOwner::CATALOGS_MANAGER:
            val = "CATALOGS_MANAGER";
            break;
        case eOAIPermissionsWithOwner::CATALOGS_VIEWER:
            val = "CATALOGS_VIEWER";
            break;
        case eOAIPermissionsWithOwner::PROFILE_PUBLISHER:
            val = "PROFILE_PUBLISHER";
            break;
        case eOAIPermissionsWithOwner::OWNER:
            val = "OWNER";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIPermissionsWithOwner::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIPermissionsWithOwner::eOAIPermissionsWithOwner OAIPermissionsWithOwner::getValue() const {
    return m_value;
}

void OAIPermissionsWithOwner::setValue(const OAIPermissionsWithOwner::eOAIPermissionsWithOwner& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIPermissionsWithOwner::isSet() const {
    
    return m_value_isSet;
}

bool OAIPermissionsWithOwner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
