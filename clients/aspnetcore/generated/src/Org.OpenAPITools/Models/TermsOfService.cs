/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class TermsOfService : IEquatable<TermsOfService>
    {
        /// <summary>
        /// The ID of the terms of service
        /// </summary>
        /// <value>The ID of the terms of service</value>
        /* <example>2650449554526</example> */
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// The terms of service content
        /// </summary>
        /// <value>The terms of service content</value>
        /* <example>example test</example> */
        [DataMember(Name="html", EmitDefaultValue=true)]
        public string Html { get; set; }

        /// <summary>
        /// Whether the ad account has accepted terms of service.
        /// </summary>
        /// <value>Whether the ad account has accepted terms of service.</value>
        /* <example>true</example> */
        [DataMember(Name="has_accepted", EmitDefaultValue=true)]
        public bool HasAccepted { get; set; }

        /// <summary>
        /// The ID of the ad account.
        /// </summary>
        /// <value>The ID of the ad account.</value>
        /* <example>549755885175</example> */
        [DataMember(Name="ad_account_id", EmitDefaultValue=false)]
        public string AdAccountId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TermsOfService {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Html: ").Append(Html).Append("\n");
            sb.Append("  HasAccepted: ").Append(HasAccepted).Append("\n");
            sb.Append("  AdAccountId: ").Append(AdAccountId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((TermsOfService)obj);
        }

        /// <summary>
        /// Returns true if TermsOfService instances are equal
        /// </summary>
        /// <param name="other">Instance of TermsOfService to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TermsOfService other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Html == other.Html ||
                    Html != null &&
                    Html.Equals(other.Html)
                ) && 
                (
                    HasAccepted == other.HasAccepted ||
                    
                    HasAccepted.Equals(other.HasAccepted)
                ) && 
                (
                    AdAccountId == other.AdAccountId ||
                    AdAccountId != null &&
                    AdAccountId.Equals(other.AdAccountId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Html != null)
                    hashCode = hashCode * 59 + Html.GetHashCode();
                    
                    hashCode = hashCode * 59 + HasAccepted.GetHashCode();
                    if (AdAccountId != null)
                    hashCode = hashCode * 59 + AdAccountId.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(TermsOfService left, TermsOfService right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(TermsOfService left, TermsOfService right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
