/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// Body to be used on path to send Members or Partners Invite or Request
    /// </summary>
    [DataContract]
    public partial class CreateMembershipOrPartnershipInvitesBody : IEquatable<CreateMembershipOrPartnershipInvitesBody>
    {

        /// <summary>
        /// The business access level to grant member/partner. Note, values are case-sensitive. - EMPLOYEE: Can only view and access assets you assign them to. They cannot see details about other employees, partners, or other assets. - BIZ_ADMIN: Have full control of roles and can add employees and partners as well as grant asset access. - PARTNER: Can only view and access assets you assign them to/or they assign to you.
        /// </summary>
        /// <value>The business access level to grant member/partner. Note, values are case-sensitive. - EMPLOYEE: Can only view and access assets you assign them to. They cannot see details about other employees, partners, or other assets. - BIZ_ADMIN: Have full control of roles and can add employees and partners as well as grant asset access. - PARTNER: Can only view and access assets you assign them to/or they assign to you.</value>
        [TypeConverter(typeof(CustomEnumConverter<BusinessRoleEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum BusinessRoleEnum
        {
            
            /// <summary>
            /// Enum EMPLOYEEEnum for EMPLOYEE
            /// </summary>
            [EnumMember(Value = "EMPLOYEE")]
            EMPLOYEEEnum = 1,
            
            /// <summary>
            /// Enum BIZADMINEnum for BIZ_ADMIN
            /// </summary>
            [EnumMember(Value = "BIZ_ADMIN")]
            BIZADMINEnum = 2,
            
            /// <summary>
            /// Enum PARTNEREnum for PARTNER
            /// </summary>
            [EnumMember(Value = "PARTNER")]
            PARTNEREnum = 3
        }

        /// <summary>
        /// The business access level to grant member/partner. Note, values are case-sensitive. - EMPLOYEE: Can only view and access assets you assign them to. They cannot see details about other employees, partners, or other assets. - BIZ_ADMIN: Have full control of roles and can add employees and partners as well as grant asset access. - PARTNER: Can only view and access assets you assign them to/or they assign to you.
        /// </summary>
        /// <value>The business access level to grant member/partner. Note, values are case-sensitive. - EMPLOYEE: Can only view and access assets you assign them to. They cannot see details about other employees, partners, or other assets. - BIZ_ADMIN: Have full control of roles and can add employees and partners as well as grant asset access. - PARTNER: Can only view and access assets you assign them to/or they assign to you.</value>
        /* <example>BIZ_ADMIN</example> */
        [Required]
        [DataMember(Name="business_role", EmitDefaultValue=true)]
        public BusinessRoleEnum BusinessRole { get; set; }

        /// <summary>
        /// Gets or Sets InviteType
        /// </summary>
        [Required]
        [DataMember(Name="invite_type", EmitDefaultValue=true)]
        public InviteType InviteType { get; set; }

        /// <summary>
        /// A list of usernames, emails, or a mix of them. Should be used if invite_type is MEMBER_INVITE
        /// </summary>
        /// <value>A list of usernames, emails, or a mix of them. Should be used if invite_type is MEMBER_INVITE</value>
        /* <example>[&quot;business0101&quot;,&quot;user@business.com&quot;]</example> */
        [DataMember(Name="members", EmitDefaultValue=false)]
        public List<string> Members { get; set; }

        /// <summary>
        /// A list of partner_id. Should be used if invite_type is PARTNER_INVITE or PARTNER_REQUEST
        /// </summary>
        /// <value>A list of partner_id. Should be used if invite_type is PARTNER_INVITE or PARTNER_REQUEST</value>
        /* <example>[&quot;809944451643622187&quot;,&quot;766456567741825556&quot;]</example> */
        [DataMember(Name="partners", EmitDefaultValue=false)]
        public List<string> Partners { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateMembershipOrPartnershipInvitesBody {\n");
            sb.Append("  BusinessRole: ").Append(BusinessRole).Append("\n");
            sb.Append("  InviteType: ").Append(InviteType).Append("\n");
            sb.Append("  Members: ").Append(Members).Append("\n");
            sb.Append("  Partners: ").Append(Partners).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CreateMembershipOrPartnershipInvitesBody)obj);
        }

        /// <summary>
        /// Returns true if CreateMembershipOrPartnershipInvitesBody instances are equal
        /// </summary>
        /// <param name="other">Instance of CreateMembershipOrPartnershipInvitesBody to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateMembershipOrPartnershipInvitesBody other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    BusinessRole == other.BusinessRole ||
                    
                    BusinessRole.Equals(other.BusinessRole)
                ) && 
                (
                    InviteType == other.InviteType ||
                    
                    InviteType.Equals(other.InviteType)
                ) && 
                (
                    Members == other.Members ||
                    Members != null &&
                    other.Members != null &&
                    Members.SequenceEqual(other.Members)
                ) && 
                (
                    Partners == other.Partners ||
                    Partners != null &&
                    other.Partners != null &&
                    Partners.SequenceEqual(other.Partners)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + BusinessRole.GetHashCode();
                    
                    hashCode = hashCode * 59 + InviteType.GetHashCode();
                    if (Members != null)
                    hashCode = hashCode * 59 + Members.GetHashCode();
                    if (Partners != null)
                    hashCode = hashCode * 59 + Partners.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(CreateMembershipOrPartnershipInvitesBody left, CreateMembershipOrPartnershipInvitesBody right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CreateMembershipOrPartnershipInvitesBody left, CreateMembershipOrPartnershipInvitesBody right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
