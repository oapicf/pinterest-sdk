/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class AdGroupAudienceSizingRequest : IEquatable<AdGroupAudienceSizingRequest>
    {
        /// <summary>
        /// Enable auto-targeting for ad group. Also known as &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/expanded-targeting\&quot; target&#x3D;\&quot;_blank\&quot;&gt;\&quot;expanded targeting\&quot;&lt;/a&gt;.
        /// </summary>
        /// <value>Enable auto-targeting for ad group. Also known as &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/expanded-targeting\&quot; target&#x3D;\&quot;_blank\&quot;&gt;\&quot;expanded targeting\&quot;&lt;/a&gt;.</value>
        /* <example>true</example> */
        [DataMember(Name="auto_targeting_enabled", EmitDefaultValue=true)]
        public bool AutoTargetingEnabled { get; set; } = true;

        /// <summary>
        /// &lt;a href&#x3D;\&quot;/docs/redoc/#section/Placement-group\&quot;&gt;Placement group&lt;/a&gt;.
        /// </summary>
        /// <value>&lt;a href&#x3D;\&quot;/docs/redoc/#section/Placement-group\&quot;&gt;Placement group&lt;/a&gt;.</value>
        [DataMember(Name="placement_group", EmitDefaultValue=true)]
        public PlacementGroupType PlacementGroup { get; set; } = "ALL";


        /// <summary>
        /// Gets or Sets CreativeTypes
        /// </summary>
        [TypeConverter(typeof(CustomEnumConverter<CreativeTypesEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum CreativeTypesEnum
        {
            
            /// <summary>
            /// Enum REGULAREnum for REGULAR
            /// </summary>
            [EnumMember(Value = "REGULAR")]
            REGULAREnum = 1,
            
            /// <summary>
            /// Enum VIDEOEnum for VIDEO
            /// </summary>
            [EnumMember(Value = "VIDEO")]
            VIDEOEnum = 2,
            
            /// <summary>
            /// Enum SHOPPINGEnum for SHOPPING
            /// </summary>
            [EnumMember(Value = "SHOPPING")]
            SHOPPINGEnum = 3,
            
            /// <summary>
            /// Enum CAROUSELEnum for CAROUSEL
            /// </summary>
            [EnumMember(Value = "CAROUSEL")]
            CAROUSELEnum = 4,
            
            /// <summary>
            /// Enum MAXVIDEOEnum for MAX_VIDEO
            /// </summary>
            [EnumMember(Value = "MAX_VIDEO")]
            MAXVIDEOEnum = 5,
            
            /// <summary>
            /// Enum SHOPTHEPINEnum for SHOP_THE_PIN
            /// </summary>
            [EnumMember(Value = "SHOP_THE_PIN")]
            SHOPTHEPINEnum = 6,
            
            /// <summary>
            /// Enum COLLECTIONEnum for COLLECTION
            /// </summary>
            [EnumMember(Value = "COLLECTION")]
            COLLECTIONEnum = 7,
            
            /// <summary>
            /// Enum IDEAEnum for IDEA
            /// </summary>
            [EnumMember(Value = "IDEA")]
            IDEAEnum = 8
        }

        /// <summary>
        /// Pin creative types filter. &lt;/p&gt;&lt;strong&gt;Note:&lt;/strong&gt; SHOP_THE_PIN has been deprecated. Please use COLLECTION instead.
        /// </summary>
        /// <value>Pin creative types filter. &lt;/p&gt;&lt;strong&gt;Note:&lt;/strong&gt; SHOP_THE_PIN has been deprecated. Please use COLLECTION instead.</value>
        [DataMember(Name="creative_types", EmitDefaultValue=true)]
        public List<AdGroupAudienceSizingRequest.CreativeTypesEnum> CreativeTypes { get; set; }

        /// <summary>
        /// Gets or Sets TargetingSpec
        /// </summary>
        [DataMember(Name="targeting_spec", EmitDefaultValue=false)]
        public TargetingSpec TargetingSpec { get; set; }

        /// <summary>
        /// Targeted product group IDs. &lt;/p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This can only be combined with shopping/catalog sales campaigns. For more information, &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/shopping-ads#section-14571\&quot; target&#x3D;\&quot;_blank\&quot;&gt;click here&lt;/a&gt;. SHOPPING_RETARGETING must be included in targeting_spec object or this field will be ignored.
        /// </summary>
        /// <value>Targeted product group IDs. &lt;/p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This can only be combined with shopping/catalog sales campaigns. For more information, &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/shopping-ads#section-14571\&quot; target&#x3D;\&quot;_blank\&quot;&gt;click here&lt;/a&gt;. SHOPPING_RETARGETING must be included in targeting_spec object or this field will be ignored.</value>
        [DataMember(Name="product_group_ids", EmitDefaultValue=true)]
        public List<string> ProductGroupIds { get; set; }

        /// <summary>
        /// Array of keyword objects. If the keywords field is missing, all keywords will be targeted.
        /// </summary>
        /// <value>Array of keyword objects. If the keywords field is missing, all keywords will be targeted.</value>
        [DataMember(Name="keywords", EmitDefaultValue=true)]
        public List<AdGroupAudienceSizingRequestKeywordsInner> Keywords { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AdGroupAudienceSizingRequest {\n");
            sb.Append("  AutoTargetingEnabled: ").Append(AutoTargetingEnabled).Append("\n");
            sb.Append("  PlacementGroup: ").Append(PlacementGroup).Append("\n");
            sb.Append("  CreativeTypes: ").Append(CreativeTypes).Append("\n");
            sb.Append("  TargetingSpec: ").Append(TargetingSpec).Append("\n");
            sb.Append("  ProductGroupIds: ").Append(ProductGroupIds).Append("\n");
            sb.Append("  Keywords: ").Append(Keywords).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((AdGroupAudienceSizingRequest)obj);
        }

        /// <summary>
        /// Returns true if AdGroupAudienceSizingRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of AdGroupAudienceSizingRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AdGroupAudienceSizingRequest other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    AutoTargetingEnabled == other.AutoTargetingEnabled ||
                    
                    AutoTargetingEnabled.Equals(other.AutoTargetingEnabled)
                ) && 
                (
                    PlacementGroup == other.PlacementGroup ||
                    
                    PlacementGroup.Equals(other.PlacementGroup)
                ) && 
                (
                    CreativeTypes == other.CreativeTypes ||
                    CreativeTypes != null &&
                    other.CreativeTypes != null &&
                    CreativeTypes.SequenceEqual(other.CreativeTypes)
                ) && 
                (
                    TargetingSpec == other.TargetingSpec ||
                    TargetingSpec != null &&
                    TargetingSpec.Equals(other.TargetingSpec)
                ) && 
                (
                    ProductGroupIds == other.ProductGroupIds ||
                    ProductGroupIds != null &&
                    other.ProductGroupIds != null &&
                    ProductGroupIds.SequenceEqual(other.ProductGroupIds)
                ) && 
                (
                    Keywords == other.Keywords ||
                    Keywords != null &&
                    other.Keywords != null &&
                    Keywords.SequenceEqual(other.Keywords)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + AutoTargetingEnabled.GetHashCode();
                    
                    hashCode = hashCode * 59 + PlacementGroup.GetHashCode();
                    if (CreativeTypes != null)
                    hashCode = hashCode * 59 + CreativeTypes.GetHashCode();
                    if (TargetingSpec != null)
                    hashCode = hashCode * 59 + TargetingSpec.GetHashCode();
                    if (ProductGroupIds != null)
                    hashCode = hashCode * 59 + ProductGroupIds.GetHashCode();
                    if (Keywords != null)
                    hashCode = hashCode * 59 + Keywords.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(AdGroupAudienceSizingRequest left, AdGroupAudienceSizingRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AdGroupAudienceSizingRequest left, AdGroupAudienceSizingRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
