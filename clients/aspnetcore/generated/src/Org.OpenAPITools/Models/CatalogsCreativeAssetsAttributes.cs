/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class CatalogsCreativeAssetsAttributes : IEquatable<CatalogsCreativeAssetsAttributes>
    {
        /// <summary>
        /// The name of the creative assets.
        /// </summary>
        /// <value>The name of the creative assets.</value>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// Brief description of the creative assets.
        /// </summary>
        /// <value>Brief description of the creative assets.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Link to the creative assets page.
        /// </summary>
        /// <value>Link to the creative assets page.</value>
        [DataMember(Name="link", EmitDefaultValue=false)]
        public string Link { get; set; }

        /// <summary>
        /// IOS deep link to the creative assets page.
        /// </summary>
        /// <value>IOS deep link to the creative assets page.</value>
        [DataMember(Name="ios_deep_link", EmitDefaultValue=true)]
        public string IosDeepLink { get; set; }

        /// <summary>
        /// Link to the creative assets page.
        /// </summary>
        /// <value>Link to the creative assets page.</value>
        [DataMember(Name="android_deep_link", EmitDefaultValue=true)]
        public string AndroidDeepLink { get; set; }

        /// <summary>
        /// The categorization of the product based on the standardized Google Product Taxonomy. This is a set taxonomy. Both the text values and numeric codes are accepted.
        /// </summary>
        /// <value>The categorization of the product based on the standardized Google Product Taxonomy. This is a set taxonomy. Both the text values and numeric codes are accepted.</value>
        [DataMember(Name="google_product_category", EmitDefaultValue=true)]
        public string GoogleProductCategory { get; set; }

        /// <summary>
        /// Custom grouping of creative assets.
        /// </summary>
        /// <value>Custom grouping of creative assets.</value>
        [DataMember(Name="custom_label_0", EmitDefaultValue=true)]
        public string CustomLabel0 { get; set; }

        /// <summary>
        /// Custom grouping of creative assets.
        /// </summary>
        /// <value>Custom grouping of creative assets.</value>
        [DataMember(Name="custom_label_1", EmitDefaultValue=true)]
        public string CustomLabel1 { get; set; }

        /// <summary>
        /// Custom grouping of creative assets.
        /// </summary>
        /// <value>Custom grouping of creative assets.</value>
        [DataMember(Name="custom_label_2", EmitDefaultValue=true)]
        public string CustomLabel2 { get; set; }

        /// <summary>
        /// Custom grouping of creative assets.
        /// </summary>
        /// <value>Custom grouping of creative assets.</value>
        [DataMember(Name="custom_label_3", EmitDefaultValue=true)]
        public string CustomLabel3 { get; set; }

        /// <summary>
        /// Custom grouping of creative assets.
        /// </summary>
        /// <value>Custom grouping of creative assets.</value>
        [DataMember(Name="custom_label_4", EmitDefaultValue=true)]
        public string CustomLabel4 { get; set; }

        /// <summary>
        /// Visibility of the creative assets. Must be one of the following values (upper or lowercase): ‘visible’, ‘hidden’.
        /// </summary>
        /// <value>Visibility of the creative assets. Must be one of the following values (upper or lowercase): ‘visible’, ‘hidden’.</value>
        [DataMember(Name="visibility", EmitDefaultValue=true)]
        public string Visibility { get; set; }

        /// <summary>
        /// The creative assets image.
        /// </summary>
        /// <value>The creative assets image.</value>
        /* <example>https://scene.example.com/image/image_v2.jpg</example> */
        [DataMember(Name="image_link", EmitDefaultValue=false)]
        public string ImageLink { get; set; }

        /// <summary>
        /// The creative assets video.
        /// </summary>
        /// <value>The creative assets video.</value>
        /* <example>https://scene.example.com/image/image_v2.mp4</example> */
        [DataMember(Name="video_link", EmitDefaultValue=false)]
        public string VideoLink { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CatalogsCreativeAssetsAttributes {\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Link: ").Append(Link).Append("\n");
            sb.Append("  IosDeepLink: ").Append(IosDeepLink).Append("\n");
            sb.Append("  AndroidDeepLink: ").Append(AndroidDeepLink).Append("\n");
            sb.Append("  GoogleProductCategory: ").Append(GoogleProductCategory).Append("\n");
            sb.Append("  CustomLabel0: ").Append(CustomLabel0).Append("\n");
            sb.Append("  CustomLabel1: ").Append(CustomLabel1).Append("\n");
            sb.Append("  CustomLabel2: ").Append(CustomLabel2).Append("\n");
            sb.Append("  CustomLabel3: ").Append(CustomLabel3).Append("\n");
            sb.Append("  CustomLabel4: ").Append(CustomLabel4).Append("\n");
            sb.Append("  Visibility: ").Append(Visibility).Append("\n");
            sb.Append("  ImageLink: ").Append(ImageLink).Append("\n");
            sb.Append("  VideoLink: ").Append(VideoLink).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CatalogsCreativeAssetsAttributes)obj);
        }

        /// <summary>
        /// Returns true if CatalogsCreativeAssetsAttributes instances are equal
        /// </summary>
        /// <param name="other">Instance of CatalogsCreativeAssetsAttributes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CatalogsCreativeAssetsAttributes other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Title == other.Title ||
                    Title != null &&
                    Title.Equals(other.Title)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    Link == other.Link ||
                    Link != null &&
                    Link.Equals(other.Link)
                ) && 
                (
                    IosDeepLink == other.IosDeepLink ||
                    IosDeepLink != null &&
                    IosDeepLink.Equals(other.IosDeepLink)
                ) && 
                (
                    AndroidDeepLink == other.AndroidDeepLink ||
                    AndroidDeepLink != null &&
                    AndroidDeepLink.Equals(other.AndroidDeepLink)
                ) && 
                (
                    GoogleProductCategory == other.GoogleProductCategory ||
                    GoogleProductCategory != null &&
                    GoogleProductCategory.Equals(other.GoogleProductCategory)
                ) && 
                (
                    CustomLabel0 == other.CustomLabel0 ||
                    CustomLabel0 != null &&
                    CustomLabel0.Equals(other.CustomLabel0)
                ) && 
                (
                    CustomLabel1 == other.CustomLabel1 ||
                    CustomLabel1 != null &&
                    CustomLabel1.Equals(other.CustomLabel1)
                ) && 
                (
                    CustomLabel2 == other.CustomLabel2 ||
                    CustomLabel2 != null &&
                    CustomLabel2.Equals(other.CustomLabel2)
                ) && 
                (
                    CustomLabel3 == other.CustomLabel3 ||
                    CustomLabel3 != null &&
                    CustomLabel3.Equals(other.CustomLabel3)
                ) && 
                (
                    CustomLabel4 == other.CustomLabel4 ||
                    CustomLabel4 != null &&
                    CustomLabel4.Equals(other.CustomLabel4)
                ) && 
                (
                    Visibility == other.Visibility ||
                    Visibility != null &&
                    Visibility.Equals(other.Visibility)
                ) && 
                (
                    ImageLink == other.ImageLink ||
                    ImageLink != null &&
                    ImageLink.Equals(other.ImageLink)
                ) && 
                (
                    VideoLink == other.VideoLink ||
                    VideoLink != null &&
                    VideoLink.Equals(other.VideoLink)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Title != null)
                    hashCode = hashCode * 59 + Title.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (Link != null)
                    hashCode = hashCode * 59 + Link.GetHashCode();
                    if (IosDeepLink != null)
                    hashCode = hashCode * 59 + IosDeepLink.GetHashCode();
                    if (AndroidDeepLink != null)
                    hashCode = hashCode * 59 + AndroidDeepLink.GetHashCode();
                    if (GoogleProductCategory != null)
                    hashCode = hashCode * 59 + GoogleProductCategory.GetHashCode();
                    if (CustomLabel0 != null)
                    hashCode = hashCode * 59 + CustomLabel0.GetHashCode();
                    if (CustomLabel1 != null)
                    hashCode = hashCode * 59 + CustomLabel1.GetHashCode();
                    if (CustomLabel2 != null)
                    hashCode = hashCode * 59 + CustomLabel2.GetHashCode();
                    if (CustomLabel3 != null)
                    hashCode = hashCode * 59 + CustomLabel3.GetHashCode();
                    if (CustomLabel4 != null)
                    hashCode = hashCode * 59 + CustomLabel4.GetHashCode();
                    if (Visibility != null)
                    hashCode = hashCode * 59 + Visibility.GetHashCode();
                    if (ImageLink != null)
                    hashCode = hashCode * 59 + ImageLink.GetHashCode();
                    if (VideoLink != null)
                    hashCode = hashCode * 59 + VideoLink.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(CatalogsCreativeAssetsAttributes left, CatalogsCreativeAssetsAttributes right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CatalogsCreativeAssetsAttributes left, CatalogsCreativeAssetsAttributes right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
