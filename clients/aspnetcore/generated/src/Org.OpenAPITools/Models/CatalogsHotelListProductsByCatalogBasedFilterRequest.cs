/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// Request object to list products for a given hotel catalog_id and product group filter.
    /// </summary>
    [DataContract]
    public partial class CatalogsHotelListProductsByCatalogBasedFilterRequest : IEquatable<CatalogsHotelListProductsByCatalogBasedFilterRequest>
    {

        /// <summary>
        /// Gets or Sets CatalogType
        /// </summary>
        [TypeConverter(typeof(CustomEnumConverter<CatalogTypeEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum CatalogTypeEnum
        {
            
            /// <summary>
            /// Enum HOTELEnum for HOTEL
            /// </summary>
            [EnumMember(Value = "HOTEL")]
            HOTELEnum = 1
        }

        /// <summary>
        /// Gets or Sets CatalogType
        /// </summary>
        [Required]
        [DataMember(Name="catalog_type", EmitDefaultValue=true)]
        public CatalogTypeEnum CatalogType { get; set; }

        /// <summary>
        /// Catalog id pertaining to the hotel product group.
        /// </summary>
        /// <value>Catalog id pertaining to the hotel product group.</value>
        /* <example>2680059592705</example> */
        [Required]
        [RegularExpression("^\\d+$")]
        [DataMember(Name="catalog_id", EmitDefaultValue=false)]
        public string CatalogId { get; set; }

        /// <summary>
        /// Gets or Sets Filters
        /// </summary>
        [Required]
        [DataMember(Name="filters", EmitDefaultValue=false)]
        public CatalogsHotelProductGroupFilters Filters { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CatalogsHotelListProductsByCatalogBasedFilterRequest {\n");
            sb.Append("  CatalogType: ").Append(CatalogType).Append("\n");
            sb.Append("  CatalogId: ").Append(CatalogId).Append("\n");
            sb.Append("  Filters: ").Append(Filters).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CatalogsHotelListProductsByCatalogBasedFilterRequest)obj);
        }

        /// <summary>
        /// Returns true if CatalogsHotelListProductsByCatalogBasedFilterRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of CatalogsHotelListProductsByCatalogBasedFilterRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CatalogsHotelListProductsByCatalogBasedFilterRequest other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    CatalogType == other.CatalogType ||
                    
                    CatalogType.Equals(other.CatalogType)
                ) && 
                (
                    CatalogId == other.CatalogId ||
                    CatalogId != null &&
                    CatalogId.Equals(other.CatalogId)
                ) && 
                (
                    Filters == other.Filters ||
                    Filters != null &&
                    Filters.Equals(other.Filters)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + CatalogType.GetHashCode();
                    if (CatalogId != null)
                    hashCode = hashCode * 59 + CatalogId.GetHashCode();
                    if (Filters != null)
                    hashCode = hashCode * 59 + Filters.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(CatalogsHotelListProductsByCatalogBasedFilterRequest left, CatalogsHotelListProductsByCatalogBasedFilterRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CatalogsHotelListProductsByCatalogBasedFilterRequest left, CatalogsHotelListProductsByCatalogBasedFilterRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
