/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class DeletePartnerAssetAccessBodyAccessesInner : IEquatable<DeletePartnerAssetAccessBodyAccessesInner>
    {
        /// <summary>
        /// Unique identifier of a business partner to update asset access to.
        /// </summary>
        /// <value>Unique identifier of a business partner to update asset access to.</value>
        /* <example>1234567890123</example> */
        [Required]
        [RegularExpression("^\\d+$")]
        [MaxLength(25)]
        [DataMember(Name="partner_id", EmitDefaultValue=false)]
        public string PartnerId { get; set; }

        /// <summary>
        /// Unique identifier of the business asset.
        /// </summary>
        /// <value>Unique identifier of the business asset.</value>
        /* <example>549755885175</example> */
        [Required]
        [RegularExpression("^\\d+$")]
        [MaxLength(25)]
        [DataMember(Name="asset_id", EmitDefaultValue=false)]
        public string AssetId { get; set; }


        /// <summary>
        /// If partner_type=INTERNAL, the deleted asset access is for the access the partner has to your business asset.<br> If partner_type=EXTERNAL, the deleted asset access is for the access you have to the partner's business asset.
        /// </summary>
        /// <value>If partner_type=INTERNAL, the deleted asset access is for the access the partner has to your business asset.<br> If partner_type=EXTERNAL, the deleted asset access is for the access you have to the partner's business asset.</value>
        [TypeConverter(typeof(CustomEnumConverter<PartnerTypeEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum PartnerTypeEnum
        {
            
            /// <summary>
            /// Enum INTERNALEnum for INTERNAL
            /// </summary>
            [EnumMember(Value = "INTERNAL")]
            INTERNALEnum = 1,
            
            /// <summary>
            /// Enum EXTERNALEnum for EXTERNAL
            /// </summary>
            [EnumMember(Value = "EXTERNAL")]
            EXTERNALEnum = 2
        }

        /// <summary>
        /// If partner_type&#x3D;INTERNAL, the deleted asset access is for the access the partner has to your business asset.&lt;br&gt; If partner_type&#x3D;EXTERNAL, the deleted asset access is for the access you have to the partner&#39;s business asset.
        /// </summary>
        /// <value>If partner_type&#x3D;INTERNAL, the deleted asset access is for the access the partner has to your business asset.&lt;br&gt; If partner_type&#x3D;EXTERNAL, the deleted asset access is for the access you have to the partner&#39;s business asset.</value>
        /* <example>INTERNAL</example> */
        [DataMember(Name="partner_type", EmitDefaultValue=true)]
        public PartnerTypeEnum PartnerType { get; set; } = PartnerTypeEnum.INTERNALEnum;

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DeletePartnerAssetAccessBodyAccessesInner {\n");
            sb.Append("  PartnerId: ").Append(PartnerId).Append("\n");
            sb.Append("  AssetId: ").Append(AssetId).Append("\n");
            sb.Append("  PartnerType: ").Append(PartnerType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((DeletePartnerAssetAccessBodyAccessesInner)obj);
        }

        /// <summary>
        /// Returns true if DeletePartnerAssetAccessBodyAccessesInner instances are equal
        /// </summary>
        /// <param name="other">Instance of DeletePartnerAssetAccessBodyAccessesInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DeletePartnerAssetAccessBodyAccessesInner other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    PartnerId == other.PartnerId ||
                    PartnerId != null &&
                    PartnerId.Equals(other.PartnerId)
                ) && 
                (
                    AssetId == other.AssetId ||
                    AssetId != null &&
                    AssetId.Equals(other.AssetId)
                ) && 
                (
                    PartnerType == other.PartnerType ||
                    
                    PartnerType.Equals(other.PartnerType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (PartnerId != null)
                    hashCode = hashCode * 59 + PartnerId.GetHashCode();
                    if (AssetId != null)
                    hashCode = hashCode * 59 + AssetId.GetHashCode();
                    
                    hashCode = hashCode * 59 + PartnerType.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(DeletePartnerAssetAccessBodyAccessesInner left, DeletePartnerAssetAccessBodyAccessesInner right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(DeletePartnerAssetAccessBodyAccessesInner left, DeletePartnerAssetAccessBodyAccessesInner right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
