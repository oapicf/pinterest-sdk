/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class CatalogsFeedIngestionWarnings : IEquatable<CatalogsFeedIngestionWarnings>
    {
        /// <summary>
        /// We experienced a technical difficulty and were unable to download some additional images. The next download attempt will happen in 24 hours.
        /// </summary>
        /// <value>We experienced a technical difficulty and were unable to download some additional images. The next download attempt will happen in 24 hours.</value>
        [DataMember(Name="ADDITIONAL_IMAGE_LEVEL_INTERNAL_ERROR", EmitDefaultValue=true)]
        public int ADDITIONAL_IMAGE_LEVEL_INTERNAL_ERROR { get; set; }

        /// <summary>
        /// Additional image files are unreadable. Please upload new files to continue.
        /// </summary>
        /// <value>Additional image files are unreadable. Please upload new files to continue.</value>
        [DataMember(Name="ADDITIONAL_IMAGE_FILE_NOT_ACCESSIBLE", EmitDefaultValue=true)]
        public int ADDITIONAL_IMAGE_FILE_NOT_ACCESSIBLE { get; set; }

        /// <summary>
        /// Additional image files are unreadable. Please check your link and upload new files to continue.
        /// </summary>
        /// <value>Additional image files are unreadable. Please check your link and upload new files to continue.</value>
        [DataMember(Name="ADDITIONAL_IMAGE_MALFORMED_URL", EmitDefaultValue=true)]
        public int ADDITIONAL_IMAGE_MALFORMED_URL { get; set; }

        /// <summary>
        /// Additional image files are unreadable. Please upload new files to continue.
        /// </summary>
        /// <value>Additional image files are unreadable. Please upload new files to continue.</value>
        [DataMember(Name="ADDITIONAL_IMAGE_FILE_NOT_FOUND", EmitDefaultValue=true)]
        public int ADDITIONAL_IMAGE_FILE_NOT_FOUND { get; set; }

        /// <summary>
        /// Additional image files are unreadable. Please upload new files to continue.
        /// </summary>
        /// <value>Additional image files are unreadable. Please upload new files to continue.</value>
        [DataMember(Name="ADDITIONAL_IMAGE_INVALID_FILE", EmitDefaultValue=true)]
        public int ADDITIONAL_IMAGE_INVALID_FILE { get; set; }

        /// <summary>
        /// price is not a supported column. Use base_price and sale_price instead.
        /// </summary>
        /// <value>price is not a supported column. Use base_price and sale_price instead.</value>
        [DataMember(Name="HOTEL_PRICE_HEADER_IS_PRESENT", EmitDefaultValue=true)]
        public int HOTEL_PRICE_HEADER_IS_PRESENT { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CatalogsFeedIngestionWarnings {\n");
            sb.Append("  ADDITIONAL_IMAGE_LEVEL_INTERNAL_ERROR: ").Append(ADDITIONAL_IMAGE_LEVEL_INTERNAL_ERROR).Append("\n");
            sb.Append("  ADDITIONAL_IMAGE_FILE_NOT_ACCESSIBLE: ").Append(ADDITIONAL_IMAGE_FILE_NOT_ACCESSIBLE).Append("\n");
            sb.Append("  ADDITIONAL_IMAGE_MALFORMED_URL: ").Append(ADDITIONAL_IMAGE_MALFORMED_URL).Append("\n");
            sb.Append("  ADDITIONAL_IMAGE_FILE_NOT_FOUND: ").Append(ADDITIONAL_IMAGE_FILE_NOT_FOUND).Append("\n");
            sb.Append("  ADDITIONAL_IMAGE_INVALID_FILE: ").Append(ADDITIONAL_IMAGE_INVALID_FILE).Append("\n");
            sb.Append("  HOTEL_PRICE_HEADER_IS_PRESENT: ").Append(HOTEL_PRICE_HEADER_IS_PRESENT).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CatalogsFeedIngestionWarnings)obj);
        }

        /// <summary>
        /// Returns true if CatalogsFeedIngestionWarnings instances are equal
        /// </summary>
        /// <param name="other">Instance of CatalogsFeedIngestionWarnings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CatalogsFeedIngestionWarnings other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ADDITIONAL_IMAGE_LEVEL_INTERNAL_ERROR == other.ADDITIONAL_IMAGE_LEVEL_INTERNAL_ERROR ||
                    
                    ADDITIONAL_IMAGE_LEVEL_INTERNAL_ERROR.Equals(other.ADDITIONAL_IMAGE_LEVEL_INTERNAL_ERROR)
                ) && 
                (
                    ADDITIONAL_IMAGE_FILE_NOT_ACCESSIBLE == other.ADDITIONAL_IMAGE_FILE_NOT_ACCESSIBLE ||
                    
                    ADDITIONAL_IMAGE_FILE_NOT_ACCESSIBLE.Equals(other.ADDITIONAL_IMAGE_FILE_NOT_ACCESSIBLE)
                ) && 
                (
                    ADDITIONAL_IMAGE_MALFORMED_URL == other.ADDITIONAL_IMAGE_MALFORMED_URL ||
                    
                    ADDITIONAL_IMAGE_MALFORMED_URL.Equals(other.ADDITIONAL_IMAGE_MALFORMED_URL)
                ) && 
                (
                    ADDITIONAL_IMAGE_FILE_NOT_FOUND == other.ADDITIONAL_IMAGE_FILE_NOT_FOUND ||
                    
                    ADDITIONAL_IMAGE_FILE_NOT_FOUND.Equals(other.ADDITIONAL_IMAGE_FILE_NOT_FOUND)
                ) && 
                (
                    ADDITIONAL_IMAGE_INVALID_FILE == other.ADDITIONAL_IMAGE_INVALID_FILE ||
                    
                    ADDITIONAL_IMAGE_INVALID_FILE.Equals(other.ADDITIONAL_IMAGE_INVALID_FILE)
                ) && 
                (
                    HOTEL_PRICE_HEADER_IS_PRESENT == other.HOTEL_PRICE_HEADER_IS_PRESENT ||
                    
                    HOTEL_PRICE_HEADER_IS_PRESENT.Equals(other.HOTEL_PRICE_HEADER_IS_PRESENT)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + ADDITIONAL_IMAGE_LEVEL_INTERNAL_ERROR.GetHashCode();
                    
                    hashCode = hashCode * 59 + ADDITIONAL_IMAGE_FILE_NOT_ACCESSIBLE.GetHashCode();
                    
                    hashCode = hashCode * 59 + ADDITIONAL_IMAGE_MALFORMED_URL.GetHashCode();
                    
                    hashCode = hashCode * 59 + ADDITIONAL_IMAGE_FILE_NOT_FOUND.GetHashCode();
                    
                    hashCode = hashCode * 59 + ADDITIONAL_IMAGE_INVALID_FILE.GetHashCode();
                    
                    hashCode = hashCode * 59 + HOTEL_PRICE_HEADER_IS_PRESENT.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(CatalogsFeedIngestionWarnings left, CatalogsFeedIngestionWarnings right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CatalogsFeedIngestionWarnings left, CatalogsFeedIngestionWarnings right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
