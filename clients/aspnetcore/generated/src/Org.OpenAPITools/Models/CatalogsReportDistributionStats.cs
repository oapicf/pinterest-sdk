/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class CatalogsReportDistributionStats : IEquatable<CatalogsReportDistributionStats>
    {

        /// <summary>
        /// Gets or Sets ReportType
        /// </summary>
        [TypeConverter(typeof(CustomEnumConverter<ReportTypeEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ReportTypeEnum
        {
            
            /// <summary>
            /// Enum DISTRIBUTIONISSUESEnum for DISTRIBUTION_ISSUES
            /// </summary>
            [EnumMember(Value = "DISTRIBUTION_ISSUES")]
            DISTRIBUTIONISSUESEnum = 1
        }

        /// <summary>
        /// Gets or Sets ReportType
        /// </summary>
        [DataMember(Name="report_type", EmitDefaultValue=true)]
        public ReportTypeEnum ReportType { get; set; }

        /// <summary>
        /// ID of the catalog entity.
        /// </summary>
        /// <value>ID of the catalog entity.</value>
        [RegularExpression("^\\d+$")]
        [DataMember(Name="catalog_id", EmitDefaultValue=false)]
        public string CatalogId { get; set; }

        /// <summary>
        /// The event code that a diagnostics aggregated number references
        /// </summary>
        /// <value>The event code that a diagnostics aggregated number references</value>
        [DataMember(Name="code", EmitDefaultValue=true)]
        public int Code { get; set; }

        /// <summary>
        /// A human-friendly label for the event code (e.g, &#39;SPAM&#39;)
        /// </summary>
        /// <value>A human-friendly label for the event code (e.g, &#39;SPAM&#39;)</value>
        /* <example>SPAM</example> */
        [DataMember(Name="code_label", EmitDefaultValue=false)]
        public string CodeLabel { get; set; }

        /// <summary>
        /// Title message describing the diagnostic issue
        /// </summary>
        /// <value>Title message describing the diagnostic issue</value>
        [DataMember(Name="message", EmitDefaultValue=false)]
        public string Message { get; set; }

        /// <summary>
        /// Number of occurrences of the issue
        /// </summary>
        /// <value>Number of occurrences of the issue</value>
        /* <example>10</example> */
        [DataMember(Name="occurrences", EmitDefaultValue=true)]
        public int Occurrences { get; set; }

        /// <summary>
        /// Indicates if issue makes items ineligible for ads distribution
        /// </summary>
        /// <value>Indicates if issue makes items ineligible for ads distribution</value>
        /* <example>true</example> */
        [DataMember(Name="ineligible_for_ads", EmitDefaultValue=true)]
        public bool IneligibleForAds { get; set; }

        /// <summary>
        /// Indicates if issue makes items ineligible for organic distribution
        /// </summary>
        /// <value>Indicates if issue makes items ineligible for organic distribution</value>
        /* <example>true</example> */
        [DataMember(Name="ineligible_for_organic", EmitDefaultValue=true)]
        public bool IneligibleForOrganic { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CatalogsReportDistributionStats {\n");
            sb.Append("  ReportType: ").Append(ReportType).Append("\n");
            sb.Append("  CatalogId: ").Append(CatalogId).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  CodeLabel: ").Append(CodeLabel).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Occurrences: ").Append(Occurrences).Append("\n");
            sb.Append("  IneligibleForAds: ").Append(IneligibleForAds).Append("\n");
            sb.Append("  IneligibleForOrganic: ").Append(IneligibleForOrganic).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CatalogsReportDistributionStats)obj);
        }

        /// <summary>
        /// Returns true if CatalogsReportDistributionStats instances are equal
        /// </summary>
        /// <param name="other">Instance of CatalogsReportDistributionStats to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CatalogsReportDistributionStats other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ReportType == other.ReportType ||
                    
                    ReportType.Equals(other.ReportType)
                ) && 
                (
                    CatalogId == other.CatalogId ||
                    CatalogId != null &&
                    CatalogId.Equals(other.CatalogId)
                ) && 
                (
                    Code == other.Code ||
                    
                    Code.Equals(other.Code)
                ) && 
                (
                    CodeLabel == other.CodeLabel ||
                    CodeLabel != null &&
                    CodeLabel.Equals(other.CodeLabel)
                ) && 
                (
                    Message == other.Message ||
                    Message != null &&
                    Message.Equals(other.Message)
                ) && 
                (
                    Occurrences == other.Occurrences ||
                    
                    Occurrences.Equals(other.Occurrences)
                ) && 
                (
                    IneligibleForAds == other.IneligibleForAds ||
                    
                    IneligibleForAds.Equals(other.IneligibleForAds)
                ) && 
                (
                    IneligibleForOrganic == other.IneligibleForOrganic ||
                    
                    IneligibleForOrganic.Equals(other.IneligibleForOrganic)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + ReportType.GetHashCode();
                    if (CatalogId != null)
                    hashCode = hashCode * 59 + CatalogId.GetHashCode();
                    
                    hashCode = hashCode * 59 + Code.GetHashCode();
                    if (CodeLabel != null)
                    hashCode = hashCode * 59 + CodeLabel.GetHashCode();
                    if (Message != null)
                    hashCode = hashCode * 59 + Message.GetHashCode();
                    
                    hashCode = hashCode * 59 + Occurrences.GetHashCode();
                    
                    hashCode = hashCode * 59 + IneligibleForAds.GetHashCode();
                    
                    hashCode = hashCode * 59 + IneligibleForOrganic.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(CatalogsReportDistributionStats left, CatalogsReportDistributionStats right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CatalogsReportDistributionStats left, CatalogsReportDistributionStats right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
