/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ProductGroupPromotionCreateRequestElement : IEquatable<ProductGroupPromotionCreateRequestElement>
    {
        /// <summary>
        /// ID of the product group promotion.
        /// </summary>
        /// <value>ID of the product group promotion.</value>
        /* <example>2680059592705</example> */
        [RegularExpression("^\\d+$")]
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// ID of the ad group the product group belongs to.
        /// </summary>
        /// <value>ID of the ad group the product group belongs to.</value>
        /* <example>2680059592705</example> */
        [RegularExpression("^(AG)?\\d+$")]
        [DataMember(Name="ad_group_id", EmitDefaultValue=false)]
        public string AdGroupId { get; set; }

        /// <summary>
        /// The bid in micro currency.
        /// </summary>
        /// <value>The bid in micro currency.</value>
        /* <example>14000000</example> */
        [DataMember(Name="bid_in_micro_currency", EmitDefaultValue=true)]
        public int? BidInMicroCurrency { get; set; }

        /// <summary>
        /// True if the group is BIDDABLE, false if it should be EXCLUDED from serving ads.
        /// </summary>
        /// <value>True if the group is BIDDABLE, false if it should be EXCLUDED from serving ads.</value>
        /* <example>true</example> */
        [DataMember(Name="included", EmitDefaultValue=true)]
        public bool? Included { get; set; }

        /// <summary>
        /// The full product group definition path
        /// </summary>
        /// <value>The full product group definition path</value>
        /* <example>*/product_type_0&#x3D;&#39;kitchen&#39;/product_type_1&#x3D;&#39;beverage appliances&#39;</example> */
        [DataMember(Name="definition", EmitDefaultValue=true)]
        public string Definition { get; set; }

        /// <summary>
        /// The definition of the product group, relative to its parent - an attribute name/value pair
        /// </summary>
        /// <value>The definition of the product group, relative to its parent - an attribute name/value pair</value>
        /* <example>product_type_1&#x3D;&#39;beverage appliances&#39;</example> */
        [DataMember(Name="relative_definition", EmitDefaultValue=true)]
        public string RelativeDefinition { get; set; }

        /// <summary>
        /// The parent Product Group ID of this Product Group
        /// </summary>
        /// <value>The parent Product Group ID of this Product Group</value>
        /* <example>1231234</example> */
        [RegularExpression("^\\d+$")]
        [DataMember(Name="parent_id", EmitDefaultValue=true)]
        public string ParentId { get; set; }

        /// <summary>
        /// Slideshow Collections Title
        /// </summary>
        /// <value>Slideshow Collections Title</value>
        /* <example>slideshow title</example> */
        [DataMember(Name="slideshow_collections_title", EmitDefaultValue=true)]
        public string SlideshowCollectionsTitle { get; set; }

        /// <summary>
        /// Slideshow Collections Description
        /// </summary>
        /// <value>Slideshow Collections Description</value>
        /* <example>slideshow description</example> */
        [DataMember(Name="slideshow_collections_description", EmitDefaultValue=true)]
        public string SlideshowCollectionsDescription { get; set; }

        /// <summary>
        /// If set to true products promoted in this product group will use the Mobile Deep Link specified in your catalog
        /// </summary>
        /// <value>If set to true products promoted in this product group will use the Mobile Deep Link specified in your catalog</value>
        /* <example>true</example> */
        [DataMember(Name="is_mdl", EmitDefaultValue=true)]
        public bool? IsMdl { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=true)]
        public EntityStatus Status { get; set; }

        /// <summary>
        /// Tracking template for proudct group promotions. 4000 limit
        /// </summary>
        /// <value>Tracking template for proudct group promotions. 4000 limit</value>
        /* <example>https://www.pinterest.com</example> */
        [DataMember(Name="tracking_url", EmitDefaultValue=true)]
        public string TrackingUrl { get; set; }

        /// <summary>
        /// ID of the catalogs product group that this product group promotion references
        /// </summary>
        /// <value>ID of the catalogs product group that this product group promotion references</value>
        /* <example>1231235</example> */
        [RegularExpression("^\\d+$")]
        [DataMember(Name="catalog_product_group_id", EmitDefaultValue=true)]
        public string CatalogProductGroupId { get; set; }

        /// <summary>
        /// Catalogs product group name
        /// </summary>
        /// <value>Catalogs product group name</value>
        /* <example>catalogProductGroupName</example> */
        [DataMember(Name="catalog_product_group_name", EmitDefaultValue=true)]
        public string CatalogProductGroupName { get; set; }

        /// <summary>
        /// Hero Pin ID if this PG is promoted as a Collection
        /// </summary>
        /// <value>Hero Pin ID if this PG is promoted as a Collection</value>
        /* <example>123123</example> */
        [RegularExpression("^\\d+$")]
        [DataMember(Name="collections_hero_pin_id", EmitDefaultValue=true)]
        public string CollectionsHeroPinId { get; set; }

        /// <summary>
        /// Collections Hero Destination Url
        /// </summary>
        /// <value>Collections Hero Destination Url</value>
        /* <example>http://www.pinterest.com</example> */
        [DataMember(Name="collections_hero_destination_url", EmitDefaultValue=true)]
        public string CollectionsHeroDestinationUrl { get; set; }

        /// <summary>
        /// Gets or Sets GridClickType
        /// </summary>
        [DataMember(Name="grid_click_type", EmitDefaultValue=true)]
        public GridClickType? GridClickType { get; set; }

        /// <summary>
        /// Gets or Sets CreativeType
        /// </summary>
        [DataMember(Name="creative_type", EmitDefaultValue=true)]
        public CreativeType CreativeType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProductGroupPromotionCreateRequestElement {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AdGroupId: ").Append(AdGroupId).Append("\n");
            sb.Append("  BidInMicroCurrency: ").Append(BidInMicroCurrency).Append("\n");
            sb.Append("  Included: ").Append(Included).Append("\n");
            sb.Append("  Definition: ").Append(Definition).Append("\n");
            sb.Append("  RelativeDefinition: ").Append(RelativeDefinition).Append("\n");
            sb.Append("  ParentId: ").Append(ParentId).Append("\n");
            sb.Append("  SlideshowCollectionsTitle: ").Append(SlideshowCollectionsTitle).Append("\n");
            sb.Append("  SlideshowCollectionsDescription: ").Append(SlideshowCollectionsDescription).Append("\n");
            sb.Append("  IsMdl: ").Append(IsMdl).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  TrackingUrl: ").Append(TrackingUrl).Append("\n");
            sb.Append("  CatalogProductGroupId: ").Append(CatalogProductGroupId).Append("\n");
            sb.Append("  CatalogProductGroupName: ").Append(CatalogProductGroupName).Append("\n");
            sb.Append("  CollectionsHeroPinId: ").Append(CollectionsHeroPinId).Append("\n");
            sb.Append("  CollectionsHeroDestinationUrl: ").Append(CollectionsHeroDestinationUrl).Append("\n");
            sb.Append("  GridClickType: ").Append(GridClickType).Append("\n");
            sb.Append("  CreativeType: ").Append(CreativeType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ProductGroupPromotionCreateRequestElement)obj);
        }

        /// <summary>
        /// Returns true if ProductGroupPromotionCreateRequestElement instances are equal
        /// </summary>
        /// <param name="other">Instance of ProductGroupPromotionCreateRequestElement to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProductGroupPromotionCreateRequestElement other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    AdGroupId == other.AdGroupId ||
                    AdGroupId != null &&
                    AdGroupId.Equals(other.AdGroupId)
                ) && 
                (
                    BidInMicroCurrency == other.BidInMicroCurrency ||
                    BidInMicroCurrency != null &&
                    BidInMicroCurrency.Equals(other.BidInMicroCurrency)
                ) && 
                (
                    Included == other.Included ||
                    Included != null &&
                    Included.Equals(other.Included)
                ) && 
                (
                    Definition == other.Definition ||
                    Definition != null &&
                    Definition.Equals(other.Definition)
                ) && 
                (
                    RelativeDefinition == other.RelativeDefinition ||
                    RelativeDefinition != null &&
                    RelativeDefinition.Equals(other.RelativeDefinition)
                ) && 
                (
                    ParentId == other.ParentId ||
                    ParentId != null &&
                    ParentId.Equals(other.ParentId)
                ) && 
                (
                    SlideshowCollectionsTitle == other.SlideshowCollectionsTitle ||
                    SlideshowCollectionsTitle != null &&
                    SlideshowCollectionsTitle.Equals(other.SlideshowCollectionsTitle)
                ) && 
                (
                    SlideshowCollectionsDescription == other.SlideshowCollectionsDescription ||
                    SlideshowCollectionsDescription != null &&
                    SlideshowCollectionsDescription.Equals(other.SlideshowCollectionsDescription)
                ) && 
                (
                    IsMdl == other.IsMdl ||
                    IsMdl != null &&
                    IsMdl.Equals(other.IsMdl)
                ) && 
                (
                    Status == other.Status ||
                    
                    Status.Equals(other.Status)
                ) && 
                (
                    TrackingUrl == other.TrackingUrl ||
                    TrackingUrl != null &&
                    TrackingUrl.Equals(other.TrackingUrl)
                ) && 
                (
                    CatalogProductGroupId == other.CatalogProductGroupId ||
                    CatalogProductGroupId != null &&
                    CatalogProductGroupId.Equals(other.CatalogProductGroupId)
                ) && 
                (
                    CatalogProductGroupName == other.CatalogProductGroupName ||
                    CatalogProductGroupName != null &&
                    CatalogProductGroupName.Equals(other.CatalogProductGroupName)
                ) && 
                (
                    CollectionsHeroPinId == other.CollectionsHeroPinId ||
                    CollectionsHeroPinId != null &&
                    CollectionsHeroPinId.Equals(other.CollectionsHeroPinId)
                ) && 
                (
                    CollectionsHeroDestinationUrl == other.CollectionsHeroDestinationUrl ||
                    CollectionsHeroDestinationUrl != null &&
                    CollectionsHeroDestinationUrl.Equals(other.CollectionsHeroDestinationUrl)
                ) && 
                (
                    GridClickType == other.GridClickType ||
                    
                    GridClickType.Equals(other.GridClickType)
                ) && 
                (
                    CreativeType == other.CreativeType ||
                    
                    CreativeType.Equals(other.CreativeType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (AdGroupId != null)
                    hashCode = hashCode * 59 + AdGroupId.GetHashCode();
                    if (BidInMicroCurrency != null)
                    hashCode = hashCode * 59 + BidInMicroCurrency.GetHashCode();
                    if (Included != null)
                    hashCode = hashCode * 59 + Included.GetHashCode();
                    if (Definition != null)
                    hashCode = hashCode * 59 + Definition.GetHashCode();
                    if (RelativeDefinition != null)
                    hashCode = hashCode * 59 + RelativeDefinition.GetHashCode();
                    if (ParentId != null)
                    hashCode = hashCode * 59 + ParentId.GetHashCode();
                    if (SlideshowCollectionsTitle != null)
                    hashCode = hashCode * 59 + SlideshowCollectionsTitle.GetHashCode();
                    if (SlideshowCollectionsDescription != null)
                    hashCode = hashCode * 59 + SlideshowCollectionsDescription.GetHashCode();
                    if (IsMdl != null)
                    hashCode = hashCode * 59 + IsMdl.GetHashCode();
                    
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    if (TrackingUrl != null)
                    hashCode = hashCode * 59 + TrackingUrl.GetHashCode();
                    if (CatalogProductGroupId != null)
                    hashCode = hashCode * 59 + CatalogProductGroupId.GetHashCode();
                    if (CatalogProductGroupName != null)
                    hashCode = hashCode * 59 + CatalogProductGroupName.GetHashCode();
                    if (CollectionsHeroPinId != null)
                    hashCode = hashCode * 59 + CollectionsHeroPinId.GetHashCode();
                    if (CollectionsHeroDestinationUrl != null)
                    hashCode = hashCode * 59 + CollectionsHeroDestinationUrl.GetHashCode();
                    
                    hashCode = hashCode * 59 + GridClickType.GetHashCode();
                    
                    hashCode = hashCode * 59 + CreativeType.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ProductGroupPromotionCreateRequestElement left, ProductGroupPromotionCreateRequestElement right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ProductGroupPromotionCreateRequestElement left, ProductGroupPromotionCreateRequestElement right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
