/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// Media upload that has been registered but not uploaded/processed yet.
    /// </summary>
    [DataContract]
    public partial class MediaUpload : IEquatable<MediaUpload>
    {
        /// <summary>
        /// Unique identifier for this media upload. Used to track status and for attaching during Pin creation.
        /// </summary>
        /// <value>Unique identifier for this media upload. Used to track status and for attaching during Pin creation.</value>
        [DataMember(Name="media_id", EmitDefaultValue=false)]
        public string MediaId { get; set; }

        /// <summary>
        /// Gets or Sets MediaType
        /// </summary>
        [DataMember(Name="media_type", EmitDefaultValue=true)]
        public MediaUploadType MediaType { get; set; }

        /// <summary>
        /// The URL where you will POST your media file.
        /// </summary>
        /// <value>The URL where you will POST your media file.</value>
        /* <example>https://pinterest-media-upload.s3-accelerate.amazonaws.com/</example> */
        [DataMember(Name="upload_url", EmitDefaultValue=false)]
        public string UploadUrl { get; set; }

        /// <summary>
        /// Gets or Sets UploadParameters
        /// </summary>
        [DataMember(Name="upload_parameters", EmitDefaultValue=false)]
        public MediaUploadAllOfUploadParameters UploadParameters { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MediaUpload {\n");
            sb.Append("  MediaId: ").Append(MediaId).Append("\n");
            sb.Append("  MediaType: ").Append(MediaType).Append("\n");
            sb.Append("  UploadUrl: ").Append(UploadUrl).Append("\n");
            sb.Append("  UploadParameters: ").Append(UploadParameters).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((MediaUpload)obj);
        }

        /// <summary>
        /// Returns true if MediaUpload instances are equal
        /// </summary>
        /// <param name="other">Instance of MediaUpload to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MediaUpload other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    MediaId == other.MediaId ||
                    MediaId != null &&
                    MediaId.Equals(other.MediaId)
                ) && 
                (
                    MediaType == other.MediaType ||
                    
                    MediaType.Equals(other.MediaType)
                ) && 
                (
                    UploadUrl == other.UploadUrl ||
                    UploadUrl != null &&
                    UploadUrl.Equals(other.UploadUrl)
                ) && 
                (
                    UploadParameters == other.UploadParameters ||
                    UploadParameters != null &&
                    UploadParameters.Equals(other.UploadParameters)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (MediaId != null)
                    hashCode = hashCode * 59 + MediaId.GetHashCode();
                    
                    hashCode = hashCode * 59 + MediaType.GetHashCode();
                    if (UploadUrl != null)
                    hashCode = hashCode * 59 + UploadUrl.GetHashCode();
                    if (UploadParameters != null)
                    hashCode = hashCode * 59 + UploadParameters.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(MediaUpload left, MediaUpload right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(MediaUpload left, MediaUpload right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
