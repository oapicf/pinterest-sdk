/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// Pin fields for updates
    /// </summary>
    [DataContract]
    public partial class PinUpdate : IEquatable<PinUpdate>
    {
        /// <summary>
        /// Pin&#39;s alternative text.
        /// </summary>
        /// <value>Pin&#39;s alternative text.</value>
        [MaxLength(500)]
        [DataMember(Name="alt_text", EmitDefaultValue=true)]
        public string AltText { get; set; }

        /// <summary>
        /// The id of the board to move the Pin onto.
        /// </summary>
        /// <value>The id of the board to move the Pin onto.</value>
        [RegularExpression("^\\d+$")]
        [DataMember(Name="board_id", EmitDefaultValue=true)]
        public string BoardId { get; set; }

        /// <summary>
        /// &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/article/create-a-board-section\&quot;&gt;Board section&lt;/a&gt; ID.
        /// </summary>
        /// <value>&lt;a href&#x3D;\&quot;https://help.pinterest.com/en/article/create-a-board-section\&quot;&gt;Board section&lt;/a&gt; ID.</value>
        [RegularExpression("^\\d+$")]
        [DataMember(Name="board_section_id", EmitDefaultValue=true)]
        public string BoardSectionId { get; set; }

        /// <summary>
        /// Pin description - 800 characters maximum.
        /// </summary>
        /// <value>Pin description - 800 characters maximum.</value>
        [MaxLength(800)]
        [DataMember(Name="description", EmitDefaultValue=true)]
        public string Description { get; set; }

        /// <summary>
        /// URL viewer is taken to when they click pin.
        /// </summary>
        /// <value>URL viewer is taken to when they click pin.</value>
        /* <example>https://www.pinterest.com/</example> */
        [MaxLength(2048)]
        [DataMember(Name="link", EmitDefaultValue=true)]
        public string Link { get; set; }

        /// <summary>
        /// The native pin title that creators explicitly prefer to display.
        /// </summary>
        /// <value>The native pin title that creators explicitly prefer to display.</value>
        [MaxLength(100)]
        [DataMember(Name="title", EmitDefaultValue=true)]
        public string Title { get; set; }

        /// <summary>
        /// Carousel Pin slots data.
        /// </summary>
        /// <value>Carousel Pin slots data.</value>
        [DataMember(Name="carousel_slots", EmitDefaultValue=false)]
        public List<PinUpdateCarouselSlotsInner> CarouselSlots { get; set; }

        /// <summary>
        /// Private note for this Pin. &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/article/add-notes-to-your-pins\&quot;&gt;Learn more&lt;/a&gt;.
        /// </summary>
        /// <value>Private note for this Pin. &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/article/add-notes-to-your-pins\&quot;&gt;Learn more&lt;/a&gt;.</value>
        [DataMember(Name="note", EmitDefaultValue=true)]
        public string Note { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PinUpdate {\n");
            sb.Append("  AltText: ").Append(AltText).Append("\n");
            sb.Append("  BoardId: ").Append(BoardId).Append("\n");
            sb.Append("  BoardSectionId: ").Append(BoardSectionId).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Link: ").Append(Link).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  CarouselSlots: ").Append(CarouselSlots).Append("\n");
            sb.Append("  Note: ").Append(Note).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PinUpdate)obj);
        }

        /// <summary>
        /// Returns true if PinUpdate instances are equal
        /// </summary>
        /// <param name="other">Instance of PinUpdate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PinUpdate other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    AltText == other.AltText ||
                    AltText != null &&
                    AltText.Equals(other.AltText)
                ) && 
                (
                    BoardId == other.BoardId ||
                    BoardId != null &&
                    BoardId.Equals(other.BoardId)
                ) && 
                (
                    BoardSectionId == other.BoardSectionId ||
                    BoardSectionId != null &&
                    BoardSectionId.Equals(other.BoardSectionId)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    Link == other.Link ||
                    Link != null &&
                    Link.Equals(other.Link)
                ) && 
                (
                    Title == other.Title ||
                    Title != null &&
                    Title.Equals(other.Title)
                ) && 
                (
                    CarouselSlots == other.CarouselSlots ||
                    CarouselSlots != null &&
                    other.CarouselSlots != null &&
                    CarouselSlots.SequenceEqual(other.CarouselSlots)
                ) && 
                (
                    Note == other.Note ||
                    Note != null &&
                    Note.Equals(other.Note)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (AltText != null)
                    hashCode = hashCode * 59 + AltText.GetHashCode();
                    if (BoardId != null)
                    hashCode = hashCode * 59 + BoardId.GetHashCode();
                    if (BoardSectionId != null)
                    hashCode = hashCode * 59 + BoardSectionId.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (Link != null)
                    hashCode = hashCode * 59 + Link.GetHashCode();
                    if (Title != null)
                    hashCode = hashCode * 59 + Title.GetHashCode();
                    if (CarouselSlots != null)
                    hashCode = hashCode * 59 + CarouselSlots.GetHashCode();
                    if (Note != null)
                    hashCode = hashCode * 59 + Note.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(PinUpdate left, PinUpdate right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PinUpdate left, PinUpdate right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
