/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class CustomerListRequest : IEquatable<CustomerListRequest>
    {
        /// <summary>
        /// Customer list name.
        /// </summary>
        /// <value>Customer list name.</value>
        /* <example>The Glengarry Glen Ross leads</example> */
        [Required]
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Records list. Can be any combination of emails, MAIDs, or IDFAs. Emails must be lowercase and can be plain text or hashed using SHA1, SHA256, or MD5. MAIDs and IDFAs must be hashed with SHA1, SHA256, or MD5.
        /// </summary>
        /// <value>Records list. Can be any combination of emails, MAIDs, or IDFAs. Emails must be lowercase and can be plain text or hashed using SHA1, SHA256, or MD5. MAIDs and IDFAs must be hashed with SHA1, SHA256, or MD5.</value>
        /* <example>email1@pinterest.com,email2@pinterest.com,..&lt;more records&gt;</example> */
        [Required]
        [DataMember(Name="records", EmitDefaultValue=false)]
        public string Records { get; set; }

        /// <summary>
        /// Gets or Sets ListType
        /// </summary>
        [DataMember(Name="list_type", EmitDefaultValue=true)]
        public UserListType ListType { get; set; } = "EMAIL";

        /// <summary>
        /// Customer list errors.
        /// </summary>
        /// <value>Customer list errors.</value>
        [DataMember(Name="exceptions", EmitDefaultValue=false)]
        public Object Exceptions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CustomerListRequest {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Records: ").Append(Records).Append("\n");
            sb.Append("  ListType: ").Append(ListType).Append("\n");
            sb.Append("  Exceptions: ").Append(Exceptions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CustomerListRequest)obj);
        }

        /// <summary>
        /// Returns true if CustomerListRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of CustomerListRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomerListRequest other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Records == other.Records ||
                    Records != null &&
                    Records.Equals(other.Records)
                ) && 
                (
                    ListType == other.ListType ||
                    
                    ListType.Equals(other.ListType)
                ) && 
                (
                    Exceptions == other.Exceptions ||
                    Exceptions != null &&
                    Exceptions.Equals(other.Exceptions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Records != null)
                    hashCode = hashCode * 59 + Records.GetHashCode();
                    
                    hashCode = hashCode * 59 + ListType.GetHashCode();
                    if (Exceptions != null)
                    hashCode = hashCode * 59 + Exceptions.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(CustomerListRequest left, CustomerListRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CustomerListRequest left, CustomerListRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
