/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ConversionEventsDataInner : IEquatable<ConversionEventsDataInner>
    {
        /// <summary>
        /// &lt;p&gt;The type of the user event. Please use the right event_name otherwise the event won&#39;t be accepted and show up correctly in reports.   &lt;ul&gt;   &lt;li&gt;&lt;code&gt;add_to_cart&lt;/code&gt;&lt;/li&gt;   &lt;li&gt;&lt;code&gt;checkout&lt;/code&gt;&lt;/li&gt;   &lt;li&gt;&lt;code&gt;custom&lt;/code&gt;&lt;/li&gt;   &lt;li&gt;&lt;code&gt;lead&lt;/code&gt;&lt;/li&gt;   &lt;li&gt;&lt;code&gt;page_visit&lt;/code&gt;&lt;/li&gt;   &lt;li&gt;&lt;code&gt;search&lt;/code&gt;&lt;/li&gt;   &lt;li&gt;&lt;code&gt;signup&lt;/code&gt;&lt;/li&gt;   &lt;li&gt;&lt;code&gt;view_category&lt;/code&gt;&lt;/li&gt;   &lt;li&gt;&lt;code&gt;watch_video&lt;/code&gt;&lt;/li&gt;   &lt;/ul&gt; &lt;/p&gt; 
        /// </summary>
        /// <value>&lt;p&gt;The type of the user event. Please use the right event_name otherwise the event won&#39;t be accepted and show up correctly in reports.   &lt;ul&gt;   &lt;li&gt;&lt;code&gt;add_to_cart&lt;/code&gt;&lt;/li&gt;   &lt;li&gt;&lt;code&gt;checkout&lt;/code&gt;&lt;/li&gt;   &lt;li&gt;&lt;code&gt;custom&lt;/code&gt;&lt;/li&gt;   &lt;li&gt;&lt;code&gt;lead&lt;/code&gt;&lt;/li&gt;   &lt;li&gt;&lt;code&gt;page_visit&lt;/code&gt;&lt;/li&gt;   &lt;li&gt;&lt;code&gt;search&lt;/code&gt;&lt;/li&gt;   &lt;li&gt;&lt;code&gt;signup&lt;/code&gt;&lt;/li&gt;   &lt;li&gt;&lt;code&gt;view_category&lt;/code&gt;&lt;/li&gt;   &lt;li&gt;&lt;code&gt;watch_video&lt;/code&gt;&lt;/li&gt;   &lt;/ul&gt; &lt;/p&gt; </value>
        /* <example>checkout</example> */
        [Required]
        [DataMember(Name="event_name", EmitDefaultValue=false)]
        public string EventName { get; set; }

        /// <summary>
        /// &lt;p&gt;   The source indicating where the conversion event occurred.   &lt;ul&gt;     &lt;li&gt;&lt;code&gt;app_android&lt;/code&gt;&lt;/li&gt;     &lt;li&gt;&lt;code&gt;app_ios&lt;/code&gt;&lt;/li&gt;     &lt;li&gt;&lt;code&gt;web&lt;/code&gt;&lt;/li&gt;     &lt;li&gt;&lt;code&gt;offline&lt;/code&gt;&lt;/li&gt;   &lt;/ul&gt; &lt;/p&gt; 
        /// </summary>
        /// <value>&lt;p&gt;   The source indicating where the conversion event occurred.   &lt;ul&gt;     &lt;li&gt;&lt;code&gt;app_android&lt;/code&gt;&lt;/li&gt;     &lt;li&gt;&lt;code&gt;app_ios&lt;/code&gt;&lt;/li&gt;     &lt;li&gt;&lt;code&gt;web&lt;/code&gt;&lt;/li&gt;     &lt;li&gt;&lt;code&gt;offline&lt;/code&gt;&lt;/li&gt;   &lt;/ul&gt; &lt;/p&gt; </value>
        /* <example>app_ios</example> */
        [Required]
        [DataMember(Name="action_source", EmitDefaultValue=false)]
        public string ActionSource { get; set; }

        /// <summary>
        /// The time when the event happened. Unix timestamp in seconds.
        /// </summary>
        /// <value>The time when the event happened. Unix timestamp in seconds.</value>
        /* <example>1451431341</example> */
        [Required]
        [DataMember(Name="event_time", EmitDefaultValue=true)]
        public long EventTime { get; set; }

        /// <summary>
        /// A unique id string that identifies this event and can be used for deduping between events ingested via both the conversion API and Pinterest tracking. Without this, event&#39;s data is likely to be double counted and will cause report metric inflation. Third-party vendors make sure this field is updated on both Pinterest tag and Conversions API side before rolling out template for Conversions API.
        /// </summary>
        /// <value>A unique id string that identifies this event and can be used for deduping between events ingested via both the conversion API and Pinterest tracking. Without this, event&#39;s data is likely to be double counted and will cause report metric inflation. Third-party vendors make sure this field is updated on both Pinterest tag and Conversions API side before rolling out template for Conversions API.</value>
        /* <example>eventId0001</example> */
        [Required]
        [DataMember(Name="event_id", EmitDefaultValue=false)]
        public string EventId { get; set; }

        /// <summary>
        /// URL of the web conversion event.
        /// </summary>
        /// <value>URL of the web conversion event.</value>
        /* <example>https://www.my-clothing-shop.org/</example> */
        [DataMember(Name="event_source_url", EmitDefaultValue=true)]
        public string EventSourceUrl { get; set; }

        /// <summary>
        /// When action_source is web or offline, it defines whether the user has opted out of tracking for web conversion events. While when action_source is app_android or app_ios, it defines whether the user has enabled Limit Ad Tracking on their iOS device, or opted out of Ads Personalization on their Android device.
        /// </summary>
        /// <value>When action_source is web or offline, it defines whether the user has opted out of tracking for web conversion events. While when action_source is app_android or app_ios, it defines whether the user has enabled Limit Ad Tracking on their iOS device, or opted out of Ads Personalization on their Android device.</value>
        /* <example>false</example> */
        [DataMember(Name="opt_out", EmitDefaultValue=true)]
        public bool OptOut { get; set; }

        /// <summary>
        /// The third party partner name responsible to send the event to Conversions API on behalf of the advertiser. The naming convention is \&quot;ss-partnername\&quot; lowercase. E.g ‘ss-shopify’
        /// </summary>
        /// <value>The third party partner name responsible to send the event to Conversions API on behalf of the advertiser. The naming convention is \&quot;ss-partnername\&quot; lowercase. E.g ‘ss-shopify’</value>
        /* <example>ss-partnername</example> */
        [DataMember(Name="partner_name", EmitDefaultValue=true)]
        public string PartnerName { get; set; }

        /// <summary>
        /// Gets or Sets UserData
        /// </summary>
        [Required]
        [DataMember(Name="user_data", EmitDefaultValue=false)]
        public ConversionEventsUserData UserData { get; set; }

        /// <summary>
        /// Gets or Sets CustomData
        /// </summary>
        [DataMember(Name="custom_data", EmitDefaultValue=false)]
        public ConversionEventsDataInnerCustomData CustomData { get; set; }

        /// <summary>
        /// The app store app ID.
        /// </summary>
        /// <value>The app store app ID.</value>
        /* <example>429047995</example> */
        [DataMember(Name="app_id", EmitDefaultValue=true)]
        public string AppId { get; set; }

        /// <summary>
        /// Name of the app.
        /// </summary>
        /// <value>Name of the app.</value>
        /* <example>Pinterest</example> */
        [DataMember(Name="app_name", EmitDefaultValue=true)]
        public string AppName { get; set; }

        /// <summary>
        /// Version of the app.
        /// </summary>
        /// <value>Version of the app.</value>
        /* <example>7.9</example> */
        [DataMember(Name="app_version", EmitDefaultValue=true)]
        public string AppVersion { get; set; }

        /// <summary>
        /// Brand of the user device.
        /// </summary>
        /// <value>Brand of the user device.</value>
        /* <example>Apple</example> */
        [DataMember(Name="device_brand", EmitDefaultValue=true)]
        public string DeviceBrand { get; set; }

        /// <summary>
        /// User device&#39;s mobile carrier.
        /// </summary>
        /// <value>User device&#39;s mobile carrier.</value>
        /* <example>T-Mobile</example> */
        [DataMember(Name="device_carrier", EmitDefaultValue=true)]
        public string DeviceCarrier { get; set; }

        /// <summary>
        /// Model of the user device.
        /// </summary>
        /// <value>Model of the user device.</value>
        /* <example>iPhone X</example> */
        [DataMember(Name="device_model", EmitDefaultValue=true)]
        public string DeviceModel { get; set; }

        /// <summary>
        /// Type of the user device.
        /// </summary>
        /// <value>Type of the user device.</value>
        /* <example>iPhone</example> */
        [DataMember(Name="device_type", EmitDefaultValue=true)]
        public string DeviceType { get; set; }

        /// <summary>
        /// Version of the device operating system.
        /// </summary>
        /// <value>Version of the device operating system.</value>
        /* <example>12.1.4</example> */
        [DataMember(Name="os_version", EmitDefaultValue=true)]
        public string OsVersion { get; set; }

        /// <summary>
        /// Whether the event occurred when the user device was connected to wifi.
        /// </summary>
        /// <value>Whether the event occurred when the user device was connected to wifi.</value>
        /* <example>false</example> */
        [DataMember(Name="wifi", EmitDefaultValue=true)]
        public bool Wifi { get; set; }

        /// <summary>
        /// Two-character ISO-639-1 language code indicating the user&#39;s language.
        /// </summary>
        /// <value>Two-character ISO-639-1 language code indicating the user&#39;s language.</value>
        /* <example>en</example> */
        [DataMember(Name="language", EmitDefaultValue=true)]
        public string Language { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ConversionEventsDataInner {\n");
            sb.Append("  EventName: ").Append(EventName).Append("\n");
            sb.Append("  ActionSource: ").Append(ActionSource).Append("\n");
            sb.Append("  EventTime: ").Append(EventTime).Append("\n");
            sb.Append("  EventId: ").Append(EventId).Append("\n");
            sb.Append("  EventSourceUrl: ").Append(EventSourceUrl).Append("\n");
            sb.Append("  OptOut: ").Append(OptOut).Append("\n");
            sb.Append("  PartnerName: ").Append(PartnerName).Append("\n");
            sb.Append("  UserData: ").Append(UserData).Append("\n");
            sb.Append("  CustomData: ").Append(CustomData).Append("\n");
            sb.Append("  AppId: ").Append(AppId).Append("\n");
            sb.Append("  AppName: ").Append(AppName).Append("\n");
            sb.Append("  AppVersion: ").Append(AppVersion).Append("\n");
            sb.Append("  DeviceBrand: ").Append(DeviceBrand).Append("\n");
            sb.Append("  DeviceCarrier: ").Append(DeviceCarrier).Append("\n");
            sb.Append("  DeviceModel: ").Append(DeviceModel).Append("\n");
            sb.Append("  DeviceType: ").Append(DeviceType).Append("\n");
            sb.Append("  OsVersion: ").Append(OsVersion).Append("\n");
            sb.Append("  Wifi: ").Append(Wifi).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ConversionEventsDataInner)obj);
        }

        /// <summary>
        /// Returns true if ConversionEventsDataInner instances are equal
        /// </summary>
        /// <param name="other">Instance of ConversionEventsDataInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConversionEventsDataInner other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    EventName == other.EventName ||
                    EventName != null &&
                    EventName.Equals(other.EventName)
                ) && 
                (
                    ActionSource == other.ActionSource ||
                    ActionSource != null &&
                    ActionSource.Equals(other.ActionSource)
                ) && 
                (
                    EventTime == other.EventTime ||
                    
                    EventTime.Equals(other.EventTime)
                ) && 
                (
                    EventId == other.EventId ||
                    EventId != null &&
                    EventId.Equals(other.EventId)
                ) && 
                (
                    EventSourceUrl == other.EventSourceUrl ||
                    EventSourceUrl != null &&
                    EventSourceUrl.Equals(other.EventSourceUrl)
                ) && 
                (
                    OptOut == other.OptOut ||
                    
                    OptOut.Equals(other.OptOut)
                ) && 
                (
                    PartnerName == other.PartnerName ||
                    PartnerName != null &&
                    PartnerName.Equals(other.PartnerName)
                ) && 
                (
                    UserData == other.UserData ||
                    UserData != null &&
                    UserData.Equals(other.UserData)
                ) && 
                (
                    CustomData == other.CustomData ||
                    CustomData != null &&
                    CustomData.Equals(other.CustomData)
                ) && 
                (
                    AppId == other.AppId ||
                    AppId != null &&
                    AppId.Equals(other.AppId)
                ) && 
                (
                    AppName == other.AppName ||
                    AppName != null &&
                    AppName.Equals(other.AppName)
                ) && 
                (
                    AppVersion == other.AppVersion ||
                    AppVersion != null &&
                    AppVersion.Equals(other.AppVersion)
                ) && 
                (
                    DeviceBrand == other.DeviceBrand ||
                    DeviceBrand != null &&
                    DeviceBrand.Equals(other.DeviceBrand)
                ) && 
                (
                    DeviceCarrier == other.DeviceCarrier ||
                    DeviceCarrier != null &&
                    DeviceCarrier.Equals(other.DeviceCarrier)
                ) && 
                (
                    DeviceModel == other.DeviceModel ||
                    DeviceModel != null &&
                    DeviceModel.Equals(other.DeviceModel)
                ) && 
                (
                    DeviceType == other.DeviceType ||
                    DeviceType != null &&
                    DeviceType.Equals(other.DeviceType)
                ) && 
                (
                    OsVersion == other.OsVersion ||
                    OsVersion != null &&
                    OsVersion.Equals(other.OsVersion)
                ) && 
                (
                    Wifi == other.Wifi ||
                    
                    Wifi.Equals(other.Wifi)
                ) && 
                (
                    Language == other.Language ||
                    Language != null &&
                    Language.Equals(other.Language)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (EventName != null)
                    hashCode = hashCode * 59 + EventName.GetHashCode();
                    if (ActionSource != null)
                    hashCode = hashCode * 59 + ActionSource.GetHashCode();
                    
                    hashCode = hashCode * 59 + EventTime.GetHashCode();
                    if (EventId != null)
                    hashCode = hashCode * 59 + EventId.GetHashCode();
                    if (EventSourceUrl != null)
                    hashCode = hashCode * 59 + EventSourceUrl.GetHashCode();
                    
                    hashCode = hashCode * 59 + OptOut.GetHashCode();
                    if (PartnerName != null)
                    hashCode = hashCode * 59 + PartnerName.GetHashCode();
                    if (UserData != null)
                    hashCode = hashCode * 59 + UserData.GetHashCode();
                    if (CustomData != null)
                    hashCode = hashCode * 59 + CustomData.GetHashCode();
                    if (AppId != null)
                    hashCode = hashCode * 59 + AppId.GetHashCode();
                    if (AppName != null)
                    hashCode = hashCode * 59 + AppName.GetHashCode();
                    if (AppVersion != null)
                    hashCode = hashCode * 59 + AppVersion.GetHashCode();
                    if (DeviceBrand != null)
                    hashCode = hashCode * 59 + DeviceBrand.GetHashCode();
                    if (DeviceCarrier != null)
                    hashCode = hashCode * 59 + DeviceCarrier.GetHashCode();
                    if (DeviceModel != null)
                    hashCode = hashCode * 59 + DeviceModel.GetHashCode();
                    if (DeviceType != null)
                    hashCode = hashCode * 59 + DeviceType.GetHashCode();
                    if (OsVersion != null)
                    hashCode = hashCode * 59 + OsVersion.GetHashCode();
                    
                    hashCode = hashCode * 59 + Wifi.GetHashCode();
                    if (Language != null)
                    hashCode = hashCode * 59 + Language.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ConversionEventsDataInner left, ConversionEventsDataInner right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ConversionEventsDataInner left, ConversionEventsDataInner right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
