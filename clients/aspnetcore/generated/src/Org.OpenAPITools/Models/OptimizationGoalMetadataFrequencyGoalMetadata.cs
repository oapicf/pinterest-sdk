/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class OptimizationGoalMetadataFrequencyGoalMetadata : IEquatable<OptimizationGoalMetadataFrequencyGoalMetadata>
    {
        /// <summary>
        /// Gets or Sets Frequency
        /// </summary>
        [DataMember(Name="frequency", EmitDefaultValue=true)]
        public int Frequency { get; set; }


        /// <summary>
        /// User entity counts time range
        /// </summary>
        /// <value>User entity counts time range</value>
        [TypeConverter(typeof(CustomEnumConverter<TimerangeEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum TimerangeEnum
        {
            
            /// <summary>
            /// Enum THIRTYDAYEnum for THIRTY_DAY
            /// </summary>
            [EnumMember(Value = "THIRTY_DAY")]
            THIRTYDAYEnum = 1,
            
            /// <summary>
            /// Enum DAYEnum for DAY
            /// </summary>
            [EnumMember(Value = "DAY")]
            DAYEnum = 2,
            
            /// <summary>
            /// Enum SEVENDAYEnum for SEVEN_DAY
            /// </summary>
            [EnumMember(Value = "SEVEN_DAY")]
            SEVENDAYEnum = 3,
            
            /// <summary>
            /// Enum TWENTYMINUTEEnum for TWENTY_MINUTE
            /// </summary>
            [EnumMember(Value = "TWENTY_MINUTE")]
            TWENTYMINUTEEnum = 4,
            
            /// <summary>
            /// Enum TENMINUTEEnum for TEN_MINUTE
            /// </summary>
            [EnumMember(Value = "TEN_MINUTE")]
            TENMINUTEEnum = 5,
            
            /// <summary>
            /// Enum TWENTYFOURHOUREnum for TWENTY_FOUR_HOUR
            /// </summary>
            [EnumMember(Value = "TWENTY_FOUR_HOUR")]
            TWENTYFOURHOUREnum = 6
        }

        /// <summary>
        /// User entity counts time range
        /// </summary>
        /// <value>User entity counts time range</value>
        /* <example>DAY</example> */
        [DataMember(Name="timerange", EmitDefaultValue=true)]
        public TimerangeEnum Timerange { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OptimizationGoalMetadataFrequencyGoalMetadata {\n");
            sb.Append("  Frequency: ").Append(Frequency).Append("\n");
            sb.Append("  Timerange: ").Append(Timerange).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((OptimizationGoalMetadataFrequencyGoalMetadata)obj);
        }

        /// <summary>
        /// Returns true if OptimizationGoalMetadataFrequencyGoalMetadata instances are equal
        /// </summary>
        /// <param name="other">Instance of OptimizationGoalMetadataFrequencyGoalMetadata to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OptimizationGoalMetadataFrequencyGoalMetadata other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Frequency == other.Frequency ||
                    
                    Frequency.Equals(other.Frequency)
                ) && 
                (
                    Timerange == other.Timerange ||
                    
                    Timerange.Equals(other.Timerange)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + Frequency.GetHashCode();
                    
                    hashCode = hashCode * 59 + Timerange.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(OptimizationGoalMetadataFrequencyGoalMetadata left, OptimizationGoalMetadataFrequencyGoalMetadata right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(OptimizationGoalMetadataFrequencyGoalMetadata left, OptimizationGoalMetadataFrequencyGoalMetadata right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
