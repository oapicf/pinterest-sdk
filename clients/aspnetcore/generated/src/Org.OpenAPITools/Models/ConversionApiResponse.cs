/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// Schema describing the object in the response, which contains information about the events that were received and processed.
    /// </summary>
    [DataContract]
    public partial class ConversionApiResponse : IEquatable<ConversionApiResponse>
    {
        /// <summary>
        /// Total number of events received in the request.
        /// </summary>
        /// <value>Total number of events received in the request.</value>
        [Required]
        [DataMember(Name="num_events_received", EmitDefaultValue=true)]
        public int NumEventsReceived { get; set; }

        /// <summary>
        /// Number of events that were successfully processed from the events.
        /// </summary>
        /// <value>Number of events that were successfully processed from the events.</value>
        [Required]
        [DataMember(Name="num_events_processed", EmitDefaultValue=true)]
        public int NumEventsProcessed { get; set; }

        /// <summary>
        /// Specific messages for each event received. The order will match the order in which the events were received in the request.
        /// </summary>
        /// <value>Specific messages for each event received. The order will match the order in which the events were received in the request.</value>
        [Required]
        [DataMember(Name="events", EmitDefaultValue=false)]
        public List<ConversionApiResponseEventsInner> Events { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ConversionApiResponse {\n");
            sb.Append("  NumEventsReceived: ").Append(NumEventsReceived).Append("\n");
            sb.Append("  NumEventsProcessed: ").Append(NumEventsProcessed).Append("\n");
            sb.Append("  Events: ").Append(Events).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ConversionApiResponse)obj);
        }

        /// <summary>
        /// Returns true if ConversionApiResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of ConversionApiResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConversionApiResponse other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    NumEventsReceived == other.NumEventsReceived ||
                    
                    NumEventsReceived.Equals(other.NumEventsReceived)
                ) && 
                (
                    NumEventsProcessed == other.NumEventsProcessed ||
                    
                    NumEventsProcessed.Equals(other.NumEventsProcessed)
                ) && 
                (
                    Events == other.Events ||
                    Events != null &&
                    other.Events != null &&
                    Events.SequenceEqual(other.Events)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + NumEventsReceived.GetHashCode();
                    
                    hashCode = hashCode * 59 + NumEventsProcessed.GetHashCode();
                    if (Events != null)
                    hashCode = hashCode * 59 + Events.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ConversionApiResponse left, ConversionApiResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ConversionApiResponse left, ConversionApiResponse right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
