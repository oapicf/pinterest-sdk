/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class BillingProfilesResponse : IEquatable<BillingProfilesResponse>
    {
        /// <summary>
        /// Billing ID.
        /// </summary>
        /// <value>Billing ID.</value>
        /* <example>12312451231</example> */
        [RegularExpression("^\\d+$")]
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }


        /// <summary>
        /// Type of the card.
        /// </summary>
        /// <value>Type of the card.</value>
        [TypeConverter(typeof(CustomEnumConverter<CardTypeEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum CardTypeEnum
        {
            
            /// <summary>
            /// Enum UNKNOWNEnum for UNKNOWN
            /// </summary>
            [EnumMember(Value = "UNKNOWN")]
            UNKNOWNEnum = 1,
            
            /// <summary>
            /// Enum VISAEnum for VISA
            /// </summary>
            [EnumMember(Value = "VISA")]
            VISAEnum = 2,
            
            /// <summary>
            /// Enum MASTERCARDEnum for MASTERCARD
            /// </summary>
            [EnumMember(Value = "MASTERCARD")]
            MASTERCARDEnum = 3,
            
            /// <summary>
            /// Enum AMERICANEXPRESSEnum for AMERICAN_EXPRESS
            /// </summary>
            [EnumMember(Value = "AMERICAN_EXPRESS")]
            AMERICANEXPRESSEnum = 4,
            
            /// <summary>
            /// Enum DISCOVEREnum for DISCOVER
            /// </summary>
            [EnumMember(Value = "DISCOVER")]
            DISCOVEREnum = 5,
            
            /// <summary>
            /// Enum ELOEnum for ELO
            /// </summary>
            [EnumMember(Value = "ELO")]
            ELOEnum = 6
        }

        /// <summary>
        /// Type of the card.
        /// </summary>
        /// <value>Type of the card.</value>
        /* <example>VISA</example> */
        [DataMember(Name="card_type", EmitDefaultValue=true)]
        public CardTypeEnum CardType { get; set; }


        /// <summary>
        /// Status of the billing.
        /// </summary>
        /// <value>Status of the billing.</value>
        [TypeConverter(typeof(CustomEnumConverter<StatusEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum UNSPECIFIEDEnum for UNSPECIFIED
            /// </summary>
            [EnumMember(Value = "UNSPECIFIED")]
            UNSPECIFIEDEnum = 1,
            
            /// <summary>
            /// Enum VALIDEnum for VALID
            /// </summary>
            [EnumMember(Value = "VALID")]
            VALIDEnum = 2,
            
            /// <summary>
            /// Enum INVALIDEnum for INVALID
            /// </summary>
            [EnumMember(Value = "INVALID")]
            INVALIDEnum = 3,
            
            /// <summary>
            /// Enum PENDINGEnum for PENDING
            /// </summary>
            [EnumMember(Value = "PENDING")]
            PENDINGEnum = 4,
            
            /// <summary>
            /// Enum DELETEDEnum for DELETED
            /// </summary>
            [EnumMember(Value = "DELETED")]
            DELETEDEnum = 5,
            
            /// <summary>
            /// Enum SECONDARYEnum for SECONDARY
            /// </summary>
            [EnumMember(Value = "SECONDARY")]
            SECONDARYEnum = 6,
            
            /// <summary>
            /// Enum PENDINGSECONDARYEnum for PENDING_SECONDARY
            /// </summary>
            [EnumMember(Value = "PENDING_SECONDARY")]
            PENDINGSECONDARYEnum = 7
        }

        /// <summary>
        /// Status of the billing.
        /// </summary>
        /// <value>Status of the billing.</value>
        /* <example>INVALID</example> */
        [DataMember(Name="status", EmitDefaultValue=true)]
        public StatusEnum Status { get; set; }

        /// <summary>
        /// Advertiser ID of the billing.
        /// </summary>
        /// <value>Advertiser ID of the billing.</value>
        /* <example>12312451231</example> */
        [RegularExpression("^\\d+$")]
        [DataMember(Name="advertiser_id", EmitDefaultValue=false)]
        public string AdvertiserId { get; set; }


        /// <summary>
        /// Brand of the payment method.
        /// </summary>
        /// <value>Brand of the payment method.</value>
        [TypeConverter(typeof(CustomEnumConverter<PaymentMethodBrandEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum PaymentMethodBrandEnum
        {
            
            /// <summary>
            /// Enum UNKNOWNEnum for UNKNOWN
            /// </summary>
            [EnumMember(Value = "UNKNOWN")]
            UNKNOWNEnum = 1,
            
            /// <summary>
            /// Enum VISAEnum for VISA
            /// </summary>
            [EnumMember(Value = "VISA")]
            VISAEnum = 2,
            
            /// <summary>
            /// Enum MASTERCARDEnum for MASTERCARD
            /// </summary>
            [EnumMember(Value = "MASTERCARD")]
            MASTERCARDEnum = 3,
            
            /// <summary>
            /// Enum AMERICANEXPRESSEnum for AMERICAN_EXPRESS
            /// </summary>
            [EnumMember(Value = "AMERICAN_EXPRESS")]
            AMERICANEXPRESSEnum = 4,
            
            /// <summary>
            /// Enum DISCOVEREnum for DISCOVER
            /// </summary>
            [EnumMember(Value = "DISCOVER")]
            DISCOVEREnum = 5,
            
            /// <summary>
            /// Enum SOFORTEnum for SOFORT
            /// </summary>
            [EnumMember(Value = "SOFORT")]
            SOFORTEnum = 6,
            
            /// <summary>
            /// Enum DINERSCLUBEnum for DINERS_CLUB
            /// </summary>
            [EnumMember(Value = "DINERS_CLUB")]
            DINERSCLUBEnum = 7,
            
            /// <summary>
            /// Enum ELOEnum for ELO
            /// </summary>
            [EnumMember(Value = "ELO")]
            ELOEnum = 8,
            
            /// <summary>
            /// Enum CARTEBANCAIREEnum for CARTE_BANCAIRE
            /// </summary>
            [EnumMember(Value = "CARTE_BANCAIRE")]
            CARTEBANCAIREEnum = 9
        }

        /// <summary>
        /// Brand of the payment method.
        /// </summary>
        /// <value>Brand of the payment method.</value>
        /* <example>VISA</example> */
        [DataMember(Name="payment_method_brand", EmitDefaultValue=true)]
        public PaymentMethodBrandEnum PaymentMethodBrand { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BillingProfilesResponse {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CardType: ").Append(CardType).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  AdvertiserId: ").Append(AdvertiserId).Append("\n");
            sb.Append("  PaymentMethodBrand: ").Append(PaymentMethodBrand).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((BillingProfilesResponse)obj);
        }

        /// <summary>
        /// Returns true if BillingProfilesResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of BillingProfilesResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BillingProfilesResponse other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    CardType == other.CardType ||
                    
                    CardType.Equals(other.CardType)
                ) && 
                (
                    Status == other.Status ||
                    
                    Status.Equals(other.Status)
                ) && 
                (
                    AdvertiserId == other.AdvertiserId ||
                    AdvertiserId != null &&
                    AdvertiserId.Equals(other.AdvertiserId)
                ) && 
                (
                    PaymentMethodBrand == other.PaymentMethodBrand ||
                    
                    PaymentMethodBrand.Equals(other.PaymentMethodBrand)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    
                    hashCode = hashCode * 59 + CardType.GetHashCode();
                    
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    if (AdvertiserId != null)
                    hashCode = hashCode * 59 + AdvertiserId.GetHashCode();
                    
                    hashCode = hashCode * 59 + PaymentMethodBrand.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(BillingProfilesResponse left, BillingProfilesResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(BillingProfilesResponse left, BillingProfilesResponse right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
