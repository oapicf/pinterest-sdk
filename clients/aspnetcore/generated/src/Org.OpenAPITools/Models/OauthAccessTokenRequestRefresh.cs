/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// A request to exchange a refresh token for a new access token.
    /// </summary>
    [DataContract]
    public partial class OauthAccessTokenRequestRefresh : IEquatable<OauthAccessTokenRequestRefresh>
    {

        /// <summary>
        /// Gets or Sets GrantType
        /// </summary>
        [TypeConverter(typeof(CustomEnumConverter<GrantTypeEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum GrantTypeEnum
        {
            
            /// <summary>
            /// Enum AuthorizationCodeEnum for authorization_code
            /// </summary>
            [EnumMember(Value = "authorization_code")]
            AuthorizationCodeEnum = 1,
            
            /// <summary>
            /// Enum RefreshTokenEnum for refresh_token
            /// </summary>
            [EnumMember(Value = "refresh_token")]
            RefreshTokenEnum = 2,
            
            /// <summary>
            /// Enum ClientCredentialsEnum for client_credentials
            /// </summary>
            [EnumMember(Value = "client_credentials")]
            ClientCredentialsEnum = 3
        }

        /// <summary>
        /// Gets or Sets GrantType
        /// </summary>
        [Required]
        [DataMember(Name="grant_type", EmitDefaultValue=true)]
        public GrantTypeEnum GrantType { get; set; }

        /// <summary>
        /// Gets or Sets RefreshToken
        /// </summary>
        [Required]
        [DataMember(Name="refresh_token", EmitDefaultValue=false)]
        public string RefreshToken { get; set; }

        /// <summary>
        /// Gets or Sets Scope
        /// </summary>
        [DataMember(Name="scope", EmitDefaultValue=false)]
        public string Scope { get; set; }

        /// <summary>
        /// Setting this field to &lt;code&gt;true&lt;/code&gt; will add a new refresh token to your 200 response, as well as the refresh_token_expires_in and refresh_token_expires_at fields. To see the structure of this payload, set the 200 response_type to \&quot;everlasting_refresh\&quot;.
        /// </summary>
        /// <value>Setting this field to &lt;code&gt;true&lt;/code&gt; will add a new refresh token to your 200 response, as well as the refresh_token_expires_in and refresh_token_expires_at fields. To see the structure of this payload, set the 200 response_type to \&quot;everlasting_refresh\&quot;.</value>
        [DataMember(Name="refresh_on", EmitDefaultValue=true)]
        public bool RefreshOn { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OauthAccessTokenRequestRefresh {\n");
            sb.Append("  GrantType: ").Append(GrantType).Append("\n");
            sb.Append("  RefreshToken: ").Append(RefreshToken).Append("\n");
            sb.Append("  Scope: ").Append(Scope).Append("\n");
            sb.Append("  RefreshOn: ").Append(RefreshOn).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((OauthAccessTokenRequestRefresh)obj);
        }

        /// <summary>
        /// Returns true if OauthAccessTokenRequestRefresh instances are equal
        /// </summary>
        /// <param name="other">Instance of OauthAccessTokenRequestRefresh to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OauthAccessTokenRequestRefresh other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    GrantType == other.GrantType ||
                    
                    GrantType.Equals(other.GrantType)
                ) && 
                (
                    RefreshToken == other.RefreshToken ||
                    RefreshToken != null &&
                    RefreshToken.Equals(other.RefreshToken)
                ) && 
                (
                    Scope == other.Scope ||
                    Scope != null &&
                    Scope.Equals(other.Scope)
                ) && 
                (
                    RefreshOn == other.RefreshOn ||
                    
                    RefreshOn.Equals(other.RefreshOn)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + GrantType.GetHashCode();
                    if (RefreshToken != null)
                    hashCode = hashCode * 59 + RefreshToken.GetHashCode();
                    if (Scope != null)
                    hashCode = hashCode * 59 + Scope.GetHashCode();
                    
                    hashCode = hashCode * 59 + RefreshOn.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(OauthAccessTokenRequestRefresh left, OauthAccessTokenRequestRefresh right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(OauthAccessTokenRequestRefresh left, OauthAccessTokenRequestRefresh right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
