/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class PinMediaWithImageAllOfImages : IEquatable<PinMediaWithImageAllOfImages>
    {
        /// <summary>
        /// Gets or Sets Var150x150
        /// </summary>
        [DataMember(Name="150x150", EmitDefaultValue=false)]
        public Object Var150x150 { get; set; }

        /// <summary>
        /// Gets or Sets Var400x300
        /// </summary>
        [DataMember(Name="400x300", EmitDefaultValue=false)]
        public Object Var400x300 { get; set; }

        /// <summary>
        /// Gets or Sets Var600x
        /// </summary>
        [DataMember(Name="600x", EmitDefaultValue=false)]
        public Object Var600x { get; set; }

        /// <summary>
        /// Gets or Sets Var1200x
        /// </summary>
        [DataMember(Name="1200x", EmitDefaultValue=false)]
        public Object Var1200x { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PinMediaWithImageAllOfImages {\n");
            sb.Append("  Var150x150: ").Append(Var150x150).Append("\n");
            sb.Append("  Var400x300: ").Append(Var400x300).Append("\n");
            sb.Append("  Var600x: ").Append(Var600x).Append("\n");
            sb.Append("  Var1200x: ").Append(Var1200x).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PinMediaWithImageAllOfImages)obj);
        }

        /// <summary>
        /// Returns true if PinMediaWithImageAllOfImages instances are equal
        /// </summary>
        /// <param name="other">Instance of PinMediaWithImageAllOfImages to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PinMediaWithImageAllOfImages other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Var150x150 == other.Var150x150 ||
                    Var150x150 != null &&
                    Var150x150.Equals(other.Var150x150)
                ) && 
                (
                    Var400x300 == other.Var400x300 ||
                    Var400x300 != null &&
                    Var400x300.Equals(other.Var400x300)
                ) && 
                (
                    Var600x == other.Var600x ||
                    Var600x != null &&
                    Var600x.Equals(other.Var600x)
                ) && 
                (
                    Var1200x == other.Var1200x ||
                    Var1200x != null &&
                    Var1200x.Equals(other.Var1200x)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Var150x150 != null)
                    hashCode = hashCode * 59 + Var150x150.GetHashCode();
                    if (Var400x300 != null)
                    hashCode = hashCode * 59 + Var400x300.GetHashCode();
                    if (Var600x != null)
                    hashCode = hashCode * 59 + Var600x.GetHashCode();
                    if (Var1200x != null)
                    hashCode = hashCode * 59 + Var1200x.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(PinMediaWithImageAllOfImages left, PinMediaWithImageAllOfImages right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PinMediaWithImageAllOfImages left, PinMediaWithImageAllOfImages right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
