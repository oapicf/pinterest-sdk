/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class CustomerListUpdateRequest : IEquatable<CustomerListUpdateRequest>
    {
        /// <summary>
        /// Records list. Can be any combination of emails, MAIDs, or IDFAs. Emails must be lowercase and can be plain text or hashed using SHA1, SHA256, or MD5. MAIDs and IDFAs must be hashed with SHA1, SHA256, or MD5.
        /// </summary>
        /// <value>Records list. Can be any combination of emails, MAIDs, or IDFAs. Emails must be lowercase and can be plain text or hashed using SHA1, SHA256, or MD5. MAIDs and IDFAs must be hashed with SHA1, SHA256, or MD5.</value>
        /* <example>email2@pinterest.com,email6@pinterest.com,</example> */
        [Required]
        [DataMember(Name="records", EmitDefaultValue=false)]
        public string Records { get; set; }

        /// <summary>
        /// Gets or Sets OperationType
        /// </summary>
        [Required]
        [DataMember(Name="operation_type", EmitDefaultValue=true)]
        public UserListOperationType OperationType { get; set; }

        /// <summary>
        /// Gets or Sets Exceptions
        /// </summary>
        [DataMember(Name="exceptions", EmitDefaultValue=false)]
        public Exception Exceptions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CustomerListUpdateRequest {\n");
            sb.Append("  Records: ").Append(Records).Append("\n");
            sb.Append("  OperationType: ").Append(OperationType).Append("\n");
            sb.Append("  Exceptions: ").Append(Exceptions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CustomerListUpdateRequest)obj);
        }

        /// <summary>
        /// Returns true if CustomerListUpdateRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of CustomerListUpdateRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomerListUpdateRequest other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Records == other.Records ||
                    Records != null &&
                    Records.Equals(other.Records)
                ) && 
                (
                    OperationType == other.OperationType ||
                    
                    OperationType.Equals(other.OperationType)
                ) && 
                (
                    Exceptions == other.Exceptions ||
                    Exceptions != null &&
                    Exceptions.Equals(other.Exceptions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Records != null)
                    hashCode = hashCode * 59 + Records.GetHashCode();
                    
                    hashCode = hashCode * 59 + OperationType.GetHashCode();
                    if (Exceptions != null)
                    hashCode = hashCode * 59 + Exceptions.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(CustomerListUpdateRequest left, CustomerListUpdateRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CustomerListUpdateRequest left, CustomerListUpdateRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
