/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// Catalogs Creative Asset Feed object
    /// </summary>
    [DataContract]
    public partial class CatalogsCreativeAssetsFeed : IEquatable<CatalogsCreativeAssetsFeed>
    {
        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        /* <example>2022-03-14T15:15:22Z</example> */
        [Required]
        [DataMember(Name="created_at", EmitDefaultValue=true)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [Required]
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        /* <example>2022-03-14T15:16:34Z</example> */
        [Required]
        [DataMember(Name="updated_at", EmitDefaultValue=true)]
        public DateTime UpdatedAt { get; set; }

        /// <summary>
        /// A human-friendly name associated to a given feed. This value is currently nullable due to historical reasons. It is expected to become non-nullable in the future.
        /// </summary>
        /// <value>A human-friendly name associated to a given feed. This value is currently nullable due to historical reasons. It is expected to become non-nullable in the future.</value>
        [Required]
        [DataMember(Name="name", EmitDefaultValue=true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Format
        /// </summary>
        [Required]
        [DataMember(Name="format", EmitDefaultValue=true)]
        public CatalogsFormat Format { get; set; }

        /// <summary>
        /// Gets or Sets CatalogType
        /// </summary>
        [Required]
        [DataMember(Name="catalog_type", EmitDefaultValue=true)]
        public CatalogsType CatalogType { get; set; }

        /// <summary>
        /// Gets or Sets Credentials
        /// </summary>
        [Required]
        [DataMember(Name="credentials", EmitDefaultValue=true)]
        public CatalogsFeedCredentials Credentials { get; set; }

        /// <summary>
        /// The URL where a feed is available for download. This URL is what Pinterest will use to download a feed for processing.
        /// </summary>
        /// <value>The URL where a feed is available for download. This URL is what Pinterest will use to download a feed for processing.</value>
        [Required]
        [DataMember(Name="location", EmitDefaultValue=false)]
        public string Location { get; set; }

        /// <summary>
        /// Gets or Sets PreferredProcessingSchedule
        /// </summary>
        [Required]
        [DataMember(Name="preferred_processing_schedule", EmitDefaultValue=true)]
        public CatalogsFeedProcessingSchedule PreferredProcessingSchedule { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [Required]
        [DataMember(Name="status", EmitDefaultValue=true)]
        public CatalogsStatus Status { get; set; }

        /// <summary>
        /// Gets or Sets DefaultCurrency
        /// </summary>
        [Required]
        [DataMember(Name="default_currency", EmitDefaultValue=true)]
        public NullableCurrency? DefaultCurrency { get; set; }

        /// <summary>
        /// The locale used within a feed for product descriptions.
        /// </summary>
        /// <value>The locale used within a feed for product descriptions.</value>
        /* <example>en-US</example> */
        [Required]
        [DataMember(Name="default_locale", EmitDefaultValue=false)]
        public string DefaultLocale { get; set; }

        /// <summary>
        /// Gets or Sets DefaultCountry
        /// </summary>
        [Required]
        [DataMember(Name="default_country", EmitDefaultValue=true)]
        public Country DefaultCountry { get; set; }

        /// <summary>
        /// Catalog id pertaining to the feed. If not provided, feed will use a default catalog based on type.
        /// </summary>
        /// <value>Catalog id pertaining to the feed. If not provided, feed will use a default catalog based on type.</value>
        [Required]
        [RegularExpression("^\\d+$")]
        [DataMember(Name="catalog_id", EmitDefaultValue=true)]
        public string CatalogId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CatalogsCreativeAssetsFeed {\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Format: ").Append(Format).Append("\n");
            sb.Append("  CatalogType: ").Append(CatalogType).Append("\n");
            sb.Append("  Credentials: ").Append(Credentials).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  PreferredProcessingSchedule: ").Append(PreferredProcessingSchedule).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  DefaultCurrency: ").Append(DefaultCurrency).Append("\n");
            sb.Append("  DefaultLocale: ").Append(DefaultLocale).Append("\n");
            sb.Append("  DefaultCountry: ").Append(DefaultCountry).Append("\n");
            sb.Append("  CatalogId: ").Append(CatalogId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CatalogsCreativeAssetsFeed)obj);
        }

        /// <summary>
        /// Returns true if CatalogsCreativeAssetsFeed instances are equal
        /// </summary>
        /// <param name="other">Instance of CatalogsCreativeAssetsFeed to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CatalogsCreativeAssetsFeed other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    CreatedAt == other.CreatedAt ||
                    
                    CreatedAt.Equals(other.CreatedAt)
                ) && 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    UpdatedAt == other.UpdatedAt ||
                    
                    UpdatedAt.Equals(other.UpdatedAt)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Format == other.Format ||
                    
                    Format.Equals(other.Format)
                ) && 
                (
                    CatalogType == other.CatalogType ||
                    
                    CatalogType.Equals(other.CatalogType)
                ) && 
                (
                    Credentials == other.Credentials ||
                    Credentials != null &&
                    Credentials.Equals(other.Credentials)
                ) && 
                (
                    Location == other.Location ||
                    Location != null &&
                    Location.Equals(other.Location)
                ) && 
                (
                    PreferredProcessingSchedule == other.PreferredProcessingSchedule ||
                    PreferredProcessingSchedule != null &&
                    PreferredProcessingSchedule.Equals(other.PreferredProcessingSchedule)
                ) && 
                (
                    Status == other.Status ||
                    
                    Status.Equals(other.Status)
                ) && 
                (
                    DefaultCurrency == other.DefaultCurrency ||
                    
                    DefaultCurrency.Equals(other.DefaultCurrency)
                ) && 
                (
                    DefaultLocale == other.DefaultLocale ||
                    DefaultLocale != null &&
                    DefaultLocale.Equals(other.DefaultLocale)
                ) && 
                (
                    DefaultCountry == other.DefaultCountry ||
                    
                    DefaultCountry.Equals(other.DefaultCountry)
                ) && 
                (
                    CatalogId == other.CatalogId ||
                    CatalogId != null &&
                    CatalogId.Equals(other.CatalogId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + CreatedAt.GetHashCode();
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    
                    hashCode = hashCode * 59 + UpdatedAt.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    
                    hashCode = hashCode * 59 + Format.GetHashCode();
                    
                    hashCode = hashCode * 59 + CatalogType.GetHashCode();
                    if (Credentials != null)
                    hashCode = hashCode * 59 + Credentials.GetHashCode();
                    if (Location != null)
                    hashCode = hashCode * 59 + Location.GetHashCode();
                    if (PreferredProcessingSchedule != null)
                    hashCode = hashCode * 59 + PreferredProcessingSchedule.GetHashCode();
                    
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    
                    hashCode = hashCode * 59 + DefaultCurrency.GetHashCode();
                    if (DefaultLocale != null)
                    hashCode = hashCode * 59 + DefaultLocale.GetHashCode();
                    
                    hashCode = hashCode * 59 + DefaultCountry.GetHashCode();
                    if (CatalogId != null)
                    hashCode = hashCode * 59 + CatalogId.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(CatalogsCreativeAssetsFeed left, CatalogsCreativeAssetsFeed right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CatalogsCreativeAssetsFeed left, CatalogsCreativeAssetsFeed right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
