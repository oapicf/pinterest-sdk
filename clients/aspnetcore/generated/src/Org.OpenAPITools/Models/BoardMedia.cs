/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// Board media.
    /// </summary>
    [DataContract]
    public partial class BoardMedia : IEquatable<BoardMedia>
    {
        /// <summary>
        /// Board cover image.
        /// </summary>
        /// <value>Board cover image.</value>
        /* <example>https://i.pinimg.com/400x300/fd/cd/d5/fdcdd5a6d8a80824add0d054125cd957.jpg</example> */
        [DataMember(Name="image_cover_url", EmitDefaultValue=true)]
        public string ImageCoverUrl { get; set; }

        /// <summary>
        /// Board pin thumbnail urls.
        /// </summary>
        /// <value>Board pin thumbnail urls.</value>
        /* <example>[&quot;https://i.pinimg.com/150x150/b4/57/10/b45710f1ede96af55230f4b43935c4af.jpg&quot;,&quot;https://i.pinimg.com/150x150/dd/ff/46/ddff4616e39c1935cd05738794fa860e.jpg&quot;,&quot;https://i.pinimg.com/150x150/84/ac/59/84ac59b670ccb5b903dace480a98930c.jpg&quot;,&quot;https://i.pinimg.com/150x150/4c/54/6f/4c546f521be85e30838fb742bfff6936.jpg&quot;]</example> */
        [DataMember(Name="pin_thumbnail_urls", EmitDefaultValue=false)]
        public List<string> PinThumbnailUrls { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BoardMedia {\n");
            sb.Append("  ImageCoverUrl: ").Append(ImageCoverUrl).Append("\n");
            sb.Append("  PinThumbnailUrls: ").Append(PinThumbnailUrls).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((BoardMedia)obj);
        }

        /// <summary>
        /// Returns true if BoardMedia instances are equal
        /// </summary>
        /// <param name="other">Instance of BoardMedia to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BoardMedia other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ImageCoverUrl == other.ImageCoverUrl ||
                    ImageCoverUrl != null &&
                    ImageCoverUrl.Equals(other.ImageCoverUrl)
                ) && 
                (
                    PinThumbnailUrls == other.PinThumbnailUrls ||
                    PinThumbnailUrls != null &&
                    other.PinThumbnailUrls != null &&
                    PinThumbnailUrls.SequenceEqual(other.PinThumbnailUrls)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ImageCoverUrl != null)
                    hashCode = hashCode * 59 + ImageCoverUrl.GetHashCode();
                    if (PinThumbnailUrls != null)
                    hashCode = hashCode * 59 + PinThumbnailUrls.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(BoardMedia left, BoardMedia right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(BoardMedia left, BoardMedia right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
