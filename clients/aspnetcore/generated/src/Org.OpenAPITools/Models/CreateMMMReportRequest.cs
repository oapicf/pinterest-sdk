/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class CreateMMMReportRequest : IEquatable<CreateMMMReportRequest>
    {
        /// <summary>
        /// Name of the Marketing Mix Modeling (MMM) report
        /// </summary>
        /// <value>Name of the Marketing Mix Modeling (MMM) report</value>
        [Required]
        [DataMember(Name="report_name", EmitDefaultValue=false)]
        public string ReportName { get; set; }

        /// <summary>
        /// Metric report start date (UTC). Format: YYYY-MM-DD
        /// </summary>
        /// <value>Metric report start date (UTC). Format: YYYY-MM-DD</value>
        /* <example>2020-12-20</example> */
        [Required]
        [RegularExpression("^(\\d{4})-(\\d{2})-(\\d{2})$")]
        [DataMember(Name="start_date", EmitDefaultValue=false)]
        public string StartDate { get; set; }

        /// <summary>
        /// Metric report end date (UTC). Format: YYYY-MM-DD
        /// </summary>
        /// <value>Metric report end date (UTC). Format: YYYY-MM-DD</value>
        /* <example>2020-12-20</example> */
        [Required]
        [RegularExpression("^(\\d{4})-(\\d{2})-(\\d{2})$")]
        [DataMember(Name="end_date", EmitDefaultValue=false)]
        public string EndDate { get; set; }


        /// <summary>
        /// DAY - metrics are broken down daily.<br> WEEK - metrics are broken down weekly.
        /// </summary>
        /// <value>DAY - metrics are broken down daily.<br> WEEK - metrics are broken down weekly.</value>
        [TypeConverter(typeof(CustomEnumConverter<GranularityEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum GranularityEnum
        {
            
            /// <summary>
            /// Enum DAYEnum for DAY
            /// </summary>
            [EnumMember(Value = "DAY")]
            DAYEnum = 1,
            
            /// <summary>
            /// Enum WEEKEnum for WEEK
            /// </summary>
            [EnumMember(Value = "WEEK")]
            WEEKEnum = 2
        }

        /// <summary>
        /// DAY - metrics are broken down daily.&lt;br&gt; WEEK - metrics are broken down weekly.
        /// </summary>
        /// <value>DAY - metrics are broken down daily.&lt;br&gt; WEEK - metrics are broken down weekly.</value>
        [Required]
        [DataMember(Name="granularity", EmitDefaultValue=true)]
        public GranularityEnum Granularity { get; set; }


        /// <summary>
        /// Level of the report
        /// </summary>
        /// <value>Level of the report</value>
        [TypeConverter(typeof(CustomEnumConverter<LevelEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum LevelEnum
        {
            
            /// <summary>
            /// Enum CAMPAIGNTARGETINGEnum for CAMPAIGN_TARGETING
            /// </summary>
            [EnumMember(Value = "CAMPAIGN_TARGETING")]
            CAMPAIGNTARGETINGEnum = 1,
            
            /// <summary>
            /// Enum ADGROUPTARGETINGEnum for AD_GROUP_TARGETING
            /// </summary>
            [EnumMember(Value = "AD_GROUP_TARGETING")]
            ADGROUPTARGETINGEnum = 2
        }

        /// <summary>
        /// Level of the report
        /// </summary>
        /// <value>Level of the report</value>
        [Required]
        [DataMember(Name="level", EmitDefaultValue=true)]
        public LevelEnum Level { get; set; }

        /// <summary>
        /// List of targeting types
        /// </summary>
        /// <value>List of targeting types</value>
        /* <example>[&quot;GENDER&quot;]</example> */
        [Required]
        [DataMember(Name="targeting_types", EmitDefaultValue=false)]
        public List<MMMReportingTargetingType> TargetingTypes { get; set; }

        /// <summary>
        /// Metric and entity columns
        /// </summary>
        /// <value>Metric and entity columns</value>
        [Required]
        [DataMember(Name="columns", EmitDefaultValue=false)]
        public List<MMMReportingColumn> Columns { get; set; }

        /// <summary>
        /// A List of countries for filtering
        /// </summary>
        /// <value>A List of countries for filtering</value>
        [DataMember(Name="countries", EmitDefaultValue=false)]
        public List<TargetingAdvertiserCountry> Countries { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateMMMReportRequest {\n");
            sb.Append("  ReportName: ").Append(ReportName).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  Granularity: ").Append(Granularity).Append("\n");
            sb.Append("  Level: ").Append(Level).Append("\n");
            sb.Append("  TargetingTypes: ").Append(TargetingTypes).Append("\n");
            sb.Append("  Columns: ").Append(Columns).Append("\n");
            sb.Append("  Countries: ").Append(Countries).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CreateMMMReportRequest)obj);
        }

        /// <summary>
        /// Returns true if CreateMMMReportRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of CreateMMMReportRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateMMMReportRequest other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ReportName == other.ReportName ||
                    ReportName != null &&
                    ReportName.Equals(other.ReportName)
                ) && 
                (
                    StartDate == other.StartDate ||
                    StartDate != null &&
                    StartDate.Equals(other.StartDate)
                ) && 
                (
                    EndDate == other.EndDate ||
                    EndDate != null &&
                    EndDate.Equals(other.EndDate)
                ) && 
                (
                    Granularity == other.Granularity ||
                    
                    Granularity.Equals(other.Granularity)
                ) && 
                (
                    Level == other.Level ||
                    
                    Level.Equals(other.Level)
                ) && 
                (
                    TargetingTypes == other.TargetingTypes ||
                    TargetingTypes != null &&
                    other.TargetingTypes != null &&
                    TargetingTypes.SequenceEqual(other.TargetingTypes)
                ) && 
                (
                    Columns == other.Columns ||
                    Columns != null &&
                    other.Columns != null &&
                    Columns.SequenceEqual(other.Columns)
                ) && 
                (
                    Countries == other.Countries ||
                    Countries != null &&
                    other.Countries != null &&
                    Countries.SequenceEqual(other.Countries)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ReportName != null)
                    hashCode = hashCode * 59 + ReportName.GetHashCode();
                    if (StartDate != null)
                    hashCode = hashCode * 59 + StartDate.GetHashCode();
                    if (EndDate != null)
                    hashCode = hashCode * 59 + EndDate.GetHashCode();
                    
                    hashCode = hashCode * 59 + Granularity.GetHashCode();
                    
                    hashCode = hashCode * 59 + Level.GetHashCode();
                    if (TargetingTypes != null)
                    hashCode = hashCode * 59 + TargetingTypes.GetHashCode();
                    if (Columns != null)
                    hashCode = hashCode * 59 + Columns.GetHashCode();
                    if (Countries != null)
                    hashCode = hashCode * 59 + Countries.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(CreateMMMReportRequest left, CreateMMMReportRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CreateMMMReportRequest left, CreateMMMReportRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
