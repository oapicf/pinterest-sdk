/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ConversionTagCommon : IEquatable<ConversionTagCommon>
    {
        /// <summary>
        /// Ad account ID.
        /// </summary>
        /// <value>Ad account ID.</value>
        /* <example>549755885175</example> */
        [DataMember(Name="ad_account_id", EmitDefaultValue=false)]
        public string AdAccountId { get; set; }

        /// <summary>
        /// Tag code snippet.
        /// </summary>
        /// <value>Tag code snippet.</value>
        /* <example>&lt;script type&#x3D;text/javascript&gt; [...]</example> */
        [DataMember(Name="code_snippet", EmitDefaultValue=false)]
        public string CodeSnippet { get; set; }

        /// <summary>
        /// Gets or Sets EnhancedMatchStatus
        /// </summary>
        [DataMember(Name="enhanced_match_status", EmitDefaultValue=true)]
        public EnhancedMatchStatusType? EnhancedMatchStatus { get; set; }

        /// <summary>
        /// Tag ID.
        /// </summary>
        /// <value>Tag ID.</value>
        /* <example>2617998078212</example> */
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Time for the last event fired.
        /// </summary>
        /// <value>Time for the last event fired.</value>
        /* <example>1599030000000</example> */
        [DataMember(Name="last_fired_time_ms", EmitDefaultValue=true)]
        public decimal? LastFiredTimeMs { get; set; }

        /// <summary>
        /// Conversion tag name.
        /// </summary>
        /// <value>Conversion tag name.</value>
        /* <example>ACME Checkout Test Tag</example> */
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=true)]
        public EntityStatus Status { get; set; }

        /// <summary>
        /// Version number.
        /// </summary>
        /// <value>Version number.</value>
        /* <example>3</example> */
        [DataMember(Name="version", EmitDefaultValue=false)]
        public string VarVersion { get; set; }

        /// <summary>
        /// Gets or Sets Configs
        /// </summary>
        [DataMember(Name="configs", EmitDefaultValue=false)]
        public ConversionTagConfigs Configs { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ConversionTagCommon {\n");
            sb.Append("  AdAccountId: ").Append(AdAccountId).Append("\n");
            sb.Append("  CodeSnippet: ").Append(CodeSnippet).Append("\n");
            sb.Append("  EnhancedMatchStatus: ").Append(EnhancedMatchStatus).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  LastFiredTimeMs: ").Append(LastFiredTimeMs).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("  Configs: ").Append(Configs).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ConversionTagCommon)obj);
        }

        /// <summary>
        /// Returns true if ConversionTagCommon instances are equal
        /// </summary>
        /// <param name="other">Instance of ConversionTagCommon to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConversionTagCommon other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    AdAccountId == other.AdAccountId ||
                    AdAccountId != null &&
                    AdAccountId.Equals(other.AdAccountId)
                ) && 
                (
                    CodeSnippet == other.CodeSnippet ||
                    CodeSnippet != null &&
                    CodeSnippet.Equals(other.CodeSnippet)
                ) && 
                (
                    EnhancedMatchStatus == other.EnhancedMatchStatus ||
                    
                    EnhancedMatchStatus.Equals(other.EnhancedMatchStatus)
                ) && 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    LastFiredTimeMs == other.LastFiredTimeMs ||
                    LastFiredTimeMs != null &&
                    LastFiredTimeMs.Equals(other.LastFiredTimeMs)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Status == other.Status ||
                    
                    Status.Equals(other.Status)
                ) && 
                (
                    VarVersion == other.VarVersion ||
                    VarVersion != null &&
                    VarVersion.Equals(other.VarVersion)
                ) && 
                (
                    Configs == other.Configs ||
                    Configs != null &&
                    Configs.Equals(other.Configs)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (AdAccountId != null)
                    hashCode = hashCode * 59 + AdAccountId.GetHashCode();
                    if (CodeSnippet != null)
                    hashCode = hashCode * 59 + CodeSnippet.GetHashCode();
                    
                    hashCode = hashCode * 59 + EnhancedMatchStatus.GetHashCode();
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (LastFiredTimeMs != null)
                    hashCode = hashCode * 59 + LastFiredTimeMs.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    if (VarVersion != null)
                    hashCode = hashCode * 59 + VarVersion.GetHashCode();
                    if (Configs != null)
                    hashCode = hashCode * 59 + Configs.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ConversionTagCommon left, ConversionTagCommon right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ConversionTagCommon left, ConversionTagCommon right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
