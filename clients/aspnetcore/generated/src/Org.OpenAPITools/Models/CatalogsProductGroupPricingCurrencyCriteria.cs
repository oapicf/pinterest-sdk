/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class CatalogsProductGroupPricingCurrencyCriteria : IEquatable<CatalogsProductGroupPricingCurrencyCriteria>
    {

        /// <summary>
        /// Gets or Sets Operator
        /// </summary>
        [TypeConverter(typeof(CustomEnumConverter<OperatorEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum OperatorEnum
        {
            
            /// <summary>
            /// Enum GREATERTHANEnum for GREATER_THAN
            /// </summary>
            [EnumMember(Value = "GREATER_THAN")]
            GREATERTHANEnum = 1,
            
            /// <summary>
            /// Enum GREATERTHANOREQUALSEnum for GREATER_THAN_OR_EQUALS
            /// </summary>
            [EnumMember(Value = "GREATER_THAN_OR_EQUALS")]
            GREATERTHANOREQUALSEnum = 2,
            
            /// <summary>
            /// Enum LESSTHANEnum for LESS_THAN
            /// </summary>
            [EnumMember(Value = "LESS_THAN")]
            LESSTHANEnum = 3,
            
            /// <summary>
            /// Enum LESSTHANOREQUALSEnum for LESS_THAN_OR_EQUALS
            /// </summary>
            [EnumMember(Value = "LESS_THAN_OR_EQUALS")]
            LESSTHANOREQUALSEnum = 4
        }

        /// <summary>
        /// Gets or Sets Operator
        /// </summary>
        [Required]
        [DataMember(Name="operator", EmitDefaultValue=true)]
        public OperatorEnum Operator { get; set; }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [Required]
        [DataMember(Name="value", EmitDefaultValue=true)]
        public decimal Value { get; set; }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [Required]
        [DataMember(Name="currency", EmitDefaultValue=true)]
        public NonNullableCatalogsCurrency Currency { get; set; }

        /// <summary>
        /// Gets or Sets Negated
        /// </summary>
        [DataMember(Name="negated", EmitDefaultValue=true)]
        public bool Negated { get; set; } = false;

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CatalogsProductGroupPricingCurrencyCriteria {\n");
            sb.Append("  Operator: ").Append(Operator).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Negated: ").Append(Negated).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CatalogsProductGroupPricingCurrencyCriteria)obj);
        }

        /// <summary>
        /// Returns true if CatalogsProductGroupPricingCurrencyCriteria instances are equal
        /// </summary>
        /// <param name="other">Instance of CatalogsProductGroupPricingCurrencyCriteria to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CatalogsProductGroupPricingCurrencyCriteria other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Operator == other.Operator ||
                    
                    Operator.Equals(other.Operator)
                ) && 
                (
                    Value == other.Value ||
                    
                    Value.Equals(other.Value)
                ) && 
                (
                    Currency == other.Currency ||
                    
                    Currency.Equals(other.Currency)
                ) && 
                (
                    Negated == other.Negated ||
                    
                    Negated.Equals(other.Negated)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + Operator.GetHashCode();
                    
                    hashCode = hashCode * 59 + Value.GetHashCode();
                    
                    hashCode = hashCode * 59 + Currency.GetHashCode();
                    
                    hashCode = hashCode * 59 + Negated.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(CatalogsProductGroupPricingCurrencyCriteria left, CatalogsProductGroupPricingCurrencyCriteria right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CatalogsProductGroupPricingCurrencyCriteria left, CatalogsProductGroupPricingCurrencyCriteria right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
