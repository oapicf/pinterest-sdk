/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// An invite object if the invite/request was successfully updated. Will only be provided if the an invite/request is successfully updated.
    /// </summary>
    [DataContract]
    public partial class InviteBusinessRoleBinding : IEquatable<InviteBusinessRoleBinding>
    {
        /// <summary>
        /// Unique identifier for the business that created the invite/request.
        /// </summary>
        /// <value>Unique identifier for the business that created the invite/request.</value>
        /* <example>1234567890123</example> */
        [DataMember(Name="created_by_business_id", EmitDefaultValue=false)]
        public string CreatedByBusinessId { get; set; }

        /// <summary>
        /// Unique identifier for the user that created the invite/request.
        /// </summary>
        /// <value>Unique identifier for the user that created the invite/request.</value>
        /* <example>1234567890123</example> */
        [DataMember(Name="created_by_user_id", EmitDefaultValue=false)]
        public string CreatedByUserId { get; set; }

        /// <summary>
        /// Metadata for the user that updated the invite/request.
        /// </summary>
        /// <value>Metadata for the user that updated the invite/request.</value>
        [DataMember(Name="user", EmitDefaultValue=false)]
        public BusinessAccessUserSummary User { get; set; }

        /// <summary>
        /// Unique identifier of the invite/request.
        /// </summary>
        /// <value>Unique identifier of the invite/request.</value>
        /* <example>383791336903426391</example> */
        [RegularExpression("^\\d+$")]
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets InviteData
        /// </summary>
        [DataMember(Name="invite_data", EmitDefaultValue=false)]
        public BaseInviteDataResponseInviteData InviteData { get; set; }

        /// <summary>
        /// Indicates whether the invite/request was received.
        /// </summary>
        /// <value>Indicates whether the invite/request was received.</value>
        [DataMember(Name="is_received_invite", EmitDefaultValue=true)]
        public bool IsReceivedInvite { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InviteBusinessRoleBinding {\n");
            sb.Append("  CreatedByBusinessId: ").Append(CreatedByBusinessId).Append("\n");
            sb.Append("  CreatedByUserId: ").Append(CreatedByUserId).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  InviteData: ").Append(InviteData).Append("\n");
            sb.Append("  IsReceivedInvite: ").Append(IsReceivedInvite).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((InviteBusinessRoleBinding)obj);
        }

        /// <summary>
        /// Returns true if InviteBusinessRoleBinding instances are equal
        /// </summary>
        /// <param name="other">Instance of InviteBusinessRoleBinding to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InviteBusinessRoleBinding other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    CreatedByBusinessId == other.CreatedByBusinessId ||
                    CreatedByBusinessId != null &&
                    CreatedByBusinessId.Equals(other.CreatedByBusinessId)
                ) && 
                (
                    CreatedByUserId == other.CreatedByUserId ||
                    CreatedByUserId != null &&
                    CreatedByUserId.Equals(other.CreatedByUserId)
                ) && 
                (
                    User == other.User ||
                    User != null &&
                    User.Equals(other.User)
                ) && 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    InviteData == other.InviteData ||
                    InviteData != null &&
                    InviteData.Equals(other.InviteData)
                ) && 
                (
                    IsReceivedInvite == other.IsReceivedInvite ||
                    
                    IsReceivedInvite.Equals(other.IsReceivedInvite)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (CreatedByBusinessId != null)
                    hashCode = hashCode * 59 + CreatedByBusinessId.GetHashCode();
                    if (CreatedByUserId != null)
                    hashCode = hashCode * 59 + CreatedByUserId.GetHashCode();
                    if (User != null)
                    hashCode = hashCode * 59 + User.GetHashCode();
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (InviteData != null)
                    hashCode = hashCode * 59 + InviteData.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsReceivedInvite.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(InviteBusinessRoleBinding left, InviteBusinessRoleBinding right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(InviteBusinessRoleBinding left, InviteBusinessRoleBinding right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
