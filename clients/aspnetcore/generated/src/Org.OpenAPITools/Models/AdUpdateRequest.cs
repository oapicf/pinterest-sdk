/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class AdUpdateRequest : IEquatable<AdUpdateRequest>
    {
        /// <summary>
        /// ID of the ad group that contains the ad.
        /// </summary>
        /// <value>ID of the ad group that contains the ad.</value>
        /* <example>2680059592705</example> */
        [RegularExpression("^(AG)?\\d+$")]
        [DataMember(Name="ad_group_id", EmitDefaultValue=false)]
        public string AdGroupId { get; set; }

        /// <summary>
        /// Deep link URL for Android devices.
        /// </summary>
        /// <value>Deep link URL for Android devices.</value>
        [DataMember(Name="android_deep_link", EmitDefaultValue=true)]
        public string AndroidDeepLink { get; set; }

        /// <summary>
        /// Comma-separated deep links for the carousel pin on Android.
        /// </summary>
        /// <value>Comma-separated deep links for the carousel pin on Android.</value>
        [DataMember(Name="carousel_android_deep_links", EmitDefaultValue=true)]
        public List<string> CarouselAndroidDeepLinks { get; set; }

        /// <summary>
        /// Comma-separated destination URLs for the carousel pin to promote.
        /// </summary>
        /// <value>Comma-separated destination URLs for the carousel pin to promote.</value>
        [DataMember(Name="carousel_destination_urls", EmitDefaultValue=true)]
        public List<string> CarouselDestinationUrls { get; set; }

        /// <summary>
        /// Comma-separated deep links for the carousel pin on iOS.
        /// </summary>
        /// <value>Comma-separated deep links for the carousel pin on iOS.</value>
        [DataMember(Name="carousel_ios_deep_links", EmitDefaultValue=true)]
        public List<string> CarouselIosDeepLinks { get; set; }

        /// <summary>
        /// Tracking url for the ad clicks.
        /// </summary>
        /// <value>Tracking url for the ad clicks.</value>
        [DataMember(Name="click_tracking_url", EmitDefaultValue=true)]
        public string ClickTrackingUrl { get; set; }

        /// <summary>
        /// Gets or Sets CreativeType
        /// </summary>
        [DataMember(Name="creative_type", EmitDefaultValue=true)]
        public CreativeType CreativeType { get; set; }

        /// <summary>
        /// Destination URL.
        /// </summary>
        /// <value>Destination URL.</value>
        [DataMember(Name="destination_url", EmitDefaultValue=true)]
        public string DestinationUrl { get; set; }

        /// <summary>
        /// Deep link URL for iOS devices.
        /// </summary>
        /// <value>Deep link URL for iOS devices.</value>
        [DataMember(Name="ios_deep_link", EmitDefaultValue=true)]
        public string IosDeepLink { get; set; }

        /// <summary>
        /// Is original pin deleted?
        /// </summary>
        /// <value>Is original pin deleted?</value>
        /* <example>false</example> */
        [DataMember(Name="is_pin_deleted", EmitDefaultValue=true)]
        public bool IsPinDeleted { get; set; }

        /// <summary>
        /// Is pin repinnable?
        /// </summary>
        /// <value>Is pin repinnable?</value>
        /* <example>false</example> */
        [DataMember(Name="is_removable", EmitDefaultValue=true)]
        public bool IsRemovable { get; set; }

        /// <summary>
        /// Name of the ad - 255 chars max.
        /// </summary>
        /// <value>Name of the ad - 255 chars max.</value>
        [DataMember(Name="name", EmitDefaultValue=true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=true)]
        public EntityStatus Status { get; set; }

        /// <summary>
        /// Gets or Sets TrackingUrls
        /// </summary>
        [DataMember(Name="tracking_urls", EmitDefaultValue=true)]
        public TrackingUrls TrackingUrls { get; set; }

        /// <summary>
        /// Tracking URL for ad impressions.
        /// </summary>
        /// <value>Tracking URL for ad impressions.</value>
        [DataMember(Name="view_tracking_url", EmitDefaultValue=true)]
        public string ViewTrackingUrl { get; set; }

        /// <summary>
        /// Lead form ID for lead ad generation.
        /// </summary>
        /// <value>Lead form ID for lead ad generation.</value>
        [RegularExpression("^(AG)?\\d+$")]
        [DataMember(Name="lead_form_id", EmitDefaultValue=true)]
        public string LeadFormId { get; set; }

        /// <summary>
        /// Gets or Sets GridClickType
        /// </summary>
        [DataMember(Name="grid_click_type", EmitDefaultValue=true)]
        public GridClickType? GridClickType { get; set; }


        /// <summary>
        /// Select a call to action (CTA) to display below your ad. Available only for ads with direct links enabled. CTA options for consideration and conversion campaigns are LEARN_MORE, SHOP_NOW, BOOK_NOW, SIGN_UP, VISIT_SITE, BUY_NOW, GET_OFFER, ORDER_NOW, ADD_TO_CART (for conversion campaigns with add to cart conversion events only)
        /// </summary>
        /// <value>Select a call to action (CTA) to display below your ad. Available only for ads with direct links enabled. CTA options for consideration and conversion campaigns are LEARN_MORE, SHOP_NOW, BOOK_NOW, SIGN_UP, VISIT_SITE, BUY_NOW, GET_OFFER, ORDER_NOW, ADD_TO_CART (for conversion campaigns with add to cart conversion events only)</value>
        [TypeConverter(typeof(CustomEnumConverter<CustomizableCtaTypeEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum CustomizableCtaTypeEnum
        {
            
            /// <summary>
            /// Enum GETOFFEREnum for GET_OFFER
            /// </summary>
            [EnumMember(Value = "GET_OFFER")]
            GETOFFEREnum = 1,
            
            /// <summary>
            /// Enum LEARNMOREEnum for LEARN_MORE
            /// </summary>
            [EnumMember(Value = "LEARN_MORE")]
            LEARNMOREEnum = 2,
            
            /// <summary>
            /// Enum ORDERNOWEnum for ORDER_NOW
            /// </summary>
            [EnumMember(Value = "ORDER_NOW")]
            ORDERNOWEnum = 3,
            
            /// <summary>
            /// Enum SHOPNOWEnum for SHOP_NOW
            /// </summary>
            [EnumMember(Value = "SHOP_NOW")]
            SHOPNOWEnum = 4,
            
            /// <summary>
            /// Enum SIGNUPEnum for SIGN_UP
            /// </summary>
            [EnumMember(Value = "SIGN_UP")]
            SIGNUPEnum = 5,
            
            /// <summary>
            /// Enum SUBSCRIBEEnum for SUBSCRIBE
            /// </summary>
            [EnumMember(Value = "SUBSCRIBE")]
            SUBSCRIBEEnum = 6,
            
            /// <summary>
            /// Enum BUYNOWEnum for BUY_NOW
            /// </summary>
            [EnumMember(Value = "BUY_NOW")]
            BUYNOWEnum = 7,
            
            /// <summary>
            /// Enum CONTACTUSEnum for CONTACT_US
            /// </summary>
            [EnumMember(Value = "CONTACT_US")]
            CONTACTUSEnum = 8,
            
            /// <summary>
            /// Enum GETQUOTEEnum for GET_QUOTE
            /// </summary>
            [EnumMember(Value = "GET_QUOTE")]
            GETQUOTEEnum = 9,
            
            /// <summary>
            /// Enum VISITSITEEnum for VISIT_SITE
            /// </summary>
            [EnumMember(Value = "VISIT_SITE")]
            VISITSITEEnum = 10,
            
            /// <summary>
            /// Enum APPLYNOWEnum for APPLY_NOW
            /// </summary>
            [EnumMember(Value = "APPLY_NOW")]
            APPLYNOWEnum = 11,
            
            /// <summary>
            /// Enum BOOKNOWEnum for BOOK_NOW
            /// </summary>
            [EnumMember(Value = "BOOK_NOW")]
            BOOKNOWEnum = 12,
            
            /// <summary>
            /// Enum REQUESTDEMOEnum for REQUEST_DEMO
            /// </summary>
            [EnumMember(Value = "REQUEST_DEMO")]
            REQUESTDEMOEnum = 13,
            
            /// <summary>
            /// Enum REGISTERNOWEnum for REGISTER_NOW
            /// </summary>
            [EnumMember(Value = "REGISTER_NOW")]
            REGISTERNOWEnum = 14,
            
            /// <summary>
            /// Enum FINDADEALEREnum for FIND_A_DEALER
            /// </summary>
            [EnumMember(Value = "FIND_A_DEALER")]
            FINDADEALEREnum = 15,
            
            /// <summary>
            /// Enum ADDTOCARTEnum for ADD_TO_CART
            /// </summary>
            [EnumMember(Value = "ADD_TO_CART")]
            ADDTOCARTEnum = 16,
            
            /// <summary>
            /// Enum WATCHNOWEnum for WATCH_NOW
            /// </summary>
            [EnumMember(Value = "WATCH_NOW")]
            WATCHNOWEnum = 17,
            
            /// <summary>
            /// Enum READMOREEnum for READ_MORE
            /// </summary>
            [EnumMember(Value = "READ_MORE")]
            READMOREEnum = 18
        }

        /// <summary>
        /// Select a call to action (CTA) to display below your ad. Available only for ads with direct links enabled. CTA options for consideration and conversion campaigns are LEARN_MORE, SHOP_NOW, BOOK_NOW, SIGN_UP, VISIT_SITE, BUY_NOW, GET_OFFER, ORDER_NOW, ADD_TO_CART (for conversion campaigns with add to cart conversion events only)
        /// </summary>
        /// <value>Select a call to action (CTA) to display below your ad. Available only for ads with direct links enabled. CTA options for consideration and conversion campaigns are LEARN_MORE, SHOP_NOW, BOOK_NOW, SIGN_UP, VISIT_SITE, BUY_NOW, GET_OFFER, ORDER_NOW, ADD_TO_CART (for conversion campaigns with add to cart conversion events only)</value>
        /* <example>LEARN_MORE</example> */
        [DataMember(Name="customizable_cta_type", EmitDefaultValue=true)]
        public CustomizableCtaTypeEnum? CustomizableCtaType { get; set; }

        /// <summary>
        /// Before creating a quiz ad, you must create an organic Pin using POST/Create Pin for each result in the quiz. Quiz ads cannot be saved by a Pinner. Quiz ad results can be saved.
        /// </summary>
        /// <value>Before creating a quiz ad, you must create an organic Pin using POST/Create Pin for each result in the quiz. Quiz ads cannot be saved by a Pinner. Quiz ad results can be saved.</value>
        [DataMember(Name="quiz_pin_data", EmitDefaultValue=true)]
        public QuizPinData QuizPinData { get; set; }

        /// <summary>
        /// The ID of this ad.
        /// </summary>
        /// <value>The ID of this ad.</value>
        /* <example>687195134316</example> */
        [Required]
        [RegularExpression("^\\d+$")]
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Pin ID. This field may only be updated for draft ads.
        /// </summary>
        /// <value>Pin ID. This field may only be updated for draft ads.</value>
        /* <example>394205773611545468</example> */
        [RegularExpression("^\\d+$")]
        [DataMember(Name="pin_id", EmitDefaultValue=true)]
        public string PinId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AdUpdateRequest {\n");
            sb.Append("  AdGroupId: ").Append(AdGroupId).Append("\n");
            sb.Append("  AndroidDeepLink: ").Append(AndroidDeepLink).Append("\n");
            sb.Append("  CarouselAndroidDeepLinks: ").Append(CarouselAndroidDeepLinks).Append("\n");
            sb.Append("  CarouselDestinationUrls: ").Append(CarouselDestinationUrls).Append("\n");
            sb.Append("  CarouselIosDeepLinks: ").Append(CarouselIosDeepLinks).Append("\n");
            sb.Append("  ClickTrackingUrl: ").Append(ClickTrackingUrl).Append("\n");
            sb.Append("  CreativeType: ").Append(CreativeType).Append("\n");
            sb.Append("  DestinationUrl: ").Append(DestinationUrl).Append("\n");
            sb.Append("  IosDeepLink: ").Append(IosDeepLink).Append("\n");
            sb.Append("  IsPinDeleted: ").Append(IsPinDeleted).Append("\n");
            sb.Append("  IsRemovable: ").Append(IsRemovable).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  TrackingUrls: ").Append(TrackingUrls).Append("\n");
            sb.Append("  ViewTrackingUrl: ").Append(ViewTrackingUrl).Append("\n");
            sb.Append("  LeadFormId: ").Append(LeadFormId).Append("\n");
            sb.Append("  GridClickType: ").Append(GridClickType).Append("\n");
            sb.Append("  CustomizableCtaType: ").Append(CustomizableCtaType).Append("\n");
            sb.Append("  QuizPinData: ").Append(QuizPinData).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  PinId: ").Append(PinId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((AdUpdateRequest)obj);
        }

        /// <summary>
        /// Returns true if AdUpdateRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of AdUpdateRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AdUpdateRequest other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    AdGroupId == other.AdGroupId ||
                    AdGroupId != null &&
                    AdGroupId.Equals(other.AdGroupId)
                ) && 
                (
                    AndroidDeepLink == other.AndroidDeepLink ||
                    AndroidDeepLink != null &&
                    AndroidDeepLink.Equals(other.AndroidDeepLink)
                ) && 
                (
                    CarouselAndroidDeepLinks == other.CarouselAndroidDeepLinks ||
                    CarouselAndroidDeepLinks != null &&
                    other.CarouselAndroidDeepLinks != null &&
                    CarouselAndroidDeepLinks.SequenceEqual(other.CarouselAndroidDeepLinks)
                ) && 
                (
                    CarouselDestinationUrls == other.CarouselDestinationUrls ||
                    CarouselDestinationUrls != null &&
                    other.CarouselDestinationUrls != null &&
                    CarouselDestinationUrls.SequenceEqual(other.CarouselDestinationUrls)
                ) && 
                (
                    CarouselIosDeepLinks == other.CarouselIosDeepLinks ||
                    CarouselIosDeepLinks != null &&
                    other.CarouselIosDeepLinks != null &&
                    CarouselIosDeepLinks.SequenceEqual(other.CarouselIosDeepLinks)
                ) && 
                (
                    ClickTrackingUrl == other.ClickTrackingUrl ||
                    ClickTrackingUrl != null &&
                    ClickTrackingUrl.Equals(other.ClickTrackingUrl)
                ) && 
                (
                    CreativeType == other.CreativeType ||
                    
                    CreativeType.Equals(other.CreativeType)
                ) && 
                (
                    DestinationUrl == other.DestinationUrl ||
                    DestinationUrl != null &&
                    DestinationUrl.Equals(other.DestinationUrl)
                ) && 
                (
                    IosDeepLink == other.IosDeepLink ||
                    IosDeepLink != null &&
                    IosDeepLink.Equals(other.IosDeepLink)
                ) && 
                (
                    IsPinDeleted == other.IsPinDeleted ||
                    
                    IsPinDeleted.Equals(other.IsPinDeleted)
                ) && 
                (
                    IsRemovable == other.IsRemovable ||
                    
                    IsRemovable.Equals(other.IsRemovable)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Status == other.Status ||
                    
                    Status.Equals(other.Status)
                ) && 
                (
                    TrackingUrls == other.TrackingUrls ||
                    TrackingUrls != null &&
                    TrackingUrls.Equals(other.TrackingUrls)
                ) && 
                (
                    ViewTrackingUrl == other.ViewTrackingUrl ||
                    ViewTrackingUrl != null &&
                    ViewTrackingUrl.Equals(other.ViewTrackingUrl)
                ) && 
                (
                    LeadFormId == other.LeadFormId ||
                    LeadFormId != null &&
                    LeadFormId.Equals(other.LeadFormId)
                ) && 
                (
                    GridClickType == other.GridClickType ||
                    
                    GridClickType.Equals(other.GridClickType)
                ) && 
                (
                    CustomizableCtaType == other.CustomizableCtaType ||
                    
                    CustomizableCtaType.Equals(other.CustomizableCtaType)
                ) && 
                (
                    QuizPinData == other.QuizPinData ||
                    QuizPinData != null &&
                    QuizPinData.Equals(other.QuizPinData)
                ) && 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    PinId == other.PinId ||
                    PinId != null &&
                    PinId.Equals(other.PinId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (AdGroupId != null)
                    hashCode = hashCode * 59 + AdGroupId.GetHashCode();
                    if (AndroidDeepLink != null)
                    hashCode = hashCode * 59 + AndroidDeepLink.GetHashCode();
                    if (CarouselAndroidDeepLinks != null)
                    hashCode = hashCode * 59 + CarouselAndroidDeepLinks.GetHashCode();
                    if (CarouselDestinationUrls != null)
                    hashCode = hashCode * 59 + CarouselDestinationUrls.GetHashCode();
                    if (CarouselIosDeepLinks != null)
                    hashCode = hashCode * 59 + CarouselIosDeepLinks.GetHashCode();
                    if (ClickTrackingUrl != null)
                    hashCode = hashCode * 59 + ClickTrackingUrl.GetHashCode();
                    
                    hashCode = hashCode * 59 + CreativeType.GetHashCode();
                    if (DestinationUrl != null)
                    hashCode = hashCode * 59 + DestinationUrl.GetHashCode();
                    if (IosDeepLink != null)
                    hashCode = hashCode * 59 + IosDeepLink.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsPinDeleted.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsRemovable.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    if (TrackingUrls != null)
                    hashCode = hashCode * 59 + TrackingUrls.GetHashCode();
                    if (ViewTrackingUrl != null)
                    hashCode = hashCode * 59 + ViewTrackingUrl.GetHashCode();
                    if (LeadFormId != null)
                    hashCode = hashCode * 59 + LeadFormId.GetHashCode();
                    
                    hashCode = hashCode * 59 + GridClickType.GetHashCode();
                    
                    hashCode = hashCode * 59 + CustomizableCtaType.GetHashCode();
                    if (QuizPinData != null)
                    hashCode = hashCode * 59 + QuizPinData.GetHashCode();
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (PinId != null)
                    hashCode = hashCode * 59 + PinId.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(AdUpdateRequest left, AdUpdateRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AdUpdateRequest left, AdUpdateRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
