/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class PinMediaSourceImagesBase64ItemsInner : IEquatable<PinMediaSourceImagesBase64ItemsInner>
    {
        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Destination link for the image.
        /// </summary>
        /// <value>Destination link for the image.</value>
        [DataMember(Name="link", EmitDefaultValue=false)]
        public string Link { get; set; }


        /// <summary>
        /// Gets or Sets ContentType
        /// </summary>
        [TypeConverter(typeof(CustomEnumConverter<ContentTypeEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContentTypeEnum
        {
            
            /// <summary>
            /// Enum JpegEnum for image/jpeg
            /// </summary>
            [EnumMember(Value = "image/jpeg")]
            JpegEnum = 1,
            
            /// <summary>
            /// Enum PngEnum for image/png
            /// </summary>
            [EnumMember(Value = "image/png")]
            PngEnum = 2
        }

        /// <summary>
        /// Gets or Sets ContentType
        /// </summary>
        [Required]
        [DataMember(Name="content_type", EmitDefaultValue=true)]
        public ContentTypeEnum ContentType { get; set; }

        /// <summary>
        /// Image to upload as base64 string.
        /// </summary>
        /// <value>Image to upload as base64 string.</value>
        [Required]
        [RegularExpression("[a-zA-Z0-9+/=]+")]
        [DataMember(Name="data", EmitDefaultValue=false)]
        public string Data { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PinMediaSourceImagesBase64ItemsInner {\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Link: ").Append(Link).Append("\n");
            sb.Append("  ContentType: ").Append(ContentType).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PinMediaSourceImagesBase64ItemsInner)obj);
        }

        /// <summary>
        /// Returns true if PinMediaSourceImagesBase64ItemsInner instances are equal
        /// </summary>
        /// <param name="other">Instance of PinMediaSourceImagesBase64ItemsInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PinMediaSourceImagesBase64ItemsInner other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Title == other.Title ||
                    Title != null &&
                    Title.Equals(other.Title)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    Link == other.Link ||
                    Link != null &&
                    Link.Equals(other.Link)
                ) && 
                (
                    ContentType == other.ContentType ||
                    
                    ContentType.Equals(other.ContentType)
                ) && 
                (
                    Data == other.Data ||
                    Data != null &&
                    Data.Equals(other.Data)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Title != null)
                    hashCode = hashCode * 59 + Title.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (Link != null)
                    hashCode = hashCode * 59 + Link.GetHashCode();
                    
                    hashCode = hashCode * 59 + ContentType.GetHashCode();
                    if (Data != null)
                    hashCode = hashCode * 59 + Data.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(PinMediaSourceImagesBase64ItemsInner left, PinMediaSourceImagesBase64ItemsInner right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PinMediaSourceImagesBase64ItemsInner left, PinMediaSourceImagesBase64ItemsInner right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
