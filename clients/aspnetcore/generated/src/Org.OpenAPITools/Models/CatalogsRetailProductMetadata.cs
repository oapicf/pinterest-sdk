/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// Retail product metadata entity
    /// </summary>
    [DataContract]
    public partial class CatalogsRetailProductMetadata : IEquatable<CatalogsRetailProductMetadata>
    {
        /// <summary>
        /// The user-created unique ID that represents the product.
        /// </summary>
        /// <value>The user-created unique ID that represents the product.</value>
        /* <example>DS0294-L</example> */
        [Required]
        [DataMember(Name="item_id", EmitDefaultValue=false)]
        public string ItemId { get; set; }

        /// <summary>
        /// The parent ID of the product.
        /// </summary>
        /// <value>The parent ID of the product.</value>
        /* <example>DS0294</example> */
        [Required]
        [DataMember(Name="item_group_id", EmitDefaultValue=true)]
        public string ItemGroupId { get; set; }

        /// <summary>
        /// Gets or Sets Availability
        /// </summary>
        [Required]
        [DataMember(Name="availability", EmitDefaultValue=true)]
        public NonNullableProductAvailabilityType Availability { get; set; }

        /// <summary>
        /// The price of the product.
        /// </summary>
        /// <value>The price of the product.</value>
        /* <example>24.99</example> */
        [Required]
        [DataMember(Name="price", EmitDefaultValue=true)]
        public decimal Price { get; set; }

        /// <summary>
        /// The discounted price of the product.
        /// </summary>
        /// <value>The discounted price of the product.</value>
        /* <example>14.99</example> */
        [Required]
        [DataMember(Name="sale_price", EmitDefaultValue=true)]
        public decimal? SalePrice { get; set; }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [Required]
        [DataMember(Name="currency", EmitDefaultValue=true)]
        public NonNullableCatalogsCurrency Currency { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CatalogsRetailProductMetadata {\n");
            sb.Append("  ItemId: ").Append(ItemId).Append("\n");
            sb.Append("  ItemGroupId: ").Append(ItemGroupId).Append("\n");
            sb.Append("  Availability: ").Append(Availability).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  SalePrice: ").Append(SalePrice).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CatalogsRetailProductMetadata)obj);
        }

        /// <summary>
        /// Returns true if CatalogsRetailProductMetadata instances are equal
        /// </summary>
        /// <param name="other">Instance of CatalogsRetailProductMetadata to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CatalogsRetailProductMetadata other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ItemId == other.ItemId ||
                    ItemId != null &&
                    ItemId.Equals(other.ItemId)
                ) && 
                (
                    ItemGroupId == other.ItemGroupId ||
                    ItemGroupId != null &&
                    ItemGroupId.Equals(other.ItemGroupId)
                ) && 
                (
                    Availability == other.Availability ||
                    
                    Availability.Equals(other.Availability)
                ) && 
                (
                    Price == other.Price ||
                    
                    Price.Equals(other.Price)
                ) && 
                (
                    SalePrice == other.SalePrice ||
                    SalePrice != null &&
                    SalePrice.Equals(other.SalePrice)
                ) && 
                (
                    Currency == other.Currency ||
                    
                    Currency.Equals(other.Currency)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ItemId != null)
                    hashCode = hashCode * 59 + ItemId.GetHashCode();
                    if (ItemGroupId != null)
                    hashCode = hashCode * 59 + ItemGroupId.GetHashCode();
                    
                    hashCode = hashCode * 59 + Availability.GetHashCode();
                    
                    hashCode = hashCode * 59 + Price.GetHashCode();
                    if (SalePrice != null)
                    hashCode = hashCode * 59 + SalePrice.GetHashCode();
                    
                    hashCode = hashCode * 59 + Currency.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(CatalogsRetailProductMetadata left, CatalogsRetailProductMetadata right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CatalogsRetailProductMetadata left, CatalogsRetailProductMetadata right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
