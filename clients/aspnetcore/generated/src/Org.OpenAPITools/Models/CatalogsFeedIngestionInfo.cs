/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class CatalogsFeedIngestionInfo : IEquatable<CatalogsFeedIngestionInfo>
    {
        /// <summary>
        /// The number of ingested products that are in stock.
        /// </summary>
        /// <value>The number of ingested products that are in stock.</value>
        [DataMember(Name="IN_STOCK", EmitDefaultValue=true)]
        public int IN_STOCK { get; set; }

        /// <summary>
        /// The number of ingested products that are in out of stock.
        /// </summary>
        /// <value>The number of ingested products that are in out of stock.</value>
        [DataMember(Name="OUT_OF_STOCK", EmitDefaultValue=true)]
        public int OUT_OF_STOCK { get; set; }

        /// <summary>
        /// The number of ingested products that are in preorder.
        /// </summary>
        /// <value>The number of ingested products that are in preorder.</value>
        [DataMember(Name="PREORDER", EmitDefaultValue=true)]
        public int PREORDER { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CatalogsFeedIngestionInfo {\n");
            sb.Append("  IN_STOCK: ").Append(IN_STOCK).Append("\n");
            sb.Append("  OUT_OF_STOCK: ").Append(OUT_OF_STOCK).Append("\n");
            sb.Append("  PREORDER: ").Append(PREORDER).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CatalogsFeedIngestionInfo)obj);
        }

        /// <summary>
        /// Returns true if CatalogsFeedIngestionInfo instances are equal
        /// </summary>
        /// <param name="other">Instance of CatalogsFeedIngestionInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CatalogsFeedIngestionInfo other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    IN_STOCK == other.IN_STOCK ||
                    
                    IN_STOCK.Equals(other.IN_STOCK)
                ) && 
                (
                    OUT_OF_STOCK == other.OUT_OF_STOCK ||
                    
                    OUT_OF_STOCK.Equals(other.OUT_OF_STOCK)
                ) && 
                (
                    PREORDER == other.PREORDER ||
                    
                    PREORDER.Equals(other.PREORDER)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + IN_STOCK.GetHashCode();
                    
                    hashCode = hashCode * 59 + OUT_OF_STOCK.GetHashCode();
                    
                    hashCode = hashCode * 59 + PREORDER.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(CatalogsFeedIngestionInfo left, CatalogsFeedIngestionInfo right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CatalogsFeedIngestionInfo left, CatalogsFeedIngestionInfo right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
