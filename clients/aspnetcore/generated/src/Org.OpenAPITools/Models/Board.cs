/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// Board
    /// </summary>
    [DataContract]
    public partial class Board : IEquatable<Board>
    {
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        /* <example>549755885175</example> */
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Date and time of board creation.
        /// </summary>
        /// <value>Date and time of board creation.</value>
        /* <example>2020-01-01T20:10:40Z</example> */
        [DataMember(Name="created_at", EmitDefaultValue=true)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Date and time of last board pins modified.
        /// </summary>
        /// <value>Date and time of last board pins modified.</value>
        /* <example>2020-01-01T20:10:40Z</example> */
        [DataMember(Name="board_pins_modified_at", EmitDefaultValue=true)]
        public DateTime BoardPinsModifiedAt { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        /* <example>Summer Recipes</example> */
        [Required]
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        /* <example>My favorite summer recipes</example> */
        [DataMember(Name="description", EmitDefaultValue=true)]
        public string Description { get; set; }

        /// <summary>
        /// Count of collaborators on the board.
        /// </summary>
        /// <value>Count of collaborators on the board.</value>
        /* <example>17</example> */
        [DataMember(Name="collaborator_count", EmitDefaultValue=true)]
        public int CollaboratorCount { get; set; }

        /// <summary>
        /// Count of pins on the board.
        /// </summary>
        /// <value>Count of pins on the board.</value>
        /* <example>5</example> */
        [DataMember(Name="pin_count", EmitDefaultValue=true)]
        public int PinCount { get; set; }

        /// <summary>
        /// Board follower count.
        /// </summary>
        /// <value>Board follower count.</value>
        /* <example>13</example> */
        [DataMember(Name="follower_count", EmitDefaultValue=true)]
        public int FollowerCount { get; set; }

        /// <summary>
        /// Gets or Sets Media
        /// </summary>
        [DataMember(Name="media", EmitDefaultValue=false)]
        public BoardMedia Media { get; set; }

        /// <summary>
        /// Gets or Sets Owner
        /// </summary>
        [DataMember(Name="owner", EmitDefaultValue=false)]
        public BoardOwner Owner { get; set; }


        /// <summary>
        /// Privacy setting for a board. Learn more about <a href=\"https://help.pinterest.com/en/article/secret-boards\">secret boards</a> and <a href=\"https://help.pinterest.com/en/business/article/protected-boards\">protected boards</a>
        /// </summary>
        /// <value>Privacy setting for a board. Learn more about <a href=\"https://help.pinterest.com/en/article/secret-boards\">secret boards</a> and <a href=\"https://help.pinterest.com/en/business/article/protected-boards\">protected boards</a></value>
        [TypeConverter(typeof(CustomEnumConverter<PrivacyEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum PrivacyEnum
        {
            
            /// <summary>
            /// Enum PUBLICEnum for PUBLIC
            /// </summary>
            [EnumMember(Value = "PUBLIC")]
            PUBLICEnum = 1,
            
            /// <summary>
            /// Enum PROTECTEDEnum for PROTECTED
            /// </summary>
            [EnumMember(Value = "PROTECTED")]
            PROTECTEDEnum = 2,
            
            /// <summary>
            /// Enum SECRETEnum for SECRET
            /// </summary>
            [EnumMember(Value = "SECRET")]
            SECRETEnum = 3
        }

        /// <summary>
        /// Privacy setting for a board. Learn more about &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/article/secret-boards\&quot;&gt;secret boards&lt;/a&gt; and &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/protected-boards\&quot;&gt;protected boards&lt;/a&gt;
        /// </summary>
        /// <value>Privacy setting for a board. Learn more about &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/article/secret-boards\&quot;&gt;secret boards&lt;/a&gt; and &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/protected-boards\&quot;&gt;protected boards&lt;/a&gt;</value>
        [DataMember(Name="privacy", EmitDefaultValue=true)]
        public PrivacyEnum Privacy { get; set; } = PrivacyEnum.PUBLICEnum;

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Board {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  BoardPinsModifiedAt: ").Append(BoardPinsModifiedAt).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  CollaboratorCount: ").Append(CollaboratorCount).Append("\n");
            sb.Append("  PinCount: ").Append(PinCount).Append("\n");
            sb.Append("  FollowerCount: ").Append(FollowerCount).Append("\n");
            sb.Append("  Media: ").Append(Media).Append("\n");
            sb.Append("  Owner: ").Append(Owner).Append("\n");
            sb.Append("  Privacy: ").Append(Privacy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Board)obj);
        }

        /// <summary>
        /// Returns true if Board instances are equal
        /// </summary>
        /// <param name="other">Instance of Board to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Board other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    CreatedAt == other.CreatedAt ||
                    
                    CreatedAt.Equals(other.CreatedAt)
                ) && 
                (
                    BoardPinsModifiedAt == other.BoardPinsModifiedAt ||
                    
                    BoardPinsModifiedAt.Equals(other.BoardPinsModifiedAt)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    CollaboratorCount == other.CollaboratorCount ||
                    
                    CollaboratorCount.Equals(other.CollaboratorCount)
                ) && 
                (
                    PinCount == other.PinCount ||
                    
                    PinCount.Equals(other.PinCount)
                ) && 
                (
                    FollowerCount == other.FollowerCount ||
                    
                    FollowerCount.Equals(other.FollowerCount)
                ) && 
                (
                    Media == other.Media ||
                    Media != null &&
                    Media.Equals(other.Media)
                ) && 
                (
                    Owner == other.Owner ||
                    Owner != null &&
                    Owner.Equals(other.Owner)
                ) && 
                (
                    Privacy == other.Privacy ||
                    
                    Privacy.Equals(other.Privacy)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    
                    hashCode = hashCode * 59 + CreatedAt.GetHashCode();
                    
                    hashCode = hashCode * 59 + BoardPinsModifiedAt.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    
                    hashCode = hashCode * 59 + CollaboratorCount.GetHashCode();
                    
                    hashCode = hashCode * 59 + PinCount.GetHashCode();
                    
                    hashCode = hashCode * 59 + FollowerCount.GetHashCode();
                    if (Media != null)
                    hashCode = hashCode * 59 + Media.GetHashCode();
                    if (Owner != null)
                    hashCode = hashCode * 59 + Owner.GetHashCode();
                    
                    hashCode = hashCode * 59 + Privacy.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Board left, Board right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Board left, Board right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
