/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class UserWebsiteVerificationCode : IEquatable<UserWebsiteVerificationCode>
    {
        /// <summary>
        /// Code to check against the user claiming the website
        /// </summary>
        /// <value>Code to check against the user claiming the website</value>
        /* <example>e1edcc1a43976c646367e9c6c9a9b7b6</example> */
        [DataMember(Name="verification_code", EmitDefaultValue=false)]
        public string VerificationCode { get; set; }

        /// <summary>
        /// DNS TXT record to check against for the website to be claimed
        /// </summary>
        /// <value>DNS TXT record to check against for the website to be claimed</value>
        /* <example>pinterest-site-verification&#x3D;e1edcc1a43976c646367e9c6c9a9b7b6</example> */
        [DataMember(Name="dns_txt_record", EmitDefaultValue=false)]
        public string DnsTxtRecord { get; set; }

        /// <summary>
        /// Metatag the verification process searchs for the website to be claimed
        /// </summary>
        /// <value>Metatag the verification process searchs for the website to be claimed</value>
        /* <example>&lt;meta name&#x3D;&quot;p:domain_verify&quot; content&#x3D;&quot;e1edcc1a43976c646367e9c6c9a9b7b6&quot;/&gt;</example> */
        [DataMember(Name="metatag", EmitDefaultValue=false)]
        public string Metatag { get; set; }

        /// <summary>
        /// File expected to find on the website being claimed
        /// </summary>
        /// <value>File expected to find on the website being claimed</value>
        /* <example>pinterest-e1edc.html</example> */
        [DataMember(Name="filename", EmitDefaultValue=false)]
        public string Filename { get; set; }

        /// <summary>
        /// A full html file to upload to the website in order for it to be claimed
        /// </summary>
        /// <value>A full html file to upload to the website in order for it to be claimed</value>
        [DataMember(Name="file_content", EmitDefaultValue=false)]
        public string FileContent { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserWebsiteVerificationCode {\n");
            sb.Append("  VerificationCode: ").Append(VerificationCode).Append("\n");
            sb.Append("  DnsTxtRecord: ").Append(DnsTxtRecord).Append("\n");
            sb.Append("  Metatag: ").Append(Metatag).Append("\n");
            sb.Append("  Filename: ").Append(Filename).Append("\n");
            sb.Append("  FileContent: ").Append(FileContent).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((UserWebsiteVerificationCode)obj);
        }

        /// <summary>
        /// Returns true if UserWebsiteVerificationCode instances are equal
        /// </summary>
        /// <param name="other">Instance of UserWebsiteVerificationCode to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserWebsiteVerificationCode other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    VerificationCode == other.VerificationCode ||
                    VerificationCode != null &&
                    VerificationCode.Equals(other.VerificationCode)
                ) && 
                (
                    DnsTxtRecord == other.DnsTxtRecord ||
                    DnsTxtRecord != null &&
                    DnsTxtRecord.Equals(other.DnsTxtRecord)
                ) && 
                (
                    Metatag == other.Metatag ||
                    Metatag != null &&
                    Metatag.Equals(other.Metatag)
                ) && 
                (
                    Filename == other.Filename ||
                    Filename != null &&
                    Filename.Equals(other.Filename)
                ) && 
                (
                    FileContent == other.FileContent ||
                    FileContent != null &&
                    FileContent.Equals(other.FileContent)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (VerificationCode != null)
                    hashCode = hashCode * 59 + VerificationCode.GetHashCode();
                    if (DnsTxtRecord != null)
                    hashCode = hashCode * 59 + DnsTxtRecord.GetHashCode();
                    if (Metatag != null)
                    hashCode = hashCode * 59 + Metatag.GetHashCode();
                    if (Filename != null)
                    hashCode = hashCode * 59 + Filename.GetHashCode();
                    if (FileContent != null)
                    hashCode = hashCode * 59 + FileContent.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(UserWebsiteVerificationCode left, UserWebsiteVerificationCode right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(UserWebsiteVerificationCode left, UserWebsiteVerificationCode right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
