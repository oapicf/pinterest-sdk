/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// Request for creation of entities in bulk.
    /// </summary>
    [DataContract]
    public partial class BulkUpsertRequestUpdate : IEquatable<BulkUpsertRequestUpdate>
    {
        /// <summary>
        /// Gets or Sets Campaigns
        /// </summary>
        [DataMember(Name="campaigns", EmitDefaultValue=false)]
        public List<CampaignUpdateRequest> Campaigns { get; set; }

        /// <summary>
        /// Gets or Sets AdGroups
        /// </summary>
        [DataMember(Name="ad_groups", EmitDefaultValue=false)]
        public List<AdGroupUpdateRequest> AdGroups { get; set; }

        /// <summary>
        /// Gets or Sets Ads
        /// </summary>
        [DataMember(Name="ads", EmitDefaultValue=false)]
        public List<AdUpdateRequest> Ads { get; set; }

        /// <summary>
        /// Gets or Sets ProductGroups
        /// </summary>
        [DataMember(Name="product_groups", EmitDefaultValue=false)]
        public List<ProductGroupPromotionUpdateRequest> ProductGroups { get; set; }

        /// <summary>
        /// Gets or Sets Keywords
        /// </summary>
        [DataMember(Name="keywords", EmitDefaultValue=false)]
        public List<KeywordUpdate> Keywords { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BulkUpsertRequestUpdate {\n");
            sb.Append("  Campaigns: ").Append(Campaigns).Append("\n");
            sb.Append("  AdGroups: ").Append(AdGroups).Append("\n");
            sb.Append("  Ads: ").Append(Ads).Append("\n");
            sb.Append("  ProductGroups: ").Append(ProductGroups).Append("\n");
            sb.Append("  Keywords: ").Append(Keywords).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((BulkUpsertRequestUpdate)obj);
        }

        /// <summary>
        /// Returns true if BulkUpsertRequestUpdate instances are equal
        /// </summary>
        /// <param name="other">Instance of BulkUpsertRequestUpdate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BulkUpsertRequestUpdate other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Campaigns == other.Campaigns ||
                    Campaigns != null &&
                    other.Campaigns != null &&
                    Campaigns.SequenceEqual(other.Campaigns)
                ) && 
                (
                    AdGroups == other.AdGroups ||
                    AdGroups != null &&
                    other.AdGroups != null &&
                    AdGroups.SequenceEqual(other.AdGroups)
                ) && 
                (
                    Ads == other.Ads ||
                    Ads != null &&
                    other.Ads != null &&
                    Ads.SequenceEqual(other.Ads)
                ) && 
                (
                    ProductGroups == other.ProductGroups ||
                    ProductGroups != null &&
                    other.ProductGroups != null &&
                    ProductGroups.SequenceEqual(other.ProductGroups)
                ) && 
                (
                    Keywords == other.Keywords ||
                    Keywords != null &&
                    other.Keywords != null &&
                    Keywords.SequenceEqual(other.Keywords)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Campaigns != null)
                    hashCode = hashCode * 59 + Campaigns.GetHashCode();
                    if (AdGroups != null)
                    hashCode = hashCode * 59 + AdGroups.GetHashCode();
                    if (Ads != null)
                    hashCode = hashCode * 59 + Ads.GetHashCode();
                    if (ProductGroups != null)
                    hashCode = hashCode * 59 + ProductGroups.GetHashCode();
                    if (Keywords != null)
                    hashCode = hashCode * 59 + Keywords.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(BulkUpsertRequestUpdate left, BulkUpsertRequestUpdate right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(BulkUpsertRequestUpdate left, BulkUpsertRequestUpdate right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
