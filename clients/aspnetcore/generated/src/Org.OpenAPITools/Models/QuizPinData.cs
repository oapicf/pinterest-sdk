/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// This field includes all quiz data including questions, options, and results.
    /// </summary>
    [DataContract]
    public partial class QuizPinData : IEquatable<QuizPinData>
    {
        /// <summary>
        /// Gets or Sets Questions
        /// </summary>
        [DataMember(Name="questions", EmitDefaultValue=false)]
        public List<QuizPinQuestion> Questions { get; set; }

        /// <summary>
        /// Gets or Sets Results
        /// </summary>
        [DataMember(Name="results", EmitDefaultValue=false)]
        public List<QuizPinResult> Results { get; set; }


        /// <summary>
        /// Quiz ad tie breaker type, default is RANDOM
        /// </summary>
        /// <value>Quiz ad tie breaker type, default is RANDOM</value>
        [TypeConverter(typeof(CustomEnumConverter<TieBreakerTypeEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum TieBreakerTypeEnum
        {
            
            /// <summary>
            /// Enum RANDOMEnum for RANDOM
            /// </summary>
            [EnumMember(Value = "RANDOM")]
            RANDOMEnum = 1,
            
            /// <summary>
            /// Enum CUSTOMEnum for CUSTOM
            /// </summary>
            [EnumMember(Value = "CUSTOM")]
            CUSTOMEnum = 2
        }

        /// <summary>
        /// Quiz ad tie breaker type, default is RANDOM
        /// </summary>
        /// <value>Quiz ad tie breaker type, default is RANDOM</value>
        [DataMember(Name="tie_breaker_type", EmitDefaultValue=true)]
        public TieBreakerTypeEnum TieBreakerType { get; set; }

        /// <summary>
        /// Gets or Sets TieBreakerCustomResult
        /// </summary>
        [DataMember(Name="tie_breaker_custom_result", EmitDefaultValue=true)]
        public QuizPinResult TieBreakerCustomResult { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class QuizPinData {\n");
            sb.Append("  Questions: ").Append(Questions).Append("\n");
            sb.Append("  Results: ").Append(Results).Append("\n");
            sb.Append("  TieBreakerType: ").Append(TieBreakerType).Append("\n");
            sb.Append("  TieBreakerCustomResult: ").Append(TieBreakerCustomResult).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((QuizPinData)obj);
        }

        /// <summary>
        /// Returns true if QuizPinData instances are equal
        /// </summary>
        /// <param name="other">Instance of QuizPinData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(QuizPinData other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Questions == other.Questions ||
                    Questions != null &&
                    other.Questions != null &&
                    Questions.SequenceEqual(other.Questions)
                ) && 
                (
                    Results == other.Results ||
                    Results != null &&
                    other.Results != null &&
                    Results.SequenceEqual(other.Results)
                ) && 
                (
                    TieBreakerType == other.TieBreakerType ||
                    
                    TieBreakerType.Equals(other.TieBreakerType)
                ) && 
                (
                    TieBreakerCustomResult == other.TieBreakerCustomResult ||
                    TieBreakerCustomResult != null &&
                    TieBreakerCustomResult.Equals(other.TieBreakerCustomResult)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Questions != null)
                    hashCode = hashCode * 59 + Questions.GetHashCode();
                    if (Results != null)
                    hashCode = hashCode * 59 + Results.GetHashCode();
                    
                    hashCode = hashCode * 59 + TieBreakerType.GetHashCode();
                    if (TieBreakerCustomResult != null)
                    hashCode = hashCode * 59 + TieBreakerCustomResult.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(QuizPinData left, QuizPinData right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(QuizPinData left, QuizPinData right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
