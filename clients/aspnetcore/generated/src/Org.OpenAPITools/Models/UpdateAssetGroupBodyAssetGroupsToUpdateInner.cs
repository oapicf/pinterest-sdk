/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class UpdateAssetGroupBodyAssetGroupsToUpdateInner : IEquatable<UpdateAssetGroupBodyAssetGroupsToUpdateInner>
    {
        /// <summary>
        /// Unique identifier of the asset group to update.
        /// </summary>
        /// <value>Unique identifier of the asset group to update.</value>
        /* <example>666791336903426391</example> */
        [Required]
        [DataMember(Name="asset_group_id", EmitDefaultValue=false)]
        public string AssetGroupId { get; set; }

        /// <summary>
        /// Asset Group name
        /// </summary>
        /// <value>Asset Group name</value>
        /* <example>Canada Ad Accounts</example> */
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Asset group description
        /// </summary>
        /// <value>Asset group description</value>
        /* <example>Asset groups that has ad accounts shared in Canada</example> */
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Asset Group Types. Note: The asset group types are used for user reference and categorization purposes only and do not impact the functionality of the asset group.
        /// </summary>
        /// <value>Asset Group Types. Note: The asset group types are used for user reference and categorization purposes only and do not impact the functionality of the asset group.</value>
        /* <example>[&quot;BRAND&quot;,&quot;LOCATION_OR_LANGUAGE&quot;,&quot;PRODUCT_LINE&quot;,&quot;OTHER&quot;]</example> */
        [DataMember(Name="asset_group_types", EmitDefaultValue=false)]
        public List<AssetGroupType> AssetGroupTypes { get; set; }

        /// <summary>
        /// A list of asset ids to add to the asset group.
        /// </summary>
        /// <value>A list of asset ids to add to the asset group.</value>
        [DataMember(Name="assets_to_add", EmitDefaultValue=false)]
        public List<string> AssetsToAdd { get; set; }

        /// <summary>
        /// A list of asset ids to remove from the asset group.
        /// </summary>
        /// <value>A list of asset ids to remove from the asset group.</value>
        [DataMember(Name="assets_to_remove", EmitDefaultValue=false)]
        public List<string> AssetsToRemove { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpdateAssetGroupBodyAssetGroupsToUpdateInner {\n");
            sb.Append("  AssetGroupId: ").Append(AssetGroupId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  AssetGroupTypes: ").Append(AssetGroupTypes).Append("\n");
            sb.Append("  AssetsToAdd: ").Append(AssetsToAdd).Append("\n");
            sb.Append("  AssetsToRemove: ").Append(AssetsToRemove).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((UpdateAssetGroupBodyAssetGroupsToUpdateInner)obj);
        }

        /// <summary>
        /// Returns true if UpdateAssetGroupBodyAssetGroupsToUpdateInner instances are equal
        /// </summary>
        /// <param name="other">Instance of UpdateAssetGroupBodyAssetGroupsToUpdateInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateAssetGroupBodyAssetGroupsToUpdateInner other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    AssetGroupId == other.AssetGroupId ||
                    AssetGroupId != null &&
                    AssetGroupId.Equals(other.AssetGroupId)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    AssetGroupTypes == other.AssetGroupTypes ||
                    AssetGroupTypes != null &&
                    other.AssetGroupTypes != null &&
                    AssetGroupTypes.SequenceEqual(other.AssetGroupTypes)
                ) && 
                (
                    AssetsToAdd == other.AssetsToAdd ||
                    AssetsToAdd != null &&
                    other.AssetsToAdd != null &&
                    AssetsToAdd.SequenceEqual(other.AssetsToAdd)
                ) && 
                (
                    AssetsToRemove == other.AssetsToRemove ||
                    AssetsToRemove != null &&
                    other.AssetsToRemove != null &&
                    AssetsToRemove.SequenceEqual(other.AssetsToRemove)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (AssetGroupId != null)
                    hashCode = hashCode * 59 + AssetGroupId.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (AssetGroupTypes != null)
                    hashCode = hashCode * 59 + AssetGroupTypes.GetHashCode();
                    if (AssetsToAdd != null)
                    hashCode = hashCode * 59 + AssetsToAdd.GetHashCode();
                    if (AssetsToRemove != null)
                    hashCode = hashCode * 59 + AssetsToRemove.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(UpdateAssetGroupBodyAssetGroupsToUpdateInner left, UpdateAssetGroupBodyAssetGroupsToUpdateInner right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(UpdateAssetGroupBodyAssetGroupsToUpdateInner left, UpdateAssetGroupBodyAssetGroupsToUpdateInner right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
