/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// Object describing an item batch record to update items
    /// </summary>
    [DataContract]
    public partial class ItemUpdateBatchRecord : IEquatable<ItemUpdateBatchRecord>
    {
        /// <summary>
        /// The catalog item id in the merchant namespace
        /// </summary>
        /// <value>The catalog item id in the merchant namespace</value>
        /* <example>DS0294-M</example> */
        [DataMember(Name="item_id", EmitDefaultValue=false)]
        public string ItemId { get; set; }

        /// <summary>
        /// Gets or Sets Attributes
        /// </summary>
        [DataMember(Name="attributes", EmitDefaultValue=false)]
        public UpdatableItemAttributes Attributes { get; set; }

        /// <summary>
        /// The list of product attributes to be updated. Attributes specified in the update mask without a value specified in the body will be deleted from the product item.
        /// </summary>
        /// <value>The list of product attributes to be updated. Attributes specified in the update mask without a value specified in the body will be deleted from the product item.</value>
        /* <example>[&quot;ad_link&quot;,&quot;adult&quot;,&quot;age_group&quot;,&quot;availability&quot;,&quot;average_review_rating&quot;,&quot;brand&quot;,&quot;checkout_enabled&quot;,&quot;color&quot;,&quot;condition&quot;,&quot;custom_label_0&quot;,&quot;custom_label_1&quot;,&quot;custom_label_2&quot;,&quot;custom_label_3&quot;,&quot;custom_label_4&quot;,&quot;description&quot;,&quot;free_shipping_label&quot;,&quot;free_shipping_limit&quot;,&quot;gender&quot;,&quot;google_product_category&quot;,&quot;gtin&quot;,&quot;item_group_id&quot;,&quot;last_updated_time&quot;,&quot;link&quot;,&quot;material&quot;,&quot;min_ad_price&quot;,&quot;mpn&quot;,&quot;number_of_ratings&quot;,&quot;number_of_reviews&quot;,&quot;pattern&quot;,&quot;price&quot;,&quot;product_type&quot;,&quot;sale_price&quot;,&quot;shipping&quot;,&quot;shipping_height&quot;,&quot;shipping_weight&quot;,&quot;shipping_width&quot;,&quot;size&quot;,&quot;size_system&quot;,&quot;size_type&quot;,&quot;tax&quot;,&quot;title&quot;,&quot;variant_names&quot;,&quot;variant_values&quot;]</example> */
        [DataMember(Name="update_mask", EmitDefaultValue=true)]
        public List<UpdateMaskFieldType> UpdateMask { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ItemUpdateBatchRecord {\n");
            sb.Append("  ItemId: ").Append(ItemId).Append("\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("  UpdateMask: ").Append(UpdateMask).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ItemUpdateBatchRecord)obj);
        }

        /// <summary>
        /// Returns true if ItemUpdateBatchRecord instances are equal
        /// </summary>
        /// <param name="other">Instance of ItemUpdateBatchRecord to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ItemUpdateBatchRecord other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ItemId == other.ItemId ||
                    ItemId != null &&
                    ItemId.Equals(other.ItemId)
                ) && 
                (
                    Attributes == other.Attributes ||
                    Attributes != null &&
                    Attributes.Equals(other.Attributes)
                ) && 
                (
                    UpdateMask == other.UpdateMask ||
                    UpdateMask != null &&
                    other.UpdateMask != null &&
                    UpdateMask.SequenceEqual(other.UpdateMask)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ItemId != null)
                    hashCode = hashCode * 59 + ItemId.GetHashCode();
                    if (Attributes != null)
                    hashCode = hashCode * 59 + Attributes.GetHashCode();
                    if (UpdateMask != null)
                    hashCode = hashCode * 59 + UpdateMask.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ItemUpdateBatchRecord left, ItemUpdateBatchRecord right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ItemUpdateBatchRecord left, ItemUpdateBatchRecord right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
