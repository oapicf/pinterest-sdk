/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// The main hotel image
    /// </summary>
    [DataContract]
    public partial class CatalogsHotelAttributesAllOfMainImage : IEquatable<CatalogsHotelAttributesAllOfMainImage>
    {
        /// <summary>
        /// &lt;p&gt;&lt;&#x3D; 2000 characters&lt;/p&gt; &lt;p&gt;The link to the main hotel image. Image should be at least 75x75 pixels to avoid errors. Use the additional_image_link field to add more images of your hotel. The URL of your main_image.link must be accessible by the Pinterest user-agent, and send the accurate image. Please make sure there is no template or placeholder image at the link. Must start with http:// or https://.&lt;/p&gt;
        /// </summary>
        /// <value>&lt;p&gt;&lt;&#x3D; 2000 characters&lt;/p&gt; &lt;p&gt;The link to the main hotel image. Image should be at least 75x75 pixels to avoid errors. Use the additional_image_link field to add more images of your hotel. The URL of your main_image.link must be accessible by the Pinterest user-agent, and send the accurate image. Please make sure there is no template or placeholder image at the link. Must start with http:// or https://.&lt;/p&gt;</value>
        [DataMember(Name="link", EmitDefaultValue=false)]
        public string Link { get; set; }

        /// <summary>
        /// Tag appended to the image that identifies image category or details. There can be multiple tags associated with an image
        /// </summary>
        /// <value>Tag appended to the image that identifies image category or details. There can be multiple tags associated with an image</value>
        [DataMember(Name="tag", EmitDefaultValue=true)]
        public List<string> Tag { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CatalogsHotelAttributesAllOfMainImage {\n");
            sb.Append("  Link: ").Append(Link).Append("\n");
            sb.Append("  Tag: ").Append(Tag).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CatalogsHotelAttributesAllOfMainImage)obj);
        }

        /// <summary>
        /// Returns true if CatalogsHotelAttributesAllOfMainImage instances are equal
        /// </summary>
        /// <param name="other">Instance of CatalogsHotelAttributesAllOfMainImage to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CatalogsHotelAttributesAllOfMainImage other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Link == other.Link ||
                    Link != null &&
                    Link.Equals(other.Link)
                ) && 
                (
                    Tag == other.Tag ||
                    Tag != null &&
                    other.Tag != null &&
                    Tag.SequenceEqual(other.Tag)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Link != null)
                    hashCode = hashCode * 59 + Link.GetHashCode();
                    if (Tag != null)
                    hashCode = hashCode * 59 + Tag.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(CatalogsHotelAttributesAllOfMainImage left, CatalogsHotelAttributesAllOfMainImage right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CatalogsHotelAttributesAllOfMainImage left, CatalogsHotelAttributesAllOfMainImage right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
