/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// This represents a mapping from placement to a bid price adjustment.  Multiplier values must be between 0 and 10. A value of 10 represents a 900% increase in bid price (from $1 to $10 for example). A value of 0 will stop distribution for this item on the specified placement in &#x60;MAX_BID&#x60; ad groups in &#x60;CATALOG_SALES&#x60; campaigns. All placement multipliers must be set at the same time. If a multiplier is not provided it is assumed to be 1 (no bid adjustment).
    /// </summary>
    [DataContract]
    public partial class PlacementMultipliers : IEquatable<PlacementMultipliers>
    {

        /// <summary>
        /// Gets or Sets PLACEMENT
        /// </summary>
        [TypeConverter(typeof(CustomEnumConverter<PLACEMENTEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum PLACEMENTEnum
        {
            
            /// <summary>
            /// Enum SEARCHEnum for SEARCH
            /// </summary>
            [EnumMember(Value = "SEARCH")]
            SEARCHEnum = 1,
            
            /// <summary>
            /// Enum BROWSEEnum for BROWSE
            /// </summary>
            [EnumMember(Value = "BROWSE")]
            BROWSEEnum = 2
        }

        /// <summary>
        /// Gets or Sets PLACEMENT
        /// </summary>
        [DataMember(Name="PLACEMENT", EmitDefaultValue=true)]
        public PLACEMENTEnum PLACEMENT { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PlacementMultipliers {\n");
            sb.Append("  PLACEMENT: ").Append(PLACEMENT).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PlacementMultipliers)obj);
        }

        /// <summary>
        /// Returns true if PlacementMultipliers instances are equal
        /// </summary>
        /// <param name="other">Instance of PlacementMultipliers to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PlacementMultipliers other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    PLACEMENT == other.PLACEMENT ||
                    
                    PLACEMENT.Equals(other.PLACEMENT)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + PLACEMENT.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(PlacementMultipliers left, PlacementMultipliers right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PlacementMultipliers left, PlacementMultipliers right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
