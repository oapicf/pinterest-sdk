/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class CatalogsFeedProcessingResult : IEquatable<CatalogsFeedProcessingResult>
    {
        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        /* <example>2022-03-14T15:15:22Z</example> */
        [Required]
        [DataMember(Name="created_at", EmitDefaultValue=true)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [Required]
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        /* <example>2022-03-14T15:16:34Z</example> */
        [Required]
        [DataMember(Name="updated_at", EmitDefaultValue=true)]
        public DateTime UpdatedAt { get; set; }

        /// <summary>
        /// Gets or Sets IngestionDetails
        /// </summary>
        [Required]
        [DataMember(Name="ingestion_details", EmitDefaultValue=false)]
        public CatalogsFeedIngestionDetails IngestionDetails { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [Required]
        [DataMember(Name="status", EmitDefaultValue=true)]
        public CatalogsFeedProcessingStatus Status { get; set; }

        /// <summary>
        /// Gets or Sets ProductCounts
        /// </summary>
        [Required]
        [DataMember(Name="product_counts", EmitDefaultValue=true)]
        public CatalogsFeedProductCounts ProductCounts { get; set; }

        /// <summary>
        /// Gets or Sets ValidationDetails
        /// </summary>
        [Required]
        [DataMember(Name="validation_details", EmitDefaultValue=false)]
        public CatalogsFeedValidationDetails ValidationDetails { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CatalogsFeedProcessingResult {\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  IngestionDetails: ").Append(IngestionDetails).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  ProductCounts: ").Append(ProductCounts).Append("\n");
            sb.Append("  ValidationDetails: ").Append(ValidationDetails).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CatalogsFeedProcessingResult)obj);
        }

        /// <summary>
        /// Returns true if CatalogsFeedProcessingResult instances are equal
        /// </summary>
        /// <param name="other">Instance of CatalogsFeedProcessingResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CatalogsFeedProcessingResult other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    CreatedAt == other.CreatedAt ||
                    
                    CreatedAt.Equals(other.CreatedAt)
                ) && 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    UpdatedAt == other.UpdatedAt ||
                    
                    UpdatedAt.Equals(other.UpdatedAt)
                ) && 
                (
                    IngestionDetails == other.IngestionDetails ||
                    IngestionDetails != null &&
                    IngestionDetails.Equals(other.IngestionDetails)
                ) && 
                (
                    Status == other.Status ||
                    
                    Status.Equals(other.Status)
                ) && 
                (
                    ProductCounts == other.ProductCounts ||
                    ProductCounts != null &&
                    ProductCounts.Equals(other.ProductCounts)
                ) && 
                (
                    ValidationDetails == other.ValidationDetails ||
                    ValidationDetails != null &&
                    ValidationDetails.Equals(other.ValidationDetails)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + CreatedAt.GetHashCode();
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    
                    hashCode = hashCode * 59 + UpdatedAt.GetHashCode();
                    if (IngestionDetails != null)
                    hashCode = hashCode * 59 + IngestionDetails.GetHashCode();
                    
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    if (ProductCounts != null)
                    hashCode = hashCode * 59 + ProductCounts.GetHashCode();
                    if (ValidationDetails != null)
                    hashCode = hashCode * 59 + ValidationDetails.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(CatalogsFeedProcessingResult left, CatalogsFeedProcessingResult right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CatalogsFeedProcessingResult left, CatalogsFeedProcessingResult right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
