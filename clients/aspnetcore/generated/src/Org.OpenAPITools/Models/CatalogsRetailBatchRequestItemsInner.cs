/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using JsonSubTypes;
using Swashbuckle.AspNetCore.Annotations;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "Operation")]
    [SwaggerDiscriminator("Operation")]
    [JsonSubtypes.KnownSubType(typeof(CatalogsCreateRetailItem), "CREATE")]
    [SwaggerSubType(typeof(CatalogsCreateRetailItem), DiscriminatorValue =  "CREATE")]
    [JsonSubtypes.KnownSubType(typeof(CatalogsDeleteRetailItem), "DELETE")]
    [SwaggerSubType(typeof(CatalogsDeleteRetailItem), DiscriminatorValue =  "DELETE")]
    [JsonSubtypes.KnownSubType(typeof(CatalogsUpdateRetailItem), "UPDATE")]
    [SwaggerSubType(typeof(CatalogsUpdateRetailItem), DiscriminatorValue =  "UPDATE")]
    [JsonSubtypes.KnownSubType(typeof(CatalogsUpsertRetailItem), "UPSERT")]
    [SwaggerSubType(typeof(CatalogsUpsertRetailItem), DiscriminatorValue =  "UPSERT")]
    public partial class CatalogsRetailBatchRequestItemsInner : IEquatable<CatalogsRetailBatchRequestItemsInner>
    {
        /// <summary>
        /// The catalog item id in the merchant namespace
        /// </summary>
        /// <value>The catalog item id in the merchant namespace</value>
        /* <example>DS0294-M</example> */
        [Required]
        [DataMember(Name="item_id", EmitDefaultValue=false)]
        public string ItemId { get; set; }


        /// <summary>
        /// Gets or Sets Operation
        /// </summary>
        [TypeConverter(typeof(CustomEnumConverter<OperationEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum OperationEnum
        {
            
            /// <summary>
            /// Enum DELETEEnum for DELETE
            /// </summary>
            [EnumMember(Value = "DELETE")]
            DELETEEnum = 1
        }

        /// <summary>
        /// Gets or Sets Operation
        /// </summary>
        [Required]
        [DataMember(Name="operation", EmitDefaultValue=true)]
        public OperationEnum Operation { get; set; }

        /// <summary>
        /// Gets or Sets Attributes
        /// </summary>
        [Required]
        [DataMember(Name="attributes", EmitDefaultValue=false)]
        public ItemAttributesRequest Attributes { get; set; }

        /// <summary>
        /// The list of product attributes to be updated. Attributes specified in the update mask without a value specified in the body will be deleted from the product item.
        /// </summary>
        /// <value>The list of product attributes to be updated. Attributes specified in the update mask without a value specified in the body will be deleted from the product item.</value>
        /* <example>[ad_link, adult, age_group, availability, average_review_rating, brand, checkout_enabled, color, condition, custom_label_0, custom_label_1, custom_label_2, custom_label_3, custom_label_4, description, free_shipping_label, free_shipping_limit, gender, google_product_category, gtin, item_group_id, last_updated_time, link, material, min_ad_price, mpn, number_of_ratings, number_of_reviews, pattern, price, product_type, sale_price, shipping, shipping_height, shipping_weight, shipping_width, size, size_system, size_type, tax, title, variant_names, variant_values]</example> */
        [DataMember(Name="update_mask", EmitDefaultValue=true)]
        public List<UpdateMaskFieldType> UpdateMask { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CatalogsRetailBatchRequestItemsInner {\n");
            sb.Append("  ItemId: ").Append(ItemId).Append("\n");
            sb.Append("  Operation: ").Append(Operation).Append("\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("  UpdateMask: ").Append(UpdateMask).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CatalogsRetailBatchRequestItemsInner)obj);
        }

        /// <summary>
        /// Returns true if CatalogsRetailBatchRequestItemsInner instances are equal
        /// </summary>
        /// <param name="other">Instance of CatalogsRetailBatchRequestItemsInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CatalogsRetailBatchRequestItemsInner other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ItemId == other.ItemId ||
                    ItemId != null &&
                    ItemId.Equals(other.ItemId)
                ) && 
                (
                    Operation == other.Operation ||
                    
                    Operation.Equals(other.Operation)
                ) && 
                (
                    Attributes == other.Attributes ||
                    Attributes != null &&
                    Attributes.Equals(other.Attributes)
                ) && 
                (
                    UpdateMask == other.UpdateMask ||
                    UpdateMask != null &&
                    other.UpdateMask != null &&
                    UpdateMask.SequenceEqual(other.UpdateMask)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ItemId != null)
                    hashCode = hashCode * 59 + ItemId.GetHashCode();
                    
                    hashCode = hashCode * 59 + Operation.GetHashCode();
                    if (Attributes != null)
                    hashCode = hashCode * 59 + Attributes.GetHashCode();
                    if (UpdateMask != null)
                    hashCode = hashCode * 59 + UpdateMask.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(CatalogsRetailBatchRequestItemsInner left, CatalogsRetailBatchRequestItemsInner right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CatalogsRetailBatchRequestItemsInner left, CatalogsRetailBatchRequestItemsInner right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
