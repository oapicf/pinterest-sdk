/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// Pin
    /// </summary>
    [DataContract]
    public partial class Pin : IEquatable<Pin>
    {
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        /* <example>813744226420795884</example> */
        [RegularExpression("^\\d+$")]
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        /* <example>2020-01-01T20:10:40Z</example> */
        [DataMember(Name="created_at", EmitDefaultValue=true)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Link
        /// </summary>
        /* <example>https://www.pinterest.com/</example> */
        [MaxLength(2048)]
        [DataMember(Name="link", EmitDefaultValue=true)]
        public string Link { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name="title", EmitDefaultValue=true)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=true)]
        public string Description { get; set; }

        /// <summary>
        /// Dominant pin color. Hex number, e.g. \\\&quot;#6E7874\\\&quot;.
        /// </summary>
        /// <value>Dominant pin color. Hex number, e.g. \\\&quot;#6E7874\\\&quot;.</value>
        /* <example>#6E7874</example> */
        [DataMember(Name="dominant_color", EmitDefaultValue=true)]
        public string DominantColor { get; set; }

        /// <summary>
        /// Gets or Sets AltText
        /// </summary>
        [MaxLength(500)]
        [DataMember(Name="alt_text", EmitDefaultValue=true)]
        public string AltText { get; set; }

        /// <summary>
        /// Gets or Sets CreativeType
        /// </summary>
        [DataMember(Name="creative_type", EmitDefaultValue=true)]
        public CreativeType? CreativeType { get; set; }

        /// <summary>
        /// The board to which this Pin belongs.
        /// </summary>
        /// <value>The board to which this Pin belongs.</value>
        [RegularExpression("^\\d+$")]
        [DataMember(Name="board_id", EmitDefaultValue=false)]
        public string BoardId { get; set; }

        /// <summary>
        /// The board section to which this Pin belongs.
        /// </summary>
        /// <value>The board section to which this Pin belongs.</value>
        [RegularExpression("^\\d+$")]
        [DataMember(Name="board_section_id", EmitDefaultValue=true)]
        public string BoardSectionId { get; set; }

        /// <summary>
        /// Gets or Sets BoardOwner
        /// </summary>
        [DataMember(Name="board_owner", EmitDefaultValue=false)]
        public BoardOwner BoardOwner { get; set; }

        /// <summary>
        /// Whether the \&quot;operation user_account\&quot; is the Pin owner.
        /// </summary>
        /// <value>Whether the \&quot;operation user_account\&quot; is the Pin owner.</value>
        [DataMember(Name="is_owner", EmitDefaultValue=true)]
        public bool IsOwner { get; set; }

        /// <summary>
        /// Gets or Sets Media
        /// </summary>
        [DataMember(Name="media", EmitDefaultValue=false)]
        public PinMedia Media { get; set; }

        /// <summary>
        /// Gets or Sets MediaSource
        /// </summary>
        [DataMember(Name="media_source", EmitDefaultValue=false)]
        public PinMediaSource MediaSource { get; set; }

        /// <summary>
        /// The source pin id if this pin was saved from another pin. &lt;a href&#x3D;\&quot;https://help.pinterest.com/article/save-pins-on-pinterest\&quot;&gt;Learn more&lt;/a&gt;.
        /// </summary>
        /// <value>The source pin id if this pin was saved from another pin. &lt;a href&#x3D;\&quot;https://help.pinterest.com/article/save-pins-on-pinterest\&quot;&gt;Learn more&lt;/a&gt;.</value>
        [RegularExpression("^\\d+$")]
        [DataMember(Name="parent_pin_id", EmitDefaultValue=true)]
        public string ParentPinId { get; set; }

        /// <summary>
        /// Whether the Pin is standard or not. See documentation on &lt;a href&#x3D;\&quot;/docs/api-features/content-overview/\&quot;&gt;Changes to Pin creation&lt;/a&gt; for more information.
        /// </summary>
        /// <value>Whether the Pin is standard or not. See documentation on &lt;a href&#x3D;\&quot;/docs/api-features/content-overview/\&quot;&gt;Changes to Pin creation&lt;/a&gt; for more information.</value>
        [DataMember(Name="is_standard", EmitDefaultValue=true)]
        public bool IsStandard { get; set; }

        /// <summary>
        /// Whether the Pin has been promoted or not.
        /// </summary>
        /// <value>Whether the Pin has been promoted or not.</value>
        [DataMember(Name="has_been_promoted", EmitDefaultValue=true)]
        public bool HasBeenPromoted { get; set; }

        /// <summary>
        /// Private note for this Pin. &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/article/add-notes-to-your-pins\&quot;&gt;Learn more&lt;/a&gt;.
        /// </summary>
        /// <value>Private note for this Pin. &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/article/add-notes-to-your-pins\&quot;&gt;Learn more&lt;/a&gt;.</value>
        [DataMember(Name="note", EmitDefaultValue=true)]
        public string Note { get; set; }

        /// <summary>
        /// Pin metrics with associated time intervals if any.
        /// </summary>
        /// <value>Pin metrics with associated time intervals if any.</value>
        /* <example>{&quot;90d&quot;:{&quot;pin_click&quot;:7,&quot;impression&quot;:2,&quot;clickthrough&quot;:3},&quot;lifetime_metrics&quot;:{&quot;pin_click&quot;:7,&quot;impression&quot;:2,&quot;clickthrough&quot;:3,&quot;reaction&quot;:10,&quot;comment&quot;:2}}</example> */
        [DataMember(Name="pin_metrics", EmitDefaultValue=true)]
        public Object PinMetrics { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Pin {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Link: ").Append(Link).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DominantColor: ").Append(DominantColor).Append("\n");
            sb.Append("  AltText: ").Append(AltText).Append("\n");
            sb.Append("  CreativeType: ").Append(CreativeType).Append("\n");
            sb.Append("  BoardId: ").Append(BoardId).Append("\n");
            sb.Append("  BoardSectionId: ").Append(BoardSectionId).Append("\n");
            sb.Append("  BoardOwner: ").Append(BoardOwner).Append("\n");
            sb.Append("  IsOwner: ").Append(IsOwner).Append("\n");
            sb.Append("  Media: ").Append(Media).Append("\n");
            sb.Append("  MediaSource: ").Append(MediaSource).Append("\n");
            sb.Append("  ParentPinId: ").Append(ParentPinId).Append("\n");
            sb.Append("  IsStandard: ").Append(IsStandard).Append("\n");
            sb.Append("  HasBeenPromoted: ").Append(HasBeenPromoted).Append("\n");
            sb.Append("  Note: ").Append(Note).Append("\n");
            sb.Append("  PinMetrics: ").Append(PinMetrics).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Pin)obj);
        }

        /// <summary>
        /// Returns true if Pin instances are equal
        /// </summary>
        /// <param name="other">Instance of Pin to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Pin other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    CreatedAt == other.CreatedAt ||
                    
                    CreatedAt.Equals(other.CreatedAt)
                ) && 
                (
                    Link == other.Link ||
                    Link != null &&
                    Link.Equals(other.Link)
                ) && 
                (
                    Title == other.Title ||
                    Title != null &&
                    Title.Equals(other.Title)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    DominantColor == other.DominantColor ||
                    DominantColor != null &&
                    DominantColor.Equals(other.DominantColor)
                ) && 
                (
                    AltText == other.AltText ||
                    AltText != null &&
                    AltText.Equals(other.AltText)
                ) && 
                (
                    CreativeType == other.CreativeType ||
                    
                    CreativeType.Equals(other.CreativeType)
                ) && 
                (
                    BoardId == other.BoardId ||
                    BoardId != null &&
                    BoardId.Equals(other.BoardId)
                ) && 
                (
                    BoardSectionId == other.BoardSectionId ||
                    BoardSectionId != null &&
                    BoardSectionId.Equals(other.BoardSectionId)
                ) && 
                (
                    BoardOwner == other.BoardOwner ||
                    BoardOwner != null &&
                    BoardOwner.Equals(other.BoardOwner)
                ) && 
                (
                    IsOwner == other.IsOwner ||
                    
                    IsOwner.Equals(other.IsOwner)
                ) && 
                (
                    Media == other.Media ||
                    Media != null &&
                    Media.Equals(other.Media)
                ) && 
                (
                    MediaSource == other.MediaSource ||
                    MediaSource != null &&
                    MediaSource.Equals(other.MediaSource)
                ) && 
                (
                    ParentPinId == other.ParentPinId ||
                    ParentPinId != null &&
                    ParentPinId.Equals(other.ParentPinId)
                ) && 
                (
                    IsStandard == other.IsStandard ||
                    
                    IsStandard.Equals(other.IsStandard)
                ) && 
                (
                    HasBeenPromoted == other.HasBeenPromoted ||
                    
                    HasBeenPromoted.Equals(other.HasBeenPromoted)
                ) && 
                (
                    Note == other.Note ||
                    Note != null &&
                    Note.Equals(other.Note)
                ) && 
                (
                    PinMetrics == other.PinMetrics ||
                    PinMetrics != null &&
                    PinMetrics.Equals(other.PinMetrics)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    
                    hashCode = hashCode * 59 + CreatedAt.GetHashCode();
                    if (Link != null)
                    hashCode = hashCode * 59 + Link.GetHashCode();
                    if (Title != null)
                    hashCode = hashCode * 59 + Title.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (DominantColor != null)
                    hashCode = hashCode * 59 + DominantColor.GetHashCode();
                    if (AltText != null)
                    hashCode = hashCode * 59 + AltText.GetHashCode();
                    
                    hashCode = hashCode * 59 + CreativeType.GetHashCode();
                    if (BoardId != null)
                    hashCode = hashCode * 59 + BoardId.GetHashCode();
                    if (BoardSectionId != null)
                    hashCode = hashCode * 59 + BoardSectionId.GetHashCode();
                    if (BoardOwner != null)
                    hashCode = hashCode * 59 + BoardOwner.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsOwner.GetHashCode();
                    if (Media != null)
                    hashCode = hashCode * 59 + Media.GetHashCode();
                    if (MediaSource != null)
                    hashCode = hashCode * 59 + MediaSource.GetHashCode();
                    if (ParentPinId != null)
                    hashCode = hashCode * 59 + ParentPinId.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsStandard.GetHashCode();
                    
                    hashCode = hashCode * 59 + HasBeenPromoted.GetHashCode();
                    if (Note != null)
                    hashCode = hashCode * 59 + Note.GetHashCode();
                    if (PinMetrics != null)
                    hashCode = hashCode * 59 + PinMetrics.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Pin left, Pin right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Pin left, Pin right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
