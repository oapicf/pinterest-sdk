/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class TopVideoPinsAnalyticsResponse : IEquatable<TopVideoPinsAnalyticsResponse>
    {
        /// <summary>
        /// Gets or Sets DateAvailability
        /// </summary>
        [DataMember(Name="date_availability", EmitDefaultValue=false)]
        public TopPinsAnalyticsResponseDateAvailability DateAvailability { get; set; }

        /// <summary>
        /// Gets or Sets Pins
        /// </summary>
        [DataMember(Name="pins", EmitDefaultValue=false)]
        public List<TopVideoPinsAnalyticsResponsePinsInner> Pins { get; set; }


        /// <summary>
        /// Gets or Sets SortBy
        /// </summary>
        [TypeConverter(typeof(CustomEnumConverter<SortByEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum SortByEnum
        {
            
            /// <summary>
            /// Enum SAVEEnum for SAVE
            /// </summary>
            [EnumMember(Value = "SAVE")]
            SAVEEnum = 1,
            
            /// <summary>
            /// Enum IMPRESSIONEnum for IMPRESSION
            /// </summary>
            [EnumMember(Value = "IMPRESSION")]
            IMPRESSIONEnum = 2,
            
            /// <summary>
            /// Enum OUTBOUNDCLICKEnum for OUTBOUND_CLICK
            /// </summary>
            [EnumMember(Value = "OUTBOUND_CLICK")]
            OUTBOUNDCLICKEnum = 3,
            
            /// <summary>
            /// Enum VIDEOMRCVIEWEnum for VIDEO_MRC_VIEW
            /// </summary>
            [EnumMember(Value = "VIDEO_MRC_VIEW")]
            VIDEOMRCVIEWEnum = 4,
            
            /// <summary>
            /// Enum VIDEOAVGWATCHTIMEEnum for VIDEO_AVG_WATCH_TIME
            /// </summary>
            [EnumMember(Value = "VIDEO_AVG_WATCH_TIME")]
            VIDEOAVGWATCHTIMEEnum = 5,
            
            /// <summary>
            /// Enum VIDEOV50WATCHTIMEEnum for VIDEO_V50_WATCH_TIME
            /// </summary>
            [EnumMember(Value = "VIDEO_V50_WATCH_TIME")]
            VIDEOV50WATCHTIMEEnum = 6,
            
            /// <summary>
            /// Enum QUARTILE95PERCENTVIEWEnum for QUARTILE_95_PERCENT_VIEW
            /// </summary>
            [EnumMember(Value = "QUARTILE_95_PERCENT_VIEW")]
            QUARTILE95PERCENTVIEWEnum = 7,
            
            /// <summary>
            /// Enum VIDEO10SVIEWEnum for VIDEO_10S_VIEW
            /// </summary>
            [EnumMember(Value = "VIDEO_10S_VIEW")]
            VIDEO10SVIEWEnum = 8,
            
            /// <summary>
            /// Enum VIDEOSTARTEnum for VIDEO_START
            /// </summary>
            [EnumMember(Value = "VIDEO_START")]
            VIDEOSTARTEnum = 9
        }

        /// <summary>
        /// Gets or Sets SortBy
        /// </summary>
        /* <example>IMPRESSION</example> */
        [DataMember(Name="sort_by", EmitDefaultValue=true)]
        public SortByEnum SortBy { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TopVideoPinsAnalyticsResponse {\n");
            sb.Append("  DateAvailability: ").Append(DateAvailability).Append("\n");
            sb.Append("  Pins: ").Append(Pins).Append("\n");
            sb.Append("  SortBy: ").Append(SortBy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((TopVideoPinsAnalyticsResponse)obj);
        }

        /// <summary>
        /// Returns true if TopVideoPinsAnalyticsResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of TopVideoPinsAnalyticsResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TopVideoPinsAnalyticsResponse other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    DateAvailability == other.DateAvailability ||
                    DateAvailability != null &&
                    DateAvailability.Equals(other.DateAvailability)
                ) && 
                (
                    Pins == other.Pins ||
                    Pins != null &&
                    other.Pins != null &&
                    Pins.SequenceEqual(other.Pins)
                ) && 
                (
                    SortBy == other.SortBy ||
                    
                    SortBy.Equals(other.SortBy)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (DateAvailability != null)
                    hashCode = hashCode * 59 + DateAvailability.GetHashCode();
                    if (Pins != null)
                    hashCode = hashCode * 59 + Pins.GetHashCode();
                    
                    hashCode = hashCode * 59 + SortBy.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(TopVideoPinsAnalyticsResponse left, TopVideoPinsAnalyticsResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(TopVideoPinsAnalyticsResponse left, TopVideoPinsAnalyticsResponse right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
