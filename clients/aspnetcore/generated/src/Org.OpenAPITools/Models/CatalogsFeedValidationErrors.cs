/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class CatalogsFeedValidationErrors : IEquatable<CatalogsFeedValidationErrors>
    {
        /// <summary>
        /// Pinterest couldn&#39;t download your feed.
        /// </summary>
        /// <value>Pinterest couldn&#39;t download your feed.</value>
        [DataMember(Name="FETCH_ERROR", EmitDefaultValue=true)]
        public int FETCH_ERROR { get; set; }

        /// <summary>
        /// Your feed wasn&#39;t ingested because it hasn’t changed in the previous 90 days.
        /// </summary>
        /// <value>Your feed wasn&#39;t ingested because it hasn’t changed in the previous 90 days.</value>
        [DataMember(Name="FETCH_INACTIVE_FEED_ERROR", EmitDefaultValue=true)]
        public int FETCH_INACTIVE_FEED_ERROR { get; set; }

        /// <summary>
        /// Your feed includes data with an unsupported encoding format.
        /// </summary>
        /// <value>Your feed includes data with an unsupported encoding format.</value>
        [DataMember(Name="ENCODING_ERROR", EmitDefaultValue=true)]
        public int ENCODING_ERROR { get; set; }

        /// <summary>
        /// Your feed includes data with formatting errors.
        /// </summary>
        /// <value>Your feed includes data with formatting errors.</value>
        [DataMember(Name="DELIMITER_ERROR", EmitDefaultValue=true)]
        public int DELIMITER_ERROR { get; set; }

        /// <summary>
        /// Your feed is missing some required column headers.
        /// </summary>
        /// <value>Your feed is missing some required column headers.</value>
        [DataMember(Name="REQUIRED_COLUMNS_MISSING", EmitDefaultValue=true)]
        public int REQUIRED_COLUMNS_MISSING { get; set; }

        /// <summary>
        /// Some products are duplicated.
        /// </summary>
        /// <value>Some products are duplicated.</value>
        [DataMember(Name="DUPLICATE_PRODUCTS", EmitDefaultValue=true)]
        public int DUPLICATE_PRODUCTS { get; set; }

        /// <summary>
        /// Some image links are formatted incorrectly.
        /// </summary>
        /// <value>Some image links are formatted incorrectly.</value>
        [DataMember(Name="IMAGE_LINK_INVALID", EmitDefaultValue=true)]
        public int IMAGE_LINK_INVALID { get; set; }

        /// <summary>
        /// Some items are missing an item id in their product metadata, those items will not be published.
        /// </summary>
        /// <value>Some items are missing an item id in their product metadata, those items will not be published.</value>
        [DataMember(Name="ITEMID_MISSING", EmitDefaultValue=true)]
        public int ITEMID_MISSING { get; set; }

        /// <summary>
        /// Some items are missing a title in their product metadata, those items will not be published.
        /// </summary>
        /// <value>Some items are missing a title in their product metadata, those items will not be published.</value>
        [DataMember(Name="TITLE_MISSING", EmitDefaultValue=true)]
        public int TITLE_MISSING { get; set; }

        /// <summary>
        /// Some items are missing a description in their product metadata, those items will not be published.
        /// </summary>
        /// <value>Some items are missing a description in their product metadata, those items will not be published.</value>
        [DataMember(Name="DESCRIPTION_MISSING", EmitDefaultValue=true)]
        public int DESCRIPTION_MISSING { get; set; }

        /// <summary>
        /// Some items are missing a link URL in their product metadata, those items will not be published.
        /// </summary>
        /// <value>Some items are missing a link URL in their product metadata, those items will not be published.</value>
        [DataMember(Name="PRODUCT_LINK_MISSING", EmitDefaultValue=true)]
        public int PRODUCT_LINK_MISSING { get; set; }

        /// <summary>
        /// Some items are missing an image link URL in their product metadata, those items will not be published.
        /// </summary>
        /// <value>Some items are missing an image link URL in their product metadata, those items will not be published.</value>
        [DataMember(Name="IMAGE_LINK_MISSING", EmitDefaultValue=true)]
        public int IMAGE_LINK_MISSING { get; set; }

        /// <summary>
        /// Some items are missing an availability value in their product metadata, those items will not be published.
        /// </summary>
        /// <value>Some items are missing an availability value in their product metadata, those items will not be published.</value>
        [DataMember(Name="AVAILABILITY_INVALID", EmitDefaultValue=true)]
        public int AVAILABILITY_INVALID { get; set; }

        /// <summary>
        /// Some items have price formatting errors in their product metadata, those items will not be published.
        /// </summary>
        /// <value>Some items have price formatting errors in their product metadata, those items will not be published.</value>
        [DataMember(Name="PRODUCT_PRICE_INVALID", EmitDefaultValue=true)]
        public int PRODUCT_PRICE_INVALID { get; set; }

        /// <summary>
        /// Some link values are formatted incorrectly.
        /// </summary>
        /// <value>Some link values are formatted incorrectly.</value>
        [DataMember(Name="LINK_FORMAT_INVALID", EmitDefaultValue=true)]
        public int LINK_FORMAT_INVALID { get; set; }

        /// <summary>
        /// Your feed contains formatting errors for some items.
        /// </summary>
        /// <value>Your feed contains formatting errors for some items.</value>
        [DataMember(Name="PARSE_LINE_ERROR", EmitDefaultValue=true)]
        public int PARSE_LINE_ERROR { get; set; }

        /// <summary>
        /// Some adwords links contain too many characters.
        /// </summary>
        /// <value>Some adwords links contain too many characters.</value>
        [DataMember(Name="ADWORDS_FORMAT_INVALID", EmitDefaultValue=true)]
        public int ADWORDS_FORMAT_INVALID { get; set; }

        /// <summary>
        /// We experienced a technical difficulty and were unable to ingest your feed. The next ingestion will happen in 24 hours.
        /// </summary>
        /// <value>We experienced a technical difficulty and were unable to ingest your feed. The next ingestion will happen in 24 hours.</value>
        [DataMember(Name="INTERNAL_SERVICE_ERROR", EmitDefaultValue=true)]
        public int INTERNAL_SERVICE_ERROR { get; set; }

        /// <summary>
        /// Your merchant domain needs to be claimed.
        /// </summary>
        /// <value>Your merchant domain needs to be claimed.</value>
        [DataMember(Name="NO_VERIFIED_DOMAIN", EmitDefaultValue=true)]
        public int NO_VERIFIED_DOMAIN { get; set; }

        /// <summary>
        /// Some items have invalid adult values.
        /// </summary>
        /// <value>Some items have invalid adult values.</value>
        [DataMember(Name="ADULT_INVALID", EmitDefaultValue=true)]
        public int ADULT_INVALID { get; set; }

        /// <summary>
        /// Some items have image_link URLs that contain too many characters, so those items will not be published.
        /// </summary>
        /// <value>Some items have image_link URLs that contain too many characters, so those items will not be published.</value>
        [DataMember(Name="IMAGE_LINK_LENGTH_TOO_LONG", EmitDefaultValue=true)]
        public int IMAGE_LINK_LENGTH_TOO_LONG { get; set; }

        /// <summary>
        /// Some of your product link values don&#39;t match the verified domain associated with this account.
        /// </summary>
        /// <value>Some of your product link values don&#39;t match the verified domain associated with this account.</value>
        [DataMember(Name="INVALID_DOMAIN", EmitDefaultValue=true)]
        public int INVALID_DOMAIN { get; set; }

        /// <summary>
        /// Your feed contains too many items, some items will not be published.
        /// </summary>
        /// <value>Your feed contains too many items, some items will not be published.</value>
        [DataMember(Name="FEED_LENGTH_TOO_LONG", EmitDefaultValue=true)]
        public int FEED_LENGTH_TOO_LONG { get; set; }

        /// <summary>
        /// Some product links contain too many characters, those items will not be published.
        /// </summary>
        /// <value>Some product links contain too many characters, those items will not be published.</value>
        [DataMember(Name="LINK_LENGTH_TOO_LONG", EmitDefaultValue=true)]
        public int LINK_LENGTH_TOO_LONG { get; set; }

        /// <summary>
        /// Your feed couldn&#39;t be validated because the xml file is formatted incorrectly.
        /// </summary>
        /// <value>Your feed couldn&#39;t be validated because the xml file is formatted incorrectly.</value>
        [DataMember(Name="MALFORMED_XML", EmitDefaultValue=true)]
        public int MALFORMED_XML { get; set; }

        /// <summary>
        /// Some products are missing a price, those items will not be published.
        /// </summary>
        /// <value>Some products are missing a price, those items will not be published.</value>
        [DataMember(Name="PRICE_MISSING", EmitDefaultValue=true)]
        public int PRICE_MISSING { get; set; }

        /// <summary>
        /// Your feed couldn&#39;t be validated because the file doesn&#39;t contain the minimum number of lines required.
        /// </summary>
        /// <value>Your feed couldn&#39;t be validated because the file doesn&#39;t contain the minimum number of lines required.</value>
        [DataMember(Name="FEED_TOO_SMALL", EmitDefaultValue=true)]
        public int FEED_TOO_SMALL { get; set; }

        /// <summary>
        /// Some items exceed the maximum number of items per item group, those items will not be published.
        /// </summary>
        /// <value>Some items exceed the maximum number of items per item group, those items will not be published.</value>
        [DataMember(Name="MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED", EmitDefaultValue=true)]
        public int MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED { get; set; }

        /// <summary>
        /// Some items&#39; main images can&#39;t be found.
        /// </summary>
        /// <value>Some items&#39; main images can&#39;t be found.</value>
        [DataMember(Name="ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE", EmitDefaultValue=true)]
        public int ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE { get; set; }

        /// <summary>
        /// Some items were not published because they don&#39;t meet Pinterest&#39;s Merchant Guidelines.
        /// </summary>
        /// <value>Some items were not published because they don&#39;t meet Pinterest&#39;s Merchant Guidelines.</value>
        [DataMember(Name="PINJOIN_CONTENT_UNSAFE", EmitDefaultValue=true)]
        public int PINJOIN_CONTENT_UNSAFE { get; set; }

        /// <summary>
        /// Some items were not published because they don&#39;t meet Pinterest&#39;s Merchant Guidelines.
        /// </summary>
        /// <value>Some items were not published because they don&#39;t meet Pinterest&#39;s Merchant Guidelines.</value>
        [DataMember(Name="BLOCKLISTED_IMAGE_SIGNATURE", EmitDefaultValue=true)]
        public int BLOCKLISTED_IMAGE_SIGNATURE { get; set; }

        /// <summary>
        /// Some items have list price formatting errors in their product metadata, those items will not be published.
        /// </summary>
        /// <value>Some items have list price formatting errors in their product metadata, those items will not be published.</value>
        [DataMember(Name="LIST_PRICE_INVALID", EmitDefaultValue=true)]
        public int LIST_PRICE_INVALID { get; set; }

        /// <summary>
        /// Some items were not published because price cannot be determined. The price, list price, and sale price are all different, so those items will not be published.
        /// </summary>
        /// <value>Some items were not published because price cannot be determined. The price, list price, and sale price are all different, so those items will not be published.</value>
        [DataMember(Name="PRICE_CANNOT_BE_DETERMINED", EmitDefaultValue=true)]
        public int PRICE_CANNOT_BE_DETERMINED { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CatalogsFeedValidationErrors {\n");
            sb.Append("  FETCH_ERROR: ").Append(FETCH_ERROR).Append("\n");
            sb.Append("  FETCH_INACTIVE_FEED_ERROR: ").Append(FETCH_INACTIVE_FEED_ERROR).Append("\n");
            sb.Append("  ENCODING_ERROR: ").Append(ENCODING_ERROR).Append("\n");
            sb.Append("  DELIMITER_ERROR: ").Append(DELIMITER_ERROR).Append("\n");
            sb.Append("  REQUIRED_COLUMNS_MISSING: ").Append(REQUIRED_COLUMNS_MISSING).Append("\n");
            sb.Append("  DUPLICATE_PRODUCTS: ").Append(DUPLICATE_PRODUCTS).Append("\n");
            sb.Append("  IMAGE_LINK_INVALID: ").Append(IMAGE_LINK_INVALID).Append("\n");
            sb.Append("  ITEMID_MISSING: ").Append(ITEMID_MISSING).Append("\n");
            sb.Append("  TITLE_MISSING: ").Append(TITLE_MISSING).Append("\n");
            sb.Append("  DESCRIPTION_MISSING: ").Append(DESCRIPTION_MISSING).Append("\n");
            sb.Append("  PRODUCT_LINK_MISSING: ").Append(PRODUCT_LINK_MISSING).Append("\n");
            sb.Append("  IMAGE_LINK_MISSING: ").Append(IMAGE_LINK_MISSING).Append("\n");
            sb.Append("  AVAILABILITY_INVALID: ").Append(AVAILABILITY_INVALID).Append("\n");
            sb.Append("  PRODUCT_PRICE_INVALID: ").Append(PRODUCT_PRICE_INVALID).Append("\n");
            sb.Append("  LINK_FORMAT_INVALID: ").Append(LINK_FORMAT_INVALID).Append("\n");
            sb.Append("  PARSE_LINE_ERROR: ").Append(PARSE_LINE_ERROR).Append("\n");
            sb.Append("  ADWORDS_FORMAT_INVALID: ").Append(ADWORDS_FORMAT_INVALID).Append("\n");
            sb.Append("  INTERNAL_SERVICE_ERROR: ").Append(INTERNAL_SERVICE_ERROR).Append("\n");
            sb.Append("  NO_VERIFIED_DOMAIN: ").Append(NO_VERIFIED_DOMAIN).Append("\n");
            sb.Append("  ADULT_INVALID: ").Append(ADULT_INVALID).Append("\n");
            sb.Append("  IMAGE_LINK_LENGTH_TOO_LONG: ").Append(IMAGE_LINK_LENGTH_TOO_LONG).Append("\n");
            sb.Append("  INVALID_DOMAIN: ").Append(INVALID_DOMAIN).Append("\n");
            sb.Append("  FEED_LENGTH_TOO_LONG: ").Append(FEED_LENGTH_TOO_LONG).Append("\n");
            sb.Append("  LINK_LENGTH_TOO_LONG: ").Append(LINK_LENGTH_TOO_LONG).Append("\n");
            sb.Append("  MALFORMED_XML: ").Append(MALFORMED_XML).Append("\n");
            sb.Append("  PRICE_MISSING: ").Append(PRICE_MISSING).Append("\n");
            sb.Append("  FEED_TOO_SMALL: ").Append(FEED_TOO_SMALL).Append("\n");
            sb.Append("  MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED: ").Append(MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED).Append("\n");
            sb.Append("  ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE: ").Append(ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE).Append("\n");
            sb.Append("  PINJOIN_CONTENT_UNSAFE: ").Append(PINJOIN_CONTENT_UNSAFE).Append("\n");
            sb.Append("  BLOCKLISTED_IMAGE_SIGNATURE: ").Append(BLOCKLISTED_IMAGE_SIGNATURE).Append("\n");
            sb.Append("  LIST_PRICE_INVALID: ").Append(LIST_PRICE_INVALID).Append("\n");
            sb.Append("  PRICE_CANNOT_BE_DETERMINED: ").Append(PRICE_CANNOT_BE_DETERMINED).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CatalogsFeedValidationErrors)obj);
        }

        /// <summary>
        /// Returns true if CatalogsFeedValidationErrors instances are equal
        /// </summary>
        /// <param name="other">Instance of CatalogsFeedValidationErrors to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CatalogsFeedValidationErrors other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    FETCH_ERROR == other.FETCH_ERROR ||
                    
                    FETCH_ERROR.Equals(other.FETCH_ERROR)
                ) && 
                (
                    FETCH_INACTIVE_FEED_ERROR == other.FETCH_INACTIVE_FEED_ERROR ||
                    
                    FETCH_INACTIVE_FEED_ERROR.Equals(other.FETCH_INACTIVE_FEED_ERROR)
                ) && 
                (
                    ENCODING_ERROR == other.ENCODING_ERROR ||
                    
                    ENCODING_ERROR.Equals(other.ENCODING_ERROR)
                ) && 
                (
                    DELIMITER_ERROR == other.DELIMITER_ERROR ||
                    
                    DELIMITER_ERROR.Equals(other.DELIMITER_ERROR)
                ) && 
                (
                    REQUIRED_COLUMNS_MISSING == other.REQUIRED_COLUMNS_MISSING ||
                    
                    REQUIRED_COLUMNS_MISSING.Equals(other.REQUIRED_COLUMNS_MISSING)
                ) && 
                (
                    DUPLICATE_PRODUCTS == other.DUPLICATE_PRODUCTS ||
                    
                    DUPLICATE_PRODUCTS.Equals(other.DUPLICATE_PRODUCTS)
                ) && 
                (
                    IMAGE_LINK_INVALID == other.IMAGE_LINK_INVALID ||
                    
                    IMAGE_LINK_INVALID.Equals(other.IMAGE_LINK_INVALID)
                ) && 
                (
                    ITEMID_MISSING == other.ITEMID_MISSING ||
                    
                    ITEMID_MISSING.Equals(other.ITEMID_MISSING)
                ) && 
                (
                    TITLE_MISSING == other.TITLE_MISSING ||
                    
                    TITLE_MISSING.Equals(other.TITLE_MISSING)
                ) && 
                (
                    DESCRIPTION_MISSING == other.DESCRIPTION_MISSING ||
                    
                    DESCRIPTION_MISSING.Equals(other.DESCRIPTION_MISSING)
                ) && 
                (
                    PRODUCT_LINK_MISSING == other.PRODUCT_LINK_MISSING ||
                    
                    PRODUCT_LINK_MISSING.Equals(other.PRODUCT_LINK_MISSING)
                ) && 
                (
                    IMAGE_LINK_MISSING == other.IMAGE_LINK_MISSING ||
                    
                    IMAGE_LINK_MISSING.Equals(other.IMAGE_LINK_MISSING)
                ) && 
                (
                    AVAILABILITY_INVALID == other.AVAILABILITY_INVALID ||
                    
                    AVAILABILITY_INVALID.Equals(other.AVAILABILITY_INVALID)
                ) && 
                (
                    PRODUCT_PRICE_INVALID == other.PRODUCT_PRICE_INVALID ||
                    
                    PRODUCT_PRICE_INVALID.Equals(other.PRODUCT_PRICE_INVALID)
                ) && 
                (
                    LINK_FORMAT_INVALID == other.LINK_FORMAT_INVALID ||
                    
                    LINK_FORMAT_INVALID.Equals(other.LINK_FORMAT_INVALID)
                ) && 
                (
                    PARSE_LINE_ERROR == other.PARSE_LINE_ERROR ||
                    
                    PARSE_LINE_ERROR.Equals(other.PARSE_LINE_ERROR)
                ) && 
                (
                    ADWORDS_FORMAT_INVALID == other.ADWORDS_FORMAT_INVALID ||
                    
                    ADWORDS_FORMAT_INVALID.Equals(other.ADWORDS_FORMAT_INVALID)
                ) && 
                (
                    INTERNAL_SERVICE_ERROR == other.INTERNAL_SERVICE_ERROR ||
                    
                    INTERNAL_SERVICE_ERROR.Equals(other.INTERNAL_SERVICE_ERROR)
                ) && 
                (
                    NO_VERIFIED_DOMAIN == other.NO_VERIFIED_DOMAIN ||
                    
                    NO_VERIFIED_DOMAIN.Equals(other.NO_VERIFIED_DOMAIN)
                ) && 
                (
                    ADULT_INVALID == other.ADULT_INVALID ||
                    
                    ADULT_INVALID.Equals(other.ADULT_INVALID)
                ) && 
                (
                    IMAGE_LINK_LENGTH_TOO_LONG == other.IMAGE_LINK_LENGTH_TOO_LONG ||
                    
                    IMAGE_LINK_LENGTH_TOO_LONG.Equals(other.IMAGE_LINK_LENGTH_TOO_LONG)
                ) && 
                (
                    INVALID_DOMAIN == other.INVALID_DOMAIN ||
                    
                    INVALID_DOMAIN.Equals(other.INVALID_DOMAIN)
                ) && 
                (
                    FEED_LENGTH_TOO_LONG == other.FEED_LENGTH_TOO_LONG ||
                    
                    FEED_LENGTH_TOO_LONG.Equals(other.FEED_LENGTH_TOO_LONG)
                ) && 
                (
                    LINK_LENGTH_TOO_LONG == other.LINK_LENGTH_TOO_LONG ||
                    
                    LINK_LENGTH_TOO_LONG.Equals(other.LINK_LENGTH_TOO_LONG)
                ) && 
                (
                    MALFORMED_XML == other.MALFORMED_XML ||
                    
                    MALFORMED_XML.Equals(other.MALFORMED_XML)
                ) && 
                (
                    PRICE_MISSING == other.PRICE_MISSING ||
                    
                    PRICE_MISSING.Equals(other.PRICE_MISSING)
                ) && 
                (
                    FEED_TOO_SMALL == other.FEED_TOO_SMALL ||
                    
                    FEED_TOO_SMALL.Equals(other.FEED_TOO_SMALL)
                ) && 
                (
                    MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED == other.MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED ||
                    
                    MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED.Equals(other.MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED)
                ) && 
                (
                    ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE == other.ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE ||
                    
                    ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE.Equals(other.ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE)
                ) && 
                (
                    PINJOIN_CONTENT_UNSAFE == other.PINJOIN_CONTENT_UNSAFE ||
                    
                    PINJOIN_CONTENT_UNSAFE.Equals(other.PINJOIN_CONTENT_UNSAFE)
                ) && 
                (
                    BLOCKLISTED_IMAGE_SIGNATURE == other.BLOCKLISTED_IMAGE_SIGNATURE ||
                    
                    BLOCKLISTED_IMAGE_SIGNATURE.Equals(other.BLOCKLISTED_IMAGE_SIGNATURE)
                ) && 
                (
                    LIST_PRICE_INVALID == other.LIST_PRICE_INVALID ||
                    
                    LIST_PRICE_INVALID.Equals(other.LIST_PRICE_INVALID)
                ) && 
                (
                    PRICE_CANNOT_BE_DETERMINED == other.PRICE_CANNOT_BE_DETERMINED ||
                    
                    PRICE_CANNOT_BE_DETERMINED.Equals(other.PRICE_CANNOT_BE_DETERMINED)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + FETCH_ERROR.GetHashCode();
                    
                    hashCode = hashCode * 59 + FETCH_INACTIVE_FEED_ERROR.GetHashCode();
                    
                    hashCode = hashCode * 59 + ENCODING_ERROR.GetHashCode();
                    
                    hashCode = hashCode * 59 + DELIMITER_ERROR.GetHashCode();
                    
                    hashCode = hashCode * 59 + REQUIRED_COLUMNS_MISSING.GetHashCode();
                    
                    hashCode = hashCode * 59 + DUPLICATE_PRODUCTS.GetHashCode();
                    
                    hashCode = hashCode * 59 + IMAGE_LINK_INVALID.GetHashCode();
                    
                    hashCode = hashCode * 59 + ITEMID_MISSING.GetHashCode();
                    
                    hashCode = hashCode * 59 + TITLE_MISSING.GetHashCode();
                    
                    hashCode = hashCode * 59 + DESCRIPTION_MISSING.GetHashCode();
                    
                    hashCode = hashCode * 59 + PRODUCT_LINK_MISSING.GetHashCode();
                    
                    hashCode = hashCode * 59 + IMAGE_LINK_MISSING.GetHashCode();
                    
                    hashCode = hashCode * 59 + AVAILABILITY_INVALID.GetHashCode();
                    
                    hashCode = hashCode * 59 + PRODUCT_PRICE_INVALID.GetHashCode();
                    
                    hashCode = hashCode * 59 + LINK_FORMAT_INVALID.GetHashCode();
                    
                    hashCode = hashCode * 59 + PARSE_LINE_ERROR.GetHashCode();
                    
                    hashCode = hashCode * 59 + ADWORDS_FORMAT_INVALID.GetHashCode();
                    
                    hashCode = hashCode * 59 + INTERNAL_SERVICE_ERROR.GetHashCode();
                    
                    hashCode = hashCode * 59 + NO_VERIFIED_DOMAIN.GetHashCode();
                    
                    hashCode = hashCode * 59 + ADULT_INVALID.GetHashCode();
                    
                    hashCode = hashCode * 59 + IMAGE_LINK_LENGTH_TOO_LONG.GetHashCode();
                    
                    hashCode = hashCode * 59 + INVALID_DOMAIN.GetHashCode();
                    
                    hashCode = hashCode * 59 + FEED_LENGTH_TOO_LONG.GetHashCode();
                    
                    hashCode = hashCode * 59 + LINK_LENGTH_TOO_LONG.GetHashCode();
                    
                    hashCode = hashCode * 59 + MALFORMED_XML.GetHashCode();
                    
                    hashCode = hashCode * 59 + PRICE_MISSING.GetHashCode();
                    
                    hashCode = hashCode * 59 + FEED_TOO_SMALL.GetHashCode();
                    
                    hashCode = hashCode * 59 + MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED.GetHashCode();
                    
                    hashCode = hashCode * 59 + ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE.GetHashCode();
                    
                    hashCode = hashCode * 59 + PINJOIN_CONTENT_UNSAFE.GetHashCode();
                    
                    hashCode = hashCode * 59 + BLOCKLISTED_IMAGE_SIGNATURE.GetHashCode();
                    
                    hashCode = hashCode * 59 + LIST_PRICE_INVALID.GetHashCode();
                    
                    hashCode = hashCode * 59 + PRICE_CANNOT_BE_DETERMINED.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(CatalogsFeedValidationErrors left, CatalogsFeedValidationErrors right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CatalogsFeedValidationErrors left, CatalogsFeedValidationErrors right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
