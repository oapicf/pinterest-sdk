/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// User website verification request
    /// </summary>
    [DataContract]
    public partial class UserWebsiteVerifyRequest : IEquatable<UserWebsiteVerifyRequest>
    {
        /// <summary>
        /// Gets or Sets Website
        /// </summary>
        /* <example>pintest-website-12345678.test/test_1</example> */
        [DataMember(Name="website", EmitDefaultValue=false)]
        public string Website { get; set; }


        /// <summary>
        /// Gets or Sets VerificationMethod
        /// </summary>
        [TypeConverter(typeof(CustomEnumConverter<VerificationMethodEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum VerificationMethodEnum
        {
            
            /// <summary>
            /// Enum FILENAMEEnum for FILENAME
            /// </summary>
            [EnumMember(Value = "FILENAME")]
            FILENAMEEnum = 1,
            
            /// <summary>
            /// Enum METATAGEnum for METATAG
            /// </summary>
            [EnumMember(Value = "METATAG")]
            METATAGEnum = 2,
            
            /// <summary>
            /// Enum DNSTXTEnum for DNSTXT
            /// </summary>
            [EnumMember(Value = "DNSTXT")]
            DNSTXTEnum = 3
        }

        /// <summary>
        /// Gets or Sets VerificationMethod
        /// </summary>
        [DataMember(Name="verification_method", EmitDefaultValue=true)]
        public VerificationMethodEnum VerificationMethod { get; set; } = VerificationMethodEnum.METATAGEnum;

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserWebsiteVerifyRequest {\n");
            sb.Append("  Website: ").Append(Website).Append("\n");
            sb.Append("  VerificationMethod: ").Append(VerificationMethod).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((UserWebsiteVerifyRequest)obj);
        }

        /// <summary>
        /// Returns true if UserWebsiteVerifyRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of UserWebsiteVerifyRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserWebsiteVerifyRequest other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Website == other.Website ||
                    Website != null &&
                    Website.Equals(other.Website)
                ) && 
                (
                    VerificationMethod == other.VerificationMethod ||
                    
                    VerificationMethod.Equals(other.VerificationMethod)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Website != null)
                    hashCode = hashCode * 59 + Website.GetHashCode();
                    
                    hashCode = hashCode * 59 + VerificationMethod.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(UserWebsiteVerifyRequest left, UserWebsiteVerifyRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(UserWebsiteVerifyRequest left, UserWebsiteVerifyRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
