/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class OrderLine : IEquatable<OrderLine>
    {
        /// <summary>
        /// Order line ID.
        /// </summary>
        /// <value>Order line ID.</value>
        /* <example>2680059592705</example> */
        [RegularExpression("^\\d+$")]
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Always \&quot;orderline\&quot;.
        /// </summary>
        /// <value>Always \&quot;orderline\&quot;.</value>
        /* <example>orderline</example> */
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Ad account ID.
        /// </summary>
        /// <value>Ad account ID.</value>
        /* <example>549755885175</example> */
        [DataMember(Name="ad_account_id", EmitDefaultValue=false)]
        public string AdAccountId { get; set; }

        /// <summary>
        /// Purchase order ID.
        /// </summary>
        /// <value>Purchase order ID.</value>
        /* <example>PO12345</example> */
        [DataMember(Name="purchase_order_id", EmitDefaultValue=true)]
        public string PurchaseOrderId { get; set; }

        /// <summary>
        /// Start time. Unix timestamp.
        /// </summary>
        /// <value>Start time. Unix timestamp.</value>
        /* <example>1452208622</example> */
        [DataMember(Name="start_time", EmitDefaultValue=true)]
        public decimal StartTime { get; set; }

        /// <summary>
        /// End time. Unix timestamp.
        /// </summary>
        /// <value>End time. Unix timestamp.</value>
        /* <example>1461269616</example> */
        [DataMember(Name="end_time", EmitDefaultValue=true)]
        public decimal? EndTime { get; set; }

        /// <summary>
        /// Order line budget in micro currency.
        /// </summary>
        /// <value>Order line budget in micro currency.</value>
        /* <example>5000000</example> */
        [DataMember(Name="budget", EmitDefaultValue=true)]
        public decimal? Budget { get; set; }

        /// <summary>
        /// Order line paid budget in micro currency.
        /// </summary>
        /// <value>Order line paid budget in micro currency.</value>
        /* <example>5000000</example> */
        [DataMember(Name="paid_budget", EmitDefaultValue=true)]
        public decimal? PaidBudget { get; set; }

        /// <summary>
        /// Order line status.
        /// </summary>
        /// <value>Order line status.</value>
        [DataMember(Name="status", EmitDefaultValue=true)]
        public OrderLineStatus Status { get; set; }

        /// <summary>
        /// Order line name.
        /// </summary>
        /// <value>Order line name.</value>
        /* <example>Order Line Name 1</example> */
        [DataMember(Name="name", EmitDefaultValue=true)]
        public string Name { get; set; }

        /// <summary>
        /// Order line paid type.
        /// </summary>
        /// <value>Order line paid type.</value>
        [DataMember(Name="paid_type", EmitDefaultValue=true)]
        public OrderLinePaidType? PaidType { get; set; }

        /// <summary>
        /// Associated List of campaign IDs.
        /// </summary>
        /// <value>Associated List of campaign IDs.</value>
        /* <example>[&quot;626735565838&quot;]</example> */
        [Required]
        [DataMember(Name="campaign_ids", EmitDefaultValue=false)]
        public List<string> CampaignIds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderLine {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  AdAccountId: ").Append(AdAccountId).Append("\n");
            sb.Append("  PurchaseOrderId: ").Append(PurchaseOrderId).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("  Budget: ").Append(Budget).Append("\n");
            sb.Append("  PaidBudget: ").Append(PaidBudget).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  PaidType: ").Append(PaidType).Append("\n");
            sb.Append("  CampaignIds: ").Append(CampaignIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((OrderLine)obj);
        }

        /// <summary>
        /// Returns true if OrderLine instances are equal
        /// </summary>
        /// <param name="other">Instance of OrderLine to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderLine other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Type == other.Type ||
                    Type != null &&
                    Type.Equals(other.Type)
                ) && 
                (
                    AdAccountId == other.AdAccountId ||
                    AdAccountId != null &&
                    AdAccountId.Equals(other.AdAccountId)
                ) && 
                (
                    PurchaseOrderId == other.PurchaseOrderId ||
                    PurchaseOrderId != null &&
                    PurchaseOrderId.Equals(other.PurchaseOrderId)
                ) && 
                (
                    StartTime == other.StartTime ||
                    
                    StartTime.Equals(other.StartTime)
                ) && 
                (
                    EndTime == other.EndTime ||
                    EndTime != null &&
                    EndTime.Equals(other.EndTime)
                ) && 
                (
                    Budget == other.Budget ||
                    Budget != null &&
                    Budget.Equals(other.Budget)
                ) && 
                (
                    PaidBudget == other.PaidBudget ||
                    PaidBudget != null &&
                    PaidBudget.Equals(other.PaidBudget)
                ) && 
                (
                    Status == other.Status ||
                    
                    Status.Equals(other.Status)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    PaidType == other.PaidType ||
                    
                    PaidType.Equals(other.PaidType)
                ) && 
                (
                    CampaignIds == other.CampaignIds ||
                    CampaignIds != null &&
                    other.CampaignIds != null &&
                    CampaignIds.SequenceEqual(other.CampaignIds)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    if (AdAccountId != null)
                    hashCode = hashCode * 59 + AdAccountId.GetHashCode();
                    if (PurchaseOrderId != null)
                    hashCode = hashCode * 59 + PurchaseOrderId.GetHashCode();
                    
                    hashCode = hashCode * 59 + StartTime.GetHashCode();
                    if (EndTime != null)
                    hashCode = hashCode * 59 + EndTime.GetHashCode();
                    if (Budget != null)
                    hashCode = hashCode * 59 + Budget.GetHashCode();
                    if (PaidBudget != null)
                    hashCode = hashCode * 59 + PaidBudget.GetHashCode();
                    
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    
                    hashCode = hashCode * 59 + PaidType.GetHashCode();
                    if (CampaignIds != null)
                    hashCode = hashCode * 59 + CampaignIds.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(OrderLine left, OrderLine right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(OrderLine left, OrderLine right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
