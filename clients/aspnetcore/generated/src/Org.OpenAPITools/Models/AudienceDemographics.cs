/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// Audience demographics
    /// </summary>
    [DataContract]
    public partial class AudienceDemographics : IEquatable<AudienceDemographics>
    {
        /// <summary>
        /// Ages distribution.
        /// </summary>
        /// <value>Ages distribution.</value>
        [DataMember(Name="ages", EmitDefaultValue=false)]
        public List<AudienceDemographicValue> Ages { get; set; }

        /// <summary>
        /// Gender distribution.
        /// </summary>
        /// <value>Gender distribution.</value>
        [DataMember(Name="genders", EmitDefaultValue=false)]
        public List<AudienceDemographicValue> Genders { get; set; }

        /// <summary>
        /// Device usage distribution.
        /// </summary>
        /// <value>Device usage distribution.</value>
        [DataMember(Name="devices", EmitDefaultValue=false)]
        public List<AudienceDemographicValue> Devices { get; set; }

        /// <summary>
        /// Geographic metro area distribution.
        /// </summary>
        /// <value>Geographic metro area distribution.</value>
        [DataMember(Name="metros", EmitDefaultValue=false)]
        public List<AudienceDemographicValue> Metros { get; set; }

        /// <summary>
        /// Country area distribution.
        /// </summary>
        /// <value>Country area distribution.</value>
        [DataMember(Name="countries", EmitDefaultValue=false)]
        public List<AudienceDemographicValue> Countries { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AudienceDemographics {\n");
            sb.Append("  Ages: ").Append(Ages).Append("\n");
            sb.Append("  Genders: ").Append(Genders).Append("\n");
            sb.Append("  Devices: ").Append(Devices).Append("\n");
            sb.Append("  Metros: ").Append(Metros).Append("\n");
            sb.Append("  Countries: ").Append(Countries).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((AudienceDemographics)obj);
        }

        /// <summary>
        /// Returns true if AudienceDemographics instances are equal
        /// </summary>
        /// <param name="other">Instance of AudienceDemographics to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AudienceDemographics other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Ages == other.Ages ||
                    Ages != null &&
                    other.Ages != null &&
                    Ages.SequenceEqual(other.Ages)
                ) && 
                (
                    Genders == other.Genders ||
                    Genders != null &&
                    other.Genders != null &&
                    Genders.SequenceEqual(other.Genders)
                ) && 
                (
                    Devices == other.Devices ||
                    Devices != null &&
                    other.Devices != null &&
                    Devices.SequenceEqual(other.Devices)
                ) && 
                (
                    Metros == other.Metros ||
                    Metros != null &&
                    other.Metros != null &&
                    Metros.SequenceEqual(other.Metros)
                ) && 
                (
                    Countries == other.Countries ||
                    Countries != null &&
                    other.Countries != null &&
                    Countries.SequenceEqual(other.Countries)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Ages != null)
                    hashCode = hashCode * 59 + Ages.GetHashCode();
                    if (Genders != null)
                    hashCode = hashCode * 59 + Genders.GetHashCode();
                    if (Devices != null)
                    hashCode = hashCode * 59 + Devices.GetHashCode();
                    if (Metros != null)
                    hashCode = hashCode * 59 + Metros.GetHashCode();
                    if (Countries != null)
                    hashCode = hashCode * 59 + Countries.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(AudienceDemographics left, AudienceDemographics right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AudienceDemographics left, AudienceDemographics right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
