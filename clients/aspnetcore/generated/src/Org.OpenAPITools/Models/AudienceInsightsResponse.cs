/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// Audience interests and demographics.
    /// </summary>
    [DataContract]
    public partial class AudienceInsightsResponse : IEquatable<AudienceInsightsResponse>
    {
        /// <summary>
        /// Category interest distribution
        /// </summary>
        /// <value>Category interest distribution</value>
        [DataMember(Name="categories", EmitDefaultValue=false)]
        public List<AudienceCategory> Categories { get; set; }

        /// <summary>
        /// Gets or Sets Demographics
        /// </summary>
        [DataMember(Name="demographics", EmitDefaultValue=false)]
        public AudienceDemographics Demographics { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=true)]
        public AudienceInsightType Type { get; set; }

        /// <summary>
        /// Generation date
        /// </summary>
        /// <value>Generation date</value>
        /* <example>2022-10-09</example> */
        [RegularExpression("^\\d{4}-\\d{2}-\\d{2}$")]
        [DataMember(Name="date", EmitDefaultValue=true)]
        public string Date { get; set; }

        /// <summary>
        /// Population count.
        /// </summary>
        /// <value>Population count.</value>
        /* <example>10000</example> */
        [DataMember(Name="size", EmitDefaultValue=true)]
        public int Size { get; set; }

        /// <summary>
        /// Indicates whether the audience size has been rounded up to the next highest upper boundary.
        /// </summary>
        /// <value>Indicates whether the audience size has been rounded up to the next highest upper boundary.</value>
        /* <example>true</example> */
        [DataMember(Name="size_is_upper_bound", EmitDefaultValue=true)]
        public bool SizeIsUpperBound { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AudienceInsightsResponse {\n");
            sb.Append("  Categories: ").Append(Categories).Append("\n");
            sb.Append("  Demographics: ").Append(Demographics).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  SizeIsUpperBound: ").Append(SizeIsUpperBound).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((AudienceInsightsResponse)obj);
        }

        /// <summary>
        /// Returns true if AudienceInsightsResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of AudienceInsightsResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AudienceInsightsResponse other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Categories == other.Categories ||
                    Categories != null &&
                    other.Categories != null &&
                    Categories.SequenceEqual(other.Categories)
                ) && 
                (
                    Demographics == other.Demographics ||
                    Demographics != null &&
                    Demographics.Equals(other.Demographics)
                ) && 
                (
                    Type == other.Type ||
                    
                    Type.Equals(other.Type)
                ) && 
                (
                    Date == other.Date ||
                    Date != null &&
                    Date.Equals(other.Date)
                ) && 
                (
                    Size == other.Size ||
                    
                    Size.Equals(other.Size)
                ) && 
                (
                    SizeIsUpperBound == other.SizeIsUpperBound ||
                    
                    SizeIsUpperBound.Equals(other.SizeIsUpperBound)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Categories != null)
                    hashCode = hashCode * 59 + Categories.GetHashCode();
                    if (Demographics != null)
                    hashCode = hashCode * 59 + Demographics.GetHashCode();
                    
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    if (Date != null)
                    hashCode = hashCode * 59 + Date.GetHashCode();
                    
                    hashCode = hashCode * 59 + Size.GetHashCode();
                    
                    hashCode = hashCode * 59 + SizeIsUpperBound.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(AudienceInsightsResponse left, AudienceInsightsResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AudienceInsightsResponse left, AudienceInsightsResponse right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
