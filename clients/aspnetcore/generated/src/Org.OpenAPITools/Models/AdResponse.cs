/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class AdResponse : IEquatable<AdResponse>
    {
        /// <summary>
        /// ID of the ad group that contains the ad.
        /// </summary>
        /// <value>ID of the ad group that contains the ad.</value>
        /* <example>2680059592705</example> */
        [RegularExpression("^(AG)?\\d+$")]
        [DataMember(Name="ad_group_id", EmitDefaultValue=false)]
        public string AdGroupId { get; set; }

        /// <summary>
        /// Deep link URL for Android devices.
        /// </summary>
        /// <value>Deep link URL for Android devices.</value>
        [DataMember(Name="android_deep_link", EmitDefaultValue=true)]
        public string AndroidDeepLink { get; set; }

        /// <summary>
        /// Comma-separated deep links for the carousel pin on Android.
        /// </summary>
        /// <value>Comma-separated deep links for the carousel pin on Android.</value>
        [DataMember(Name="carousel_android_deep_links", EmitDefaultValue=true)]
        public List<string> CarouselAndroidDeepLinks { get; set; }

        /// <summary>
        /// Comma-separated destination URLs for the carousel pin to promote.
        /// </summary>
        /// <value>Comma-separated destination URLs for the carousel pin to promote.</value>
        [DataMember(Name="carousel_destination_urls", EmitDefaultValue=true)]
        public List<string> CarouselDestinationUrls { get; set; }

        /// <summary>
        /// Comma-separated deep links for the carousel pin on iOS.
        /// </summary>
        /// <value>Comma-separated deep links for the carousel pin on iOS.</value>
        [DataMember(Name="carousel_ios_deep_links", EmitDefaultValue=true)]
        public List<string> CarouselIosDeepLinks { get; set; }

        /// <summary>
        /// Tracking url for the ad clicks.
        /// </summary>
        /// <value>Tracking url for the ad clicks.</value>
        [DataMember(Name="click_tracking_url", EmitDefaultValue=true)]
        public string ClickTrackingUrl { get; set; }

        /// <summary>
        /// Gets or Sets CreativeType
        /// </summary>
        [DataMember(Name="creative_type", EmitDefaultValue=true)]
        public CreativeType CreativeType { get; set; }

        /// <summary>
        /// Destination URL.
        /// </summary>
        /// <value>Destination URL.</value>
        [DataMember(Name="destination_url", EmitDefaultValue=true)]
        public string DestinationUrl { get; set; }

        /// <summary>
        /// Deep link URL for iOS devices.
        /// </summary>
        /// <value>Deep link URL for iOS devices.</value>
        [DataMember(Name="ios_deep_link", EmitDefaultValue=true)]
        public string IosDeepLink { get; set; }

        /// <summary>
        /// Is original pin deleted?
        /// </summary>
        /// <value>Is original pin deleted?</value>
        /* <example>false</example> */
        [DataMember(Name="is_pin_deleted", EmitDefaultValue=true)]
        public bool IsPinDeleted { get; set; }

        /// <summary>
        /// Is pin repinnable?
        /// </summary>
        /// <value>Is pin repinnable?</value>
        /* <example>false</example> */
        [DataMember(Name="is_removable", EmitDefaultValue=true)]
        public bool IsRemovable { get; set; }

        /// <summary>
        /// Name of the ad - 255 chars max.
        /// </summary>
        /// <value>Name of the ad - 255 chars max.</value>
        [DataMember(Name="name", EmitDefaultValue=true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=true)]
        public EntityStatus Status { get; set; }

        /// <summary>
        /// Gets or Sets TrackingUrls
        /// </summary>
        [DataMember(Name="tracking_urls", EmitDefaultValue=true)]
        public TrackingUrls TrackingUrls { get; set; }

        /// <summary>
        /// Tracking URL for ad impressions.
        /// </summary>
        /// <value>Tracking URL for ad impressions.</value>
        [DataMember(Name="view_tracking_url", EmitDefaultValue=true)]
        public string ViewTrackingUrl { get; set; }

        /// <summary>
        /// Lead form ID for lead ad generation.
        /// </summary>
        /// <value>Lead form ID for lead ad generation.</value>
        [RegularExpression("^(AG)?\\d+$")]
        [DataMember(Name="lead_form_id", EmitDefaultValue=true)]
        public string LeadFormId { get; set; }

        /// <summary>
        /// Gets or Sets GridClickType
        /// </summary>
        [DataMember(Name="grid_click_type", EmitDefaultValue=true)]
        public GridClickType? GridClickType { get; set; }


        /// <summary>
        /// Select a call to action (CTA) to display below your ad. Available only for ads with direct links enabled. CTA options for consideration and conversion campaigns are LEARN_MORE, SHOP_NOW, BOOK_NOW, SIGN_UP, VISIT_SITE, BUY_NOW, GET_OFFER, ORDER_NOW, ADD_TO_CART (for conversion campaigns with add to cart conversion events only)
        /// </summary>
        /// <value>Select a call to action (CTA) to display below your ad. Available only for ads with direct links enabled. CTA options for consideration and conversion campaigns are LEARN_MORE, SHOP_NOW, BOOK_NOW, SIGN_UP, VISIT_SITE, BUY_NOW, GET_OFFER, ORDER_NOW, ADD_TO_CART (for conversion campaigns with add to cart conversion events only)</value>
        [TypeConverter(typeof(CustomEnumConverter<CustomizableCtaTypeEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum CustomizableCtaTypeEnum
        {
            
            /// <summary>
            /// Enum GETOFFEREnum for GET_OFFER
            /// </summary>
            [EnumMember(Value = "GET_OFFER")]
            GETOFFEREnum = 1,
            
            /// <summary>
            /// Enum LEARNMOREEnum for LEARN_MORE
            /// </summary>
            [EnumMember(Value = "LEARN_MORE")]
            LEARNMOREEnum = 2,
            
            /// <summary>
            /// Enum ORDERNOWEnum for ORDER_NOW
            /// </summary>
            [EnumMember(Value = "ORDER_NOW")]
            ORDERNOWEnum = 3,
            
            /// <summary>
            /// Enum SHOPNOWEnum for SHOP_NOW
            /// </summary>
            [EnumMember(Value = "SHOP_NOW")]
            SHOPNOWEnum = 4,
            
            /// <summary>
            /// Enum SIGNUPEnum for SIGN_UP
            /// </summary>
            [EnumMember(Value = "SIGN_UP")]
            SIGNUPEnum = 5,
            
            /// <summary>
            /// Enum SUBSCRIBEEnum for SUBSCRIBE
            /// </summary>
            [EnumMember(Value = "SUBSCRIBE")]
            SUBSCRIBEEnum = 6,
            
            /// <summary>
            /// Enum BUYNOWEnum for BUY_NOW
            /// </summary>
            [EnumMember(Value = "BUY_NOW")]
            BUYNOWEnum = 7,
            
            /// <summary>
            /// Enum CONTACTUSEnum for CONTACT_US
            /// </summary>
            [EnumMember(Value = "CONTACT_US")]
            CONTACTUSEnum = 8,
            
            /// <summary>
            /// Enum GETQUOTEEnum for GET_QUOTE
            /// </summary>
            [EnumMember(Value = "GET_QUOTE")]
            GETQUOTEEnum = 9,
            
            /// <summary>
            /// Enum VISITSITEEnum for VISIT_SITE
            /// </summary>
            [EnumMember(Value = "VISIT_SITE")]
            VISITSITEEnum = 10,
            
            /// <summary>
            /// Enum APPLYNOWEnum for APPLY_NOW
            /// </summary>
            [EnumMember(Value = "APPLY_NOW")]
            APPLYNOWEnum = 11,
            
            /// <summary>
            /// Enum BOOKNOWEnum for BOOK_NOW
            /// </summary>
            [EnumMember(Value = "BOOK_NOW")]
            BOOKNOWEnum = 12,
            
            /// <summary>
            /// Enum REQUESTDEMOEnum for REQUEST_DEMO
            /// </summary>
            [EnumMember(Value = "REQUEST_DEMO")]
            REQUESTDEMOEnum = 13,
            
            /// <summary>
            /// Enum REGISTERNOWEnum for REGISTER_NOW
            /// </summary>
            [EnumMember(Value = "REGISTER_NOW")]
            REGISTERNOWEnum = 14,
            
            /// <summary>
            /// Enum FINDADEALEREnum for FIND_A_DEALER
            /// </summary>
            [EnumMember(Value = "FIND_A_DEALER")]
            FINDADEALEREnum = 15,
            
            /// <summary>
            /// Enum ADDTOCARTEnum for ADD_TO_CART
            /// </summary>
            [EnumMember(Value = "ADD_TO_CART")]
            ADDTOCARTEnum = 16,
            
            /// <summary>
            /// Enum WATCHNOWEnum for WATCH_NOW
            /// </summary>
            [EnumMember(Value = "WATCH_NOW")]
            WATCHNOWEnum = 17,
            
            /// <summary>
            /// Enum READMOREEnum for READ_MORE
            /// </summary>
            [EnumMember(Value = "READ_MORE")]
            READMOREEnum = 18
        }

        /// <summary>
        /// Select a call to action (CTA) to display below your ad. Available only for ads with direct links enabled. CTA options for consideration and conversion campaigns are LEARN_MORE, SHOP_NOW, BOOK_NOW, SIGN_UP, VISIT_SITE, BUY_NOW, GET_OFFER, ORDER_NOW, ADD_TO_CART (for conversion campaigns with add to cart conversion events only)
        /// </summary>
        /// <value>Select a call to action (CTA) to display below your ad. Available only for ads with direct links enabled. CTA options for consideration and conversion campaigns are LEARN_MORE, SHOP_NOW, BOOK_NOW, SIGN_UP, VISIT_SITE, BUY_NOW, GET_OFFER, ORDER_NOW, ADD_TO_CART (for conversion campaigns with add to cart conversion events only)</value>
        /* <example>LEARN_MORE</example> */
        [DataMember(Name="customizable_cta_type", EmitDefaultValue=true)]
        public CustomizableCtaTypeEnum? CustomizableCtaType { get; set; }

        /// <summary>
        /// Before creating a quiz ad, you must create an organic Pin using POST/Create Pin for each result in the quiz. Quiz ads cannot be saved by a Pinner. Quiz ad results can be saved.
        /// </summary>
        /// <value>Before creating a quiz ad, you must create an organic Pin using POST/Create Pin for each result in the quiz. Quiz ads cannot be saved by a Pinner. Quiz ad results can be saved.</value>
        [DataMember(Name="quiz_pin_data", EmitDefaultValue=true)]
        public QuizPinData QuizPinData { get; set; }

        /// <summary>
        /// Pin ID.
        /// </summary>
        /// <value>Pin ID.</value>
        /* <example>394205773611545468</example> */
        [RegularExpression("^\\d+$")]
        [DataMember(Name="pin_id", EmitDefaultValue=false)]
        public string PinId { get; set; }

        /// <summary>
        /// The ID of the advertiser that this ad belongs to.
        /// </summary>
        /// <value>The ID of the advertiser that this ad belongs to.</value>
        /* <example>549755885175</example> */
        [RegularExpression("^\\d+$")]
        [DataMember(Name="ad_account_id", EmitDefaultValue=false)]
        public string AdAccountId { get; set; }

        /// <summary>
        /// ID of the ad campaign that contains this ad.
        /// </summary>
        /// <value>ID of the ad campaign that contains this ad.</value>
        /* <example>626735565838</example> */
        [RegularExpression("^\\d+$")]
        [DataMember(Name="campaign_id", EmitDefaultValue=false)]
        public string CampaignId { get; set; }

        /// <summary>
        /// Destination URL template for all items within a collections drawer.
        /// </summary>
        /// <value>Destination URL template for all items within a collections drawer.</value>
        [DataMember(Name="collection_items_destination_url_template", EmitDefaultValue=true)]
        public string CollectionItemsDestinationUrlTemplate { get; set; }

        /// <summary>
        /// Pin creation time. Unix timestamp in seconds.
        /// </summary>
        /// <value>Pin creation time. Unix timestamp in seconds.</value>
        /* <example>1451431341</example> */
        [DataMember(Name="created_time", EmitDefaultValue=true)]
        public int CreatedTime { get; set; }

        /// <summary>
        /// The ID of this ad.
        /// </summary>
        /// <value>The ID of this ad.</value>
        /* <example>687195134316</example> */
        [RegularExpression("^\\d+$")]
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }


        /// <summary>
        /// ad disapproval reasons
        /// </summary>
        /// <value>ad disapproval reasons</value>
        [TypeConverter(typeof(CustomEnumConverter<RejectedReasonsEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum RejectedReasonsEnum
        {
            
            /// <summary>
            /// Enum HASHTAGSEnum for HASHTAGS
            /// </summary>
            [EnumMember(Value = "HASHTAGS")]
            HASHTAGSEnum = 1,
            
            /// <summary>
            /// Enum PROMOTIONSANDPRICESEnum for PROMOTIONS_AND_PRICES
            /// </summary>
            [EnumMember(Value = "PROMOTIONS_AND_PRICES")]
            PROMOTIONSANDPRICESEnum = 2,
            
            /// <summary>
            /// Enum TARGETINGEnum for TARGETING
            /// </summary>
            [EnumMember(Value = "TARGETING")]
            TARGETINGEnum = 3,
            
            /// <summary>
            /// Enum LANDINGPAGEEnum for LANDING_PAGE
            /// </summary>
            [EnumMember(Value = "LANDING_PAGE")]
            LANDINGPAGEEnum = 4,
            
            /// <summary>
            /// Enum CAPSANDSYMBOLSEnum for CAPS_AND_SYMBOLS
            /// </summary>
            [EnumMember(Value = "CAPS_AND_SYMBOLS")]
            CAPSANDSYMBOLSEnum = 5,
            
            /// <summary>
            /// Enum SHOCKINGEnum for SHOCKING
            /// </summary>
            [EnumMember(Value = "SHOCKING")]
            SHOCKINGEnum = 6,
            
            /// <summary>
            /// Enum WEIGHTLOSSEnum for WEIGHT_LOSS
            /// </summary>
            [EnumMember(Value = "WEIGHT_LOSS")]
            WEIGHTLOSSEnum = 7,
            
            /// <summary>
            /// Enum PROHIBITEDPRODUCTEnum for PROHIBITED_PRODUCT
            /// </summary>
            [EnumMember(Value = "PROHIBITED_PRODUCT")]
            PROHIBITEDPRODUCTEnum = 8,
            
            /// <summary>
            /// Enum AUTHENTICITYEnum for AUTHENTICITY
            /// </summary>
            [EnumMember(Value = "AUTHENTICITY")]
            AUTHENTICITYEnum = 9,
            
            /// <summary>
            /// Enum NUDITYEnum for NUDITY
            /// </summary>
            [EnumMember(Value = "NUDITY")]
            NUDITYEnum = 10,
            
            /// <summary>
            /// Enum CONFUSINGDESIGNEnum for CONFUSING_DESIGN
            /// </summary>
            [EnumMember(Value = "CONFUSING_DESIGN")]
            CONFUSINGDESIGNEnum = 11,
            
            /// <summary>
            /// Enum URGENCYEnum for URGENCY
            /// </summary>
            [EnumMember(Value = "URGENCY")]
            URGENCYEnum = 12,
            
            /// <summary>
            /// Enum RATINGSEnum for RATINGS
            /// </summary>
            [EnumMember(Value = "RATINGS")]
            RATINGSEnum = 13,
            
            /// <summary>
            /// Enum APPEnum for APP
            /// </summary>
            [EnumMember(Value = "APP")]
            APPEnum = 14,
            
            /// <summary>
            /// Enum ALCOHOLEnum for ALCOHOL
            /// </summary>
            [EnumMember(Value = "ALCOHOL")]
            ALCOHOLEnum = 15,
            
            /// <summary>
            /// Enum CONTESTSEnum for CONTESTS
            /// </summary>
            [EnumMember(Value = "CONTESTS")]
            CONTESTSEnum = 16,
            
            /// <summary>
            /// Enum POLITICALEnum for POLITICAL
            /// </summary>
            [EnumMember(Value = "POLITICAL")]
            POLITICALEnum = 17,
            
            /// <summary>
            /// Enum OTHEREnum for OTHER
            /// </summary>
            [EnumMember(Value = "OTHER")]
            OTHEREnum = 18,
            
            /// <summary>
            /// Enum IMAGEEnum for IMAGE
            /// </summary>
            [EnumMember(Value = "IMAGE")]
            IMAGEEnum = 19,
            
            /// <summary>
            /// Enum NAREnum for NAR
            /// </summary>
            [EnumMember(Value = "NAR")]
            NAREnum = 20,
            
            /// <summary>
            /// Enum INCONSISTENTEnum for INCONSISTENT
            /// </summary>
            [EnumMember(Value = "INCONSISTENT")]
            INCONSISTENTEnum = 21,
            
            /// <summary>
            /// Enum CLICKBAITEnum for CLICKBAIT
            /// </summary>
            [EnumMember(Value = "CLICKBAIT")]
            CLICKBAITEnum = 22,
            
            /// <summary>
            /// Enum NODESCRIPTIONEnum for NO_DESCRIPTION
            /// </summary>
            [EnumMember(Value = "NO_DESCRIPTION")]
            NODESCRIPTIONEnum = 23,
            
            /// <summary>
            /// Enum LOWQUALITYEnum for LOW_QUALITY
            /// </summary>
            [EnumMember(Value = "LOW_QUALITY")]
            LOWQUALITYEnum = 24,
            
            /// <summary>
            /// Enum EXAGGERATEDCLAIMSEnum for EXAGGERATED_CLAIMS
            /// </summary>
            [EnumMember(Value = "EXAGGERATED_CLAIMS")]
            EXAGGERATEDCLAIMSEnum = 25,
            
            /// <summary>
            /// Enum PINTERESTBRANDEnum for PINTEREST_BRAND
            /// </summary>
            [EnumMember(Value = "PINTEREST_BRAND")]
            PINTERESTBRANDEnum = 26,
            
            /// <summary>
            /// Enum ALCOHOLNOSALEEnum for ALCOHOL_NO_SALE
            /// </summary>
            [EnumMember(Value = "ALCOHOL_NO_SALE")]
            ALCOHOLNOSALEEnum = 27,
            
            /// <summary>
            /// Enum LANDINGPAGESPEEDEnum for LANDING_PAGE_SPEED
            /// </summary>
            [EnumMember(Value = "LANDING_PAGE_SPEED")]
            LANDINGPAGESPEEDEnum = 28,
            
            /// <summary>
            /// Enum LANDINGPAGEHARDWALLEnum for LANDING_PAGE_HARDWALL
            /// </summary>
            [EnumMember(Value = "LANDING_PAGE_HARDWALL")]
            LANDINGPAGEHARDWALLEnum = 29,
            
            /// <summary>
            /// Enum LANDINGPAGEBROKENEnum for LANDING_PAGE_BROKEN
            /// </summary>
            [EnumMember(Value = "LANDING_PAGE_BROKEN")]
            LANDINGPAGEBROKENEnum = 30,
            
            /// <summary>
            /// Enum LANDINGPAGEQUALITYEnum for LANDING_PAGE_QUALITY
            /// </summary>
            [EnumMember(Value = "LANDING_PAGE_QUALITY")]
            LANDINGPAGEQUALITYEnum = 31,
            
            /// <summary>
            /// Enum OUTOFSTOCKEnum for OUT_OF_STOCK
            /// </summary>
            [EnumMember(Value = "OUT_OF_STOCK")]
            OUTOFSTOCKEnum = 32,
            
            /// <summary>
            /// Enum IMAGELOWQUALITYEnum for IMAGE_LOW_QUALITY
            /// </summary>
            [EnumMember(Value = "IMAGE_LOW_QUALITY")]
            IMAGELOWQUALITYEnum = 33,
            
            /// <summary>
            /// Enum IMAGEBUSYEnum for IMAGE_BUSY
            /// </summary>
            [EnumMember(Value = "IMAGE_BUSY")]
            IMAGEBUSYEnum = 34,
            
            /// <summary>
            /// Enum IMAGEPOORLYEDITEDEnum for IMAGE_POORLY_EDITED
            /// </summary>
            [EnumMember(Value = "IMAGE_POORLY_EDITED")]
            IMAGEPOORLYEDITEDEnum = 35,
            
            /// <summary>
            /// Enum IMAGEBEFOREAFTEREnum for IMAGE_BEFORE_AFTER
            /// </summary>
            [EnumMember(Value = "IMAGE_BEFORE_AFTER")]
            IMAGEBEFOREAFTEREnum = 36,
            
            /// <summary>
            /// Enum UGCEnum for UGC
            /// </summary>
            [EnumMember(Value = "UGC")]
            UGCEnum = 37,
            
            /// <summary>
            /// Enum FAKEBUTTONSEnum for FAKE_BUTTONS
            /// </summary>
            [EnumMember(Value = "FAKE_BUTTONS")]
            FAKEBUTTONSEnum = 38,
            
            /// <summary>
            /// Enum WEAPONSEnum for WEAPONS
            /// </summary>
            [EnumMember(Value = "WEAPONS")]
            WEAPONSEnum = 39,
            
            /// <summary>
            /// Enum SENSITIVEEnum for SENSITIVE
            /// </summary>
            [EnumMember(Value = "SENSITIVE")]
            SENSITIVEEnum = 40,
            
            /// <summary>
            /// Enum UNACCEPTABLEBUSINESSEnum for UNACCEPTABLE_BUSINESS
            /// </summary>
            [EnumMember(Value = "UNACCEPTABLE_BUSINESS")]
            UNACCEPTABLEBUSINESSEnum = 41,
            
            /// <summary>
            /// Enum SUSPICIOUSCLAIMSEnum for SUSPICIOUS_CLAIMS
            /// </summary>
            [EnumMember(Value = "SUSPICIOUS_CLAIMS")]
            SUSPICIOUSCLAIMSEnum = 42,
            
            /// <summary>
            /// Enum PHARMAEnum for PHARMA
            /// </summary>
            [EnumMember(Value = "PHARMA")]
            PHARMAEnum = 43,
            
            /// <summary>
            /// Enum SUSPICIOUSSUPPLEMENTSEnum for SUSPICIOUS_SUPPLEMENTS
            /// </summary>
            [EnumMember(Value = "SUSPICIOUS_SUPPLEMENTS")]
            SUSPICIOUSSUPPLEMENTSEnum = 44,
            
            /// <summary>
            /// Enum ILLEGALRECREATIONALDRUGEnum for ILLEGAL_RECREATIONAL_DRUG
            /// </summary>
            [EnumMember(Value = "ILLEGAL_RECREATIONAL_DRUG")]
            ILLEGALRECREATIONALDRUGEnum = 45,
            
            /// <summary>
            /// Enum LOWQUALITYLANDINGPAGEEnum for LOW_QUALITY_LANDING_PAGE
            /// </summary>
            [EnumMember(Value = "LOW_QUALITY_LANDING_PAGE")]
            LOWQUALITYLANDINGPAGEEnum = 46,
            
            /// <summary>
            /// Enum RESTRICTEDHEALTHCAREEnum for RESTRICTED_HEALTHCARE
            /// </summary>
            [EnumMember(Value = "RESTRICTED_HEALTHCARE")]
            RESTRICTEDHEALTHCAREEnum = 47,
            
            /// <summary>
            /// Enum INCONSISTENTLANGFREnum for INCONSISTENT_LANG_FR
            /// </summary>
            [EnumMember(Value = "INCONSISTENT_LANG_FR")]
            INCONSISTENTLANGFREnum = 48
        }

        /// <summary>
        /// Enum reason why the pin was rejected. Returned if &lt;code&gt;review_status&lt;/code&gt; is \&quot;REJECTED\&quot;.
        /// </summary>
        /// <value>Enum reason why the pin was rejected. Returned if &lt;code&gt;review_status&lt;/code&gt; is \&quot;REJECTED\&quot;.</value>
        [DataMember(Name="rejected_reasons", EmitDefaultValue=false)]
        public List<AdResponse.RejectedReasonsEnum> RejectedReasons { get; set; }

        /// <summary>
        /// Text reason why the pin was rejected. Returned if &lt;code&gt;review_status&lt;/code&gt; is \&quot;REJECTED\&quot;.
        /// </summary>
        /// <value>Text reason why the pin was rejected. Returned if &lt;code&gt;review_status&lt;/code&gt; is \&quot;REJECTED\&quot;.</value>
        [DataMember(Name="rejection_labels", EmitDefaultValue=false)]
        public List<string> RejectionLabels { get; set; }


        /// <summary>
        /// Ad review status
        /// </summary>
        /// <value>Ad review status</value>
        [TypeConverter(typeof(CustomEnumConverter<ReviewStatusEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ReviewStatusEnum
        {
            
            /// <summary>
            /// Enum OTHEREnum for OTHER
            /// </summary>
            [EnumMember(Value = "OTHER")]
            OTHEREnum = 1,
            
            /// <summary>
            /// Enum PENDINGEnum for PENDING
            /// </summary>
            [EnumMember(Value = "PENDING")]
            PENDINGEnum = 2,
            
            /// <summary>
            /// Enum REJECTEDEnum for REJECTED
            /// </summary>
            [EnumMember(Value = "REJECTED")]
            REJECTEDEnum = 3,
            
            /// <summary>
            /// Enum APPROVEDEnum for APPROVED
            /// </summary>
            [EnumMember(Value = "APPROVED")]
            APPROVEDEnum = 4
        }

        /// <summary>
        /// Ad review status
        /// </summary>
        /// <value>Ad review status</value>
        /* <example>PENDING</example> */
        [DataMember(Name="review_status", EmitDefaultValue=true)]
        public ReviewStatusEnum ReviewStatus { get; set; }

        /// <summary>
        /// Always \&quot;ad\&quot;.
        /// </summary>
        /// <value>Always \&quot;ad\&quot;.</value>
        /* <example>pinpromotion</example> */
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Last update time. Unix timestamp in seconds.
        /// </summary>
        /// <value>Last update time. Unix timestamp in seconds.</value>
        /* <example>1451431341</example> */
        [DataMember(Name="updated_time", EmitDefaultValue=true)]
        public int UpdatedTime { get; set; }

        /// <summary>
        /// Ad summary status
        /// </summary>
        /// <value>Ad summary status</value>
        [DataMember(Name="summary_status", EmitDefaultValue=true)]
        public PinPromotionSummaryStatus SummaryStatus { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AdResponse {\n");
            sb.Append("  AdGroupId: ").Append(AdGroupId).Append("\n");
            sb.Append("  AndroidDeepLink: ").Append(AndroidDeepLink).Append("\n");
            sb.Append("  CarouselAndroidDeepLinks: ").Append(CarouselAndroidDeepLinks).Append("\n");
            sb.Append("  CarouselDestinationUrls: ").Append(CarouselDestinationUrls).Append("\n");
            sb.Append("  CarouselIosDeepLinks: ").Append(CarouselIosDeepLinks).Append("\n");
            sb.Append("  ClickTrackingUrl: ").Append(ClickTrackingUrl).Append("\n");
            sb.Append("  CreativeType: ").Append(CreativeType).Append("\n");
            sb.Append("  DestinationUrl: ").Append(DestinationUrl).Append("\n");
            sb.Append("  IosDeepLink: ").Append(IosDeepLink).Append("\n");
            sb.Append("  IsPinDeleted: ").Append(IsPinDeleted).Append("\n");
            sb.Append("  IsRemovable: ").Append(IsRemovable).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  TrackingUrls: ").Append(TrackingUrls).Append("\n");
            sb.Append("  ViewTrackingUrl: ").Append(ViewTrackingUrl).Append("\n");
            sb.Append("  LeadFormId: ").Append(LeadFormId).Append("\n");
            sb.Append("  GridClickType: ").Append(GridClickType).Append("\n");
            sb.Append("  CustomizableCtaType: ").Append(CustomizableCtaType).Append("\n");
            sb.Append("  QuizPinData: ").Append(QuizPinData).Append("\n");
            sb.Append("  PinId: ").Append(PinId).Append("\n");
            sb.Append("  AdAccountId: ").Append(AdAccountId).Append("\n");
            sb.Append("  CampaignId: ").Append(CampaignId).Append("\n");
            sb.Append("  CollectionItemsDestinationUrlTemplate: ").Append(CollectionItemsDestinationUrlTemplate).Append("\n");
            sb.Append("  CreatedTime: ").Append(CreatedTime).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  RejectedReasons: ").Append(RejectedReasons).Append("\n");
            sb.Append("  RejectionLabels: ").Append(RejectionLabels).Append("\n");
            sb.Append("  ReviewStatus: ").Append(ReviewStatus).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  UpdatedTime: ").Append(UpdatedTime).Append("\n");
            sb.Append("  SummaryStatus: ").Append(SummaryStatus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((AdResponse)obj);
        }

        /// <summary>
        /// Returns true if AdResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of AdResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AdResponse other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    AdGroupId == other.AdGroupId ||
                    AdGroupId != null &&
                    AdGroupId.Equals(other.AdGroupId)
                ) && 
                (
                    AndroidDeepLink == other.AndroidDeepLink ||
                    AndroidDeepLink != null &&
                    AndroidDeepLink.Equals(other.AndroidDeepLink)
                ) && 
                (
                    CarouselAndroidDeepLinks == other.CarouselAndroidDeepLinks ||
                    CarouselAndroidDeepLinks != null &&
                    other.CarouselAndroidDeepLinks != null &&
                    CarouselAndroidDeepLinks.SequenceEqual(other.CarouselAndroidDeepLinks)
                ) && 
                (
                    CarouselDestinationUrls == other.CarouselDestinationUrls ||
                    CarouselDestinationUrls != null &&
                    other.CarouselDestinationUrls != null &&
                    CarouselDestinationUrls.SequenceEqual(other.CarouselDestinationUrls)
                ) && 
                (
                    CarouselIosDeepLinks == other.CarouselIosDeepLinks ||
                    CarouselIosDeepLinks != null &&
                    other.CarouselIosDeepLinks != null &&
                    CarouselIosDeepLinks.SequenceEqual(other.CarouselIosDeepLinks)
                ) && 
                (
                    ClickTrackingUrl == other.ClickTrackingUrl ||
                    ClickTrackingUrl != null &&
                    ClickTrackingUrl.Equals(other.ClickTrackingUrl)
                ) && 
                (
                    CreativeType == other.CreativeType ||
                    
                    CreativeType.Equals(other.CreativeType)
                ) && 
                (
                    DestinationUrl == other.DestinationUrl ||
                    DestinationUrl != null &&
                    DestinationUrl.Equals(other.DestinationUrl)
                ) && 
                (
                    IosDeepLink == other.IosDeepLink ||
                    IosDeepLink != null &&
                    IosDeepLink.Equals(other.IosDeepLink)
                ) && 
                (
                    IsPinDeleted == other.IsPinDeleted ||
                    
                    IsPinDeleted.Equals(other.IsPinDeleted)
                ) && 
                (
                    IsRemovable == other.IsRemovable ||
                    
                    IsRemovable.Equals(other.IsRemovable)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Status == other.Status ||
                    
                    Status.Equals(other.Status)
                ) && 
                (
                    TrackingUrls == other.TrackingUrls ||
                    TrackingUrls != null &&
                    TrackingUrls.Equals(other.TrackingUrls)
                ) && 
                (
                    ViewTrackingUrl == other.ViewTrackingUrl ||
                    ViewTrackingUrl != null &&
                    ViewTrackingUrl.Equals(other.ViewTrackingUrl)
                ) && 
                (
                    LeadFormId == other.LeadFormId ||
                    LeadFormId != null &&
                    LeadFormId.Equals(other.LeadFormId)
                ) && 
                (
                    GridClickType == other.GridClickType ||
                    
                    GridClickType.Equals(other.GridClickType)
                ) && 
                (
                    CustomizableCtaType == other.CustomizableCtaType ||
                    
                    CustomizableCtaType.Equals(other.CustomizableCtaType)
                ) && 
                (
                    QuizPinData == other.QuizPinData ||
                    QuizPinData != null &&
                    QuizPinData.Equals(other.QuizPinData)
                ) && 
                (
                    PinId == other.PinId ||
                    PinId != null &&
                    PinId.Equals(other.PinId)
                ) && 
                (
                    AdAccountId == other.AdAccountId ||
                    AdAccountId != null &&
                    AdAccountId.Equals(other.AdAccountId)
                ) && 
                (
                    CampaignId == other.CampaignId ||
                    CampaignId != null &&
                    CampaignId.Equals(other.CampaignId)
                ) && 
                (
                    CollectionItemsDestinationUrlTemplate == other.CollectionItemsDestinationUrlTemplate ||
                    CollectionItemsDestinationUrlTemplate != null &&
                    CollectionItemsDestinationUrlTemplate.Equals(other.CollectionItemsDestinationUrlTemplate)
                ) && 
                (
                    CreatedTime == other.CreatedTime ||
                    
                    CreatedTime.Equals(other.CreatedTime)
                ) && 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    RejectedReasons == other.RejectedReasons ||
                    RejectedReasons != null &&
                    other.RejectedReasons != null &&
                    RejectedReasons.SequenceEqual(other.RejectedReasons)
                ) && 
                (
                    RejectionLabels == other.RejectionLabels ||
                    RejectionLabels != null &&
                    other.RejectionLabels != null &&
                    RejectionLabels.SequenceEqual(other.RejectionLabels)
                ) && 
                (
                    ReviewStatus == other.ReviewStatus ||
                    
                    ReviewStatus.Equals(other.ReviewStatus)
                ) && 
                (
                    Type == other.Type ||
                    Type != null &&
                    Type.Equals(other.Type)
                ) && 
                (
                    UpdatedTime == other.UpdatedTime ||
                    
                    UpdatedTime.Equals(other.UpdatedTime)
                ) && 
                (
                    SummaryStatus == other.SummaryStatus ||
                    
                    SummaryStatus.Equals(other.SummaryStatus)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (AdGroupId != null)
                    hashCode = hashCode * 59 + AdGroupId.GetHashCode();
                    if (AndroidDeepLink != null)
                    hashCode = hashCode * 59 + AndroidDeepLink.GetHashCode();
                    if (CarouselAndroidDeepLinks != null)
                    hashCode = hashCode * 59 + CarouselAndroidDeepLinks.GetHashCode();
                    if (CarouselDestinationUrls != null)
                    hashCode = hashCode * 59 + CarouselDestinationUrls.GetHashCode();
                    if (CarouselIosDeepLinks != null)
                    hashCode = hashCode * 59 + CarouselIosDeepLinks.GetHashCode();
                    if (ClickTrackingUrl != null)
                    hashCode = hashCode * 59 + ClickTrackingUrl.GetHashCode();
                    
                    hashCode = hashCode * 59 + CreativeType.GetHashCode();
                    if (DestinationUrl != null)
                    hashCode = hashCode * 59 + DestinationUrl.GetHashCode();
                    if (IosDeepLink != null)
                    hashCode = hashCode * 59 + IosDeepLink.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsPinDeleted.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsRemovable.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    if (TrackingUrls != null)
                    hashCode = hashCode * 59 + TrackingUrls.GetHashCode();
                    if (ViewTrackingUrl != null)
                    hashCode = hashCode * 59 + ViewTrackingUrl.GetHashCode();
                    if (LeadFormId != null)
                    hashCode = hashCode * 59 + LeadFormId.GetHashCode();
                    
                    hashCode = hashCode * 59 + GridClickType.GetHashCode();
                    
                    hashCode = hashCode * 59 + CustomizableCtaType.GetHashCode();
                    if (QuizPinData != null)
                    hashCode = hashCode * 59 + QuizPinData.GetHashCode();
                    if (PinId != null)
                    hashCode = hashCode * 59 + PinId.GetHashCode();
                    if (AdAccountId != null)
                    hashCode = hashCode * 59 + AdAccountId.GetHashCode();
                    if (CampaignId != null)
                    hashCode = hashCode * 59 + CampaignId.GetHashCode();
                    if (CollectionItemsDestinationUrlTemplate != null)
                    hashCode = hashCode * 59 + CollectionItemsDestinationUrlTemplate.GetHashCode();
                    
                    hashCode = hashCode * 59 + CreatedTime.GetHashCode();
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (RejectedReasons != null)
                    hashCode = hashCode * 59 + RejectedReasons.GetHashCode();
                    if (RejectionLabels != null)
                    hashCode = hashCode * 59 + RejectionLabels.GetHashCode();
                    
                    hashCode = hashCode * 59 + ReviewStatus.GetHashCode();
                    if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    
                    hashCode = hashCode * 59 + UpdatedTime.GetHashCode();
                    
                    hashCode = hashCode * 59 + SummaryStatus.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(AdResponse left, AdResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AdResponse left, AdResponse right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
