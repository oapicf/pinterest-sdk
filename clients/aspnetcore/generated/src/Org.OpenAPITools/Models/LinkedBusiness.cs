/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class LinkedBusiness : IEquatable<LinkedBusiness>
    {
        /// <summary>
        /// Username
        /// </summary>
        /// <value>Username</value>
        /* <example>username</example> */
        [DataMember(Name="username", EmitDefaultValue=false)]
        public string Username { get; set; }

        /// <summary>
        /// image_small_url
        /// </summary>
        /// <value>image_small_url</value>
        /* <example>https://www.example.com/dj23454f53dfk2324.jpg</example> */
        [DataMember(Name="image_small_url", EmitDefaultValue=false)]
        public string ImageSmallUrl { get; set; }

        /// <summary>
        /// image_medium_url
        /// </summary>
        /// <value>image_medium_url</value>
        /* <example>https://www.example.com/dj23454f53dfk2324.jpg</example> */
        [DataMember(Name="image_medium_url", EmitDefaultValue=false)]
        public string ImageMediumUrl { get; set; }

        /// <summary>
        /// image_large_url
        /// </summary>
        /// <value>image_large_url</value>
        /* <example>https://www.example.com/dj23454f53dfk2324.jpg</example> */
        [DataMember(Name="image_large_url", EmitDefaultValue=false)]
        public string ImageLargeUrl { get; set; }

        /// <summary>
        /// image_xlarge_url
        /// </summary>
        /// <value>image_xlarge_url</value>
        /* <example>https://www.example.com/dj23454f53dfk2324.jpg</example> */
        [DataMember(Name="image_xlarge_url", EmitDefaultValue=false)]
        public string ImageXlargeUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LinkedBusiness {\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  ImageSmallUrl: ").Append(ImageSmallUrl).Append("\n");
            sb.Append("  ImageMediumUrl: ").Append(ImageMediumUrl).Append("\n");
            sb.Append("  ImageLargeUrl: ").Append(ImageLargeUrl).Append("\n");
            sb.Append("  ImageXlargeUrl: ").Append(ImageXlargeUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((LinkedBusiness)obj);
        }

        /// <summary>
        /// Returns true if LinkedBusiness instances are equal
        /// </summary>
        /// <param name="other">Instance of LinkedBusiness to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LinkedBusiness other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Username == other.Username ||
                    Username != null &&
                    Username.Equals(other.Username)
                ) && 
                (
                    ImageSmallUrl == other.ImageSmallUrl ||
                    ImageSmallUrl != null &&
                    ImageSmallUrl.Equals(other.ImageSmallUrl)
                ) && 
                (
                    ImageMediumUrl == other.ImageMediumUrl ||
                    ImageMediumUrl != null &&
                    ImageMediumUrl.Equals(other.ImageMediumUrl)
                ) && 
                (
                    ImageLargeUrl == other.ImageLargeUrl ||
                    ImageLargeUrl != null &&
                    ImageLargeUrl.Equals(other.ImageLargeUrl)
                ) && 
                (
                    ImageXlargeUrl == other.ImageXlargeUrl ||
                    ImageXlargeUrl != null &&
                    ImageXlargeUrl.Equals(other.ImageXlargeUrl)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Username != null)
                    hashCode = hashCode * 59 + Username.GetHashCode();
                    if (ImageSmallUrl != null)
                    hashCode = hashCode * 59 + ImageSmallUrl.GetHashCode();
                    if (ImageMediumUrl != null)
                    hashCode = hashCode * 59 + ImageMediumUrl.GetHashCode();
                    if (ImageLargeUrl != null)
                    hashCode = hashCode * 59 + ImageLargeUrl.GetHashCode();
                    if (ImageXlargeUrl != null)
                    hashCode = hashCode * 59 + ImageXlargeUrl.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(LinkedBusiness left, LinkedBusiness right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(LinkedBusiness left, LinkedBusiness right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
