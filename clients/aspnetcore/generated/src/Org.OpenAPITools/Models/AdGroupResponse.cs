/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class AdGroupResponse : IEquatable<AdGroupResponse>
    {
        /// <summary>
        /// Ad group name.
        /// </summary>
        /// <value>Ad group name.</value>
        /* <example>Ad Group For Pin: 687195905986</example> */
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Ad group/entity status.
        /// </summary>
        /// <value>Ad group/entity status.</value>
        [DataMember(Name="status", EmitDefaultValue=true)]
        public EntityStatus Status { get; set; }

        /// <summary>
        /// Budget in micro currency. This field is **REQUIRED** for non-CBO (campaign budget optimization) campaigns.  A CBO campaign automatically generates ad group budgets from its campaign budget to maximize campaign outcome. A CBO campaign is limited to 70 or less ad groups.
        /// </summary>
        /// <value>Budget in micro currency. This field is **REQUIRED** for non-CBO (campaign budget optimization) campaigns.  A CBO campaign automatically generates ad group budgets from its campaign budget to maximize campaign outcome. A CBO campaign is limited to 70 or less ad groups.</value>
        /* <example>5000000</example> */
        [DataMember(Name="budget_in_micro_currency", EmitDefaultValue=true)]
        public int? BudgetInMicroCurrency { get; set; }

        /// <summary>
        /// Bid price in micro currency. This field is **REQUIRED** for the following campaign objective_type/billable_event combinations: AWARENESS/IMPRESSION, CONSIDERATION/CLICKTHROUGH, CATALOG_SALES/CLICKTHROUGH, VIDEO_VIEW/VIDEO_V_50_MRC.
        /// </summary>
        /// <value>Bid price in micro currency. This field is **REQUIRED** for the following campaign objective_type/billable_event combinations: AWARENESS/IMPRESSION, CONSIDERATION/CLICKTHROUGH, CATALOG_SALES/CLICKTHROUGH, VIDEO_VIEW/VIDEO_V_50_MRC.</value>
        /* <example>5000000</example> */
        [DataMember(Name="bid_in_micro_currency", EmitDefaultValue=true)]
        public int? BidInMicroCurrency { get; set; }

        /// <summary>
        /// Optimization goals for objective-based performance campaigns. **REQUIRED** when campaign&#39;s &#x60;objective_type&#x60; is set to &#x60;\&quot;WEB_CONVERSION\&quot;&#x60;.
        /// </summary>
        /// <value>Optimization goals for objective-based performance campaigns. **REQUIRED** when campaign&#39;s &#x60;objective_type&#x60; is set to &#x60;\&quot;WEB_CONVERSION\&quot;&#x60;.</value>
        [DataMember(Name="optimization_goal_metadata", EmitDefaultValue=true)]
        public OptimizationGoalMetadata OptimizationGoalMetadata { get; set; }

        /// <summary>
        /// Gets or Sets BudgetType
        /// </summary>
        [DataMember(Name="budget_type", EmitDefaultValue=true)]
        public BudgetType BudgetType { get; set; }

        /// <summary>
        /// Ad group start time. Unix timestamp in seconds. Defaults to current time.
        /// </summary>
        /// <value>Ad group start time. Unix timestamp in seconds. Defaults to current time.</value>
        /* <example>5686848000</example> */
        [DataMember(Name="start_time", EmitDefaultValue=true)]
        public int? StartTime { get; set; }

        /// <summary>
        /// Ad group end time. Unix timestamp in seconds.
        /// </summary>
        /// <value>Ad group end time. Unix timestamp in seconds.</value>
        /* <example>5705424000</example> */
        [DataMember(Name="end_time", EmitDefaultValue=true)]
        public int? EndTime { get; set; }

        /// <summary>
        /// Gets or Sets TargetingSpec
        /// </summary>
        [DataMember(Name="targeting_spec", EmitDefaultValue=false)]
        public TargetingSpec TargetingSpec { get; set; }

        /// <summary>
        /// Set a limit to the number of times a promoted pin from this campaign can be impressed by a pinner within the past rolling 30 days. Only available for CPM (cost per mille (1000 impressions))  ad groups. A CPM ad group has an IMPRESSION &lt;a href&#x3D;\&quot;/docs/redoc/#section/Billable-event\&quot;&gt;billable_event&lt;/a&gt; value. This field **REQUIRES** the &#x60;end_time&#x60; field.
        /// </summary>
        /// <value>Set a limit to the number of times a promoted pin from this campaign can be impressed by a pinner within the past rolling 30 days. Only available for CPM (cost per mille (1000 impressions))  ad groups. A CPM ad group has an IMPRESSION &lt;a href&#x3D;\&quot;/docs/redoc/#section/Billable-event\&quot;&gt;billable_event&lt;/a&gt; value. This field **REQUIRES** the &#x60;end_time&#x60; field.</value>
        /* <example>100</example> */
        [DataMember(Name="lifetime_frequency_cap", EmitDefaultValue=true)]
        public int LifetimeFrequencyCap { get; set; }

        /// <summary>
        /// Third-party tracking URLs.&lt;br&gt; JSON object with the format: {\&quot;&lt;a href&#x3D;\&quot;/docs/redoc/#section/Tracking-URL-event\&quot;&gt;Tracking event enum&lt;/a&gt;\&quot;:[URL string array],...}&lt;br&gt; For example: {\&quot;impression\&quot;: [\&quot;URL1\&quot;, \&quot;URL2\&quot;], \&quot;click\&quot;: [\&quot;URL1\&quot;, \&quot;URL2\&quot;, \&quot;URL3\&quot;]}.&lt;br&gt;Up to three tracking URLs are supported for each event type. Tracking URLs set at the ad group or ad level can override those set at the campaign level. May be null. Pass in an empty object - {} - to remove tracking URLs.&lt;br&gt;&lt;br&gt; For more information, see &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/third-party-and-dynamic-tracking\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Third-party and dynamic tracking&lt;/a&gt;.
        /// </summary>
        /// <value>Third-party tracking URLs.&lt;br&gt; JSON object with the format: {\&quot;&lt;a href&#x3D;\&quot;/docs/redoc/#section/Tracking-URL-event\&quot;&gt;Tracking event enum&lt;/a&gt;\&quot;:[URL string array],...}&lt;br&gt; For example: {\&quot;impression\&quot;: [\&quot;URL1\&quot;, \&quot;URL2\&quot;], \&quot;click\&quot;: [\&quot;URL1\&quot;, \&quot;URL2\&quot;, \&quot;URL3\&quot;]}.&lt;br&gt;Up to three tracking URLs are supported for each event type. Tracking URLs set at the ad group or ad level can override those set at the campaign level. May be null. Pass in an empty object - {} - to remove tracking URLs.&lt;br&gt;&lt;br&gt; For more information, see &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/third-party-and-dynamic-tracking\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Third-party and dynamic tracking&lt;/a&gt;.</value>
        [DataMember(Name="tracking_urls", EmitDefaultValue=true)]
        public TrackingUrls TrackingUrls { get; set; }

        /// <summary>
        /// Enable auto-targeting for ad group. Also known as &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/expanded-targeting\&quot; target&#x3D;\&quot;_blank\&quot;&gt;\&quot;expanded targeting\&quot;&lt;/a&gt;.
        /// </summary>
        /// <value>Enable auto-targeting for ad group. Also known as &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/expanded-targeting\&quot; target&#x3D;\&quot;_blank\&quot;&gt;\&quot;expanded targeting\&quot;&lt;/a&gt;.</value>
        /* <example>true</example> */
        [DataMember(Name="auto_targeting_enabled", EmitDefaultValue=true)]
        public bool? AutoTargetingEnabled { get; set; }

        /// <summary>
        /// &lt;a href&#x3D;\&quot;/docs/redoc/#section/Placement-group\&quot;&gt;Placement group&lt;/a&gt;.
        /// </summary>
        /// <value>&lt;a href&#x3D;\&quot;/docs/redoc/#section/Placement-group\&quot;&gt;Placement group&lt;/a&gt;.</value>
        [DataMember(Name="placement_group", EmitDefaultValue=true)]
        public PlacementGroupType PlacementGroup { get; set; }

        /// <summary>
        /// Gets or Sets PacingDeliveryType
        /// </summary>
        [DataMember(Name="pacing_delivery_type", EmitDefaultValue=true)]
        public PacingDeliveryType PacingDeliveryType { get; set; }

        /// <summary>
        /// Campaign ID of the ad group.
        /// </summary>
        /// <value>Campaign ID of the ad group.</value>
        /* <example>626736533506</example> */
        [RegularExpression("^[C]?\\d+$")]
        [DataMember(Name="campaign_id", EmitDefaultValue=false)]
        public string CampaignId { get; set; }

        /// <summary>
        /// Gets or Sets BillableEvent
        /// </summary>
        [DataMember(Name="billable_event", EmitDefaultValue=true)]
        public ActionType BillableEvent { get; set; }


        /// <summary>
        /// Bid strategy type. For Campaigns with Video Completion objectives, the only supported bid strategy type is AUTOMATIC_BID.
        /// </summary>
        /// <value>Bid strategy type. For Campaigns with Video Completion objectives, the only supported bid strategy type is AUTOMATIC_BID.</value>
        [TypeConverter(typeof(CustomEnumConverter<BidStrategyTypeEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum BidStrategyTypeEnum
        {
            
            /// <summary>
            /// Enum AUTOMATICBIDEnum for AUTOMATIC_BID
            /// </summary>
            [EnumMember(Value = "AUTOMATIC_BID")]
            AUTOMATICBIDEnum = 1,
            
            /// <summary>
            /// Enum MAXBIDEnum for MAX_BID
            /// </summary>
            [EnumMember(Value = "MAX_BID")]
            MAXBIDEnum = 2,
            
            /// <summary>
            /// Enum TARGETAVGEnum for TARGET_AVG
            /// </summary>
            [EnumMember(Value = "TARGET_AVG")]
            TARGETAVGEnum = 3
        }

        /// <summary>
        /// Bid strategy type. For Campaigns with Video Completion objectives, the only supported bid strategy type is AUTOMATIC_BID.
        /// </summary>
        /// <value>Bid strategy type. For Campaigns with Video Completion objectives, the only supported bid strategy type is AUTOMATIC_BID.</value>
        /* <example>MAX_BID</example> */
        [DataMember(Name="bid_strategy_type", EmitDefaultValue=true)]
        public BidStrategyTypeEnum? BidStrategyType { get; set; }

        /// <summary>
        /// Targeting template IDs applied to the ad group. We currently only support 1 targeting template per ad group. To use targeting templates, do not set any other targeting fields: targeting_spec, tracking_urls, auto_targeting_enabled, placement_group. To clear all targeting template IDs, set this field to [&#39;0&#39;].
        /// </summary>
        /// <value>Targeting template IDs applied to the ad group. We currently only support 1 targeting template per ad group. To use targeting templates, do not set any other targeting fields: targeting_spec, tracking_urls, auto_targeting_enabled, placement_group. To clear all targeting template IDs, set this field to [&#39;0&#39;].</value>
        [DataMember(Name="targeting_template_ids", EmitDefaultValue=true)]
        public List<string> TargetingTemplateIds { get; set; }

        /// <summary>
        /// Ad group ID.
        /// </summary>
        /// <value>Ad group ID.</value>
        /* <example>2680060704746</example> */
        [RegularExpression("^\\d+$")]
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Advertiser ID.
        /// </summary>
        /// <value>Advertiser ID.</value>
        /* <example>549755885175</example> */
        [RegularExpression("^\\d+$")]
        [DataMember(Name="ad_account_id", EmitDefaultValue=false)]
        public string AdAccountId { get; set; }

        /// <summary>
        /// Ad group creation time. Unix timestamp in seconds.
        /// </summary>
        /// <value>Ad group creation time. Unix timestamp in seconds.</value>
        /* <example>1476477189</example> */
        [DataMember(Name="created_time", EmitDefaultValue=true)]
        public int CreatedTime { get; set; }

        /// <summary>
        /// Ad group last update time. Unix timestamp in seconds.
        /// </summary>
        /// <value>Ad group last update time. Unix timestamp in seconds.</value>
        /* <example>1476477189</example> */
        [DataMember(Name="updated_time", EmitDefaultValue=true)]
        public int UpdatedTime { get; set; }

        /// <summary>
        /// Always \&quot;adgroup\&quot;.
        /// </summary>
        /// <value>Always \&quot;adgroup\&quot;.</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; } = "adgroup";


        /// <summary>
        /// oCPM learn mode
        /// </summary>
        /// <value>oCPM learn mode</value>
        [TypeConverter(typeof(CustomEnumConverter<ConversionLearningModeTypeEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ConversionLearningModeTypeEnum
        {
            
            /// <summary>
            /// Enum NOTACTIVEEnum for NOT_ACTIVE
            /// </summary>
            [EnumMember(Value = "NOT_ACTIVE")]
            NOTACTIVEEnum = 1,
            
            /// <summary>
            /// Enum ACTIVEEnum for ACTIVE
            /// </summary>
            [EnumMember(Value = "ACTIVE")]
            ACTIVEEnum = 2
        }

        /// <summary>
        /// oCPM learn mode
        /// </summary>
        /// <value>oCPM learn mode</value>
        /* <example>ACTIVE</example> */
        [DataMember(Name="conversion_learning_mode_type", EmitDefaultValue=true)]
        public ConversionLearningModeTypeEnum? ConversionLearningModeType { get; set; }

        /// <summary>
        /// Ad group summary status.
        /// </summary>
        /// <value>Ad group summary status.</value>
        [DataMember(Name="summary_status", EmitDefaultValue=true)]
        public AdGroupSummaryStatus SummaryStatus { get; set; }

        /// <summary>
        /// Feed Profile ID associated to the adgroup.
        /// </summary>
        /// <value>Feed Profile ID associated to the adgroup.</value>
        /* <example>626736533506</example> */
        [DataMember(Name="feed_profile_id", EmitDefaultValue=false)]
        public string FeedProfileId { get; set; }

        /// <summary>
        /// [DCA] The Dynamic creative assets to use for DCA. Dynamic Creative Assembly (DCA) accepts basic creative assets of an ad (image, video, title, call to action, logo etc). Then it automatically generates optimized ad combinations based on these assets.
        /// </summary>
        /// <value>[DCA] The Dynamic creative assets to use for DCA. Dynamic Creative Assembly (DCA) accepts basic creative assets of an ad (image, video, title, call to action, logo etc). Then it automatically generates optimized ad combinations based on these assets.</value>
        [DataMember(Name="dca_assets", EmitDefaultValue=true)]
        public Object DcaAssets { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AdGroupResponse {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  BudgetInMicroCurrency: ").Append(BudgetInMicroCurrency).Append("\n");
            sb.Append("  BidInMicroCurrency: ").Append(BidInMicroCurrency).Append("\n");
            sb.Append("  OptimizationGoalMetadata: ").Append(OptimizationGoalMetadata).Append("\n");
            sb.Append("  BudgetType: ").Append(BudgetType).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("  TargetingSpec: ").Append(TargetingSpec).Append("\n");
            sb.Append("  LifetimeFrequencyCap: ").Append(LifetimeFrequencyCap).Append("\n");
            sb.Append("  TrackingUrls: ").Append(TrackingUrls).Append("\n");
            sb.Append("  AutoTargetingEnabled: ").Append(AutoTargetingEnabled).Append("\n");
            sb.Append("  PlacementGroup: ").Append(PlacementGroup).Append("\n");
            sb.Append("  PacingDeliveryType: ").Append(PacingDeliveryType).Append("\n");
            sb.Append("  CampaignId: ").Append(CampaignId).Append("\n");
            sb.Append("  BillableEvent: ").Append(BillableEvent).Append("\n");
            sb.Append("  BidStrategyType: ").Append(BidStrategyType).Append("\n");
            sb.Append("  TargetingTemplateIds: ").Append(TargetingTemplateIds).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AdAccountId: ").Append(AdAccountId).Append("\n");
            sb.Append("  CreatedTime: ").Append(CreatedTime).Append("\n");
            sb.Append("  UpdatedTime: ").Append(UpdatedTime).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  ConversionLearningModeType: ").Append(ConversionLearningModeType).Append("\n");
            sb.Append("  SummaryStatus: ").Append(SummaryStatus).Append("\n");
            sb.Append("  FeedProfileId: ").Append(FeedProfileId).Append("\n");
            sb.Append("  DcaAssets: ").Append(DcaAssets).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((AdGroupResponse)obj);
        }

        /// <summary>
        /// Returns true if AdGroupResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of AdGroupResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AdGroupResponse other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Status == other.Status ||
                    
                    Status.Equals(other.Status)
                ) && 
                (
                    BudgetInMicroCurrency == other.BudgetInMicroCurrency ||
                    BudgetInMicroCurrency != null &&
                    BudgetInMicroCurrency.Equals(other.BudgetInMicroCurrency)
                ) && 
                (
                    BidInMicroCurrency == other.BidInMicroCurrency ||
                    BidInMicroCurrency != null &&
                    BidInMicroCurrency.Equals(other.BidInMicroCurrency)
                ) && 
                (
                    OptimizationGoalMetadata == other.OptimizationGoalMetadata ||
                    OptimizationGoalMetadata != null &&
                    OptimizationGoalMetadata.Equals(other.OptimizationGoalMetadata)
                ) && 
                (
                    BudgetType == other.BudgetType ||
                    
                    BudgetType.Equals(other.BudgetType)
                ) && 
                (
                    StartTime == other.StartTime ||
                    StartTime != null &&
                    StartTime.Equals(other.StartTime)
                ) && 
                (
                    EndTime == other.EndTime ||
                    EndTime != null &&
                    EndTime.Equals(other.EndTime)
                ) && 
                (
                    TargetingSpec == other.TargetingSpec ||
                    TargetingSpec != null &&
                    TargetingSpec.Equals(other.TargetingSpec)
                ) && 
                (
                    LifetimeFrequencyCap == other.LifetimeFrequencyCap ||
                    
                    LifetimeFrequencyCap.Equals(other.LifetimeFrequencyCap)
                ) && 
                (
                    TrackingUrls == other.TrackingUrls ||
                    TrackingUrls != null &&
                    TrackingUrls.Equals(other.TrackingUrls)
                ) && 
                (
                    AutoTargetingEnabled == other.AutoTargetingEnabled ||
                    AutoTargetingEnabled != null &&
                    AutoTargetingEnabled.Equals(other.AutoTargetingEnabled)
                ) && 
                (
                    PlacementGroup == other.PlacementGroup ||
                    
                    PlacementGroup.Equals(other.PlacementGroup)
                ) && 
                (
                    PacingDeliveryType == other.PacingDeliveryType ||
                    
                    PacingDeliveryType.Equals(other.PacingDeliveryType)
                ) && 
                (
                    CampaignId == other.CampaignId ||
                    CampaignId != null &&
                    CampaignId.Equals(other.CampaignId)
                ) && 
                (
                    BillableEvent == other.BillableEvent ||
                    
                    BillableEvent.Equals(other.BillableEvent)
                ) && 
                (
                    BidStrategyType == other.BidStrategyType ||
                    
                    BidStrategyType.Equals(other.BidStrategyType)
                ) && 
                (
                    TargetingTemplateIds == other.TargetingTemplateIds ||
                    TargetingTemplateIds != null &&
                    other.TargetingTemplateIds != null &&
                    TargetingTemplateIds.SequenceEqual(other.TargetingTemplateIds)
                ) && 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    AdAccountId == other.AdAccountId ||
                    AdAccountId != null &&
                    AdAccountId.Equals(other.AdAccountId)
                ) && 
                (
                    CreatedTime == other.CreatedTime ||
                    
                    CreatedTime.Equals(other.CreatedTime)
                ) && 
                (
                    UpdatedTime == other.UpdatedTime ||
                    
                    UpdatedTime.Equals(other.UpdatedTime)
                ) && 
                (
                    Type == other.Type ||
                    Type != null &&
                    Type.Equals(other.Type)
                ) && 
                (
                    ConversionLearningModeType == other.ConversionLearningModeType ||
                    
                    ConversionLearningModeType.Equals(other.ConversionLearningModeType)
                ) && 
                (
                    SummaryStatus == other.SummaryStatus ||
                    
                    SummaryStatus.Equals(other.SummaryStatus)
                ) && 
                (
                    FeedProfileId == other.FeedProfileId ||
                    FeedProfileId != null &&
                    FeedProfileId.Equals(other.FeedProfileId)
                ) && 
                (
                    DcaAssets == other.DcaAssets ||
                    DcaAssets != null &&
                    DcaAssets.Equals(other.DcaAssets)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    if (BudgetInMicroCurrency != null)
                    hashCode = hashCode * 59 + BudgetInMicroCurrency.GetHashCode();
                    if (BidInMicroCurrency != null)
                    hashCode = hashCode * 59 + BidInMicroCurrency.GetHashCode();
                    if (OptimizationGoalMetadata != null)
                    hashCode = hashCode * 59 + OptimizationGoalMetadata.GetHashCode();
                    
                    hashCode = hashCode * 59 + BudgetType.GetHashCode();
                    if (StartTime != null)
                    hashCode = hashCode * 59 + StartTime.GetHashCode();
                    if (EndTime != null)
                    hashCode = hashCode * 59 + EndTime.GetHashCode();
                    if (TargetingSpec != null)
                    hashCode = hashCode * 59 + TargetingSpec.GetHashCode();
                    
                    hashCode = hashCode * 59 + LifetimeFrequencyCap.GetHashCode();
                    if (TrackingUrls != null)
                    hashCode = hashCode * 59 + TrackingUrls.GetHashCode();
                    if (AutoTargetingEnabled != null)
                    hashCode = hashCode * 59 + AutoTargetingEnabled.GetHashCode();
                    
                    hashCode = hashCode * 59 + PlacementGroup.GetHashCode();
                    
                    hashCode = hashCode * 59 + PacingDeliveryType.GetHashCode();
                    if (CampaignId != null)
                    hashCode = hashCode * 59 + CampaignId.GetHashCode();
                    
                    hashCode = hashCode * 59 + BillableEvent.GetHashCode();
                    
                    hashCode = hashCode * 59 + BidStrategyType.GetHashCode();
                    if (TargetingTemplateIds != null)
                    hashCode = hashCode * 59 + TargetingTemplateIds.GetHashCode();
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (AdAccountId != null)
                    hashCode = hashCode * 59 + AdAccountId.GetHashCode();
                    
                    hashCode = hashCode * 59 + CreatedTime.GetHashCode();
                    
                    hashCode = hashCode * 59 + UpdatedTime.GetHashCode();
                    if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    
                    hashCode = hashCode * 59 + ConversionLearningModeType.GetHashCode();
                    
                    hashCode = hashCode * 59 + SummaryStatus.GetHashCode();
                    if (FeedProfileId != null)
                    hashCode = hashCode * 59 + FeedProfileId.GetHashCode();
                    if (DcaAssets != null)
                    hashCode = hashCode * 59 + DcaAssets.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(AdGroupResponse left, AdGroupResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AdGroupResponse left, AdGroupResponse right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
