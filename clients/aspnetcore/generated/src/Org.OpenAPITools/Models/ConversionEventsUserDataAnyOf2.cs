/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ConversionEventsUserDataAnyOf2 : IEquatable<ConversionEventsUserDataAnyOf2>
    {
        /// <summary>
        /// Sha256 hashes of lowercase version of user&#39;s email addresses. Used for matching. We highly recommend this on checkout events at least. It may improve reporting performance such as ROAS/CPA. The string should be in the UTF-8 format.
        /// </summary>
        /// <value>Sha256 hashes of lowercase version of user&#39;s email addresses. Used for matching. We highly recommend this on checkout events at least. It may improve reporting performance such as ROAS/CPA. The string should be in the UTF-8 format.</value>
        /* <example>[&quot;411e44ce1261728ffd2c0686e44e3fffe413c0e2c5adc498bc7da883d476b9c8&quot;,&quot;09831ea51bd1b7b32a836683a00a9ccaf3d05f59499f42d9883412ed79289969&quot;]</example> */
        [DataMember(Name="em", EmitDefaultValue=false)]
        public List<string> Em { get; set; }

        /// <summary>
        /// Sha256 hashes of user&#39;s \&quot;Google Advertising IDs\&quot; (GAIDs) or \&quot;Apple&#39;s Identifier for Advertisers\&quot; (IDFAs). Used for matching. We highly recommend this on checkout events at least. It may improve reporting performance such as ROAS/CPA. The string should be in the UTF-8 format.
        /// </summary>
        /// <value>Sha256 hashes of user&#39;s \&quot;Google Advertising IDs\&quot; (GAIDs) or \&quot;Apple&#39;s Identifier for Advertisers\&quot; (IDFAs). Used for matching. We highly recommend this on checkout events at least. It may improve reporting performance such as ROAS/CPA. The string should be in the UTF-8 format.</value>
        /* <example>[&quot;0192518eb84137ccfe82c8b6322d29631dae7e28ed9d0f6dd5f245d73a58c5f1&quot;,&quot;837b850ac46d62b2272a71de73c27801ff011ac1e36c5432620c8755cf90db46&quot;]</example> */
        [DataMember(Name="hashed_maids", EmitDefaultValue=false)]
        public List<string> HashedMaids { get; set; }

        /// <summary>
        /// The user&#39;s IP address, which can be either in IPv4 or IPv6 format. Used for matching. We highly recommend this for all events. It may improve reporting performance such as ROAS/CPA.
        /// </summary>
        /// <value>The user&#39;s IP address, which can be either in IPv4 or IPv6 format. Used for matching. We highly recommend this for all events. It may improve reporting performance such as ROAS/CPA.</value>
        /* <example>216.3.128.12</example> */
        [Required]
        [DataMember(Name="client_ip_address", EmitDefaultValue=false)]
        public string ClientIpAddress { get; set; }

        /// <summary>
        /// The user agent string of the user&#39;s web browser. We highly recommend this for all events. It may improve reporting performance such as ROAS/CPA.
        /// </summary>
        /// <value>The user agent string of the user&#39;s web browser. We highly recommend this for all events. It may improve reporting performance such as ROAS/CPA.</value>
        /* <example>Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.87 Safari/537.36</example> */
        [Required]
        [DataMember(Name="client_user_agent", EmitDefaultValue=false)]
        public string ClientUserAgent { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ConversionEventsUserDataAnyOf2 {\n");
            sb.Append("  Em: ").Append(Em).Append("\n");
            sb.Append("  HashedMaids: ").Append(HashedMaids).Append("\n");
            sb.Append("  ClientIpAddress: ").Append(ClientIpAddress).Append("\n");
            sb.Append("  ClientUserAgent: ").Append(ClientUserAgent).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ConversionEventsUserDataAnyOf2)obj);
        }

        /// <summary>
        /// Returns true if ConversionEventsUserDataAnyOf2 instances are equal
        /// </summary>
        /// <param name="other">Instance of ConversionEventsUserDataAnyOf2 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConversionEventsUserDataAnyOf2 other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Em == other.Em ||
                    Em != null &&
                    other.Em != null &&
                    Em.SequenceEqual(other.Em)
                ) && 
                (
                    HashedMaids == other.HashedMaids ||
                    HashedMaids != null &&
                    other.HashedMaids != null &&
                    HashedMaids.SequenceEqual(other.HashedMaids)
                ) && 
                (
                    ClientIpAddress == other.ClientIpAddress ||
                    ClientIpAddress != null &&
                    ClientIpAddress.Equals(other.ClientIpAddress)
                ) && 
                (
                    ClientUserAgent == other.ClientUserAgent ||
                    ClientUserAgent != null &&
                    ClientUserAgent.Equals(other.ClientUserAgent)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Em != null)
                    hashCode = hashCode * 59 + Em.GetHashCode();
                    if (HashedMaids != null)
                    hashCode = hashCode * 59 + HashedMaids.GetHashCode();
                    if (ClientIpAddress != null)
                    hashCode = hashCode * 59 + ClientIpAddress.GetHashCode();
                    if (ClientUserAgent != null)
                    hashCode = hashCode * 59 + ClientUserAgent.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ConversionEventsUserDataAnyOf2 left, ConversionEventsUserDataAnyOf2 right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ConversionEventsUserDataAnyOf2 left, ConversionEventsUserDataAnyOf2 right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
