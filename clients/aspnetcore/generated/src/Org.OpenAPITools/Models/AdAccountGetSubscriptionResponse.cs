/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class AdAccountGetSubscriptionResponse : IEquatable<AdAccountGetSubscriptionResponse>
    {
        /// <summary>
        /// Lead form ID.
        /// </summary>
        /// <value>Lead form ID.</value>
        /* <example>383791336903426390</example> */
        [RegularExpression("^\\d+$")]
        [DataMember(Name="lead_form_id", EmitDefaultValue=true)]
        public string LeadFormId { get; set; }

        /// <summary>
        /// Standard HTTPS webhook URL.
        /// </summary>
        /// <value>Standard HTTPS webhook URL.</value>
        /* <example>https://webhook.example.com/xyz</example> */
        [DataMember(Name="webhook_url", EmitDefaultValue=false)]
        public string WebhookUrl { get; set; }

        /// <summary>
        /// Subscription ID.
        /// </summary>
        /// <value>Subscription ID.</value>
        /* <example>8078432025948590686</example> */
        [RegularExpression("^\\d+$")]
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// User account used to subscribe lead data.
        /// </summary>
        /// <value>User account used to subscribe lead data.</value>
        /* <example>549755885175</example> */
        [RegularExpression("^\\d+$")]
        [DataMember(Name="user_account_id", EmitDefaultValue=false)]
        public string UserAccountId { get; set; }

        /// <summary>
        /// The Ad Account ID that this lead form belongs to.
        /// </summary>
        /// <value>The Ad Account ID that this lead form belongs to.</value>
        /* <example>549755885176</example> */
        [RegularExpression("^\\d+$")]
        [DataMember(Name="ad_account_id", EmitDefaultValue=false)]
        public string AdAccountId { get; set; }

        /// <summary>
        /// API version.
        /// </summary>
        /// <value>API version.</value>
        /* <example>v5</example> */
        [DataMember(Name="api_version", EmitDefaultValue=false)]
        public string ApiVersion { get; set; }

        /// <summary>
        /// Base64 encoded key for client to decrypt lead data.
        /// </summary>
        /// <value>Base64 encoded key for client to decrypt lead data.</value>
        /* <example>ucvxbV2Tdss0vNeYsdh4Qfa/1Khm2b0PqXvXeTTZh54</example> */
        [DataMember(Name="cryptographic_key", EmitDefaultValue=true)]
        public string CryptographicKey { get; set; }

        /// <summary>
        /// Lead data encryption algorithm.
        /// </summary>
        /// <value>Lead data encryption algorithm.</value>
        /* <example>AES-256-GCM</example> */
        [DataMember(Name="cryptographic_algorithm", EmitDefaultValue=true)]
        public string CryptographicAlgorithm { get; set; }

        /// <summary>
        /// Lead form creation time. Unix timestamp in milliseconds.
        /// </summary>
        /// <value>Lead form creation time. Unix timestamp in milliseconds.</value>
        /* <example>1699209842000</example> */
        [DataMember(Name="created_time", EmitDefaultValue=true)]
        public int CreatedTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AdAccountGetSubscriptionResponse {\n");
            sb.Append("  LeadFormId: ").Append(LeadFormId).Append("\n");
            sb.Append("  WebhookUrl: ").Append(WebhookUrl).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  UserAccountId: ").Append(UserAccountId).Append("\n");
            sb.Append("  AdAccountId: ").Append(AdAccountId).Append("\n");
            sb.Append("  ApiVersion: ").Append(ApiVersion).Append("\n");
            sb.Append("  CryptographicKey: ").Append(CryptographicKey).Append("\n");
            sb.Append("  CryptographicAlgorithm: ").Append(CryptographicAlgorithm).Append("\n");
            sb.Append("  CreatedTime: ").Append(CreatedTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((AdAccountGetSubscriptionResponse)obj);
        }

        /// <summary>
        /// Returns true if AdAccountGetSubscriptionResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of AdAccountGetSubscriptionResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AdAccountGetSubscriptionResponse other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    LeadFormId == other.LeadFormId ||
                    LeadFormId != null &&
                    LeadFormId.Equals(other.LeadFormId)
                ) && 
                (
                    WebhookUrl == other.WebhookUrl ||
                    WebhookUrl != null &&
                    WebhookUrl.Equals(other.WebhookUrl)
                ) && 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    UserAccountId == other.UserAccountId ||
                    UserAccountId != null &&
                    UserAccountId.Equals(other.UserAccountId)
                ) && 
                (
                    AdAccountId == other.AdAccountId ||
                    AdAccountId != null &&
                    AdAccountId.Equals(other.AdAccountId)
                ) && 
                (
                    ApiVersion == other.ApiVersion ||
                    ApiVersion != null &&
                    ApiVersion.Equals(other.ApiVersion)
                ) && 
                (
                    CryptographicKey == other.CryptographicKey ||
                    CryptographicKey != null &&
                    CryptographicKey.Equals(other.CryptographicKey)
                ) && 
                (
                    CryptographicAlgorithm == other.CryptographicAlgorithm ||
                    CryptographicAlgorithm != null &&
                    CryptographicAlgorithm.Equals(other.CryptographicAlgorithm)
                ) && 
                (
                    CreatedTime == other.CreatedTime ||
                    
                    CreatedTime.Equals(other.CreatedTime)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (LeadFormId != null)
                    hashCode = hashCode * 59 + LeadFormId.GetHashCode();
                    if (WebhookUrl != null)
                    hashCode = hashCode * 59 + WebhookUrl.GetHashCode();
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (UserAccountId != null)
                    hashCode = hashCode * 59 + UserAccountId.GetHashCode();
                    if (AdAccountId != null)
                    hashCode = hashCode * 59 + AdAccountId.GetHashCode();
                    if (ApiVersion != null)
                    hashCode = hashCode * 59 + ApiVersion.GetHashCode();
                    if (CryptographicKey != null)
                    hashCode = hashCode * 59 + CryptographicKey.GetHashCode();
                    if (CryptographicAlgorithm != null)
                    hashCode = hashCode * 59 + CryptographicAlgorithm.GetHashCode();
                    
                    hashCode = hashCode * 59 + CreatedTime.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(AdAccountGetSubscriptionResponse left, AdAccountGetSubscriptionResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AdAccountGetSubscriptionResponse left, AdAccountGetSubscriptionResponse right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
