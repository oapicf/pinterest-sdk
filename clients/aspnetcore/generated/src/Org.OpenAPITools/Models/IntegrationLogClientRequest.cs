/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// HTTP request details included in the log sent by the client.
    /// </summary>
    [DataContract]
    public partial class IntegrationLogClientRequest : IEquatable<IntegrationLogClientRequest>
    {

        /// <summary>
        /// Gets or Sets Method
        /// </summary>
        [TypeConverter(typeof(CustomEnumConverter<MethodEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum MethodEnum
        {
            
            /// <summary>
            /// Enum GETEnum for GET
            /// </summary>
            [EnumMember(Value = "GET")]
            GETEnum = 1,
            
            /// <summary>
            /// Enum HEADEnum for HEAD
            /// </summary>
            [EnumMember(Value = "HEAD")]
            HEADEnum = 2,
            
            /// <summary>
            /// Enum POSTEnum for POST
            /// </summary>
            [EnumMember(Value = "POST")]
            POSTEnum = 3,
            
            /// <summary>
            /// Enum PUTEnum for PUT
            /// </summary>
            [EnumMember(Value = "PUT")]
            PUTEnum = 4,
            
            /// <summary>
            /// Enum DELETEEnum for DELETE
            /// </summary>
            [EnumMember(Value = "DELETE")]
            DELETEEnum = 5,
            
            /// <summary>
            /// Enum CONNECTEnum for CONNECT
            /// </summary>
            [EnumMember(Value = "CONNECT")]
            CONNECTEnum = 6,
            
            /// <summary>
            /// Enum OPTIONSEnum for OPTIONS
            /// </summary>
            [EnumMember(Value = "OPTIONS")]
            OPTIONSEnum = 7,
            
            /// <summary>
            /// Enum TRACEEnum for TRACE
            /// </summary>
            [EnumMember(Value = "TRACE")]
            TRACEEnum = 8,
            
            /// <summary>
            /// Enum PATCHEnum for PATCH
            /// </summary>
            [EnumMember(Value = "PATCH")]
            PATCHEnum = 9
        }

        /// <summary>
        /// Gets or Sets Method
        /// </summary>
        [Required]
        [DataMember(Name="method", EmitDefaultValue=true)]
        public MethodEnum Method { get; set; }

        /// <summary>
        /// HTTP request host from host header.
        /// </summary>
        /// <value>HTTP request host from host header.</value>
        [Required]
        [DataMember(Name="host", EmitDefaultValue=false)]
        public string Host { get; set; }

        /// <summary>
        /// HTTP request path.
        /// </summary>
        /// <value>HTTP request path.</value>
        [Required]
        [DataMember(Name="path", EmitDefaultValue=false)]
        public string Path { get; set; }

        /// <summary>
        /// HTTP request headers as key-value pairs.
        /// </summary>
        /// <value>HTTP request headers as key-value pairs.</value>
        [DataMember(Name="request_headers", EmitDefaultValue=false)]
        public Dictionary<string, string> RequestHeaders { get; set; }

        /// <summary>
        /// HTTP response headers as key-value pairs.
        /// </summary>
        /// <value>HTTP response headers as key-value pairs.</value>
        [DataMember(Name="response_headers", EmitDefaultValue=false)]
        public Dictionary<string, string> ResponseHeaders { get; set; }

        /// <summary>
        /// Gets or Sets ResponseStatusCode
        /// </summary>
        [DataMember(Name="response_status_code", EmitDefaultValue=true)]
        public int ResponseStatusCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IntegrationLogClientRequest {\n");
            sb.Append("  Method: ").Append(Method).Append("\n");
            sb.Append("  Host: ").Append(Host).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  RequestHeaders: ").Append(RequestHeaders).Append("\n");
            sb.Append("  ResponseHeaders: ").Append(ResponseHeaders).Append("\n");
            sb.Append("  ResponseStatusCode: ").Append(ResponseStatusCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((IntegrationLogClientRequest)obj);
        }

        /// <summary>
        /// Returns true if IntegrationLogClientRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of IntegrationLogClientRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IntegrationLogClientRequest other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Method == other.Method ||
                    
                    Method.Equals(other.Method)
                ) && 
                (
                    Host == other.Host ||
                    Host != null &&
                    Host.Equals(other.Host)
                ) && 
                (
                    Path == other.Path ||
                    Path != null &&
                    Path.Equals(other.Path)
                ) && 
                (
                    RequestHeaders == other.RequestHeaders ||
                    RequestHeaders != null &&
                    other.RequestHeaders != null &&
                    RequestHeaders.SequenceEqual(other.RequestHeaders)
                ) && 
                (
                    ResponseHeaders == other.ResponseHeaders ||
                    ResponseHeaders != null &&
                    other.ResponseHeaders != null &&
                    ResponseHeaders.SequenceEqual(other.ResponseHeaders)
                ) && 
                (
                    ResponseStatusCode == other.ResponseStatusCode ||
                    
                    ResponseStatusCode.Equals(other.ResponseStatusCode)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + Method.GetHashCode();
                    if (Host != null)
                    hashCode = hashCode * 59 + Host.GetHashCode();
                    if (Path != null)
                    hashCode = hashCode * 59 + Path.GetHashCode();
                    if (RequestHeaders != null)
                    hashCode = hashCode * 59 + RequestHeaders.GetHashCode();
                    if (ResponseHeaders != null)
                    hashCode = hashCode * 59 + ResponseHeaders.GetHashCode();
                    
                    hashCode = hashCode * 59 + ResponseStatusCode.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(IntegrationLogClientRequest left, IntegrationLogClientRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(IntegrationLogClientRequest left, IntegrationLogClientRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
