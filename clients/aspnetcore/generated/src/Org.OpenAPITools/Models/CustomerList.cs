/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class CustomerList : IEquatable<CustomerList>
    {
        /// <summary>
        /// Associated ad account ID.
        /// </summary>
        /// <value>Associated ad account ID.</value>
        /* <example>549756359984</example> */
        [DataMember(Name="ad_account_id", EmitDefaultValue=false)]
        public string AdAccountId { get; set; }

        /// <summary>
        /// Creation time. Unix timestamp in seconds.
        /// </summary>
        /// <value>Creation time. Unix timestamp in seconds.</value>
        /* <example>1452208622</example> */
        [DataMember(Name="created_time", EmitDefaultValue=true)]
        public decimal CreatedTime { get; set; }

        /// <summary>
        /// Customer list ID.
        /// </summary>
        /// <value>Customer list ID.</value>
        /* <example>643</example> */
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Customer list name.
        /// </summary>
        /// <value>Customer list name.</value>
        /* <example>The Glengarry Glen Ross leads</example> */
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Total number of list updates.  List creation counts as one batch. Each &lt;a href&#x3D;\&quot;/docs/redoc/#operation/ads_v3_customer_list_add_handler_PUT\&quot;&gt;Append&lt;/a&gt; or &lt;a href&#x3D;\&quot;/docs/redoc/#operation/ads_v3_customer_list_remove_handler_PUT\&quot;&gt;Remove API&lt;/a&gt; call counts as another. List creation via the Ads Manager UI could result in more than one batch since the UI breaks up large lists.
        /// </summary>
        /// <value>Total number of list updates.  List creation counts as one batch. Each &lt;a href&#x3D;\&quot;/docs/redoc/#operation/ads_v3_customer_list_add_handler_PUT\&quot;&gt;Append&lt;/a&gt; or &lt;a href&#x3D;\&quot;/docs/redoc/#operation/ads_v3_customer_list_remove_handler_PUT\&quot;&gt;Remove API&lt;/a&gt; call counts as another. List creation via the Ads Manager UI could result in more than one batch since the UI breaks up large lists.</value>
        /* <example>2</example> */
        [DataMember(Name="num_batches", EmitDefaultValue=true)]
        public decimal NumBatches { get; set; }

        /// <summary>
        /// Number of removed user records. In a &lt;a href&#x3D;\&quot;/docs/redoc/#operation/ads_v3_customer_list_remove_handler_PUT\&quot;&gt;Remove API&lt;/a&gt; call, this counter increases even if the user is not found in the list.
        /// </summary>
        /// <value>Number of removed user records. In a &lt;a href&#x3D;\&quot;/docs/redoc/#operation/ads_v3_customer_list_remove_handler_PUT\&quot;&gt;Remove API&lt;/a&gt; call, this counter increases even if the user is not found in the list.</value>
        /* <example>0</example> */
        [DataMember(Name="num_removed_user_records", EmitDefaultValue=true)]
        public decimal NumRemovedUserRecords { get; set; }

        /// <summary>
        /// Number of uploaded user records. In an &lt;a href&#x3D;\&quot;/docs/redoc/#operation/ads_v3_customer_list_add_handler_PUT\&quot;&gt;Append API&lt;/a&gt; call, this counter increases even if the uploaded user is already in the list.
        /// </summary>
        /// <value>Number of uploaded user records. In an &lt;a href&#x3D;\&quot;/docs/redoc/#operation/ads_v3_customer_list_add_handler_PUT\&quot;&gt;Append API&lt;/a&gt; call, this counter increases even if the uploaded user is already in the list.</value>
        /* <example>11</example> */
        [DataMember(Name="num_uploaded_user_records", EmitDefaultValue=true)]
        public decimal NumUploadedUserRecords { get; set; }


        /// <summary>
        /// Customer list status. TOO_SMALL - the list has less than 100 Pinterest users.
        /// </summary>
        /// <value>Customer list status. TOO_SMALL - the list has less than 100 Pinterest users.</value>
        [TypeConverter(typeof(CustomEnumConverter<StatusEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum PROCESSINGEnum for PROCESSING
            /// </summary>
            [EnumMember(Value = "PROCESSING")]
            PROCESSINGEnum = 1,
            
            /// <summary>
            /// Enum READYEnum for READY
            /// </summary>
            [EnumMember(Value = "READY")]
            READYEnum = 2,
            
            /// <summary>
            /// Enum TOOSMALLEnum for TOO_SMALL
            /// </summary>
            [EnumMember(Value = "TOO_SMALL")]
            TOOSMALLEnum = 3,
            
            /// <summary>
            /// Enum UPLOADINGEnum for UPLOADING
            /// </summary>
            [EnumMember(Value = "UPLOADING")]
            UPLOADINGEnum = 4
        }

        /// <summary>
        /// Customer list status. TOO_SMALL - the list has less than 100 Pinterest users.
        /// </summary>
        /// <value>Customer list status. TOO_SMALL - the list has less than 100 Pinterest users.</value>
        /* <example>PROCESSING</example> */
        [DataMember(Name="status", EmitDefaultValue=true)]
        public StatusEnum Status { get; set; }

        /// <summary>
        /// Always \&quot;customerlist\&quot;.
        /// </summary>
        /// <value>Always \&quot;customerlist\&quot;.</value>
        /* <example>customerlist</example> */
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Last update time. Unix timestamp in seconds.
        /// </summary>
        /// <value>Last update time. Unix timestamp in seconds.</value>
        /* <example>1461269616</example> */
        [DataMember(Name="updated_time", EmitDefaultValue=true)]
        public decimal UpdatedTime { get; set; }

        /// <summary>
        /// Customer list errors
        /// </summary>
        /// <value>Customer list errors</value>
        [DataMember(Name="exceptions", EmitDefaultValue=false)]
        public Object Exceptions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CustomerList {\n");
            sb.Append("  AdAccountId: ").Append(AdAccountId).Append("\n");
            sb.Append("  CreatedTime: ").Append(CreatedTime).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  NumBatches: ").Append(NumBatches).Append("\n");
            sb.Append("  NumRemovedUserRecords: ").Append(NumRemovedUserRecords).Append("\n");
            sb.Append("  NumUploadedUserRecords: ").Append(NumUploadedUserRecords).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  UpdatedTime: ").Append(UpdatedTime).Append("\n");
            sb.Append("  Exceptions: ").Append(Exceptions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CustomerList)obj);
        }

        /// <summary>
        /// Returns true if CustomerList instances are equal
        /// </summary>
        /// <param name="other">Instance of CustomerList to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomerList other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    AdAccountId == other.AdAccountId ||
                    AdAccountId != null &&
                    AdAccountId.Equals(other.AdAccountId)
                ) && 
                (
                    CreatedTime == other.CreatedTime ||
                    
                    CreatedTime.Equals(other.CreatedTime)
                ) && 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    NumBatches == other.NumBatches ||
                    
                    NumBatches.Equals(other.NumBatches)
                ) && 
                (
                    NumRemovedUserRecords == other.NumRemovedUserRecords ||
                    
                    NumRemovedUserRecords.Equals(other.NumRemovedUserRecords)
                ) && 
                (
                    NumUploadedUserRecords == other.NumUploadedUserRecords ||
                    
                    NumUploadedUserRecords.Equals(other.NumUploadedUserRecords)
                ) && 
                (
                    Status == other.Status ||
                    
                    Status.Equals(other.Status)
                ) && 
                (
                    Type == other.Type ||
                    Type != null &&
                    Type.Equals(other.Type)
                ) && 
                (
                    UpdatedTime == other.UpdatedTime ||
                    
                    UpdatedTime.Equals(other.UpdatedTime)
                ) && 
                (
                    Exceptions == other.Exceptions ||
                    Exceptions != null &&
                    Exceptions.Equals(other.Exceptions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (AdAccountId != null)
                    hashCode = hashCode * 59 + AdAccountId.GetHashCode();
                    
                    hashCode = hashCode * 59 + CreatedTime.GetHashCode();
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    
                    hashCode = hashCode * 59 + NumBatches.GetHashCode();
                    
                    hashCode = hashCode * 59 + NumRemovedUserRecords.GetHashCode();
                    
                    hashCode = hashCode * 59 + NumUploadedUserRecords.GetHashCode();
                    
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    
                    hashCode = hashCode * 59 + UpdatedTime.GetHashCode();
                    if (Exceptions != null)
                    hashCode = hashCode * 59 + Exceptions.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(CustomerList left, CustomerList right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CustomerList left, CustomerList right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
