/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class LineItem : IEquatable<LineItem>
    {
        /// <summary>
        /// Product brand. For example, \&quot;Parker\&quot;.
        /// </summary>
        /// <value>Product brand. For example, \&quot;Parker\&quot;.</value>
        /* <example>Parker</example> */
        [DataMember(Name="product_brand", EmitDefaultValue=false)]
        public string ProductBrand { get; set; }

        /// <summary>
        /// Product category. For example, \&quot;Shoes\&quot;.
        /// </summary>
        /// <value>Product category. For example, \&quot;Shoes\&quot;.</value>
        /* <example>Shoes</example> */
        [DataMember(Name="product_category", EmitDefaultValue=false)]
        public string ProductCategory { get; set; }

        /// <summary>
        /// Product ID. For example, 1414.
        /// </summary>
        /// <value>Product ID. For example, 1414.</value>
        /* <example>1414</example> */
        [DataMember(Name="product_id", EmitDefaultValue=true)]
        public int ProductId { get; set; }

        /// <summary>
        /// Product name. For example, \&quot;Parker Boots\&quot;.
        /// </summary>
        /// <value>Product name. For example, \&quot;Parker Boots\&quot;.</value>
        /* <example>Parker Boots</example> */
        [DataMember(Name="product_name", EmitDefaultValue=false)]
        public string ProductName { get; set; }

        /// <summary>
        /// Product price. For example, \&quot;99.99\&quot;.
        /// </summary>
        /// <value>Product price. For example, \&quot;99.99\&quot;.</value>
        /* <example>99.99</example> */
        [DataMember(Name="product_price", EmitDefaultValue=false)]
        public string ProductPrice { get; set; }

        /// <summary>
        /// Product quantity. For example, 2.
        /// </summary>
        /// <value>Product quantity. For example, 2.</value>
        /* <example>2</example> */
        [DataMember(Name="product_quantity", EmitDefaultValue=true)]
        public int ProductQuantity { get; set; }

        /// <summary>
        /// Product variant. For example, \&quot;Red\&quot;.
        /// </summary>
        /// <value>Product variant. For example, \&quot;Red\&quot;.</value>
        /* <example>Red</example> */
        [DataMember(Name="product_variant", EmitDefaultValue=false)]
        public string ProductVariant { get; set; }

        /// <summary>
        /// Product variant ID. For example, \&quot;1414-34832\&quot;.
        /// </summary>
        /// <value>Product variant ID. For example, \&quot;1414-34832\&quot;.</value>
        /* <example>1414-34832</example> */
        [DataMember(Name="product_variant_id", EmitDefaultValue=false)]
        public string ProductVariantId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LineItem {\n");
            sb.Append("  ProductBrand: ").Append(ProductBrand).Append("\n");
            sb.Append("  ProductCategory: ").Append(ProductCategory).Append("\n");
            sb.Append("  ProductId: ").Append(ProductId).Append("\n");
            sb.Append("  ProductName: ").Append(ProductName).Append("\n");
            sb.Append("  ProductPrice: ").Append(ProductPrice).Append("\n");
            sb.Append("  ProductQuantity: ").Append(ProductQuantity).Append("\n");
            sb.Append("  ProductVariant: ").Append(ProductVariant).Append("\n");
            sb.Append("  ProductVariantId: ").Append(ProductVariantId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((LineItem)obj);
        }

        /// <summary>
        /// Returns true if LineItem instances are equal
        /// </summary>
        /// <param name="other">Instance of LineItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LineItem other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ProductBrand == other.ProductBrand ||
                    ProductBrand != null &&
                    ProductBrand.Equals(other.ProductBrand)
                ) && 
                (
                    ProductCategory == other.ProductCategory ||
                    ProductCategory != null &&
                    ProductCategory.Equals(other.ProductCategory)
                ) && 
                (
                    ProductId == other.ProductId ||
                    
                    ProductId.Equals(other.ProductId)
                ) && 
                (
                    ProductName == other.ProductName ||
                    ProductName != null &&
                    ProductName.Equals(other.ProductName)
                ) && 
                (
                    ProductPrice == other.ProductPrice ||
                    ProductPrice != null &&
                    ProductPrice.Equals(other.ProductPrice)
                ) && 
                (
                    ProductQuantity == other.ProductQuantity ||
                    
                    ProductQuantity.Equals(other.ProductQuantity)
                ) && 
                (
                    ProductVariant == other.ProductVariant ||
                    ProductVariant != null &&
                    ProductVariant.Equals(other.ProductVariant)
                ) && 
                (
                    ProductVariantId == other.ProductVariantId ||
                    ProductVariantId != null &&
                    ProductVariantId.Equals(other.ProductVariantId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ProductBrand != null)
                    hashCode = hashCode * 59 + ProductBrand.GetHashCode();
                    if (ProductCategory != null)
                    hashCode = hashCode * 59 + ProductCategory.GetHashCode();
                    
                    hashCode = hashCode * 59 + ProductId.GetHashCode();
                    if (ProductName != null)
                    hashCode = hashCode * 59 + ProductName.GetHashCode();
                    if (ProductPrice != null)
                    hashCode = hashCode * 59 + ProductPrice.GetHashCode();
                    
                    hashCode = hashCode * 59 + ProductQuantity.GetHashCode();
                    if (ProductVariant != null)
                    hashCode = hashCode * 59 + ProductVariant.GetHashCode();
                    if (ProductVariantId != null)
                    hashCode = hashCode * 59 + ProductVariantId.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(LineItem left, LineItem right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(LineItem left, LineItem right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
