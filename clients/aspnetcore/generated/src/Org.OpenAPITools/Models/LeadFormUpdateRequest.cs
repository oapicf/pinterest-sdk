/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class LeadFormUpdateRequest : IEquatable<LeadFormUpdateRequest>
    {
        /// <summary>
        /// Internal name of the lead form.
        /// </summary>
        /// <value>Internal name of the lead form.</value>
        /* <example>Lead Form 3/14/2023</example> */
        [DataMember(Name="name", EmitDefaultValue=true)]
        public string Name { get; set; }

        /// <summary>
        /// A link to the advertiser&#39;s privacy policy. This will be included in the lead form&#39;s disclosure language.
        /// </summary>
        /// <value>A link to the advertiser&#39;s privacy policy. This will be included in the lead form&#39;s disclosure language.</value>
        /* <example>https://www.advertisername.com/privacy-policy</example> */
        [DataMember(Name="privacy_policy_link", EmitDefaultValue=true)]
        public string PrivacyPolicyLink { get; set; }

        /// <summary>
        /// Whether the advertiser has accepted Pinterest&#39;s terms of service for creating a lead ad.  By sending us TRUE for this parameter, you agree that (i) you will use any personal information received in compliance with the privacy policy you share with Pinterest, and (ii) you will comply with Pinterest&#39;s &lt;a href&#x3D;\&quot;https://policy.pinterest.com/en/lead-ad-terms\&quot;&gt;Lead Ad Terms&lt;/a&gt;. As a reminder, all advertising on Pinterest is subject to the &lt;a href&#x3D;\&quot;https://business.pinterest.com/en/pinterest-advertising-services-agreement/\&quot;&gt;Pinterest Advertising Services Agreement&lt;/a&gt; or an equivalent agreement as set forth on an IO
        /// </summary>
        /// <value>Whether the advertiser has accepted Pinterest&#39;s terms of service for creating a lead ad.  By sending us TRUE for this parameter, you agree that (i) you will use any personal information received in compliance with the privacy policy you share with Pinterest, and (ii) you will comply with Pinterest&#39;s &lt;a href&#x3D;\&quot;https://policy.pinterest.com/en/lead-ad-terms\&quot;&gt;Lead Ad Terms&lt;/a&gt;. As a reminder, all advertising on Pinterest is subject to the &lt;a href&#x3D;\&quot;https://business.pinterest.com/en/pinterest-advertising-services-agreement/\&quot;&gt;Pinterest Advertising Services Agreement&lt;/a&gt; or an equivalent agreement as set forth on an IO</value>
        /* <example>false</example> */
        [DataMember(Name="has_accepted_terms", EmitDefaultValue=true)]
        public bool HasAcceptedTerms { get; set; }

        /// <summary>
        /// A message for people who complete the form to let them know what happens next.
        /// </summary>
        /// <value>A message for people who complete the form to let them know what happens next.</value>
        /* <example>Thank you for submitting. We will contact you soon.</example> */
        [DataMember(Name="completion_message", EmitDefaultValue=true)]
        public string CompletionMessage { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=true)]
        public LeadFormStatus Status { get; set; }

        /// <summary>
        /// Additional disclosure language to be included in the lead form.
        /// </summary>
        /// <value>Additional disclosure language to be included in the lead form.</value>
        /* <example>By entering your personal information, you agree that your data will be collected and used.</example> */
        [DataMember(Name="disclosure_language", EmitDefaultValue=true)]
        public string DisclosureLanguage { get; set; }

        /// <summary>
        /// List of questions to be displayed on the lead form.
        /// </summary>
        /// <value>List of questions to be displayed on the lead form.</value>
        /* <example>[{question_type&#x3D;CUSTOM, custom_question_field_type&#x3D;CHECKBOX, custom_question_label&#x3D;What is your favorite animal?, custom_question_options&#x3D;[Dog, Cat, Bird, Turtle]}]</example> */
        [DataMember(Name="questions", EmitDefaultValue=false)]
        public List<LeadFormQuestion> Questions { get; set; }

        /// <summary>
        /// List of additional policy links to be displayed on the lead form.
        /// </summary>
        /// <value>List of additional policy links to be displayed on the lead form.</value>
        /* <example>[{label&#x3D;Copyright, link&#x3D;https://policy.pinterest.com/en/copyright}]</example> */
        [DataMember(Name="policy_links", EmitDefaultValue=false)]
        public List<LeadFormCommonPolicyLinksInner> PolicyLinks { get; set; }

        /// <summary>
        /// The ID of this lead form to be updated
        /// </summary>
        /// <value>The ID of this lead form to be updated</value>
        /* <example>7765300871171</example> */
        [Required]
        [RegularExpression("^\\d+$")]
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LeadFormUpdateRequest {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  PrivacyPolicyLink: ").Append(PrivacyPolicyLink).Append("\n");
            sb.Append("  HasAcceptedTerms: ").Append(HasAcceptedTerms).Append("\n");
            sb.Append("  CompletionMessage: ").Append(CompletionMessage).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  DisclosureLanguage: ").Append(DisclosureLanguage).Append("\n");
            sb.Append("  Questions: ").Append(Questions).Append("\n");
            sb.Append("  PolicyLinks: ").Append(PolicyLinks).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((LeadFormUpdateRequest)obj);
        }

        /// <summary>
        /// Returns true if LeadFormUpdateRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of LeadFormUpdateRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LeadFormUpdateRequest other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    PrivacyPolicyLink == other.PrivacyPolicyLink ||
                    PrivacyPolicyLink != null &&
                    PrivacyPolicyLink.Equals(other.PrivacyPolicyLink)
                ) && 
                (
                    HasAcceptedTerms == other.HasAcceptedTerms ||
                    
                    HasAcceptedTerms.Equals(other.HasAcceptedTerms)
                ) && 
                (
                    CompletionMessage == other.CompletionMessage ||
                    CompletionMessage != null &&
                    CompletionMessage.Equals(other.CompletionMessage)
                ) && 
                (
                    Status == other.Status ||
                    
                    Status.Equals(other.Status)
                ) && 
                (
                    DisclosureLanguage == other.DisclosureLanguage ||
                    DisclosureLanguage != null &&
                    DisclosureLanguage.Equals(other.DisclosureLanguage)
                ) && 
                (
                    Questions == other.Questions ||
                    Questions != null &&
                    other.Questions != null &&
                    Questions.SequenceEqual(other.Questions)
                ) && 
                (
                    PolicyLinks == other.PolicyLinks ||
                    PolicyLinks != null &&
                    other.PolicyLinks != null &&
                    PolicyLinks.SequenceEqual(other.PolicyLinks)
                ) && 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (PrivacyPolicyLink != null)
                    hashCode = hashCode * 59 + PrivacyPolicyLink.GetHashCode();
                    
                    hashCode = hashCode * 59 + HasAcceptedTerms.GetHashCode();
                    if (CompletionMessage != null)
                    hashCode = hashCode * 59 + CompletionMessage.GetHashCode();
                    
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    if (DisclosureLanguage != null)
                    hashCode = hashCode * 59 + DisclosureLanguage.GetHashCode();
                    if (Questions != null)
                    hashCode = hashCode * 59 + Questions.GetHashCode();
                    if (PolicyLinks != null)
                    hashCode = hashCode * 59 + PolicyLinks.GetHashCode();
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(LeadFormUpdateRequest left, LeadFormUpdateRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(LeadFormUpdateRequest left, LeadFormUpdateRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
