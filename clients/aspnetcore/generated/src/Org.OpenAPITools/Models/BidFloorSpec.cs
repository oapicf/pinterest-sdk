/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class BidFloorSpec : IEquatable<BidFloorSpec>
    {
        /// <summary>
        /// Gets or Sets Countries
        /// </summary>
        [DataMember(Name="countries", EmitDefaultValue=false)]
        public List<Country> Countries { get; set; }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [Required]
        [DataMember(Name="currency", EmitDefaultValue=true)]
        public Currency Currency { get; set; }

        /// <summary>
        /// Gets or Sets ObjectiveType
        /// </summary>
        [DataMember(Name="objective_type", EmitDefaultValue=true)]
        public ObjectiveType ObjectiveType { get; set; }

        /// <summary>
        /// Gets or Sets BillableEvent
        /// </summary>
        [Required]
        [DataMember(Name="billable_event", EmitDefaultValue=true)]
        public ActionType BillableEvent { get; set; }

        /// <summary>
        /// Gets or Sets OptimizationGoalMetadata
        /// </summary>
        [DataMember(Name="optimization_goal_metadata", EmitDefaultValue=false)]
        public OptimizationGoalMetadata OptimizationGoalMetadata { get; set; }

        /// <summary>
        /// Gets or Sets CreativeType
        /// </summary>
        [DataMember(Name="creative_type", EmitDefaultValue=true)]
        public CreativeType CreativeType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BidFloorSpec {\n");
            sb.Append("  Countries: ").Append(Countries).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  ObjectiveType: ").Append(ObjectiveType).Append("\n");
            sb.Append("  BillableEvent: ").Append(BillableEvent).Append("\n");
            sb.Append("  OptimizationGoalMetadata: ").Append(OptimizationGoalMetadata).Append("\n");
            sb.Append("  CreativeType: ").Append(CreativeType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((BidFloorSpec)obj);
        }

        /// <summary>
        /// Returns true if BidFloorSpec instances are equal
        /// </summary>
        /// <param name="other">Instance of BidFloorSpec to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BidFloorSpec other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Countries == other.Countries ||
                    Countries != null &&
                    other.Countries != null &&
                    Countries.SequenceEqual(other.Countries)
                ) && 
                (
                    Currency == other.Currency ||
                    
                    Currency.Equals(other.Currency)
                ) && 
                (
                    ObjectiveType == other.ObjectiveType ||
                    
                    ObjectiveType.Equals(other.ObjectiveType)
                ) && 
                (
                    BillableEvent == other.BillableEvent ||
                    
                    BillableEvent.Equals(other.BillableEvent)
                ) && 
                (
                    OptimizationGoalMetadata == other.OptimizationGoalMetadata ||
                    OptimizationGoalMetadata != null &&
                    OptimizationGoalMetadata.Equals(other.OptimizationGoalMetadata)
                ) && 
                (
                    CreativeType == other.CreativeType ||
                    
                    CreativeType.Equals(other.CreativeType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Countries != null)
                    hashCode = hashCode * 59 + Countries.GetHashCode();
                    
                    hashCode = hashCode * 59 + Currency.GetHashCode();
                    
                    hashCode = hashCode * 59 + ObjectiveType.GetHashCode();
                    
                    hashCode = hashCode * 59 + BillableEvent.GetHashCode();
                    if (OptimizationGoalMetadata != null)
                    hashCode = hashCode * 59 + OptimizationGoalMetadata.GetHashCode();
                    
                    hashCode = hashCode * 59 + CreativeType.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(BidFloorSpec left, BidFloorSpec right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(BidFloorSpec left, BidFloorSpec right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
