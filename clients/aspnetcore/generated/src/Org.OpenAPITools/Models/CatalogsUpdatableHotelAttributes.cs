/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class CatalogsUpdatableHotelAttributes : IEquatable<CatalogsUpdatableHotelAttributes>
    {
        /// <summary>
        /// The hotel&#39;s name.
        /// </summary>
        /// <value>The hotel&#39;s name.</value>
        [DataMember(Name="name", EmitDefaultValue=true)]
        public string Name { get; set; }

        /// <summary>
        /// Link to the product page
        /// </summary>
        /// <value>Link to the product page</value>
        [DataMember(Name="link", EmitDefaultValue=true)]
        public string Link { get; set; }

        /// <summary>
        /// Brief description of the hotel.
        /// </summary>
        /// <value>Brief description of the hotel.</value>
        [DataMember(Name="description", EmitDefaultValue=true)]
        public string Description { get; set; }

        /// <summary>
        /// The brand to which this hotel belongs to.
        /// </summary>
        /// <value>The brand to which this hotel belongs to.</value>
        [DataMember(Name="brand", EmitDefaultValue=true)]
        public string Brand { get; set; }

        /// <summary>
        /// Latitude of the hotel.
        /// </summary>
        /// <value>Latitude of the hotel.</value>
        [DataMember(Name="latitude", EmitDefaultValue=true)]
        public decimal Latitude { get; set; }

        /// <summary>
        /// Longitude of the hotel.
        /// </summary>
        /// <value>Longitude of the hotel.</value>
        [DataMember(Name="longitude", EmitDefaultValue=true)]
        public decimal? Longitude { get; set; }

        /// <summary>
        /// A list of neighborhoods where the hotel is located
        /// </summary>
        /// <value>A list of neighborhoods where the hotel is located</value>
        [DataMember(Name="neighborhood", EmitDefaultValue=true)]
        public List<string> Neighborhood { get; set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name="address", EmitDefaultValue=false)]
        public CatalogsHotelAddress Address { get; set; }

        /// <summary>
        /// Custom grouping of hotels
        /// </summary>
        /// <value>Custom grouping of hotels</value>
        [DataMember(Name="custom_label_0", EmitDefaultValue=true)]
        public string CustomLabel0 { get; set; }

        /// <summary>
        /// Custom grouping of hotels
        /// </summary>
        /// <value>Custom grouping of hotels</value>
        [DataMember(Name="custom_label_1", EmitDefaultValue=true)]
        public string CustomLabel1 { get; set; }

        /// <summary>
        /// Custom grouping of hotels
        /// </summary>
        /// <value>Custom grouping of hotels</value>
        [DataMember(Name="custom_label_2", EmitDefaultValue=true)]
        public string CustomLabel2 { get; set; }

        /// <summary>
        /// Custom grouping of hotels
        /// </summary>
        /// <value>Custom grouping of hotels</value>
        [DataMember(Name="custom_label_3", EmitDefaultValue=true)]
        public string CustomLabel3 { get; set; }

        /// <summary>
        /// Custom grouping of hotels
        /// </summary>
        /// <value>Custom grouping of hotels</value>
        [DataMember(Name="custom_label_4", EmitDefaultValue=true)]
        public string CustomLabel4 { get; set; }

        /// <summary>
        /// The type of property. The category can be any type of internal description desired.
        /// </summary>
        /// <value>The type of property. The category can be any type of internal description desired.</value>
        [DataMember(Name="category", EmitDefaultValue=true)]
        public string Category { get; set; }

        /// <summary>
        /// Base price of the hotel room per night followed by the ISO currency code
        /// </summary>
        /// <value>Base price of the hotel room per night followed by the ISO currency code</value>
        /* <example>100 USD</example> */
        [DataMember(Name="base_price", EmitDefaultValue=true)]
        public string BasePrice { get; set; }

        /// <summary>
        /// Sale price of a hotel room per night. Used to advertise discounts off the regular price of the hotel.
        /// </summary>
        /// <value>Sale price of a hotel room per night. Used to advertise discounts off the regular price of the hotel.</value>
        /* <example>90 USD</example> */
        [DataMember(Name="sale_price", EmitDefaultValue=true)]
        public string SalePrice { get; set; }

        /// <summary>
        /// Gets or Sets GuestRatings
        /// </summary>
        [DataMember(Name="guest_ratings", EmitDefaultValue=false)]
        public CatalogsHotelGuestRatings GuestRatings { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CatalogsUpdatableHotelAttributes {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Link: ").Append(Link).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Brand: ").Append(Brand).Append("\n");
            sb.Append("  Latitude: ").Append(Latitude).Append("\n");
            sb.Append("  Longitude: ").Append(Longitude).Append("\n");
            sb.Append("  Neighborhood: ").Append(Neighborhood).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  CustomLabel0: ").Append(CustomLabel0).Append("\n");
            sb.Append("  CustomLabel1: ").Append(CustomLabel1).Append("\n");
            sb.Append("  CustomLabel2: ").Append(CustomLabel2).Append("\n");
            sb.Append("  CustomLabel3: ").Append(CustomLabel3).Append("\n");
            sb.Append("  CustomLabel4: ").Append(CustomLabel4).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  BasePrice: ").Append(BasePrice).Append("\n");
            sb.Append("  SalePrice: ").Append(SalePrice).Append("\n");
            sb.Append("  GuestRatings: ").Append(GuestRatings).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CatalogsUpdatableHotelAttributes)obj);
        }

        /// <summary>
        /// Returns true if CatalogsUpdatableHotelAttributes instances are equal
        /// </summary>
        /// <param name="other">Instance of CatalogsUpdatableHotelAttributes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CatalogsUpdatableHotelAttributes other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Link == other.Link ||
                    Link != null &&
                    Link.Equals(other.Link)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    Brand == other.Brand ||
                    Brand != null &&
                    Brand.Equals(other.Brand)
                ) && 
                (
                    Latitude == other.Latitude ||
                    
                    Latitude.Equals(other.Latitude)
                ) && 
                (
                    Longitude == other.Longitude ||
                    Longitude != null &&
                    Longitude.Equals(other.Longitude)
                ) && 
                (
                    Neighborhood == other.Neighborhood ||
                    Neighborhood != null &&
                    other.Neighborhood != null &&
                    Neighborhood.SequenceEqual(other.Neighborhood)
                ) && 
                (
                    Address == other.Address ||
                    Address != null &&
                    Address.Equals(other.Address)
                ) && 
                (
                    CustomLabel0 == other.CustomLabel0 ||
                    CustomLabel0 != null &&
                    CustomLabel0.Equals(other.CustomLabel0)
                ) && 
                (
                    CustomLabel1 == other.CustomLabel1 ||
                    CustomLabel1 != null &&
                    CustomLabel1.Equals(other.CustomLabel1)
                ) && 
                (
                    CustomLabel2 == other.CustomLabel2 ||
                    CustomLabel2 != null &&
                    CustomLabel2.Equals(other.CustomLabel2)
                ) && 
                (
                    CustomLabel3 == other.CustomLabel3 ||
                    CustomLabel3 != null &&
                    CustomLabel3.Equals(other.CustomLabel3)
                ) && 
                (
                    CustomLabel4 == other.CustomLabel4 ||
                    CustomLabel4 != null &&
                    CustomLabel4.Equals(other.CustomLabel4)
                ) && 
                (
                    Category == other.Category ||
                    Category != null &&
                    Category.Equals(other.Category)
                ) && 
                (
                    BasePrice == other.BasePrice ||
                    BasePrice != null &&
                    BasePrice.Equals(other.BasePrice)
                ) && 
                (
                    SalePrice == other.SalePrice ||
                    SalePrice != null &&
                    SalePrice.Equals(other.SalePrice)
                ) && 
                (
                    GuestRatings == other.GuestRatings ||
                    GuestRatings != null &&
                    GuestRatings.Equals(other.GuestRatings)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Link != null)
                    hashCode = hashCode * 59 + Link.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (Brand != null)
                    hashCode = hashCode * 59 + Brand.GetHashCode();
                    
                    hashCode = hashCode * 59 + Latitude.GetHashCode();
                    if (Longitude != null)
                    hashCode = hashCode * 59 + Longitude.GetHashCode();
                    if (Neighborhood != null)
                    hashCode = hashCode * 59 + Neighborhood.GetHashCode();
                    if (Address != null)
                    hashCode = hashCode * 59 + Address.GetHashCode();
                    if (CustomLabel0 != null)
                    hashCode = hashCode * 59 + CustomLabel0.GetHashCode();
                    if (CustomLabel1 != null)
                    hashCode = hashCode * 59 + CustomLabel1.GetHashCode();
                    if (CustomLabel2 != null)
                    hashCode = hashCode * 59 + CustomLabel2.GetHashCode();
                    if (CustomLabel3 != null)
                    hashCode = hashCode * 59 + CustomLabel3.GetHashCode();
                    if (CustomLabel4 != null)
                    hashCode = hashCode * 59 + CustomLabel4.GetHashCode();
                    if (Category != null)
                    hashCode = hashCode * 59 + Category.GetHashCode();
                    if (BasePrice != null)
                    hashCode = hashCode * 59 + BasePrice.GetHashCode();
                    if (SalePrice != null)
                    hashCode = hashCode * 59 + SalePrice.GetHashCode();
                    if (GuestRatings != null)
                    hashCode = hashCode * 59 + GuestRatings.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(CatalogsUpdatableHotelAttributes left, CatalogsUpdatableHotelAttributes right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CatalogsUpdatableHotelAttributes left, CatalogsUpdatableHotelAttributes right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
