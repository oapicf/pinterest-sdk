/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class LeadFormQuestion : IEquatable<LeadFormQuestion>
    {
        /// <summary>
        /// Gets or Sets QuestionType
        /// </summary>
        [DataMember(Name="question_type", EmitDefaultValue=true)]
        public LeadFormQuestionType QuestionType { get; set; }

        /// <summary>
        /// Gets or Sets CustomQuestionFieldType
        /// </summary>
        [DataMember(Name="custom_question_field_type", EmitDefaultValue=true)]
        public LeadFormQuestionFieldType? CustomQuestionFieldType { get; set; }

        /// <summary>
        /// Question label for a custom question.
        /// </summary>
        /// <value>Question label for a custom question.</value>
        [DataMember(Name="custom_question_label", EmitDefaultValue=true)]
        public string CustomQuestionLabel { get; set; }

        /// <summary>
        /// Question options for a custom question.
        /// </summary>
        /// <value>Question options for a custom question.</value>
        [DataMember(Name="custom_question_options", EmitDefaultValue=true)]
        public List<string> CustomQuestionOptions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LeadFormQuestion {\n");
            sb.Append("  QuestionType: ").Append(QuestionType).Append("\n");
            sb.Append("  CustomQuestionFieldType: ").Append(CustomQuestionFieldType).Append("\n");
            sb.Append("  CustomQuestionLabel: ").Append(CustomQuestionLabel).Append("\n");
            sb.Append("  CustomQuestionOptions: ").Append(CustomQuestionOptions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((LeadFormQuestion)obj);
        }

        /// <summary>
        /// Returns true if LeadFormQuestion instances are equal
        /// </summary>
        /// <param name="other">Instance of LeadFormQuestion to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LeadFormQuestion other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    QuestionType == other.QuestionType ||
                    
                    QuestionType.Equals(other.QuestionType)
                ) && 
                (
                    CustomQuestionFieldType == other.CustomQuestionFieldType ||
                    
                    CustomQuestionFieldType.Equals(other.CustomQuestionFieldType)
                ) && 
                (
                    CustomQuestionLabel == other.CustomQuestionLabel ||
                    CustomQuestionLabel != null &&
                    CustomQuestionLabel.Equals(other.CustomQuestionLabel)
                ) && 
                (
                    CustomQuestionOptions == other.CustomQuestionOptions ||
                    CustomQuestionOptions != null &&
                    other.CustomQuestionOptions != null &&
                    CustomQuestionOptions.SequenceEqual(other.CustomQuestionOptions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + QuestionType.GetHashCode();
                    
                    hashCode = hashCode * 59 + CustomQuestionFieldType.GetHashCode();
                    if (CustomQuestionLabel != null)
                    hashCode = hashCode * 59 + CustomQuestionLabel.GetHashCode();
                    if (CustomQuestionOptions != null)
                    hashCode = hashCode * 59 + CustomQuestionOptions.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(LeadFormQuestion left, LeadFormQuestion right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(LeadFormQuestion left, LeadFormQuestion right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
