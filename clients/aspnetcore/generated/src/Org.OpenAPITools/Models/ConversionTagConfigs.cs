/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ConversionTagConfigs : IEquatable<ConversionTagConfigs>
    {
        /// <summary>
        /// Whether Automatic Enhanced Match email is enabled. See &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/enhanced-match\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Enhanced match&lt;/a&gt; for more information.
        /// </summary>
        /// <value>Whether Automatic Enhanced Match email is enabled. See &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/enhanced-match\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Enhanced match&lt;/a&gt; for more information.</value>
        /* <example>true</example> */
        [DataMember(Name="aem_enabled", EmitDefaultValue=true)]
        public bool? AemEnabled { get; set; } = false;

        /// <summary>
        /// Metadata ingestion frequency.
        /// </summary>
        /// <value>Metadata ingestion frequency.</value>
        /* <example>0.6</example> */
        [DataMember(Name="md_frequency", EmitDefaultValue=true)]
        public decimal? MdFrequency { get; set; } = 1M;

        /// <summary>
        /// Whether Automatic Enhanced Match name is enabled. See &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/enhanced-match\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Enhanced match&lt;/a&gt; for more information.
        /// </summary>
        /// <value>Whether Automatic Enhanced Match name is enabled. See &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/enhanced-match\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Enhanced match&lt;/a&gt; for more information.</value>
        /* <example>true</example> */
        [DataMember(Name="aem_fnln_enabled", EmitDefaultValue=true)]
        public bool? AemFnlnEnabled { get; set; } = false;

        /// <summary>
        /// Whether Automatic Enhanced Match phone is enabled. See &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/enhanced-match\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Enhanced match&lt;/a&gt; for more information.
        /// </summary>
        /// <value>Whether Automatic Enhanced Match phone is enabled. See &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/enhanced-match\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Enhanced match&lt;/a&gt; for more information.</value>
        /* <example>true</example> */
        [DataMember(Name="aem_ph_enabled", EmitDefaultValue=true)]
        public bool? AemPhEnabled { get; set; } = false;

        /// <summary>
        /// Whether Automatic Enhanced Match gender is enabled. See &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/enhanced-match\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Enhanced match&lt;/a&gt; for more information.
        /// </summary>
        /// <value>Whether Automatic Enhanced Match gender is enabled. See &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/enhanced-match\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Enhanced match&lt;/a&gt; for more information.</value>
        /* <example>true</example> */
        [DataMember(Name="aem_ge_enabled", EmitDefaultValue=true)]
        public bool? AemGeEnabled { get; set; } = false;

        /// <summary>
        /// Whether Automatic Enhanced Match birthdate is enabled. See &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/enhanced-match\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Enhanced match&lt;/a&gt; for more information.
        /// </summary>
        /// <value>Whether Automatic Enhanced Match birthdate is enabled. See &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/enhanced-match\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Enhanced match&lt;/a&gt; for more information.</value>
        /* <example>true</example> */
        [DataMember(Name="aem_db_enabled", EmitDefaultValue=true)]
        public bool? AemDbEnabled { get; set; } = false;

        /// <summary>
        /// Whether Automatic Enhanced Match location is enabled. See &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/enhanced-match\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Enhanced match&lt;/a&gt; for more information.
        /// </summary>
        /// <value>Whether Automatic Enhanced Match location is enabled. See &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/enhanced-match\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Enhanced match&lt;/a&gt; for more information.</value>
        /* <example>true</example> */
        [DataMember(Name="aem_loc_enabled", EmitDefaultValue=true)]
        public bool? AemLocEnabled { get; set; } = false;

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ConversionTagConfigs {\n");
            sb.Append("  AemEnabled: ").Append(AemEnabled).Append("\n");
            sb.Append("  MdFrequency: ").Append(MdFrequency).Append("\n");
            sb.Append("  AemFnlnEnabled: ").Append(AemFnlnEnabled).Append("\n");
            sb.Append("  AemPhEnabled: ").Append(AemPhEnabled).Append("\n");
            sb.Append("  AemGeEnabled: ").Append(AemGeEnabled).Append("\n");
            sb.Append("  AemDbEnabled: ").Append(AemDbEnabled).Append("\n");
            sb.Append("  AemLocEnabled: ").Append(AemLocEnabled).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ConversionTagConfigs)obj);
        }

        /// <summary>
        /// Returns true if ConversionTagConfigs instances are equal
        /// </summary>
        /// <param name="other">Instance of ConversionTagConfigs to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConversionTagConfigs other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    AemEnabled == other.AemEnabled ||
                    AemEnabled != null &&
                    AemEnabled.Equals(other.AemEnabled)
                ) && 
                (
                    MdFrequency == other.MdFrequency ||
                    MdFrequency != null &&
                    MdFrequency.Equals(other.MdFrequency)
                ) && 
                (
                    AemFnlnEnabled == other.AemFnlnEnabled ||
                    AemFnlnEnabled != null &&
                    AemFnlnEnabled.Equals(other.AemFnlnEnabled)
                ) && 
                (
                    AemPhEnabled == other.AemPhEnabled ||
                    AemPhEnabled != null &&
                    AemPhEnabled.Equals(other.AemPhEnabled)
                ) && 
                (
                    AemGeEnabled == other.AemGeEnabled ||
                    AemGeEnabled != null &&
                    AemGeEnabled.Equals(other.AemGeEnabled)
                ) && 
                (
                    AemDbEnabled == other.AemDbEnabled ||
                    AemDbEnabled != null &&
                    AemDbEnabled.Equals(other.AemDbEnabled)
                ) && 
                (
                    AemLocEnabled == other.AemLocEnabled ||
                    AemLocEnabled != null &&
                    AemLocEnabled.Equals(other.AemLocEnabled)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (AemEnabled != null)
                    hashCode = hashCode * 59 + AemEnabled.GetHashCode();
                    if (MdFrequency != null)
                    hashCode = hashCode * 59 + MdFrequency.GetHashCode();
                    if (AemFnlnEnabled != null)
                    hashCode = hashCode * 59 + AemFnlnEnabled.GetHashCode();
                    if (AemPhEnabled != null)
                    hashCode = hashCode * 59 + AemPhEnabled.GetHashCode();
                    if (AemGeEnabled != null)
                    hashCode = hashCode * 59 + AemGeEnabled.GetHashCode();
                    if (AemDbEnabled != null)
                    hashCode = hashCode * 59 + AemDbEnabled.GetHashCode();
                    if (AemLocEnabled != null)
                    hashCode = hashCode * 59 + AemLocEnabled.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ConversionTagConfigs left, ConversionTagConfigs right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ConversionTagConfigs left, ConversionTagConfigs right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
