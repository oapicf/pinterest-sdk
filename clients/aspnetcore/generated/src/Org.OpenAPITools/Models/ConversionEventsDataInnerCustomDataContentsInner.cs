/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ConversionEventsDataInnerCustomDataContentsInner : IEquatable<ConversionEventsDataInnerCustomDataContentsInner>
    {
        /// <summary>
        /// The id of a product. We recommend using this if you are a merchant for AddToCart and Checkouts. For detail, please check &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/before-you-get-started-with-catalogs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;here&lt;/a&gt; (Install the Pinterest tag section).
        /// </summary>
        /// <value>The id of a product. We recommend using this if you are a merchant for AddToCart and Checkouts. For detail, please check &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/before-you-get-started-with-catalogs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;here&lt;/a&gt; (Install the Pinterest tag section).</value>
        /* <example>red-pinterest-shirt-logo-1</example> */
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// The price of a product. Accepted as a string in the request; it will be parsed into a double. This is the original item value before any discount. We recommend using this if you are a merchant for PageVisit, AddToCart and Checkouts. For detail, please check &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/before-you-get-started-with-catalogs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;here&lt;/a&gt; (Install the Pinterest tag section).
        /// </summary>
        /// <value>The price of a product. Accepted as a string in the request; it will be parsed into a double. This is the original item value before any discount. We recommend using this if you are a merchant for PageVisit, AddToCart and Checkouts. For detail, please check &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/before-you-get-started-with-catalogs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;here&lt;/a&gt; (Install the Pinterest tag section).</value>
        /* <example>1325.12</example> */
        [DataMember(Name="item_price", EmitDefaultValue=false)]
        public string ItemPrice { get; set; }

        /// <summary>
        /// The amount of a product. We recommend using this if you are a merchant for AddToCart and Checkouts. For detail, please check &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/before-you-get-started-with-catalogs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;here&lt;/a&gt; (Install the Pinterest tag section).
        /// </summary>
        /// <value>The amount of a product. We recommend using this if you are a merchant for AddToCart and Checkouts. For detail, please check &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/before-you-get-started-with-catalogs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;here&lt;/a&gt; (Install the Pinterest tag section).</value>
        /* <example>5</example> */
        [DataMember(Name="quantity", EmitDefaultValue=true)]
        public long Quantity { get; set; }

        /// <summary>
        /// The name of a product.
        /// </summary>
        /// <value>The name of a product.</value>
        /* <example>pinterest-clothing-shirt</example> */
        [DataMember(Name="item_name", EmitDefaultValue=false)]
        public string ItemName { get; set; }

        /// <summary>
        /// The category of a product.
        /// </summary>
        /// <value>The category of a product.</value>
        /* <example>pinterest-entertainment</example> */
        [DataMember(Name="item_category", EmitDefaultValue=false)]
        public string ItemCategory { get; set; }

        /// <summary>
        /// The brand of a product.
        /// </summary>
        /// <value>The brand of a product.</value>
        /* <example>pinterest</example> */
        [DataMember(Name="item_brand", EmitDefaultValue=false)]
        public string ItemBrand { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ConversionEventsDataInnerCustomDataContentsInner {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ItemPrice: ").Append(ItemPrice).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  ItemName: ").Append(ItemName).Append("\n");
            sb.Append("  ItemCategory: ").Append(ItemCategory).Append("\n");
            sb.Append("  ItemBrand: ").Append(ItemBrand).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ConversionEventsDataInnerCustomDataContentsInner)obj);
        }

        /// <summary>
        /// Returns true if ConversionEventsDataInnerCustomDataContentsInner instances are equal
        /// </summary>
        /// <param name="other">Instance of ConversionEventsDataInnerCustomDataContentsInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConversionEventsDataInnerCustomDataContentsInner other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    ItemPrice == other.ItemPrice ||
                    ItemPrice != null &&
                    ItemPrice.Equals(other.ItemPrice)
                ) && 
                (
                    Quantity == other.Quantity ||
                    
                    Quantity.Equals(other.Quantity)
                ) && 
                (
                    ItemName == other.ItemName ||
                    ItemName != null &&
                    ItemName.Equals(other.ItemName)
                ) && 
                (
                    ItemCategory == other.ItemCategory ||
                    ItemCategory != null &&
                    ItemCategory.Equals(other.ItemCategory)
                ) && 
                (
                    ItemBrand == other.ItemBrand ||
                    ItemBrand != null &&
                    ItemBrand.Equals(other.ItemBrand)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (ItemPrice != null)
                    hashCode = hashCode * 59 + ItemPrice.GetHashCode();
                    
                    hashCode = hashCode * 59 + Quantity.GetHashCode();
                    if (ItemName != null)
                    hashCode = hashCode * 59 + ItemName.GetHashCode();
                    if (ItemCategory != null)
                    hashCode = hashCode * 59 + ItemCategory.GetHashCode();
                    if (ItemBrand != null)
                    hashCode = hashCode * 59 + ItemBrand.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ConversionEventsDataInnerCustomDataContentsInner left, ConversionEventsDataInnerCustomDataContentsInner right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ConversionEventsDataInnerCustomDataContentsInner left, ConversionEventsDataInnerCustomDataContentsInner right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
