/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class CampaignsApiController : ControllerBase
    { 
        /// <summary>
        /// Get targeting analytics for campaigns
        /// </summary>
        /// <remarks>Get targeting analytics for one or more campaigns. For the requested account and metrics, the response will include the requested metric information (e.g. SPEND_IN_DOLLAR) for the requested target type (e.g. \&quot;age_bucket\&quot;) for applicable values (e.g. \&quot;45-49\&quot;). &lt;p/&gt; - The token&#39;s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt;: Admin, Analyst, Campaign Manager. - If granularity is not HOUR, the furthest back you can are allowed to pull data is 90 days before the current date in UTC time and the max time range supported is 90 days. - If granularity is HOUR, the furthest back you can are allowed to pull data is 8 days before the current date in UTC time and the max time range supported is 3 days.</remarks>
        /// <param name="adAccountId">Unique identifier of an ad account.</param>
        /// <param name="campaignIds">List of Campaign Ids to use to filter the results.</param>
        /// <param name="startDate">Metric report start date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days back from today.</param>
        /// <param name="endDate">Metric report end date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days past start_date.</param>
        /// <param name="targetingTypes">Targeting type breakdowns for the report. The reporting per targeting type &lt;br&gt; is independent from each other. [\&quot;AGE_BUCKET_AND_GENDER\&quot;] is in BETA and not yet available to all users.</param>
        /// <param name="columns">Columns to retrieve, encoded as a comma-separated string. **NOTE**: Any metrics defined as MICRO_DOLLARS returns a value based on the advertiser profile&#39;s currency field. For USD,($1/1,000,000, or $0.000001 - one one-ten-thousandth of a cent). it&#39;s microdollars. Otherwise, it&#39;s in microunits of the advertiser&#39;s currency.&lt;br/&gt;For example, if the advertiser&#39;s currency is GBP (British pound sterling), all MICRO_DOLLARS fields will be in GBP microunits (1/1,000,000 British pound).&lt;br/&gt;If a column has no value, it may not be returned</param>
        /// <param name="granularity">TOTAL - metrics are aggregated over the specified date range.&lt;br&gt; DAY - metrics are broken down daily.&lt;br&gt; HOUR - metrics are broken down hourly.&lt;br&gt;WEEKLY - metrics are broken down weekly.&lt;br&gt;MONTHLY - metrics are broken down monthly</param>
        /// <param name="clickWindowDays">Number of days to use as the conversion attribution window for a pin click action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.</param>
        /// <param name="engagementWindowDays">Number of days to use as the conversion attribution window for an engagement action. Engagements include saves, closeups, link clicks, and carousel card swipes. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.</param>
        /// <param name="viewWindowDays">Number of days to use as the conversion attribution window for a view action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;1&#x60; day.</param>
        /// <param name="conversionReportTime">The date by which the conversion metrics returned from this endpoint will be reported. There are two dates associated with a conversion event: the date that the user interacted with the ad, and the date that the user completed a conversion event.</param>
        /// <param name="attributionTypes">List of types of attribution for the conversion report</param>
        /// <response code="200">Success</response>
        /// <response code="0">Unexpected error</response>
        [HttpGet]
        [Route("/v5/ad_accounts/{ad_account_id}/campaigns/targeting_analytics")]
        [ValidateModelState]
        [SwaggerOperation("CampaignTargetingAnalyticsGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(MetricsResponse), description: "Success")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "Unexpected error")]
        public virtual IActionResult CampaignTargetingAnalyticsGet([FromRoute (Name = "ad_account_id")][Required][RegularExpression("^\\d+$")] [MaxLength(18)]string adAccountId, [FromQuery (Name = "campaign_ids")][Required()]List<string> campaignIds, [FromQuery (Name = "start_date")][Required()]DateOnly startDate, [FromQuery (Name = "end_date")][Required()]DateOnly endDate, [FromQuery (Name = "targeting_types")][Required()]List<AdsAnalyticsCampaignTargetingType> targetingTypes, [FromQuery (Name = "columns")][Required()]List<string> columns, [FromQuery (Name = "granularity")][Required()]Granularity granularity, [FromQuery (Name = "click_window_days")]int? clickWindowDays, [FromQuery (Name = "engagement_window_days")]int? engagementWindowDays, [FromQuery (Name = "view_window_days")]int? viewWindowDays, [FromQuery (Name = "conversion_report_time")]string conversionReportTime, [FromQuery (Name = "attribution_types")]ConversionReportAttributionType? attributionTypes)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(MetricsResponse));
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(Error));
            string exampleJson = null;
            exampleJson = "{\n  \"data\" : [ {\n    \"targeting_type\" : \"KEYWORD\",\n    \"targeting_value\" : \"christmas decor ideas\",\n    \"metrics\" : {\n      \"AD_GROUP_ID\" : 2680067996745,\n      \"DATE\" : \"2022-04-26\",\n      \"SPEND_IN_DOLLAR\" : 240\n    }\n  }, {\n    \"targeting_type\" : \"APPTYPE\",\n    \"targeting_value\" : \"iphone\",\n    \"metrics\" : {\n      \"AD_GROUP_ID\" : 2680067996745,\n      \"DATE\" : \"2022-04-26\",\n      \"SPEND_IN_DOLLAR\" : 240\n    }\n  }, {\n    \"targeting_type\" : \"APPTYPE\",\n    \"targeting_value\" : \"ipad\",\n    \"metrics\" : {\n      \"AD_GROUP_ID\" : 2680067996745,\n      \"DATE\" : \"2022-04-26\",\n      \"SPEND_IN_DOLLAR\" : 240\n    }\n  }, {\n    \"targeting_type\" : \"APPTYPE\",\n    \"targeting_value\" : \"web\",\n    \"metrics\" : {\n      \"AD_GROUP_ID\" : 2680067996745,\n      \"DATE\" : \"2022-04-26\",\n      \"SPEND_IN_DOLLAR\" : 240\n    }\n  }, {\n    \"targeting_type\" : \"APPTYPE\",\n    \"targeting_value\" : \"web_mobile\",\n    \"metrics\" : {\n      \"AD_GROUP_ID\" : 2680067996745,\n      \"DATE\" : \"2022-04-26\",\n      \"SPEND_IN_DOLLAR\" : 240\n    }\n  }, {\n    \"targeting_type\" : \"APPTYPE\",\n    \"targeting_value\" : \"android_mobile\",\n    \"metrics\" : {\n      \"AD_GROUP_ID\" : 2680067996745,\n      \"DATE\" : \"2022-04-26\",\n      \"SPEND_IN_DOLLAR\" : 240\n    }\n  }, {\n    \"targeting_type\" : \"APPTYPE\",\n    \"targeting_value\" : \"android_tablet\",\n    \"metrics\" : {\n      \"AD_GROUP_ID\" : 2680067996745,\n      \"DATE\" : \"2022-04-26\",\n      \"SPEND_IN_DOLLAR\" : 240\n    }\n  }, {\n    \"targeting_type\" : \"GENDER\",\n    \"targeting_value\" : \"female\",\n    \"metrics\" : {\n      \"AD_GROUP_ID\" : 2680067996745,\n      \"DATE\" : \"2022-04-26\",\n      \"SPEND_IN_DOLLAR\" : 240\n    }\n  }, {\n    \"targeting_type\" : \"LOCATION\",\n    \"targeting_value\" : 500,\n    \"metrics\" : {\n      \"AD_GROUP_ID\" : 2680067996745,\n      \"DATE\" : \"2022-04-26\",\n      \"SPEND_IN_DOLLAR\" : 240\n    }\n  }, {\n    \"targeting_type\" : \"PLACEMENT\",\n    \"targeting_value\" : \"SEARCH\",\n    \"metrics\" : {\n      \"AD_GROUP_ID\" : 2680067996745,\n      \"DATE\" : \"2022-04-26\",\n      \"SPEND_IN_DOLLAR\" : 240\n    }\n  }, {\n    \"targeting_type\" : \"COUNTRY\",\n    \"targeting_value\" : \"US\",\n    \"metrics\" : {\n      \"AD_GROUP_ID\" : 2680067996745,\n      \"DATE\" : \"2022-04-26\",\n      \"SPEND_IN_DOLLAR\" : 240\n    }\n  }, {\n    \"targeting_type\" : \"TARGETED_INTEREST\",\n    \"targeting_value\" : \"Food and Drinks\",\n    \"metrics\" : {\n      \"AD_GROUP_ID\" : 2680067996745,\n      \"DATE\" : \"2022-04-26\",\n      \"SPEND_IN_DOLLAR\" : 240\n    }\n  }, {\n    \"targeting_type\" : \"PINNER_INTEREST\",\n    \"targeting_value\" : \"Chocolate Cookies\",\n    \"metrics\" : {\n      \"AD_GROUP_ID\" : 2680067996745,\n      \"DATE\" : \"2022-04-26\",\n      \"SPEND_IN_DOLLAR\" : 240\n    }\n  }, {\n    \"targeting_type\" : \"AUDIENCE_INCLUDE\",\n    \"targeting_value\" : 254261234567,\n    \"metrics\" : {\n      \"AD_GROUP_ID\" : 2680067996745,\n      \"DATE\" : \"2022-04-26\",\n      \"SPEND_IN_DOLLAR\" : 240\n    }\n  }, {\n    \"targeting_type\" : \"GEO\",\n    \"targeting_value\" : \"US:94102\",\n    \"metrics\" : {\n      \"AD_GROUP_ID\" : 2680067996745,\n      \"DATE\" : \"2022-04-26\",\n      \"SPEND_IN_DOLLAR\" : 240\n    }\n  }, {\n    \"targeting_type\" : \"AGE_BUCKET\",\n    \"targeting_value\" : \"45-49\",\n    \"metrics\" : {\n      \"AD_GROUP_ID\" : 2680067996745,\n      \"DATE\" : \"2022-04-26\",\n      \"SPEND_IN_DOLLAR\" : 240\n    }\n  }, {\n    \"targeting_type\" : \"REGION\",\n    \"targeting_value\" : \"US-CA\",\n    \"metrics\" : {\n      \"AD_GROUP_ID\" : 2680067996745,\n      \"DATE\" : \"2022-04-26\",\n      \"SPEND_IN_DOLLAR\" : 240\n    }\n  } ]\n}";
            exampleJson = "{\n  \"code\" : 0,\n  \"message\" : \"message\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<MetricsResponse>(exampleJson)
            : default(MetricsResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get campaign analytics
        /// </summary>
        /// <remarks>Get analytics for the specified campaigns in the specified &lt;code&gt;ad_account_id&lt;/code&gt;, filtered by the specified options. - The token&#39;s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt;: Admin, Analyst, Campaign Manager. - If granularity is not HOUR, the furthest back you can are allowed to pull data is 90 days before the current date in UTC time and the max time range supported is 90 days. - If granularity is HOUR, the furthest back you can are allowed to pull data is 8 days before the current date in UTC time and the max time range supported is 3 days.</remarks>
        /// <param name="adAccountId">Unique identifier of an ad account.</param>
        /// <param name="startDate">Metric report start date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days back from today.</param>
        /// <param name="endDate">Metric report end date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days past start_date.</param>
        /// <param name="campaignIds">List of Campaign Ids to use to filter the results.</param>
        /// <param name="columns">Columns to retrieve, encoded as a comma-separated string. **NOTE**: Any metrics defined as MICRO_DOLLARS returns a value based on the advertiser profile&#39;s currency field. For USD,($1/1,000,000, or $0.000001 - one one-ten-thousandth of a cent). it&#39;s microdollars. Otherwise, it&#39;s in microunits of the advertiser&#39;s currency.&lt;br/&gt;For example, if the advertiser&#39;s currency is GBP (British pound sterling), all MICRO_DOLLARS fields will be in GBP microunits (1/1,000,000 British pound).&lt;br/&gt;If a column has no value, it may not be returned</param>
        /// <param name="granularity">TOTAL - metrics are aggregated over the specified date range.&lt;br&gt; DAY - metrics are broken down daily.&lt;br&gt; HOUR - metrics are broken down hourly.&lt;br&gt;WEEKLY - metrics are broken down weekly.&lt;br&gt;MONTHLY - metrics are broken down monthly</param>
        /// <param name="clickWindowDays">Number of days to use as the conversion attribution window for a pin click action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.</param>
        /// <param name="engagementWindowDays">Number of days to use as the conversion attribution window for an engagement action. Engagements include saves, closeups, link clicks, and carousel card swipes. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.</param>
        /// <param name="viewWindowDays">Number of days to use as the conversion attribution window for a view action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;1&#x60; day.</param>
        /// <param name="conversionReportTime">The date by which the conversion metrics returned from this endpoint will be reported. There are two dates associated with a conversion event: the date that the user interacted with the ad, and the date that the user completed a conversion event.</param>
        /// <response code="200">Success</response>
        /// <response code="400">Invalid ad account campaign analytics parameters.</response>
        /// <response code="0">Unexpected error</response>
        [HttpGet]
        [Route("/v5/ad_accounts/{ad_account_id}/campaigns/analytics")]
        [ValidateModelState]
        [SwaggerOperation("CampaignsAnalytics")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<CampaignsAnalyticsResponseInner>), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "Invalid ad account campaign analytics parameters.")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "Unexpected error")]
        public virtual IActionResult CampaignsAnalytics([FromRoute (Name = "ad_account_id")][Required][RegularExpression("^\\d+$")] [MaxLength(18)]string adAccountId, [FromQuery (Name = "start_date")][Required()]DateOnly startDate, [FromQuery (Name = "end_date")][Required()]DateOnly endDate, [FromQuery (Name = "campaign_ids")][Required()]List<string> campaignIds, [FromQuery (Name = "columns")][Required()]List<string> columns, [FromQuery (Name = "granularity")][Required()]Granularity granularity, [FromQuery (Name = "click_window_days")]int? clickWindowDays, [FromQuery (Name = "engagement_window_days")]int? engagementWindowDays, [FromQuery (Name = "view_window_days")]int? viewWindowDays, [FromQuery (Name = "conversion_report_time")]string conversionReportTime)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<CampaignsAnalyticsResponseInner>));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Error));
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(Error));
            string exampleJson = null;
            exampleJson = "[ {\n  \"DATE\" : \"2021-04-01\",\n  \"CAMPAIGN_ID\" : \"547602124502\",\n  \"SPEND_IN_DOLLAR\" : 30,\n  \"TOTAL_CLICKTHROUGH\" : 216\n}, {\n  \"DATE\" : \"2021-04-01\",\n  \"CAMPAIGN_ID\" : \"547602124502\",\n  \"SPEND_IN_DOLLAR\" : 30,\n  \"TOTAL_CLICKTHROUGH\" : 216\n} ]";
            exampleJson = "{\n  \"code\" : 0,\n  \"message\" : \"message\"\n}";
            exampleJson = "{\n  \"code\" : 0,\n  \"message\" : \"message\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<CampaignsAnalyticsResponseInner>>(exampleJson)
            : default(List<CampaignsAnalyticsResponseInner>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Create campaigns
        /// </summary>
        /// <remarks>Create multiple new campaigns. Every campaign has its own campaign_id and houses one or more ad groups, which contain one or more ads. For more, see &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/set-up-your-campaign/\&quot;&gt;Set up your campaign&lt;/a&gt;. &lt;p/&gt; &lt;strong&gt;Note:&lt;/strong&gt; - The values for &#39;lifetime_spend_cap&#39; and &#39;daily_spend_cap&#39; are microcurrency amounts based on the currency field set in the advertiser&#39;s profile. (e.g. USD) &lt;p/&gt; &lt;p&gt;Microcurrency is used to track very small transactions, based on the currency set in the advertiser’s profile.&lt;/p&gt; &lt;p&gt;A microcurrency unit is 10^(-6) of the standard unit of currency selected in the advertiser’s profile.&lt;/p&gt;  &lt;p&gt;&lt;strong&gt;Equivalency equations&lt;/strong&gt;, using dollars as an example currency:&lt;/p&gt; &lt;ul&gt;   &lt;li&gt;$1 &#x3D; 1,000,000 microdollars&lt;/li&gt;   &lt;li&gt;1 microdollar &#x3D; $0.000001 &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;strong&gt;To convert between currency and microcurrency&lt;/strong&gt;, using dollars as an example currency:&lt;/p&gt; &lt;ul&gt;   &lt;li&gt;To convert dollars to microdollars, mutiply dollars by 1,000,000&lt;/li&gt;   &lt;li&gt;To convert microdollars to dollars, divide microdollars by 1,000,000&lt;/li&gt; &lt;/ul&gt;</remarks>
        /// <param name="adAccountId">Unique identifier of an ad account.</param>
        /// <param name="campaignCreateRequest">Array of campaigns.</param>
        /// <response code="200">response</response>
        /// <response code="0">Unexpected error</response>
        [HttpPost]
        [Route("/v5/ad_accounts/{ad_account_id}/campaigns")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("CampaignsCreate")]
        [SwaggerResponse(statusCode: 200, type: typeof(CampaignCreateResponse), description: "response")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "Unexpected error")]
        public virtual IActionResult CampaignsCreate([FromRoute (Name = "ad_account_id")][Required][RegularExpression("^\\d+$")] [MaxLength(18)]string adAccountId, [FromBody]List<CampaignCreateRequest> campaignCreateRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(CampaignCreateResponse));
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(Error));
            string exampleJson = null;
            exampleJson = "{\n  \"items\" : [ {\n    \"data\" : {\n      \"created_time\" : 1432744744,\n      \"updated_time\" : 1432744744,\n      \"default_ad_group_budget_in_micro_currency\" : 0,\n      \"lifetime_spend_cap\" : 1432744744,\n      \"end_time\" : 1644023526,\n      \"is_flexible_daily_budgets\" : true,\n      \"daily_spend_cap\" : 1432744744,\n      \"is_campaign_budget_optimization\" : true,\n      \"summary_status\" : \"RUNNING\",\n      \"type\" : \"campaign\",\n      \"tracking_urls\" : \"{}\",\n      \"ad_account_id\" : \"549755885175\",\n      \"is_automated_campaign\" : true,\n      \"start_time\" : 1580865126,\n      \"name\" : \"ACME Tools\",\n      \"order_line_id\" : \"549755885175\",\n      \"id\" : \"549755885175\",\n      \"status\" : \"status\"\n    },\n    \"exceptions\" : [ {\n      \"code\" : 2,\n      \"message\" : \"Advertiser not found.\"\n    }, {\n      \"code\" : 2,\n      \"message\" : \"Advertiser not found.\"\n    } ]\n  }, {\n    \"data\" : {\n      \"created_time\" : 1432744744,\n      \"updated_time\" : 1432744744,\n      \"default_ad_group_budget_in_micro_currency\" : 0,\n      \"lifetime_spend_cap\" : 1432744744,\n      \"end_time\" : 1644023526,\n      \"is_flexible_daily_budgets\" : true,\n      \"daily_spend_cap\" : 1432744744,\n      \"is_campaign_budget_optimization\" : true,\n      \"summary_status\" : \"RUNNING\",\n      \"type\" : \"campaign\",\n      \"tracking_urls\" : \"{}\",\n      \"ad_account_id\" : \"549755885175\",\n      \"is_automated_campaign\" : true,\n      \"start_time\" : 1580865126,\n      \"name\" : \"ACME Tools\",\n      \"order_line_id\" : \"549755885175\",\n      \"id\" : \"549755885175\",\n      \"status\" : \"status\"\n    },\n    \"exceptions\" : [ {\n      \"code\" : 2,\n      \"message\" : \"Advertiser not found.\"\n    }, {\n      \"code\" : 2,\n      \"message\" : \"Advertiser not found.\"\n    } ]\n  } ]\n}";
            exampleJson = "{\n  \"code\" : 0,\n  \"message\" : \"message\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<CampaignCreateResponse>(exampleJson)
            : default(CampaignCreateResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get campaign
        /// </summary>
        /// <remarks>Get a specific campaign given the campaign ID.</remarks>
        /// <param name="adAccountId">Unique identifier of an ad account.</param>
        /// <param name="campaignId">Campaign ID, must be associated with the ad account ID provided in the path.</param>
        /// <response code="200">Success</response>
        /// <response code="0">Unexpected error</response>
        [HttpGet]
        [Route("/v5/ad_accounts/{ad_account_id}/campaigns/{campaign_id}")]
        [ValidateModelState]
        [SwaggerOperation("CampaignsGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(CampaignResponse), description: "Success")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "Unexpected error")]
        public virtual IActionResult CampaignsGet([FromRoute (Name = "ad_account_id")][Required][RegularExpression("^\\d+$")] [MaxLength(18)]string adAccountId, [FromRoute (Name = "campaign_id")][Required][RegularExpression("^\\d+$")] [MaxLength(18)]string campaignId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(CampaignResponse));
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(Error));
            string exampleJson = null;
            exampleJson = "{\n  \"created_time\" : 1432744744,\n  \"updated_time\" : 1432744744,\n  \"lifetime_spend_cap\" : 1432744744,\n  \"end_time\" : 1644023526,\n  \"is_flexible_daily_budgets\" : true,\n  \"daily_spend_cap\" : 1432744744,\n  \"objective_type\" : \"AWARENESS\",\n  \"is_campaign_budget_optimization\" : true,\n  \"summary_status\" : \"RUNNING\",\n  \"type\" : \"campaign\",\n  \"tracking_urls\" : \"{}\",\n  \"ad_account_id\" : \"549755885175\",\n  \"start_time\" : 1580865126,\n  \"name\" : \"ACME Tools\",\n  \"order_line_id\" : \"549755885175\",\n  \"id\" : \"549755885175\",\n  \"status\" : \"status\"\n}";
            exampleJson = "{\n  \"code\" : 0,\n  \"message\" : \"message\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<CampaignResponse>(exampleJson)
            : default(CampaignResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// List campaigns
        /// </summary>
        /// <remarks>Get a list of the campaigns in the specified &lt;code&gt;ad_account_id&lt;/code&gt;, filtered by the specified options. - The token&#39;s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt;: Admin, Analyst, Campaign Manager.</remarks>
        /// <param name="adAccountId">Unique identifier of an ad account.</param>
        /// <param name="campaignIds">List of Campaign Ids to use to filter the results.</param>
        /// <param name="entityStatuses">Entity status</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information.</param>
        /// <param name="order">The order in which to sort the items returned: “ASCENDING” or “DESCENDING” by ID. Note that higher-value IDs are associated with more-recently added items.</param>
        /// <param name="bookmark">Cursor used to fetch the next page of items</param>
        /// <response code="200">Success</response>
        /// <response code="400">Invalid ad account campaign parameters.</response>
        /// <response code="0">Unexpected error</response>
        [HttpGet]
        [Route("/v5/ad_accounts/{ad_account_id}/campaigns")]
        [ValidateModelState]
        [SwaggerOperation("CampaignsList")]
        [SwaggerResponse(statusCode: 200, type: typeof(CampaignsList200Response), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "Invalid ad account campaign parameters.")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "Unexpected error")]
        public virtual IActionResult CampaignsList([FromRoute (Name = "ad_account_id")][Required][RegularExpression("^\\d+$")] [MaxLength(18)]string adAccountId, [FromQuery (Name = "campaign_ids")]List<string> campaignIds, [FromQuery (Name = "entity_statuses")]List<string> entityStatuses, [FromQuery (Name = "page_size")][Range(1, 250)]int? pageSize, [FromQuery (Name = "order")]string order, [FromQuery (Name = "bookmark")]string bookmark)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(CampaignsList200Response));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Error));
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(Error));
            string exampleJson = null;
            exampleJson = "{\n  \"bookmark\" : \"bookmark\",\n  \"items\" : [ {\n    \"created_time\" : 1432744744,\n    \"updated_time\" : 1432744744,\n    \"lifetime_spend_cap\" : 1432744744,\n    \"end_time\" : 1644023526,\n    \"is_flexible_daily_budgets\" : true,\n    \"daily_spend_cap\" : 1432744744,\n    \"objective_type\" : \"AWARENESS\",\n    \"is_campaign_budget_optimization\" : true,\n    \"summary_status\" : \"RUNNING\",\n    \"type\" : \"campaign\",\n    \"tracking_urls\" : \"{}\",\n    \"ad_account_id\" : \"549755885175\",\n    \"start_time\" : 1580865126,\n    \"name\" : \"ACME Tools\",\n    \"order_line_id\" : \"549755885175\",\n    \"id\" : \"549755885175\",\n    \"status\" : \"status\"\n  }, {\n    \"created_time\" : 1432744744,\n    \"updated_time\" : 1432744744,\n    \"lifetime_spend_cap\" : 1432744744,\n    \"end_time\" : 1644023526,\n    \"is_flexible_daily_budgets\" : true,\n    \"daily_spend_cap\" : 1432744744,\n    \"objective_type\" : \"AWARENESS\",\n    \"is_campaign_budget_optimization\" : true,\n    \"summary_status\" : \"RUNNING\",\n    \"type\" : \"campaign\",\n    \"tracking_urls\" : \"{}\",\n    \"ad_account_id\" : \"549755885175\",\n    \"start_time\" : 1580865126,\n    \"name\" : \"ACME Tools\",\n    \"order_line_id\" : \"549755885175\",\n    \"id\" : \"549755885175\",\n    \"status\" : \"status\"\n  } ]\n}";
            exampleJson = "{\n  \"code\" : 0,\n  \"message\" : \"message\"\n}";
            exampleJson = "{\n  \"code\" : 0,\n  \"message\" : \"message\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<CampaignsList200Response>(exampleJson)
            : default(CampaignsList200Response);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Update campaigns
        /// </summary>
        /// <remarks>Update multiple ad campaigns based on campaign_ids. &lt;p/&gt; &lt;strong&gt;Note:&lt;/strong&gt;&lt;p/&gt;  - &lt;p&gt;The values for &#39;lifetime_spend_cap&#39; and &#39;daily_spend_cap&#39; are microcurrency amounts based on the currency field set in the advertiser&#39;s profile. (e.g. USD) &lt;p/&gt; &lt;p&gt;Microcurrency is used to track very small transactions, based on the currency set in the advertiser’s profile.&lt;/p&gt; &lt;p&gt;A microcurrency unit is 10^(-6) of the standard unit of currency selected in the advertiser’ s profile.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Equivalency equations&lt;/strong&gt;, using dollars as an example currency:&lt;/p&gt; &lt;ul&gt;   &lt;li&gt;$1 &#x3D; 1,000,000 microdollars&lt;/li&gt;   &lt;li&gt;1 microdollar &#x3D; $0.000001 &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;strong&gt;To convert between currency and microcurrency&lt;/strong&gt;, using dollars as an example currency:&lt;/p&gt; &lt;ul&gt;   &lt;li&gt;To convert dollars to microdollars, mutiply dollars by 1,000,000&lt;/li&gt;   &lt;li&gt;To convert microdollars to dollars, divide microdollars by 1,000,000&lt;/li&gt; &lt;/ul&gt;</remarks>
        /// <param name="adAccountId">Unique identifier of an ad account.</param>
        /// <param name="campaignUpdateRequest">Array of campaigns.</param>
        /// <response code="200">response</response>
        /// <response code="0">Unexpected error</response>
        [HttpPatch]
        [Route("/v5/ad_accounts/{ad_account_id}/campaigns")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("CampaignsUpdate")]
        [SwaggerResponse(statusCode: 200, type: typeof(CampaignUpdateResponse), description: "response")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "Unexpected error")]
        public virtual IActionResult CampaignsUpdate([FromRoute (Name = "ad_account_id")][Required][RegularExpression("^\\d+$")] [MaxLength(18)]string adAccountId, [FromBody]List<CampaignUpdateRequest> campaignUpdateRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(CampaignUpdateResponse));
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(Error));
            string exampleJson = null;
            exampleJson = "{\n  \"items\" : [ {\n    \"data\" : {\n      \"created_time\" : 1432744744,\n      \"updated_time\" : 1432744744,\n      \"default_ad_group_budget_in_micro_currency\" : 0,\n      \"lifetime_spend_cap\" : 1432744744,\n      \"end_time\" : 1644023526,\n      \"is_flexible_daily_budgets\" : true,\n      \"daily_spend_cap\" : 1432744744,\n      \"is_campaign_budget_optimization\" : true,\n      \"summary_status\" : \"RUNNING\",\n      \"type\" : \"campaign\",\n      \"tracking_urls\" : \"{}\",\n      \"ad_account_id\" : \"549755885175\",\n      \"is_automated_campaign\" : true,\n      \"start_time\" : 1580865126,\n      \"name\" : \"ACME Tools\",\n      \"order_line_id\" : \"549755885175\",\n      \"id\" : \"549755885175\",\n      \"status\" : \"status\"\n    },\n    \"exceptions\" : [ {\n      \"code\" : 2,\n      \"message\" : \"Advertiser not found.\"\n    }, {\n      \"code\" : 2,\n      \"message\" : \"Advertiser not found.\"\n    } ]\n  }, {\n    \"data\" : {\n      \"created_time\" : 1432744744,\n      \"updated_time\" : 1432744744,\n      \"default_ad_group_budget_in_micro_currency\" : 0,\n      \"lifetime_spend_cap\" : 1432744744,\n      \"end_time\" : 1644023526,\n      \"is_flexible_daily_budgets\" : true,\n      \"daily_spend_cap\" : 1432744744,\n      \"is_campaign_budget_optimization\" : true,\n      \"summary_status\" : \"RUNNING\",\n      \"type\" : \"campaign\",\n      \"tracking_urls\" : \"{}\",\n      \"ad_account_id\" : \"549755885175\",\n      \"is_automated_campaign\" : true,\n      \"start_time\" : 1580865126,\n      \"name\" : \"ACME Tools\",\n      \"order_line_id\" : \"549755885175\",\n      \"id\" : \"549755885175\",\n      \"status\" : \"status\"\n    },\n    \"exceptions\" : [ {\n      \"code\" : 2,\n      \"message\" : \"Advertiser not found.\"\n    }, {\n      \"code\" : 2,\n      \"message\" : \"Advertiser not found.\"\n    } ]\n  } ]\n}";
            exampleJson = "{\n  \"code\" : 0,\n  \"message\" : \"message\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<CampaignUpdateResponse>(exampleJson)
            : default(CampaignUpdateResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
