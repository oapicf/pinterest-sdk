/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class ResourcesApiController : ControllerBase
    { 
        /// <summary>
        /// Get ad accounts countries
        /// </summary>
        /// <remarks>Get Ad Accounts countries</remarks>
        /// <response code="200">Success</response>
        /// <response code="0">Unexpected error</response>
        [HttpGet]
        [Route("/v5/resources/ad_account_countries")]
        [ValidateModelState]
        [SwaggerOperation("AdAccountCountriesGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(AdAccountsCountryResponse), description: "Success")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "Unexpected error")]
        public virtual IActionResult AdAccountCountriesGet()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(AdAccountsCountryResponse));
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(Error));
            string exampleJson = null;
            exampleJson = "{\n  \"items\" : [ {\n    \"code\" : \"code\",\n    \"name\" : \"United States of America\",\n    \"index\" : 1,\n    \"currency\" : \"Dollars\"\n  }, {\n    \"code\" : \"code\",\n    \"name\" : \"United States of America\",\n    \"index\" : 1,\n    \"currency\" : \"Dollars\"\n  } ]\n}";
            exampleJson = "{\n  \"code\" : 0,\n  \"message\" : \"message\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<AdAccountsCountryResponse>(exampleJson)
            : default(AdAccountsCountryResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get available metrics&#39; definitions
        /// </summary>
        /// <remarks>Get the definitions for ads and organic metrics available across both synchronous and asynchronous report endpoints. The &#x60;display_name&#x60; attribute will match how the metric is named in our native tools like Ads Manager. See &lt;a href&#x3D;&#39;/docs/api-features/analytics-overview/&#39;&gt;Organic Analytics&lt;/a&gt; and &lt;a href&#x3D;&#39;/docs/api-features/ads-reporting/&#39;&gt;Ads Analytics&lt;/a&gt; for more information.</remarks>
        /// <param name="reportType">Report type.</param>
        /// <response code="200">Success</response>
        /// <response code="0">Unexpected error</response>
        [HttpGet]
        [Route("/v5/resources/delivery_metrics")]
        [ValidateModelState]
        [SwaggerOperation("DeliveryMetricsGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(DeliveryMetricsResponse), description: "Success")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "Unexpected error")]
        public virtual IActionResult DeliveryMetricsGet([FromQuery (Name = "report_type")]string reportType)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(DeliveryMetricsResponse));
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(Error));
            string exampleJson = null;
            exampleJson = "{\n  \"items\" : [ {\n    \"name\" : \"AD_GROUP_ID\",\n    \"definition\" : \"Unique ID for your ad group\",\n    \"category\" : \"ADS\",\n    \"display_name\" : \"Ad group ID\"\n  }, {\n    \"name\" : \"AD_GROUP_ID\",\n    \"definition\" : \"Unique ID for your ad group\",\n    \"category\" : \"ADS\",\n    \"display_name\" : \"Ad group ID\"\n  } ]\n}";
            exampleJson = "{\n  \"code\" : 0,\n  \"message\" : \"message\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<DeliveryMetricsResponse>(exampleJson)
            : default(DeliveryMetricsResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get interest details
        /// </summary>
        /// <remarks>&lt;p&gt;Get details of a specific interest given interest ID.&lt;/p&gt; &lt;p&gt;Click &lt;a href&#x3D;\&quot;https://docs.google.com/spreadsheets/d/1HxL-0Z3p2fgxis9YBP2HWC3tvPrs1hAuHDRtH-NJTIM/edit#gid&#x3D;118370875\&quot; target&#x3D;\&quot;_blank\&quot;&gt;here&lt;/a&gt; for a spreadsheet listing interests and their IDs.&lt;/p&gt;</remarks>
        /// <param name="interestId">Unique identifier of an interest.</param>
        /// <response code="200">Success</response>
        /// <response code="0">Unexpected error</response>
        [HttpGet]
        [Route("/v5/resources/targeting/interests/{interest_id}")]
        [ValidateModelState]
        [SwaggerOperation("InterestTargetingOptionsGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(SingleInterestTargetingOptionResponse), description: "Success")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "Unexpected error")]
        public virtual IActionResult InterestTargetingOptionsGet([FromRoute (Name = "interest_id")][Required][RegularExpression("^\\d+$")] [MaxLength(18)]string interestId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(SingleInterestTargetingOptionResponse));
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(Error));
            string exampleJson = null;
            exampleJson = "{\n  \"level\" : 2,\n  \"name\" : \"Dress\",\n  \"child_interests\" : [ \"child_interests\", \"child_interests\" ],\n  \"id\" : \"945391946569\"\n}";
            exampleJson = "{\n  \"code\" : 0,\n  \"message\" : \"message\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<SingleInterestTargetingOptionResponse>(exampleJson)
            : default(SingleInterestTargetingOptionResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get lead form questions
        /// </summary>
        /// <remarks>Get a list of all lead form question type names. Some questions might not be used.  &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/getting-started/beta-and-advanced-access/&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;</remarks>
        /// <response code="200">Success</response>
        /// <response code="0">Unexpected error</response>
        [HttpGet]
        [Route("/v5/resources/lead_form_questions")]
        [ValidateModelState]
        [SwaggerOperation("LeadFormQuestionsGet")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "Unexpected error")]
        public virtual IActionResult LeadFormQuestionsGet()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(Error));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Get metrics ready state
        /// </summary>
        /// <remarks>Learn whether conversion or non-conversion metrics are finalized and ready to query.</remarks>
        /// <param name="date">Analytics reports request date (UTC). Format: YYYY-MM-DD</param>
        /// <response code="200">Success</response>
        /// <response code="0">Unexpected error</response>
        [HttpGet]
        [Route("/v5/resources/metrics_ready_state")]
        [ValidateModelState]
        [SwaggerOperation("MetricsReadyStateGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(BookClosedResponse), description: "Success")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "Unexpected error")]
        public virtual IActionResult MetricsReadyStateGet([FromQuery (Name = "date")][Required()][RegularExpression("^(\\d{4})-(\\d{2})-(\\d{2})$")]string date)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(BookClosedResponse));
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(Error));
            string exampleJson = null;
            exampleJson = "{\n  \"conversion_metrics_ready\" : false,\n  \"non_conversion_metrics_ready\" : false\n}";
            exampleJson = "{\n  \"code\" : 0,\n  \"message\" : \"message\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<BookClosedResponse>(exampleJson)
            : default(BookClosedResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get targeting options
        /// </summary>
        /// <remarks>&lt;p&gt;You can use targeting values in ads placement to define your intended audience. &lt;/p&gt; &lt;p&gt;Targeting metrics are organized around targeting specifications.&lt;/p&gt; &lt;p&gt;For more information on ads targeting, see &lt;a class&#x3D;\&quot;reference external\&quot; href&#x3D;\&quot;https://help.pinterest.com/en/business/article/audience-targeting\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Audience targeting&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;b&gt;Sample return:&lt;/b&gt;&lt;/p&gt; &lt;pre class&#x3D;\&quot;literal-block\&quot;&gt; [{&amp;quot;36313&amp;quot;: &amp;quot;Australia: Moreton Bay - North&amp;quot;, &amp;quot;124735&amp;quot;: &amp;quot;Canada: North Battleford&amp;quot;, &amp;quot;36109&amp;quot;: &amp;quot;Australia: Murray&amp;quot;, &amp;quot;36108&amp;quot;: &amp;quot;Australia: Mid North Coast&amp;quot;, &amp;quot;36101&amp;quot;: &amp;quot;Australia: Capital Region&amp;quot;, &amp;quot;811&amp;quot;: &amp;quot;U.S.: Reno&amp;quot;, &amp;quot;36103&amp;quot;: &amp;quot;Australia: Central West&amp;quot;, &amp;quot;36102&amp;quot;: &amp;quot;Australia: Central Coast&amp;quot;, &amp;quot;36105&amp;quot;: &amp;quot;Australia: Far West and Orana&amp;quot;, &amp;quot;36104&amp;quot;: &amp;quot;Australia: Coffs Harbour - Grafton&amp;quot;, &amp;quot;36107&amp;quot;: &amp;quot;Australia: Illawarra&amp;quot;, &amp;quot;36106&amp;quot;: &amp;quot;Australia: Hunter Valley Exc Newcastle&amp;quot;, &amp;quot;554017&amp;quot;: &amp;quot;New Zealand: Wanganui&amp;quot;, &amp;quot;554016&amp;quot;: &amp;quot;New Zealand: Marlborough&amp;quot;, &amp;quot;554015&amp;quot;: &amp;quot;New Zealand: Gisborne&amp;quot;, &amp;quot;554014&amp;quot;: &amp;quot;New Zealand: Tararua&amp;quot;, &amp;quot;554013&amp;quot;: &amp;quot;New Zealand: Invercargill&amp;quot;, &amp;quot;GR&amp;quot;: &amp;quot;Greece&amp;quot;, &amp;quot;554011&amp;quot;: &amp;quot;New Zealand: Whangarei&amp;quot;, &amp;quot;554010&amp;quot;: &amp;quot;New Zealand: Far North&amp;quot;, &amp;quot;717&amp;quot;: &amp;quot;U.S.: Quincy-Hannibal-Keokuk&amp;quot;, &amp;quot;716&amp;quot;: &amp;quot;U.S.: Baton Rouge&amp;quot;,...}] &lt;/pre&gt;</remarks>
        /// <param name="targetingType">Public targeting type.</param>
        /// <param name="clientId">Client ID.</param>
        /// <param name="oauthSignature">Oauth signature</param>
        /// <param name="timestamp">Timestamp</param>
        /// <param name="adAccountId">Unique identifier of an ad account.</param>
        /// <response code="200">Success</response>
        /// <response code="0">Unexpected error</response>
        [HttpGet]
        [Route("/v5/resources/targeting/{targeting_type}")]
        [ValidateModelState]
        [SwaggerOperation("TargetingOptionsGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Object>), description: "Success")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "Unexpected error")]
        public virtual IActionResult TargetingOptionsGet([FromRoute (Name = "targeting_type")][Required]string targetingType, [FromQuery (Name = "client_id")][RegularExpression("^\\d+$")] [MaxLength(18)]string clientId, [FromQuery (Name = "oauth_signature")]string oauthSignature, [FromQuery (Name = "timestamp")][RegularExpression("\\d+")]string timestamp, [FromQuery (Name = "ad_account_id")][RegularExpression("^\\d+$")] [MaxLength(18)]string adAccountId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Object>));
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(Error));
            string exampleJson = null;
            exampleJson = "[ {\n  \"36313\" : \"Australia: Moreton Bay - North\",\n  \"124735\" : \"Canada: North Battleford\"\n}, {\n  \"36313\" : \"Australia: Moreton Bay - North\",\n  \"124735\" : \"Canada: North Battleford\"\n} ]";
            exampleJson = "{\n  \"code\" : 0,\n  \"message\" : \"message\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<Object>>(exampleJson)
            : default(List<Object>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
