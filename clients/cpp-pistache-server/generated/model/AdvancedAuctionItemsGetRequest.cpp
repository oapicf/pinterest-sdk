/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "AdvancedAuctionItemsGetRequest.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

AdvancedAuctionItemsGetRequest::AdvancedAuctionItemsGetRequest()
{
    m_Catalog_id = "";
    
}

void AdvancedAuctionItemsGetRequest::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool AdvancedAuctionItemsGetRequest::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool AdvancedAuctionItemsGetRequest::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "AdvancedAuctionItemsGetRequest" : pathPrefix;

         
    
    /* Catalog_id */ {
        const std::string& value = m_Catalog_id;
        const std::string currentValuePath = _pathPrefix + ".catalogId";
                
        

    }
         
    
    /* Items */ {
        const std::vector<org::openapitools::server::model::AdvancedAuctionItemsGetRecord>& value = m_Items;
        const std::string currentValuePath = _pathPrefix + ".items";
                
        
        if (value.size() < 1)
        {
            success = false;
            msg << currentValuePath << ": must have at least 1 elements;";
        }
        if (value.size() > 10000)
        {
            success = false;
            msg << currentValuePath << ": must have at most 10000 elements;";
        }
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::AdvancedAuctionItemsGetRecord& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".items") && success;
 
                i++;
            }
        }

    }
    
    return success;
}

bool AdvancedAuctionItemsGetRequest::operator==(const AdvancedAuctionItemsGetRequest& rhs) const
{
    return
    
    
    (getCatalogId() == rhs.getCatalogId())
     &&
    
    (getItems() == rhs.getItems())
    
    
    ;
}

bool AdvancedAuctionItemsGetRequest::operator!=(const AdvancedAuctionItemsGetRequest& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const AdvancedAuctionItemsGetRequest& o)
{
    j = nlohmann::json::object();
    j["catalog_id"] = o.m_Catalog_id;
    j["items"] = o.m_Items;
    
}

void from_json(const nlohmann::json& j, AdvancedAuctionItemsGetRequest& o)
{
    j.at("catalog_id").get_to(o.m_Catalog_id);
    j.at("items").get_to(o.m_Items);
    
}

std::string AdvancedAuctionItemsGetRequest::getCatalogId() const
{
    return m_Catalog_id;
}
void AdvancedAuctionItemsGetRequest::setCatalogId(std::string const& value)
{
    m_Catalog_id = value;
}
std::vector<org::openapitools::server::model::AdvancedAuctionItemsGetRecord> AdvancedAuctionItemsGetRequest::getItems() const
{
    return m_Items;
}
void AdvancedAuctionItemsGetRequest::setItems(std::vector<org::openapitools::server::model::AdvancedAuctionItemsGetRecord> const& value)
{
    m_Items = value;
}


} // namespace org::openapitools::server::model

