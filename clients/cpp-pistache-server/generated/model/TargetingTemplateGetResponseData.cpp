/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "TargetingTemplateGetResponseData.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

TargetingTemplateGetResponseData::TargetingTemplateGetResponseData()
{
    m_Name = "";
    m_NameIsSet = false;
    m_Auto_targeting_enabled = true;
    m_Auto_targeting_enabledIsSet = false;
    m_Targeting_attributesIsSet = false;
    m_Placement_groupIsSet = false;
    m_KeywordsIsSet = false;
    m_Tracking_urlsIsSet = false;
    m_Id = "";
    m_IdIsSet = false;
    m_Created_time = 0;
    m_Created_timeIsSet = false;
    m_Updated_time = 0;
    m_Updated_timeIsSet = false;
    m_Ad_account_id = "";
    m_Ad_account_idIsSet = false;
    m_Status = "ACTIVE";
    m_StatusIsSet = false;
    m_SizingIsSet = false;
    m_Valid = false;
    m_ValidIsSet = false;
    
}

void TargetingTemplateGetResponseData::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool TargetingTemplateGetResponseData::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool TargetingTemplateGetResponseData::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "TargetingTemplateGetResponseData" : pathPrefix;

                         
    if (keywordsIsSet())
    {
        const std::vector<org::openapitools::server::model::TargetingTemplateKeyword>& value = m_Keywords;
        const std::string currentValuePath = _pathPrefix + ".keywords";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::TargetingTemplateKeyword& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".keywords") && success;
 
                i++;
            }
        }

    }
             
    if (idIsSet())
    {
        const std::string& value = m_Id;
        const std::string currentValuePath = _pathPrefix + ".id";
                
        

    }
                 
    if (adAccountIdIsSet())
    {
        const std::string& value = m_Ad_account_id;
        const std::string currentValuePath = _pathPrefix + ".adAccountId";
                
        

    }
                
    return success;
}

bool TargetingTemplateGetResponseData::operator==(const TargetingTemplateGetResponseData& rhs) const
{
    return
    
    
    
    ((!nameIsSet() && !rhs.nameIsSet()) || (nameIsSet() && rhs.nameIsSet() && getName() == rhs.getName())) &&
    
    
    ((!autoTargetingEnabledIsSet() && !rhs.autoTargetingEnabledIsSet()) || (autoTargetingEnabledIsSet() && rhs.autoTargetingEnabledIsSet() && isAutoTargetingEnabled() == rhs.isAutoTargetingEnabled())) &&
    
    
    ((!targetingAttributesIsSet() && !rhs.targetingAttributesIsSet()) || (targetingAttributesIsSet() && rhs.targetingAttributesIsSet() && getTargetingAttributes() == rhs.getTargetingAttributes())) &&
    
    
    ((!placementGroupIsSet() && !rhs.placementGroupIsSet()) || (placementGroupIsSet() && rhs.placementGroupIsSet() && getPlacementGroup() == rhs.getPlacementGroup())) &&
    
    
    ((!keywordsIsSet() && !rhs.keywordsIsSet()) || (keywordsIsSet() && rhs.keywordsIsSet() && getKeywords() == rhs.getKeywords())) &&
    
    
    ((!trackingUrlsIsSet() && !rhs.trackingUrlsIsSet()) || (trackingUrlsIsSet() && rhs.trackingUrlsIsSet() && getTrackingUrls() == rhs.getTrackingUrls())) &&
    
    
    ((!idIsSet() && !rhs.idIsSet()) || (idIsSet() && rhs.idIsSet() && getId() == rhs.getId())) &&
    
    
    ((!createdTimeIsSet() && !rhs.createdTimeIsSet()) || (createdTimeIsSet() && rhs.createdTimeIsSet() && getCreatedTime() == rhs.getCreatedTime())) &&
    
    
    ((!updatedTimeIsSet() && !rhs.updatedTimeIsSet()) || (updatedTimeIsSet() && rhs.updatedTimeIsSet() && getUpdatedTime() == rhs.getUpdatedTime())) &&
    
    
    ((!adAccountIdIsSet() && !rhs.adAccountIdIsSet()) || (adAccountIdIsSet() && rhs.adAccountIdIsSet() && getAdAccountId() == rhs.getAdAccountId())) &&
    
    
    ((!statusIsSet() && !rhs.statusIsSet()) || (statusIsSet() && rhs.statusIsSet() && getStatus() == rhs.getStatus())) &&
    
    
    ((!sizingIsSet() && !rhs.sizingIsSet()) || (sizingIsSet() && rhs.sizingIsSet() && getSizing() == rhs.getSizing())) &&
    
    
    ((!validIsSet() && !rhs.validIsSet()) || (validIsSet() && rhs.validIsSet() && isValid() == rhs.isValid()))
    
    ;
}

bool TargetingTemplateGetResponseData::operator!=(const TargetingTemplateGetResponseData& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const TargetingTemplateGetResponseData& o)
{
    j = nlohmann::json::object();
    if(o.nameIsSet())
        j["name"] = o.m_Name;
    if(o.autoTargetingEnabledIsSet())
        j["auto_targeting_enabled"] = o.m_Auto_targeting_enabled;
    if(o.targetingAttributesIsSet())
        j["targeting_attributes"] = o.m_Targeting_attributes;
    if(o.placementGroupIsSet())
        j["placement_group"] = o.m_Placement_group;
    if(o.keywordsIsSet() || !o.m_Keywords.empty())
        j["keywords"] = o.m_Keywords;
    if(o.trackingUrlsIsSet())
        j["tracking_urls"] = o.m_Tracking_urls;
    if(o.idIsSet())
        j["id"] = o.m_Id;
    if(o.createdTimeIsSet())
        j["created_time"] = o.m_Created_time;
    if(o.updatedTimeIsSet())
        j["updated_time"] = o.m_Updated_time;
    if(o.adAccountIdIsSet())
        j["ad_account_id"] = o.m_Ad_account_id;
    if(o.statusIsSet())
        j["status"] = o.m_Status;
    if(o.sizingIsSet())
        j["sizing"] = o.m_Sizing;
    if(o.validIsSet())
        j["valid"] = o.m_Valid;
    
}

void from_json(const nlohmann::json& j, TargetingTemplateGetResponseData& o)
{
    if(j.find("name") != j.end())
    {
        j.at("name").get_to(o.m_Name);
        o.m_NameIsSet = true;
    } 
    if(j.find("auto_targeting_enabled") != j.end())
    {
        j.at("auto_targeting_enabled").get_to(o.m_Auto_targeting_enabled);
        o.m_Auto_targeting_enabledIsSet = true;
    } 
    if(j.find("targeting_attributes") != j.end())
    {
        j.at("targeting_attributes").get_to(o.m_Targeting_attributes);
        o.m_Targeting_attributesIsSet = true;
    } 
    if(j.find("placement_group") != j.end())
    {
        j.at("placement_group").get_to(o.m_Placement_group);
        o.m_Placement_groupIsSet = true;
    } 
    if(j.find("keywords") != j.end())
    {
        j.at("keywords").get_to(o.m_Keywords);
        o.m_KeywordsIsSet = true;
    } 
    if(j.find("tracking_urls") != j.end())
    {
        j.at("tracking_urls").get_to(o.m_Tracking_urls);
        o.m_Tracking_urlsIsSet = true;
    } 
    if(j.find("id") != j.end())
    {
        j.at("id").get_to(o.m_Id);
        o.m_IdIsSet = true;
    } 
    if(j.find("created_time") != j.end())
    {
        j.at("created_time").get_to(o.m_Created_time);
        o.m_Created_timeIsSet = true;
    } 
    if(j.find("updated_time") != j.end())
    {
        j.at("updated_time").get_to(o.m_Updated_time);
        o.m_Updated_timeIsSet = true;
    } 
    if(j.find("ad_account_id") != j.end())
    {
        j.at("ad_account_id").get_to(o.m_Ad_account_id);
        o.m_Ad_account_idIsSet = true;
    } 
    if(j.find("status") != j.end())
    {
        j.at("status").get_to(o.m_Status);
        o.m_StatusIsSet = true;
    } 
    if(j.find("sizing") != j.end())
    {
        j.at("sizing").get_to(o.m_Sizing);
        o.m_SizingIsSet = true;
    } 
    if(j.find("valid") != j.end())
    {
        j.at("valid").get_to(o.m_Valid);
        o.m_ValidIsSet = true;
    } 
    
}

std::string TargetingTemplateGetResponseData::getName() const
{
    return m_Name;
}
void TargetingTemplateGetResponseData::setName(std::string const& value)
{
    m_Name = value;
    m_NameIsSet = true;
}
bool TargetingTemplateGetResponseData::nameIsSet() const
{
    return m_NameIsSet;
}
void TargetingTemplateGetResponseData::unsetName()
{
    m_NameIsSet = false;
}
bool TargetingTemplateGetResponseData::isAutoTargetingEnabled() const
{
    return m_Auto_targeting_enabled;
}
void TargetingTemplateGetResponseData::setAutoTargetingEnabled(bool const value)
{
    m_Auto_targeting_enabled = value;
    m_Auto_targeting_enabledIsSet = true;
}
bool TargetingTemplateGetResponseData::autoTargetingEnabledIsSet() const
{
    return m_Auto_targeting_enabledIsSet;
}
void TargetingTemplateGetResponseData::unsetAuto_targeting_enabled()
{
    m_Auto_targeting_enabledIsSet = false;
}
org::openapitools::server::model::TargetingSpec TargetingTemplateGetResponseData::getTargetingAttributes() const
{
    return m_Targeting_attributes;
}
void TargetingTemplateGetResponseData::setTargetingAttributes(org::openapitools::server::model::TargetingSpec const& value)
{
    m_Targeting_attributes = value;
    m_Targeting_attributesIsSet = true;
}
bool TargetingTemplateGetResponseData::targetingAttributesIsSet() const
{
    return m_Targeting_attributesIsSet;
}
void TargetingTemplateGetResponseData::unsetTargeting_attributes()
{
    m_Targeting_attributesIsSet = false;
}
org::openapitools::server::model::PlacementGroupType TargetingTemplateGetResponseData::getPlacementGroup() const
{
    return m_Placement_group;
}
void TargetingTemplateGetResponseData::setPlacementGroup(org::openapitools::server::model::PlacementGroupType const& value)
{
    m_Placement_group = value;
    m_Placement_groupIsSet = true;
}
bool TargetingTemplateGetResponseData::placementGroupIsSet() const
{
    return m_Placement_groupIsSet;
}
void TargetingTemplateGetResponseData::unsetPlacement_group()
{
    m_Placement_groupIsSet = false;
}
std::vector<org::openapitools::server::model::TargetingTemplateKeyword> TargetingTemplateGetResponseData::getKeywords() const
{
    return m_Keywords;
}
void TargetingTemplateGetResponseData::setKeywords(std::vector<org::openapitools::server::model::TargetingTemplateKeyword> const& value)
{
    m_Keywords = value;
    m_KeywordsIsSet = true;
}
bool TargetingTemplateGetResponseData::keywordsIsSet() const
{
    return m_KeywordsIsSet;
}
void TargetingTemplateGetResponseData::unsetKeywords()
{
    m_KeywordsIsSet = false;
}
org::openapitools::server::model::TrackingUrls TargetingTemplateGetResponseData::getTrackingUrls() const
{
    return m_Tracking_urls;
}
void TargetingTemplateGetResponseData::setTrackingUrls(org::openapitools::server::model::TrackingUrls const& value)
{
    m_Tracking_urls = value;
    m_Tracking_urlsIsSet = true;
}
bool TargetingTemplateGetResponseData::trackingUrlsIsSet() const
{
    return m_Tracking_urlsIsSet;
}
void TargetingTemplateGetResponseData::unsetTracking_urls()
{
    m_Tracking_urlsIsSet = false;
}
std::string TargetingTemplateGetResponseData::getId() const
{
    return m_Id;
}
void TargetingTemplateGetResponseData::setId(std::string const& value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool TargetingTemplateGetResponseData::idIsSet() const
{
    return m_IdIsSet;
}
void TargetingTemplateGetResponseData::unsetId()
{
    m_IdIsSet = false;
}
int32_t TargetingTemplateGetResponseData::getCreatedTime() const
{
    return m_Created_time;
}
void TargetingTemplateGetResponseData::setCreatedTime(int32_t const value)
{
    m_Created_time = value;
    m_Created_timeIsSet = true;
}
bool TargetingTemplateGetResponseData::createdTimeIsSet() const
{
    return m_Created_timeIsSet;
}
void TargetingTemplateGetResponseData::unsetCreated_time()
{
    m_Created_timeIsSet = false;
}
int32_t TargetingTemplateGetResponseData::getUpdatedTime() const
{
    return m_Updated_time;
}
void TargetingTemplateGetResponseData::setUpdatedTime(int32_t const value)
{
    m_Updated_time = value;
    m_Updated_timeIsSet = true;
}
bool TargetingTemplateGetResponseData::updatedTimeIsSet() const
{
    return m_Updated_timeIsSet;
}
void TargetingTemplateGetResponseData::unsetUpdated_time()
{
    m_Updated_timeIsSet = false;
}
std::string TargetingTemplateGetResponseData::getAdAccountId() const
{
    return m_Ad_account_id;
}
void TargetingTemplateGetResponseData::setAdAccountId(std::string const& value)
{
    m_Ad_account_id = value;
    m_Ad_account_idIsSet = true;
}
bool TargetingTemplateGetResponseData::adAccountIdIsSet() const
{
    return m_Ad_account_idIsSet;
}
void TargetingTemplateGetResponseData::unsetAd_account_id()
{
    m_Ad_account_idIsSet = false;
}
std::string TargetingTemplateGetResponseData::getStatus() const
{
    return m_Status;
}
void TargetingTemplateGetResponseData::setStatus(std::string const& value)
{
    m_Status = value;
    m_StatusIsSet = true;
}
bool TargetingTemplateGetResponseData::statusIsSet() const
{
    return m_StatusIsSet;
}
void TargetingTemplateGetResponseData::unsetStatus()
{
    m_StatusIsSet = false;
}
org::openapitools::server::model::TargetingTemplateAudienceSizing TargetingTemplateGetResponseData::getSizing() const
{
    return m_Sizing;
}
void TargetingTemplateGetResponseData::setSizing(org::openapitools::server::model::TargetingTemplateAudienceSizing const& value)
{
    m_Sizing = value;
    m_SizingIsSet = true;
}
bool TargetingTemplateGetResponseData::sizingIsSet() const
{
    return m_SizingIsSet;
}
void TargetingTemplateGetResponseData::unsetSizing()
{
    m_SizingIsSet = false;
}
bool TargetingTemplateGetResponseData::isValid() const
{
    return m_Valid;
}
void TargetingTemplateGetResponseData::setValid(bool const value)
{
    m_Valid = value;
    m_ValidIsSet = true;
}
bool TargetingTemplateGetResponseData::validIsSet() const
{
    return m_ValidIsSet;
}
void TargetingTemplateGetResponseData::unsetValid()
{
    m_ValidIsSet = false;
}


} // namespace org::openapitools::server::model

