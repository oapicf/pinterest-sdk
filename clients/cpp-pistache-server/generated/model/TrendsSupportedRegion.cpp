/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "TrendsSupportedRegion.h"
#include "Helpers.h"
#include <stdexcept>
#include <sstream>

namespace org::openapitools::server::model
{

TrendsSupportedRegion::TrendsSupportedRegion()
{
    
}

void TrendsSupportedRegion::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool TrendsSupportedRegion::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool TrendsSupportedRegion::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "TrendsSupportedRegion" : pathPrefix;

    
    if (m_value == TrendsSupportedRegion::eTrendsSupportedRegion::INVALID_VALUE_OPENAPI_GENERATED)
    {
        success = false;
        msg << _pathPrefix << ": has no value;";
    }

    return success;
}

bool TrendsSupportedRegion::operator==(const TrendsSupportedRegion& rhs) const
{
    return
    getValue() == rhs.getValue()
    
    ;
}

bool TrendsSupportedRegion::operator!=(const TrendsSupportedRegion& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const TrendsSupportedRegion& o)
{
    j = nlohmann::json::object();
    
    switch (o.getValue())
    {
        case TrendsSupportedRegion::eTrendsSupportedRegion::INVALID_VALUE_OPENAPI_GENERATED:
            j = "INVALID_VALUE_OPENAPI_GENERATED";
            break;
        case TrendsSupportedRegion::eTrendsSupportedRegion::US:
            j = "US";
            break;
        case TrendsSupportedRegion::eTrendsSupportedRegion::CA:
            j = "CA";
            break;
        case TrendsSupportedRegion::eTrendsSupportedRegion::DE:
            j = "DE";
            break;
        case TrendsSupportedRegion::eTrendsSupportedRegion::FR:
            j = "FR";
            break;
        case TrendsSupportedRegion::eTrendsSupportedRegion::ES:
            j = "ES";
            break;
        case TrendsSupportedRegion::eTrendsSupportedRegion::IT:
            j = "IT";
            break;
        case TrendsSupportedRegion::eTrendsSupportedRegion::DE_AT_CH:
            j = "DE+AT+CH";
            break;
        case TrendsSupportedRegion::eTrendsSupportedRegion::GB_IE:
            j = "GB+IE";
            break;
        case TrendsSupportedRegion::eTrendsSupportedRegion::IT_ES_PT_GR_MT:
            j = "IT+ES+PT+GR+MT";
            break;
        case TrendsSupportedRegion::eTrendsSupportedRegion::PL_RO_HU_SK_CZ:
            j = "PL+RO+HU+SK+CZ";
            break;
        case TrendsSupportedRegion::eTrendsSupportedRegion::SE_DK_FI_NO:
            j = "SE+DK+FI+NO";
            break;
        case TrendsSupportedRegion::eTrendsSupportedRegion::NL_BE_LU:
            j = "NL+BE+LU";
            break;
        case TrendsSupportedRegion::eTrendsSupportedRegion::AR:
            j = "AR";
            break;
        case TrendsSupportedRegion::eTrendsSupportedRegion::BR:
            j = "BR";
            break;
        case TrendsSupportedRegion::eTrendsSupportedRegion::CO:
            j = "CO";
            break;
        case TrendsSupportedRegion::eTrendsSupportedRegion::MX:
            j = "MX";
            break;
        case TrendsSupportedRegion::eTrendsSupportedRegion::MX_AR_CO_CL:
            j = "MX+AR+CO+CL";
            break;
        case TrendsSupportedRegion::eTrendsSupportedRegion::AU_NZ:
            j = "AU+NZ";
            break;
    }
}

void from_json(const nlohmann::json& j, TrendsSupportedRegion& o)
{
    
    auto s = j.get<std::string>();
    if (s == "US") {
     o.setValue(TrendsSupportedRegion::eTrendsSupportedRegion::US);
    } 
    else if (s == "CA") {
     o.setValue(TrendsSupportedRegion::eTrendsSupportedRegion::CA);
    } 
    else if (s == "DE") {
     o.setValue(TrendsSupportedRegion::eTrendsSupportedRegion::DE);
    } 
    else if (s == "FR") {
     o.setValue(TrendsSupportedRegion::eTrendsSupportedRegion::FR);
    } 
    else if (s == "ES") {
     o.setValue(TrendsSupportedRegion::eTrendsSupportedRegion::ES);
    } 
    else if (s == "IT") {
     o.setValue(TrendsSupportedRegion::eTrendsSupportedRegion::IT);
    } 
    else if (s == "DE+AT+CH") {
     o.setValue(TrendsSupportedRegion::eTrendsSupportedRegion::DE_AT_CH);
    } 
    else if (s == "GB+IE") {
     o.setValue(TrendsSupportedRegion::eTrendsSupportedRegion::GB_IE);
    } 
    else if (s == "IT+ES+PT+GR+MT") {
     o.setValue(TrendsSupportedRegion::eTrendsSupportedRegion::IT_ES_PT_GR_MT);
    } 
    else if (s == "PL+RO+HU+SK+CZ") {
     o.setValue(TrendsSupportedRegion::eTrendsSupportedRegion::PL_RO_HU_SK_CZ);
    } 
    else if (s == "SE+DK+FI+NO") {
     o.setValue(TrendsSupportedRegion::eTrendsSupportedRegion::SE_DK_FI_NO);
    } 
    else if (s == "NL+BE+LU") {
     o.setValue(TrendsSupportedRegion::eTrendsSupportedRegion::NL_BE_LU);
    } 
    else if (s == "AR") {
     o.setValue(TrendsSupportedRegion::eTrendsSupportedRegion::AR);
    } 
    else if (s == "BR") {
     o.setValue(TrendsSupportedRegion::eTrendsSupportedRegion::BR);
    } 
    else if (s == "CO") {
     o.setValue(TrendsSupportedRegion::eTrendsSupportedRegion::CO);
    } 
    else if (s == "MX") {
     o.setValue(TrendsSupportedRegion::eTrendsSupportedRegion::MX);
    } 
    else if (s == "MX+AR+CO+CL") {
     o.setValue(TrendsSupportedRegion::eTrendsSupportedRegion::MX_AR_CO_CL);
    } 
    else if (s == "AU+NZ") {
     o.setValue(TrendsSupportedRegion::eTrendsSupportedRegion::AU_NZ);
    }  else {
     std::stringstream ss;
     ss << "Unexpected value " << s << " in json"
        << " cannot be converted to enum of type"
        << " TrendsSupportedRegion::eTrendsSupportedRegion";
     throw std::invalid_argument(ss.str());
    } 

}

TrendsSupportedRegion::eTrendsSupportedRegion TrendsSupportedRegion::getValue() const
{
    return m_value;
}
void TrendsSupportedRegion::setValue(TrendsSupportedRegion::eTrendsSupportedRegion value)
{
    m_value = value;
}

} // namespace org::openapitools::server::model

