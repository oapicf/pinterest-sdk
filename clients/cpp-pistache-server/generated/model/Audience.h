/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * Audience.h
 *
 * 
 */

#ifndef Audience_H_
#define Audience_H_


#include "AudienceRule.h"
#include <string>
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// 
/// </summary>
class  Audience
{
public:
    Audience();
    virtual ~Audience() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const Audience& rhs) const;
    bool operator!=(const Audience& rhs) const;

    /////////////////////////////////////////////
    /// Audience members

    /// <summary>
    /// Ad account ID.
    /// </summary>
    std::string getAdAccountId() const;
    void setAdAccountId(std::string const& value);
    bool adAccountIdIsSet() const;
    void unsetAd_account_id();
    /// <summary>
    /// Audience ID.
    /// </summary>
    std::string getId() const;
    void setId(std::string const& value);
    bool idIsSet() const;
    void unsetId();
    /// <summary>
    /// Audience name.
    /// </summary>
    std::string getName() const;
    void setName(std::string const& value);
    bool nameIsSet() const;
    void unsetName();
    /// <summary>
    /// &lt;a href&#x3D;\&quot;/docs/reference/glossary/#Audience Types\&quot;&gt;Audience types&lt;/a&gt;: ACTALIKE, ENGAGEMENT, CUSTOMER_LIST and VISITOR
    /// </summary>
    std::string getAudienceType() const;
    void setAudienceType(std::string const& value);
    bool audienceTypeIsSet() const;
    void unsetAudience_type();
    /// <summary>
    /// Audience description.
    /// </summary>
    std::string getDescription() const;
    void setDescription(std::string const& value);
    bool descriptionIsSet() const;
    void unsetDescription();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::AudienceRule getRule() const;
    void setRule(org::openapitools::server::model::AudienceRule const& value);
    bool ruleIsSet() const;
    void unsetRule();
    /// <summary>
    /// Audience size.
    /// </summary>
    int32_t getSize() const;
    void setSize(int32_t const value);
    bool sizeIsSet() const;
    void unsetSize();
    /// <summary>
    /// Audience status. READY, INITIALIZING, TOO_SMALL - Each audience list needs to have at least 100 people with Pinterest accounts before you can start using it.
    /// </summary>
    std::string getStatus() const;
    void setStatus(std::string const& value);
    bool statusIsSet() const;
    void unsetStatus();
    /// <summary>
    /// Always \&quot;audience\&quot;.
    /// </summary>
    std::string getType() const;
    void setType(std::string const& value);
    bool typeIsSet() const;
    void unsetType();
    /// <summary>
    /// Creation time. Unix timestamp in seconds.
    /// </summary>
    int32_t getCreatedTimestamp() const;
    void setCreatedTimestamp(int32_t const value);
    bool createdTimestampIsSet() const;
    void unsetCreated_timestamp();
    /// <summary>
    /// Last update time. Unix timestamp in seconds.
    /// </summary>
    int32_t getUpdatedTimestamp() const;
    void setUpdatedTimestamp(int32_t const value);
    bool updatedTimestampIsSet() const;
    void unsetUpdated_timestamp();

    friend  void to_json(nlohmann::json& j, const Audience& o);
    friend  void from_json(const nlohmann::json& j, Audience& o);
protected:
    std::string m_Ad_account_id;
    bool m_Ad_account_idIsSet;
    std::string m_Id;
    bool m_IdIsSet;
    std::string m_Name;
    bool m_NameIsSet;
    std::string m_Audience_type;
    bool m_Audience_typeIsSet;
    std::string m_Description;
    bool m_DescriptionIsSet;
    org::openapitools::server::model::AudienceRule m_Rule;
    bool m_RuleIsSet;
    int32_t m_Size;
    bool m_SizeIsSet;
    std::string m_Status;
    bool m_StatusIsSet;
    std::string m_Type;
    bool m_TypeIsSet;
    int32_t m_Created_timestamp;
    bool m_Created_timestampIsSet;
    int32_t m_Updated_timestamp;
    bool m_Updated_timestampIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* Audience_H_ */
