/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * CatalogsCreativeAssetsItemsBatch.h
 *
 * Object describing the catalogs creative assets items batch
 */

#ifndef CatalogsCreativeAssetsItemsBatch_H_
#define CatalogsCreativeAssetsItemsBatch_H_


#include <string>
#include "CreativeAssetsProcessingRecord.h"
#include <vector>
#include "BatchOperationStatus.h"
#include "CatalogsType.h"
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// Object describing the catalogs creative assets items batch
/// </summary>
class  CatalogsCreativeAssetsItemsBatch
{
public:
    CatalogsCreativeAssetsItemsBatch();
    virtual ~CatalogsCreativeAssetsItemsBatch() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const CatalogsCreativeAssetsItemsBatch& rhs) const;
    bool operator!=(const CatalogsCreativeAssetsItemsBatch& rhs) const;

    /////////////////////////////////////////////
    /// CatalogsCreativeAssetsItemsBatch members

    /// <summary>
    /// Id of the catalogs items batch
    /// </summary>
    std::string getBatchId() const;
    void setBatchId(std::string const& value);
    bool batchIdIsSet() const;
    void unsetBatch_id();
    /// <summary>
    /// Date and time (UTC) of the batch creation: YYYY-MM-DD&#39;T&#39;hh:mm:ss
    /// </summary>
    std::string getCreatedTime() const;
    void setCreatedTime(std::string const& value);
    bool createdTimeIsSet() const;
    void unsetCreated_time();
    /// <summary>
    /// Date and time (UTC) of the batch completion: YYYY-MM-DD&#39;T&#39;hh:mm:ss
    /// </summary>
    std::string getCompletedTime() const;
    void setCompletedTime(std::string const& value);
    bool completedTimeIsSet() const;
    void unsetCompleted_time();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::BatchOperationStatus getStatus() const;
    void setStatus(org::openapitools::server::model::BatchOperationStatus const& value);
    bool statusIsSet() const;
    void unsetStatus();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::CatalogsType getCatalogType() const;
    void setCatalogType(org::openapitools::server::model::CatalogsType const& value);
    /// <summary>
    /// Array with the catalogs items processing records part of the catalogs items batch
    /// </summary>
    std::vector<org::openapitools::server::model::CreativeAssetsProcessingRecord> getItems() const;
    void setItems(std::vector<org::openapitools::server::model::CreativeAssetsProcessingRecord> const& value);
    bool itemsIsSet() const;
    void unsetItems();

    friend  void to_json(nlohmann::json& j, const CatalogsCreativeAssetsItemsBatch& o);
    friend  void from_json(const nlohmann::json& j, CatalogsCreativeAssetsItemsBatch& o);
protected:
    std::string m_Batch_id;
    bool m_Batch_idIsSet;
    std::string m_Created_time;
    bool m_Created_timeIsSet;
    std::string m_Completed_time;
    bool m_Completed_timeIsSet;
    org::openapitools::server::model::BatchOperationStatus m_Status;
    bool m_StatusIsSet;
    org::openapitools::server::model::CatalogsType m_Catalog_type;

    std::vector<org::openapitools::server::model::CreativeAssetsProcessingRecord> m_Items;
    bool m_ItemsIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* CatalogsCreativeAssetsItemsBatch_H_ */
