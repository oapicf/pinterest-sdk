/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "PinMediaSourceImageURL.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

PinMediaSourceImageURL::PinMediaSourceImageURL()
{
    m_Source_type = "";
    m_Url = "";
    m_Is_standard = true;
    m_Is_standardIsSet = false;
    
}

void PinMediaSourceImageURL::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool PinMediaSourceImageURL::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool PinMediaSourceImageURL::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "PinMediaSourceImageURL" : pathPrefix;

                
    return success;
}

bool PinMediaSourceImageURL::operator==(const PinMediaSourceImageURL& rhs) const
{
    return
    
    
    (getSourceType() == rhs.getSourceType())
     &&
    
    (getUrl() == rhs.getUrl())
     &&
    
    
    ((!isStandardIsSet() && !rhs.isStandardIsSet()) || (isStandardIsSet() && rhs.isStandardIsSet() && isIsStandard() == rhs.isIsStandard()))
    
    ;
}

bool PinMediaSourceImageURL::operator!=(const PinMediaSourceImageURL& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const PinMediaSourceImageURL& o)
{
    j = nlohmann::json::object();
    j["source_type"] = o.m_Source_type;
    j["url"] = o.m_Url;
    if(o.isStandardIsSet())
        j["is_standard"] = o.m_Is_standard;
    
}

void from_json(const nlohmann::json& j, PinMediaSourceImageURL& o)
{
    j.at("source_type").get_to(o.m_Source_type);
    j.at("url").get_to(o.m_Url);
    if(j.find("is_standard") != j.end())
    {
        j.at("is_standard").get_to(o.m_Is_standard);
        o.m_Is_standardIsSet = true;
    } 
    
}

std::string PinMediaSourceImageURL::getSourceType() const
{
    return m_Source_type;
}
void PinMediaSourceImageURL::setSourceType(std::string const& value)
{
    m_Source_type = value;
}
std::string PinMediaSourceImageURL::getUrl() const
{
    return m_Url;
}
void PinMediaSourceImageURL::setUrl(std::string const& value)
{
    m_Url = value;
}
bool PinMediaSourceImageURL::isIsStandard() const
{
    return m_Is_standard;
}
void PinMediaSourceImageURL::setIsStandard(bool const value)
{
    m_Is_standard = value;
    m_Is_standardIsSet = true;
}
bool PinMediaSourceImageURL::isStandardIsSet() const
{
    return m_Is_standardIsSet;
}
void PinMediaSourceImageURL::unsetIs_standard()
{
    m_Is_standardIsSet = false;
}


} // namespace org::openapitools::server::model

