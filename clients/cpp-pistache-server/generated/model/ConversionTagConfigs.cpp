/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ConversionTagConfigs.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

ConversionTagConfigs::ConversionTagConfigs()
{
    m_Aem_enabled = false;
    m_Aem_enabledIsSet = false;
    m_Md_frequency = 1;
    m_Md_frequencyIsSet = false;
    m_Aem_fnln_enabled = false;
    m_Aem_fnln_enabledIsSet = false;
    m_Aem_ph_enabled = false;
    m_Aem_ph_enabledIsSet = false;
    m_Aem_ge_enabled = false;
    m_Aem_ge_enabledIsSet = false;
    m_Aem_db_enabled = false;
    m_Aem_db_enabledIsSet = false;
    m_Aem_loc_enabled = false;
    m_Aem_loc_enabledIsSet = false;
    
}

void ConversionTagConfigs::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool ConversionTagConfigs::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool ConversionTagConfigs::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "ConversionTagConfigs" : pathPrefix;

                                
    return success;
}

bool ConversionTagConfigs::operator==(const ConversionTagConfigs& rhs) const
{
    return
    
    
    
    ((!aemEnabledIsSet() && !rhs.aemEnabledIsSet()) || (aemEnabledIsSet() && rhs.aemEnabledIsSet() && isAemEnabled() == rhs.isAemEnabled())) &&
    
    
    ((!mdFrequencyIsSet() && !rhs.mdFrequencyIsSet()) || (mdFrequencyIsSet() && rhs.mdFrequencyIsSet() && getMdFrequency() == rhs.getMdFrequency())) &&
    
    
    ((!aemFnlnEnabledIsSet() && !rhs.aemFnlnEnabledIsSet()) || (aemFnlnEnabledIsSet() && rhs.aemFnlnEnabledIsSet() && isAemFnlnEnabled() == rhs.isAemFnlnEnabled())) &&
    
    
    ((!aemPhEnabledIsSet() && !rhs.aemPhEnabledIsSet()) || (aemPhEnabledIsSet() && rhs.aemPhEnabledIsSet() && isAemPhEnabled() == rhs.isAemPhEnabled())) &&
    
    
    ((!aemGeEnabledIsSet() && !rhs.aemGeEnabledIsSet()) || (aemGeEnabledIsSet() && rhs.aemGeEnabledIsSet() && isAemGeEnabled() == rhs.isAemGeEnabled())) &&
    
    
    ((!aemDbEnabledIsSet() && !rhs.aemDbEnabledIsSet()) || (aemDbEnabledIsSet() && rhs.aemDbEnabledIsSet() && isAemDbEnabled() == rhs.isAemDbEnabled())) &&
    
    
    ((!aemLocEnabledIsSet() && !rhs.aemLocEnabledIsSet()) || (aemLocEnabledIsSet() && rhs.aemLocEnabledIsSet() && isAemLocEnabled() == rhs.isAemLocEnabled()))
    
    ;
}

bool ConversionTagConfigs::operator!=(const ConversionTagConfigs& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const ConversionTagConfigs& o)
{
    j = nlohmann::json::object();
    if(o.aemEnabledIsSet())
        j["aem_enabled"] = o.m_Aem_enabled;
    if(o.mdFrequencyIsSet())
        j["md_frequency"] = o.m_Md_frequency;
    if(o.aemFnlnEnabledIsSet())
        j["aem_fnln_enabled"] = o.m_Aem_fnln_enabled;
    if(o.aemPhEnabledIsSet())
        j["aem_ph_enabled"] = o.m_Aem_ph_enabled;
    if(o.aemGeEnabledIsSet())
        j["aem_ge_enabled"] = o.m_Aem_ge_enabled;
    if(o.aemDbEnabledIsSet())
        j["aem_db_enabled"] = o.m_Aem_db_enabled;
    if(o.aemLocEnabledIsSet())
        j["aem_loc_enabled"] = o.m_Aem_loc_enabled;
    
}

void from_json(const nlohmann::json& j, ConversionTagConfigs& o)
{
    if(j.find("aem_enabled") != j.end())
    {
        j.at("aem_enabled").get_to(o.m_Aem_enabled);
        o.m_Aem_enabledIsSet = true;
    } 
    if(j.find("md_frequency") != j.end())
    {
        j.at("md_frequency").get_to(o.m_Md_frequency);
        o.m_Md_frequencyIsSet = true;
    } 
    if(j.find("aem_fnln_enabled") != j.end())
    {
        j.at("aem_fnln_enabled").get_to(o.m_Aem_fnln_enabled);
        o.m_Aem_fnln_enabledIsSet = true;
    } 
    if(j.find("aem_ph_enabled") != j.end())
    {
        j.at("aem_ph_enabled").get_to(o.m_Aem_ph_enabled);
        o.m_Aem_ph_enabledIsSet = true;
    } 
    if(j.find("aem_ge_enabled") != j.end())
    {
        j.at("aem_ge_enabled").get_to(o.m_Aem_ge_enabled);
        o.m_Aem_ge_enabledIsSet = true;
    } 
    if(j.find("aem_db_enabled") != j.end())
    {
        j.at("aem_db_enabled").get_to(o.m_Aem_db_enabled);
        o.m_Aem_db_enabledIsSet = true;
    } 
    if(j.find("aem_loc_enabled") != j.end())
    {
        j.at("aem_loc_enabled").get_to(o.m_Aem_loc_enabled);
        o.m_Aem_loc_enabledIsSet = true;
    } 
    
}

bool ConversionTagConfigs::isAemEnabled() const
{
    return m_Aem_enabled;
}
void ConversionTagConfigs::setAemEnabled(bool const value)
{
    m_Aem_enabled = value;
    m_Aem_enabledIsSet = true;
}
bool ConversionTagConfigs::aemEnabledIsSet() const
{
    return m_Aem_enabledIsSet;
}
void ConversionTagConfigs::unsetAem_enabled()
{
    m_Aem_enabledIsSet = false;
}
double ConversionTagConfigs::getMdFrequency() const
{
    return m_Md_frequency;
}
void ConversionTagConfigs::setMdFrequency(double const value)
{
    m_Md_frequency = value;
    m_Md_frequencyIsSet = true;
}
bool ConversionTagConfigs::mdFrequencyIsSet() const
{
    return m_Md_frequencyIsSet;
}
void ConversionTagConfigs::unsetMd_frequency()
{
    m_Md_frequencyIsSet = false;
}
bool ConversionTagConfigs::isAemFnlnEnabled() const
{
    return m_Aem_fnln_enabled;
}
void ConversionTagConfigs::setAemFnlnEnabled(bool const value)
{
    m_Aem_fnln_enabled = value;
    m_Aem_fnln_enabledIsSet = true;
}
bool ConversionTagConfigs::aemFnlnEnabledIsSet() const
{
    return m_Aem_fnln_enabledIsSet;
}
void ConversionTagConfigs::unsetAem_fnln_enabled()
{
    m_Aem_fnln_enabledIsSet = false;
}
bool ConversionTagConfigs::isAemPhEnabled() const
{
    return m_Aem_ph_enabled;
}
void ConversionTagConfigs::setAemPhEnabled(bool const value)
{
    m_Aem_ph_enabled = value;
    m_Aem_ph_enabledIsSet = true;
}
bool ConversionTagConfigs::aemPhEnabledIsSet() const
{
    return m_Aem_ph_enabledIsSet;
}
void ConversionTagConfigs::unsetAem_ph_enabled()
{
    m_Aem_ph_enabledIsSet = false;
}
bool ConversionTagConfigs::isAemGeEnabled() const
{
    return m_Aem_ge_enabled;
}
void ConversionTagConfigs::setAemGeEnabled(bool const value)
{
    m_Aem_ge_enabled = value;
    m_Aem_ge_enabledIsSet = true;
}
bool ConversionTagConfigs::aemGeEnabledIsSet() const
{
    return m_Aem_ge_enabledIsSet;
}
void ConversionTagConfigs::unsetAem_ge_enabled()
{
    m_Aem_ge_enabledIsSet = false;
}
bool ConversionTagConfigs::isAemDbEnabled() const
{
    return m_Aem_db_enabled;
}
void ConversionTagConfigs::setAemDbEnabled(bool const value)
{
    m_Aem_db_enabled = value;
    m_Aem_db_enabledIsSet = true;
}
bool ConversionTagConfigs::aemDbEnabledIsSet() const
{
    return m_Aem_db_enabledIsSet;
}
void ConversionTagConfigs::unsetAem_db_enabled()
{
    m_Aem_db_enabledIsSet = false;
}
bool ConversionTagConfigs::isAemLocEnabled() const
{
    return m_Aem_loc_enabled;
}
void ConversionTagConfigs::setAemLocEnabled(bool const value)
{
    m_Aem_loc_enabled = value;
    m_Aem_loc_enabledIsSet = true;
}
bool ConversionTagConfigs::aemLocEnabledIsSet() const
{
    return m_Aem_loc_enabledIsSet;
}
void ConversionTagConfigs::unsetAem_loc_enabled()
{
    m_Aem_loc_enabledIsSet = false;
}


} // namespace org::openapitools::server::model

