/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * TargetingAdvertiserCountry.h
 *
 * Advertiser&#39;s ISO two character country code.
 */

#ifndef TargetingAdvertiserCountry_H_
#define TargetingAdvertiserCountry_H_


#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// Advertiser&#39;s ISO two character country code.
/// </summary>
class  TargetingAdvertiserCountry
{
public:
    TargetingAdvertiserCountry();
    virtual ~TargetingAdvertiserCountry() = default;

    enum class eTargetingAdvertiserCountry {
    // To have a valid default value.
    // Avoiding name clashes with user defined
    // enum values
    INVALID_VALUE_OPENAPI_GENERATED = 0,
    US, 
    GB, 
    CA, 
    IE, 
    AU, 
    NZ, 
    FR, 
    SE, 
    IL, 
    DE, 
    AT, 
    IT, 
    ES, 
    NL, 
    BE, 
    PT, 
    CH, 
    HK, 
    JP, 
    KR, 
    SG, 
    NO, 
    DK, 
    FI, 
    CY, 
    LU, 
    MT, 
    PL, 
    RO, 
    HU, 
    CZ, 
    GR, 
    SK, 
    BR, 
    MX, 
    AR, 
    CL, 
    CO
    };

    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const TargetingAdvertiserCountry& rhs) const;
    bool operator!=(const TargetingAdvertiserCountry& rhs) const;

    /////////////////////////////////////////////
    /// TargetingAdvertiserCountry members

    TargetingAdvertiserCountry::eTargetingAdvertiserCountry getValue() const;
    void setValue(TargetingAdvertiserCountry::eTargetingAdvertiserCountry value);
    
    friend  void to_json(nlohmann::json& j, const TargetingAdvertiserCountry& o);
    friend  void from_json(const nlohmann::json& j, TargetingAdvertiserCountry& o);
protected:
    TargetingAdvertiserCountry::eTargetingAdvertiserCountry m_value = TargetingAdvertiserCountry::eTargetingAdvertiserCountry::INVALID_VALUE_OPENAPI_GENERATED;
};

} // namespace org::openapitools::server::model

#endif /* TargetingAdvertiserCountry_H_ */
