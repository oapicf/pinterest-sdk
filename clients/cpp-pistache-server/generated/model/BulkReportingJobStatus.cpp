/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "BulkReportingJobStatus.h"
#include "Helpers.h"
#include <stdexcept>
#include <sstream>

namespace org::openapitools::server::model
{

BulkReportingJobStatus::BulkReportingJobStatus()
{
    
}

void BulkReportingJobStatus::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool BulkReportingJobStatus::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool BulkReportingJobStatus::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "BulkReportingJobStatus" : pathPrefix;

    
    if (m_value == BulkReportingJobStatus::eBulkReportingJobStatus::INVALID_VALUE_OPENAPI_GENERATED)
    {
        success = false;
        msg << _pathPrefix << ": has no value;";
    }

    return success;
}

bool BulkReportingJobStatus::operator==(const BulkReportingJobStatus& rhs) const
{
    return
    getValue() == rhs.getValue()
    
    ;
}

bool BulkReportingJobStatus::operator!=(const BulkReportingJobStatus& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const BulkReportingJobStatus& o)
{
    j = nlohmann::json::object();
    
    switch (o.getValue())
    {
        case BulkReportingJobStatus::eBulkReportingJobStatus::INVALID_VALUE_OPENAPI_GENERATED:
            j = "INVALID_VALUE_OPENAPI_GENERATED";
            break;
        case BulkReportingJobStatus::eBulkReportingJobStatus::DOES_NOT_EXIST:
            j = "DOES_NOT_EXIST";
            break;
        case BulkReportingJobStatus::eBulkReportingJobStatus::FINISHED:
            j = "FINISHED";
            break;
        case BulkReportingJobStatus::eBulkReportingJobStatus::IN_PROGRESS:
            j = "IN_PROGRESS";
            break;
        case BulkReportingJobStatus::eBulkReportingJobStatus::EXPIRED:
            j = "EXPIRED";
            break;
        case BulkReportingJobStatus::eBulkReportingJobStatus::FAILED:
            j = "FAILED";
            break;
        case BulkReportingJobStatus::eBulkReportingJobStatus::CANCELLED:
            j = "CANCELLED";
            break;
    }
}

void from_json(const nlohmann::json& j, BulkReportingJobStatus& o)
{
    
    auto s = j.get<std::string>();
    if (s == "DOES_NOT_EXIST") {
     o.setValue(BulkReportingJobStatus::eBulkReportingJobStatus::DOES_NOT_EXIST);
    } 
    else if (s == "FINISHED") {
     o.setValue(BulkReportingJobStatus::eBulkReportingJobStatus::FINISHED);
    } 
    else if (s == "IN_PROGRESS") {
     o.setValue(BulkReportingJobStatus::eBulkReportingJobStatus::IN_PROGRESS);
    } 
    else if (s == "EXPIRED") {
     o.setValue(BulkReportingJobStatus::eBulkReportingJobStatus::EXPIRED);
    } 
    else if (s == "FAILED") {
     o.setValue(BulkReportingJobStatus::eBulkReportingJobStatus::FAILED);
    } 
    else if (s == "CANCELLED") {
     o.setValue(BulkReportingJobStatus::eBulkReportingJobStatus::CANCELLED);
    }  else {
     std::stringstream ss;
     ss << "Unexpected value " << s << " in json"
        << " cannot be converted to enum of type"
        << " BulkReportingJobStatus::eBulkReportingJobStatus";
     throw std::invalid_argument(ss.str());
    } 

}

BulkReportingJobStatus::eBulkReportingJobStatus BulkReportingJobStatus::getValue() const
{
    return m_value;
}
void BulkReportingJobStatus::setValue(BulkReportingJobStatus::eBulkReportingJobStatus value)
{
    m_value = value;
}

} // namespace org::openapitools::server::model

