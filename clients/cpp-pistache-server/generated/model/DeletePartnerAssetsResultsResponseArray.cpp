/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "DeletePartnerAssetsResultsResponseArray.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

DeletePartnerAssetsResultsResponseArray::DeletePartnerAssetsResultsResponseArray()
{
    m_ItemsIsSet = false;
    
}

void DeletePartnerAssetsResultsResponseArray::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool DeletePartnerAssetsResultsResponseArray::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool DeletePartnerAssetsResultsResponseArray::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "DeletePartnerAssetsResultsResponseArray" : pathPrefix;

         
    if (itemsIsSet())
    {
        const std::vector<org::openapitools::server::model::DeletePartnerAssetsResult>& value = m_Items;
        const std::string currentValuePath = _pathPrefix + ".items";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::DeletePartnerAssetsResult& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }

    }
    
    return success;
}

bool DeletePartnerAssetsResultsResponseArray::operator==(const DeletePartnerAssetsResultsResponseArray& rhs) const
{
    return
    
    
    
    ((!itemsIsSet() && !rhs.itemsIsSet()) || (itemsIsSet() && rhs.itemsIsSet() && getItems() == rhs.getItems()))
    
    ;
}

bool DeletePartnerAssetsResultsResponseArray::operator!=(const DeletePartnerAssetsResultsResponseArray& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const DeletePartnerAssetsResultsResponseArray& o)
{
    j = nlohmann::json::object();
    if(o.itemsIsSet() || !o.m_Items.empty())
        j["items"] = o.m_Items;
    
}

void from_json(const nlohmann::json& j, DeletePartnerAssetsResultsResponseArray& o)
{
    if(j.find("items") != j.end())
    {
        j.at("items").get_to(o.m_Items);
        o.m_ItemsIsSet = true;
    } 
    
}

std::vector<org::openapitools::server::model::DeletePartnerAssetsResult> DeletePartnerAssetsResultsResponseArray::getItems() const
{
    return m_Items;
}
void DeletePartnerAssetsResultsResponseArray::setItems(std::vector<org::openapitools::server::model::DeletePartnerAssetsResult> const& value)
{
    m_Items = value;
    m_ItemsIsSet = true;
}
bool DeletePartnerAssetsResultsResponseArray::itemsIsSet() const
{
    return m_ItemsIsSet;
}
void DeletePartnerAssetsResultsResponseArray::unsetItems()
{
    m_ItemsIsSet = false;
}


} // namespace org::openapitools::server::model

