/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "GetPartnerAssetsResponse.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

GetPartnerAssetsResponse::GetPartnerAssetsResponse()
{
    m_Asset_id = "";
    m_Asset_idIsSet = false;
    m_Asset_type = "";
    m_Asset_typeIsSet = false;
    m_PermissionsIsSet = false;
    m_Asset_group_infoIsSet = false;
    
}

void GetPartnerAssetsResponse::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool GetPartnerAssetsResponse::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool GetPartnerAssetsResponse::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "GetPartnerAssetsResponse" : pathPrefix;

         
    if (assetIdIsSet())
    {
        const std::string& value = m_Asset_id;
        const std::string currentValuePath = _pathPrefix + ".assetId";
                
        
        if (value.length() < 1)
        {
            success = false;
            msg << currentValuePath << ": must be at least 1 characters long;";
        }
        if (value.length() > 20)
        {
            success = false;
            msg << currentValuePath << ": must be at most 20 characters long;";
        }

    }
             
    if (permissionsIsSet())
    {
        const std::vector<std::string>& value = m_Permissions;
        const std::string currentValuePath = _pathPrefix + ".permissions";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const std::string& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }

    }
        
    return success;
}

bool GetPartnerAssetsResponse::operator==(const GetPartnerAssetsResponse& rhs) const
{
    return
    
    
    
    ((!assetIdIsSet() && !rhs.assetIdIsSet()) || (assetIdIsSet() && rhs.assetIdIsSet() && getAssetId() == rhs.getAssetId())) &&
    
    
    ((!assetTypeIsSet() && !rhs.assetTypeIsSet()) || (assetTypeIsSet() && rhs.assetTypeIsSet() && getAssetType() == rhs.getAssetType())) &&
    
    
    ((!permissionsIsSet() && !rhs.permissionsIsSet()) || (permissionsIsSet() && rhs.permissionsIsSet() && getPermissions() == rhs.getPermissions())) &&
    
    
    ((!assetGroupInfoIsSet() && !rhs.assetGroupInfoIsSet()) || (assetGroupInfoIsSet() && rhs.assetGroupInfoIsSet() && getAssetGroupInfo() == rhs.getAssetGroupInfo()))
    
    ;
}

bool GetPartnerAssetsResponse::operator!=(const GetPartnerAssetsResponse& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const GetPartnerAssetsResponse& o)
{
    j = nlohmann::json::object();
    if(o.assetIdIsSet())
        j["asset_id"] = o.m_Asset_id;
    if(o.assetTypeIsSet())
        j["asset_type"] = o.m_Asset_type;
    if(o.permissionsIsSet() || !o.m_Permissions.empty())
        j["permissions"] = o.m_Permissions;
    if(o.assetGroupInfoIsSet())
        j["asset_group_info"] = o.m_Asset_group_info;
    
}

void from_json(const nlohmann::json& j, GetPartnerAssetsResponse& o)
{
    if(j.find("asset_id") != j.end())
    {
        j.at("asset_id").get_to(o.m_Asset_id);
        o.m_Asset_idIsSet = true;
    } 
    if(j.find("asset_type") != j.end())
    {
        j.at("asset_type").get_to(o.m_Asset_type);
        o.m_Asset_typeIsSet = true;
    } 
    if(j.find("permissions") != j.end())
    {
        j.at("permissions").get_to(o.m_Permissions);
        o.m_PermissionsIsSet = true;
    } 
    if(j.find("asset_group_info") != j.end())
    {
        j.at("asset_group_info").get_to(o.m_Asset_group_info);
        o.m_Asset_group_infoIsSet = true;
    } 
    
}

std::string GetPartnerAssetsResponse::getAssetId() const
{
    return m_Asset_id;
}
void GetPartnerAssetsResponse::setAssetId(std::string const& value)
{
    m_Asset_id = value;
    m_Asset_idIsSet = true;
}
bool GetPartnerAssetsResponse::assetIdIsSet() const
{
    return m_Asset_idIsSet;
}
void GetPartnerAssetsResponse::unsetAsset_id()
{
    m_Asset_idIsSet = false;
}
std::string GetPartnerAssetsResponse::getAssetType() const
{
    return m_Asset_type;
}
void GetPartnerAssetsResponse::setAssetType(std::string const& value)
{
    m_Asset_type = value;
    m_Asset_typeIsSet = true;
}
bool GetPartnerAssetsResponse::assetTypeIsSet() const
{
    return m_Asset_typeIsSet;
}
void GetPartnerAssetsResponse::unsetAsset_type()
{
    m_Asset_typeIsSet = false;
}
std::vector<std::string> GetPartnerAssetsResponse::getPermissions() const
{
    return m_Permissions;
}
void GetPartnerAssetsResponse::setPermissions(std::vector<std::string> const& value)
{
    m_Permissions = value;
    m_PermissionsIsSet = true;
}
bool GetPartnerAssetsResponse::permissionsIsSet() const
{
    return m_PermissionsIsSet;
}
void GetPartnerAssetsResponse::unsetPermissions()
{
    m_PermissionsIsSet = false;
}
org::openapitools::server::model::AssetGroupBinding GetPartnerAssetsResponse::getAssetGroupInfo() const
{
    return m_Asset_group_info;
}
void GetPartnerAssetsResponse::setAssetGroupInfo(org::openapitools::server::model::AssetGroupBinding const& value)
{
    m_Asset_group_info = value;
    m_Asset_group_infoIsSet = true;
}
bool GetPartnerAssetsResponse::assetGroupInfoIsSet() const
{
    return m_Asset_group_infoIsSet;
}
void GetPartnerAssetsResponse::unsetAsset_group_info()
{
    m_Asset_group_infoIsSet = false;
}


} // namespace org::openapitools::server::model

