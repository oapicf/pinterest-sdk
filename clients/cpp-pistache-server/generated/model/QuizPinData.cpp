/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "QuizPinData.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

QuizPinData::QuizPinData()
{
    m_QuestionsIsSet = false;
    m_ResultsIsSet = false;
    m_Tie_breaker_type = "";
    m_Tie_breaker_typeIsSet = false;
    m_Tie_breaker_custom_resultIsSet = false;
    
}

void QuizPinData::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool QuizPinData::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool QuizPinData::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "QuizPinData" : pathPrefix;

         
    if (questionsIsSet())
    {
        const std::vector<org::openapitools::server::model::QuizPinQuestion>& value = m_Questions;
        const std::string currentValuePath = _pathPrefix + ".questions";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::QuizPinQuestion& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".questions") && success;
 
                i++;
            }
        }

    }
         
    if (resultsIsSet())
    {
        const std::vector<org::openapitools::server::model::QuizPinResult>& value = m_Results;
        const std::string currentValuePath = _pathPrefix + ".results";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::QuizPinResult& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".results") && success;
 
                i++;
            }
        }

    }
            
    return success;
}

bool QuizPinData::operator==(const QuizPinData& rhs) const
{
    return
    
    
    
    ((!questionsIsSet() && !rhs.questionsIsSet()) || (questionsIsSet() && rhs.questionsIsSet() && getQuestions() == rhs.getQuestions())) &&
    
    
    ((!resultsIsSet() && !rhs.resultsIsSet()) || (resultsIsSet() && rhs.resultsIsSet() && getResults() == rhs.getResults())) &&
    
    
    ((!tieBreakerTypeIsSet() && !rhs.tieBreakerTypeIsSet()) || (tieBreakerTypeIsSet() && rhs.tieBreakerTypeIsSet() && getTieBreakerType() == rhs.getTieBreakerType())) &&
    
    
    ((!tieBreakerCustomResultIsSet() && !rhs.tieBreakerCustomResultIsSet()) || (tieBreakerCustomResultIsSet() && rhs.tieBreakerCustomResultIsSet() && getTieBreakerCustomResult() == rhs.getTieBreakerCustomResult()))
    
    ;
}

bool QuizPinData::operator!=(const QuizPinData& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const QuizPinData& o)
{
    j = nlohmann::json::object();
    if(o.questionsIsSet() || !o.m_Questions.empty())
        j["questions"] = o.m_Questions;
    if(o.resultsIsSet() || !o.m_Results.empty())
        j["results"] = o.m_Results;
    if(o.tieBreakerTypeIsSet())
        j["tie_breaker_type"] = o.m_Tie_breaker_type;
    if(o.tieBreakerCustomResultIsSet())
        j["tie_breaker_custom_result"] = o.m_Tie_breaker_custom_result;
    
}

void from_json(const nlohmann::json& j, QuizPinData& o)
{
    if(j.find("questions") != j.end())
    {
        j.at("questions").get_to(o.m_Questions);
        o.m_QuestionsIsSet = true;
    } 
    if(j.find("results") != j.end())
    {
        j.at("results").get_to(o.m_Results);
        o.m_ResultsIsSet = true;
    } 
    if(j.find("tie_breaker_type") != j.end())
    {
        j.at("tie_breaker_type").get_to(o.m_Tie_breaker_type);
        o.m_Tie_breaker_typeIsSet = true;
    } 
    if(j.find("tie_breaker_custom_result") != j.end())
    {
        j.at("tie_breaker_custom_result").get_to(o.m_Tie_breaker_custom_result);
        o.m_Tie_breaker_custom_resultIsSet = true;
    } 
    
}

std::vector<org::openapitools::server::model::QuizPinQuestion> QuizPinData::getQuestions() const
{
    return m_Questions;
}
void QuizPinData::setQuestions(std::vector<org::openapitools::server::model::QuizPinQuestion> const& value)
{
    m_Questions = value;
    m_QuestionsIsSet = true;
}
bool QuizPinData::questionsIsSet() const
{
    return m_QuestionsIsSet;
}
void QuizPinData::unsetQuestions()
{
    m_QuestionsIsSet = false;
}
std::vector<org::openapitools::server::model::QuizPinResult> QuizPinData::getResults() const
{
    return m_Results;
}
void QuizPinData::setResults(std::vector<org::openapitools::server::model::QuizPinResult> const& value)
{
    m_Results = value;
    m_ResultsIsSet = true;
}
bool QuizPinData::resultsIsSet() const
{
    return m_ResultsIsSet;
}
void QuizPinData::unsetResults()
{
    m_ResultsIsSet = false;
}
std::string QuizPinData::getTieBreakerType() const
{
    return m_Tie_breaker_type;
}
void QuizPinData::setTieBreakerType(std::string const& value)
{
    m_Tie_breaker_type = value;
    m_Tie_breaker_typeIsSet = true;
}
bool QuizPinData::tieBreakerTypeIsSet() const
{
    return m_Tie_breaker_typeIsSet;
}
void QuizPinData::unsetTie_breaker_type()
{
    m_Tie_breaker_typeIsSet = false;
}
org::openapitools::server::model::QuizPinResult QuizPinData::getTieBreakerCustomResult() const
{
    return m_Tie_breaker_custom_result;
}
void QuizPinData::setTieBreakerCustomResult(org::openapitools::server::model::QuizPinResult const& value)
{
    m_Tie_breaker_custom_result = value;
    m_Tie_breaker_custom_resultIsSet = true;
}
bool QuizPinData::tieBreakerCustomResultIsSet() const
{
    return m_Tie_breaker_custom_resultIsSet;
}
void QuizPinData::unsetTie_breaker_custom_result()
{
    m_Tie_breaker_custom_resultIsSet = false;
}


} // namespace org::openapitools::server::model

