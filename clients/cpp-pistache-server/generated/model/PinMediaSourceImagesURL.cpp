/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "PinMediaSourceImagesURL.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

PinMediaSourceImagesURL::PinMediaSourceImagesURL()
{
    m_Source_type = "";
    m_Source_typeIsSet = false;
    m_Index = 0;
    m_IndexIsSet = false;
    
}

void PinMediaSourceImagesURL::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool PinMediaSourceImagesURL::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool PinMediaSourceImagesURL::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "PinMediaSourceImagesURL" : pathPrefix;

             
    
    /* Items */ {
        const std::vector<org::openapitools::server::model::PinMediaSourceImagesURL_items_inner>& value = m_Items;
        const std::string currentValuePath = _pathPrefix + ".items";
                
        
        if (value.size() < 2)
        {
            success = false;
            msg << currentValuePath << ": must have at least 2 elements;";
        }
        if (value.size() > 5)
        {
            success = false;
            msg << currentValuePath << ": must have at most 5 elements;";
        }
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::PinMediaSourceImagesURL_items_inner& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".items") && success;
 
                i++;
            }
        }

    }
         
    if (indexIsSet())
    {
        const int32_t& value = m_Index;
        const std::string currentValuePath = _pathPrefix + ".index";
                
        
        if (value < 0)
        {
            success = false;
            msg << currentValuePath << ": must be greater than or equal to 0;";
        }

    }
    
    return success;
}

bool PinMediaSourceImagesURL::operator==(const PinMediaSourceImagesURL& rhs) const
{
    return
    
    
    
    ((!sourceTypeIsSet() && !rhs.sourceTypeIsSet()) || (sourceTypeIsSet() && rhs.sourceTypeIsSet() && getSourceType() == rhs.getSourceType())) &&
    
    (getItems() == rhs.getItems())
     &&
    
    
    ((!indexIsSet() && !rhs.indexIsSet()) || (indexIsSet() && rhs.indexIsSet() && getIndex() == rhs.getIndex()))
    
    ;
}

bool PinMediaSourceImagesURL::operator!=(const PinMediaSourceImagesURL& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const PinMediaSourceImagesURL& o)
{
    j = nlohmann::json::object();
    if(o.sourceTypeIsSet())
        j["source_type"] = o.m_Source_type;
    j["items"] = o.m_Items;
    if(o.indexIsSet())
        j["index"] = o.m_Index;
    
}

void from_json(const nlohmann::json& j, PinMediaSourceImagesURL& o)
{
    if(j.find("source_type") != j.end())
    {
        j.at("source_type").get_to(o.m_Source_type);
        o.m_Source_typeIsSet = true;
    } 
    j.at("items").get_to(o.m_Items);
    if(j.find("index") != j.end())
    {
        j.at("index").get_to(o.m_Index);
        o.m_IndexIsSet = true;
    } 
    
}

std::string PinMediaSourceImagesURL::getSourceType() const
{
    return m_Source_type;
}
void PinMediaSourceImagesURL::setSourceType(std::string const& value)
{
    m_Source_type = value;
    m_Source_typeIsSet = true;
}
bool PinMediaSourceImagesURL::sourceTypeIsSet() const
{
    return m_Source_typeIsSet;
}
void PinMediaSourceImagesURL::unsetSource_type()
{
    m_Source_typeIsSet = false;
}
std::vector<org::openapitools::server::model::PinMediaSourceImagesURL_items_inner> PinMediaSourceImagesURL::getItems() const
{
    return m_Items;
}
void PinMediaSourceImagesURL::setItems(std::vector<org::openapitools::server::model::PinMediaSourceImagesURL_items_inner> const& value)
{
    m_Items = value;
}
int32_t PinMediaSourceImagesURL::getIndex() const
{
    return m_Index;
}
void PinMediaSourceImagesURL::setIndex(int32_t const value)
{
    m_Index = value;
    m_IndexIsSet = true;
}
bool PinMediaSourceImagesURL::indexIsSet() const
{
    return m_IndexIsSet;
}
void PinMediaSourceImagesURL::unsetIndex()
{
    m_IndexIsSet = false;
}


} // namespace org::openapitools::server::model

