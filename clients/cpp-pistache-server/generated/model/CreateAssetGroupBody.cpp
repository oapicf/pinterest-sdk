/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "CreateAssetGroupBody.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

CreateAssetGroupBody::CreateAssetGroupBody()
{
    m_Asset_group_name = "";
    m_Asset_group_description = "";
    
}

void CreateAssetGroupBody::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool CreateAssetGroupBody::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool CreateAssetGroupBody::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "CreateAssetGroupBody" : pathPrefix;

                 
    
    /* Asset_group_types */ {
        const std::vector<org::openapitools::server::model::AssetGroupType>& value = m_Asset_group_types;
        const std::string currentValuePath = _pathPrefix + ".assetGroupTypes";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::AssetGroupType& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath) && success;
        
        
 
                i++;
            }
        }

    }
    
    return success;
}

bool CreateAssetGroupBody::operator==(const CreateAssetGroupBody& rhs) const
{
    return
    
    
    (getAssetGroupName() == rhs.getAssetGroupName())
     &&
    
    (getAssetGroupDescription() == rhs.getAssetGroupDescription())
     &&
    
    (getAssetGroupTypes() == rhs.getAssetGroupTypes())
    
    
    ;
}

bool CreateAssetGroupBody::operator!=(const CreateAssetGroupBody& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const CreateAssetGroupBody& o)
{
    j = nlohmann::json::object();
    j["asset_group_name"] = o.m_Asset_group_name;
    j["asset_group_description"] = o.m_Asset_group_description;
    j["asset_group_types"] = o.m_Asset_group_types;
    
}

void from_json(const nlohmann::json& j, CreateAssetGroupBody& o)
{
    j.at("asset_group_name").get_to(o.m_Asset_group_name);
    j.at("asset_group_description").get_to(o.m_Asset_group_description);
    j.at("asset_group_types").get_to(o.m_Asset_group_types);
    
}

std::string CreateAssetGroupBody::getAssetGroupName() const
{
    return m_Asset_group_name;
}
void CreateAssetGroupBody::setAssetGroupName(std::string const& value)
{
    m_Asset_group_name = value;
}
std::string CreateAssetGroupBody::getAssetGroupDescription() const
{
    return m_Asset_group_description;
}
void CreateAssetGroupBody::setAssetGroupDescription(std::string const& value)
{
    m_Asset_group_description = value;
}
std::vector<org::openapitools::server::model::AssetGroupType> CreateAssetGroupBody::getAssetGroupTypes() const
{
    return m_Asset_group_types;
}
void CreateAssetGroupBody::setAssetGroupTypes(std::vector<org::openapitools::server::model::AssetGroupType> const& value)
{
    m_Asset_group_types = value;
}


} // namespace org::openapitools::server::model

