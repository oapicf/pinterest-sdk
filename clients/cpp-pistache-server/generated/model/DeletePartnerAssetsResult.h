/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * DeletePartnerAssetsResult.h
 *
 * The terminated asset access.
 */

#ifndef DeletePartnerAssetsResult_H_
#define DeletePartnerAssetsResult_H_


#include <string>
#include <vector>
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// The terminated asset access.
/// </summary>
class  DeletePartnerAssetsResult
{
public:
    DeletePartnerAssetsResult();
    virtual ~DeletePartnerAssetsResult() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const DeletePartnerAssetsResult& rhs) const;
    bool operator!=(const DeletePartnerAssetsResult& rhs) const;

    /////////////////////////////////////////////
    /// DeletePartnerAssetsResult members

    /// <summary>
    /// Unique identifier of a business asset.
    /// </summary>
    std::string getAssetId() const;
    void setAssetId(std::string const& value);
    bool assetIdIsSet() const;
    void unsetAsset_id();
    /// <summary>
    /// Type of asset. Currently we only support AD_ACCOUNT and PROFILE, and ASSET_GROUP.
    /// </summary>
    std::string getAssetType() const;
    void setAssetType(std::string const& value);
    bool assetTypeIsSet() const;
    void unsetAsset_type();
    /// <summary>
    /// Permission levels member or partner has on an asset.
    /// </summary>
    std::vector<std::string> getPermissions() const;
    void setPermissions(std::vector<std::string> const& value);
    bool permissionsIsSet() const;
    void unsetPermissions();
    /// <summary>
    /// If is_shared_partner&#x3D;FALSE, you terminated a partner&#39;s asset access to your business asset.&lt;br&gt; If is_shared_partner&#x3D;TRUE, you terminated your asset access to your partner&#39;s business asset.
    /// </summary>
    bool isIsSharedPartner() const;
    void setIsSharedPartner(bool const value);
    bool isSharedPartnerIsSet() const;
    void unsetIs_shared_partner();
    /// <summary>
    /// Unique identifier of a business partner.
    /// </summary>
    std::string getPartnerId() const;
    void setPartnerId(std::string const& value);
    bool partnerIdIsSet() const;
    void unsetPartner_id();

    friend  void to_json(nlohmann::json& j, const DeletePartnerAssetsResult& o);
    friend  void from_json(const nlohmann::json& j, DeletePartnerAssetsResult& o);
protected:
    std::string m_Asset_id;
    bool m_Asset_idIsSet;
    std::string m_Asset_type;
    bool m_Asset_typeIsSet;
    std::vector<std::string> m_Permissions;
    bool m_PermissionsIsSet;
    bool m_Is_shared_partner;
    bool m_Is_shared_partnerIsSet;
    std::string m_Partner_id;
    bool m_Partner_idIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* DeletePartnerAssetsResult_H_ */
