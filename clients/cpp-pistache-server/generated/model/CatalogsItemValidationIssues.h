/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * CatalogsItemValidationIssues.h
 *
 * 
 */

#ifndef CatalogsItemValidationIssues_H_
#define CatalogsItemValidationIssues_H_


#include "CatalogsItemValidationErrors.h"
#include <string>
#include "CatalogsItemValidationWarnings.h"
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// 
/// </summary>
class  CatalogsItemValidationIssues
{
public:
    CatalogsItemValidationIssues();
    virtual ~CatalogsItemValidationIssues() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const CatalogsItemValidationIssues& rhs) const;
    bool operator!=(const CatalogsItemValidationIssues& rhs) const;

    /////////////////////////////////////////////
    /// CatalogsItemValidationIssues members

    /// <summary>
    /// Item number based on order of appearance in the Catalogs Feed. For example, &#39;0&#39; refers to first item found in a feed that was downloaded from a &#39;location&#39; specified during feed creation.
    /// </summary>
    int32_t getItemNumber() const;
    void setItemNumber(int32_t const value);
    /// <summary>
    /// The merchant-created unique ID that represents the product.
    /// </summary>
    std::string getItemId() const;
    void setItemId(std::string const& value);
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::CatalogsItemValidationErrors getErrors() const;
    void setErrors(org::openapitools::server::model::CatalogsItemValidationErrors const& value);
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::CatalogsItemValidationWarnings getWarnings() const;
    void setWarnings(org::openapitools::server::model::CatalogsItemValidationWarnings const& value);

    friend  void to_json(nlohmann::json& j, const CatalogsItemValidationIssues& o);
    friend  void from_json(const nlohmann::json& j, CatalogsItemValidationIssues& o);
protected:
    int32_t m_Item_number;

    std::string m_Item_id;

    org::openapitools::server::model::CatalogsItemValidationErrors m_Errors;

    org::openapitools::server::model::CatalogsItemValidationWarnings m_Warnings;

    
};

} // namespace org::openapitools::server::model

#endif /* CatalogsItemValidationIssues_H_ */
