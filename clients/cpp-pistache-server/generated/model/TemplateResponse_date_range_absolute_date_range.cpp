/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "TemplateResponse_date_range_absolute_date_range.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

TemplateResponse_date_range_absolute_date_range::TemplateResponse_date_range_absolute_date_range()
{
    m_Type = "";
    m_TypeIsSet = false;
    m_Start_date = 0.0;
    m_Start_dateIsSet = false;
    m_End_date = 0.0;
    m_End_dateIsSet = false;
    
}

void TemplateResponse_date_range_absolute_date_range::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool TemplateResponse_date_range_absolute_date_range::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool TemplateResponse_date_range_absolute_date_range::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "TemplateResponse_date_range_absolute_date_range" : pathPrefix;

                
    return success;
}

bool TemplateResponse_date_range_absolute_date_range::operator==(const TemplateResponse_date_range_absolute_date_range& rhs) const
{
    return
    
    
    
    ((!typeIsSet() && !rhs.typeIsSet()) || (typeIsSet() && rhs.typeIsSet() && getType() == rhs.getType())) &&
    
    
    ((!startDateIsSet() && !rhs.startDateIsSet()) || (startDateIsSet() && rhs.startDateIsSet() && getStartDate() == rhs.getStartDate())) &&
    
    
    ((!endDateIsSet() && !rhs.endDateIsSet()) || (endDateIsSet() && rhs.endDateIsSet() && getEndDate() == rhs.getEndDate()))
    
    ;
}

bool TemplateResponse_date_range_absolute_date_range::operator!=(const TemplateResponse_date_range_absolute_date_range& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const TemplateResponse_date_range_absolute_date_range& o)
{
    j = nlohmann::json::object();
    if(o.typeIsSet())
        j["type"] = o.m_Type;
    if(o.startDateIsSet())
        j["start_date"] = o.m_Start_date;
    if(o.endDateIsSet())
        j["end_date"] = o.m_End_date;
    
}

void from_json(const nlohmann::json& j, TemplateResponse_date_range_absolute_date_range& o)
{
    if(j.find("type") != j.end())
    {
        j.at("type").get_to(o.m_Type);
        o.m_TypeIsSet = true;
    } 
    if(j.find("start_date") != j.end())
    {
        j.at("start_date").get_to(o.m_Start_date);
        o.m_Start_dateIsSet = true;
    } 
    if(j.find("end_date") != j.end())
    {
        j.at("end_date").get_to(o.m_End_date);
        o.m_End_dateIsSet = true;
    } 
    
}

std::string TemplateResponse_date_range_absolute_date_range::getType() const
{
    return m_Type;
}
void TemplateResponse_date_range_absolute_date_range::setType(std::string const& value)
{
    m_Type = value;
    m_TypeIsSet = true;
}
bool TemplateResponse_date_range_absolute_date_range::typeIsSet() const
{
    return m_TypeIsSet;
}
void TemplateResponse_date_range_absolute_date_range::unsetType()
{
    m_TypeIsSet = false;
}
double TemplateResponse_date_range_absolute_date_range::getStartDate() const
{
    return m_Start_date;
}
void TemplateResponse_date_range_absolute_date_range::setStartDate(double const value)
{
    m_Start_date = value;
    m_Start_dateIsSet = true;
}
bool TemplateResponse_date_range_absolute_date_range::startDateIsSet() const
{
    return m_Start_dateIsSet;
}
void TemplateResponse_date_range_absolute_date_range::unsetStart_date()
{
    m_Start_dateIsSet = false;
}
double TemplateResponse_date_range_absolute_date_range::getEndDate() const
{
    return m_End_date;
}
void TemplateResponse_date_range_absolute_date_range::setEndDate(double const value)
{
    m_End_date = value;
    m_End_dateIsSet = true;
}
bool TemplateResponse_date_range_absolute_date_range::endDateIsSet() const
{
    return m_End_dateIsSet;
}
void TemplateResponse_date_range_absolute_date_range::unsetEnd_date()
{
    m_End_dateIsSet = false;
}


} // namespace org::openapitools::server::model

