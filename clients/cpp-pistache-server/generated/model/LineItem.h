/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * LineItem.h
 *
 * 
 */

#ifndef LineItem_H_
#define LineItem_H_


#include <string>
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// 
/// </summary>
class  LineItem
{
public:
    LineItem();
    virtual ~LineItem() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const LineItem& rhs) const;
    bool operator!=(const LineItem& rhs) const;

    /////////////////////////////////////////////
    /// LineItem members

    /// <summary>
    /// Product brand. For example, \&quot;Parker\&quot;.
    /// </summary>
    std::string getProductBrand() const;
    void setProductBrand(std::string const& value);
    bool productBrandIsSet() const;
    void unsetProduct_brand();
    /// <summary>
    /// Product category. For example, \&quot;Shoes\&quot;.
    /// </summary>
    std::string getProductCategory() const;
    void setProductCategory(std::string const& value);
    bool productCategoryIsSet() const;
    void unsetProduct_category();
    /// <summary>
    /// Product ID. For example, 1414.
    /// </summary>
    int32_t getProductId() const;
    void setProductId(int32_t const value);
    bool productIdIsSet() const;
    void unsetProduct_id();
    /// <summary>
    /// Product name. For example, \&quot;Parker Boots\&quot;.
    /// </summary>
    std::string getProductName() const;
    void setProductName(std::string const& value);
    bool productNameIsSet() const;
    void unsetProduct_name();
    /// <summary>
    /// Product price. For example, \&quot;99.99\&quot;.
    /// </summary>
    std::string getProductPrice() const;
    void setProductPrice(std::string const& value);
    bool productPriceIsSet() const;
    void unsetProduct_price();
    /// <summary>
    /// Product quantity. For example, 2.
    /// </summary>
    int32_t getProductQuantity() const;
    void setProductQuantity(int32_t const value);
    bool productQuantityIsSet() const;
    void unsetProduct_quantity();
    /// <summary>
    /// Product variant. For example, \&quot;Red\&quot;.
    /// </summary>
    std::string getProductVariant() const;
    void setProductVariant(std::string const& value);
    bool productVariantIsSet() const;
    void unsetProduct_variant();
    /// <summary>
    /// Product variant ID. For example, \&quot;1414-34832\&quot;.
    /// </summary>
    std::string getProductVariantId() const;
    void setProductVariantId(std::string const& value);
    bool productVariantIdIsSet() const;
    void unsetProduct_variant_id();

    friend  void to_json(nlohmann::json& j, const LineItem& o);
    friend  void from_json(const nlohmann::json& j, LineItem& o);
protected:
    std::string m_Product_brand;
    bool m_Product_brandIsSet;
    std::string m_Product_category;
    bool m_Product_categoryIsSet;
    int32_t m_Product_id;
    bool m_Product_idIsSet;
    std::string m_Product_name;
    bool m_Product_nameIsSet;
    std::string m_Product_price;
    bool m_Product_priceIsSet;
    int32_t m_Product_quantity;
    bool m_Product_quantityIsSet;
    std::string m_Product_variant;
    bool m_Product_variantIsSet;
    std::string m_Product_variant_id;
    bool m_Product_variant_idIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* LineItem_H_ */
