/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * AdvancedAuctionKey.h
 *
 * Object uniquely identifying a retail catalog item
 */

#ifndef AdvancedAuctionKey_H_
#define AdvancedAuctionKey_H_


#include "Country.h"
#include <string>
#include "Language.h"
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// Object uniquely identifying a retail catalog item
/// </summary>
class  AdvancedAuctionKey
{
public:
    AdvancedAuctionKey();
    virtual ~AdvancedAuctionKey() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const AdvancedAuctionKey& rhs) const;
    bool operator!=(const AdvancedAuctionKey& rhs) const;

    /////////////////////////////////////////////
    /// AdvancedAuctionKey members

    /// <summary>
    /// The catalog retail item id in the merchant namespace
    /// </summary>
    std::string getItemId() const;
    void setItemId(std::string const& value);
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::Country getCountry() const;
    void setCountry(org::openapitools::server::model::Country const& value);
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::Language getLanguage() const;
    void setLanguage(org::openapitools::server::model::Language const& value);

    friend  void to_json(nlohmann::json& j, const AdvancedAuctionKey& o);
    friend  void from_json(const nlohmann::json& j, AdvancedAuctionKey& o);
protected:
    std::string m_Item_id;

    org::openapitools::server::model::Country m_Country;

    org::openapitools::server::model::Language m_Language;

    
};

} // namespace org::openapitools::server::model

#endif /* AdvancedAuctionKey_H_ */
