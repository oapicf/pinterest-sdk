/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "KeywordsRequest.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

KeywordsRequest::KeywordsRequest()
{
    m_Parent_id = "";
    
}

void KeywordsRequest::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool KeywordsRequest::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool KeywordsRequest::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "KeywordsRequest" : pathPrefix;

         
    
    /* Keywords */ {
        const std::vector<org::openapitools::server::model::KeywordsCommon>& value = m_Keywords;
        const std::string currentValuePath = _pathPrefix + ".keywords";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::KeywordsCommon& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".keywords") && success;
 
                i++;
            }
        }

    }
         
    
    /* Parent_id */ {
        const std::string& value = m_Parent_id;
        const std::string currentValuePath = _pathPrefix + ".parentId";
                
        

    }
    
    return success;
}

bool KeywordsRequest::operator==(const KeywordsRequest& rhs) const
{
    return
    
    
    (getKeywords() == rhs.getKeywords())
     &&
    
    (getParentId() == rhs.getParentId())
    
    
    ;
}

bool KeywordsRequest::operator!=(const KeywordsRequest& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const KeywordsRequest& o)
{
    j = nlohmann::json::object();
    j["keywords"] = o.m_Keywords;
    j["parent_id"] = o.m_Parent_id;
    
}

void from_json(const nlohmann::json& j, KeywordsRequest& o)
{
    j.at("keywords").get_to(o.m_Keywords);
    j.at("parent_id").get_to(o.m_Parent_id);
    
}

std::vector<org::openapitools::server::model::KeywordsCommon> KeywordsRequest::getKeywords() const
{
    return m_Keywords;
}
void KeywordsRequest::setKeywords(std::vector<org::openapitools::server::model::KeywordsCommon> const& value)
{
    m_Keywords = value;
}
std::string KeywordsRequest::getParentId() const
{
    return m_Parent_id;
}
void KeywordsRequest::setParentId(std::string const& value)
{
    m_Parent_id = value;
}


} // namespace org::openapitools::server::model

