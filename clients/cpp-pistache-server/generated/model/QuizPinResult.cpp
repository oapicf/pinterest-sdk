/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "QuizPinResult.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

QuizPinResult::QuizPinResult()
{
    m_Organic_pin_id = "";
    m_Organic_pin_idIsSet = false;
    m_Android_deep_link = "";
    m_Android_deep_linkIsSet = false;
    m_Ios_deep_link = "";
    m_Ios_deep_linkIsSet = false;
    m_Destination_url = "";
    m_Destination_urlIsSet = false;
    m_Result_id = 0.0;
    m_Result_idIsSet = false;
    
}

void QuizPinResult::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool QuizPinResult::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool QuizPinResult::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "QuizPinResult" : pathPrefix;

                        
    return success;
}

bool QuizPinResult::operator==(const QuizPinResult& rhs) const
{
    return
    
    
    
    ((!organicPinIdIsSet() && !rhs.organicPinIdIsSet()) || (organicPinIdIsSet() && rhs.organicPinIdIsSet() && getOrganicPinId() == rhs.getOrganicPinId())) &&
    
    
    ((!androidDeepLinkIsSet() && !rhs.androidDeepLinkIsSet()) || (androidDeepLinkIsSet() && rhs.androidDeepLinkIsSet() && getAndroidDeepLink() == rhs.getAndroidDeepLink())) &&
    
    
    ((!iosDeepLinkIsSet() && !rhs.iosDeepLinkIsSet()) || (iosDeepLinkIsSet() && rhs.iosDeepLinkIsSet() && getIosDeepLink() == rhs.getIosDeepLink())) &&
    
    
    ((!destinationUrlIsSet() && !rhs.destinationUrlIsSet()) || (destinationUrlIsSet() && rhs.destinationUrlIsSet() && getDestinationUrl() == rhs.getDestinationUrl())) &&
    
    
    ((!resultIdIsSet() && !rhs.resultIdIsSet()) || (resultIdIsSet() && rhs.resultIdIsSet() && getResultId() == rhs.getResultId()))
    
    ;
}

bool QuizPinResult::operator!=(const QuizPinResult& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const QuizPinResult& o)
{
    j = nlohmann::json::object();
    if(o.organicPinIdIsSet())
        j["organic_pin_id"] = o.m_Organic_pin_id;
    if(o.androidDeepLinkIsSet())
        j["android_deep_link"] = o.m_Android_deep_link;
    if(o.iosDeepLinkIsSet())
        j["ios_deep_link"] = o.m_Ios_deep_link;
    if(o.destinationUrlIsSet())
        j["destination_url"] = o.m_Destination_url;
    if(o.resultIdIsSet())
        j["result_id"] = o.m_Result_id;
    
}

void from_json(const nlohmann::json& j, QuizPinResult& o)
{
    if(j.find("organic_pin_id") != j.end())
    {
        j.at("organic_pin_id").get_to(o.m_Organic_pin_id);
        o.m_Organic_pin_idIsSet = true;
    } 
    if(j.find("android_deep_link") != j.end())
    {
        j.at("android_deep_link").get_to(o.m_Android_deep_link);
        o.m_Android_deep_linkIsSet = true;
    } 
    if(j.find("ios_deep_link") != j.end())
    {
        j.at("ios_deep_link").get_to(o.m_Ios_deep_link);
        o.m_Ios_deep_linkIsSet = true;
    } 
    if(j.find("destination_url") != j.end())
    {
        j.at("destination_url").get_to(o.m_Destination_url);
        o.m_Destination_urlIsSet = true;
    } 
    if(j.find("result_id") != j.end())
    {
        j.at("result_id").get_to(o.m_Result_id);
        o.m_Result_idIsSet = true;
    } 
    
}

std::string QuizPinResult::getOrganicPinId() const
{
    return m_Organic_pin_id;
}
void QuizPinResult::setOrganicPinId(std::string const& value)
{
    m_Organic_pin_id = value;
    m_Organic_pin_idIsSet = true;
}
bool QuizPinResult::organicPinIdIsSet() const
{
    return m_Organic_pin_idIsSet;
}
void QuizPinResult::unsetOrganic_pin_id()
{
    m_Organic_pin_idIsSet = false;
}
std::string QuizPinResult::getAndroidDeepLink() const
{
    return m_Android_deep_link;
}
void QuizPinResult::setAndroidDeepLink(std::string const& value)
{
    m_Android_deep_link = value;
    m_Android_deep_linkIsSet = true;
}
bool QuizPinResult::androidDeepLinkIsSet() const
{
    return m_Android_deep_linkIsSet;
}
void QuizPinResult::unsetAndroid_deep_link()
{
    m_Android_deep_linkIsSet = false;
}
std::string QuizPinResult::getIosDeepLink() const
{
    return m_Ios_deep_link;
}
void QuizPinResult::setIosDeepLink(std::string const& value)
{
    m_Ios_deep_link = value;
    m_Ios_deep_linkIsSet = true;
}
bool QuizPinResult::iosDeepLinkIsSet() const
{
    return m_Ios_deep_linkIsSet;
}
void QuizPinResult::unsetIos_deep_link()
{
    m_Ios_deep_linkIsSet = false;
}
std::string QuizPinResult::getDestinationUrl() const
{
    return m_Destination_url;
}
void QuizPinResult::setDestinationUrl(std::string const& value)
{
    m_Destination_url = value;
    m_Destination_urlIsSet = true;
}
bool QuizPinResult::destinationUrlIsSet() const
{
    return m_Destination_urlIsSet;
}
void QuizPinResult::unsetDestination_url()
{
    m_Destination_urlIsSet = false;
}
double QuizPinResult::getResultId() const
{
    return m_Result_id;
}
void QuizPinResult::setResultId(double const value)
{
    m_Result_id = value;
    m_Result_idIsSet = true;
}
bool QuizPinResult::resultIdIsSet() const
{
    return m_Result_idIsSet;
}
void QuizPinResult::unsetResult_id()
{
    m_Result_idIsSet = false;
}


} // namespace org::openapitools::server::model

