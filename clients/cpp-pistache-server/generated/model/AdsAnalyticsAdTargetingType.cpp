/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "AdsAnalyticsAdTargetingType.h"
#include "Helpers.h"
#include <stdexcept>
#include <sstream>

namespace org::openapitools::server::model
{

AdsAnalyticsAdTargetingType::AdsAnalyticsAdTargetingType()
{
    
}

void AdsAnalyticsAdTargetingType::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool AdsAnalyticsAdTargetingType::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool AdsAnalyticsAdTargetingType::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "AdsAnalyticsAdTargetingType" : pathPrefix;

    
    if (m_value == AdsAnalyticsAdTargetingType::eAdsAnalyticsAdTargetingType::INVALID_VALUE_OPENAPI_GENERATED)
    {
        success = false;
        msg << _pathPrefix << ": has no value;";
    }

    return success;
}

bool AdsAnalyticsAdTargetingType::operator==(const AdsAnalyticsAdTargetingType& rhs) const
{
    return
    getValue() == rhs.getValue()
    
    ;
}

bool AdsAnalyticsAdTargetingType::operator!=(const AdsAnalyticsAdTargetingType& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const AdsAnalyticsAdTargetingType& o)
{
    j = nlohmann::json::object();
    
    switch (o.getValue())
    {
        case AdsAnalyticsAdTargetingType::eAdsAnalyticsAdTargetingType::INVALID_VALUE_OPENAPI_GENERATED:
            j = "INVALID_VALUE_OPENAPI_GENERATED";
            break;
        case AdsAnalyticsAdTargetingType::eAdsAnalyticsAdTargetingType::KEYWORD:
            j = "KEYWORD";
            break;
        case AdsAnalyticsAdTargetingType::eAdsAnalyticsAdTargetingType::APPTYPE:
            j = "APPTYPE";
            break;
        case AdsAnalyticsAdTargetingType::eAdsAnalyticsAdTargetingType::GENDER:
            j = "GENDER";
            break;
        case AdsAnalyticsAdTargetingType::eAdsAnalyticsAdTargetingType::LOCATION:
            j = "LOCATION";
            break;
        case AdsAnalyticsAdTargetingType::eAdsAnalyticsAdTargetingType::PLACEMENT:
            j = "PLACEMENT";
            break;
        case AdsAnalyticsAdTargetingType::eAdsAnalyticsAdTargetingType::COUNTRY:
            j = "COUNTRY";
            break;
        case AdsAnalyticsAdTargetingType::eAdsAnalyticsAdTargetingType::TARGETED_INTEREST:
            j = "TARGETED_INTEREST";
            break;
        case AdsAnalyticsAdTargetingType::eAdsAnalyticsAdTargetingType::PINNER_INTEREST:
            j = "PINNER_INTEREST";
            break;
        case AdsAnalyticsAdTargetingType::eAdsAnalyticsAdTargetingType::AUDIENCE_INCLUDE:
            j = "AUDIENCE_INCLUDE";
            break;
        case AdsAnalyticsAdTargetingType::eAdsAnalyticsAdTargetingType::GEO:
            j = "GEO";
            break;
        case AdsAnalyticsAdTargetingType::eAdsAnalyticsAdTargetingType::AGE_BUCKET:
            j = "AGE_BUCKET";
            break;
        case AdsAnalyticsAdTargetingType::eAdsAnalyticsAdTargetingType::REGION:
            j = "REGION";
            break;
        case AdsAnalyticsAdTargetingType::eAdsAnalyticsAdTargetingType::QUIZ_RESULT:
            j = "QUIZ_RESULT";
            break;
        case AdsAnalyticsAdTargetingType::eAdsAnalyticsAdTargetingType::AGE_BUCKET_AND_GENDER:
            j = "AGE_BUCKET_AND_GENDER";
            break;
    }
}

void from_json(const nlohmann::json& j, AdsAnalyticsAdTargetingType& o)
{
    
    auto s = j.get<std::string>();
    if (s == "KEYWORD") {
     o.setValue(AdsAnalyticsAdTargetingType::eAdsAnalyticsAdTargetingType::KEYWORD);
    } 
    else if (s == "APPTYPE") {
     o.setValue(AdsAnalyticsAdTargetingType::eAdsAnalyticsAdTargetingType::APPTYPE);
    } 
    else if (s == "GENDER") {
     o.setValue(AdsAnalyticsAdTargetingType::eAdsAnalyticsAdTargetingType::GENDER);
    } 
    else if (s == "LOCATION") {
     o.setValue(AdsAnalyticsAdTargetingType::eAdsAnalyticsAdTargetingType::LOCATION);
    } 
    else if (s == "PLACEMENT") {
     o.setValue(AdsAnalyticsAdTargetingType::eAdsAnalyticsAdTargetingType::PLACEMENT);
    } 
    else if (s == "COUNTRY") {
     o.setValue(AdsAnalyticsAdTargetingType::eAdsAnalyticsAdTargetingType::COUNTRY);
    } 
    else if (s == "TARGETED_INTEREST") {
     o.setValue(AdsAnalyticsAdTargetingType::eAdsAnalyticsAdTargetingType::TARGETED_INTEREST);
    } 
    else if (s == "PINNER_INTEREST") {
     o.setValue(AdsAnalyticsAdTargetingType::eAdsAnalyticsAdTargetingType::PINNER_INTEREST);
    } 
    else if (s == "AUDIENCE_INCLUDE") {
     o.setValue(AdsAnalyticsAdTargetingType::eAdsAnalyticsAdTargetingType::AUDIENCE_INCLUDE);
    } 
    else if (s == "GEO") {
     o.setValue(AdsAnalyticsAdTargetingType::eAdsAnalyticsAdTargetingType::GEO);
    } 
    else if (s == "AGE_BUCKET") {
     o.setValue(AdsAnalyticsAdTargetingType::eAdsAnalyticsAdTargetingType::AGE_BUCKET);
    } 
    else if (s == "REGION") {
     o.setValue(AdsAnalyticsAdTargetingType::eAdsAnalyticsAdTargetingType::REGION);
    } 
    else if (s == "QUIZ_RESULT") {
     o.setValue(AdsAnalyticsAdTargetingType::eAdsAnalyticsAdTargetingType::QUIZ_RESULT);
    } 
    else if (s == "AGE_BUCKET_AND_GENDER") {
     o.setValue(AdsAnalyticsAdTargetingType::eAdsAnalyticsAdTargetingType::AGE_BUCKET_AND_GENDER);
    }  else {
     std::stringstream ss;
     ss << "Unexpected value " << s << " in json"
        << " cannot be converted to enum of type"
        << " AdsAnalyticsAdTargetingType::eAdsAnalyticsAdTargetingType";
     throw std::invalid_argument(ss.str());
    } 

}

AdsAnalyticsAdTargetingType::eAdsAnalyticsAdTargetingType AdsAnalyticsAdTargetingType::getValue() const
{
    return m_value;
}
void AdsAnalyticsAdTargetingType::setValue(AdsAnalyticsAdTargetingType::eAdsAnalyticsAdTargetingType value)
{
    m_value = value;
}

} // namespace org::openapitools::server::model

