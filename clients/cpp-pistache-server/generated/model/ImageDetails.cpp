/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ImageDetails.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

ImageDetails::ImageDetails()
{
    m_Width = 0;
    m_Height = 0;
    m_Url = "";
    
}

void ImageDetails::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool ImageDetails::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool ImageDetails::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "ImageDetails" : pathPrefix;

         
    
    /* Width */ {
        const int32_t& value = m_Width;
        const std::string currentValuePath = _pathPrefix + ".width";
                
        
        if (value < 100)
        {
            success = false;
            msg << currentValuePath << ": must be greater than or equal to 100;";
        }

    }
         
    
    /* Height */ {
        const int32_t& value = m_Height;
        const std::string currentValuePath = _pathPrefix + ".height";
                
        
        if (value < 100)
        {
            success = false;
            msg << currentValuePath << ": must be greater than or equal to 100;";
        }

    }
        
    return success;
}

bool ImageDetails::operator==(const ImageDetails& rhs) const
{
    return
    
    
    (getWidth() == rhs.getWidth())
     &&
    
    (getHeight() == rhs.getHeight())
     &&
    
    (getUrl() == rhs.getUrl())
    
    
    ;
}

bool ImageDetails::operator!=(const ImageDetails& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const ImageDetails& o)
{
    j = nlohmann::json::object();
    j["width"] = o.m_Width;
    j["height"] = o.m_Height;
    j["url"] = o.m_Url;
    
}

void from_json(const nlohmann::json& j, ImageDetails& o)
{
    j.at("width").get_to(o.m_Width);
    j.at("height").get_to(o.m_Height);
    j.at("url").get_to(o.m_Url);
    
}

int32_t ImageDetails::getWidth() const
{
    return m_Width;
}
void ImageDetails::setWidth(int32_t const value)
{
    m_Width = value;
}
int32_t ImageDetails::getHeight() const
{
    return m_Height;
}
void ImageDetails::setHeight(int32_t const value)
{
    m_Height = value;
}
std::string ImageDetails::getUrl() const
{
    return m_Url;
}
void ImageDetails::setUrl(std::string const& value)
{
    m_Url = value;
}


} // namespace org::openapitools::server::model

