/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * TemplateResponse.h
 *
 * Template fields
 */

#ifndef TemplateResponse_H_
#define TemplateResponse_H_


#include "Granularity.h"
#include "TemplateResponse_date_range.h"
#include "DataOutputFormat.h"
#include <string>
#include "MetricsReportingLevel.h"
#include <vector>
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// Template fields
/// </summary>
class  TemplateResponse
{
public:
    TemplateResponse();
    virtual ~TemplateResponse() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const TemplateResponse& rhs) const;
    bool operator!=(const TemplateResponse& rhs) const;

    /////////////////////////////////////////////
    /// TemplateResponse members

    /// <summary>
    /// Template ID
    /// </summary>
    std::string getId() const;
    void setId(std::string const& value);
    bool idIsSet() const;
    void unsetId();
    /// <summary>
    /// ID of the Ad Account that owns the template
    /// </summary>
    std::string getAdAccountId() const;
    void setAdAccountId(std::string const& value);
    bool adAccountIdIsSet() const;
    void unsetAd_account_id();
    /// <summary>
    /// IDs of the Ad Accounts that have access to this template
    /// </summary>
    std::vector<std::string> getAdAccountIds() const;
    void setAdAccountIds(std::vector<std::string> const& value);
    bool adAccountIdsIsSet() const;
    void unsetAd_account_ids();
    /// <summary>
    /// ID of the user who created the template
    /// </summary>
    std::string getUserId() const;
    void setUserId(std::string const& value);
    bool userIdIsSet() const;
    void unsetUser_id();
    /// <summary>
    /// Template Name
    /// </summary>
    std::string getName() const;
    void setName(std::string const& value);
    bool nameIsSet() const;
    void unsetName();
    /// <summary>
    /// The number of days prior to the day the report will be delivered at which the report will start
    /// </summary>
    double getReportStartRelativeDaysInPast() const;
    void setReportStartRelativeDaysInPast(double const value);
    bool reportStartRelativeDaysInPastIsSet() const;
    void unsetReport_start_relative_days_in_past();
    /// <summary>
    /// The number of days prior to the day the report will be delivered at which the report will end
    /// </summary>
    double getReportEndRelativeDaysInPast() const;
    void setReportEndRelativeDaysInPast(double const value);
    bool reportEndRelativeDaysInPastIsSet() const;
    void unsetReport_end_relative_days_in_past();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::TemplateResponse_date_range getDateRange() const;
    void setDateRange(org::openapitools::server::model::TemplateResponse_date_range const& value);
    bool dateRangeIsSet() const;
    void unsetDate_range();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::MetricsReportingLevel getReportLevel() const;
    void setReportLevel(org::openapitools::server::model::MetricsReportingLevel const& value);
    bool reportLevelIsSet() const;
    void unsetReport_level();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::DataOutputFormat getReportFormat() const;
    void setReportFormat(org::openapitools::server::model::DataOutputFormat const& value);
    bool reportFormatIsSet() const;
    void unsetReport_format();
    /// <summary>
    /// A list of columns to be included in the report
    /// </summary>
    std::vector<std::string> getColumns() const;
    void setColumns(std::vector<std::string> const& value);
    bool columnsIsSet() const;
    void unsetColumns();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::Granularity getGranularity() const;
    void setGranularity(org::openapitools::server::model::Granularity const& value);
    bool granularityIsSet() const;
    void unsetGranularity();
    /// <summary>
    /// The length of the sliding window over which view conversions will be attributed
    /// </summary>
    double getViewWindowDays() const;
    void setViewWindowDays(double const value);
    bool viewWindowDaysIsSet() const;
    void unsetView_window_days();
    /// <summary>
    /// The length of the sliding window over which click conversions will be attributed
    /// </summary>
    double getClickWindowDays() const;
    void setClickWindowDays(double const value);
    bool clickWindowDaysIsSet() const;
    void unsetClick_window_days();
    /// <summary>
    /// The length of the sliding window over which engagement conversions will be attributed
    /// </summary>
    double getEngagementWindowDays() const;
    void setEngagementWindowDays(double const value);
    bool engagementWindowDaysIsSet() const;
    void unsetEngagement_window_days();
    /// <summary>
    /// Conversion report time type
    /// </summary>
    std::string getConversionReportTimeType() const;
    void setConversionReportTimeType(std::string const& value);
    bool conversionReportTimeTypeIsSet() const;
    void unsetConversion_report_time_type();
    /// <summary>
    /// A JSON representation of any filters to be applied before returning report data. Each filter object should contain all of the following fields:&lt;br&gt; \&quot;field\&quot;: The column name&lt;br&gt; \&quot;operator\&quot;: The operator. Allowed operators: [\&quot;&#x3D;\&quot;, \&quot;!&#x3D;\&quot;, \&quot;in\&quot;, \&quot;not_in\&quot;, \&quot;~\&quot;, \&quot;&gt;\&quot;, \&quot;&lt;\&quot;, \&quot;contains_substring\&quot;]&lt;br&gt; \&quot;value\&quot;: A single value or a list of values
    /// </summary>
    std::string getFiltersJson() const;
    void setFiltersJson(std::string const& value);
    bool filtersJsonIsSet() const;
    void unsetFilters_json();
    /// <summary>
    /// A boolean value that indicates if the user owns the template
    /// </summary>
    bool isIsOwnedByUser() const;
    void setIsOwnedByUser(bool const value);
    bool isOwnedByUserIsSet() const;
    void unsetIs_owned_by_user();
    /// <summary>
    /// A boolean value that indicates if this template has been used to create a scheduled report
    /// </summary>
    bool isIsScheduled() const;
    void setIsScheduled(bool const value);
    bool isScheduledIsSet() const;
    void unsetIs_scheduled();
    /// <summary>
    /// The surface used to create this template
    /// </summary>
    std::string getCreationSource() const;
    void setCreationSource(std::string const& value);
    bool creationSourceIsSet() const;
    void unsetCreation_source();
    /// <summary>
    /// A boolean that indicates if the template has been deleted
    /// </summary>
    bool isIsDeleted() const;
    void setIsDeleted(bool const value);
    bool isDeletedIsSet() const;
    void unsetIs_deleted();
    /// <summary>
    /// Time of last update in seconds since Unix epoch
    /// </summary>
    double getUpdatedTime() const;
    void setUpdatedTime(double const value);
    bool updatedTimeIsSet() const;
    void unsetUpdated_time();
    /// <summary>
    /// A list of custom column IDs
    /// </summary>
    std::vector<std::string> getCustomColumnIds() const;
    void setCustomColumnIds(std::vector<std::string> const& value);
    bool customColumnIdsIsSet() const;
    void unsetCustom_column_ids();
    /// <summary>
    /// Reporting template type
    /// </summary>
    std::string getType() const;
    void setType(std::string const& value);
    bool typeIsSet() const;
    void unsetType();
    /// <summary>
    /// The filter on the conversion ingestion source method for conversion metrics
    /// </summary>
    std::vector<std::string> getIngestionSources() const;
    void setIngestionSources(std::vector<std::string> const& value);
    bool ingestionSourcesIsSet() const;
    void unsetIngestion_sources();

    friend  void to_json(nlohmann::json& j, const TemplateResponse& o);
    friend  void from_json(const nlohmann::json& j, TemplateResponse& o);
protected:
    std::string m_Id;
    bool m_IdIsSet;
    std::string m_Ad_account_id;
    bool m_Ad_account_idIsSet;
    std::vector<std::string> m_Ad_account_ids;
    bool m_Ad_account_idsIsSet;
    std::string m_User_id;
    bool m_User_idIsSet;
    std::string m_Name;
    bool m_NameIsSet;
    double m_Report_start_relative_days_in_past;
    bool m_Report_start_relative_days_in_pastIsSet;
    double m_Report_end_relative_days_in_past;
    bool m_Report_end_relative_days_in_pastIsSet;
    org::openapitools::server::model::TemplateResponse_date_range m_Date_range;
    bool m_Date_rangeIsSet;
    org::openapitools::server::model::MetricsReportingLevel m_Report_level;
    bool m_Report_levelIsSet;
    org::openapitools::server::model::DataOutputFormat m_Report_format;
    bool m_Report_formatIsSet;
    std::vector<std::string> m_Columns;
    bool m_ColumnsIsSet;
    org::openapitools::server::model::Granularity m_Granularity;
    bool m_GranularityIsSet;
    double m_View_window_days;
    bool m_View_window_daysIsSet;
    double m_Click_window_days;
    bool m_Click_window_daysIsSet;
    double m_Engagement_window_days;
    bool m_Engagement_window_daysIsSet;
    std::string m_Conversion_report_time_type;
    bool m_Conversion_report_time_typeIsSet;
    std::string m_Filters_json;
    bool m_Filters_jsonIsSet;
    bool m_Is_owned_by_user;
    bool m_Is_owned_by_userIsSet;
    bool m_Is_scheduled;
    bool m_Is_scheduledIsSet;
    std::string m_Creation_source;
    bool m_Creation_sourceIsSet;
    bool m_Is_deleted;
    bool m_Is_deletedIsSet;
    double m_Updated_time;
    bool m_Updated_timeIsSet;
    std::vector<std::string> m_Custom_column_ids;
    bool m_Custom_column_idsIsSet;
    std::string m_Type;
    bool m_TypeIsSet;
    std::vector<std::string> m_Ingestion_sources;
    bool m_Ingestion_sourcesIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* TemplateResponse_H_ */
