/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "CatalogsReportDistributionIssueFilter.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

CatalogsReportDistributionIssueFilter::CatalogsReportDistributionIssueFilter()
{
    m_Report_type = "";
    m_Catalog_id = "";
    m_Catalog_idIsSet = false;
    
}

void CatalogsReportDistributionIssueFilter::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool CatalogsReportDistributionIssueFilter::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool CatalogsReportDistributionIssueFilter::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "CatalogsReportDistributionIssueFilter" : pathPrefix;

             
    if (catalogIdIsSet())
    {
        const std::string& value = m_Catalog_id;
        const std::string currentValuePath = _pathPrefix + ".catalogId";
                
        

    }
    
    return success;
}

bool CatalogsReportDistributionIssueFilter::operator==(const CatalogsReportDistributionIssueFilter& rhs) const
{
    return
    
    
    (getReportType() == rhs.getReportType())
     &&
    
    
    ((!catalogIdIsSet() && !rhs.catalogIdIsSet()) || (catalogIdIsSet() && rhs.catalogIdIsSet() && getCatalogId() == rhs.getCatalogId()))
    
    ;
}

bool CatalogsReportDistributionIssueFilter::operator!=(const CatalogsReportDistributionIssueFilter& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const CatalogsReportDistributionIssueFilter& o)
{
    j = nlohmann::json::object();
    j["report_type"] = o.m_Report_type;
    if(o.catalogIdIsSet())
        j["catalog_id"] = o.m_Catalog_id;
    
}

void from_json(const nlohmann::json& j, CatalogsReportDistributionIssueFilter& o)
{
    j.at("report_type").get_to(o.m_Report_type);
    if(j.find("catalog_id") != j.end())
    {
        j.at("catalog_id").get_to(o.m_Catalog_id);
        o.m_Catalog_idIsSet = true;
    } 
    
}

std::string CatalogsReportDistributionIssueFilter::getReportType() const
{
    return m_Report_type;
}
void CatalogsReportDistributionIssueFilter::setReportType(std::string const& value)
{
    m_Report_type = value;
}
std::string CatalogsReportDistributionIssueFilter::getCatalogId() const
{
    return m_Catalog_id;
}
void CatalogsReportDistributionIssueFilter::setCatalogId(std::string const& value)
{
    m_Catalog_id = value;
    m_Catalog_idIsSet = true;
}
bool CatalogsReportDistributionIssueFilter::catalogIdIsSet() const
{
    return m_Catalog_idIsSet;
}
void CatalogsReportDistributionIssueFilter::unsetCatalog_id()
{
    m_Catalog_idIsSet = false;
}


} // namespace org::openapitools::server::model

