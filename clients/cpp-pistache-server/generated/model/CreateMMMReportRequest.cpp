/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "CreateMMMReportRequest.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

CreateMMMReportRequest::CreateMMMReportRequest()
{
    m_Report_name = "";
    m_Start_date = "";
    m_End_date = "";
    m_Granularity = "";
    m_Level = "";
    m_CountriesIsSet = false;
    
}

void CreateMMMReportRequest::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool CreateMMMReportRequest::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool CreateMMMReportRequest::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "CreateMMMReportRequest" : pathPrefix;

             
    
    /* Start_date */ {
        const std::string& value = m_Start_date;
        const std::string currentValuePath = _pathPrefix + ".startDate";
                
        

    }
         
    
    /* End_date */ {
        const std::string& value = m_End_date;
        const std::string currentValuePath = _pathPrefix + ".endDate";
                
        

    }
                 
    
    /* Targeting_types */ {
        const std::vector<org::openapitools::server::model::MMMReportingTargetingType>& value = m_Targeting_types;
        const std::string currentValuePath = _pathPrefix + ".targetingTypes";
                
        
        if (value.size() < 1)
        {
            success = false;
            msg << currentValuePath << ": must have at least 1 elements;";
        }
        if (value.size() > 5)
        {
            success = false;
            msg << currentValuePath << ": must have at most 5 elements;";
        }
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::MMMReportingTargetingType& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath) && success;
        
        
 
                i++;
            }
        }

    }
         
    
    /* Columns */ {
        const std::vector<org::openapitools::server::model::MMMReportingColumn>& value = m_Columns;
        const std::string currentValuePath = _pathPrefix + ".columns";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::MMMReportingColumn& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath) && success;
        
        
 
                i++;
            }
        }

    }
         
    if (countriesIsSet())
    {
        const std::vector<org::openapitools::server::model::TargetingAdvertiserCountry>& value = m_Countries;
        const std::string currentValuePath = _pathPrefix + ".countries";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::TargetingAdvertiserCountry& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath) && success;
        
        
 
                i++;
            }
        }

    }
    
    return success;
}

bool CreateMMMReportRequest::operator==(const CreateMMMReportRequest& rhs) const
{
    return
    
    
    (getReportName() == rhs.getReportName())
     &&
    
    (getStartDate() == rhs.getStartDate())
     &&
    
    (getEndDate() == rhs.getEndDate())
     &&
    
    (getGranularity() == rhs.getGranularity())
     &&
    
    (getLevel() == rhs.getLevel())
     &&
    
    (getTargetingTypes() == rhs.getTargetingTypes())
     &&
    
    (getColumns() == rhs.getColumns())
     &&
    
    
    ((!countriesIsSet() && !rhs.countriesIsSet()) || (countriesIsSet() && rhs.countriesIsSet() && getCountries() == rhs.getCountries()))
    
    ;
}

bool CreateMMMReportRequest::operator!=(const CreateMMMReportRequest& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const CreateMMMReportRequest& o)
{
    j = nlohmann::json::object();
    j["report_name"] = o.m_Report_name;
    j["start_date"] = o.m_Start_date;
    j["end_date"] = o.m_End_date;
    j["granularity"] = o.m_Granularity;
    j["level"] = o.m_Level;
    j["targeting_types"] = o.m_Targeting_types;
    j["columns"] = o.m_Columns;
    if(o.countriesIsSet() || !o.m_Countries.empty())
        j["countries"] = o.m_Countries;
    
}

void from_json(const nlohmann::json& j, CreateMMMReportRequest& o)
{
    j.at("report_name").get_to(o.m_Report_name);
    j.at("start_date").get_to(o.m_Start_date);
    j.at("end_date").get_to(o.m_End_date);
    j.at("granularity").get_to(o.m_Granularity);
    j.at("level").get_to(o.m_Level);
    j.at("targeting_types").get_to(o.m_Targeting_types);
    j.at("columns").get_to(o.m_Columns);
    if(j.find("countries") != j.end())
    {
        j.at("countries").get_to(o.m_Countries);
        o.m_CountriesIsSet = true;
    } 
    
}

std::string CreateMMMReportRequest::getReportName() const
{
    return m_Report_name;
}
void CreateMMMReportRequest::setReportName(std::string const& value)
{
    m_Report_name = value;
}
std::string CreateMMMReportRequest::getStartDate() const
{
    return m_Start_date;
}
void CreateMMMReportRequest::setStartDate(std::string const& value)
{
    m_Start_date = value;
}
std::string CreateMMMReportRequest::getEndDate() const
{
    return m_End_date;
}
void CreateMMMReportRequest::setEndDate(std::string const& value)
{
    m_End_date = value;
}
std::string CreateMMMReportRequest::getGranularity() const
{
    return m_Granularity;
}
void CreateMMMReportRequest::setGranularity(std::string const& value)
{
    m_Granularity = value;
}
std::string CreateMMMReportRequest::getLevel() const
{
    return m_Level;
}
void CreateMMMReportRequest::setLevel(std::string const& value)
{
    m_Level = value;
}
std::vector<org::openapitools::server::model::MMMReportingTargetingType> CreateMMMReportRequest::getTargetingTypes() const
{
    return m_Targeting_types;
}
void CreateMMMReportRequest::setTargetingTypes(std::vector<org::openapitools::server::model::MMMReportingTargetingType> const& value)
{
    m_Targeting_types = value;
}
std::vector<org::openapitools::server::model::MMMReportingColumn> CreateMMMReportRequest::getColumns() const
{
    return m_Columns;
}
void CreateMMMReportRequest::setColumns(std::vector<org::openapitools::server::model::MMMReportingColumn> const& value)
{
    m_Columns = value;
}
std::vector<org::openapitools::server::model::TargetingAdvertiserCountry> CreateMMMReportRequest::getCountries() const
{
    return m_Countries;
}
void CreateMMMReportRequest::setCountries(std::vector<org::openapitools::server::model::TargetingAdvertiserCountry> const& value)
{
    m_Countries = value;
    m_CountriesIsSet = true;
}
bool CreateMMMReportRequest::countriesIsSet() const
{
    return m_CountriesIsSet;
}
void CreateMMMReportRequest::unsetCountries()
{
    m_CountriesIsSet = false;
}


} // namespace org::openapitools::server::model

