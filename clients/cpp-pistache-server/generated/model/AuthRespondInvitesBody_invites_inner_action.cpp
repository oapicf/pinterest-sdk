/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "AuthRespondInvitesBody_invites_inner_action.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

AuthRespondInvitesBody_invites_inner_action::AuthRespondInvitesBody_invites_inner_action()
{
    m_Accept_invite = false;
    m_Asset_id_to_permissionsIsSet = false;
    
}

void AuthRespondInvitesBody_invites_inner_action::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool AuthRespondInvitesBody_invites_inner_action::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool AuthRespondInvitesBody_invites_inner_action::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "AuthRespondInvitesBody_invites_inner_action" : pathPrefix;

             
    if (assetIdToPermissionsIsSet())
    {
        const std::map<std::string, std::vector<org::openapitools::server::model::Permissions>>& value = m_Asset_id_to_permissions;
        const std::string currentValuePath = _pathPrefix + ".assetIdToPermissions";
                
        

    }
    
    return success;
}

bool AuthRespondInvitesBody_invites_inner_action::operator==(const AuthRespondInvitesBody_invites_inner_action& rhs) const
{
    return
    
    
    (isAcceptInvite() == rhs.isAcceptInvite())
     &&
    
    
    ((!assetIdToPermissionsIsSet() && !rhs.assetIdToPermissionsIsSet()) || (assetIdToPermissionsIsSet() && rhs.assetIdToPermissionsIsSet() && getAssetIdToPermissions() == rhs.getAssetIdToPermissions()))
    
    ;
}

bool AuthRespondInvitesBody_invites_inner_action::operator!=(const AuthRespondInvitesBody_invites_inner_action& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const AuthRespondInvitesBody_invites_inner_action& o)
{
    j = nlohmann::json::object();
    j["accept_invite"] = o.m_Accept_invite;
    if(o.assetIdToPermissionsIsSet() || !o.m_Asset_id_to_permissions.empty())
        j["asset_id_to_permissions"] = o.m_Asset_id_to_permissions;
    
}

void from_json(const nlohmann::json& j, AuthRespondInvitesBody_invites_inner_action& o)
{
    j.at("accept_invite").get_to(o.m_Accept_invite);
    if(j.find("asset_id_to_permissions") != j.end())
    {
        j.at("asset_id_to_permissions").get_to(o.m_Asset_id_to_permissions);
        o.m_Asset_id_to_permissionsIsSet = true;
    } 
    
}

bool AuthRespondInvitesBody_invites_inner_action::isAcceptInvite() const
{
    return m_Accept_invite;
}
void AuthRespondInvitesBody_invites_inner_action::setAcceptInvite(bool const value)
{
    m_Accept_invite = value;
}
std::map<std::string, std::vector<org::openapitools::server::model::Permissions>> AuthRespondInvitesBody_invites_inner_action::getAssetIdToPermissions() const
{
    return m_Asset_id_to_permissions;
}
void AuthRespondInvitesBody_invites_inner_action::setAssetIdToPermissions(std::map<std::string, std::vector<org::openapitools::server::model::Permissions>> const& value)
{
    m_Asset_id_to_permissions = value;
    m_Asset_id_to_permissionsIsSet = true;
}
bool AuthRespondInvitesBody_invites_inner_action::assetIdToPermissionsIsSet() const
{
    return m_Asset_id_to_permissionsIsSet;
}
void AuthRespondInvitesBody_invites_inner_action::unsetAsset_id_to_permissions()
{
    m_Asset_id_to_permissionsIsSet = false;
}


} // namespace org::openapitools::server::model

