/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "BidFloorRequest.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

BidFloorRequest::BidFloorRequest()
{
    m_Targeting_specIsSet = false;
    
}

void BidFloorRequest::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool BidFloorRequest::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool BidFloorRequest::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "BidFloorRequest" : pathPrefix;

         
    
    /* Bid_floor_specs */ {
        const std::vector<org::openapitools::server::model::BidFloorSpec>& value = m_Bid_floor_specs;
        const std::string currentValuePath = _pathPrefix + ".bidFloorSpecs";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::BidFloorSpec& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".bidFloorSpecs") && success;
 
                i++;
            }
        }

    }
        
    return success;
}

bool BidFloorRequest::operator==(const BidFloorRequest& rhs) const
{
    return
    
    
    (getBidFloorSpecs() == rhs.getBidFloorSpecs())
     &&
    
    
    ((!targetingSpecIsSet() && !rhs.targetingSpecIsSet()) || (targetingSpecIsSet() && rhs.targetingSpecIsSet() && getTargetingSpec() == rhs.getTargetingSpec()))
    
    ;
}

bool BidFloorRequest::operator!=(const BidFloorRequest& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const BidFloorRequest& o)
{
    j = nlohmann::json::object();
    j["bid_floor_specs"] = o.m_Bid_floor_specs;
    if(o.targetingSpecIsSet())
        j["targeting_spec"] = o.m_Targeting_spec;
    
}

void from_json(const nlohmann::json& j, BidFloorRequest& o)
{
    j.at("bid_floor_specs").get_to(o.m_Bid_floor_specs);
    if(j.find("targeting_spec") != j.end())
    {
        j.at("targeting_spec").get_to(o.m_Targeting_spec);
        o.m_Targeting_specIsSet = true;
    } 
    
}

std::vector<org::openapitools::server::model::BidFloorSpec> BidFloorRequest::getBidFloorSpecs() const
{
    return m_Bid_floor_specs;
}
void BidFloorRequest::setBidFloorSpecs(std::vector<org::openapitools::server::model::BidFloorSpec> const& value)
{
    m_Bid_floor_specs = value;
}
org::openapitools::server::model::TargetingSpec BidFloorRequest::getTargetingSpec() const
{
    return m_Targeting_spec;
}
void BidFloorRequest::setTargetingSpec(org::openapitools::server::model::TargetingSpec const& value)
{
    m_Targeting_spec = value;
    m_Targeting_specIsSet = true;
}
bool BidFloorRequest::targetingSpecIsSet() const
{
    return m_Targeting_specIsSet;
}
void BidFloorRequest::unsetTargeting_spec()
{
    m_Targeting_specIsSet = false;
}


} // namespace org::openapitools::server::model

