/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "CreateAssetInvitesRequestItem.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

CreateAssetInvitesRequestItem::CreateAssetInvitesRequestItem()
{
    m_Invite_id = "";
    
}

void CreateAssetInvitesRequestItem::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool CreateAssetInvitesRequestItem::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool CreateAssetInvitesRequestItem::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "CreateAssetInvitesRequestItem" : pathPrefix;

         
    
    /* Invite_id */ {
        const std::string& value = m_Invite_id;
        const std::string currentValuePath = _pathPrefix + ".inviteId";
                
        

    }
             
    
    /* Asset_id_to_permissions */ {
        const std::map<std::string, std::vector<org::openapitools::server::model::Permissions>>& value = m_Asset_id_to_permissions;
        const std::string currentValuePath = _pathPrefix + ".assetIdToPermissions";
                
        

    }
    
    return success;
}

bool CreateAssetInvitesRequestItem::operator==(const CreateAssetInvitesRequestItem& rhs) const
{
    return
    
    
    (getInviteId() == rhs.getInviteId())
     &&
    
    (getInviteType() == rhs.getInviteType())
     &&
    
    (getAssetIdToPermissions() == rhs.getAssetIdToPermissions())
    
    
    ;
}

bool CreateAssetInvitesRequestItem::operator!=(const CreateAssetInvitesRequestItem& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const CreateAssetInvitesRequestItem& o)
{
    j = nlohmann::json::object();
    j["invite_id"] = o.m_Invite_id;
    j["invite_type"] = o.m_Invite_type;
    j["asset_id_to_permissions"] = o.m_Asset_id_to_permissions;
    
}

void from_json(const nlohmann::json& j, CreateAssetInvitesRequestItem& o)
{
    j.at("invite_id").get_to(o.m_Invite_id);
    j.at("invite_type").get_to(o.m_Invite_type);
    j.at("asset_id_to_permissions").get_to(o.m_Asset_id_to_permissions);
    
}

std::string CreateAssetInvitesRequestItem::getInviteId() const
{
    return m_Invite_id;
}
void CreateAssetInvitesRequestItem::setInviteId(std::string const& value)
{
    m_Invite_id = value;
}
org::openapitools::server::model::InviteType CreateAssetInvitesRequestItem::getInviteType() const
{
    return m_Invite_type;
}
void CreateAssetInvitesRequestItem::setInviteType(org::openapitools::server::model::InviteType const& value)
{
    m_Invite_type = value;
}
std::map<std::string, std::vector<org::openapitools::server::model::Permissions>> CreateAssetInvitesRequestItem::getAssetIdToPermissions() const
{
    return m_Asset_id_to_permissions;
}
void CreateAssetInvitesRequestItem::setAssetIdToPermissions(std::map<std::string, std::vector<org::openapitools::server::model::Permissions>> const& value)
{
    m_Asset_id_to_permissions = value;
}


} // namespace org::openapitools::server::model

