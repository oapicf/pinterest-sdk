/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "IntegrationLogClientError.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

IntegrationLogClientError::IntegrationLogClientError()
{
    m_Cause = "";
    m_CauseIsSet = false;
    m_Column_number = 0;
    m_Column_numberIsSet = false;
    m_File_name = "";
    m_File_nameIsSet = false;
    m_Line_number = 0;
    m_Line_numberIsSet = false;
    m_Message = "";
    m_MessageIsSet = false;
    m_Message_detail = "";
    m_Message_detailIsSet = false;
    m_Name = "";
    m_NameIsSet = false;
    m_number = 0;
    m_numberIsSet = false;
    m_Stack_trace = "";
    m_Stack_traceIsSet = false;
    
}

void IntegrationLogClientError::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool IntegrationLogClientError::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool IntegrationLogClientError::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "IntegrationLogClientError" : pathPrefix;

         
    if (causeIsSet())
    {
        const std::string& value = m_Cause;
        const std::string currentValuePath = _pathPrefix + ".cause";
                
        
        if (value.length() > 512)
        {
            success = false;
            msg << currentValuePath << ": must be at most 512 characters long;";
        }

    }
             
    if (fileNameIsSet())
    {
        const std::string& value = m_File_name;
        const std::string currentValuePath = _pathPrefix + ".fileName";
                
        
        if (value.length() > 256)
        {
            success = false;
            msg << currentValuePath << ": must be at most 256 characters long;";
        }

    }
             
    if (messageIsSet())
    {
        const std::string& value = m_Message;
        const std::string currentValuePath = _pathPrefix + ".message";
                
        
        if (value.length() > 512)
        {
            success = false;
            msg << currentValuePath << ": must be at most 512 characters long;";
        }

    }
         
    if (messageDetailIsSet())
    {
        const std::string& value = m_Message_detail;
        const std::string currentValuePath = _pathPrefix + ".messageDetail";
                
        
        if (value.length() > 1024)
        {
            success = false;
            msg << currentValuePath << ": must be at most 1024 characters long;";
        }

    }
         
    if (nameIsSet())
    {
        const std::string& value = m_Name;
        const std::string currentValuePath = _pathPrefix + ".name";
                
        
        if (value.length() > 256)
        {
            success = false;
            msg << currentValuePath << ": must be at most 256 characters long;";
        }

    }
            
    return success;
}

bool IntegrationLogClientError::operator==(const IntegrationLogClientError& rhs) const
{
    return
    
    
    
    ((!causeIsSet() && !rhs.causeIsSet()) || (causeIsSet() && rhs.causeIsSet() && getCause() == rhs.getCause())) &&
    
    
    ((!columnNumberIsSet() && !rhs.columnNumberIsSet()) || (columnNumberIsSet() && rhs.columnNumberIsSet() && getColumnNumber() == rhs.getColumnNumber())) &&
    
    
    ((!fileNameIsSet() && !rhs.fileNameIsSet()) || (fileNameIsSet() && rhs.fileNameIsSet() && getFileName() == rhs.getFileName())) &&
    
    
    ((!lineNumberIsSet() && !rhs.lineNumberIsSet()) || (lineNumberIsSet() && rhs.lineNumberIsSet() && getLineNumber() == rhs.getLineNumber())) &&
    
    
    ((!messageIsSet() && !rhs.messageIsSet()) || (messageIsSet() && rhs.messageIsSet() && getMessage() == rhs.getMessage())) &&
    
    
    ((!messageDetailIsSet() && !rhs.messageDetailIsSet()) || (messageDetailIsSet() && rhs.messageDetailIsSet() && getMessageDetail() == rhs.getMessageDetail())) &&
    
    
    ((!nameIsSet() && !rhs.nameIsSet()) || (nameIsSet() && rhs.nameIsSet() && getName() == rhs.getName())) &&
    
    
    ((!numberIsSet() && !rhs.numberIsSet()) || (numberIsSet() && rhs.numberIsSet() && getNumber() == rhs.getNumber())) &&
    
    
    ((!stackTraceIsSet() && !rhs.stackTraceIsSet()) || (stackTraceIsSet() && rhs.stackTraceIsSet() && getStackTrace() == rhs.getStackTrace()))
    
    ;
}

bool IntegrationLogClientError::operator!=(const IntegrationLogClientError& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const IntegrationLogClientError& o)
{
    j = nlohmann::json::object();
    if(o.causeIsSet())
        j["cause"] = o.m_Cause;
    if(o.columnNumberIsSet())
        j["column_number"] = o.m_Column_number;
    if(o.fileNameIsSet())
        j["file_name"] = o.m_File_name;
    if(o.lineNumberIsSet())
        j["line_number"] = o.m_Line_number;
    if(o.messageIsSet())
        j["message"] = o.m_Message;
    if(o.messageDetailIsSet())
        j["message_detail"] = o.m_Message_detail;
    if(o.nameIsSet())
        j["name"] = o.m_Name;
    if(o.numberIsSet())
        j["number"] = o.m_number;
    if(o.stackTraceIsSet())
        j["stack_trace"] = o.m_Stack_trace;
    
}

void from_json(const nlohmann::json& j, IntegrationLogClientError& o)
{
    if(j.find("cause") != j.end())
    {
        j.at("cause").get_to(o.m_Cause);
        o.m_CauseIsSet = true;
    } 
    if(j.find("column_number") != j.end())
    {
        j.at("column_number").get_to(o.m_Column_number);
        o.m_Column_numberIsSet = true;
    } 
    if(j.find("file_name") != j.end())
    {
        j.at("file_name").get_to(o.m_File_name);
        o.m_File_nameIsSet = true;
    } 
    if(j.find("line_number") != j.end())
    {
        j.at("line_number").get_to(o.m_Line_number);
        o.m_Line_numberIsSet = true;
    } 
    if(j.find("message") != j.end())
    {
        j.at("message").get_to(o.m_Message);
        o.m_MessageIsSet = true;
    } 
    if(j.find("message_detail") != j.end())
    {
        j.at("message_detail").get_to(o.m_Message_detail);
        o.m_Message_detailIsSet = true;
    } 
    if(j.find("name") != j.end())
    {
        j.at("name").get_to(o.m_Name);
        o.m_NameIsSet = true;
    } 
    if(j.find("number") != j.end())
    {
        j.at("number").get_to(o.m_number);
        o.m_numberIsSet = true;
    } 
    if(j.find("stack_trace") != j.end())
    {
        j.at("stack_trace").get_to(o.m_Stack_trace);
        o.m_Stack_traceIsSet = true;
    } 
    
}

std::string IntegrationLogClientError::getCause() const
{
    return m_Cause;
}
void IntegrationLogClientError::setCause(std::string const& value)
{
    m_Cause = value;
    m_CauseIsSet = true;
}
bool IntegrationLogClientError::causeIsSet() const
{
    return m_CauseIsSet;
}
void IntegrationLogClientError::unsetCause()
{
    m_CauseIsSet = false;
}
int32_t IntegrationLogClientError::getColumnNumber() const
{
    return m_Column_number;
}
void IntegrationLogClientError::setColumnNumber(int32_t const value)
{
    m_Column_number = value;
    m_Column_numberIsSet = true;
}
bool IntegrationLogClientError::columnNumberIsSet() const
{
    return m_Column_numberIsSet;
}
void IntegrationLogClientError::unsetColumn_number()
{
    m_Column_numberIsSet = false;
}
std::string IntegrationLogClientError::getFileName() const
{
    return m_File_name;
}
void IntegrationLogClientError::setFileName(std::string const& value)
{
    m_File_name = value;
    m_File_nameIsSet = true;
}
bool IntegrationLogClientError::fileNameIsSet() const
{
    return m_File_nameIsSet;
}
void IntegrationLogClientError::unsetFile_name()
{
    m_File_nameIsSet = false;
}
int32_t IntegrationLogClientError::getLineNumber() const
{
    return m_Line_number;
}
void IntegrationLogClientError::setLineNumber(int32_t const value)
{
    m_Line_number = value;
    m_Line_numberIsSet = true;
}
bool IntegrationLogClientError::lineNumberIsSet() const
{
    return m_Line_numberIsSet;
}
void IntegrationLogClientError::unsetLine_number()
{
    m_Line_numberIsSet = false;
}
std::string IntegrationLogClientError::getMessage() const
{
    return m_Message;
}
void IntegrationLogClientError::setMessage(std::string const& value)
{
    m_Message = value;
    m_MessageIsSet = true;
}
bool IntegrationLogClientError::messageIsSet() const
{
    return m_MessageIsSet;
}
void IntegrationLogClientError::unsetMessage()
{
    m_MessageIsSet = false;
}
std::string IntegrationLogClientError::getMessageDetail() const
{
    return m_Message_detail;
}
void IntegrationLogClientError::setMessageDetail(std::string const& value)
{
    m_Message_detail = value;
    m_Message_detailIsSet = true;
}
bool IntegrationLogClientError::messageDetailIsSet() const
{
    return m_Message_detailIsSet;
}
void IntegrationLogClientError::unsetMessage_detail()
{
    m_Message_detailIsSet = false;
}
std::string IntegrationLogClientError::getName() const
{
    return m_Name;
}
void IntegrationLogClientError::setName(std::string const& value)
{
    m_Name = value;
    m_NameIsSet = true;
}
bool IntegrationLogClientError::nameIsSet() const
{
    return m_NameIsSet;
}
void IntegrationLogClientError::unsetName()
{
    m_NameIsSet = false;
}
int32_t IntegrationLogClientError::getNumber() const
{
    return m_number;
}
void IntegrationLogClientError::setNumber(int32_t const value)
{
    m_number = value;
    m_numberIsSet = true;
}
bool IntegrationLogClientError::numberIsSet() const
{
    return m_numberIsSet;
}
void IntegrationLogClientError::unsetnumber()
{
    m_numberIsSet = false;
}
std::string IntegrationLogClientError::getStackTrace() const
{
    return m_Stack_trace;
}
void IntegrationLogClientError::setStackTrace(std::string const& value)
{
    m_Stack_trace = value;
    m_Stack_traceIsSet = true;
}
bool IntegrationLogClientError::stackTraceIsSet() const
{
    return m_Stack_traceIsSet;
}
void IntegrationLogClientError::unsetStack_trace()
{
    m_Stack_traceIsSet = false;
}


} // namespace org::openapitools::server::model

