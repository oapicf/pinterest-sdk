/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "AudienceRule.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

AudienceRule::AudienceRule()
{
    m_Country = "";
    m_CountryIsSet = false;
    m_Customer_list_id = "";
    m_Customer_list_idIsSet = false;
    m_Engagement_domainIsSet = false;
    m_Engagement_type = "";
    m_Engagement_typeIsSet = false;
    m_Event = "";
    m_EventIsSet = false;
    m_Event_dataIsSet = false;
    m_Percentage = 0;
    m_PercentageIsSet = false;
    m_Pin_idIsSet = false;
    m_Prefill = false;
    m_PrefillIsSet = false;
    m_Retention_days = 0;
    m_Retention_daysIsSet = false;
    m_Seed_idIsSet = false;
    m_UrlIsSet = false;
    m_Visitor_source_id = "";
    m_Visitor_source_idIsSet = false;
    m_Event_sourceIsSet = false;
    m_Ingestion_sourceIsSet = false;
    m_Engager_type = 0;
    m_Engager_typeIsSet = false;
    m_Campaign_idIsSet = false;
    m_Ad_idIsSet = false;
    m_Objective_typeIsSet = false;
    m_Ad_account_id = "";
    m_Ad_account_idIsSet = false;
    
}

void AudienceRule::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool AudienceRule::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool AudienceRule::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "AudienceRule" : pathPrefix;

             
    if (customerListIdIsSet())
    {
        const std::string& value = m_Customer_list_id;
        const std::string currentValuePath = _pathPrefix + ".customerListId";
                
        

    }
         
    if (engagementDomainIsSet())
    {
        const std::vector<std::string>& value = m_Engagement_domain;
        const std::string currentValuePath = _pathPrefix + ".engagementDomain";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const std::string& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }

    }
                         
    if (pinIdIsSet())
    {
        const std::vector<std::string>& value = m_Pin_id;
        const std::string currentValuePath = _pathPrefix + ".pinId";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const std::string& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }

    }
                 
    if (seedIdIsSet())
    {
        const std::vector<std::string>& value = m_Seed_id;
        const std::string currentValuePath = _pathPrefix + ".seedId";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const std::string& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }

    }
         
    if (urlIsSet())
    {
        const std::vector<std::string>& value = m_Url;
        const std::string currentValuePath = _pathPrefix + ".url";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const std::string& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }

    }
         
    if (visitorSourceIdIsSet())
    {
        const std::string& value = m_Visitor_source_id;
        const std::string currentValuePath = _pathPrefix + ".visitorSourceId";
                
        

    }
                     
    if (campaignIdIsSet())
    {
        const std::vector<std::string>& value = m_Campaign_id;
        const std::string currentValuePath = _pathPrefix + ".campaignId";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const std::string& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }

    }
         
    if (adIdIsSet())
    {
        const std::vector<std::string>& value = m_Ad_id;
        const std::string currentValuePath = _pathPrefix + ".adId";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const std::string& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }

    }
         
    if (objectiveTypeIsSet())
    {
        const std::vector<org::openapitools::server::model::ObjectiveType>& value = m_Objective_type;
        const std::string currentValuePath = _pathPrefix + ".objectiveType";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::ObjectiveType& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath) && success;
        
        
 
                i++;
            }
        }

    }
         
    if (adAccountIdIsSet())
    {
        const std::string& value = m_Ad_account_id;
        const std::string currentValuePath = _pathPrefix + ".adAccountId";
                
        

    }
    
    return success;
}

bool AudienceRule::operator==(const AudienceRule& rhs) const
{
    return
    
    
    
    ((!countryIsSet() && !rhs.countryIsSet()) || (countryIsSet() && rhs.countryIsSet() && getCountry() == rhs.getCountry())) &&
    
    
    ((!customerListIdIsSet() && !rhs.customerListIdIsSet()) || (customerListIdIsSet() && rhs.customerListIdIsSet() && getCustomerListId() == rhs.getCustomerListId())) &&
    
    
    ((!engagementDomainIsSet() && !rhs.engagementDomainIsSet()) || (engagementDomainIsSet() && rhs.engagementDomainIsSet() && getEngagementDomain() == rhs.getEngagementDomain())) &&
    
    
    ((!engagementTypeIsSet() && !rhs.engagementTypeIsSet()) || (engagementTypeIsSet() && rhs.engagementTypeIsSet() && getEngagementType() == rhs.getEngagementType())) &&
    
    
    ((!eventIsSet() && !rhs.eventIsSet()) || (eventIsSet() && rhs.eventIsSet() && getEvent() == rhs.getEvent())) &&
    
    
    ((!eventDataIsSet() && !rhs.eventDataIsSet()) || (eventDataIsSet() && rhs.eventDataIsSet() && getEventData() == rhs.getEventData())) &&
    
    
    ((!percentageIsSet() && !rhs.percentageIsSet()) || (percentageIsSet() && rhs.percentageIsSet() && getPercentage() == rhs.getPercentage())) &&
    
    
    ((!pinIdIsSet() && !rhs.pinIdIsSet()) || (pinIdIsSet() && rhs.pinIdIsSet() && getPinId() == rhs.getPinId())) &&
    
    
    ((!prefillIsSet() && !rhs.prefillIsSet()) || (prefillIsSet() && rhs.prefillIsSet() && isPrefill() == rhs.isPrefill())) &&
    
    
    ((!retentionDaysIsSet() && !rhs.retentionDaysIsSet()) || (retentionDaysIsSet() && rhs.retentionDaysIsSet() && getRetentionDays() == rhs.getRetentionDays())) &&
    
    
    ((!seedIdIsSet() && !rhs.seedIdIsSet()) || (seedIdIsSet() && rhs.seedIdIsSet() && getSeedId() == rhs.getSeedId())) &&
    
    
    ((!urlIsSet() && !rhs.urlIsSet()) || (urlIsSet() && rhs.urlIsSet() && getUrl() == rhs.getUrl())) &&
    
    
    ((!visitorSourceIdIsSet() && !rhs.visitorSourceIdIsSet()) || (visitorSourceIdIsSet() && rhs.visitorSourceIdIsSet() && getVisitorSourceId() == rhs.getVisitorSourceId())) &&
    
    
    ((!eventSourceIsSet() && !rhs.eventSourceIsSet()) || (eventSourceIsSet() && rhs.eventSourceIsSet() && getEventSource() == rhs.getEventSource())) &&
    
    
    ((!ingestionSourceIsSet() && !rhs.ingestionSourceIsSet()) || (ingestionSourceIsSet() && rhs.ingestionSourceIsSet() && getIngestionSource() == rhs.getIngestionSource())) &&
    
    
    ((!engagerTypeIsSet() && !rhs.engagerTypeIsSet()) || (engagerTypeIsSet() && rhs.engagerTypeIsSet() && getEngagerType() == rhs.getEngagerType())) &&
    
    
    ((!campaignIdIsSet() && !rhs.campaignIdIsSet()) || (campaignIdIsSet() && rhs.campaignIdIsSet() && getCampaignId() == rhs.getCampaignId())) &&
    
    
    ((!adIdIsSet() && !rhs.adIdIsSet()) || (adIdIsSet() && rhs.adIdIsSet() && getAdId() == rhs.getAdId())) &&
    
    
    ((!objectiveTypeIsSet() && !rhs.objectiveTypeIsSet()) || (objectiveTypeIsSet() && rhs.objectiveTypeIsSet() && getObjectiveType() == rhs.getObjectiveType())) &&
    
    
    ((!adAccountIdIsSet() && !rhs.adAccountIdIsSet()) || (adAccountIdIsSet() && rhs.adAccountIdIsSet() && getAdAccountId() == rhs.getAdAccountId()))
    
    ;
}

bool AudienceRule::operator!=(const AudienceRule& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const AudienceRule& o)
{
    j = nlohmann::json::object();
    if(o.countryIsSet())
        j["country"] = o.m_Country;
    if(o.customerListIdIsSet())
        j["customer_list_id"] = o.m_Customer_list_id;
    if(o.engagementDomainIsSet() || !o.m_Engagement_domain.empty())
        j["engagement_domain"] = o.m_Engagement_domain;
    if(o.engagementTypeIsSet())
        j["engagement_type"] = o.m_Engagement_type;
    if(o.eventIsSet())
        j["event"] = o.m_Event;
    if(o.eventDataIsSet())
        j["event_data"] = o.m_Event_data;
    if(o.percentageIsSet())
        j["percentage"] = o.m_Percentage;
    if(o.pinIdIsSet() || !o.m_Pin_id.empty())
        j["pin_id"] = o.m_Pin_id;
    if(o.prefillIsSet())
        j["prefill"] = o.m_Prefill;
    if(o.retentionDaysIsSet())
        j["retention_days"] = o.m_Retention_days;
    if(o.seedIdIsSet() || !o.m_Seed_id.empty())
        j["seed_id"] = o.m_Seed_id;
    if(o.urlIsSet() || !o.m_Url.empty())
        j["url"] = o.m_Url;
    if(o.visitorSourceIdIsSet())
        j["visitor_source_id"] = o.m_Visitor_source_id;
    if(o.eventSourceIsSet())
        j["event_source"] = o.m_Event_source;
    if(o.ingestionSourceIsSet())
        j["ingestion_source"] = o.m_Ingestion_source;
    if(o.engagerTypeIsSet())
        j["engager_type"] = o.m_Engager_type;
    if(o.campaignIdIsSet() || !o.m_Campaign_id.empty())
        j["campaign_id"] = o.m_Campaign_id;
    if(o.adIdIsSet() || !o.m_Ad_id.empty())
        j["ad_id"] = o.m_Ad_id;
    if(o.objectiveTypeIsSet() || !o.m_Objective_type.empty())
        j["objective_type"] = o.m_Objective_type;
    if(o.adAccountIdIsSet())
        j["ad_account_id"] = o.m_Ad_account_id;
    
}

void from_json(const nlohmann::json& j, AudienceRule& o)
{
    if(j.find("country") != j.end())
    {
        j.at("country").get_to(o.m_Country);
        o.m_CountryIsSet = true;
    } 
    if(j.find("customer_list_id") != j.end())
    {
        j.at("customer_list_id").get_to(o.m_Customer_list_id);
        o.m_Customer_list_idIsSet = true;
    } 
    if(j.find("engagement_domain") != j.end())
    {
        j.at("engagement_domain").get_to(o.m_Engagement_domain);
        o.m_Engagement_domainIsSet = true;
    } 
    if(j.find("engagement_type") != j.end())
    {
        j.at("engagement_type").get_to(o.m_Engagement_type);
        o.m_Engagement_typeIsSet = true;
    } 
    if(j.find("event") != j.end())
    {
        j.at("event").get_to(o.m_Event);
        o.m_EventIsSet = true;
    } 
    if(j.find("event_data") != j.end())
    {
        j.at("event_data").get_to(o.m_Event_data);
        o.m_Event_dataIsSet = true;
    } 
    if(j.find("percentage") != j.end())
    {
        j.at("percentage").get_to(o.m_Percentage);
        o.m_PercentageIsSet = true;
    } 
    if(j.find("pin_id") != j.end())
    {
        j.at("pin_id").get_to(o.m_Pin_id);
        o.m_Pin_idIsSet = true;
    } 
    if(j.find("prefill") != j.end())
    {
        j.at("prefill").get_to(o.m_Prefill);
        o.m_PrefillIsSet = true;
    } 
    if(j.find("retention_days") != j.end())
    {
        j.at("retention_days").get_to(o.m_Retention_days);
        o.m_Retention_daysIsSet = true;
    } 
    if(j.find("seed_id") != j.end())
    {
        j.at("seed_id").get_to(o.m_Seed_id);
        o.m_Seed_idIsSet = true;
    } 
    if(j.find("url") != j.end())
    {
        j.at("url").get_to(o.m_Url);
        o.m_UrlIsSet = true;
    } 
    if(j.find("visitor_source_id") != j.end())
    {
        j.at("visitor_source_id").get_to(o.m_Visitor_source_id);
        o.m_Visitor_source_idIsSet = true;
    } 
    if(j.find("event_source") != j.end())
    {
        j.at("event_source").get_to(o.m_Event_source);
        o.m_Event_sourceIsSet = true;
    } 
    if(j.find("ingestion_source") != j.end())
    {
        j.at("ingestion_source").get_to(o.m_Ingestion_source);
        o.m_Ingestion_sourceIsSet = true;
    } 
    if(j.find("engager_type") != j.end())
    {
        j.at("engager_type").get_to(o.m_Engager_type);
        o.m_Engager_typeIsSet = true;
    } 
    if(j.find("campaign_id") != j.end())
    {
        j.at("campaign_id").get_to(o.m_Campaign_id);
        o.m_Campaign_idIsSet = true;
    } 
    if(j.find("ad_id") != j.end())
    {
        j.at("ad_id").get_to(o.m_Ad_id);
        o.m_Ad_idIsSet = true;
    } 
    if(j.find("objective_type") != j.end())
    {
        j.at("objective_type").get_to(o.m_Objective_type);
        o.m_Objective_typeIsSet = true;
    } 
    if(j.find("ad_account_id") != j.end())
    {
        j.at("ad_account_id").get_to(o.m_Ad_account_id);
        o.m_Ad_account_idIsSet = true;
    } 
    
}

std::string AudienceRule::getCountry() const
{
    return m_Country;
}
void AudienceRule::setCountry(std::string const& value)
{
    m_Country = value;
    m_CountryIsSet = true;
}
bool AudienceRule::countryIsSet() const
{
    return m_CountryIsSet;
}
void AudienceRule::unsetCountry()
{
    m_CountryIsSet = false;
}
std::string AudienceRule::getCustomerListId() const
{
    return m_Customer_list_id;
}
void AudienceRule::setCustomerListId(std::string const& value)
{
    m_Customer_list_id = value;
    m_Customer_list_idIsSet = true;
}
bool AudienceRule::customerListIdIsSet() const
{
    return m_Customer_list_idIsSet;
}
void AudienceRule::unsetCustomer_list_id()
{
    m_Customer_list_idIsSet = false;
}
std::vector<std::string> AudienceRule::getEngagementDomain() const
{
    return m_Engagement_domain;
}
void AudienceRule::setEngagementDomain(std::vector<std::string> const& value)
{
    m_Engagement_domain = value;
    m_Engagement_domainIsSet = true;
}
bool AudienceRule::engagementDomainIsSet() const
{
    return m_Engagement_domainIsSet;
}
void AudienceRule::unsetEngagement_domain()
{
    m_Engagement_domainIsSet = false;
}
std::string AudienceRule::getEngagementType() const
{
    return m_Engagement_type;
}
void AudienceRule::setEngagementType(std::string const& value)
{
    m_Engagement_type = value;
    m_Engagement_typeIsSet = true;
}
bool AudienceRule::engagementTypeIsSet() const
{
    return m_Engagement_typeIsSet;
}
void AudienceRule::unsetEngagement_type()
{
    m_Engagement_typeIsSet = false;
}
std::string AudienceRule::getEvent() const
{
    return m_Event;
}
void AudienceRule::setEvent(std::string const& value)
{
    m_Event = value;
    m_EventIsSet = true;
}
bool AudienceRule::eventIsSet() const
{
    return m_EventIsSet;
}
void AudienceRule::unsetEvent()
{
    m_EventIsSet = false;
}
org::openapitools::server::model::PinterestTagEventData AudienceRule::getEventData() const
{
    return m_Event_data;
}
void AudienceRule::setEventData(org::openapitools::server::model::PinterestTagEventData const& value)
{
    m_Event_data = value;
    m_Event_dataIsSet = true;
}
bool AudienceRule::eventDataIsSet() const
{
    return m_Event_dataIsSet;
}
void AudienceRule::unsetEvent_data()
{
    m_Event_dataIsSet = false;
}
int32_t AudienceRule::getPercentage() const
{
    return m_Percentage;
}
void AudienceRule::setPercentage(int32_t const value)
{
    m_Percentage = value;
    m_PercentageIsSet = true;
}
bool AudienceRule::percentageIsSet() const
{
    return m_PercentageIsSet;
}
void AudienceRule::unsetPercentage()
{
    m_PercentageIsSet = false;
}
std::vector<std::string> AudienceRule::getPinId() const
{
    return m_Pin_id;
}
void AudienceRule::setPinId(std::vector<std::string> const& value)
{
    m_Pin_id = value;
    m_Pin_idIsSet = true;
}
bool AudienceRule::pinIdIsSet() const
{
    return m_Pin_idIsSet;
}
void AudienceRule::unsetPin_id()
{
    m_Pin_idIsSet = false;
}
bool AudienceRule::isPrefill() const
{
    return m_Prefill;
}
void AudienceRule::setPrefill(bool const value)
{
    m_Prefill = value;
    m_PrefillIsSet = true;
}
bool AudienceRule::prefillIsSet() const
{
    return m_PrefillIsSet;
}
void AudienceRule::unsetPrefill()
{
    m_PrefillIsSet = false;
}
int32_t AudienceRule::getRetentionDays() const
{
    return m_Retention_days;
}
void AudienceRule::setRetentionDays(int32_t const value)
{
    m_Retention_days = value;
    m_Retention_daysIsSet = true;
}
bool AudienceRule::retentionDaysIsSet() const
{
    return m_Retention_daysIsSet;
}
void AudienceRule::unsetRetention_days()
{
    m_Retention_daysIsSet = false;
}
std::vector<std::string> AudienceRule::getSeedId() const
{
    return m_Seed_id;
}
void AudienceRule::setSeedId(std::vector<std::string> const& value)
{
    m_Seed_id = value;
    m_Seed_idIsSet = true;
}
bool AudienceRule::seedIdIsSet() const
{
    return m_Seed_idIsSet;
}
void AudienceRule::unsetSeed_id()
{
    m_Seed_idIsSet = false;
}
std::vector<std::string> AudienceRule::getUrl() const
{
    return m_Url;
}
void AudienceRule::setUrl(std::vector<std::string> const& value)
{
    m_Url = value;
    m_UrlIsSet = true;
}
bool AudienceRule::urlIsSet() const
{
    return m_UrlIsSet;
}
void AudienceRule::unsetUrl()
{
    m_UrlIsSet = false;
}
std::string AudienceRule::getVisitorSourceId() const
{
    return m_Visitor_source_id;
}
void AudienceRule::setVisitorSourceId(std::string const& value)
{
    m_Visitor_source_id = value;
    m_Visitor_source_idIsSet = true;
}
bool AudienceRule::visitorSourceIdIsSet() const
{
    return m_Visitor_source_idIsSet;
}
void AudienceRule::unsetVisitor_source_id()
{
    m_Visitor_source_idIsSet = false;
}
nlohmann::json AudienceRule::getEventSource() const
{
    return m_Event_source;
}
void AudienceRule::setEventSource(nlohmann::json const& value)
{
    m_Event_source = value;
    m_Event_sourceIsSet = true;
}
bool AudienceRule::eventSourceIsSet() const
{
    return m_Event_sourceIsSet;
}
void AudienceRule::unsetEvent_source()
{
    m_Event_sourceIsSet = false;
}
nlohmann::json AudienceRule::getIngestionSource() const
{
    return m_Ingestion_source;
}
void AudienceRule::setIngestionSource(nlohmann::json const& value)
{
    m_Ingestion_source = value;
    m_Ingestion_sourceIsSet = true;
}
bool AudienceRule::ingestionSourceIsSet() const
{
    return m_Ingestion_sourceIsSet;
}
void AudienceRule::unsetIngestion_source()
{
    m_Ingestion_sourceIsSet = false;
}
int32_t AudienceRule::getEngagerType() const
{
    return m_Engager_type;
}
void AudienceRule::setEngagerType(int32_t const value)
{
    m_Engager_type = value;
    m_Engager_typeIsSet = true;
}
bool AudienceRule::engagerTypeIsSet() const
{
    return m_Engager_typeIsSet;
}
void AudienceRule::unsetEngager_type()
{
    m_Engager_typeIsSet = false;
}
std::vector<std::string> AudienceRule::getCampaignId() const
{
    return m_Campaign_id;
}
void AudienceRule::setCampaignId(std::vector<std::string> const& value)
{
    m_Campaign_id = value;
    m_Campaign_idIsSet = true;
}
bool AudienceRule::campaignIdIsSet() const
{
    return m_Campaign_idIsSet;
}
void AudienceRule::unsetCampaign_id()
{
    m_Campaign_idIsSet = false;
}
std::vector<std::string> AudienceRule::getAdId() const
{
    return m_Ad_id;
}
void AudienceRule::setAdId(std::vector<std::string> const& value)
{
    m_Ad_id = value;
    m_Ad_idIsSet = true;
}
bool AudienceRule::adIdIsSet() const
{
    return m_Ad_idIsSet;
}
void AudienceRule::unsetAd_id()
{
    m_Ad_idIsSet = false;
}
std::vector<org::openapitools::server::model::ObjectiveType> AudienceRule::getObjectiveType() const
{
    return m_Objective_type;
}
void AudienceRule::setObjectiveType(std::vector<org::openapitools::server::model::ObjectiveType> const& value)
{
    m_Objective_type = value;
    m_Objective_typeIsSet = true;
}
bool AudienceRule::objectiveTypeIsSet() const
{
    return m_Objective_typeIsSet;
}
void AudienceRule::unsetObjective_type()
{
    m_Objective_typeIsSet = false;
}
std::string AudienceRule::getAdAccountId() const
{
    return m_Ad_account_id;
}
void AudienceRule::setAdAccountId(std::string const& value)
{
    m_Ad_account_id = value;
    m_Ad_account_idIsSet = true;
}
bool AudienceRule::adAccountIdIsSet() const
{
    return m_Ad_account_idIsSet;
}
void AudienceRule::unsetAd_account_id()
{
    m_Ad_account_idIsSet = false;
}


} // namespace org::openapitools::server::model

