/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "CatalogsVerticalFeedsCreateRequest.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

CatalogsVerticalFeedsCreateRequest::CatalogsVerticalFeedsCreateRequest()
{
    m_Default_currencyIsSet = false;
    m_Name = "";
    m_CredentialsIsSet = false;
    m_Location = "";
    m_Preferred_processing_scheduleIsSet = false;
    m_Default_availabilityIsSet = false;
    m_Status = "";
    m_StatusIsSet = false;
    m_Catalog_id = "";
    m_Catalog_idIsSet = false;
    
}

void CatalogsVerticalFeedsCreateRequest::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool CatalogsVerticalFeedsCreateRequest::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool CatalogsVerticalFeedsCreateRequest::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "CatalogsVerticalFeedsCreateRequest" : pathPrefix;

                    
    if (!m_Default_locale.validate(msg, _pathPrefix + ".defaultLocale")) {
        msg << _pathPrefix << ": Default_locale is invalid;";
        success = false;
    }         
    
    /* Location */ {
        const std::string& value = m_Location;
        const std::string currentValuePath = _pathPrefix + ".location";
                
        

    }
                             
    if (catalogIdIsSet())
    {
        const std::string& value = m_Catalog_id;
        const std::string currentValuePath = _pathPrefix + ".catalogId";
                
        

    }
    
    return success;
}

bool CatalogsVerticalFeedsCreateRequest::operator==(const CatalogsVerticalFeedsCreateRequest& rhs) const
{
    return
    
    
    
    ((!defaultCurrencyIsSet() && !rhs.defaultCurrencyIsSet()) || (defaultCurrencyIsSet() && rhs.defaultCurrencyIsSet() && getDefaultCurrency() == rhs.getDefaultCurrency())) &&
    
    (getName() == rhs.getName())
     &&
    
    (getFormat() == rhs.getFormat())
     &&
    
    (getDefaultLocale() == rhs.getDefaultLocale())
     &&
    
    
    ((!credentialsIsSet() && !rhs.credentialsIsSet()) || (credentialsIsSet() && rhs.credentialsIsSet() && getCredentials() == rhs.getCredentials())) &&
    
    (getLocation() == rhs.getLocation())
     &&
    
    
    ((!preferredProcessingScheduleIsSet() && !rhs.preferredProcessingScheduleIsSet()) || (preferredProcessingScheduleIsSet() && rhs.preferredProcessingScheduleIsSet() && getPreferredProcessingSchedule() == rhs.getPreferredProcessingSchedule())) &&
    
    (getCatalogType() == rhs.getCatalogType())
     &&
    
    (getDefaultCountry() == rhs.getDefaultCountry())
     &&
    
    
    ((!defaultAvailabilityIsSet() && !rhs.defaultAvailabilityIsSet()) || (defaultAvailabilityIsSet() && rhs.defaultAvailabilityIsSet() && getDefaultAvailability() == rhs.getDefaultAvailability())) &&
    
    
    ((!statusIsSet() && !rhs.statusIsSet()) || (statusIsSet() && rhs.statusIsSet() && getStatus() == rhs.getStatus())) &&
    
    
    ((!catalogIdIsSet() && !rhs.catalogIdIsSet()) || (catalogIdIsSet() && rhs.catalogIdIsSet() && getCatalogId() == rhs.getCatalogId()))
    
    ;
}

bool CatalogsVerticalFeedsCreateRequest::operator!=(const CatalogsVerticalFeedsCreateRequest& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const CatalogsVerticalFeedsCreateRequest& o)
{
    j = nlohmann::json::object();
    if(o.defaultCurrencyIsSet())
        j["default_currency"] = o.m_Default_currency;
    j["name"] = o.m_Name;
    j["format"] = o.m_Format;
    j["default_locale"] = o.m_Default_locale;
    if(o.credentialsIsSet())
        j["credentials"] = o.m_Credentials;
    j["location"] = o.m_Location;
    if(o.preferredProcessingScheduleIsSet())
        j["preferred_processing_schedule"] = o.m_Preferred_processing_schedule;
    j["catalog_type"] = o.m_Catalog_type;
    j["default_country"] = o.m_Default_country;
    if(o.defaultAvailabilityIsSet())
        j["default_availability"] = o.m_Default_availability;
    if(o.statusIsSet())
        j["status"] = o.m_Status;
    if(o.catalogIdIsSet())
        j["catalog_id"] = o.m_Catalog_id;
    
}

void from_json(const nlohmann::json& j, CatalogsVerticalFeedsCreateRequest& o)
{
    if(j.find("default_currency") != j.end())
    {
        j.at("default_currency").get_to(o.m_Default_currency);
        o.m_Default_currencyIsSet = true;
    } 
    j.at("name").get_to(o.m_Name);
    j.at("format").get_to(o.m_Format);
    j.at("default_locale").get_to(o.m_Default_locale);
    if(j.find("credentials") != j.end())
    {
        j.at("credentials").get_to(o.m_Credentials);
        o.m_CredentialsIsSet = true;
    } 
    j.at("location").get_to(o.m_Location);
    if(j.find("preferred_processing_schedule") != j.end())
    {
        j.at("preferred_processing_schedule").get_to(o.m_Preferred_processing_schedule);
        o.m_Preferred_processing_scheduleIsSet = true;
    } 
    j.at("catalog_type").get_to(o.m_Catalog_type);
    j.at("default_country").get_to(o.m_Default_country);
    if(j.find("default_availability") != j.end())
    {
        j.at("default_availability").get_to(o.m_Default_availability);
        o.m_Default_availabilityIsSet = true;
    } 
    if(j.find("status") != j.end())
    {
        j.at("status").get_to(o.m_Status);
        o.m_StatusIsSet = true;
    } 
    if(j.find("catalog_id") != j.end())
    {
        j.at("catalog_id").get_to(o.m_Catalog_id);
        o.m_Catalog_idIsSet = true;
    } 
    
}

org::openapitools::server::model::NullableCurrency CatalogsVerticalFeedsCreateRequest::getDefaultCurrency() const
{
    return m_Default_currency;
}
void CatalogsVerticalFeedsCreateRequest::setDefaultCurrency(org::openapitools::server::model::NullableCurrency const& value)
{
    m_Default_currency = value;
    m_Default_currencyIsSet = true;
}
bool CatalogsVerticalFeedsCreateRequest::defaultCurrencyIsSet() const
{
    return m_Default_currencyIsSet;
}
void CatalogsVerticalFeedsCreateRequest::unsetDefault_currency()
{
    m_Default_currencyIsSet = false;
}
std::string CatalogsVerticalFeedsCreateRequest::getName() const
{
    return m_Name;
}
void CatalogsVerticalFeedsCreateRequest::setName(std::string const& value)
{
    m_Name = value;
}
org::openapitools::server::model::CatalogsFormat CatalogsVerticalFeedsCreateRequest::getFormat() const
{
    return m_Format;
}
void CatalogsVerticalFeedsCreateRequest::setFormat(org::openapitools::server::model::CatalogsFormat const& value)
{
    m_Format = value;
}
org::openapitools::server::model::CatalogsFeedsCreateRequest_default_locale CatalogsVerticalFeedsCreateRequest::getDefaultLocale() const
{
    return m_Default_locale;
}
void CatalogsVerticalFeedsCreateRequest::setDefaultLocale(org::openapitools::server::model::CatalogsFeedsCreateRequest_default_locale const& value)
{
    m_Default_locale = value;
}
org::openapitools::server::model::CatalogsFeedCredentials CatalogsVerticalFeedsCreateRequest::getCredentials() const
{
    return m_Credentials;
}
void CatalogsVerticalFeedsCreateRequest::setCredentials(org::openapitools::server::model::CatalogsFeedCredentials const& value)
{
    m_Credentials = value;
    m_CredentialsIsSet = true;
}
bool CatalogsVerticalFeedsCreateRequest::credentialsIsSet() const
{
    return m_CredentialsIsSet;
}
void CatalogsVerticalFeedsCreateRequest::unsetCredentials()
{
    m_CredentialsIsSet = false;
}
std::string CatalogsVerticalFeedsCreateRequest::getLocation() const
{
    return m_Location;
}
void CatalogsVerticalFeedsCreateRequest::setLocation(std::string const& value)
{
    m_Location = value;
}
org::openapitools::server::model::CatalogsFeedProcessingSchedule CatalogsVerticalFeedsCreateRequest::getPreferredProcessingSchedule() const
{
    return m_Preferred_processing_schedule;
}
void CatalogsVerticalFeedsCreateRequest::setPreferredProcessingSchedule(org::openapitools::server::model::CatalogsFeedProcessingSchedule const& value)
{
    m_Preferred_processing_schedule = value;
    m_Preferred_processing_scheduleIsSet = true;
}
bool CatalogsVerticalFeedsCreateRequest::preferredProcessingScheduleIsSet() const
{
    return m_Preferred_processing_scheduleIsSet;
}
void CatalogsVerticalFeedsCreateRequest::unsetPreferred_processing_schedule()
{
    m_Preferred_processing_scheduleIsSet = false;
}
org::openapitools::server::model::CatalogsType CatalogsVerticalFeedsCreateRequest::getCatalogType() const
{
    return m_Catalog_type;
}
void CatalogsVerticalFeedsCreateRequest::setCatalogType(org::openapitools::server::model::CatalogsType const& value)
{
    m_Catalog_type = value;
}
org::openapitools::server::model::Country CatalogsVerticalFeedsCreateRequest::getDefaultCountry() const
{
    return m_Default_country;
}
void CatalogsVerticalFeedsCreateRequest::setDefaultCountry(org::openapitools::server::model::Country const& value)
{
    m_Default_country = value;
}
org::openapitools::server::model::ProductAvailabilityType CatalogsVerticalFeedsCreateRequest::getDefaultAvailability() const
{
    return m_Default_availability;
}
void CatalogsVerticalFeedsCreateRequest::setDefaultAvailability(org::openapitools::server::model::ProductAvailabilityType const& value)
{
    m_Default_availability = value;
    m_Default_availabilityIsSet = true;
}
bool CatalogsVerticalFeedsCreateRequest::defaultAvailabilityIsSet() const
{
    return m_Default_availabilityIsSet;
}
void CatalogsVerticalFeedsCreateRequest::unsetDefault_availability()
{
    m_Default_availabilityIsSet = false;
}
CatalogsStatus CatalogsVerticalFeedsCreateRequest::getStatus() const
{
    return m_Status;
}
void CatalogsVerticalFeedsCreateRequest::setStatus(CatalogsStatus const& value)
{
    m_Status = value;
    m_StatusIsSet = true;
}
bool CatalogsVerticalFeedsCreateRequest::statusIsSet() const
{
    return m_StatusIsSet;
}
void CatalogsVerticalFeedsCreateRequest::unsetStatus()
{
    m_StatusIsSet = false;
}
std::string CatalogsVerticalFeedsCreateRequest::getCatalogId() const
{
    return m_Catalog_id;
}
void CatalogsVerticalFeedsCreateRequest::setCatalogId(std::string const& value)
{
    m_Catalog_id = value;
    m_Catalog_idIsSet = true;
}
bool CatalogsVerticalFeedsCreateRequest::catalogIdIsSet() const
{
    return m_Catalog_idIsSet;
}
void CatalogsVerticalFeedsCreateRequest::unsetCatalog_id()
{
    m_Catalog_idIsSet = false;
}


} // namespace org::openapitools::server::model

