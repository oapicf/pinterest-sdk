/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * TargetingSpec.h
 *
 * Ad group targeting specification defining the ad group target audience. For example, &#x60;{\&quot;APPTYPE\&quot;:[\&quot;iphone\&quot;], \&quot;GENDER\&quot;:[\&quot;male\&quot;], \&quot;LOCALE\&quot;:[\&quot;en-US\&quot;], \&quot;LOCATION\&quot;:[\&quot;501\&quot;], \&quot;AGE_BUCKET\&quot;:[\&quot;25-34\&quot;]}&#x60;
 */

#ifndef TargetingSpec_H_
#define TargetingSpec_H_


#include "TargetingSpec_SHOPPING_RETARGETING.h"
#include <string>
#include <vector>
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// Ad group targeting specification defining the ad group target audience. For example, &#x60;{\&quot;APPTYPE\&quot;:[\&quot;iphone\&quot;], \&quot;GENDER\&quot;:[\&quot;male\&quot;], \&quot;LOCALE\&quot;:[\&quot;en-US\&quot;], \&quot;LOCATION\&quot;:[\&quot;501\&quot;], \&quot;AGE_BUCKET\&quot;:[\&quot;25-34\&quot;]}&#x60;
/// </summary>
class  TargetingSpec
{
public:
    TargetingSpec();
    virtual ~TargetingSpec() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const TargetingSpec& rhs) const;
    bool operator!=(const TargetingSpec& rhs) const;

    /////////////////////////////////////////////
    /// TargetingSpec members

    /// <summary>
    /// Age ranges. If the AGE_BUCKET field is missing, the default behavior in terms of ad delivery is that **All age buckets** will be targeted.
    /// </summary>
    std::vector<std::string> getAGEBUCKET() const;
    void setAGEBUCKET(std::vector<std::string> const& value);
    bool aGEBUCKETIsSet() const;
    void unsetAGE_BUCKET();
    /// <summary>
    /// Allowed devices. If the APPTYPE field is missing, the default behavior in terms of ad delivery is that **All devices/apptypes** will be targeted.
    /// </summary>
    std::vector<std::string> getAPPTYPE() const;
    void setAPPTYPE(std::vector<std::string> const& value);
    bool aPPTYPEIsSet() const;
    void unsetAPPTYPE();
    /// <summary>
    /// Excluded customer list IDs. Used to drive new customer acquisition goals. For example: [\&quot;2542620905475\&quot;]. Audience lists need to have at least 100 people with Pinterest accounts in them. If the AUDIENCE_EXCLUDE field is missing, the default behavior in terms of ad delivery is that **No users will be excluded**.
    /// </summary>
    std::vector<std::string> getAUDIENCEEXCLUDE() const;
    void setAUDIENCEEXCLUDE(std::vector<std::string> const& value);
    bool aUDIENCEEXCLUDEIsSet() const;
    void unsetAUDIENCE_EXCLUDE();
    /// <summary>
    /// Targeted customer list IDs. For example: [\&quot;2542620905473\&quot;]. Audience lists need to have at least 100 people with Pinterest accounts in them Audience lists need to have at least 100 people with Pinterest accounts in them. If the AUDIENCE_INCLUDE field is missing, the default behavior in terms of ad delivery is that **All users will be included**.
    /// </summary>
    std::vector<std::string> getAUDIENCEINCLUDE() const;
    void setAUDIENCEINCLUDE(std::vector<std::string> const& value);
    bool aUDIENCEINCLUDEIsSet() const;
    void unsetAUDIENCE_INCLUDE();
    /// <summary>
    /// Targeted genders. Values: [\&quot;unknown\&quot;,\&quot;male\&quot;,\&quot;female\&quot;]. If the GENDER field is missing, the default behavior in terms of ad delivery is that **All genders will be targeted**.
    /// </summary>
    std::vector<std::string> getGENDER() const;
    void setGENDER(std::vector<std::string> const& value);
    bool gENDERIsSet() const;
    void unsetGENDER();
    /// <summary>
    /// Location region codes, e.g., \&quot;BE-VOV\&quot; (East Flanders, Belgium) For complete list, &lt;a href&#x3D;\&quot;https://help.pinterest.com/sub/helpcenter/partner/pinterest_location_targeting_codes.xlsx\&quot; target&#x3D;\&quot;_blank\&quot;&gt;click here&lt;/a&gt; or postal codes, e.g., \&quot;US-94107\&quot;. Use either region codes or postal codes but not both. At least one of LOCATION or GEO must be specified. If the GEO field is missing, then only LOCATION values will be targeted (see LOCATION field below).
    /// </summary>
    std::vector<std::string> getGEO() const;
    void setGEO(std::vector<std::string> const& value);
    bool gEOIsSet() const;
    void unsetGEO();
    /// <summary>
    /// Array of interest object IDs. If the INTEREST field is missing, the default behavior in terms of ad delivery is that **All interests will be targeted**.
    /// </summary>
    std::vector<std::string> getINTEREST() const;
    void setINTEREST(std::vector<std::string> const& value);
    bool iNTERESTIsSet() const;
    void unsetINTEREST();
    /// <summary>
    /// 24 ISO 639-1 two letter language codes. If the LOCALE field is missing, the default behavior in terms of ad delivery is that **All languages will be targeted, only english non-sublanguage will be targeted**.
    /// </summary>
    std::vector<std::string> getLOCALE() const;
    void setLOCALE(std::vector<std::string> const& value);
    bool lOCALEIsSet() const;
    void unsetLOCALE();
    /// <summary>
    /// 22 ISO Alpha 2 two letter country codes or US Nielsen DMA (Designated Market Area) codes (location region codes) (e.g., [\&quot;US\&quot;, \&quot;807\&quot;]). For complete list, click here. Location-Country and Location-Metro codes apply. At least one of LOCATION or GEO must be specified. If the LOCATION field is missing, then only GEO values will be targeted (see GEO field above).
    /// </summary>
    std::vector<std::string> getLOCATION() const;
    void setLOCATION(std::vector<std::string> const& value);
    bool lOCATIONIsSet() const;
    void unsetLOCATION();
    /// <summary>
    /// Array of object: lookback_window [Integer]: Number of days ago to start lookback timeframe for dynamic retargeting tag_types [Array of integer]: Event types to target for dynamic retargeting exclusion_window [Integer]: Number of days ago to stop lookback timeframe for dynamic retargeting
    /// </summary>
    std::vector<org::openapitools::server::model::TargetingSpec_SHOPPING_RETARGETING> getSHOPPINGRETARGETING() const;
    void setSHOPPINGRETARGETING(std::vector<org::openapitools::server::model::TargetingSpec_SHOPPING_RETARGETING> const& value);
    bool sHOPPINGRETARGETINGIsSet() const;
    void unsetSHOPPING_RETARGETING();
    /// <summary>
    /// 
    /// </summary>
    std::vector<std::string> getTARGETINGSTRATEGY() const;
    void setTARGETINGSTRATEGY(std::vector<std::string> const& value);
    bool tARGETINGSTRATEGYIsSet() const;
    void unsetTARGETING_STRATEGY();

    friend  void to_json(nlohmann::json& j, const TargetingSpec& o);
    friend  void from_json(const nlohmann::json& j, TargetingSpec& o);
protected:
    std::vector<std::string> m_AGE_BUCKET;
    bool m_AGE_BUCKETIsSet;
    std::vector<std::string> m_APPTYPE;
    bool m_APPTYPEIsSet;
    std::vector<std::string> m_AUDIENCE_EXCLUDE;
    bool m_AUDIENCE_EXCLUDEIsSet;
    std::vector<std::string> m_AUDIENCE_INCLUDE;
    bool m_AUDIENCE_INCLUDEIsSet;
    std::vector<std::string> m_GENDER;
    bool m_GENDERIsSet;
    std::vector<std::string> m_GEO;
    bool m_GEOIsSet;
    std::vector<std::string> m_INTEREST;
    bool m_INTERESTIsSet;
    std::vector<std::string> m_LOCALE;
    bool m_LOCALEIsSet;
    std::vector<std::string> m_LOCATION;
    bool m_LOCATIONIsSet;
    std::vector<org::openapitools::server::model::TargetingSpec_SHOPPING_RETARGETING> m_SHOPPING_RETARGETING;
    bool m_SHOPPING_RETARGETINGIsSet;
    std::vector<std::string> m_TARGETING_STRATEGY;
    bool m_TARGETING_STRATEGYIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* TargetingSpec_H_ */
