/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "AudienceInsightsResponse.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

AudienceInsightsResponse::AudienceInsightsResponse()
{
    m_CategoriesIsSet = false;
    m_DemographicsIsSet = false;
    m_TypeIsSet = false;
    m_date = "";
    m_dateIsSet = false;
    m_Size = 0;
    m_SizeIsSet = false;
    m_Size_is_upper_bound = false;
    m_Size_is_upper_boundIsSet = false;
    
}

void AudienceInsightsResponse::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool AudienceInsightsResponse::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool AudienceInsightsResponse::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "AudienceInsightsResponse" : pathPrefix;

         
    if (categoriesIsSet())
    {
        const std::vector<org::openapitools::server::model::AudienceCategory>& value = m_Categories;
        const std::string currentValuePath = _pathPrefix + ".categories";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::AudienceCategory& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".categories") && success;
 
                i++;
            }
        }

    }
                 
    if (dateIsSet())
    {
        const std::string& value = m_date;
        const std::string currentValuePath = _pathPrefix + ".date";
                
        

    }
            
    return success;
}

bool AudienceInsightsResponse::operator==(const AudienceInsightsResponse& rhs) const
{
    return
    
    
    
    ((!categoriesIsSet() && !rhs.categoriesIsSet()) || (categoriesIsSet() && rhs.categoriesIsSet() && getCategories() == rhs.getCategories())) &&
    
    
    ((!demographicsIsSet() && !rhs.demographicsIsSet()) || (demographicsIsSet() && rhs.demographicsIsSet() && getDemographics() == rhs.getDemographics())) &&
    
    
    ((!typeIsSet() && !rhs.typeIsSet()) || (typeIsSet() && rhs.typeIsSet() && getType() == rhs.getType())) &&
    
    
    ((!dateIsSet() && !rhs.dateIsSet()) || (dateIsSet() && rhs.dateIsSet() && getDate() == rhs.getDate())) &&
    
    
    ((!sizeIsSet() && !rhs.sizeIsSet()) || (sizeIsSet() && rhs.sizeIsSet() && getSize() == rhs.getSize())) &&
    
    
    ((!sizeIsUpperBoundIsSet() && !rhs.sizeIsUpperBoundIsSet()) || (sizeIsUpperBoundIsSet() && rhs.sizeIsUpperBoundIsSet() && isSizeIsUpperBound() == rhs.isSizeIsUpperBound()))
    
    ;
}

bool AudienceInsightsResponse::operator!=(const AudienceInsightsResponse& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const AudienceInsightsResponse& o)
{
    j = nlohmann::json::object();
    if(o.categoriesIsSet() || !o.m_Categories.empty())
        j["categories"] = o.m_Categories;
    if(o.demographicsIsSet())
        j["demographics"] = o.m_Demographics;
    if(o.typeIsSet())
        j["type"] = o.m_Type;
    if(o.dateIsSet())
        j["date"] = o.m_date;
    if(o.sizeIsSet())
        j["size"] = o.m_Size;
    if(o.sizeIsUpperBoundIsSet())
        j["size_is_upper_bound"] = o.m_Size_is_upper_bound;
    
}

void from_json(const nlohmann::json& j, AudienceInsightsResponse& o)
{
    if(j.find("categories") != j.end())
    {
        j.at("categories").get_to(o.m_Categories);
        o.m_CategoriesIsSet = true;
    } 
    if(j.find("demographics") != j.end())
    {
        j.at("demographics").get_to(o.m_Demographics);
        o.m_DemographicsIsSet = true;
    } 
    if(j.find("type") != j.end())
    {
        j.at("type").get_to(o.m_Type);
        o.m_TypeIsSet = true;
    } 
    if(j.find("date") != j.end())
    {
        j.at("date").get_to(o.m_date);
        o.m_dateIsSet = true;
    } 
    if(j.find("size") != j.end())
    {
        j.at("size").get_to(o.m_Size);
        o.m_SizeIsSet = true;
    } 
    if(j.find("size_is_upper_bound") != j.end())
    {
        j.at("size_is_upper_bound").get_to(o.m_Size_is_upper_bound);
        o.m_Size_is_upper_boundIsSet = true;
    } 
    
}

std::vector<org::openapitools::server::model::AudienceCategory> AudienceInsightsResponse::getCategories() const
{
    return m_Categories;
}
void AudienceInsightsResponse::setCategories(std::vector<org::openapitools::server::model::AudienceCategory> const& value)
{
    m_Categories = value;
    m_CategoriesIsSet = true;
}
bool AudienceInsightsResponse::categoriesIsSet() const
{
    return m_CategoriesIsSet;
}
void AudienceInsightsResponse::unsetCategories()
{
    m_CategoriesIsSet = false;
}
org::openapitools::server::model::AudienceDemographics AudienceInsightsResponse::getDemographics() const
{
    return m_Demographics;
}
void AudienceInsightsResponse::setDemographics(org::openapitools::server::model::AudienceDemographics const& value)
{
    m_Demographics = value;
    m_DemographicsIsSet = true;
}
bool AudienceInsightsResponse::demographicsIsSet() const
{
    return m_DemographicsIsSet;
}
void AudienceInsightsResponse::unsetDemographics()
{
    m_DemographicsIsSet = false;
}
org::openapitools::server::model::AudienceInsightType AudienceInsightsResponse::getType() const
{
    return m_Type;
}
void AudienceInsightsResponse::setType(org::openapitools::server::model::AudienceInsightType const& value)
{
    m_Type = value;
    m_TypeIsSet = true;
}
bool AudienceInsightsResponse::typeIsSet() const
{
    return m_TypeIsSet;
}
void AudienceInsightsResponse::unsetType()
{
    m_TypeIsSet = false;
}
std::string AudienceInsightsResponse::getDate() const
{
    return m_date;
}
void AudienceInsightsResponse::setDate(std::string const& value)
{
    m_date = value;
    m_dateIsSet = true;
}
bool AudienceInsightsResponse::dateIsSet() const
{
    return m_dateIsSet;
}
void AudienceInsightsResponse::unsetdate()
{
    m_dateIsSet = false;
}
int32_t AudienceInsightsResponse::getSize() const
{
    return m_Size;
}
void AudienceInsightsResponse::setSize(int32_t const value)
{
    m_Size = value;
    m_SizeIsSet = true;
}
bool AudienceInsightsResponse::sizeIsSet() const
{
    return m_SizeIsSet;
}
void AudienceInsightsResponse::unsetSize()
{
    m_SizeIsSet = false;
}
bool AudienceInsightsResponse::isSizeIsUpperBound() const
{
    return m_Size_is_upper_bound;
}
void AudienceInsightsResponse::setSizeIsUpperBound(bool const value)
{
    m_Size_is_upper_bound = value;
    m_Size_is_upper_boundIsSet = true;
}
bool AudienceInsightsResponse::sizeIsUpperBoundIsSet() const
{
    return m_Size_is_upper_boundIsSet;
}
void AudienceInsightsResponse::unsetSize_is_upper_bound()
{
    m_Size_is_upper_boundIsSet = false;
}


} // namespace org::openapitools::server::model

