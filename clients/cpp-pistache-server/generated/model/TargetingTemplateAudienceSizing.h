/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * TargetingTemplateAudienceSizing.h
 *
 * Gets an audience size estimate for a set of given targeting spec data. &lt;p&gt;Returns:&lt;/p&gt; An object containing an audience size estimate that has a reach estimate (number of unique users) against the given targeting template. This by default provides a monthly estimate. 
 */

#ifndef TargetingTemplateAudienceSizing_H_
#define TargetingTemplateAudienceSizing_H_


#include "TargetingTemplateAudienceSizing_reach_estimate.h"
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// Gets an audience size estimate for a set of given targeting spec data. &lt;p&gt;Returns:&lt;/p&gt; An object containing an audience size estimate that has a reach estimate (number of unique users) against the given targeting template. This by default provides a monthly estimate. 
/// </summary>
class  TargetingTemplateAudienceSizing
{
public:
    TargetingTemplateAudienceSizing();
    virtual ~TargetingTemplateAudienceSizing() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const TargetingTemplateAudienceSizing& rhs) const;
    bool operator!=(const TargetingTemplateAudienceSizing& rhs) const;

    /////////////////////////////////////////////
    /// TargetingTemplateAudienceSizing members

    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::TargetingTemplateAudienceSizing_reach_estimate getReachEstimate() const;
    void setReachEstimate(org::openapitools::server::model::TargetingTemplateAudienceSizing_reach_estimate const& value);
    bool reachEstimateIsSet() const;
    void unsetReach_estimate();

    friend  void to_json(nlohmann::json& j, const TargetingTemplateAudienceSizing& o);
    friend  void from_json(const nlohmann::json& j, TargetingTemplateAudienceSizing& o);
protected:
    org::openapitools::server::model::TargetingTemplateAudienceSizing_reach_estimate m_Reach_estimate;
    bool m_Reach_estimateIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* TargetingTemplateAudienceSizing_H_ */
