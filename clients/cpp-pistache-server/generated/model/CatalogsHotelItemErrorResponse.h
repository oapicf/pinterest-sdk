/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * CatalogsHotelItemErrorResponse.h
 *
 * Object describing a hotel item error
 */

#ifndef CatalogsHotelItemErrorResponse_H_
#define CatalogsHotelItemErrorResponse_H_


#include "ItemValidationEvent.h"
#include <string>
#include <vector>
#include "CatalogsType.h"
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// Object describing a hotel item error
/// </summary>
class  CatalogsHotelItemErrorResponse
{
public:
    CatalogsHotelItemErrorResponse();
    virtual ~CatalogsHotelItemErrorResponse() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const CatalogsHotelItemErrorResponse& rhs) const;
    bool operator!=(const CatalogsHotelItemErrorResponse& rhs) const;

    /////////////////////////////////////////////
    /// CatalogsHotelItemErrorResponse members

    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::CatalogsType getCatalogType() const;
    void setCatalogType(org::openapitools::server::model::CatalogsType const& value);
    /// <summary>
    /// The catalog hotel id in the merchant namespace
    /// </summary>
    std::string getHotelId() const;
    void setHotelId(std::string const& value);
    bool hotelIdIsSet() const;
    void unsetHotel_id();
    /// <summary>
    /// Array with the errors for the item id requested
    /// </summary>
    std::vector<org::openapitools::server::model::ItemValidationEvent> getErrors() const;
    void setErrors(std::vector<org::openapitools::server::model::ItemValidationEvent> const& value);
    bool errorsIsSet() const;
    void unsetErrors();

    friend  void to_json(nlohmann::json& j, const CatalogsHotelItemErrorResponse& o);
    friend  void from_json(const nlohmann::json& j, CatalogsHotelItemErrorResponse& o);
protected:
    org::openapitools::server::model::CatalogsType m_Catalog_type;

    std::string m_Hotel_id;
    bool m_Hotel_idIsSet;
    std::vector<org::openapitools::server::model::ItemValidationEvent> m_Errors;
    bool m_ErrorsIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* CatalogsHotelItemErrorResponse_H_ */
