/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ConversionEvents_data_inner_custom_data_contents_inner.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

ConversionEvents_data_inner_custom_data_contents_inner::ConversionEvents_data_inner_custom_data_contents_inner()
{
    m_Id = "";
    m_IdIsSet = false;
    m_Item_price = "";
    m_Item_priceIsSet = false;
    m_Quantity = 0L;
    m_QuantityIsSet = false;
    m_Item_name = "";
    m_Item_nameIsSet = false;
    m_Item_category = "";
    m_Item_categoryIsSet = false;
    m_Item_brand = "";
    m_Item_brandIsSet = false;
    
}

void ConversionEvents_data_inner_custom_data_contents_inner::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool ConversionEvents_data_inner_custom_data_contents_inner::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool ConversionEvents_data_inner_custom_data_contents_inner::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "ConversionEvents_data_inner_custom_data_contents_inner" : pathPrefix;

                            
    return success;
}

bool ConversionEvents_data_inner_custom_data_contents_inner::operator==(const ConversionEvents_data_inner_custom_data_contents_inner& rhs) const
{
    return
    
    
    
    ((!idIsSet() && !rhs.idIsSet()) || (idIsSet() && rhs.idIsSet() && getId() == rhs.getId())) &&
    
    
    ((!itemPriceIsSet() && !rhs.itemPriceIsSet()) || (itemPriceIsSet() && rhs.itemPriceIsSet() && getItemPrice() == rhs.getItemPrice())) &&
    
    
    ((!quantityIsSet() && !rhs.quantityIsSet()) || (quantityIsSet() && rhs.quantityIsSet() && getQuantity() == rhs.getQuantity())) &&
    
    
    ((!itemNameIsSet() && !rhs.itemNameIsSet()) || (itemNameIsSet() && rhs.itemNameIsSet() && getItemName() == rhs.getItemName())) &&
    
    
    ((!itemCategoryIsSet() && !rhs.itemCategoryIsSet()) || (itemCategoryIsSet() && rhs.itemCategoryIsSet() && getItemCategory() == rhs.getItemCategory())) &&
    
    
    ((!itemBrandIsSet() && !rhs.itemBrandIsSet()) || (itemBrandIsSet() && rhs.itemBrandIsSet() && getItemBrand() == rhs.getItemBrand()))
    
    ;
}

bool ConversionEvents_data_inner_custom_data_contents_inner::operator!=(const ConversionEvents_data_inner_custom_data_contents_inner& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const ConversionEvents_data_inner_custom_data_contents_inner& o)
{
    j = nlohmann::json::object();
    if(o.idIsSet())
        j["id"] = o.m_Id;
    if(o.itemPriceIsSet())
        j["item_price"] = o.m_Item_price;
    if(o.quantityIsSet())
        j["quantity"] = o.m_Quantity;
    if(o.itemNameIsSet())
        j["item_name"] = o.m_Item_name;
    if(o.itemCategoryIsSet())
        j["item_category"] = o.m_Item_category;
    if(o.itemBrandIsSet())
        j["item_brand"] = o.m_Item_brand;
    
}

void from_json(const nlohmann::json& j, ConversionEvents_data_inner_custom_data_contents_inner& o)
{
    if(j.find("id") != j.end())
    {
        j.at("id").get_to(o.m_Id);
        o.m_IdIsSet = true;
    } 
    if(j.find("item_price") != j.end())
    {
        j.at("item_price").get_to(o.m_Item_price);
        o.m_Item_priceIsSet = true;
    } 
    if(j.find("quantity") != j.end())
    {
        j.at("quantity").get_to(o.m_Quantity);
        o.m_QuantityIsSet = true;
    } 
    if(j.find("item_name") != j.end())
    {
        j.at("item_name").get_to(o.m_Item_name);
        o.m_Item_nameIsSet = true;
    } 
    if(j.find("item_category") != j.end())
    {
        j.at("item_category").get_to(o.m_Item_category);
        o.m_Item_categoryIsSet = true;
    } 
    if(j.find("item_brand") != j.end())
    {
        j.at("item_brand").get_to(o.m_Item_brand);
        o.m_Item_brandIsSet = true;
    } 
    
}

std::string ConversionEvents_data_inner_custom_data_contents_inner::getId() const
{
    return m_Id;
}
void ConversionEvents_data_inner_custom_data_contents_inner::setId(std::string const& value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool ConversionEvents_data_inner_custom_data_contents_inner::idIsSet() const
{
    return m_IdIsSet;
}
void ConversionEvents_data_inner_custom_data_contents_inner::unsetId()
{
    m_IdIsSet = false;
}
std::string ConversionEvents_data_inner_custom_data_contents_inner::getItemPrice() const
{
    return m_Item_price;
}
void ConversionEvents_data_inner_custom_data_contents_inner::setItemPrice(std::string const& value)
{
    m_Item_price = value;
    m_Item_priceIsSet = true;
}
bool ConversionEvents_data_inner_custom_data_contents_inner::itemPriceIsSet() const
{
    return m_Item_priceIsSet;
}
void ConversionEvents_data_inner_custom_data_contents_inner::unsetItem_price()
{
    m_Item_priceIsSet = false;
}
int64_t ConversionEvents_data_inner_custom_data_contents_inner::getQuantity() const
{
    return m_Quantity;
}
void ConversionEvents_data_inner_custom_data_contents_inner::setQuantity(int64_t const value)
{
    m_Quantity = value;
    m_QuantityIsSet = true;
}
bool ConversionEvents_data_inner_custom_data_contents_inner::quantityIsSet() const
{
    return m_QuantityIsSet;
}
void ConversionEvents_data_inner_custom_data_contents_inner::unsetQuantity()
{
    m_QuantityIsSet = false;
}
std::string ConversionEvents_data_inner_custom_data_contents_inner::getItemName() const
{
    return m_Item_name;
}
void ConversionEvents_data_inner_custom_data_contents_inner::setItemName(std::string const& value)
{
    m_Item_name = value;
    m_Item_nameIsSet = true;
}
bool ConversionEvents_data_inner_custom_data_contents_inner::itemNameIsSet() const
{
    return m_Item_nameIsSet;
}
void ConversionEvents_data_inner_custom_data_contents_inner::unsetItem_name()
{
    m_Item_nameIsSet = false;
}
std::string ConversionEvents_data_inner_custom_data_contents_inner::getItemCategory() const
{
    return m_Item_category;
}
void ConversionEvents_data_inner_custom_data_contents_inner::setItemCategory(std::string const& value)
{
    m_Item_category = value;
    m_Item_categoryIsSet = true;
}
bool ConversionEvents_data_inner_custom_data_contents_inner::itemCategoryIsSet() const
{
    return m_Item_categoryIsSet;
}
void ConversionEvents_data_inner_custom_data_contents_inner::unsetItem_category()
{
    m_Item_categoryIsSet = false;
}
std::string ConversionEvents_data_inner_custom_data_contents_inner::getItemBrand() const
{
    return m_Item_brand;
}
void ConversionEvents_data_inner_custom_data_contents_inner::setItemBrand(std::string const& value)
{
    m_Item_brand = value;
    m_Item_brandIsSet = true;
}
bool ConversionEvents_data_inner_custom_data_contents_inner::itemBrandIsSet() const
{
    return m_Item_brandIsSet;
}
void ConversionEvents_data_inner_custom_data_contents_inner::unsetItem_brand()
{
    m_Item_brandIsSet = false;
}


} // namespace org::openapitools::server::model

