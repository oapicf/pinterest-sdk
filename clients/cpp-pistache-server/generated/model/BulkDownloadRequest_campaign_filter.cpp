/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "BulkDownloadRequest_campaign_filter.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

BulkDownloadRequest_campaign_filter::BulkDownloadRequest_campaign_filter()
{
    m_Start_time = "";
    m_Start_timeIsSet = false;
    m_End_time = "";
    m_End_timeIsSet = false;
    m_Name = "";
    m_NameIsSet = false;
    m_Campaign_statusIsSet = false;
    m_Objective_typeIsSet = false;
    
}

void BulkDownloadRequest_campaign_filter::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool BulkDownloadRequest_campaign_filter::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool BulkDownloadRequest_campaign_filter::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "BulkDownloadRequest_campaign_filter" : pathPrefix;

         
    if (startTimeIsSet())
    {
        const std::string& value = m_Start_time;
        const std::string currentValuePath = _pathPrefix + ".startTime";
                
        

    }
         
    if (endTimeIsSet())
    {
        const std::string& value = m_End_time;
        const std::string currentValuePath = _pathPrefix + ".endTime";
                
        

    }
             
    if (campaignStatusIsSet())
    {
        const std::vector<org::openapitools::server::model::CampaignSummaryStatus>& value = m_Campaign_status;
        const std::string currentValuePath = _pathPrefix + ".campaignStatus";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::CampaignSummaryStatus& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath) && success;
        
        
 
                i++;
            }
        }

    }
         
    if (objectiveTypeIsSet())
    {
        const std::vector<org::openapitools::server::model::ObjectiveType>& value = m_Objective_type;
        const std::string currentValuePath = _pathPrefix + ".objectiveType";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::ObjectiveType& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath) && success;
        
        
 
                i++;
            }
        }

    }
    
    return success;
}

bool BulkDownloadRequest_campaign_filter::operator==(const BulkDownloadRequest_campaign_filter& rhs) const
{
    return
    
    
    
    ((!startTimeIsSet() && !rhs.startTimeIsSet()) || (startTimeIsSet() && rhs.startTimeIsSet() && getStartTime() == rhs.getStartTime())) &&
    
    
    ((!endTimeIsSet() && !rhs.endTimeIsSet()) || (endTimeIsSet() && rhs.endTimeIsSet() && getEndTime() == rhs.getEndTime())) &&
    
    
    ((!nameIsSet() && !rhs.nameIsSet()) || (nameIsSet() && rhs.nameIsSet() && getName() == rhs.getName())) &&
    
    
    ((!campaignStatusIsSet() && !rhs.campaignStatusIsSet()) || (campaignStatusIsSet() && rhs.campaignStatusIsSet() && getCampaignStatus() == rhs.getCampaignStatus())) &&
    
    
    ((!objectiveTypeIsSet() && !rhs.objectiveTypeIsSet()) || (objectiveTypeIsSet() && rhs.objectiveTypeIsSet() && getObjectiveType() == rhs.getObjectiveType()))
    
    ;
}

bool BulkDownloadRequest_campaign_filter::operator!=(const BulkDownloadRequest_campaign_filter& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const BulkDownloadRequest_campaign_filter& o)
{
    j = nlohmann::json::object();
    if(o.startTimeIsSet())
        j["start_time"] = o.m_Start_time;
    if(o.endTimeIsSet())
        j["end_time"] = o.m_End_time;
    if(o.nameIsSet())
        j["name"] = o.m_Name;
    if(o.campaignStatusIsSet() || !o.m_Campaign_status.empty())
        j["campaign_status"] = o.m_Campaign_status;
    if(o.objectiveTypeIsSet() || !o.m_Objective_type.empty())
        j["objective_type"] = o.m_Objective_type;
    
}

void from_json(const nlohmann::json& j, BulkDownloadRequest_campaign_filter& o)
{
    if(j.find("start_time") != j.end())
    {
        j.at("start_time").get_to(o.m_Start_time);
        o.m_Start_timeIsSet = true;
    } 
    if(j.find("end_time") != j.end())
    {
        j.at("end_time").get_to(o.m_End_time);
        o.m_End_timeIsSet = true;
    } 
    if(j.find("name") != j.end())
    {
        j.at("name").get_to(o.m_Name);
        o.m_NameIsSet = true;
    } 
    if(j.find("campaign_status") != j.end())
    {
        j.at("campaign_status").get_to(o.m_Campaign_status);
        o.m_Campaign_statusIsSet = true;
    } 
    if(j.find("objective_type") != j.end())
    {
        j.at("objective_type").get_to(o.m_Objective_type);
        o.m_Objective_typeIsSet = true;
    } 
    
}

std::string BulkDownloadRequest_campaign_filter::getStartTime() const
{
    return m_Start_time;
}
void BulkDownloadRequest_campaign_filter::setStartTime(std::string const& value)
{
    m_Start_time = value;
    m_Start_timeIsSet = true;
}
bool BulkDownloadRequest_campaign_filter::startTimeIsSet() const
{
    return m_Start_timeIsSet;
}
void BulkDownloadRequest_campaign_filter::unsetStart_time()
{
    m_Start_timeIsSet = false;
}
std::string BulkDownloadRequest_campaign_filter::getEndTime() const
{
    return m_End_time;
}
void BulkDownloadRequest_campaign_filter::setEndTime(std::string const& value)
{
    m_End_time = value;
    m_End_timeIsSet = true;
}
bool BulkDownloadRequest_campaign_filter::endTimeIsSet() const
{
    return m_End_timeIsSet;
}
void BulkDownloadRequest_campaign_filter::unsetEnd_time()
{
    m_End_timeIsSet = false;
}
std::string BulkDownloadRequest_campaign_filter::getName() const
{
    return m_Name;
}
void BulkDownloadRequest_campaign_filter::setName(std::string const& value)
{
    m_Name = value;
    m_NameIsSet = true;
}
bool BulkDownloadRequest_campaign_filter::nameIsSet() const
{
    return m_NameIsSet;
}
void BulkDownloadRequest_campaign_filter::unsetName()
{
    m_NameIsSet = false;
}
std::vector<org::openapitools::server::model::CampaignSummaryStatus> BulkDownloadRequest_campaign_filter::getCampaignStatus() const
{
    return m_Campaign_status;
}
void BulkDownloadRequest_campaign_filter::setCampaignStatus(std::vector<org::openapitools::server::model::CampaignSummaryStatus> const& value)
{
    m_Campaign_status = value;
    m_Campaign_statusIsSet = true;
}
bool BulkDownloadRequest_campaign_filter::campaignStatusIsSet() const
{
    return m_Campaign_statusIsSet;
}
void BulkDownloadRequest_campaign_filter::unsetCampaign_status()
{
    m_Campaign_statusIsSet = false;
}
std::vector<org::openapitools::server::model::ObjectiveType> BulkDownloadRequest_campaign_filter::getObjectiveType() const
{
    return m_Objective_type;
}
void BulkDownloadRequest_campaign_filter::setObjectiveType(std::vector<org::openapitools::server::model::ObjectiveType> const& value)
{
    m_Objective_type = value;
    m_Objective_typeIsSet = true;
}
bool BulkDownloadRequest_campaign_filter::objectiveTypeIsSet() const
{
    return m_Objective_typeIsSet;
}
void BulkDownloadRequest_campaign_filter::unsetObjective_type()
{
    m_Objective_typeIsSet = false;
}


} // namespace org::openapitools::server::model

