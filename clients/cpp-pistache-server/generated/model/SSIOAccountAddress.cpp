/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "SSIOAccountAddress.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

SSIOAccountAddress::SSIOAccountAddress()
{
    m_Display = "";
    m_DisplayIsSet = false;
    m_Purpose = "";
    m_PurposeIsSet = false;
    m_Address_id = "";
    m_Address_idIsSet = false;
    m_Order_legal_entity = "";
    m_Order_legal_entityIsSet = false;
    
}

void SSIOAccountAddress::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool SSIOAccountAddress::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool SSIOAccountAddress::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "SSIOAccountAddress" : pathPrefix;

                    
    return success;
}

bool SSIOAccountAddress::operator==(const SSIOAccountAddress& rhs) const
{
    return
    
    
    
    ((!displayIsSet() && !rhs.displayIsSet()) || (displayIsSet() && rhs.displayIsSet() && getDisplay() == rhs.getDisplay())) &&
    
    
    ((!purposeIsSet() && !rhs.purposeIsSet()) || (purposeIsSet() && rhs.purposeIsSet() && getPurpose() == rhs.getPurpose())) &&
    
    
    ((!addressIdIsSet() && !rhs.addressIdIsSet()) || (addressIdIsSet() && rhs.addressIdIsSet() && getAddressId() == rhs.getAddressId())) &&
    
    
    ((!orderLegalEntityIsSet() && !rhs.orderLegalEntityIsSet()) || (orderLegalEntityIsSet() && rhs.orderLegalEntityIsSet() && getOrderLegalEntity() == rhs.getOrderLegalEntity()))
    
    ;
}

bool SSIOAccountAddress::operator!=(const SSIOAccountAddress& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const SSIOAccountAddress& o)
{
    j = nlohmann::json::object();
    if(o.displayIsSet())
        j["display"] = o.m_Display;
    if(o.purposeIsSet())
        j["purpose"] = o.m_Purpose;
    if(o.addressIdIsSet())
        j["address_id"] = o.m_Address_id;
    if(o.orderLegalEntityIsSet())
        j["order_legal_entity"] = o.m_Order_legal_entity;
    
}

void from_json(const nlohmann::json& j, SSIOAccountAddress& o)
{
    if(j.find("display") != j.end())
    {
        j.at("display").get_to(o.m_Display);
        o.m_DisplayIsSet = true;
    } 
    if(j.find("purpose") != j.end())
    {
        j.at("purpose").get_to(o.m_Purpose);
        o.m_PurposeIsSet = true;
    } 
    if(j.find("address_id") != j.end())
    {
        j.at("address_id").get_to(o.m_Address_id);
        o.m_Address_idIsSet = true;
    } 
    if(j.find("order_legal_entity") != j.end())
    {
        j.at("order_legal_entity").get_to(o.m_Order_legal_entity);
        o.m_Order_legal_entityIsSet = true;
    } 
    
}

std::string SSIOAccountAddress::getDisplay() const
{
    return m_Display;
}
void SSIOAccountAddress::setDisplay(std::string const& value)
{
    m_Display = value;
    m_DisplayIsSet = true;
}
bool SSIOAccountAddress::displayIsSet() const
{
    return m_DisplayIsSet;
}
void SSIOAccountAddress::unsetDisplay()
{
    m_DisplayIsSet = false;
}
std::string SSIOAccountAddress::getPurpose() const
{
    return m_Purpose;
}
void SSIOAccountAddress::setPurpose(std::string const& value)
{
    m_Purpose = value;
    m_PurposeIsSet = true;
}
bool SSIOAccountAddress::purposeIsSet() const
{
    return m_PurposeIsSet;
}
void SSIOAccountAddress::unsetPurpose()
{
    m_PurposeIsSet = false;
}
std::string SSIOAccountAddress::getAddressId() const
{
    return m_Address_id;
}
void SSIOAccountAddress::setAddressId(std::string const& value)
{
    m_Address_id = value;
    m_Address_idIsSet = true;
}
bool SSIOAccountAddress::addressIdIsSet() const
{
    return m_Address_idIsSet;
}
void SSIOAccountAddress::unsetAddress_id()
{
    m_Address_idIsSet = false;
}
std::string SSIOAccountAddress::getOrderLegalEntity() const
{
    return m_Order_legal_entity;
}
void SSIOAccountAddress::setOrderLegalEntity(std::string const& value)
{
    m_Order_legal_entity = value;
    m_Order_legal_entityIsSet = true;
}
bool SSIOAccountAddress::orderLegalEntityIsSet() const
{
    return m_Order_legal_entityIsSet;
}
void SSIOAccountAddress::unsetOrder_legal_entity()
{
    m_Order_legal_entityIsSet = false;
}


} // namespace org::openapitools::server::model

