/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "CatalogsCreativeAssetsFeed.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

CatalogsCreativeAssetsFeed::CatalogsCreativeAssetsFeed()
{
    m_Created_at = "";
    m_Id = "";
    m_Updated_at = "";
    m_Name = "";
    m_Location = "";
    m_Default_locale = "";
    m_Catalog_id = "";
    
}

void CatalogsCreativeAssetsFeed::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool CatalogsCreativeAssetsFeed::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool CatalogsCreativeAssetsFeed::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "CatalogsCreativeAssetsFeed" : pathPrefix;

                                
    if (!m_Credentials.validate(msg, _pathPrefix + ".credentials")) {
        msg << _pathPrefix << ": Credentials is invalid;";
        success = false;
    }        
    if (!m_Preferred_processing_schedule.validate(msg, _pathPrefix + ".preferredProcessingSchedule")) {
        msg << _pathPrefix << ": Preferred_processing_schedule is invalid;";
        success = false;
    }                     
    
    /* Catalog_id */ {
        const std::string& value = m_Catalog_id;
        const std::string currentValuePath = _pathPrefix + ".catalogId";
                
        

    }
    
    return success;
}

bool CatalogsCreativeAssetsFeed::operator==(const CatalogsCreativeAssetsFeed& rhs) const
{
    return
    
    
    (getCreatedAt() == rhs.getCreatedAt())
     &&
    
    (getId() == rhs.getId())
     &&
    
    (getUpdatedAt() == rhs.getUpdatedAt())
     &&
    
    (getName() == rhs.getName())
     &&
    
    (getFormat() == rhs.getFormat())
     &&
    
    (getCatalogType() == rhs.getCatalogType())
     &&
    
    (getCredentials() == rhs.getCredentials())
     &&
    
    (getLocation() == rhs.getLocation())
     &&
    
    (getPreferredProcessingSchedule() == rhs.getPreferredProcessingSchedule())
     &&
    
    (getStatus() == rhs.getStatus())
     &&
    
    (getDefaultCurrency() == rhs.getDefaultCurrency())
     &&
    
    (getDefaultLocale() == rhs.getDefaultLocale())
     &&
    
    (getDefaultCountry() == rhs.getDefaultCountry())
     &&
    
    (getCatalogId() == rhs.getCatalogId())
    
    
    ;
}

bool CatalogsCreativeAssetsFeed::operator!=(const CatalogsCreativeAssetsFeed& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const CatalogsCreativeAssetsFeed& o)
{
    j = nlohmann::json::object();
    j["created_at"] = o.m_Created_at;
    j["id"] = o.m_Id;
    j["updated_at"] = o.m_Updated_at;
    j["name"] = o.m_Name;
    j["format"] = o.m_Format;
    j["catalog_type"] = o.m_Catalog_type;
    j["credentials"] = o.m_Credentials;
    j["location"] = o.m_Location;
    j["preferred_processing_schedule"] = o.m_Preferred_processing_schedule;
    j["status"] = o.m_Status;
    j["default_currency"] = o.m_Default_currency;
    j["default_locale"] = o.m_Default_locale;
    j["default_country"] = o.m_Default_country;
    j["catalog_id"] = o.m_Catalog_id;
    
}

void from_json(const nlohmann::json& j, CatalogsCreativeAssetsFeed& o)
{
    j.at("created_at").get_to(o.m_Created_at);
    j.at("id").get_to(o.m_Id);
    j.at("updated_at").get_to(o.m_Updated_at);
    j.at("name").get_to(o.m_Name);
    j.at("format").get_to(o.m_Format);
    j.at("catalog_type").get_to(o.m_Catalog_type);
    j.at("credentials").get_to(o.m_Credentials);
    j.at("location").get_to(o.m_Location);
    j.at("preferred_processing_schedule").get_to(o.m_Preferred_processing_schedule);
    j.at("status").get_to(o.m_Status);
    j.at("default_currency").get_to(o.m_Default_currency);
    j.at("default_locale").get_to(o.m_Default_locale);
    j.at("default_country").get_to(o.m_Default_country);
    j.at("catalog_id").get_to(o.m_Catalog_id);
    
}

std::string CatalogsCreativeAssetsFeed::getCreatedAt() const
{
    return m_Created_at;
}
void CatalogsCreativeAssetsFeed::setCreatedAt(std::string const& value)
{
    m_Created_at = value;
}
std::string CatalogsCreativeAssetsFeed::getId() const
{
    return m_Id;
}
void CatalogsCreativeAssetsFeed::setId(std::string const& value)
{
    m_Id = value;
}
std::string CatalogsCreativeAssetsFeed::getUpdatedAt() const
{
    return m_Updated_at;
}
void CatalogsCreativeAssetsFeed::setUpdatedAt(std::string const& value)
{
    m_Updated_at = value;
}
std::string CatalogsCreativeAssetsFeed::getName() const
{
    return m_Name;
}
void CatalogsCreativeAssetsFeed::setName(std::string const& value)
{
    m_Name = value;
}
org::openapitools::server::model::CatalogsFormat CatalogsCreativeAssetsFeed::getFormat() const
{
    return m_Format;
}
void CatalogsCreativeAssetsFeed::setFormat(org::openapitools::server::model::CatalogsFormat const& value)
{
    m_Format = value;
}
org::openapitools::server::model::CatalogsType CatalogsCreativeAssetsFeed::getCatalogType() const
{
    return m_Catalog_type;
}
void CatalogsCreativeAssetsFeed::setCatalogType(org::openapitools::server::model::CatalogsType const& value)
{
    m_Catalog_type = value;
}
org::openapitools::server::model::CatalogsFeedCredentials CatalogsCreativeAssetsFeed::getCredentials() const
{
    return m_Credentials;
}
void CatalogsCreativeAssetsFeed::setCredentials(org::openapitools::server::model::CatalogsFeedCredentials const& value)
{
    m_Credentials = value;
}
std::string CatalogsCreativeAssetsFeed::getLocation() const
{
    return m_Location;
}
void CatalogsCreativeAssetsFeed::setLocation(std::string const& value)
{
    m_Location = value;
}
org::openapitools::server::model::CatalogsFeedProcessingSchedule CatalogsCreativeAssetsFeed::getPreferredProcessingSchedule() const
{
    return m_Preferred_processing_schedule;
}
void CatalogsCreativeAssetsFeed::setPreferredProcessingSchedule(org::openapitools::server::model::CatalogsFeedProcessingSchedule const& value)
{
    m_Preferred_processing_schedule = value;
}
org::openapitools::server::model::CatalogsStatus CatalogsCreativeAssetsFeed::getStatus() const
{
    return m_Status;
}
void CatalogsCreativeAssetsFeed::setStatus(org::openapitools::server::model::CatalogsStatus const& value)
{
    m_Status = value;
}
org::openapitools::server::model::NullableCurrency CatalogsCreativeAssetsFeed::getDefaultCurrency() const
{
    return m_Default_currency;
}
void CatalogsCreativeAssetsFeed::setDefaultCurrency(org::openapitools::server::model::NullableCurrency const& value)
{
    m_Default_currency = value;
}
std::string CatalogsCreativeAssetsFeed::getDefaultLocale() const
{
    return m_Default_locale;
}
void CatalogsCreativeAssetsFeed::setDefaultLocale(std::string const& value)
{
    m_Default_locale = value;
}
org::openapitools::server::model::Country CatalogsCreativeAssetsFeed::getDefaultCountry() const
{
    return m_Default_country;
}
void CatalogsCreativeAssetsFeed::setDefaultCountry(org::openapitools::server::model::Country const& value)
{
    m_Default_country = value;
}
std::string CatalogsCreativeAssetsFeed::getCatalogId() const
{
    return m_Catalog_id;
}
void CatalogsCreativeAssetsFeed::setCatalogId(std::string const& value)
{
    m_Catalog_id = value;
}


} // namespace org::openapitools::server::model

