/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * CatalogsReportDistributionStats.h
 *
 * 
 */

#ifndef CatalogsReportDistributionStats_H_
#define CatalogsReportDistributionStats_H_


#include <string>
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// 
/// </summary>
class  CatalogsReportDistributionStats
{
public:
    CatalogsReportDistributionStats();
    virtual ~CatalogsReportDistributionStats() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const CatalogsReportDistributionStats& rhs) const;
    bool operator!=(const CatalogsReportDistributionStats& rhs) const;

    /////////////////////////////////////////////
    /// CatalogsReportDistributionStats members

    /// <summary>
    /// 
    /// </summary>
    std::string getReportType() const;
    void setReportType(std::string const& value);
    bool reportTypeIsSet() const;
    void unsetReport_type();
    /// <summary>
    /// ID of the catalog entity.
    /// </summary>
    std::string getCatalogId() const;
    void setCatalogId(std::string const& value);
    bool catalogIdIsSet() const;
    void unsetCatalog_id();
    /// <summary>
    /// The event code that a diagnostics aggregated number references
    /// </summary>
    int32_t getCode() const;
    void setCode(int32_t const value);
    bool codeIsSet() const;
    void unsetCode();
    /// <summary>
    /// A human-friendly label for the event code (e.g, &#39;SPAM&#39;)
    /// </summary>
    std::string getCodeLabel() const;
    void setCodeLabel(std::string const& value);
    bool codeLabelIsSet() const;
    void unsetCode_label();
    /// <summary>
    /// Title message describing the diagnostic issue
    /// </summary>
    std::string getMessage() const;
    void setMessage(std::string const& value);
    bool messageIsSet() const;
    void unsetMessage();
    /// <summary>
    /// Number of occurrences of the issue
    /// </summary>
    int32_t getOccurrences() const;
    void setOccurrences(int32_t const value);
    bool occurrencesIsSet() const;
    void unsetOccurrences();
    /// <summary>
    /// Indicates if issue makes items ineligible for ads distribution
    /// </summary>
    bool isIneligibleForAds() const;
    void setIneligibleForAds(bool const value);
    bool ineligibleForAdsIsSet() const;
    void unsetIneligible_for_ads();
    /// <summary>
    /// Indicates if issue makes items ineligible for organic distribution
    /// </summary>
    bool isIneligibleForOrganic() const;
    void setIneligibleForOrganic(bool const value);
    bool ineligibleForOrganicIsSet() const;
    void unsetIneligible_for_organic();

    friend  void to_json(nlohmann::json& j, const CatalogsReportDistributionStats& o);
    friend  void from_json(const nlohmann::json& j, CatalogsReportDistributionStats& o);
protected:
    std::string m_Report_type;
    bool m_Report_typeIsSet;
    std::string m_Catalog_id;
    bool m_Catalog_idIsSet;
    int32_t m_Code;
    bool m_CodeIsSet;
    std::string m_Code_label;
    bool m_Code_labelIsSet;
    std::string m_Message;
    bool m_MessageIsSet;
    int32_t m_Occurrences;
    bool m_OccurrencesIsSet;
    bool m_Ineligible_for_ads;
    bool m_Ineligible_for_adsIsSet;
    bool m_Ineligible_for_organic;
    bool m_Ineligible_for_organicIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* CatalogsReportDistributionStats_H_ */
