/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * AdAccountCreateSubscriptionRequest.h
 *
 * 
 */

#ifndef AdAccountCreateSubscriptionRequest_H_
#define AdAccountCreateSubscriptionRequest_H_


#include "AdAccountCreateSubscriptionRequest_partner_metadata.h"
#include <string>
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// 
/// </summary>
class  AdAccountCreateSubscriptionRequest
{
public:
    AdAccountCreateSubscriptionRequest();
    virtual ~AdAccountCreateSubscriptionRequest() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const AdAccountCreateSubscriptionRequest& rhs) const;
    bool operator!=(const AdAccountCreateSubscriptionRequest& rhs) const;

    /////////////////////////////////////////////
    /// AdAccountCreateSubscriptionRequest members

    /// <summary>
    /// Standard HTTPS webhook URL.
    /// </summary>
    std::string getWebhookUrl() const;
    void setWebhookUrl(std::string const& value);
    /// <summary>
    /// Lead form ID.
    /// </summary>
    std::string getLeadFormId() const;
    void setLeadFormId(std::string const& value);
    bool leadFormIdIsSet() const;
    void unsetLead_form_id();
    /// <summary>
    /// Partner access token. Only for clients that requires authentication. We recommend to avoid this param.
    /// </summary>
    std::string getPartnerAccessToken() const;
    void setPartnerAccessToken(std::string const& value);
    bool partnerAccessTokenIsSet() const;
    void unsetPartner_access_token();
    /// <summary>
    /// Partner refresh token. Only for clients that requires authentication. We recommend to avoid this param.
    /// </summary>
    std::string getPartnerRefreshToken() const;
    void setPartnerRefreshToken(std::string const& value);
    bool partnerRefreshTokenIsSet() const;
    void unsetPartner_refresh_token();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::AdAccountCreateSubscriptionRequest_partner_metadata getPartnerMetadata() const;
    void setPartnerMetadata(org::openapitools::server::model::AdAccountCreateSubscriptionRequest_partner_metadata const& value);
    bool partnerMetadataIsSet() const;
    void unsetPartner_metadata();

    friend  void to_json(nlohmann::json& j, const AdAccountCreateSubscriptionRequest& o);
    friend  void from_json(const nlohmann::json& j, AdAccountCreateSubscriptionRequest& o);
protected:
    std::string m_Webhook_url;

    std::string m_Lead_form_id;
    bool m_Lead_form_idIsSet;
    std::string m_Partner_access_token;
    bool m_Partner_access_tokenIsSet;
    std::string m_Partner_refresh_token;
    bool m_Partner_refresh_tokenIsSet;
    org::openapitools::server::model::AdAccountCreateSubscriptionRequest_partner_metadata m_Partner_metadata;
    bool m_Partner_metadataIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* AdAccountCreateSubscriptionRequest_H_ */
