/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ConversionApiResponse_events_inner.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

ConversionApiResponse_events_inner::ConversionApiResponse_events_inner()
{
    m_Status = "";
    m_Error_message = "";
    m_Error_messageIsSet = false;
    m_Warning_message = "";
    m_Warning_messageIsSet = false;
    
}

void ConversionApiResponse_events_inner::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool ConversionApiResponse_events_inner::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool ConversionApiResponse_events_inner::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "ConversionApiResponse_events_inner" : pathPrefix;

                
    return success;
}

bool ConversionApiResponse_events_inner::operator==(const ConversionApiResponse_events_inner& rhs) const
{
    return
    
    
    (getStatus() == rhs.getStatus())
     &&
    
    
    ((!errorMessageIsSet() && !rhs.errorMessageIsSet()) || (errorMessageIsSet() && rhs.errorMessageIsSet() && getErrorMessage() == rhs.getErrorMessage())) &&
    
    
    ((!warningMessageIsSet() && !rhs.warningMessageIsSet()) || (warningMessageIsSet() && rhs.warningMessageIsSet() && getWarningMessage() == rhs.getWarningMessage()))
    
    ;
}

bool ConversionApiResponse_events_inner::operator!=(const ConversionApiResponse_events_inner& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const ConversionApiResponse_events_inner& o)
{
    j = nlohmann::json::object();
    j["status"] = o.m_Status;
    if(o.errorMessageIsSet())
        j["error_message"] = o.m_Error_message;
    if(o.warningMessageIsSet())
        j["warning_message"] = o.m_Warning_message;
    
}

void from_json(const nlohmann::json& j, ConversionApiResponse_events_inner& o)
{
    j.at("status").get_to(o.m_Status);
    if(j.find("error_message") != j.end())
    {
        j.at("error_message").get_to(o.m_Error_message);
        o.m_Error_messageIsSet = true;
    } 
    if(j.find("warning_message") != j.end())
    {
        j.at("warning_message").get_to(o.m_Warning_message);
        o.m_Warning_messageIsSet = true;
    } 
    
}

std::string ConversionApiResponse_events_inner::getStatus() const
{
    return m_Status;
}
void ConversionApiResponse_events_inner::setStatus(std::string const& value)
{
    m_Status = value;
}
std::string ConversionApiResponse_events_inner::getErrorMessage() const
{
    return m_Error_message;
}
void ConversionApiResponse_events_inner::setErrorMessage(std::string const& value)
{
    m_Error_message = value;
    m_Error_messageIsSet = true;
}
bool ConversionApiResponse_events_inner::errorMessageIsSet() const
{
    return m_Error_messageIsSet;
}
void ConversionApiResponse_events_inner::unsetError_message()
{
    m_Error_messageIsSet = false;
}
std::string ConversionApiResponse_events_inner::getWarningMessage() const
{
    return m_Warning_message;
}
void ConversionApiResponse_events_inner::setWarningMessage(std::string const& value)
{
    m_Warning_message = value;
    m_Warning_messageIsSet = true;
}
bool ConversionApiResponse_events_inner::warningMessageIsSet() const
{
    return m_Warning_messageIsSet;
}
void ConversionApiResponse_events_inner::unsetWarning_message()
{
    m_Warning_messageIsSet = false;
}


} // namespace org::openapitools::server::model

