/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ConversionEventsUserData.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

ConversionEventsUserData::ConversionEventsUserData()
{
    m_PhIsSet = false;
    m_GeIsSet = false;
    m_DbIsSet = false;
    m_LnIsSet = false;
    m_FnIsSet = false;
    m_CtIsSet = false;
    m_StIsSet = false;
    m_ZpIsSet = false;
    m_CountryIsSet = false;
    m_External_idIsSet = false;
    m_Click_id = "";
    m_Click_idIsSet = false;
    m_Partner_id = "";
    m_Partner_idIsSet = false;
    m_Client_ip_address = "";
    m_Client_user_agent = "";
    
}

void ConversionEventsUserData::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool ConversionEventsUserData::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool ConversionEventsUserData::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "ConversionEventsUserData" : pathPrefix;

         
    if (phIsSet())
    {
        const std::vector<std::string>& value = m_Ph;
        const std::string currentValuePath = _pathPrefix + ".ph";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const std::string& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }

    }
         
    if (geIsSet())
    {
        const std::vector<std::string>& value = m_Ge;
        const std::string currentValuePath = _pathPrefix + ".ge";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const std::string& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }

    }
         
    if (dbIsSet())
    {
        const std::vector<std::string>& value = m_Db;
        const std::string currentValuePath = _pathPrefix + ".db";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const std::string& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }

    }
         
    if (lnIsSet())
    {
        const std::vector<std::string>& value = m_Ln;
        const std::string currentValuePath = _pathPrefix + ".ln";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const std::string& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }

    }
         
    if (fnIsSet())
    {
        const std::vector<std::string>& value = m_Fn;
        const std::string currentValuePath = _pathPrefix + ".fn";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const std::string& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }

    }
         
    if (ctIsSet())
    {
        const std::vector<std::string>& value = m_Ct;
        const std::string currentValuePath = _pathPrefix + ".ct";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const std::string& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }

    }
         
    if (stIsSet())
    {
        const std::vector<std::string>& value = m_St;
        const std::string currentValuePath = _pathPrefix + ".st";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const std::string& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }

    }
         
    if (zpIsSet())
    {
        const std::vector<std::string>& value = m_Zp;
        const std::string currentValuePath = _pathPrefix + ".zp";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const std::string& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }

    }
         
    if (countryIsSet())
    {
        const std::vector<std::string>& value = m_Country;
        const std::string currentValuePath = _pathPrefix + ".country";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const std::string& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }

    }
         
    if (externalIdIsSet())
    {
        const std::vector<std::string>& value = m_External_id;
        const std::string currentValuePath = _pathPrefix + ".externalId";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const std::string& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }

    }
                 
    
    /* Em */ {
        const std::vector<std::string>& value = m_Em;
        const std::string currentValuePath = _pathPrefix + ".em";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const std::string& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }

    }
         
    
    /* Hashed_maids */ {
        const std::vector<std::string>& value = m_Hashed_maids;
        const std::string currentValuePath = _pathPrefix + ".hashedMaids";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const std::string& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }

    }
            
    return success;
}

bool ConversionEventsUserData::operator==(const ConversionEventsUserData& rhs) const
{
    return
    
    
    
    ((!phIsSet() && !rhs.phIsSet()) || (phIsSet() && rhs.phIsSet() && getPh() == rhs.getPh())) &&
    
    
    ((!geIsSet() && !rhs.geIsSet()) || (geIsSet() && rhs.geIsSet() && getGe() == rhs.getGe())) &&
    
    
    ((!dbIsSet() && !rhs.dbIsSet()) || (dbIsSet() && rhs.dbIsSet() && getDb() == rhs.getDb())) &&
    
    
    ((!lnIsSet() && !rhs.lnIsSet()) || (lnIsSet() && rhs.lnIsSet() && getLn() == rhs.getLn())) &&
    
    
    ((!fnIsSet() && !rhs.fnIsSet()) || (fnIsSet() && rhs.fnIsSet() && getFn() == rhs.getFn())) &&
    
    
    ((!ctIsSet() && !rhs.ctIsSet()) || (ctIsSet() && rhs.ctIsSet() && getCt() == rhs.getCt())) &&
    
    
    ((!stIsSet() && !rhs.stIsSet()) || (stIsSet() && rhs.stIsSet() && getSt() == rhs.getSt())) &&
    
    
    ((!zpIsSet() && !rhs.zpIsSet()) || (zpIsSet() && rhs.zpIsSet() && getZp() == rhs.getZp())) &&
    
    
    ((!countryIsSet() && !rhs.countryIsSet()) || (countryIsSet() && rhs.countryIsSet() && getCountry() == rhs.getCountry())) &&
    
    
    ((!externalIdIsSet() && !rhs.externalIdIsSet()) || (externalIdIsSet() && rhs.externalIdIsSet() && getExternalId() == rhs.getExternalId())) &&
    
    
    ((!clickIdIsSet() && !rhs.clickIdIsSet()) || (clickIdIsSet() && rhs.clickIdIsSet() && getClickId() == rhs.getClickId())) &&
    
    
    ((!partnerIdIsSet() && !rhs.partnerIdIsSet()) || (partnerIdIsSet() && rhs.partnerIdIsSet() && getPartnerId() == rhs.getPartnerId())) &&
    
    (getEm() == rhs.getEm())
     &&
    
    (getHashedMaids() == rhs.getHashedMaids())
     &&
    
    (getClientIpAddress() == rhs.getClientIpAddress())
     &&
    
    (getClientUserAgent() == rhs.getClientUserAgent())
    
    
    ;
}

bool ConversionEventsUserData::operator!=(const ConversionEventsUserData& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const ConversionEventsUserData& o)
{
    j = nlohmann::json::object();
    if(o.phIsSet() || !o.m_Ph.empty())
        j["ph"] = o.m_Ph;
    if(o.geIsSet() || !o.m_Ge.empty())
        j["ge"] = o.m_Ge;
    if(o.dbIsSet() || !o.m_Db.empty())
        j["db"] = o.m_Db;
    if(o.lnIsSet() || !o.m_Ln.empty())
        j["ln"] = o.m_Ln;
    if(o.fnIsSet() || !o.m_Fn.empty())
        j["fn"] = o.m_Fn;
    if(o.ctIsSet() || !o.m_Ct.empty())
        j["ct"] = o.m_Ct;
    if(o.stIsSet() || !o.m_St.empty())
        j["st"] = o.m_St;
    if(o.zpIsSet() || !o.m_Zp.empty())
        j["zp"] = o.m_Zp;
    if(o.countryIsSet() || !o.m_Country.empty())
        j["country"] = o.m_Country;
    if(o.externalIdIsSet() || !o.m_External_id.empty())
        j["external_id"] = o.m_External_id;
    if(o.clickIdIsSet())
        j["click_id"] = o.m_Click_id;
    if(o.partnerIdIsSet())
        j["partner_id"] = o.m_Partner_id;
    j["em"] = o.m_Em;
    j["hashed_maids"] = o.m_Hashed_maids;
    j["client_ip_address"] = o.m_Client_ip_address;
    j["client_user_agent"] = o.m_Client_user_agent;
    
}

void from_json(const nlohmann::json& j, ConversionEventsUserData& o)
{
    if(j.find("ph") != j.end())
    {
        j.at("ph").get_to(o.m_Ph);
        o.m_PhIsSet = true;
    } 
    if(j.find("ge") != j.end())
    {
        j.at("ge").get_to(o.m_Ge);
        o.m_GeIsSet = true;
    } 
    if(j.find("db") != j.end())
    {
        j.at("db").get_to(o.m_Db);
        o.m_DbIsSet = true;
    } 
    if(j.find("ln") != j.end())
    {
        j.at("ln").get_to(o.m_Ln);
        o.m_LnIsSet = true;
    } 
    if(j.find("fn") != j.end())
    {
        j.at("fn").get_to(o.m_Fn);
        o.m_FnIsSet = true;
    } 
    if(j.find("ct") != j.end())
    {
        j.at("ct").get_to(o.m_Ct);
        o.m_CtIsSet = true;
    } 
    if(j.find("st") != j.end())
    {
        j.at("st").get_to(o.m_St);
        o.m_StIsSet = true;
    } 
    if(j.find("zp") != j.end())
    {
        j.at("zp").get_to(o.m_Zp);
        o.m_ZpIsSet = true;
    } 
    if(j.find("country") != j.end())
    {
        j.at("country").get_to(o.m_Country);
        o.m_CountryIsSet = true;
    } 
    if(j.find("external_id") != j.end())
    {
        j.at("external_id").get_to(o.m_External_id);
        o.m_External_idIsSet = true;
    } 
    if(j.find("click_id") != j.end())
    {
        j.at("click_id").get_to(o.m_Click_id);
        o.m_Click_idIsSet = true;
    } 
    if(j.find("partner_id") != j.end())
    {
        j.at("partner_id").get_to(o.m_Partner_id);
        o.m_Partner_idIsSet = true;
    } 
    j.at("em").get_to(o.m_Em);
    j.at("hashed_maids").get_to(o.m_Hashed_maids);
    j.at("client_ip_address").get_to(o.m_Client_ip_address);
    j.at("client_user_agent").get_to(o.m_Client_user_agent);
    
}

std::vector<std::string> ConversionEventsUserData::getPh() const
{
    return m_Ph;
}
void ConversionEventsUserData::setPh(std::vector<std::string> const& value)
{
    m_Ph = value;
    m_PhIsSet = true;
}
bool ConversionEventsUserData::phIsSet() const
{
    return m_PhIsSet;
}
void ConversionEventsUserData::unsetPh()
{
    m_PhIsSet = false;
}
std::vector<std::string> ConversionEventsUserData::getGe() const
{
    return m_Ge;
}
void ConversionEventsUserData::setGe(std::vector<std::string> const& value)
{
    m_Ge = value;
    m_GeIsSet = true;
}
bool ConversionEventsUserData::geIsSet() const
{
    return m_GeIsSet;
}
void ConversionEventsUserData::unsetGe()
{
    m_GeIsSet = false;
}
std::vector<std::string> ConversionEventsUserData::getDb() const
{
    return m_Db;
}
void ConversionEventsUserData::setDb(std::vector<std::string> const& value)
{
    m_Db = value;
    m_DbIsSet = true;
}
bool ConversionEventsUserData::dbIsSet() const
{
    return m_DbIsSet;
}
void ConversionEventsUserData::unsetDb()
{
    m_DbIsSet = false;
}
std::vector<std::string> ConversionEventsUserData::getLn() const
{
    return m_Ln;
}
void ConversionEventsUserData::setLn(std::vector<std::string> const& value)
{
    m_Ln = value;
    m_LnIsSet = true;
}
bool ConversionEventsUserData::lnIsSet() const
{
    return m_LnIsSet;
}
void ConversionEventsUserData::unsetLn()
{
    m_LnIsSet = false;
}
std::vector<std::string> ConversionEventsUserData::getFn() const
{
    return m_Fn;
}
void ConversionEventsUserData::setFn(std::vector<std::string> const& value)
{
    m_Fn = value;
    m_FnIsSet = true;
}
bool ConversionEventsUserData::fnIsSet() const
{
    return m_FnIsSet;
}
void ConversionEventsUserData::unsetFn()
{
    m_FnIsSet = false;
}
std::vector<std::string> ConversionEventsUserData::getCt() const
{
    return m_Ct;
}
void ConversionEventsUserData::setCt(std::vector<std::string> const& value)
{
    m_Ct = value;
    m_CtIsSet = true;
}
bool ConversionEventsUserData::ctIsSet() const
{
    return m_CtIsSet;
}
void ConversionEventsUserData::unsetCt()
{
    m_CtIsSet = false;
}
std::vector<std::string> ConversionEventsUserData::getSt() const
{
    return m_St;
}
void ConversionEventsUserData::setSt(std::vector<std::string> const& value)
{
    m_St = value;
    m_StIsSet = true;
}
bool ConversionEventsUserData::stIsSet() const
{
    return m_StIsSet;
}
void ConversionEventsUserData::unsetSt()
{
    m_StIsSet = false;
}
std::vector<std::string> ConversionEventsUserData::getZp() const
{
    return m_Zp;
}
void ConversionEventsUserData::setZp(std::vector<std::string> const& value)
{
    m_Zp = value;
    m_ZpIsSet = true;
}
bool ConversionEventsUserData::zpIsSet() const
{
    return m_ZpIsSet;
}
void ConversionEventsUserData::unsetZp()
{
    m_ZpIsSet = false;
}
std::vector<std::string> ConversionEventsUserData::getCountry() const
{
    return m_Country;
}
void ConversionEventsUserData::setCountry(std::vector<std::string> const& value)
{
    m_Country = value;
    m_CountryIsSet = true;
}
bool ConversionEventsUserData::countryIsSet() const
{
    return m_CountryIsSet;
}
void ConversionEventsUserData::unsetCountry()
{
    m_CountryIsSet = false;
}
std::vector<std::string> ConversionEventsUserData::getExternalId() const
{
    return m_External_id;
}
void ConversionEventsUserData::setExternalId(std::vector<std::string> const& value)
{
    m_External_id = value;
    m_External_idIsSet = true;
}
bool ConversionEventsUserData::externalIdIsSet() const
{
    return m_External_idIsSet;
}
void ConversionEventsUserData::unsetExternal_id()
{
    m_External_idIsSet = false;
}
std::string ConversionEventsUserData::getClickId() const
{
    return m_Click_id;
}
void ConversionEventsUserData::setClickId(std::string const& value)
{
    m_Click_id = value;
    m_Click_idIsSet = true;
}
bool ConversionEventsUserData::clickIdIsSet() const
{
    return m_Click_idIsSet;
}
void ConversionEventsUserData::unsetClick_id()
{
    m_Click_idIsSet = false;
}
std::string ConversionEventsUserData::getPartnerId() const
{
    return m_Partner_id;
}
void ConversionEventsUserData::setPartnerId(std::string const& value)
{
    m_Partner_id = value;
    m_Partner_idIsSet = true;
}
bool ConversionEventsUserData::partnerIdIsSet() const
{
    return m_Partner_idIsSet;
}
void ConversionEventsUserData::unsetPartner_id()
{
    m_Partner_idIsSet = false;
}
std::vector<std::string> ConversionEventsUserData::getEm() const
{
    return m_Em;
}
void ConversionEventsUserData::setEm(std::vector<std::string> const& value)
{
    m_Em = value;
}
std::vector<std::string> ConversionEventsUserData::getHashedMaids() const
{
    return m_Hashed_maids;
}
void ConversionEventsUserData::setHashedMaids(std::vector<std::string> const& value)
{
    m_Hashed_maids = value;
}
std::string ConversionEventsUserData::getClientIpAddress() const
{
    return m_Client_ip_address;
}
void ConversionEventsUserData::setClientIpAddress(std::string const& value)
{
    m_Client_ip_address = value;
}
std::string ConversionEventsUserData::getClientUserAgent() const
{
    return m_Client_user_agent;
}
void ConversionEventsUserData::setClientUserAgent(std::string const& value)
{
    m_Client_user_agent = value;
}


} // namespace org::openapitools::server::model

