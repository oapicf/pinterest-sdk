/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * BaseInviteDataResponse.h
 *
 * 
 */

#ifndef BaseInviteDataResponse_H_
#define BaseInviteDataResponse_H_


#include <string>
#include "BaseInviteDataResponse_invite_data.h"
#include "BusinessAccessUserSummary.h"
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// 
/// </summary>
class  BaseInviteDataResponse
{
public:
    BaseInviteDataResponse();
    virtual ~BaseInviteDataResponse() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const BaseInviteDataResponse& rhs) const;
    bool operator!=(const BaseInviteDataResponse& rhs) const;

    /////////////////////////////////////////////
    /// BaseInviteDataResponse members

    /// <summary>
    /// Unique identifier of the invite/request.
    /// </summary>
    std::string getId() const;
    void setId(std::string const& value);
    bool idIsSet() const;
    void unsetId();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::BaseInviteDataResponse_invite_data getInviteData() const;
    void setInviteData(org::openapitools::server::model::BaseInviteDataResponse_invite_data const& value);
    bool inviteDataIsSet() const;
    void unsetInvite_data();
    /// <summary>
    /// Indicates whether the invite/request was received.
    /// </summary>
    bool isIsReceivedInvite() const;
    void setIsReceivedInvite(bool const value);
    bool isReceivedInviteIsSet() const;
    void unsetIs_received_invite();
    /// <summary>
    /// Metadata for the member/partner that was sent the invite/request.
    /// </summary>
    org::openapitools::server::model::BusinessAccessUserSummary getUser() const;
    void setUser(org::openapitools::server::model::BusinessAccessUserSummary const& value);
    bool userIsSet() const;
    void unsetUser();

    friend  void to_json(nlohmann::json& j, const BaseInviteDataResponse& o);
    friend  void from_json(const nlohmann::json& j, BaseInviteDataResponse& o);
protected:
    std::string m_Id;
    bool m_IdIsSet;
    org::openapitools::server::model::BaseInviteDataResponse_invite_data m_Invite_data;
    bool m_Invite_dataIsSet;
    bool m_Is_received_invite;
    bool m_Is_received_inviteIsSet;
    org::openapitools::server::model::BusinessAccessUserSummary m_User;
    bool m_UserIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* BaseInviteDataResponse_H_ */
