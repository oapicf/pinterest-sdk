/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * Board.h
 *
 * Board
 */

#ifndef Board_H_
#define Board_H_


#include <string>
#include "BoardOwner.h"
#include "Board_media.h"
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// Board
/// </summary>
class  Board
{
public:
    Board();
    virtual ~Board() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const Board& rhs) const;
    bool operator!=(const Board& rhs) const;

    /////////////////////////////////////////////
    /// Board members

    /// <summary>
    /// 
    /// </summary>
    std::string getId() const;
    void setId(std::string const& value);
    bool idIsSet() const;
    void unsetId();
    /// <summary>
    /// Date and time of board creation.
    /// </summary>
    std::string getCreatedAt() const;
    void setCreatedAt(std::string const& value);
    bool createdAtIsSet() const;
    void unsetCreated_at();
    /// <summary>
    /// Date and time of last board pins modified.
    /// </summary>
    std::string getBoardPinsModifiedAt() const;
    void setBoardPinsModifiedAt(std::string const& value);
    bool boardPinsModifiedAtIsSet() const;
    void unsetBoard_pins_modified_at();
    /// <summary>
    /// 
    /// </summary>
    std::string getName() const;
    void setName(std::string const& value);
    /// <summary>
    /// 
    /// </summary>
    std::string getDescription() const;
    void setDescription(std::string const& value);
    bool descriptionIsSet() const;
    void unsetDescription();
    /// <summary>
    /// Count of collaborators on the board.
    /// </summary>
    int32_t getCollaboratorCount() const;
    void setCollaboratorCount(int32_t const value);
    bool collaboratorCountIsSet() const;
    void unsetCollaborator_count();
    /// <summary>
    /// Count of pins on the board.
    /// </summary>
    int32_t getPinCount() const;
    void setPinCount(int32_t const value);
    bool pinCountIsSet() const;
    void unsetPin_count();
    /// <summary>
    /// Board follower count.
    /// </summary>
    int32_t getFollowerCount() const;
    void setFollowerCount(int32_t const value);
    bool followerCountIsSet() const;
    void unsetFollower_count();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::Board_media getMedia() const;
    void setMedia(org::openapitools::server::model::Board_media const& value);
    bool mediaIsSet() const;
    void unsetMedia();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::BoardOwner getOwner() const;
    void setOwner(org::openapitools::server::model::BoardOwner const& value);
    bool ownerIsSet() const;
    void unsetOwner();
    /// <summary>
    /// Privacy setting for a board. Learn more about &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/article/secret-boards\&quot;&gt;secret boards&lt;/a&gt; and &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/protected-boards\&quot;&gt;protected boards&lt;/a&gt;
    /// </summary>
    std::string getPrivacy() const;
    void setPrivacy(std::string const& value);
    bool privacyIsSet() const;
    void unsetPrivacy();

    friend  void to_json(nlohmann::json& j, const Board& o);
    friend  void from_json(const nlohmann::json& j, Board& o);
protected:
    std::string m_Id;
    bool m_IdIsSet;
    std::string m_Created_at;
    bool m_Created_atIsSet;
    std::string m_Board_pins_modified_at;
    bool m_Board_pins_modified_atIsSet;
    std::string m_Name;

    std::string m_Description;
    bool m_DescriptionIsSet;
    int32_t m_Collaborator_count;
    bool m_Collaborator_countIsSet;
    int32_t m_Pin_count;
    bool m_Pin_countIsSet;
    int32_t m_Follower_count;
    bool m_Follower_countIsSet;
    org::openapitools::server::model::Board_media m_Media;
    bool m_MediaIsSet;
    org::openapitools::server::model::BoardOwner m_Owner;
    bool m_OwnerIsSet;
    std::string m_Privacy;
    bool m_PrivacyIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* Board_H_ */
