/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "UserSingleAssetBinding.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

UserSingleAssetBinding::UserSingleAssetBinding()
{
    m_PermissionsIsSet = false;
    m_UserIsSet = false;
    
}

void UserSingleAssetBinding::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool UserSingleAssetBinding::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool UserSingleAssetBinding::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "UserSingleAssetBinding" : pathPrefix;

         
    if (permissionsIsSet())
    {
        const std::vector<std::string>& value = m_Permissions;
        const std::string currentValuePath = _pathPrefix + ".permissions";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const std::string& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }

    }
        
    return success;
}

bool UserSingleAssetBinding::operator==(const UserSingleAssetBinding& rhs) const
{
    return
    
    
    
    ((!permissionsIsSet() && !rhs.permissionsIsSet()) || (permissionsIsSet() && rhs.permissionsIsSet() && getPermissions() == rhs.getPermissions())) &&
    
    
    ((!userIsSet() && !rhs.userIsSet()) || (userIsSet() && rhs.userIsSet() && getUser() == rhs.getUser()))
    
    ;
}

bool UserSingleAssetBinding::operator!=(const UserSingleAssetBinding& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const UserSingleAssetBinding& o)
{
    j = nlohmann::json::object();
    if(o.permissionsIsSet() || !o.m_Permissions.empty())
        j["permissions"] = o.m_Permissions;
    if(o.userIsSet())
        j["user"] = o.m_User;
    
}

void from_json(const nlohmann::json& j, UserSingleAssetBinding& o)
{
    if(j.find("permissions") != j.end())
    {
        j.at("permissions").get_to(o.m_Permissions);
        o.m_PermissionsIsSet = true;
    } 
    if(j.find("user") != j.end())
    {
        j.at("user").get_to(o.m_User);
        o.m_UserIsSet = true;
    } 
    
}

std::vector<std::string> UserSingleAssetBinding::getPermissions() const
{
    return m_Permissions;
}
void UserSingleAssetBinding::setPermissions(std::vector<std::string> const& value)
{
    m_Permissions = value;
    m_PermissionsIsSet = true;
}
bool UserSingleAssetBinding::permissionsIsSet() const
{
    return m_PermissionsIsSet;
}
void UserSingleAssetBinding::unsetPermissions()
{
    m_PermissionsIsSet = false;
}
org::openapitools::server::model::BusinessAccessUserSummary UserSingleAssetBinding::getUser() const
{
    return m_User;
}
void UserSingleAssetBinding::setUser(org::openapitools::server::model::BusinessAccessUserSummary const& value)
{
    m_User = value;
    m_UserIsSet = true;
}
bool UserSingleAssetBinding::userIsSet() const
{
    return m_UserIsSet;
}
void UserSingleAssetBinding::unsetUser()
{
    m_UserIsSet = false;
}


} // namespace org::openapitools::server::model

