/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * CatalogsRetailProductGroupCreateRequest.h
 *
 * Request object for creating a product group.
 */

#ifndef CatalogsRetailProductGroupCreateRequest_H_
#define CatalogsRetailProductGroupCreateRequest_H_


#include "CatalogsProductGroupFiltersRequest.h"
#include "Country.h"
#include <string>
#include "CatalogsLocale.h"
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// Request object for creating a product group.
/// </summary>
class  CatalogsRetailProductGroupCreateRequest
{
public:
    CatalogsRetailProductGroupCreateRequest();
    virtual ~CatalogsRetailProductGroupCreateRequest() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const CatalogsRetailProductGroupCreateRequest& rhs) const;
    bool operator!=(const CatalogsRetailProductGroupCreateRequest& rhs) const;

    /////////////////////////////////////////////
    /// CatalogsRetailProductGroupCreateRequest members

    /// <summary>
    /// Retail catalog based product group is available only for selected partners at the moment. If you are not eligible, please use feed based one.
    /// </summary>
    std::string getCatalogType() const;
    void setCatalogType(std::string const& value);
    /// <summary>
    /// 
    /// </summary>
    std::string getName() const;
    void setName(std::string const& value);
    /// <summary>
    /// 
    /// </summary>
    std::string getDescription() const;
    void setDescription(std::string const& value);
    bool descriptionIsSet() const;
    void unsetDescription();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::CatalogsProductGroupFiltersRequest getFilters() const;
    void setFilters(org::openapitools::server::model::CatalogsProductGroupFiltersRequest const& value);
    /// <summary>
    /// Catalog id pertaining to the retail product group.
    /// </summary>
    std::string getCatalogId() const;
    void setCatalogId(std::string const& value);
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::Country getCountry() const;
    void setCountry(org::openapitools::server::model::Country const& value);
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::CatalogsLocale getLocale() const;
    void setLocale(org::openapitools::server::model::CatalogsLocale const& value);

    friend  void to_json(nlohmann::json& j, const CatalogsRetailProductGroupCreateRequest& o);
    friend  void from_json(const nlohmann::json& j, CatalogsRetailProductGroupCreateRequest& o);
protected:
    std::string m_Catalog_type;

    std::string m_Name;

    std::string m_Description;
    bool m_DescriptionIsSet;
    org::openapitools::server::model::CatalogsProductGroupFiltersRequest m_Filters;

    std::string m_Catalog_id;

    org::openapitools::server::model::Country m_Country;

    org::openapitools::server::model::CatalogsLocale m_Locale;

    
};

} // namespace org::openapitools::server::model

#endif /* CatalogsRetailProductGroupCreateRequest_H_ */
