/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "AudienceCommon.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

AudienceCommon::AudienceCommon()
{
    m_Ad_account_id = "";
    m_Ad_account_idIsSet = false;
    m_Name = "";
    m_NameIsSet = false;
    m_RuleIsSet = false;
    
}

void AudienceCommon::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool AudienceCommon::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool AudienceCommon::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "AudienceCommon" : pathPrefix;

         
    if (adAccountIdIsSet())
    {
        const std::string& value = m_Ad_account_id;
        const std::string currentValuePath = _pathPrefix + ".adAccountId";
                
        

    }
            
    return success;
}

bool AudienceCommon::operator==(const AudienceCommon& rhs) const
{
    return
    
    
    
    ((!adAccountIdIsSet() && !rhs.adAccountIdIsSet()) || (adAccountIdIsSet() && rhs.adAccountIdIsSet() && getAdAccountId() == rhs.getAdAccountId())) &&
    
    
    ((!nameIsSet() && !rhs.nameIsSet()) || (nameIsSet() && rhs.nameIsSet() && getName() == rhs.getName())) &&
    
    
    ((!ruleIsSet() && !rhs.ruleIsSet()) || (ruleIsSet() && rhs.ruleIsSet() && getRule() == rhs.getRule()))
    
    ;
}

bool AudienceCommon::operator!=(const AudienceCommon& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const AudienceCommon& o)
{
    j = nlohmann::json::object();
    if(o.adAccountIdIsSet())
        j["ad_account_id"] = o.m_Ad_account_id;
    if(o.nameIsSet())
        j["name"] = o.m_Name;
    if(o.ruleIsSet())
        j["rule"] = o.m_Rule;
    
}

void from_json(const nlohmann::json& j, AudienceCommon& o)
{
    if(j.find("ad_account_id") != j.end())
    {
        j.at("ad_account_id").get_to(o.m_Ad_account_id);
        o.m_Ad_account_idIsSet = true;
    } 
    if(j.find("name") != j.end())
    {
        j.at("name").get_to(o.m_Name);
        o.m_NameIsSet = true;
    } 
    if(j.find("rule") != j.end())
    {
        j.at("rule").get_to(o.m_Rule);
        o.m_RuleIsSet = true;
    } 
    
}

std::string AudienceCommon::getAdAccountId() const
{
    return m_Ad_account_id;
}
void AudienceCommon::setAdAccountId(std::string const& value)
{
    m_Ad_account_id = value;
    m_Ad_account_idIsSet = true;
}
bool AudienceCommon::adAccountIdIsSet() const
{
    return m_Ad_account_idIsSet;
}
void AudienceCommon::unsetAd_account_id()
{
    m_Ad_account_idIsSet = false;
}
std::string AudienceCommon::getName() const
{
    return m_Name;
}
void AudienceCommon::setName(std::string const& value)
{
    m_Name = value;
    m_NameIsSet = true;
}
bool AudienceCommon::nameIsSet() const
{
    return m_NameIsSet;
}
void AudienceCommon::unsetName()
{
    m_NameIsSet = false;
}
org::openapitools::server::model::AudienceRule AudienceCommon::getRule() const
{
    return m_Rule;
}
void AudienceCommon::setRule(org::openapitools::server::model::AudienceRule const& value)
{
    m_Rule = value;
    m_RuleIsSet = true;
}
bool AudienceCommon::ruleIsSet() const
{
    return m_RuleIsSet;
}
void AudienceCommon::unsetRule()
{
    m_RuleIsSet = false;
}


} // namespace org::openapitools::server::model

