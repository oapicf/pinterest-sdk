/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "UpdateAssetGroupBody_asset_groups_to_update_inner.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

UpdateAssetGroupBody_asset_groups_to_update_inner::UpdateAssetGroupBody_asset_groups_to_update_inner()
{
    m_Asset_group_id = "";
    m_Name = "";
    m_NameIsSet = false;
    m_Description = "";
    m_DescriptionIsSet = false;
    m_Asset_group_typesIsSet = false;
    m_Assets_to_addIsSet = false;
    m_Assets_to_removeIsSet = false;
    
}

void UpdateAssetGroupBody_asset_groups_to_update_inner::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool UpdateAssetGroupBody_asset_groups_to_update_inner::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool UpdateAssetGroupBody_asset_groups_to_update_inner::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "UpdateAssetGroupBody_asset_groups_to_update_inner" : pathPrefix;

                     
    if (assetGroupTypesIsSet())
    {
        const std::vector<org::openapitools::server::model::AssetGroupType>& value = m_Asset_group_types;
        const std::string currentValuePath = _pathPrefix + ".assetGroupTypes";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::AssetGroupType& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath) && success;
        
        
 
                i++;
            }
        }

    }
         
    if (assetsToAddIsSet())
    {
        const std::vector<std::string>& value = m_Assets_to_add;
        const std::string currentValuePath = _pathPrefix + ".assetsToAdd";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const std::string& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }

    }
         
    if (assetsToRemoveIsSet())
    {
        const std::vector<std::string>& value = m_Assets_to_remove;
        const std::string currentValuePath = _pathPrefix + ".assetsToRemove";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const std::string& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }

    }
    
    return success;
}

bool UpdateAssetGroupBody_asset_groups_to_update_inner::operator==(const UpdateAssetGroupBody_asset_groups_to_update_inner& rhs) const
{
    return
    
    
    (getAssetGroupId() == rhs.getAssetGroupId())
     &&
    
    
    ((!nameIsSet() && !rhs.nameIsSet()) || (nameIsSet() && rhs.nameIsSet() && getName() == rhs.getName())) &&
    
    
    ((!descriptionIsSet() && !rhs.descriptionIsSet()) || (descriptionIsSet() && rhs.descriptionIsSet() && getDescription() == rhs.getDescription())) &&
    
    
    ((!assetGroupTypesIsSet() && !rhs.assetGroupTypesIsSet()) || (assetGroupTypesIsSet() && rhs.assetGroupTypesIsSet() && getAssetGroupTypes() == rhs.getAssetGroupTypes())) &&
    
    
    ((!assetsToAddIsSet() && !rhs.assetsToAddIsSet()) || (assetsToAddIsSet() && rhs.assetsToAddIsSet() && getAssetsToAdd() == rhs.getAssetsToAdd())) &&
    
    
    ((!assetsToRemoveIsSet() && !rhs.assetsToRemoveIsSet()) || (assetsToRemoveIsSet() && rhs.assetsToRemoveIsSet() && getAssetsToRemove() == rhs.getAssetsToRemove()))
    
    ;
}

bool UpdateAssetGroupBody_asset_groups_to_update_inner::operator!=(const UpdateAssetGroupBody_asset_groups_to_update_inner& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const UpdateAssetGroupBody_asset_groups_to_update_inner& o)
{
    j = nlohmann::json::object();
    j["asset_group_id"] = o.m_Asset_group_id;
    if(o.nameIsSet())
        j["name"] = o.m_Name;
    if(o.descriptionIsSet())
        j["description"] = o.m_Description;
    if(o.assetGroupTypesIsSet() || !o.m_Asset_group_types.empty())
        j["asset_group_types"] = o.m_Asset_group_types;
    if(o.assetsToAddIsSet() || !o.m_Assets_to_add.empty())
        j["assets_to_add"] = o.m_Assets_to_add;
    if(o.assetsToRemoveIsSet() || !o.m_Assets_to_remove.empty())
        j["assets_to_remove"] = o.m_Assets_to_remove;
    
}

void from_json(const nlohmann::json& j, UpdateAssetGroupBody_asset_groups_to_update_inner& o)
{
    j.at("asset_group_id").get_to(o.m_Asset_group_id);
    if(j.find("name") != j.end())
    {
        j.at("name").get_to(o.m_Name);
        o.m_NameIsSet = true;
    } 
    if(j.find("description") != j.end())
    {
        j.at("description").get_to(o.m_Description);
        o.m_DescriptionIsSet = true;
    } 
    if(j.find("asset_group_types") != j.end())
    {
        j.at("asset_group_types").get_to(o.m_Asset_group_types);
        o.m_Asset_group_typesIsSet = true;
    } 
    if(j.find("assets_to_add") != j.end())
    {
        j.at("assets_to_add").get_to(o.m_Assets_to_add);
        o.m_Assets_to_addIsSet = true;
    } 
    if(j.find("assets_to_remove") != j.end())
    {
        j.at("assets_to_remove").get_to(o.m_Assets_to_remove);
        o.m_Assets_to_removeIsSet = true;
    } 
    
}

std::string UpdateAssetGroupBody_asset_groups_to_update_inner::getAssetGroupId() const
{
    return m_Asset_group_id;
}
void UpdateAssetGroupBody_asset_groups_to_update_inner::setAssetGroupId(std::string const& value)
{
    m_Asset_group_id = value;
}
std::string UpdateAssetGroupBody_asset_groups_to_update_inner::getName() const
{
    return m_Name;
}
void UpdateAssetGroupBody_asset_groups_to_update_inner::setName(std::string const& value)
{
    m_Name = value;
    m_NameIsSet = true;
}
bool UpdateAssetGroupBody_asset_groups_to_update_inner::nameIsSet() const
{
    return m_NameIsSet;
}
void UpdateAssetGroupBody_asset_groups_to_update_inner::unsetName()
{
    m_NameIsSet = false;
}
std::string UpdateAssetGroupBody_asset_groups_to_update_inner::getDescription() const
{
    return m_Description;
}
void UpdateAssetGroupBody_asset_groups_to_update_inner::setDescription(std::string const& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}
bool UpdateAssetGroupBody_asset_groups_to_update_inner::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}
void UpdateAssetGroupBody_asset_groups_to_update_inner::unsetDescription()
{
    m_DescriptionIsSet = false;
}
std::vector<org::openapitools::server::model::AssetGroupType> UpdateAssetGroupBody_asset_groups_to_update_inner::getAssetGroupTypes() const
{
    return m_Asset_group_types;
}
void UpdateAssetGroupBody_asset_groups_to_update_inner::setAssetGroupTypes(std::vector<org::openapitools::server::model::AssetGroupType> const& value)
{
    m_Asset_group_types = value;
    m_Asset_group_typesIsSet = true;
}
bool UpdateAssetGroupBody_asset_groups_to_update_inner::assetGroupTypesIsSet() const
{
    return m_Asset_group_typesIsSet;
}
void UpdateAssetGroupBody_asset_groups_to_update_inner::unsetAsset_group_types()
{
    m_Asset_group_typesIsSet = false;
}
std::vector<std::string> UpdateAssetGroupBody_asset_groups_to_update_inner::getAssetsToAdd() const
{
    return m_Assets_to_add;
}
void UpdateAssetGroupBody_asset_groups_to_update_inner::setAssetsToAdd(std::vector<std::string> const& value)
{
    m_Assets_to_add = value;
    m_Assets_to_addIsSet = true;
}
bool UpdateAssetGroupBody_asset_groups_to_update_inner::assetsToAddIsSet() const
{
    return m_Assets_to_addIsSet;
}
void UpdateAssetGroupBody_asset_groups_to_update_inner::unsetAssets_to_add()
{
    m_Assets_to_addIsSet = false;
}
std::vector<std::string> UpdateAssetGroupBody_asset_groups_to_update_inner::getAssetsToRemove() const
{
    return m_Assets_to_remove;
}
void UpdateAssetGroupBody_asset_groups_to_update_inner::setAssetsToRemove(std::vector<std::string> const& value)
{
    m_Assets_to_remove = value;
    m_Assets_to_removeIsSet = true;
}
bool UpdateAssetGroupBody_asset_groups_to_update_inner::assetsToRemoveIsSet() const
{
    return m_Assets_to_removeIsSet;
}
void UpdateAssetGroupBody_asset_groups_to_update_inner::unsetAssets_to_remove()
{
    m_Assets_to_removeIsSet = false;
}


} // namespace org::openapitools::server::model

