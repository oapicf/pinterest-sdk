/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "Account.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

Account::Account()
{
    m_Account_type = "";
    m_Account_typeIsSet = false;
    m_Id = "";
    m_IdIsSet = false;
    m_Profile_image = "";
    m_Profile_imageIsSet = false;
    m_Website_url = "";
    m_Website_urlIsSet = false;
    m_Username = "";
    m_UsernameIsSet = false;
    m_About = "";
    m_AboutIsSet = false;
    m_Business_name = "";
    m_Business_nameIsSet = false;
    m_Board_count = 0;
    m_Board_countIsSet = false;
    m_Pin_count = 0;
    m_Pin_countIsSet = false;
    m_Follower_count = 0;
    m_Follower_countIsSet = false;
    m_Following_count = 0;
    m_Following_countIsSet = false;
    m_Monthly_views = 0;
    m_Monthly_viewsIsSet = false;
    
}

void Account::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool Account::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool Account::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "Account" : pathPrefix;

             
    if (idIsSet())
    {
        const std::string& value = m_Id;
        const std::string currentValuePath = _pathPrefix + ".id";
                
        

    }
                                            
    return success;
}

bool Account::operator==(const Account& rhs) const
{
    return
    
    
    
    ((!accountTypeIsSet() && !rhs.accountTypeIsSet()) || (accountTypeIsSet() && rhs.accountTypeIsSet() && getAccountType() == rhs.getAccountType())) &&
    
    
    ((!idIsSet() && !rhs.idIsSet()) || (idIsSet() && rhs.idIsSet() && getId() == rhs.getId())) &&
    
    
    ((!profileImageIsSet() && !rhs.profileImageIsSet()) || (profileImageIsSet() && rhs.profileImageIsSet() && getProfileImage() == rhs.getProfileImage())) &&
    
    
    ((!websiteUrlIsSet() && !rhs.websiteUrlIsSet()) || (websiteUrlIsSet() && rhs.websiteUrlIsSet() && getWebsiteUrl() == rhs.getWebsiteUrl())) &&
    
    
    ((!usernameIsSet() && !rhs.usernameIsSet()) || (usernameIsSet() && rhs.usernameIsSet() && getUsername() == rhs.getUsername())) &&
    
    
    ((!aboutIsSet() && !rhs.aboutIsSet()) || (aboutIsSet() && rhs.aboutIsSet() && getAbout() == rhs.getAbout())) &&
    
    
    ((!businessNameIsSet() && !rhs.businessNameIsSet()) || (businessNameIsSet() && rhs.businessNameIsSet() && getBusinessName() == rhs.getBusinessName())) &&
    
    
    ((!boardCountIsSet() && !rhs.boardCountIsSet()) || (boardCountIsSet() && rhs.boardCountIsSet() && getBoardCount() == rhs.getBoardCount())) &&
    
    
    ((!pinCountIsSet() && !rhs.pinCountIsSet()) || (pinCountIsSet() && rhs.pinCountIsSet() && getPinCount() == rhs.getPinCount())) &&
    
    
    ((!followerCountIsSet() && !rhs.followerCountIsSet()) || (followerCountIsSet() && rhs.followerCountIsSet() && getFollowerCount() == rhs.getFollowerCount())) &&
    
    
    ((!followingCountIsSet() && !rhs.followingCountIsSet()) || (followingCountIsSet() && rhs.followingCountIsSet() && getFollowingCount() == rhs.getFollowingCount())) &&
    
    
    ((!monthlyViewsIsSet() && !rhs.monthlyViewsIsSet()) || (monthlyViewsIsSet() && rhs.monthlyViewsIsSet() && getMonthlyViews() == rhs.getMonthlyViews()))
    
    ;
}

bool Account::operator!=(const Account& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const Account& o)
{
    j = nlohmann::json::object();
    if(o.accountTypeIsSet())
        j["account_type"] = o.m_Account_type;
    if(o.idIsSet())
        j["id"] = o.m_Id;
    if(o.profileImageIsSet())
        j["profile_image"] = o.m_Profile_image;
    if(o.websiteUrlIsSet())
        j["website_url"] = o.m_Website_url;
    if(o.usernameIsSet())
        j["username"] = o.m_Username;
    if(o.aboutIsSet())
        j["about"] = o.m_About;
    if(o.businessNameIsSet())
        j["business_name"] = o.m_Business_name;
    if(o.boardCountIsSet())
        j["board_count"] = o.m_Board_count;
    if(o.pinCountIsSet())
        j["pin_count"] = o.m_Pin_count;
    if(o.followerCountIsSet())
        j["follower_count"] = o.m_Follower_count;
    if(o.followingCountIsSet())
        j["following_count"] = o.m_Following_count;
    if(o.monthlyViewsIsSet())
        j["monthly_views"] = o.m_Monthly_views;
    
}

void from_json(const nlohmann::json& j, Account& o)
{
    if(j.find("account_type") != j.end())
    {
        j.at("account_type").get_to(o.m_Account_type);
        o.m_Account_typeIsSet = true;
    } 
    if(j.find("id") != j.end())
    {
        j.at("id").get_to(o.m_Id);
        o.m_IdIsSet = true;
    } 
    if(j.find("profile_image") != j.end())
    {
        j.at("profile_image").get_to(o.m_Profile_image);
        o.m_Profile_imageIsSet = true;
    } 
    if(j.find("website_url") != j.end())
    {
        j.at("website_url").get_to(o.m_Website_url);
        o.m_Website_urlIsSet = true;
    } 
    if(j.find("username") != j.end())
    {
        j.at("username").get_to(o.m_Username);
        o.m_UsernameIsSet = true;
    } 
    if(j.find("about") != j.end())
    {
        j.at("about").get_to(o.m_About);
        o.m_AboutIsSet = true;
    } 
    if(j.find("business_name") != j.end())
    {
        j.at("business_name").get_to(o.m_Business_name);
        o.m_Business_nameIsSet = true;
    } 
    if(j.find("board_count") != j.end())
    {
        j.at("board_count").get_to(o.m_Board_count);
        o.m_Board_countIsSet = true;
    } 
    if(j.find("pin_count") != j.end())
    {
        j.at("pin_count").get_to(o.m_Pin_count);
        o.m_Pin_countIsSet = true;
    } 
    if(j.find("follower_count") != j.end())
    {
        j.at("follower_count").get_to(o.m_Follower_count);
        o.m_Follower_countIsSet = true;
    } 
    if(j.find("following_count") != j.end())
    {
        j.at("following_count").get_to(o.m_Following_count);
        o.m_Following_countIsSet = true;
    } 
    if(j.find("monthly_views") != j.end())
    {
        j.at("monthly_views").get_to(o.m_Monthly_views);
        o.m_Monthly_viewsIsSet = true;
    } 
    
}

std::string Account::getAccountType() const
{
    return m_Account_type;
}
void Account::setAccountType(std::string const& value)
{
    m_Account_type = value;
    m_Account_typeIsSet = true;
}
bool Account::accountTypeIsSet() const
{
    return m_Account_typeIsSet;
}
void Account::unsetAccount_type()
{
    m_Account_typeIsSet = false;
}
std::string Account::getId() const
{
    return m_Id;
}
void Account::setId(std::string const& value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool Account::idIsSet() const
{
    return m_IdIsSet;
}
void Account::unsetId()
{
    m_IdIsSet = false;
}
std::string Account::getProfileImage() const
{
    return m_Profile_image;
}
void Account::setProfileImage(std::string const& value)
{
    m_Profile_image = value;
    m_Profile_imageIsSet = true;
}
bool Account::profileImageIsSet() const
{
    return m_Profile_imageIsSet;
}
void Account::unsetProfile_image()
{
    m_Profile_imageIsSet = false;
}
std::string Account::getWebsiteUrl() const
{
    return m_Website_url;
}
void Account::setWebsiteUrl(std::string const& value)
{
    m_Website_url = value;
    m_Website_urlIsSet = true;
}
bool Account::websiteUrlIsSet() const
{
    return m_Website_urlIsSet;
}
void Account::unsetWebsite_url()
{
    m_Website_urlIsSet = false;
}
std::string Account::getUsername() const
{
    return m_Username;
}
void Account::setUsername(std::string const& value)
{
    m_Username = value;
    m_UsernameIsSet = true;
}
bool Account::usernameIsSet() const
{
    return m_UsernameIsSet;
}
void Account::unsetUsername()
{
    m_UsernameIsSet = false;
}
std::string Account::getAbout() const
{
    return m_About;
}
void Account::setAbout(std::string const& value)
{
    m_About = value;
    m_AboutIsSet = true;
}
bool Account::aboutIsSet() const
{
    return m_AboutIsSet;
}
void Account::unsetAbout()
{
    m_AboutIsSet = false;
}
std::string Account::getBusinessName() const
{
    return m_Business_name;
}
void Account::setBusinessName(std::string const& value)
{
    m_Business_name = value;
    m_Business_nameIsSet = true;
}
bool Account::businessNameIsSet() const
{
    return m_Business_nameIsSet;
}
void Account::unsetBusiness_name()
{
    m_Business_nameIsSet = false;
}
int32_t Account::getBoardCount() const
{
    return m_Board_count;
}
void Account::setBoardCount(int32_t const value)
{
    m_Board_count = value;
    m_Board_countIsSet = true;
}
bool Account::boardCountIsSet() const
{
    return m_Board_countIsSet;
}
void Account::unsetBoard_count()
{
    m_Board_countIsSet = false;
}
int32_t Account::getPinCount() const
{
    return m_Pin_count;
}
void Account::setPinCount(int32_t const value)
{
    m_Pin_count = value;
    m_Pin_countIsSet = true;
}
bool Account::pinCountIsSet() const
{
    return m_Pin_countIsSet;
}
void Account::unsetPin_count()
{
    m_Pin_countIsSet = false;
}
int32_t Account::getFollowerCount() const
{
    return m_Follower_count;
}
void Account::setFollowerCount(int32_t const value)
{
    m_Follower_count = value;
    m_Follower_countIsSet = true;
}
bool Account::followerCountIsSet() const
{
    return m_Follower_countIsSet;
}
void Account::unsetFollower_count()
{
    m_Follower_countIsSet = false;
}
int32_t Account::getFollowingCount() const
{
    return m_Following_count;
}
void Account::setFollowingCount(int32_t const value)
{
    m_Following_count = value;
    m_Following_countIsSet = true;
}
bool Account::followingCountIsSet() const
{
    return m_Following_countIsSet;
}
void Account::unsetFollowing_count()
{
    m_Following_countIsSet = false;
}
int32_t Account::getMonthlyViews() const
{
    return m_Monthly_views;
}
void Account::setMonthlyViews(int32_t const value)
{
    m_Monthly_views = value;
    m_Monthly_viewsIsSet = true;
}
bool Account::monthlyViewsIsSet() const
{
    return m_Monthly_viewsIsSet;
}
void Account::unsetMonthly_views()
{
    m_Monthly_viewsIsSet = false;
}


} // namespace org::openapitools::server::model

