/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "AuthRespondInvitesBody.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

AuthRespondInvitesBody::AuthRespondInvitesBody()
{
    
}

void AuthRespondInvitesBody::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool AuthRespondInvitesBody::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool AuthRespondInvitesBody::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "AuthRespondInvitesBody" : pathPrefix;

         
    
    /* Invites */ {
        const std::vector<org::openapitools::server::model::AuthRespondInvitesBody_invites_inner>& value = m_Invites;
        const std::string currentValuePath = _pathPrefix + ".invites";
                
        
        if (value.size() < 1)
        {
            success = false;
            msg << currentValuePath << ": must have at least 1 elements;";
        }
        if (value.size() > 100)
        {
            success = false;
            msg << currentValuePath << ": must have at most 100 elements;";
        }
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::AuthRespondInvitesBody_invites_inner& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".invites") && success;
 
                i++;
            }
        }

    }
    
    return success;
}

bool AuthRespondInvitesBody::operator==(const AuthRespondInvitesBody& rhs) const
{
    return
    
    
    (getInvites() == rhs.getInvites())
    
    
    ;
}

bool AuthRespondInvitesBody::operator!=(const AuthRespondInvitesBody& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const AuthRespondInvitesBody& o)
{
    j = nlohmann::json::object();
    j["invites"] = o.m_Invites;
    
}

void from_json(const nlohmann::json& j, AuthRespondInvitesBody& o)
{
    j.at("invites").get_to(o.m_Invites);
    
}

std::vector<org::openapitools::server::model::AuthRespondInvitesBody_invites_inner> AuthRespondInvitesBody::getInvites() const
{
    return m_Invites;
}
void AuthRespondInvitesBody::setInvites(std::vector<org::openapitools::server::model::AuthRespondInvitesBody_invites_inner> const& value)
{
    m_Invites = value;
}


} // namespace org::openapitools::server::model

