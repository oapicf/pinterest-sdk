/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "Keyword.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

Keyword::Keyword()
{
    m_Bid = 0;
    m_BidIsSet = false;
    m_Value = "";
    m_Archived = false;
    m_ArchivedIsSet = false;
    m_Id = "";
    m_IdIsSet = false;
    m_Parent_id = "";
    m_Parent_idIsSet = false;
    m_Parent_type = "";
    m_Parent_typeIsSet = false;
    m_Type = "";
    m_TypeIsSet = false;
    
}

void Keyword::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool Keyword::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool Keyword::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "Keyword" : pathPrefix;

                         
    if (idIsSet())
    {
        const std::string& value = m_Id;
        const std::string currentValuePath = _pathPrefix + ".id";
                
        

    }
         
    if (parentIdIsSet())
    {
        const std::string& value = m_Parent_id;
        const std::string currentValuePath = _pathPrefix + ".parentId";
                
        

    }
            
    return success;
}

bool Keyword::operator==(const Keyword& rhs) const
{
    return
    
    
    
    ((!bidIsSet() && !rhs.bidIsSet()) || (bidIsSet() && rhs.bidIsSet() && getBid() == rhs.getBid())) &&
    
    (getMatchType() == rhs.getMatchType())
     &&
    
    (getValue() == rhs.getValue())
     &&
    
    
    ((!archivedIsSet() && !rhs.archivedIsSet()) || (archivedIsSet() && rhs.archivedIsSet() && isArchived() == rhs.isArchived())) &&
    
    
    ((!idIsSet() && !rhs.idIsSet()) || (idIsSet() && rhs.idIsSet() && getId() == rhs.getId())) &&
    
    
    ((!parentIdIsSet() && !rhs.parentIdIsSet()) || (parentIdIsSet() && rhs.parentIdIsSet() && getParentId() == rhs.getParentId())) &&
    
    
    ((!parentTypeIsSet() && !rhs.parentTypeIsSet()) || (parentTypeIsSet() && rhs.parentTypeIsSet() && getParentType() == rhs.getParentType())) &&
    
    
    ((!typeIsSet() && !rhs.typeIsSet()) || (typeIsSet() && rhs.typeIsSet() && getType() == rhs.getType()))
    
    ;
}

bool Keyword::operator!=(const Keyword& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const Keyword& o)
{
    j = nlohmann::json::object();
    if(o.bidIsSet())
        j["bid"] = o.m_Bid;
    j["match_type"] = o.m_Match_type;
    j["value"] = o.m_Value;
    if(o.archivedIsSet())
        j["archived"] = o.m_Archived;
    if(o.idIsSet())
        j["id"] = o.m_Id;
    if(o.parentIdIsSet())
        j["parent_id"] = o.m_Parent_id;
    if(o.parentTypeIsSet())
        j["parent_type"] = o.m_Parent_type;
    if(o.typeIsSet())
        j["type"] = o.m_Type;
    
}

void from_json(const nlohmann::json& j, Keyword& o)
{
    if(j.find("bid") != j.end())
    {
        j.at("bid").get_to(o.m_Bid);
        o.m_BidIsSet = true;
    } 
    j.at("match_type").get_to(o.m_Match_type);
    j.at("value").get_to(o.m_Value);
    if(j.find("archived") != j.end())
    {
        j.at("archived").get_to(o.m_Archived);
        o.m_ArchivedIsSet = true;
    } 
    if(j.find("id") != j.end())
    {
        j.at("id").get_to(o.m_Id);
        o.m_IdIsSet = true;
    } 
    if(j.find("parent_id") != j.end())
    {
        j.at("parent_id").get_to(o.m_Parent_id);
        o.m_Parent_idIsSet = true;
    } 
    if(j.find("parent_type") != j.end())
    {
        j.at("parent_type").get_to(o.m_Parent_type);
        o.m_Parent_typeIsSet = true;
    } 
    if(j.find("type") != j.end())
    {
        j.at("type").get_to(o.m_Type);
        o.m_TypeIsSet = true;
    } 
    
}

int32_t Keyword::getBid() const
{
    return m_Bid;
}
void Keyword::setBid(int32_t const value)
{
    m_Bid = value;
    m_BidIsSet = true;
}
bool Keyword::bidIsSet() const
{
    return m_BidIsSet;
}
void Keyword::unsetBid()
{
    m_BidIsSet = false;
}
org::openapitools::server::model::MatchTypeResponse Keyword::getMatchType() const
{
    return m_Match_type;
}
void Keyword::setMatchType(org::openapitools::server::model::MatchTypeResponse const& value)
{
    m_Match_type = value;
}
std::string Keyword::getValue() const
{
    return m_Value;
}
void Keyword::setValue(std::string const& value)
{
    m_Value = value;
}
bool Keyword::isArchived() const
{
    return m_Archived;
}
void Keyword::setArchived(bool const value)
{
    m_Archived = value;
    m_ArchivedIsSet = true;
}
bool Keyword::archivedIsSet() const
{
    return m_ArchivedIsSet;
}
void Keyword::unsetArchived()
{
    m_ArchivedIsSet = false;
}
std::string Keyword::getId() const
{
    return m_Id;
}
void Keyword::setId(std::string const& value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool Keyword::idIsSet() const
{
    return m_IdIsSet;
}
void Keyword::unsetId()
{
    m_IdIsSet = false;
}
std::string Keyword::getParentId() const
{
    return m_Parent_id;
}
void Keyword::setParentId(std::string const& value)
{
    m_Parent_id = value;
    m_Parent_idIsSet = true;
}
bool Keyword::parentIdIsSet() const
{
    return m_Parent_idIsSet;
}
void Keyword::unsetParent_id()
{
    m_Parent_idIsSet = false;
}
std::string Keyword::getParentType() const
{
    return m_Parent_type;
}
void Keyword::setParentType(std::string const& value)
{
    m_Parent_type = value;
    m_Parent_typeIsSet = true;
}
bool Keyword::parentTypeIsSet() const
{
    return m_Parent_typeIsSet;
}
void Keyword::unsetParent_type()
{
    m_Parent_typeIsSet = false;
}
std::string Keyword::getType() const
{
    return m_Type;
}
void Keyword::setType(std::string const& value)
{
    m_Type = value;
    m_TypeIsSet = true;
}
bool Keyword::typeIsSet() const
{
    return m_TypeIsSet;
}
void Keyword::unsetType()
{
    m_TypeIsSet = false;
}


} // namespace org::openapitools::server::model

