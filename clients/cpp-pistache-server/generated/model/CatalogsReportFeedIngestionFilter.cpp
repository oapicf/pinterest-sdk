/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "CatalogsReportFeedIngestionFilter.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

CatalogsReportFeedIngestionFilter::CatalogsReportFeedIngestionFilter()
{
    m_Report_type = "";
    m_Feed_id = "";
    m_Processing_result_id = "";
    m_Processing_result_idIsSet = false;
    
}

void CatalogsReportFeedIngestionFilter::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool CatalogsReportFeedIngestionFilter::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool CatalogsReportFeedIngestionFilter::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "CatalogsReportFeedIngestionFilter" : pathPrefix;

             
    
    /* Feed_id */ {
        const std::string& value = m_Feed_id;
        const std::string currentValuePath = _pathPrefix + ".feedId";
                
        

    }
         
    if (processingResultIdIsSet())
    {
        const std::string& value = m_Processing_result_id;
        const std::string currentValuePath = _pathPrefix + ".processingResultId";
                
        

    }
    
    return success;
}

bool CatalogsReportFeedIngestionFilter::operator==(const CatalogsReportFeedIngestionFilter& rhs) const
{
    return
    
    
    (getReportType() == rhs.getReportType())
     &&
    
    (getFeedId() == rhs.getFeedId())
     &&
    
    
    ((!processingResultIdIsSet() && !rhs.processingResultIdIsSet()) || (processingResultIdIsSet() && rhs.processingResultIdIsSet() && getProcessingResultId() == rhs.getProcessingResultId()))
    
    ;
}

bool CatalogsReportFeedIngestionFilter::operator!=(const CatalogsReportFeedIngestionFilter& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const CatalogsReportFeedIngestionFilter& o)
{
    j = nlohmann::json::object();
    j["report_type"] = o.m_Report_type;
    j["feed_id"] = o.m_Feed_id;
    if(o.processingResultIdIsSet())
        j["processing_result_id"] = o.m_Processing_result_id;
    
}

void from_json(const nlohmann::json& j, CatalogsReportFeedIngestionFilter& o)
{
    j.at("report_type").get_to(o.m_Report_type);
    j.at("feed_id").get_to(o.m_Feed_id);
    if(j.find("processing_result_id") != j.end())
    {
        j.at("processing_result_id").get_to(o.m_Processing_result_id);
        o.m_Processing_result_idIsSet = true;
    } 
    
}

std::string CatalogsReportFeedIngestionFilter::getReportType() const
{
    return m_Report_type;
}
void CatalogsReportFeedIngestionFilter::setReportType(std::string const& value)
{
    m_Report_type = value;
}
std::string CatalogsReportFeedIngestionFilter::getFeedId() const
{
    return m_Feed_id;
}
void CatalogsReportFeedIngestionFilter::setFeedId(std::string const& value)
{
    m_Feed_id = value;
}
std::string CatalogsReportFeedIngestionFilter::getProcessingResultId() const
{
    return m_Processing_result_id;
}
void CatalogsReportFeedIngestionFilter::setProcessingResultId(std::string const& value)
{
    m_Processing_result_id = value;
    m_Processing_result_idIsSet = true;
}
bool CatalogsReportFeedIngestionFilter::processingResultIdIsSet() const
{
    return m_Processing_result_idIsSet;
}
void CatalogsReportFeedIngestionFilter::unsetProcessing_result_id()
{
    m_Processing_result_idIsSet = false;
}


} // namespace org::openapitools::server::model

