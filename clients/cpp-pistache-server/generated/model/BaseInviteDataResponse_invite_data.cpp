/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "BaseInviteDataResponse_invite_data.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

BaseInviteDataResponse_invite_data::BaseInviteDataResponse_invite_data()
{
    m_Invite_expiration = 0;
    m_Invite_expirationIsSet = false;
    m_Invite_status = "";
    m_Invite_statusIsSet = false;
    m_Invite_type = "";
    m_Invite_typeIsSet = false;
    m_Last_updated_time = 0;
    m_Last_updated_timeIsSet = false;
    m_Sent_at = 0;
    m_Sent_atIsSet = false;
    
}

void BaseInviteDataResponse_invite_data::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool BaseInviteDataResponse_invite_data::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool BaseInviteDataResponse_invite_data::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "BaseInviteDataResponse_invite_data" : pathPrefix;

                        
    return success;
}

bool BaseInviteDataResponse_invite_data::operator==(const BaseInviteDataResponse_invite_data& rhs) const
{
    return
    
    
    
    ((!inviteExpirationIsSet() && !rhs.inviteExpirationIsSet()) || (inviteExpirationIsSet() && rhs.inviteExpirationIsSet() && getInviteExpiration() == rhs.getInviteExpiration())) &&
    
    
    ((!inviteStatusIsSet() && !rhs.inviteStatusIsSet()) || (inviteStatusIsSet() && rhs.inviteStatusIsSet() && getInviteStatus() == rhs.getInviteStatus())) &&
    
    
    ((!inviteTypeIsSet() && !rhs.inviteTypeIsSet()) || (inviteTypeIsSet() && rhs.inviteTypeIsSet() && getInviteType() == rhs.getInviteType())) &&
    
    
    ((!lastUpdatedTimeIsSet() && !rhs.lastUpdatedTimeIsSet()) || (lastUpdatedTimeIsSet() && rhs.lastUpdatedTimeIsSet() && getLastUpdatedTime() == rhs.getLastUpdatedTime())) &&
    
    
    ((!sentAtIsSet() && !rhs.sentAtIsSet()) || (sentAtIsSet() && rhs.sentAtIsSet() && getSentAt() == rhs.getSentAt()))
    
    ;
}

bool BaseInviteDataResponse_invite_data::operator!=(const BaseInviteDataResponse_invite_data& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const BaseInviteDataResponse_invite_data& o)
{
    j = nlohmann::json::object();
    if(o.inviteExpirationIsSet())
        j["invite_expiration"] = o.m_Invite_expiration;
    if(o.inviteStatusIsSet())
        j["invite_status"] = o.m_Invite_status;
    if(o.inviteTypeIsSet())
        j["invite_type"] = o.m_Invite_type;
    if(o.lastUpdatedTimeIsSet())
        j["last_updated_time"] = o.m_Last_updated_time;
    if(o.sentAtIsSet())
        j["sent_at"] = o.m_Sent_at;
    
}

void from_json(const nlohmann::json& j, BaseInviteDataResponse_invite_data& o)
{
    if(j.find("invite_expiration") != j.end())
    {
        j.at("invite_expiration").get_to(o.m_Invite_expiration);
        o.m_Invite_expirationIsSet = true;
    } 
    if(j.find("invite_status") != j.end())
    {
        j.at("invite_status").get_to(o.m_Invite_status);
        o.m_Invite_statusIsSet = true;
    } 
    if(j.find("invite_type") != j.end())
    {
        j.at("invite_type").get_to(o.m_Invite_type);
        o.m_Invite_typeIsSet = true;
    } 
    if(j.find("last_updated_time") != j.end())
    {
        j.at("last_updated_time").get_to(o.m_Last_updated_time);
        o.m_Last_updated_timeIsSet = true;
    } 
    if(j.find("sent_at") != j.end())
    {
        j.at("sent_at").get_to(o.m_Sent_at);
        o.m_Sent_atIsSet = true;
    } 
    
}

int32_t BaseInviteDataResponse_invite_data::getInviteExpiration() const
{
    return m_Invite_expiration;
}
void BaseInviteDataResponse_invite_data::setInviteExpiration(int32_t const value)
{
    m_Invite_expiration = value;
    m_Invite_expirationIsSet = true;
}
bool BaseInviteDataResponse_invite_data::inviteExpirationIsSet() const
{
    return m_Invite_expirationIsSet;
}
void BaseInviteDataResponse_invite_data::unsetInvite_expiration()
{
    m_Invite_expirationIsSet = false;
}
std::string BaseInviteDataResponse_invite_data::getInviteStatus() const
{
    return m_Invite_status;
}
void BaseInviteDataResponse_invite_data::setInviteStatus(std::string const& value)
{
    m_Invite_status = value;
    m_Invite_statusIsSet = true;
}
bool BaseInviteDataResponse_invite_data::inviteStatusIsSet() const
{
    return m_Invite_statusIsSet;
}
void BaseInviteDataResponse_invite_data::unsetInvite_status()
{
    m_Invite_statusIsSet = false;
}
std::string BaseInviteDataResponse_invite_data::getInviteType() const
{
    return m_Invite_type;
}
void BaseInviteDataResponse_invite_data::setInviteType(std::string const& value)
{
    m_Invite_type = value;
    m_Invite_typeIsSet = true;
}
bool BaseInviteDataResponse_invite_data::inviteTypeIsSet() const
{
    return m_Invite_typeIsSet;
}
void BaseInviteDataResponse_invite_data::unsetInvite_type()
{
    m_Invite_typeIsSet = false;
}
int32_t BaseInviteDataResponse_invite_data::getLastUpdatedTime() const
{
    return m_Last_updated_time;
}
void BaseInviteDataResponse_invite_data::setLastUpdatedTime(int32_t const value)
{
    m_Last_updated_time = value;
    m_Last_updated_timeIsSet = true;
}
bool BaseInviteDataResponse_invite_data::lastUpdatedTimeIsSet() const
{
    return m_Last_updated_timeIsSet;
}
void BaseInviteDataResponse_invite_data::unsetLast_updated_time()
{
    m_Last_updated_timeIsSet = false;
}
int32_t BaseInviteDataResponse_invite_data::getSentAt() const
{
    return m_Sent_at;
}
void BaseInviteDataResponse_invite_data::setSentAt(int32_t const value)
{
    m_Sent_at = value;
    m_Sent_atIsSet = true;
}
bool BaseInviteDataResponse_invite_data::sentAtIsSet() const
{
    return m_Sent_atIsSet;
}
void BaseInviteDataResponse_invite_data::unsetSent_at()
{
    m_Sent_atIsSet = false;
}


} // namespace org::openapitools::server::model

