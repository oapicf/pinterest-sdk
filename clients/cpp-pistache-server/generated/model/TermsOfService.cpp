/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "TermsOfService.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

TermsOfService::TermsOfService()
{
    m_Id = "";
    m_IdIsSet = false;
    m_Html = "";
    m_HtmlIsSet = false;
    m_Has_accepted = false;
    m_Has_acceptedIsSet = false;
    m_Ad_account_id = "";
    m_Ad_account_idIsSet = false;
    
}

void TermsOfService::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool TermsOfService::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool TermsOfService::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "TermsOfService" : pathPrefix;

                    
    return success;
}

bool TermsOfService::operator==(const TermsOfService& rhs) const
{
    return
    
    
    
    ((!idIsSet() && !rhs.idIsSet()) || (idIsSet() && rhs.idIsSet() && getId() == rhs.getId())) &&
    
    
    ((!htmlIsSet() && !rhs.htmlIsSet()) || (htmlIsSet() && rhs.htmlIsSet() && getHtml() == rhs.getHtml())) &&
    
    
    ((!hasAcceptedIsSet() && !rhs.hasAcceptedIsSet()) || (hasAcceptedIsSet() && rhs.hasAcceptedIsSet() && isHasAccepted() == rhs.isHasAccepted())) &&
    
    
    ((!adAccountIdIsSet() && !rhs.adAccountIdIsSet()) || (adAccountIdIsSet() && rhs.adAccountIdIsSet() && getAdAccountId() == rhs.getAdAccountId()))
    
    ;
}

bool TermsOfService::operator!=(const TermsOfService& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const TermsOfService& o)
{
    j = nlohmann::json::object();
    if(o.idIsSet())
        j["id"] = o.m_Id;
    if(o.htmlIsSet())
        j["html"] = o.m_Html;
    if(o.hasAcceptedIsSet())
        j["has_accepted"] = o.m_Has_accepted;
    if(o.adAccountIdIsSet())
        j["ad_account_id"] = o.m_Ad_account_id;
    
}

void from_json(const nlohmann::json& j, TermsOfService& o)
{
    if(j.find("id") != j.end())
    {
        j.at("id").get_to(o.m_Id);
        o.m_IdIsSet = true;
    } 
    if(j.find("html") != j.end())
    {
        j.at("html").get_to(o.m_Html);
        o.m_HtmlIsSet = true;
    } 
    if(j.find("has_accepted") != j.end())
    {
        j.at("has_accepted").get_to(o.m_Has_accepted);
        o.m_Has_acceptedIsSet = true;
    } 
    if(j.find("ad_account_id") != j.end())
    {
        j.at("ad_account_id").get_to(o.m_Ad_account_id);
        o.m_Ad_account_idIsSet = true;
    } 
    
}

std::string TermsOfService::getId() const
{
    return m_Id;
}
void TermsOfService::setId(std::string const& value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool TermsOfService::idIsSet() const
{
    return m_IdIsSet;
}
void TermsOfService::unsetId()
{
    m_IdIsSet = false;
}
std::string TermsOfService::getHtml() const
{
    return m_Html;
}
void TermsOfService::setHtml(std::string const& value)
{
    m_Html = value;
    m_HtmlIsSet = true;
}
bool TermsOfService::htmlIsSet() const
{
    return m_HtmlIsSet;
}
void TermsOfService::unsetHtml()
{
    m_HtmlIsSet = false;
}
bool TermsOfService::isHasAccepted() const
{
    return m_Has_accepted;
}
void TermsOfService::setHasAccepted(bool const value)
{
    m_Has_accepted = value;
    m_Has_acceptedIsSet = true;
}
bool TermsOfService::hasAcceptedIsSet() const
{
    return m_Has_acceptedIsSet;
}
void TermsOfService::unsetHas_accepted()
{
    m_Has_acceptedIsSet = false;
}
std::string TermsOfService::getAdAccountId() const
{
    return m_Ad_account_id;
}
void TermsOfService::setAdAccountId(std::string const& value)
{
    m_Ad_account_id = value;
    m_Ad_account_idIsSet = true;
}
bool TermsOfService::adAccountIdIsSet() const
{
    return m_Ad_account_idIsSet;
}
void TermsOfService::unsetAd_account_id()
{
    m_Ad_account_idIsSet = false;
}


} // namespace org::openapitools::server::model

