/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "PinMediaSource.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

PinMediaSource::PinMediaSource()
{
    m_Source_type = "";
    m_Content_type = "";
    m_Data = "";
    m_Is_standard = true;
    m_Is_standardIsSet = false;
    m_Url = "";
    m_Cover_image_url = "";
    m_Cover_image_urlIsSet = false;
    m_Cover_image_content_type = "";
    m_Cover_image_content_typeIsSet = false;
    m_Cover_image_data = "";
    m_Cover_image_dataIsSet = false;
    m_Media_id = "";
    m_Index = 0;
    m_IndexIsSet = false;
    m_Is_affiliate_link = false;
    m_Is_affiliate_linkIsSet = false;
    
}

void PinMediaSource::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool PinMediaSource::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool PinMediaSource::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "PinMediaSource" : pathPrefix;

                 
    
    /* Data */ {
        const std::string& value = m_Data;
        const std::string currentValuePath = _pathPrefix + ".data";
                
        

    }
                             
    
    /* Media_id */ {
        const std::string& value = m_Media_id;
        const std::string currentValuePath = _pathPrefix + ".mediaId";
                
        

    }
         
    
    /* Items */ {
        const std::vector<org::openapitools::server::model::PinMediaSourceImagesURL_items_inner>& value = m_Items;
        const std::string currentValuePath = _pathPrefix + ".items";
                
        
        if (value.size() < 2)
        {
            success = false;
            msg << currentValuePath << ": must have at least 2 elements;";
        }
        if (value.size() > 5)
        {
            success = false;
            msg << currentValuePath << ": must have at most 5 elements;";
        }
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::PinMediaSourceImagesURL_items_inner& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".items") && success;
 
                i++;
            }
        }

    }
         
    if (indexIsSet())
    {
        const int32_t& value = m_Index;
        const std::string currentValuePath = _pathPrefix + ".index";
                
        
        if (value < 0)
        {
            success = false;
            msg << currentValuePath << ": must be greater than or equal to 0;";
        }

    }
        
    return success;
}

bool PinMediaSource::operator==(const PinMediaSource& rhs) const
{
    return
    
    
    (getSourceType() == rhs.getSourceType())
     &&
    
    (getContentType() == rhs.getContentType())
     &&
    
    (getData() == rhs.getData())
     &&
    
    
    ((!isStandardIsSet() && !rhs.isStandardIsSet()) || (isStandardIsSet() && rhs.isStandardIsSet() && isIsStandard() == rhs.isIsStandard())) &&
    
    (getUrl() == rhs.getUrl())
     &&
    
    
    ((!coverImageUrlIsSet() && !rhs.coverImageUrlIsSet()) || (coverImageUrlIsSet() && rhs.coverImageUrlIsSet() && getCoverImageUrl() == rhs.getCoverImageUrl())) &&
    
    
    ((!coverImageContentTypeIsSet() && !rhs.coverImageContentTypeIsSet()) || (coverImageContentTypeIsSet() && rhs.coverImageContentTypeIsSet() && getCoverImageContentType() == rhs.getCoverImageContentType())) &&
    
    
    ((!coverImageDataIsSet() && !rhs.coverImageDataIsSet()) || (coverImageDataIsSet() && rhs.coverImageDataIsSet() && getCoverImageData() == rhs.getCoverImageData())) &&
    
    (getMediaId() == rhs.getMediaId())
     &&
    
    (getItems() == rhs.getItems())
     &&
    
    
    ((!indexIsSet() && !rhs.indexIsSet()) || (indexIsSet() && rhs.indexIsSet() && getIndex() == rhs.getIndex())) &&
    
    
    ((!isAffiliateLinkIsSet() && !rhs.isAffiliateLinkIsSet()) || (isAffiliateLinkIsSet() && rhs.isAffiliateLinkIsSet() && isIsAffiliateLink() == rhs.isIsAffiliateLink()))
    
    ;
}

bool PinMediaSource::operator!=(const PinMediaSource& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const PinMediaSource& o)
{
    j = nlohmann::json::object();
    j["source_type"] = o.m_Source_type;
    j["content_type"] = o.m_Content_type;
    j["data"] = o.m_Data;
    if(o.isStandardIsSet())
        j["is_standard"] = o.m_Is_standard;
    j["url"] = o.m_Url;
    if(o.coverImageUrlIsSet())
        j["cover_image_url"] = o.m_Cover_image_url;
    if(o.coverImageContentTypeIsSet())
        j["cover_image_content_type"] = o.m_Cover_image_content_type;
    if(o.coverImageDataIsSet())
        j["cover_image_data"] = o.m_Cover_image_data;
    j["media_id"] = o.m_Media_id;
    j["items"] = o.m_Items;
    if(o.indexIsSet())
        j["index"] = o.m_Index;
    if(o.isAffiliateLinkIsSet())
        j["is_affiliate_link"] = o.m_Is_affiliate_link;
    
}

void from_json(const nlohmann::json& j, PinMediaSource& o)
{
    j.at("source_type").get_to(o.m_Source_type);
    j.at("content_type").get_to(o.m_Content_type);
    j.at("data").get_to(o.m_Data);
    if(j.find("is_standard") != j.end())
    {
        j.at("is_standard").get_to(o.m_Is_standard);
        o.m_Is_standardIsSet = true;
    } 
    j.at("url").get_to(o.m_Url);
    if(j.find("cover_image_url") != j.end())
    {
        j.at("cover_image_url").get_to(o.m_Cover_image_url);
        o.m_Cover_image_urlIsSet = true;
    } 
    if(j.find("cover_image_content_type") != j.end())
    {
        j.at("cover_image_content_type").get_to(o.m_Cover_image_content_type);
        o.m_Cover_image_content_typeIsSet = true;
    } 
    if(j.find("cover_image_data") != j.end())
    {
        j.at("cover_image_data").get_to(o.m_Cover_image_data);
        o.m_Cover_image_dataIsSet = true;
    } 
    j.at("media_id").get_to(o.m_Media_id);
    j.at("items").get_to(o.m_Items);
    if(j.find("index") != j.end())
    {
        j.at("index").get_to(o.m_Index);
        o.m_IndexIsSet = true;
    } 
    if(j.find("is_affiliate_link") != j.end())
    {
        j.at("is_affiliate_link").get_to(o.m_Is_affiliate_link);
        o.m_Is_affiliate_linkIsSet = true;
    } 
    
}

std::string PinMediaSource::getSourceType() const
{
    return m_Source_type;
}
void PinMediaSource::setSourceType(std::string const& value)
{
    m_Source_type = value;
}
std::string PinMediaSource::getContentType() const
{
    return m_Content_type;
}
void PinMediaSource::setContentType(std::string const& value)
{
    m_Content_type = value;
}
std::string PinMediaSource::getData() const
{
    return m_Data;
}
void PinMediaSource::setData(std::string const& value)
{
    m_Data = value;
}
bool PinMediaSource::isIsStandard() const
{
    return m_Is_standard;
}
void PinMediaSource::setIsStandard(bool const value)
{
    m_Is_standard = value;
    m_Is_standardIsSet = true;
}
bool PinMediaSource::isStandardIsSet() const
{
    return m_Is_standardIsSet;
}
void PinMediaSource::unsetIs_standard()
{
    m_Is_standardIsSet = false;
}
std::string PinMediaSource::getUrl() const
{
    return m_Url;
}
void PinMediaSource::setUrl(std::string const& value)
{
    m_Url = value;
}
std::string PinMediaSource::getCoverImageUrl() const
{
    return m_Cover_image_url;
}
void PinMediaSource::setCoverImageUrl(std::string const& value)
{
    m_Cover_image_url = value;
    m_Cover_image_urlIsSet = true;
}
bool PinMediaSource::coverImageUrlIsSet() const
{
    return m_Cover_image_urlIsSet;
}
void PinMediaSource::unsetCover_image_url()
{
    m_Cover_image_urlIsSet = false;
}
std::string PinMediaSource::getCoverImageContentType() const
{
    return m_Cover_image_content_type;
}
void PinMediaSource::setCoverImageContentType(std::string const& value)
{
    m_Cover_image_content_type = value;
    m_Cover_image_content_typeIsSet = true;
}
bool PinMediaSource::coverImageContentTypeIsSet() const
{
    return m_Cover_image_content_typeIsSet;
}
void PinMediaSource::unsetCover_image_content_type()
{
    m_Cover_image_content_typeIsSet = false;
}
std::string PinMediaSource::getCoverImageData() const
{
    return m_Cover_image_data;
}
void PinMediaSource::setCoverImageData(std::string const& value)
{
    m_Cover_image_data = value;
    m_Cover_image_dataIsSet = true;
}
bool PinMediaSource::coverImageDataIsSet() const
{
    return m_Cover_image_dataIsSet;
}
void PinMediaSource::unsetCover_image_data()
{
    m_Cover_image_dataIsSet = false;
}
std::string PinMediaSource::getMediaId() const
{
    return m_Media_id;
}
void PinMediaSource::setMediaId(std::string const& value)
{
    m_Media_id = value;
}
std::vector<org::openapitools::server::model::PinMediaSourceImagesURL_items_inner> PinMediaSource::getItems() const
{
    return m_Items;
}
void PinMediaSource::setItems(std::vector<org::openapitools::server::model::PinMediaSourceImagesURL_items_inner> const& value)
{
    m_Items = value;
}
int32_t PinMediaSource::getIndex() const
{
    return m_Index;
}
void PinMediaSource::setIndex(int32_t const value)
{
    m_Index = value;
    m_IndexIsSet = true;
}
bool PinMediaSource::indexIsSet() const
{
    return m_IndexIsSet;
}
void PinMediaSource::unsetIndex()
{
    m_IndexIsSet = false;
}
bool PinMediaSource::isIsAffiliateLink() const
{
    return m_Is_affiliate_link;
}
void PinMediaSource::setIsAffiliateLink(bool const value)
{
    m_Is_affiliate_link = value;
    m_Is_affiliate_linkIsSet = true;
}
bool PinMediaSource::isAffiliateLinkIsSet() const
{
    return m_Is_affiliate_linkIsSet;
}
void PinMediaSource::unsetIs_affiliate_link()
{
    m_Is_affiliate_linkIsSet = false;
}


} // namespace org::openapitools::server::model

