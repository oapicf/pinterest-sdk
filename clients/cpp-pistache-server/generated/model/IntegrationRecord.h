/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * IntegrationRecord.h
 *
 * Integration record
 */

#ifndef IntegrationRecord_H_
#define IntegrationRecord_H_


#include <string>
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// Integration record
/// </summary>
class  IntegrationRecord
{
public:
    IntegrationRecord();
    virtual ~IntegrationRecord() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const IntegrationRecord& rhs) const;
    bool operator!=(const IntegrationRecord& rhs) const;

    /////////////////////////////////////////////
    /// IntegrationRecord members

    /// <summary>
    /// 
    /// </summary>
    std::string getId() const;
    void setId(std::string const& value);
    bool idIsSet() const;
    void unsetId();
    /// <summary>
    /// 
    /// </summary>
    std::string getExternalBusinessId() const;
    void setExternalBusinessId(std::string const& value);
    bool externalBusinessIdIsSet() const;
    void unsetExternal_business_id();
    /// <summary>
    /// 
    /// </summary>
    std::string getConnectedMerchantId() const;
    void setConnectedMerchantId(std::string const& value);
    bool connectedMerchantIdIsSet() const;
    void unsetConnected_merchant_id();
    /// <summary>
    /// 
    /// </summary>
    std::string getConnectedUserId() const;
    void setConnectedUserId(std::string const& value);
    bool connectedUserIdIsSet() const;
    void unsetConnected_user_id();
    /// <summary>
    /// 
    /// </summary>
    std::string getConnectedAdvertiserId() const;
    void setConnectedAdvertiserId(std::string const& value);
    bool connectedAdvertiserIdIsSet() const;
    void unsetConnected_advertiser_id();
    /// <summary>
    /// 
    /// </summary>
    std::string getConnectedLbaId() const;
    void setConnectedLbaId(std::string const& value);
    bool connectedLbaIdIsSet() const;
    void unsetConnected_lba_id();
    /// <summary>
    /// 
    /// </summary>
    std::string getConnectedTagId() const;
    void setConnectedTagId(std::string const& value);
    bool connectedTagIdIsSet() const;
    void unsetConnected_tag_id();
    /// <summary>
    /// 
    /// </summary>
    std::string getPartnerAccessToken() const;
    void setPartnerAccessToken(std::string const& value);
    bool partnerAccessTokenIsSet() const;
    void unsetPartner_access_token();
    /// <summary>
    /// 
    /// </summary>
    std::string getPartnerRefreshToken() const;
    void setPartnerRefreshToken(std::string const& value);
    bool partnerRefreshTokenIsSet() const;
    void unsetPartner_refresh_token();
    /// <summary>
    /// 
    /// </summary>
    std::string getPartnerPrimaryEmail() const;
    void setPartnerPrimaryEmail(std::string const& value);
    bool partnerPrimaryEmailIsSet() const;
    void unsetPartner_primary_email();
    /// <summary>
    /// 
    /// </summary>
    int32_t getPartnerAccessTokenExpiry() const;
    void setPartnerAccessTokenExpiry(int32_t const value);
    bool partnerAccessTokenExpiryIsSet() const;
    void unsetPartner_access_token_expiry();
    /// <summary>
    /// 
    /// </summary>
    int32_t getPartnerRefreshTokenExpiry() const;
    void setPartnerRefreshTokenExpiry(int32_t const value);
    bool partnerRefreshTokenExpiryIsSet() const;
    void unsetPartner_refresh_token_expiry();
    /// <summary>
    /// 
    /// </summary>
    std::string getScopes() const;
    void setScopes(std::string const& value);
    bool scopesIsSet() const;
    void unsetScopes();
    /// <summary>
    /// 
    /// </summary>
    std::string getPartnerMetadata() const;
    void setPartnerMetadata(std::string const& value);
    bool partnerMetadataIsSet() const;
    void unsetPartner_metadata();
    /// <summary>
    /// 
    /// </summary>
    std::string getAdditionalId1() const;
    void setAdditionalId1(std::string const& value);
    bool additionalId1IsSet() const;
    void unsetAdditional_id_1();
    /// <summary>
    /// 
    /// </summary>
    int32_t getCreatedTime() const;
    void setCreatedTime(int32_t const value);
    bool createdTimeIsSet() const;
    void unsetCreated_time();
    /// <summary>
    /// 
    /// </summary>
    int32_t getUpdatedTime() const;
    void setUpdatedTime(int32_t const value);
    bool updatedTimeIsSet() const;
    void unsetUpdated_time();

    friend  void to_json(nlohmann::json& j, const IntegrationRecord& o);
    friend  void from_json(const nlohmann::json& j, IntegrationRecord& o);
protected:
    std::string m_Id;
    bool m_IdIsSet;
    std::string m_External_business_id;
    bool m_External_business_idIsSet;
    std::string m_Connected_merchant_id;
    bool m_Connected_merchant_idIsSet;
    std::string m_Connected_user_id;
    bool m_Connected_user_idIsSet;
    std::string m_Connected_advertiser_id;
    bool m_Connected_advertiser_idIsSet;
    std::string m_Connected_lba_id;
    bool m_Connected_lba_idIsSet;
    std::string m_Connected_tag_id;
    bool m_Connected_tag_idIsSet;
    std::string m_Partner_access_token;
    bool m_Partner_access_tokenIsSet;
    std::string m_Partner_refresh_token;
    bool m_Partner_refresh_tokenIsSet;
    std::string m_Partner_primary_email;
    bool m_Partner_primary_emailIsSet;
    int32_t m_Partner_access_token_expiry;
    bool m_Partner_access_token_expiryIsSet;
    int32_t m_Partner_refresh_token_expiry;
    bool m_Partner_refresh_token_expiryIsSet;
    std::string m_Scopes;
    bool m_ScopesIsSet;
    std::string m_Partner_metadata;
    bool m_Partner_metadataIsSet;
    std::string m_Additional_id_1;
    bool m_Additional_id_1IsSet;
    int32_t m_Created_time;
    bool m_Created_timeIsSet;
    int32_t m_Updated_time;
    bool m_Updated_timeIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* IntegrationRecord_H_ */
