/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "CreateInvitesResultsResponseArray_items_inner_invite.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

CreateInvitesResultsResponseArray_items_inner_invite::CreateInvitesResultsResponseArray_items_inner_invite()
{
    m_Id = "";
    m_IdIsSet = false;
    m_UserIsSet = false;
    
}

void CreateInvitesResultsResponseArray_items_inner_invite::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool CreateInvitesResultsResponseArray_items_inner_invite::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool CreateInvitesResultsResponseArray_items_inner_invite::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "CreateInvitesResultsResponseArray_items_inner_invite" : pathPrefix;

         
    if (idIsSet())
    {
        const std::string& value = m_Id;
        const std::string currentValuePath = _pathPrefix + ".id";
                
        

    }
        
    return success;
}

bool CreateInvitesResultsResponseArray_items_inner_invite::operator==(const CreateInvitesResultsResponseArray_items_inner_invite& rhs) const
{
    return
    
    
    
    ((!idIsSet() && !rhs.idIsSet()) || (idIsSet() && rhs.idIsSet() && getId() == rhs.getId())) &&
    
    
    ((!userIsSet() && !rhs.userIsSet()) || (userIsSet() && rhs.userIsSet() && getUser() == rhs.getUser()))
    
    ;
}

bool CreateInvitesResultsResponseArray_items_inner_invite::operator!=(const CreateInvitesResultsResponseArray_items_inner_invite& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const CreateInvitesResultsResponseArray_items_inner_invite& o)
{
    j = nlohmann::json::object();
    if(o.idIsSet())
        j["id"] = o.m_Id;
    if(o.userIsSet())
        j["user"] = o.m_User;
    
}

void from_json(const nlohmann::json& j, CreateInvitesResultsResponseArray_items_inner_invite& o)
{
    if(j.find("id") != j.end())
    {
        j.at("id").get_to(o.m_Id);
        o.m_IdIsSet = true;
    } 
    if(j.find("user") != j.end())
    {
        j.at("user").get_to(o.m_User);
        o.m_UserIsSet = true;
    } 
    
}

std::string CreateInvitesResultsResponseArray_items_inner_invite::getId() const
{
    return m_Id;
}
void CreateInvitesResultsResponseArray_items_inner_invite::setId(std::string const& value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool CreateInvitesResultsResponseArray_items_inner_invite::idIsSet() const
{
    return m_IdIsSet;
}
void CreateInvitesResultsResponseArray_items_inner_invite::unsetId()
{
    m_IdIsSet = false;
}
org::openapitools::server::model::BusinessAccessUserSummary CreateInvitesResultsResponseArray_items_inner_invite::getUser() const
{
    return m_User;
}
void CreateInvitesResultsResponseArray_items_inner_invite::setUser(org::openapitools::server::model::BusinessAccessUserSummary const& value)
{
    m_User = value;
    m_UserIsSet = true;
}
bool CreateInvitesResultsResponseArray_items_inner_invite::userIsSet() const
{
    return m_UserIsSet;
}
void CreateInvitesResultsResponseArray_items_inner_invite::unsetUser()
{
    m_UserIsSet = false;
}


} // namespace org::openapitools::server::model

