/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "LeadFormUpdateRequest.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

LeadFormUpdateRequest::LeadFormUpdateRequest()
{
    m_Name = "";
    m_NameIsSet = false;
    m_Privacy_policy_link = "";
    m_Privacy_policy_linkIsSet = false;
    m_Has_accepted_terms = false;
    m_Has_accepted_termsIsSet = false;
    m_Completion_message = "";
    m_Completion_messageIsSet = false;
    m_StatusIsSet = false;
    m_Disclosure_language = "";
    m_Disclosure_languageIsSet = false;
    m_QuestionsIsSet = false;
    m_Policy_linksIsSet = false;
    m_Id = "";
    
}

void LeadFormUpdateRequest::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool LeadFormUpdateRequest::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool LeadFormUpdateRequest::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "LeadFormUpdateRequest" : pathPrefix;

                                 
    if (questionsIsSet())
    {
        const std::vector<org::openapitools::server::model::LeadFormQuestion>& value = m_Questions;
        const std::string currentValuePath = _pathPrefix + ".questions";
                
        
        if (value.size() < 0)
        {
            success = false;
            msg << currentValuePath << ": must have at least 0 elements;";
        }
        if (value.size() > 10)
        {
            success = false;
            msg << currentValuePath << ": must have at most 10 elements;";
        }
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::LeadFormQuestion& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".questions") && success;
 
                i++;
            }
        }

    }
         
    if (policyLinksIsSet())
    {
        const std::vector<org::openapitools::server::model::LeadFormCommon_policy_links_inner>& value = m_Policy_links;
        const std::string currentValuePath = _pathPrefix + ".policyLinks";
                
        
        if (value.size() < 0)
        {
            success = false;
            msg << currentValuePath << ": must have at least 0 elements;";
        }
        if (value.size() > 3)
        {
            success = false;
            msg << currentValuePath << ": must have at most 3 elements;";
        }
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::LeadFormCommon_policy_links_inner& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".policyLinks") && success;
 
                i++;
            }
        }

    }
         
    
    /* Id */ {
        const std::string& value = m_Id;
        const std::string currentValuePath = _pathPrefix + ".id";
                
        

    }
    
    return success;
}

bool LeadFormUpdateRequest::operator==(const LeadFormUpdateRequest& rhs) const
{
    return
    
    
    
    ((!nameIsSet() && !rhs.nameIsSet()) || (nameIsSet() && rhs.nameIsSet() && getName() == rhs.getName())) &&
    
    
    ((!privacyPolicyLinkIsSet() && !rhs.privacyPolicyLinkIsSet()) || (privacyPolicyLinkIsSet() && rhs.privacyPolicyLinkIsSet() && getPrivacyPolicyLink() == rhs.getPrivacyPolicyLink())) &&
    
    
    ((!hasAcceptedTermsIsSet() && !rhs.hasAcceptedTermsIsSet()) || (hasAcceptedTermsIsSet() && rhs.hasAcceptedTermsIsSet() && isHasAcceptedTerms() == rhs.isHasAcceptedTerms())) &&
    
    
    ((!completionMessageIsSet() && !rhs.completionMessageIsSet()) || (completionMessageIsSet() && rhs.completionMessageIsSet() && getCompletionMessage() == rhs.getCompletionMessage())) &&
    
    
    ((!statusIsSet() && !rhs.statusIsSet()) || (statusIsSet() && rhs.statusIsSet() && getStatus() == rhs.getStatus())) &&
    
    
    ((!disclosureLanguageIsSet() && !rhs.disclosureLanguageIsSet()) || (disclosureLanguageIsSet() && rhs.disclosureLanguageIsSet() && getDisclosureLanguage() == rhs.getDisclosureLanguage())) &&
    
    
    ((!questionsIsSet() && !rhs.questionsIsSet()) || (questionsIsSet() && rhs.questionsIsSet() && getQuestions() == rhs.getQuestions())) &&
    
    
    ((!policyLinksIsSet() && !rhs.policyLinksIsSet()) || (policyLinksIsSet() && rhs.policyLinksIsSet() && getPolicyLinks() == rhs.getPolicyLinks())) &&
    
    (getId() == rhs.getId())
    
    
    ;
}

bool LeadFormUpdateRequest::operator!=(const LeadFormUpdateRequest& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const LeadFormUpdateRequest& o)
{
    j = nlohmann::json::object();
    if(o.nameIsSet())
        j["name"] = o.m_Name;
    if(o.privacyPolicyLinkIsSet())
        j["privacy_policy_link"] = o.m_Privacy_policy_link;
    if(o.hasAcceptedTermsIsSet())
        j["has_accepted_terms"] = o.m_Has_accepted_terms;
    if(o.completionMessageIsSet())
        j["completion_message"] = o.m_Completion_message;
    if(o.statusIsSet())
        j["status"] = o.m_Status;
    if(o.disclosureLanguageIsSet())
        j["disclosure_language"] = o.m_Disclosure_language;
    if(o.questionsIsSet() || !o.m_Questions.empty())
        j["questions"] = o.m_Questions;
    if(o.policyLinksIsSet() || !o.m_Policy_links.empty())
        j["policy_links"] = o.m_Policy_links;
    j["id"] = o.m_Id;
    
}

void from_json(const nlohmann::json& j, LeadFormUpdateRequest& o)
{
    if(j.find("name") != j.end())
    {
        j.at("name").get_to(o.m_Name);
        o.m_NameIsSet = true;
    } 
    if(j.find("privacy_policy_link") != j.end())
    {
        j.at("privacy_policy_link").get_to(o.m_Privacy_policy_link);
        o.m_Privacy_policy_linkIsSet = true;
    } 
    if(j.find("has_accepted_terms") != j.end())
    {
        j.at("has_accepted_terms").get_to(o.m_Has_accepted_terms);
        o.m_Has_accepted_termsIsSet = true;
    } 
    if(j.find("completion_message") != j.end())
    {
        j.at("completion_message").get_to(o.m_Completion_message);
        o.m_Completion_messageIsSet = true;
    } 
    if(j.find("status") != j.end())
    {
        j.at("status").get_to(o.m_Status);
        o.m_StatusIsSet = true;
    } 
    if(j.find("disclosure_language") != j.end())
    {
        j.at("disclosure_language").get_to(o.m_Disclosure_language);
        o.m_Disclosure_languageIsSet = true;
    } 
    if(j.find("questions") != j.end())
    {
        j.at("questions").get_to(o.m_Questions);
        o.m_QuestionsIsSet = true;
    } 
    if(j.find("policy_links") != j.end())
    {
        j.at("policy_links").get_to(o.m_Policy_links);
        o.m_Policy_linksIsSet = true;
    } 
    j.at("id").get_to(o.m_Id);
    
}

std::string LeadFormUpdateRequest::getName() const
{
    return m_Name;
}
void LeadFormUpdateRequest::setName(std::string const& value)
{
    m_Name = value;
    m_NameIsSet = true;
}
bool LeadFormUpdateRequest::nameIsSet() const
{
    return m_NameIsSet;
}
void LeadFormUpdateRequest::unsetName()
{
    m_NameIsSet = false;
}
std::string LeadFormUpdateRequest::getPrivacyPolicyLink() const
{
    return m_Privacy_policy_link;
}
void LeadFormUpdateRequest::setPrivacyPolicyLink(std::string const& value)
{
    m_Privacy_policy_link = value;
    m_Privacy_policy_linkIsSet = true;
}
bool LeadFormUpdateRequest::privacyPolicyLinkIsSet() const
{
    return m_Privacy_policy_linkIsSet;
}
void LeadFormUpdateRequest::unsetPrivacy_policy_link()
{
    m_Privacy_policy_linkIsSet = false;
}
bool LeadFormUpdateRequest::isHasAcceptedTerms() const
{
    return m_Has_accepted_terms;
}
void LeadFormUpdateRequest::setHasAcceptedTerms(bool const value)
{
    m_Has_accepted_terms = value;
    m_Has_accepted_termsIsSet = true;
}
bool LeadFormUpdateRequest::hasAcceptedTermsIsSet() const
{
    return m_Has_accepted_termsIsSet;
}
void LeadFormUpdateRequest::unsetHas_accepted_terms()
{
    m_Has_accepted_termsIsSet = false;
}
std::string LeadFormUpdateRequest::getCompletionMessage() const
{
    return m_Completion_message;
}
void LeadFormUpdateRequest::setCompletionMessage(std::string const& value)
{
    m_Completion_message = value;
    m_Completion_messageIsSet = true;
}
bool LeadFormUpdateRequest::completionMessageIsSet() const
{
    return m_Completion_messageIsSet;
}
void LeadFormUpdateRequest::unsetCompletion_message()
{
    m_Completion_messageIsSet = false;
}
org::openapitools::server::model::LeadFormStatus LeadFormUpdateRequest::getStatus() const
{
    return m_Status;
}
void LeadFormUpdateRequest::setStatus(org::openapitools::server::model::LeadFormStatus const& value)
{
    m_Status = value;
    m_StatusIsSet = true;
}
bool LeadFormUpdateRequest::statusIsSet() const
{
    return m_StatusIsSet;
}
void LeadFormUpdateRequest::unsetStatus()
{
    m_StatusIsSet = false;
}
std::string LeadFormUpdateRequest::getDisclosureLanguage() const
{
    return m_Disclosure_language;
}
void LeadFormUpdateRequest::setDisclosureLanguage(std::string const& value)
{
    m_Disclosure_language = value;
    m_Disclosure_languageIsSet = true;
}
bool LeadFormUpdateRequest::disclosureLanguageIsSet() const
{
    return m_Disclosure_languageIsSet;
}
void LeadFormUpdateRequest::unsetDisclosure_language()
{
    m_Disclosure_languageIsSet = false;
}
std::vector<org::openapitools::server::model::LeadFormQuestion> LeadFormUpdateRequest::getQuestions() const
{
    return m_Questions;
}
void LeadFormUpdateRequest::setQuestions(std::vector<org::openapitools::server::model::LeadFormQuestion> const& value)
{
    m_Questions = value;
    m_QuestionsIsSet = true;
}
bool LeadFormUpdateRequest::questionsIsSet() const
{
    return m_QuestionsIsSet;
}
void LeadFormUpdateRequest::unsetQuestions()
{
    m_QuestionsIsSet = false;
}
std::vector<org::openapitools::server::model::LeadFormCommon_policy_links_inner> LeadFormUpdateRequest::getPolicyLinks() const
{
    return m_Policy_links;
}
void LeadFormUpdateRequest::setPolicyLinks(std::vector<org::openapitools::server::model::LeadFormCommon_policy_links_inner> const& value)
{
    m_Policy_links = value;
    m_Policy_linksIsSet = true;
}
bool LeadFormUpdateRequest::policyLinksIsSet() const
{
    return m_Policy_linksIsSet;
}
void LeadFormUpdateRequest::unsetPolicy_links()
{
    m_Policy_linksIsSet = false;
}
std::string LeadFormUpdateRequest::getId() const
{
    return m_Id;
}
void LeadFormUpdateRequest::setId(std::string const& value)
{
    m_Id = value;
}


} // namespace org::openapitools::server::model

