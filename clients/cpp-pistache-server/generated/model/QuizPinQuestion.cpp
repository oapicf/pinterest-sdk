/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "QuizPinQuestion.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

QuizPinQuestion::QuizPinQuestion()
{
    m_Question_id = 0.0;
    m_Question_idIsSet = false;
    m_Question_text = "";
    m_Question_textIsSet = false;
    m_OptionsIsSet = false;
    
}

void QuizPinQuestion::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool QuizPinQuestion::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool QuizPinQuestion::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "QuizPinQuestion" : pathPrefix;

                 
    if (optionsIsSet())
    {
        const std::vector<org::openapitools::server::model::QuizPinOption>& value = m_Options;
        const std::string currentValuePath = _pathPrefix + ".options";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::QuizPinOption& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".options") && success;
 
                i++;
            }
        }

    }
    
    return success;
}

bool QuizPinQuestion::operator==(const QuizPinQuestion& rhs) const
{
    return
    
    
    
    ((!questionIdIsSet() && !rhs.questionIdIsSet()) || (questionIdIsSet() && rhs.questionIdIsSet() && getQuestionId() == rhs.getQuestionId())) &&
    
    
    ((!questionTextIsSet() && !rhs.questionTextIsSet()) || (questionTextIsSet() && rhs.questionTextIsSet() && getQuestionText() == rhs.getQuestionText())) &&
    
    
    ((!optionsIsSet() && !rhs.optionsIsSet()) || (optionsIsSet() && rhs.optionsIsSet() && getOptions() == rhs.getOptions()))
    
    ;
}

bool QuizPinQuestion::operator!=(const QuizPinQuestion& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const QuizPinQuestion& o)
{
    j = nlohmann::json::object();
    if(o.questionIdIsSet())
        j["question_id"] = o.m_Question_id;
    if(o.questionTextIsSet())
        j["question_text"] = o.m_Question_text;
    if(o.optionsIsSet() || !o.m_Options.empty())
        j["options"] = o.m_Options;
    
}

void from_json(const nlohmann::json& j, QuizPinQuestion& o)
{
    if(j.find("question_id") != j.end())
    {
        j.at("question_id").get_to(o.m_Question_id);
        o.m_Question_idIsSet = true;
    } 
    if(j.find("question_text") != j.end())
    {
        j.at("question_text").get_to(o.m_Question_text);
        o.m_Question_textIsSet = true;
    } 
    if(j.find("options") != j.end())
    {
        j.at("options").get_to(o.m_Options);
        o.m_OptionsIsSet = true;
    } 
    
}

double QuizPinQuestion::getQuestionId() const
{
    return m_Question_id;
}
void QuizPinQuestion::setQuestionId(double const value)
{
    m_Question_id = value;
    m_Question_idIsSet = true;
}
bool QuizPinQuestion::questionIdIsSet() const
{
    return m_Question_idIsSet;
}
void QuizPinQuestion::unsetQuestion_id()
{
    m_Question_idIsSet = false;
}
std::string QuizPinQuestion::getQuestionText() const
{
    return m_Question_text;
}
void QuizPinQuestion::setQuestionText(std::string const& value)
{
    m_Question_text = value;
    m_Question_textIsSet = true;
}
bool QuizPinQuestion::questionTextIsSet() const
{
    return m_Question_textIsSet;
}
void QuizPinQuestion::unsetQuestion_text()
{
    m_Question_textIsSet = false;
}
std::vector<org::openapitools::server::model::QuizPinOption> QuizPinQuestion::getOptions() const
{
    return m_Options;
}
void QuizPinQuestion::setOptions(std::vector<org::openapitools::server::model::QuizPinOption> const& value)
{
    m_Options = value;
    m_OptionsIsSet = true;
}
bool QuizPinQuestion::optionsIsSet() const
{
    return m_OptionsIsSet;
}
void QuizPinQuestion::unsetOptions()
{
    m_OptionsIsSet = false;
}


} // namespace org::openapitools::server::model

