/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * AudienceRule.h
 *
 * JSON object defining targeted audience users. Example rule formats per audience type:&lt;br&gt;CUSTOMER_LIST: { \&quot;customer_list_id\&quot;: \&quot;&amp;lt;customer list ID&amp;gt;\&quot;}&lt;br&gt;ACTALIKE: { \&quot;seed_id\&quot;: [\&quot;&amp;lt;audience ID&amp;gt;\&quot;], \&quot;country\&quot;: \&quot;US\&quot;, \&quot;percentage\&quot;: \&quot;10\&quot; }&lt;br&gt;(Valid countries include: \&quot;US\&quot;, \&quot;CA\&quot;, and \&quot;GB\&quot;. Percentage should be 1-10.&lt;br&gt;The targeted audience should be this % size across Pinterest.)&lt;br&gt;VISITOR: { \&quot;visitor_source_id\&quot;: [\&quot;&amp;lt;conversion tag ID&amp;gt;\&quot;], \&quot;retention_days\&quot;: \&quot;180\&quot;, \&quot;event_source\&quot;: {\&quot;&#x3D;\&quot;: [\&quot;web\&quot;, \&quot;mobile\&quot;]}, \&quot;ingestion_source\&quot;: {\&quot;&#x3D;\&quot;: [\&quot;tag\&quot;]}}&lt;br&gt;(Retention days should be 1-540. Retention applies to specific customers.)&lt;br&gt;ENGAGEMENT: {\&quot;engagement_domain\&quot;: [\&quot;www.entomi.com\&quot;], \&quot;engager_type\&quot;: 1}&lt;br&gt;For more details on engagement audiences, see &lt;a href&#x3D;\&quot;/docs/redoc/adtech_ads_v4/#section/November-2021\&quot; target&#x3D;\&quot;_blank\&quot;&gt;November 2021 changelog&lt;/a&gt;.
 */

#ifndef AudienceRule_H_
#define AudienceRule_H_


#include <nlohmann/json.hpp>
#include "ObjectiveType.h"
#include <string>
#include "PinterestTagEventData.h"
#include <vector>
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// JSON object defining targeted audience users. Example rule formats per audience type:&lt;br&gt;CUSTOMER_LIST: { \&quot;customer_list_id\&quot;: \&quot;&amp;lt;customer list ID&amp;gt;\&quot;}&lt;br&gt;ACTALIKE: { \&quot;seed_id\&quot;: [\&quot;&amp;lt;audience ID&amp;gt;\&quot;], \&quot;country\&quot;: \&quot;US\&quot;, \&quot;percentage\&quot;: \&quot;10\&quot; }&lt;br&gt;(Valid countries include: \&quot;US\&quot;, \&quot;CA\&quot;, and \&quot;GB\&quot;. Percentage should be 1-10.&lt;br&gt;The targeted audience should be this % size across Pinterest.)&lt;br&gt;VISITOR: { \&quot;visitor_source_id\&quot;: [\&quot;&amp;lt;conversion tag ID&amp;gt;\&quot;], \&quot;retention_days\&quot;: \&quot;180\&quot;, \&quot;event_source\&quot;: {\&quot;&#x3D;\&quot;: [\&quot;web\&quot;, \&quot;mobile\&quot;]}, \&quot;ingestion_source\&quot;: {\&quot;&#x3D;\&quot;: [\&quot;tag\&quot;]}}&lt;br&gt;(Retention days should be 1-540. Retention applies to specific customers.)&lt;br&gt;ENGAGEMENT: {\&quot;engagement_domain\&quot;: [\&quot;www.entomi.com\&quot;], \&quot;engager_type\&quot;: 1}&lt;br&gt;For more details on engagement audiences, see &lt;a href&#x3D;\&quot;/docs/redoc/adtech_ads_v4/#section/November-2021\&quot; target&#x3D;\&quot;_blank\&quot;&gt;November 2021 changelog&lt;/a&gt;.
/// </summary>
class  AudienceRule
{
public:
    AudienceRule();
    virtual ~AudienceRule() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const AudienceRule& rhs) const;
    bool operator!=(const AudienceRule& rhs) const;

    /////////////////////////////////////////////
    /// AudienceRule members

    /// <summary>
    /// Valid countries include: \&quot;US\&quot;, \&quot;CA\&quot;, and \&quot;GB\&quot;.
    /// </summary>
    std::string getCountry() const;
    void setCountry(std::string const& value);
    bool countryIsSet() const;
    void unsetCountry();
    /// <summary>
    /// Customer list ID. For CUSTOMER_LIST &#x60;audience_type&#x60;.
    /// </summary>
    std::string getCustomerListId() const;
    void setCustomerListId(std::string const& value);
    bool customerListIdIsSet() const;
    void unsetCustomer_list_id();
    /// <summary>
    /// The audience account&#39;s verified domain. **Required** for ENGAGEMENT &#x60;audience_type&#x60;.
    /// </summary>
    std::vector<std::string> getEngagementDomain() const;
    void setEngagementDomain(std::vector<std::string> const& value);
    bool engagementDomainIsSet() const;
    void unsetEngagement_domain();
    /// <summary>
    /// Engagement type enum. Optional for ENGAGEMENT &#x60;audience_type&#x60;. Supported values are &#x60;click&#x60;, &#x60;save&#x60;, &#x60;closeup&#x60;, &#x60;comment&#x60; and &#x60;like&#x60;. All engagements are included if this field is not set. 
    /// </summary>
    std::string getEngagementType() const;
    void setEngagementType(std::string const& value);
    bool engagementTypeIsSet() const;
    void unsetEngagement_type();
    /// <summary>
    /// A Pinterest tag event. Optional for VISITOR &#x60;audience_type&#x60;. Possible values are &#x60;pagevisit&#x60;, &#x60;signup&#x60;, &#x60;checkout&#x60;, &#x60;viewcategory&#x60;, &#x60;search&#x60;, &#x60;addtocart&#x60;, &#x60;watchvideo&#x60;, &#x60;lead&#x60;, and &#x60;custom&#x60;. This field also accepts a partner-defined Pinterest tag event.
    /// </summary>
    std::string getEvent() const;
    void setEvent(std::string const& value);
    bool eventIsSet() const;
    void unsetEvent();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::PinterestTagEventData getEventData() const;
    void setEventData(org::openapitools::server::model::PinterestTagEventData const& value);
    bool eventDataIsSet() const;
    void unsetEvent_data();
    /// <summary>
    /// Percentage should be 1-10. The targeted audience should be this % size across Pinterest.
    /// </summary>
    int32_t getPercentage() const;
    void setPercentage(int32_t const value);
    bool percentageIsSet() const;
    void unsetPercentage();
    /// <summary>
    /// IDs of engaged organic pins. Optional for ENGAGEMENT &#x60;audience_type&#x60;. For example, \&quot;pin_id:\&quot;: [\&quot;34567\&quot;]
    /// </summary>
    std::vector<std::string> getPinId() const;
    void setPinId(std::vector<std::string> const& value);
    bool pinIdIsSet() const;
    void unsetPin_id();
    /// <summary>
    /// Optional for VISITOR &#x60;audience_type&#x60;. If &#x60;true&#x60;, the specified rule on existing engagement data is applied to pre-populate the audience. If &#x60;false&#x60;, the audience is empty at creation time. The default is &#x60;true&#x60;.
    /// </summary>
    bool isPrefill() const;
    void setPrefill(bool const value);
    bool prefillIsSet() const;
    void unsetPrefill();
    /// <summary>
    /// Number of days a Pinterest user remains in the audience. Optional for ENGAGEMENT and VISITOR &#x60;audience_type&#x60;. Accepted range is 1-540. Defaults to 180 if not specified.
    /// </summary>
    int32_t getRetentionDays() const;
    void setRetentionDays(int32_t const value);
    bool retentionDaysIsSet() const;
    void unsetRetention_days();
    /// <summary>
    /// Audience ID(s). For ACTALIKE &#x60;audience_type&#x60;. 
    /// </summary>
    std::vector<std::string> getSeedId() const;
    void setSeedId(std::vector<std::string> const& value);
    bool seedIdIsSet() const;
    void unsetSeed_id();
    /// <summary>
    /// Optional for ENGAGEMENT or VISITOR &#x60;audience_type&#x60;. For ENGAGEMENT, it is the engaged pin&#39;s URL. For VISITOR, you can use it as a string or a {operator: value} object for filtering visitors based on conversion tag event URLs. Supported operators are [ &#x3D;, !&#x3D;, contains, not_contains].&lt;br&gt;Example 1:  \&quot;url\&quot;: \&quot;http://www.myonlinestore123.com/view_item/shoe\&quot;&lt;br&gt;Example 2: \&quot;url\&quot;: {\&quot;contains\&quot;: \&quot;/view_item/shoe\&quot;}
    /// </summary>
    std::vector<std::string> getUrl() const;
    void setUrl(std::vector<std::string> const& value);
    bool urlIsSet() const;
    void unsetUrl();
    /// <summary>
    /// The conversion tag ID, or the Pinterest tag ID, that you use on your website. For VISITOR &#x60;audience_type&#x60;.
    /// </summary>
    std::string getVisitorSourceId() const;
    void setVisitorSourceId(std::string const& value);
    bool visitorSourceIdIsSet() const;
    void unsetVisitor_source_id();
    /// <summary>
    /// Optional for VISITOR. You can use it as a {&#39;&#x3D;&#39;: [value]}. Supported values are: web, mobile, offline
    /// </summary>
    nlohmann::json getEventSource() const;
    void setEventSource(nlohmann::json const& value);
    bool eventSourceIsSet() const;
    void unsetEvent_source();
    /// <summary>
    /// Optional for VISITOR. You can use it as a {&#39;&#x3D;&#39;: [value]}. Supported values are: tag, mmp, file_upload, conversions_api
    /// </summary>
    nlohmann::json getIngestionSource() const;
    void setIngestionSource(nlohmann::json const& value);
    bool ingestionSourceIsSet() const;
    void unsetIngestion_source();
    /// <summary>
    /// Optional for ENGAGEMENT. Engager type value should be 1-2.
    /// </summary>
    int32_t getEngagerType() const;
    void setEngagerType(int32_t const value);
    bool engagerTypeIsSet() const;
    void unsetEngager_type();
    /// <summary>
    /// Campaign ID for engagement audience filter.
    /// </summary>
    std::vector<std::string> getCampaignId() const;
    void setCampaignId(std::vector<std::string> const& value);
    bool campaignIdIsSet() const;
    void unsetCampaign_id();
    /// <summary>
    /// Ad ID for engagement audience filter.
    /// </summary>
    std::vector<std::string> getAdId() const;
    void setAdId(std::vector<std::string> const& value);
    bool adIdIsSet() const;
    void unsetAd_id();
    /// <summary>
    /// Objective for engagement audience filter.
    /// </summary>
    std::vector<org::openapitools::server::model::ObjectiveType> getObjectiveType() const;
    void setObjectiveType(std::vector<org::openapitools::server::model::ObjectiveType> const& value);
    bool objectiveTypeIsSet() const;
    void unsetObjective_type();
    /// <summary>
    /// Ad account ID.
    /// </summary>
    std::string getAdAccountId() const;
    void setAdAccountId(std::string const& value);
    bool adAccountIdIsSet() const;
    void unsetAd_account_id();

    friend  void to_json(nlohmann::json& j, const AudienceRule& o);
    friend  void from_json(const nlohmann::json& j, AudienceRule& o);
protected:
    std::string m_Country;
    bool m_CountryIsSet;
    std::string m_Customer_list_id;
    bool m_Customer_list_idIsSet;
    std::vector<std::string> m_Engagement_domain;
    bool m_Engagement_domainIsSet;
    std::string m_Engagement_type;
    bool m_Engagement_typeIsSet;
    std::string m_Event;
    bool m_EventIsSet;
    org::openapitools::server::model::PinterestTagEventData m_Event_data;
    bool m_Event_dataIsSet;
    int32_t m_Percentage;
    bool m_PercentageIsSet;
    std::vector<std::string> m_Pin_id;
    bool m_Pin_idIsSet;
    bool m_Prefill;
    bool m_PrefillIsSet;
    int32_t m_Retention_days;
    bool m_Retention_daysIsSet;
    std::vector<std::string> m_Seed_id;
    bool m_Seed_idIsSet;
    std::vector<std::string> m_Url;
    bool m_UrlIsSet;
    std::string m_Visitor_source_id;
    bool m_Visitor_source_idIsSet;
    nlohmann::json m_Event_source;
    bool m_Event_sourceIsSet;
    nlohmann::json m_Ingestion_source;
    bool m_Ingestion_sourceIsSet;
    int32_t m_Engager_type;
    bool m_Engager_typeIsSet;
    std::vector<std::string> m_Campaign_id;
    bool m_Campaign_idIsSet;
    std::vector<std::string> m_Ad_id;
    bool m_Ad_idIsSet;
    std::vector<org::openapitools::server::model::ObjectiveType> m_Objective_type;
    bool m_Objective_typeIsSet;
    std::string m_Ad_account_id;
    bool m_Ad_account_idIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* AudienceRule_H_ */
