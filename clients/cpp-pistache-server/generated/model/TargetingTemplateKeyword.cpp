/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "TargetingTemplateKeyword.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

TargetingTemplateKeyword::TargetingTemplateKeyword()
{
    m_Match_typeIsSet = false;
    m_Value = "";
    m_ValueIsSet = false;
    
}

void TargetingTemplateKeyword::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool TargetingTemplateKeyword::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool TargetingTemplateKeyword::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "TargetingTemplateKeyword" : pathPrefix;

            
    return success;
}

bool TargetingTemplateKeyword::operator==(const TargetingTemplateKeyword& rhs) const
{
    return
    
    
    
    ((!matchTypeIsSet() && !rhs.matchTypeIsSet()) || (matchTypeIsSet() && rhs.matchTypeIsSet() && getMatchType() == rhs.getMatchType())) &&
    
    
    ((!valueIsSet() && !rhs.valueIsSet()) || (valueIsSet() && rhs.valueIsSet() && getValue() == rhs.getValue()))
    
    ;
}

bool TargetingTemplateKeyword::operator!=(const TargetingTemplateKeyword& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const TargetingTemplateKeyword& o)
{
    j = nlohmann::json::object();
    if(o.matchTypeIsSet())
        j["match_type"] = o.m_Match_type;
    if(o.valueIsSet())
        j["value"] = o.m_Value;
    
}

void from_json(const nlohmann::json& j, TargetingTemplateKeyword& o)
{
    if(j.find("match_type") != j.end())
    {
        j.at("match_type").get_to(o.m_Match_type);
        o.m_Match_typeIsSet = true;
    } 
    if(j.find("value") != j.end())
    {
        j.at("value").get_to(o.m_Value);
        o.m_ValueIsSet = true;
    } 
    
}

org::openapitools::server::model::MatchType TargetingTemplateKeyword::getMatchType() const
{
    return m_Match_type;
}
void TargetingTemplateKeyword::setMatchType(org::openapitools::server::model::MatchType const& value)
{
    m_Match_type = value;
    m_Match_typeIsSet = true;
}
bool TargetingTemplateKeyword::matchTypeIsSet() const
{
    return m_Match_typeIsSet;
}
void TargetingTemplateKeyword::unsetMatch_type()
{
    m_Match_typeIsSet = false;
}
std::string TargetingTemplateKeyword::getValue() const
{
    return m_Value;
}
void TargetingTemplateKeyword::setValue(std::string const& value)
{
    m_Value = value;
    m_ValueIsSet = true;
}
bool TargetingTemplateKeyword::valueIsSet() const
{
    return m_ValueIsSet;
}
void TargetingTemplateKeyword::unsetValue()
{
    m_ValueIsSet = false;
}


} // namespace org::openapitools::server::model

