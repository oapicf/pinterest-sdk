/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "DeletePartnerAssetsResult.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

DeletePartnerAssetsResult::DeletePartnerAssetsResult()
{
    m_Asset_id = "";
    m_Asset_idIsSet = false;
    m_Asset_type = "";
    m_Asset_typeIsSet = false;
    m_PermissionsIsSet = false;
    m_Is_shared_partner = false;
    m_Is_shared_partnerIsSet = false;
    m_Partner_id = "";
    m_Partner_idIsSet = false;
    
}

void DeletePartnerAssetsResult::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool DeletePartnerAssetsResult::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool DeletePartnerAssetsResult::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "DeletePartnerAssetsResult" : pathPrefix;

         
    if (assetIdIsSet())
    {
        const std::string& value = m_Asset_id;
        const std::string currentValuePath = _pathPrefix + ".assetId";
                
        

    }
             
    if (permissionsIsSet())
    {
        const std::vector<std::string>& value = m_Permissions;
        const std::string currentValuePath = _pathPrefix + ".permissions";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const std::string& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }

    }
             
    if (partnerIdIsSet())
    {
        const std::string& value = m_Partner_id;
        const std::string currentValuePath = _pathPrefix + ".partnerId";
                
        

    }
    
    return success;
}

bool DeletePartnerAssetsResult::operator==(const DeletePartnerAssetsResult& rhs) const
{
    return
    
    
    
    ((!assetIdIsSet() && !rhs.assetIdIsSet()) || (assetIdIsSet() && rhs.assetIdIsSet() && getAssetId() == rhs.getAssetId())) &&
    
    
    ((!assetTypeIsSet() && !rhs.assetTypeIsSet()) || (assetTypeIsSet() && rhs.assetTypeIsSet() && getAssetType() == rhs.getAssetType())) &&
    
    
    ((!permissionsIsSet() && !rhs.permissionsIsSet()) || (permissionsIsSet() && rhs.permissionsIsSet() && getPermissions() == rhs.getPermissions())) &&
    
    
    ((!isSharedPartnerIsSet() && !rhs.isSharedPartnerIsSet()) || (isSharedPartnerIsSet() && rhs.isSharedPartnerIsSet() && isIsSharedPartner() == rhs.isIsSharedPartner())) &&
    
    
    ((!partnerIdIsSet() && !rhs.partnerIdIsSet()) || (partnerIdIsSet() && rhs.partnerIdIsSet() && getPartnerId() == rhs.getPartnerId()))
    
    ;
}

bool DeletePartnerAssetsResult::operator!=(const DeletePartnerAssetsResult& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const DeletePartnerAssetsResult& o)
{
    j = nlohmann::json::object();
    if(o.assetIdIsSet())
        j["asset_id"] = o.m_Asset_id;
    if(o.assetTypeIsSet())
        j["asset_type"] = o.m_Asset_type;
    if(o.permissionsIsSet() || !o.m_Permissions.empty())
        j["permissions"] = o.m_Permissions;
    if(o.isSharedPartnerIsSet())
        j["is_shared_partner"] = o.m_Is_shared_partner;
    if(o.partnerIdIsSet())
        j["partner_id"] = o.m_Partner_id;
    
}

void from_json(const nlohmann::json& j, DeletePartnerAssetsResult& o)
{
    if(j.find("asset_id") != j.end())
    {
        j.at("asset_id").get_to(o.m_Asset_id);
        o.m_Asset_idIsSet = true;
    } 
    if(j.find("asset_type") != j.end())
    {
        j.at("asset_type").get_to(o.m_Asset_type);
        o.m_Asset_typeIsSet = true;
    } 
    if(j.find("permissions") != j.end())
    {
        j.at("permissions").get_to(o.m_Permissions);
        o.m_PermissionsIsSet = true;
    } 
    if(j.find("is_shared_partner") != j.end())
    {
        j.at("is_shared_partner").get_to(o.m_Is_shared_partner);
        o.m_Is_shared_partnerIsSet = true;
    } 
    if(j.find("partner_id") != j.end())
    {
        j.at("partner_id").get_to(o.m_Partner_id);
        o.m_Partner_idIsSet = true;
    } 
    
}

std::string DeletePartnerAssetsResult::getAssetId() const
{
    return m_Asset_id;
}
void DeletePartnerAssetsResult::setAssetId(std::string const& value)
{
    m_Asset_id = value;
    m_Asset_idIsSet = true;
}
bool DeletePartnerAssetsResult::assetIdIsSet() const
{
    return m_Asset_idIsSet;
}
void DeletePartnerAssetsResult::unsetAsset_id()
{
    m_Asset_idIsSet = false;
}
std::string DeletePartnerAssetsResult::getAssetType() const
{
    return m_Asset_type;
}
void DeletePartnerAssetsResult::setAssetType(std::string const& value)
{
    m_Asset_type = value;
    m_Asset_typeIsSet = true;
}
bool DeletePartnerAssetsResult::assetTypeIsSet() const
{
    return m_Asset_typeIsSet;
}
void DeletePartnerAssetsResult::unsetAsset_type()
{
    m_Asset_typeIsSet = false;
}
std::vector<std::string> DeletePartnerAssetsResult::getPermissions() const
{
    return m_Permissions;
}
void DeletePartnerAssetsResult::setPermissions(std::vector<std::string> const& value)
{
    m_Permissions = value;
    m_PermissionsIsSet = true;
}
bool DeletePartnerAssetsResult::permissionsIsSet() const
{
    return m_PermissionsIsSet;
}
void DeletePartnerAssetsResult::unsetPermissions()
{
    m_PermissionsIsSet = false;
}
bool DeletePartnerAssetsResult::isIsSharedPartner() const
{
    return m_Is_shared_partner;
}
void DeletePartnerAssetsResult::setIsSharedPartner(bool const value)
{
    m_Is_shared_partner = value;
    m_Is_shared_partnerIsSet = true;
}
bool DeletePartnerAssetsResult::isSharedPartnerIsSet() const
{
    return m_Is_shared_partnerIsSet;
}
void DeletePartnerAssetsResult::unsetIs_shared_partner()
{
    m_Is_shared_partnerIsSet = false;
}
std::string DeletePartnerAssetsResult::getPartnerId() const
{
    return m_Partner_id;
}
void DeletePartnerAssetsResult::setPartnerId(std::string const& value)
{
    m_Partner_id = value;
    m_Partner_idIsSet = true;
}
bool DeletePartnerAssetsResult::partnerIdIsSet() const
{
    return m_Partner_idIsSet;
}
void DeletePartnerAssetsResult::unsetPartner_id()
{
    m_Partner_idIsSet = false;
}


} // namespace org::openapitools::server::model

