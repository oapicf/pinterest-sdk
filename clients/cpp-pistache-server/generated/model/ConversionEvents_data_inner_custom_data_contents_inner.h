/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * ConversionEvents_data_inner_custom_data_contents_inner.h
 *
 * 
 */

#ifndef ConversionEvents_data_inner_custom_data_contents_inner_H_
#define ConversionEvents_data_inner_custom_data_contents_inner_H_


#include <string>
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// 
/// </summary>
class  ConversionEvents_data_inner_custom_data_contents_inner
{
public:
    ConversionEvents_data_inner_custom_data_contents_inner();
    virtual ~ConversionEvents_data_inner_custom_data_contents_inner() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const ConversionEvents_data_inner_custom_data_contents_inner& rhs) const;
    bool operator!=(const ConversionEvents_data_inner_custom_data_contents_inner& rhs) const;

    /////////////////////////////////////////////
    /// ConversionEvents_data_inner_custom_data_contents_inner members

    /// <summary>
    /// The id of a product. We recommend using this if you are a merchant for AddToCart and Checkouts. For detail, please check &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/before-you-get-started-with-catalogs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;here&lt;/a&gt; (Install the Pinterest tag section).
    /// </summary>
    std::string getId() const;
    void setId(std::string const& value);
    bool idIsSet() const;
    void unsetId();
    /// <summary>
    /// The price of a product. Accepted as a string in the request; it will be parsed into a double. This is the original item value before any discount. We recommend using this if you are a merchant for PageVisit, AddToCart and Checkouts. For detail, please check &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/before-you-get-started-with-catalogs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;here&lt;/a&gt; (Install the Pinterest tag section).
    /// </summary>
    std::string getItemPrice() const;
    void setItemPrice(std::string const& value);
    bool itemPriceIsSet() const;
    void unsetItem_price();
    /// <summary>
    /// The amount of a product. We recommend using this if you are a merchant for AddToCart and Checkouts. For detail, please check &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/before-you-get-started-with-catalogs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;here&lt;/a&gt; (Install the Pinterest tag section).
    /// </summary>
    int64_t getQuantity() const;
    void setQuantity(int64_t const value);
    bool quantityIsSet() const;
    void unsetQuantity();
    /// <summary>
    /// The name of a product.
    /// </summary>
    std::string getItemName() const;
    void setItemName(std::string const& value);
    bool itemNameIsSet() const;
    void unsetItem_name();
    /// <summary>
    /// The category of a product.
    /// </summary>
    std::string getItemCategory() const;
    void setItemCategory(std::string const& value);
    bool itemCategoryIsSet() const;
    void unsetItem_category();
    /// <summary>
    /// The brand of a product.
    /// </summary>
    std::string getItemBrand() const;
    void setItemBrand(std::string const& value);
    bool itemBrandIsSet() const;
    void unsetItem_brand();

    friend  void to_json(nlohmann::json& j, const ConversionEvents_data_inner_custom_data_contents_inner& o);
    friend  void from_json(const nlohmann::json& j, ConversionEvents_data_inner_custom_data_contents_inner& o);
protected:
    std::string m_Id;
    bool m_IdIsSet;
    std::string m_Item_price;
    bool m_Item_priceIsSet;
    int64_t m_Quantity;
    bool m_QuantityIsSet;
    std::string m_Item_name;
    bool m_Item_nameIsSet;
    std::string m_Item_category;
    bool m_Item_categoryIsSet;
    std::string m_Item_brand;
    bool m_Item_brandIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* ConversionEvents_data_inner_custom_data_contents_inner_H_ */
