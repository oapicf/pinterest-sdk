/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * LeadFormCommon.h
 *
 * Creation fields
 */

#ifndef LeadFormCommon_H_
#define LeadFormCommon_H_


#include "LeadFormStatus.h"
#include <string>
#include "LeadFormCommon_policy_links_inner.h"
#include "LeadFormQuestion.h"
#include <vector>
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// Creation fields
/// </summary>
class  LeadFormCommon
{
public:
    LeadFormCommon();
    virtual ~LeadFormCommon() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const LeadFormCommon& rhs) const;
    bool operator!=(const LeadFormCommon& rhs) const;

    /////////////////////////////////////////////
    /// LeadFormCommon members

    /// <summary>
    /// Internal name of the lead form.
    /// </summary>
    std::string getName() const;
    void setName(std::string const& value);
    bool nameIsSet() const;
    void unsetName();
    /// <summary>
    /// A link to the advertiser&#39;s privacy policy. This will be included in the lead form&#39;s disclosure language.
    /// </summary>
    std::string getPrivacyPolicyLink() const;
    void setPrivacyPolicyLink(std::string const& value);
    bool privacyPolicyLinkIsSet() const;
    void unsetPrivacy_policy_link();
    /// <summary>
    /// Whether the advertiser has accepted Pinterest&#39;s terms of service for creating a lead ad.  By sending us TRUE for this parameter, you agree that (i) you will use any personal information received in compliance with the privacy policy you share with Pinterest, and (ii) you will comply with Pinterest&#39;s &lt;a href&#x3D;\&quot;https://policy.pinterest.com/en/lead-ad-terms\&quot;&gt;Lead Ad Terms&lt;/a&gt;. As a reminder, all advertising on Pinterest is subject to the &lt;a href&#x3D;\&quot;https://business.pinterest.com/en/pinterest-advertising-services-agreement/\&quot;&gt;Pinterest Advertising Services Agreement&lt;/a&gt; or an equivalent agreement as set forth on an IO
    /// </summary>
    bool isHasAcceptedTerms() const;
    void setHasAcceptedTerms(bool const value);
    bool hasAcceptedTermsIsSet() const;
    void unsetHas_accepted_terms();
    /// <summary>
    /// A message for people who complete the form to let them know what happens next.
    /// </summary>
    std::string getCompletionMessage() const;
    void setCompletionMessage(std::string const& value);
    bool completionMessageIsSet() const;
    void unsetCompletion_message();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::LeadFormStatus getStatus() const;
    void setStatus(org::openapitools::server::model::LeadFormStatus const& value);
    bool statusIsSet() const;
    void unsetStatus();
    /// <summary>
    /// Additional disclosure language to be included in the lead form.
    /// </summary>
    std::string getDisclosureLanguage() const;
    void setDisclosureLanguage(std::string const& value);
    bool disclosureLanguageIsSet() const;
    void unsetDisclosure_language();
    /// <summary>
    /// List of questions to be displayed on the lead form.
    /// </summary>
    std::vector<org::openapitools::server::model::LeadFormQuestion> getQuestions() const;
    void setQuestions(std::vector<org::openapitools::server::model::LeadFormQuestion> const& value);
    bool questionsIsSet() const;
    void unsetQuestions();
    /// <summary>
    /// List of additional policy links to be displayed on the lead form.
    /// </summary>
    std::vector<org::openapitools::server::model::LeadFormCommon_policy_links_inner> getPolicyLinks() const;
    void setPolicyLinks(std::vector<org::openapitools::server::model::LeadFormCommon_policy_links_inner> const& value);
    bool policyLinksIsSet() const;
    void unsetPolicy_links();

    friend  void to_json(nlohmann::json& j, const LeadFormCommon& o);
    friend  void from_json(const nlohmann::json& j, LeadFormCommon& o);
protected:
    std::string m_Name;
    bool m_NameIsSet;
    std::string m_Privacy_policy_link;
    bool m_Privacy_policy_linkIsSet;
    bool m_Has_accepted_terms;
    bool m_Has_accepted_termsIsSet;
    std::string m_Completion_message;
    bool m_Completion_messageIsSet;
    org::openapitools::server::model::LeadFormStatus m_Status;
    bool m_StatusIsSet;
    std::string m_Disclosure_language;
    bool m_Disclosure_languageIsSet;
    std::vector<org::openapitools::server::model::LeadFormQuestion> m_Questions;
    bool m_QuestionsIsSet;
    std::vector<org::openapitools::server::model::LeadFormCommon_policy_links_inner> m_Policy_links;
    bool m_Policy_linksIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* LeadFormCommon_H_ */
