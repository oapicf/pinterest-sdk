/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "UpdateAssetGroupResponse.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

UpdateAssetGroupResponse::UpdateAssetGroupResponse()
{
    m_Updated_asset_groupsIsSet = false;
    m_ExceptionsIsSet = false;
    
}

void UpdateAssetGroupResponse::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool UpdateAssetGroupResponse::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool UpdateAssetGroupResponse::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "UpdateAssetGroupResponse" : pathPrefix;

         
    if (updatedAssetGroupsIsSet())
    {
        const std::vector<org::openapitools::server::model::AssetGroupBinding>& value = m_Updated_asset_groups;
        const std::string currentValuePath = _pathPrefix + ".updatedAssetGroups";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::AssetGroupBinding& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".updatedAssetGroups") && success;
 
                i++;
            }
        }

    }
         
    if (exceptionsIsSet())
    {
        const std::vector<org::openapitools::server::model::UpdateAssetGroupResponse_exceptions_inner>& value = m_Exceptions;
        const std::string currentValuePath = _pathPrefix + ".exceptions";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::UpdateAssetGroupResponse_exceptions_inner& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".exceptions") && success;
 
                i++;
            }
        }

    }
    
    return success;
}

bool UpdateAssetGroupResponse::operator==(const UpdateAssetGroupResponse& rhs) const
{
    return
    
    
    
    ((!updatedAssetGroupsIsSet() && !rhs.updatedAssetGroupsIsSet()) || (updatedAssetGroupsIsSet() && rhs.updatedAssetGroupsIsSet() && getUpdatedAssetGroups() == rhs.getUpdatedAssetGroups())) &&
    
    
    ((!exceptionsIsSet() && !rhs.exceptionsIsSet()) || (exceptionsIsSet() && rhs.exceptionsIsSet() && getExceptions() == rhs.getExceptions()))
    
    ;
}

bool UpdateAssetGroupResponse::operator!=(const UpdateAssetGroupResponse& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const UpdateAssetGroupResponse& o)
{
    j = nlohmann::json::object();
    if(o.updatedAssetGroupsIsSet() || !o.m_Updated_asset_groups.empty())
        j["updated_asset_groups"] = o.m_Updated_asset_groups;
    if(o.exceptionsIsSet() || !o.m_Exceptions.empty())
        j["exceptions"] = o.m_Exceptions;
    
}

void from_json(const nlohmann::json& j, UpdateAssetGroupResponse& o)
{
    if(j.find("updated_asset_groups") != j.end())
    {
        j.at("updated_asset_groups").get_to(o.m_Updated_asset_groups);
        o.m_Updated_asset_groupsIsSet = true;
    } 
    if(j.find("exceptions") != j.end())
    {
        j.at("exceptions").get_to(o.m_Exceptions);
        o.m_ExceptionsIsSet = true;
    } 
    
}

std::vector<org::openapitools::server::model::AssetGroupBinding> UpdateAssetGroupResponse::getUpdatedAssetGroups() const
{
    return m_Updated_asset_groups;
}
void UpdateAssetGroupResponse::setUpdatedAssetGroups(std::vector<org::openapitools::server::model::AssetGroupBinding> const& value)
{
    m_Updated_asset_groups = value;
    m_Updated_asset_groupsIsSet = true;
}
bool UpdateAssetGroupResponse::updatedAssetGroupsIsSet() const
{
    return m_Updated_asset_groupsIsSet;
}
void UpdateAssetGroupResponse::unsetUpdated_asset_groups()
{
    m_Updated_asset_groupsIsSet = false;
}
std::vector<org::openapitools::server::model::UpdateAssetGroupResponse_exceptions_inner> UpdateAssetGroupResponse::getExceptions() const
{
    return m_Exceptions;
}
void UpdateAssetGroupResponse::setExceptions(std::vector<org::openapitools::server::model::UpdateAssetGroupResponse_exceptions_inner> const& value)
{
    m_Exceptions = value;
    m_ExceptionsIsSet = true;
}
bool UpdateAssetGroupResponse::exceptionsIsSet() const
{
    return m_ExceptionsIsSet;
}
void UpdateAssetGroupResponse::unsetExceptions()
{
    m_ExceptionsIsSet = false;
}


} // namespace org::openapitools::server::model

