/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * TrendingKeywordsResponse_trends_inner_time_series.h
 *
 * A sequence of weekly observations of the relative search volume for this keyword over the past year.&lt;br /&gt; These values are normalized to a [0-100] range, and can be used to visualize the history of user interest in this keyword. By default, normalization is applied independently to the time series of each keyword, but the &#x60;normalize_against_group&#x60; query parameter can be used in cases where you wish to compare relative volume between keywords.&lt;br /&gt; **Note**: The date of each observation is in ISO-8601 format and represents the *end* of the week.  For example, a value of &#x60;2023-10-31&#x60; would include searches that happened between &#x60;2023-10-25&#x60; and &#x60;2023-10-31&#x60;.
 */

#ifndef TrendingKeywordsResponse_trends_inner_time_series_H_
#define TrendingKeywordsResponse_trends_inner_time_series_H_


#include <string>
#include <map>
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// A sequence of weekly observations of the relative search volume for this keyword over the past year.&lt;br /&gt; These values are normalized to a [0-100] range, and can be used to visualize the history of user interest in this keyword. By default, normalization is applied independently to the time series of each keyword, but the &#x60;normalize_against_group&#x60; query parameter can be used in cases where you wish to compare relative volume between keywords.&lt;br /&gt; **Note**: The date of each observation is in ISO-8601 format and represents the *end* of the week.  For example, a value of &#x60;2023-10-31&#x60; would include searches that happened between &#x60;2023-10-25&#x60; and &#x60;2023-10-31&#x60;.
/// </summary>
class  TrendingKeywordsResponse_trends_inner_time_series
{
public:
    TrendingKeywordsResponse_trends_inner_time_series();
    virtual ~TrendingKeywordsResponse_trends_inner_time_series() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const TrendingKeywordsResponse_trends_inner_time_series& rhs) const;
    bool operator!=(const TrendingKeywordsResponse_trends_inner_time_series& rhs) const;

    /////////////////////////////////////////////
    /// TrendingKeywordsResponse_trends_inner_time_series members

    /// <summary>
    /// 
    /// </summary>
    std::string getDate() const;
    void setDate(std::string const& value);
    bool dateIsSet() const;
    void unsetdate();

    friend  void to_json(nlohmann::json& j, const TrendingKeywordsResponse_trends_inner_time_series& o);
    friend  void from_json(const nlohmann::json& j, TrendingKeywordsResponse_trends_inner_time_series& o);
protected:
    std::string m_date;
    bool m_dateIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* TrendingKeywordsResponse_trends_inner_time_series_H_ */
