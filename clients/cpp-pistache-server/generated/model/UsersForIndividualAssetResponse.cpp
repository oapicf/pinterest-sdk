/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "UsersForIndividualAssetResponse.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

UsersForIndividualAssetResponse::UsersForIndividualAssetResponse()
{
    m_Asset_id = "";
    m_Asset_idIsSet = false;
    m_Member_id = "";
    m_Member_idIsSet = false;
    m_PermissionsIsSet = false;
    
}

void UsersForIndividualAssetResponse::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool UsersForIndividualAssetResponse::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool UsersForIndividualAssetResponse::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "UsersForIndividualAssetResponse" : pathPrefix;

         
    if (assetIdIsSet())
    {
        const std::string& value = m_Asset_id;
        const std::string currentValuePath = _pathPrefix + ".assetId";
                
        

    }
         
    if (memberIdIsSet())
    {
        const std::string& value = m_Member_id;
        const std::string currentValuePath = _pathPrefix + ".memberId";
                
        

    }
         
    if (permissionsIsSet())
    {
        const std::vector<std::string>& value = m_Permissions;
        const std::string currentValuePath = _pathPrefix + ".permissions";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const std::string& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }

    }
    
    return success;
}

bool UsersForIndividualAssetResponse::operator==(const UsersForIndividualAssetResponse& rhs) const
{
    return
    
    
    
    ((!assetIdIsSet() && !rhs.assetIdIsSet()) || (assetIdIsSet() && rhs.assetIdIsSet() && getAssetId() == rhs.getAssetId())) &&
    
    
    ((!memberIdIsSet() && !rhs.memberIdIsSet()) || (memberIdIsSet() && rhs.memberIdIsSet() && getMemberId() == rhs.getMemberId())) &&
    
    
    ((!permissionsIsSet() && !rhs.permissionsIsSet()) || (permissionsIsSet() && rhs.permissionsIsSet() && getPermissions() == rhs.getPermissions()))
    
    ;
}

bool UsersForIndividualAssetResponse::operator!=(const UsersForIndividualAssetResponse& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const UsersForIndividualAssetResponse& o)
{
    j = nlohmann::json::object();
    if(o.assetIdIsSet())
        j["asset_id"] = o.m_Asset_id;
    if(o.memberIdIsSet())
        j["member_id"] = o.m_Member_id;
    if(o.permissionsIsSet() || !o.m_Permissions.empty())
        j["permissions"] = o.m_Permissions;
    
}

void from_json(const nlohmann::json& j, UsersForIndividualAssetResponse& o)
{
    if(j.find("asset_id") != j.end())
    {
        j.at("asset_id").get_to(o.m_Asset_id);
        o.m_Asset_idIsSet = true;
    } 
    if(j.find("member_id") != j.end())
    {
        j.at("member_id").get_to(o.m_Member_id);
        o.m_Member_idIsSet = true;
    } 
    if(j.find("permissions") != j.end())
    {
        j.at("permissions").get_to(o.m_Permissions);
        o.m_PermissionsIsSet = true;
    } 
    
}

std::string UsersForIndividualAssetResponse::getAssetId() const
{
    return m_Asset_id;
}
void UsersForIndividualAssetResponse::setAssetId(std::string const& value)
{
    m_Asset_id = value;
    m_Asset_idIsSet = true;
}
bool UsersForIndividualAssetResponse::assetIdIsSet() const
{
    return m_Asset_idIsSet;
}
void UsersForIndividualAssetResponse::unsetAsset_id()
{
    m_Asset_idIsSet = false;
}
std::string UsersForIndividualAssetResponse::getMemberId() const
{
    return m_Member_id;
}
void UsersForIndividualAssetResponse::setMemberId(std::string const& value)
{
    m_Member_id = value;
    m_Member_idIsSet = true;
}
bool UsersForIndividualAssetResponse::memberIdIsSet() const
{
    return m_Member_idIsSet;
}
void UsersForIndividualAssetResponse::unsetMember_id()
{
    m_Member_idIsSet = false;
}
std::vector<std::string> UsersForIndividualAssetResponse::getPermissions() const
{
    return m_Permissions;
}
void UsersForIndividualAssetResponse::setPermissions(std::vector<std::string> const& value)
{
    m_Permissions = value;
    m_PermissionsIsSet = true;
}
bool UsersForIndividualAssetResponse::permissionsIsSet() const
{
    return m_PermissionsIsSet;
}
void UsersForIndividualAssetResponse::unsetPermissions()
{
    m_PermissionsIsSet = false;
}


} // namespace org::openapitools::server::model

