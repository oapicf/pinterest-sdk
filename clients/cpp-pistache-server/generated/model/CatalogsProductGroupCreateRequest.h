/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * CatalogsProductGroupCreateRequest.h
 *
 * Request object for creating a product group.
 */

#ifndef CatalogsProductGroupCreateRequest_H_
#define CatalogsProductGroupCreateRequest_H_


#include "CatalogsProductGroupFiltersRequest.h"
#include <string>
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// Request object for creating a product group.
/// </summary>
class  CatalogsProductGroupCreateRequest
{
public:
    CatalogsProductGroupCreateRequest();
    virtual ~CatalogsProductGroupCreateRequest() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const CatalogsProductGroupCreateRequest& rhs) const;
    bool operator!=(const CatalogsProductGroupCreateRequest& rhs) const;

    /////////////////////////////////////////////
    /// CatalogsProductGroupCreateRequest members

    /// <summary>
    /// 
    /// </summary>
    std::string getName() const;
    void setName(std::string const& value);
    /// <summary>
    /// 
    /// </summary>
    std::string getDescription() const;
    void setDescription(std::string const& value);
    bool descriptionIsSet() const;
    void unsetDescription();
    /// <summary>
    /// boolean indicator of whether the product group is being featured or not
    /// </summary>
    bool isIsFeatured() const;
    void setIsFeatured(bool const value);
    bool isFeaturedIsSet() const;
    void unsetIs_featured();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::CatalogsProductGroupFiltersRequest getFilters() const;
    void setFilters(org::openapitools::server::model::CatalogsProductGroupFiltersRequest const& value);
    /// <summary>
    /// Catalog Feed id pertaining to the catalog product group.
    /// </summary>
    std::string getFeedId() const;
    void setFeedId(std::string const& value);

    friend  void to_json(nlohmann::json& j, const CatalogsProductGroupCreateRequest& o);
    friend  void from_json(const nlohmann::json& j, CatalogsProductGroupCreateRequest& o);
protected:
    std::string m_Name;

    std::string m_Description;
    bool m_DescriptionIsSet;
    bool m_Is_featured;
    bool m_Is_featuredIsSet;
    org::openapitools::server::model::CatalogsProductGroupFiltersRequest m_Filters;

    std::string m_Feed_id;

    
};

} // namespace org::openapitools::server::model

#endif /* CatalogsProductGroupCreateRequest_H_ */
