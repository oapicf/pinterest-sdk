/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "SharedAudienceCommon.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

SharedAudienceCommon::SharedAudienceCommon()
{
    m_Audience_id = "";
    m_Audience_idIsSet = false;
    m_Operation_typeIsSet = false;
    
}

void SharedAudienceCommon::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool SharedAudienceCommon::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool SharedAudienceCommon::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "SharedAudienceCommon" : pathPrefix;

         
    if (audienceIdIsSet())
    {
        const std::string& value = m_Audience_id;
        const std::string currentValuePath = _pathPrefix + ".audienceId";
                
        

    }
        
    return success;
}

bool SharedAudienceCommon::operator==(const SharedAudienceCommon& rhs) const
{
    return
    
    
    
    ((!audienceIdIsSet() && !rhs.audienceIdIsSet()) || (audienceIdIsSet() && rhs.audienceIdIsSet() && getAudienceId() == rhs.getAudienceId())) &&
    
    
    ((!operationTypeIsSet() && !rhs.operationTypeIsSet()) || (operationTypeIsSet() && rhs.operationTypeIsSet() && getOperationType() == rhs.getOperationType()))
    
    ;
}

bool SharedAudienceCommon::operator!=(const SharedAudienceCommon& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const SharedAudienceCommon& o)
{
    j = nlohmann::json::object();
    if(o.audienceIdIsSet())
        j["audience_id"] = o.m_Audience_id;
    if(o.operationTypeIsSet())
        j["operation_type"] = o.m_Operation_type;
    
}

void from_json(const nlohmann::json& j, SharedAudienceCommon& o)
{
    if(j.find("audience_id") != j.end())
    {
        j.at("audience_id").get_to(o.m_Audience_id);
        o.m_Audience_idIsSet = true;
    } 
    if(j.find("operation_type") != j.end())
    {
        j.at("operation_type").get_to(o.m_Operation_type);
        o.m_Operation_typeIsSet = true;
    } 
    
}

std::string SharedAudienceCommon::getAudienceId() const
{
    return m_Audience_id;
}
void SharedAudienceCommon::setAudienceId(std::string const& value)
{
    m_Audience_id = value;
    m_Audience_idIsSet = true;
}
bool SharedAudienceCommon::audienceIdIsSet() const
{
    return m_Audience_idIsSet;
}
void SharedAudienceCommon::unsetAudience_id()
{
    m_Audience_idIsSet = false;
}
org::openapitools::server::model::OperationType SharedAudienceCommon::getOperationType() const
{
    return m_Operation_type;
}
void SharedAudienceCommon::setOperationType(org::openapitools::server::model::OperationType const& value)
{
    m_Operation_type = value;
    m_Operation_typeIsSet = true;
}
bool SharedAudienceCommon::operationTypeIsSet() const
{
    return m_Operation_typeIsSet;
}
void SharedAudienceCommon::unsetOperation_type()
{
    m_Operation_typeIsSet = false;
}


} // namespace org::openapitools::server::model

