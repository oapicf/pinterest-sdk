/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ImageMetadata.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

ImageMetadata::ImageMetadata()
{
    m_Item_type = "";
    m_Item_typeIsSet = false;
    m_Title = "";
    m_TitleIsSet = false;
    m_Description = "";
    m_DescriptionIsSet = false;
    m_Link = "";
    m_LinkIsSet = false;
    m_ImagesIsSet = false;
    
}

void ImageMetadata::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool ImageMetadata::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool ImageMetadata::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "ImageMetadata" : pathPrefix;

                        
    return success;
}

bool ImageMetadata::operator==(const ImageMetadata& rhs) const
{
    return
    
    
    
    ((!itemTypeIsSet() && !rhs.itemTypeIsSet()) || (itemTypeIsSet() && rhs.itemTypeIsSet() && getItemType() == rhs.getItemType())) &&
    
    
    ((!titleIsSet() && !rhs.titleIsSet()) || (titleIsSet() && rhs.titleIsSet() && getTitle() == rhs.getTitle())) &&
    
    
    ((!descriptionIsSet() && !rhs.descriptionIsSet()) || (descriptionIsSet() && rhs.descriptionIsSet() && getDescription() == rhs.getDescription())) &&
    
    
    ((!linkIsSet() && !rhs.linkIsSet()) || (linkIsSet() && rhs.linkIsSet() && getLink() == rhs.getLink())) &&
    
    
    ((!imagesIsSet() && !rhs.imagesIsSet()) || (imagesIsSet() && rhs.imagesIsSet() && getImages() == rhs.getImages()))
    
    ;
}

bool ImageMetadata::operator!=(const ImageMetadata& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const ImageMetadata& o)
{
    j = nlohmann::json::object();
    if(o.itemTypeIsSet())
        j["item_type"] = o.m_Item_type;
    if(o.titleIsSet())
        j["title"] = o.m_Title;
    if(o.descriptionIsSet())
        j["description"] = o.m_Description;
    if(o.linkIsSet())
        j["link"] = o.m_Link;
    if(o.imagesIsSet())
        j["images"] = o.m_Images;
    
}

void from_json(const nlohmann::json& j, ImageMetadata& o)
{
    if(j.find("item_type") != j.end())
    {
        j.at("item_type").get_to(o.m_Item_type);
        o.m_Item_typeIsSet = true;
    } 
    if(j.find("title") != j.end())
    {
        j.at("title").get_to(o.m_Title);
        o.m_TitleIsSet = true;
    } 
    if(j.find("description") != j.end())
    {
        j.at("description").get_to(o.m_Description);
        o.m_DescriptionIsSet = true;
    } 
    if(j.find("link") != j.end())
    {
        j.at("link").get_to(o.m_Link);
        o.m_LinkIsSet = true;
    } 
    if(j.find("images") != j.end())
    {
        j.at("images").get_to(o.m_Images);
        o.m_ImagesIsSet = true;
    } 
    
}

std::string ImageMetadata::getItemType() const
{
    return m_Item_type;
}
void ImageMetadata::setItemType(std::string const& value)
{
    m_Item_type = value;
    m_Item_typeIsSet = true;
}
bool ImageMetadata::itemTypeIsSet() const
{
    return m_Item_typeIsSet;
}
void ImageMetadata::unsetItem_type()
{
    m_Item_typeIsSet = false;
}
std::string ImageMetadata::getTitle() const
{
    return m_Title;
}
void ImageMetadata::setTitle(std::string const& value)
{
    m_Title = value;
    m_TitleIsSet = true;
}
bool ImageMetadata::titleIsSet() const
{
    return m_TitleIsSet;
}
void ImageMetadata::unsetTitle()
{
    m_TitleIsSet = false;
}
std::string ImageMetadata::getDescription() const
{
    return m_Description;
}
void ImageMetadata::setDescription(std::string const& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}
bool ImageMetadata::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}
void ImageMetadata::unsetDescription()
{
    m_DescriptionIsSet = false;
}
std::string ImageMetadata::getLink() const
{
    return m_Link;
}
void ImageMetadata::setLink(std::string const& value)
{
    m_Link = value;
    m_LinkIsSet = true;
}
bool ImageMetadata::linkIsSet() const
{
    return m_LinkIsSet;
}
void ImageMetadata::unsetLink()
{
    m_LinkIsSet = false;
}
org::openapitools::server::model::ImageMetadata_images ImageMetadata::getImages() const
{
    return m_Images;
}
void ImageMetadata::setImages(org::openapitools::server::model::ImageMetadata_images const& value)
{
    m_Images = value;
    m_ImagesIsSet = true;
}
bool ImageMetadata::imagesIsSet() const
{
    return m_ImagesIsSet;
}
void ImageMetadata::unsetImages()
{
    m_ImagesIsSet = false;
}


} // namespace org::openapitools::server::model

