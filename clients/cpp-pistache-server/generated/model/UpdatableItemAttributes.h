/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * UpdatableItemAttributes.h
 *
 * 
 */

#ifndef UpdatableItemAttributes_H_
#define UpdatableItemAttributes_H_


#include <string>
#include <vector>
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// 
/// </summary>
class  UpdatableItemAttributes
{
public:
    UpdatableItemAttributes();
    virtual ~UpdatableItemAttributes() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const UpdatableItemAttributes& rhs) const;
    bool operator!=(const UpdatableItemAttributes& rhs) const;

    /////////////////////////////////////////////
    /// UpdatableItemAttributes members

    /// <summary>
    /// Allows advertisers to specify a separate URL that can be used to track traffic coming from Pinterest shopping ads. Must send full URL including tracking—do not send tracking parameters only. At this time we do not support impression tracking. Must begin with http:// or https://.
    /// </summary>
    std::string getAdLink() const;
    void setAdLink(std::string const& value);
    bool adLinkIsSet() const;
    void unsetAd_link();
    /// <summary>
    /// Set this attribute to TRUE if you&#39;re submitting items that are considered “adult”. These will not be shown on Pinterest.
    /// </summary>
    bool isAdult() const;
    void setAdult(bool const value);
    bool adultIsSet() const;
    void unsetAdult();
    /// <summary>
    /// The age group to apply a demographic range to the product. Must be one of the following values (upper or lowercased): ‘newborn’ , ‘infant’, ‘toddler’, ‘kids’, or ‘adult’.
    /// </summary>
    std::string getAgeGroup() const;
    void setAgeGroup(std::string const& value);
    bool ageGroupIsSet() const;
    void unsetAge_group();
    /// <summary>
    /// The availability of the product. Must be one of the following values (upper or lowercased): ‘in stock’, ‘out of stock’ , ‘preorder’.
    /// </summary>
    std::string getAvailability() const;
    void setAvailability(std::string const& value);
    bool availabilityIsSet() const;
    void unsetAvailability();
    /// <summary>
    /// Average reviews for the item. Can be a number from 1-5.
    /// </summary>
    double getAverageReviewRating() const;
    void setAverageReviewRating(double const value);
    bool averageReviewRatingIsSet() const;
    void unsetAverage_review_rating();
    /// <summary>
    /// The brand of the product.
    /// </summary>
    std::string getBrand() const;
    void setBrand(std::string const& value);
    bool brandIsSet() const;
    void unsetBrand();
    /// <summary>
    /// This attribute is not supported anymore.
    /// </summary>
    bool isCheckoutEnabled() const;
    void setCheckoutEnabled(bool const value);
    bool checkoutEnabledIsSet() const;
    void unsetCheckout_enabled();
    /// <summary>
    /// The primary color of the product.
    /// </summary>
    std::string getColor() const;
    void setColor(std::string const& value);
    bool colorIsSet() const;
    void unsetColor();
    /// <summary>
    /// The condition of the product. Must be one of the following values (upper or lowercased): ‘new’, ‘used’, or ‘refurbished’.
    /// </summary>
    std::string getCondition() const;
    void setCondition(std::string const& value);
    bool conditionIsSet() const;
    void unsetCondition();
    /// <summary>
    /// &lt;p&gt;&lt;&#x3D; 1000 characters&lt;/p&gt; &lt;p&gt;Custom grouping of products.&lt;/p&gt;
    /// </summary>
    std::string getCustomLabel0() const;
    void setCustomLabel0(std::string const& value);
    bool customLabel0IsSet() const;
    void unsetCustom_label_0();
    /// <summary>
    /// &lt;p&gt;&lt;&#x3D; 1000 characters&lt;/p&gt; &lt;p&gt;Custom grouping of products.&lt;/p&gt;
    /// </summary>
    std::string getCustomLabel1() const;
    void setCustomLabel1(std::string const& value);
    bool customLabel1IsSet() const;
    void unsetCustom_label_1();
    /// <summary>
    /// &lt;p&gt;&lt;&#x3D; 1000 characters&lt;/p&gt; &lt;p&gt;Custom grouping of products.&lt;/p&gt;
    /// </summary>
    std::string getCustomLabel2() const;
    void setCustomLabel2(std::string const& value);
    bool customLabel2IsSet() const;
    void unsetCustom_label_2();
    /// <summary>
    /// &lt;p&gt;&lt;&#x3D; 1000 characters&lt;/p&gt; &lt;p&gt;Custom grouping of products.&lt;/p&gt;
    /// </summary>
    std::string getCustomLabel3() const;
    void setCustomLabel3(std::string const& value);
    bool customLabel3IsSet() const;
    void unsetCustom_label_3();
    /// <summary>
    /// &lt;p&gt;&lt;&#x3D; 1000 characters&lt;/p&gt; &lt;p&gt;Custom grouping of products.&lt;/p&gt;
    /// </summary>
    std::string getCustomLabel4() const;
    void setCustomLabel4(std::string const& value);
    bool customLabel4IsSet() const;
    void unsetCustom_label_4();
    /// <summary>
    /// &lt;p&gt;&lt;&#x3D; 10000 characters&lt;/p&gt; &lt;p&gt;The description of the product.&lt;/p&gt;
    /// </summary>
    std::string getDescription() const;
    void setDescription(std::string const& value);
    bool descriptionIsSet() const;
    void unsetDescription();
    /// <summary>
    /// The item is free to ship.
    /// </summary>
    bool isFreeShippingLabel() const;
    void setFreeShippingLabel(bool const value);
    bool freeShippingLabelIsSet() const;
    void unsetFree_shipping_label();
    /// <summary>
    /// The minimum order purchase necessary for the customer to get free shipping. Only relevant if free shipping is offered.
    /// </summary>
    std::string getFreeShippingLimit() const;
    void setFreeShippingLimit(std::string const& value);
    bool freeShippingLimitIsSet() const;
    void unsetFree_shipping_limit();
    /// <summary>
    /// The gender associated with the product. Must be one of the following values (upper or lowercased): ‘male’, ‘female’ , or ‘unisex’.
    /// </summary>
    std::string getGender() const;
    void setGender(std::string const& value);
    bool genderIsSet() const;
    void unsetGender();
    /// <summary>
    /// The categorization of the product based on the standardized Google Product Taxonomy. This is a set taxonomy. Both the text values and numeric codes are accepted.
    /// </summary>
    std::string getGoogleProductCategory() const;
    void setGoogleProductCategory(std::string const& value);
    bool googleProductCategoryIsSet() const;
    void unsetGoogle_product_category();
    /// <summary>
    /// The unique universal product identifier.
    /// </summary>
    int32_t getGtin() const;
    void setGtin(int32_t const value);
    bool gtinIsSet() const;
    void unsetGtin();
    /// <summary>
    /// &lt;p&gt;&lt;&#x3D; 127 characters&lt;/p&gt; &lt;p&gt;The user-created unique ID that represents the product. Only Unicode characters are accepted.&lt;/p&gt;
    /// </summary>
    std::string getId() const;
    void setId(std::string const& value);
    bool idIsSet() const;
    void unsetId();
    /// <summary>
    /// &lt;p&gt;&lt;&#x3D; 127 characters&lt;/p&gt; &lt;p&gt;The parent ID of the product.&lt;/p&gt;
    /// </summary>
    std::string getItemGroupId() const;
    void setItemGroupId(std::string const& value);
    bool itemGroupIdIsSet() const;
    void unsetItem_group_id();
    /// <summary>
    /// The millisecond timestamp when the item was lastly modified by the merchant.
    /// </summary>
    int64_t getLastUpdatedTime() const;
    void setLastUpdatedTime(int64_t const value);
    bool lastUpdatedTimeIsSet() const;
    void unsetLast_updated_time();
    /// <summary>
    /// &lt;p&gt;&lt;&#x3D; 511 characters&lt;/p&gt; &lt;p&gt;The landing page for the product.&lt;/p&gt;
    /// </summary>
    std::string getLink() const;
    void setLink(std::string const& value);
    bool linkIsSet() const;
    void unsetLink();
    /// <summary>
    /// The material used to make the product.
    /// </summary>
    std::string getMaterial() const;
    void setMaterial(std::string const& value);
    bool materialIsSet() const;
    void unsetMaterial();
    /// <summary>
    /// The minimum advertised price of the product. It supports the following formats, \&quot;19.99 USD\&quot;, \&quot;19.99USD\&quot; and \&quot;19.99\&quot;. If the currency is not included, we default to US dollars.
    /// </summary>
    std::string getMinAdPrice() const;
    void setMinAdPrice(std::string const& value);
    bool minAdPriceIsSet() const;
    void unsetMin_ad_price();
    /// <summary>
    /// The mobile-optimized version of your landing page. Must begin with http:// or https://.
    /// </summary>
    std::string getMobileLink() const;
    void setMobileLink(std::string const& value);
    bool mobileLinkIsSet() const;
    void unsetMobile_link();
    /// <summary>
    /// Manufacturer Part Number are alpha-numeric codes created by the manufacturer of a product to uniquely identify it among all products from the same manufacturer.
    /// </summary>
    std::string getMpn() const;
    void setMpn(std::string const& value);
    bool mpnIsSet() const;
    void unsetMpn();
    /// <summary>
    /// The number of ratings for the item.
    /// </summary>
    int32_t getNumberOfRatings() const;
    void setNumberOfRatings(int32_t const value);
    bool numberOfRatingsIsSet() const;
    void unsetNumber_of_ratings();
    /// <summary>
    /// The number of reviews available for the item.
    /// </summary>
    int32_t getNumberOfReviews() const;
    void setNumberOfReviews(int32_t const value);
    bool numberOfReviewsIsSet() const;
    void unsetNumber_of_reviews();
    /// <summary>
    /// The description of the pattern used for the product.
    /// </summary>
    std::string getPattern() const;
    void setPattern(std::string const& value);
    bool patternIsSet() const;
    void unsetPattern();
    /// <summary>
    /// The price of the product. It supports the following formats, \&quot;24.99 USD\&quot;, \&quot;24.99USD\&quot; and \&quot;24.99\&quot;. If the currency is not included, we default to US dollars.
    /// </summary>
    std::string getPrice() const;
    void setPrice(std::string const& value);
    bool priceIsSet() const;
    void unsetPrice();
    /// <summary>
    /// &lt;p&gt;&lt;&#x3D; 1000 characters&lt;/p&gt; &lt;p&gt;The categorization of your product based on your custom product taxonomy. Subcategories must be sent separated by “ &gt; “. The &gt; must be wrapped by spaces. We do not recognize any other delimiters such as comma or pipe.&lt;/p&gt;
    /// </summary>
    std::string getProductType() const;
    void setProductType(std::string const& value);
    bool productTypeIsSet() const;
    void unsetProduct_type();
    /// <summary>
    /// The discounted price of the product. The sale_price must be lower than the price. It supports the following formats, \&quot;14.99 USD\&quot;, \&quot;14.99USD\&quot; and \&quot;14.99\&quot;. If the currency is not included, we default to US dollars.
    /// </summary>
    std::string getSalePrice() const;
    void setSalePrice(std::string const& value);
    bool salePriceIsSet() const;
    void unsetSale_price();
    /// <summary>
    /// Shipping consists of one group of up to four elements, country, region, service (all optional) and price (required). All colons, even for blank values, are required.
    /// </summary>
    std::string getShipping() const;
    void setShipping(std::string const& value);
    bool shippingIsSet() const;
    void unsetShipping();
    /// <summary>
    /// The height of the package needed to ship the product. Ensure there is a space between the numeric string and the metric.
    /// </summary>
    std::string getShippingHeight() const;
    void setShippingHeight(std::string const& value);
    bool shippingHeightIsSet() const;
    void unsetShipping_height();
    /// <summary>
    /// The weight of the product. Ensure there is a space between the numeric string and the metric.
    /// </summary>
    std::string getShippingWeight() const;
    void setShippingWeight(std::string const& value);
    bool shippingWeightIsSet() const;
    void unsetShipping_weight();
    /// <summary>
    /// The width of the package needed to ship the product. Ensure there is a space between the numeric string and the metric.
    /// </summary>
    std::string getShippingWidth() const;
    void setShippingWidth(std::string const& value);
    bool shippingWidthIsSet() const;
    void unsetShipping_width();
    /// <summary>
    /// The size of the product.
    /// </summary>
    std::string getSize() const;
    void setSize(std::string const& value);
    bool sizeIsSet() const;
    void unsetSize();
    /// <summary>
    /// Indicates the country’s sizing system in which you are submitting your product. Must be one of the following values (upper or lowercased): ‘US’, ‘UK’, ‘EU’, ‘DE’ , ‘FR’, ‘JP’, ‘CN’, ‘IT’, ‘ BR’, ‘MEX’, or ‘AU’.
    /// </summary>
    std::string getSizeSystem() const;
    void setSizeSystem(std::string const& value);
    bool sizeSystemIsSet() const;
    void unsetSize_system();
    /// <summary>
    /// Additional description for the size. Must be one of the following values (upper or lowercased): ‘regular’, ‘petite’ , ‘plus’, ‘big_and_tall’, or ‘maternity’.
    /// </summary>
    std::string getSizeType() const;
    void setSizeType(std::string const& value);
    bool sizeTypeIsSet() const;
    void unsetSize_type();
    /// <summary>
    /// Tax consists of one group of up to four elements, country, region, rate (all required) and tax_ship (optional). All colons, even for blank values, are required.
    /// </summary>
    std::string getTax() const;
    void setTax(std::string const& value);
    bool taxIsSet() const;
    void unsetTax();
    /// <summary>
    /// &lt;p&gt;&lt;&#x3D; 500 characters&lt;/p&gt; &lt;p&gt;The name of the product.&lt;/p&gt;
    /// </summary>
    std::string getTitle() const;
    void setTitle(std::string const& value);
    bool titleIsSet() const;
    void unsetTitle();
    /// <summary>
    /// Options for this variant. People will see these options next to your Pin and can select the one they want. List them in the order you want them displayed.
    /// </summary>
    std::vector<std::string> getVariantNames() const;
    void setVariantNames(std::vector<std::string> const& value);
    bool variantNamesIsSet() const;
    void unsetVariant_names();
    /// <summary>
    /// Option values for this variant. People will see these options next to your Pin and can select the one they want. List them in the order you want them displayed. The order of the variant values must be consistent with the order of the variant names.
    /// </summary>
    std::vector<std::string> getVariantValues() const;
    void setVariantValues(std::vector<std::string> const& value);
    bool variantValuesIsSet() const;
    void unsetVariant_values();

    friend  void to_json(nlohmann::json& j, const UpdatableItemAttributes& o);
    friend  void from_json(const nlohmann::json& j, UpdatableItemAttributes& o);
protected:
    std::string m_Ad_link;
    bool m_Ad_linkIsSet;
    bool m_Adult;
    bool m_AdultIsSet;
    std::string m_Age_group;
    bool m_Age_groupIsSet;
    std::string m_Availability;
    bool m_AvailabilityIsSet;
    double m_Average_review_rating;
    bool m_Average_review_ratingIsSet;
    std::string m_Brand;
    bool m_BrandIsSet;
    bool m_Checkout_enabled;
    bool m_Checkout_enabledIsSet;
    std::string m_Color;
    bool m_ColorIsSet;
    std::string m_Condition;
    bool m_ConditionIsSet;
    std::string m_Custom_label_0;
    bool m_Custom_label_0IsSet;
    std::string m_Custom_label_1;
    bool m_Custom_label_1IsSet;
    std::string m_Custom_label_2;
    bool m_Custom_label_2IsSet;
    std::string m_Custom_label_3;
    bool m_Custom_label_3IsSet;
    std::string m_Custom_label_4;
    bool m_Custom_label_4IsSet;
    std::string m_Description;
    bool m_DescriptionIsSet;
    bool m_Free_shipping_label;
    bool m_Free_shipping_labelIsSet;
    std::string m_Free_shipping_limit;
    bool m_Free_shipping_limitIsSet;
    std::string m_Gender;
    bool m_GenderIsSet;
    std::string m_Google_product_category;
    bool m_Google_product_categoryIsSet;
    int32_t m_Gtin;
    bool m_GtinIsSet;
    std::string m_Id;
    bool m_IdIsSet;
    std::string m_Item_group_id;
    bool m_Item_group_idIsSet;
    int64_t m_Last_updated_time;
    bool m_Last_updated_timeIsSet;
    std::string m_Link;
    bool m_LinkIsSet;
    std::string m_Material;
    bool m_MaterialIsSet;
    std::string m_Min_ad_price;
    bool m_Min_ad_priceIsSet;
    std::string m_Mobile_link;
    bool m_Mobile_linkIsSet;
    std::string m_Mpn;
    bool m_MpnIsSet;
    int32_t m_Number_of_ratings;
    bool m_Number_of_ratingsIsSet;
    int32_t m_Number_of_reviews;
    bool m_Number_of_reviewsIsSet;
    std::string m_Pattern;
    bool m_PatternIsSet;
    std::string m_Price;
    bool m_PriceIsSet;
    std::string m_Product_type;
    bool m_Product_typeIsSet;
    std::string m_Sale_price;
    bool m_Sale_priceIsSet;
    std::string m_Shipping;
    bool m_ShippingIsSet;
    std::string m_Shipping_height;
    bool m_Shipping_heightIsSet;
    std::string m_Shipping_weight;
    bool m_Shipping_weightIsSet;
    std::string m_Shipping_width;
    bool m_Shipping_widthIsSet;
    std::string m_Size;
    bool m_SizeIsSet;
    std::string m_Size_system;
    bool m_Size_systemIsSet;
    std::string m_Size_type;
    bool m_Size_typeIsSet;
    std::string m_Tax;
    bool m_TaxIsSet;
    std::string m_Title;
    bool m_TitleIsSet;
    std::vector<std::string> m_Variant_names;
    bool m_Variant_namesIsSet;
    std::vector<std::string> m_Variant_values;
    bool m_Variant_valuesIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* UpdatableItemAttributes_H_ */
