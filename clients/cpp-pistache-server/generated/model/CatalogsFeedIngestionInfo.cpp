/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "CatalogsFeedIngestionInfo.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

CatalogsFeedIngestionInfo::CatalogsFeedIngestionInfo()
{
    m_IN_STOCK = 0;
    m_IN_STOCKIsSet = false;
    m_OUT_OF_STOCK = 0;
    m_OUT_OF_STOCKIsSet = false;
    m_PREORDER = 0;
    m_PREORDERIsSet = false;
    
}

void CatalogsFeedIngestionInfo::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool CatalogsFeedIngestionInfo::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool CatalogsFeedIngestionInfo::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "CatalogsFeedIngestionInfo" : pathPrefix;

                
    return success;
}

bool CatalogsFeedIngestionInfo::operator==(const CatalogsFeedIngestionInfo& rhs) const
{
    return
    
    
    
    ((!iNSTOCKIsSet() && !rhs.iNSTOCKIsSet()) || (iNSTOCKIsSet() && rhs.iNSTOCKIsSet() && getINSTOCK() == rhs.getINSTOCK())) &&
    
    
    ((!oUTOFSTOCKIsSet() && !rhs.oUTOFSTOCKIsSet()) || (oUTOFSTOCKIsSet() && rhs.oUTOFSTOCKIsSet() && getOUTOFSTOCK() == rhs.getOUTOFSTOCK())) &&
    
    
    ((!pREORDERIsSet() && !rhs.pREORDERIsSet()) || (pREORDERIsSet() && rhs.pREORDERIsSet() && getPREORDER() == rhs.getPREORDER()))
    
    ;
}

bool CatalogsFeedIngestionInfo::operator!=(const CatalogsFeedIngestionInfo& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const CatalogsFeedIngestionInfo& o)
{
    j = nlohmann::json::object();
    if(o.iNSTOCKIsSet())
        j["IN_STOCK"] = o.m_IN_STOCK;
    if(o.oUTOFSTOCKIsSet())
        j["OUT_OF_STOCK"] = o.m_OUT_OF_STOCK;
    if(o.pREORDERIsSet())
        j["PREORDER"] = o.m_PREORDER;
    
}

void from_json(const nlohmann::json& j, CatalogsFeedIngestionInfo& o)
{
    if(j.find("IN_STOCK") != j.end())
    {
        j.at("IN_STOCK").get_to(o.m_IN_STOCK);
        o.m_IN_STOCKIsSet = true;
    } 
    if(j.find("OUT_OF_STOCK") != j.end())
    {
        j.at("OUT_OF_STOCK").get_to(o.m_OUT_OF_STOCK);
        o.m_OUT_OF_STOCKIsSet = true;
    } 
    if(j.find("PREORDER") != j.end())
    {
        j.at("PREORDER").get_to(o.m_PREORDER);
        o.m_PREORDERIsSet = true;
    } 
    
}

int32_t CatalogsFeedIngestionInfo::getINSTOCK() const
{
    return m_IN_STOCK;
}
void CatalogsFeedIngestionInfo::setINSTOCK(int32_t const value)
{
    m_IN_STOCK = value;
    m_IN_STOCKIsSet = true;
}
bool CatalogsFeedIngestionInfo::iNSTOCKIsSet() const
{
    return m_IN_STOCKIsSet;
}
void CatalogsFeedIngestionInfo::unsetIN_STOCK()
{
    m_IN_STOCKIsSet = false;
}
int32_t CatalogsFeedIngestionInfo::getOUTOFSTOCK() const
{
    return m_OUT_OF_STOCK;
}
void CatalogsFeedIngestionInfo::setOUTOFSTOCK(int32_t const value)
{
    m_OUT_OF_STOCK = value;
    m_OUT_OF_STOCKIsSet = true;
}
bool CatalogsFeedIngestionInfo::oUTOFSTOCKIsSet() const
{
    return m_OUT_OF_STOCKIsSet;
}
void CatalogsFeedIngestionInfo::unsetOUT_OF_STOCK()
{
    m_OUT_OF_STOCKIsSet = false;
}
int32_t CatalogsFeedIngestionInfo::getPREORDER() const
{
    return m_PREORDER;
}
void CatalogsFeedIngestionInfo::setPREORDER(int32_t const value)
{
    m_PREORDER = value;
    m_PREORDERIsSet = true;
}
bool CatalogsFeedIngestionInfo::pREORDERIsSet() const
{
    return m_PREORDERIsSet;
}
void CatalogsFeedIngestionInfo::unsetPREORDER()
{
    m_PREORDERIsSet = false;
}


} // namespace org::openapitools::server::model

