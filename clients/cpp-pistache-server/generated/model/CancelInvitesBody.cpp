/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "CancelInvitesBody.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

CancelInvitesBody::CancelInvitesBody()
{
    
}

void CancelInvitesBody::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool CancelInvitesBody::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool CancelInvitesBody::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "CancelInvitesBody" : pathPrefix;

         
    
    /* Invite_ids */ {
        const std::vector<std::string>& value = m_Invite_ids;
        const std::string currentValuePath = _pathPrefix + ".inviteIds";
                
        
        if (value.size() < 1)
        {
            success = false;
            msg << currentValuePath << ": must have at least 1 elements;";
        }
        if (value.size() > 50)
        {
            success = false;
            msg << currentValuePath << ": must have at most 50 elements;";
        }
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const std::string& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
        if (value.length() > 25)
        {
            success = false;
            msg << currentValuePath << ": must be at most 25 characters long;";
        }
 
                i++;
            }
        }

    }
    
    return success;
}

bool CancelInvitesBody::operator==(const CancelInvitesBody& rhs) const
{
    return
    
    
    (getInviteIds() == rhs.getInviteIds())
    
    
    ;
}

bool CancelInvitesBody::operator!=(const CancelInvitesBody& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const CancelInvitesBody& o)
{
    j = nlohmann::json::object();
    j["invite_ids"] = o.m_Invite_ids;
    
}

void from_json(const nlohmann::json& j, CancelInvitesBody& o)
{
    j.at("invite_ids").get_to(o.m_Invite_ids);
    
}

std::vector<std::string> CancelInvitesBody::getInviteIds() const
{
    return m_Invite_ids;
}
void CancelInvitesBody::setInviteIds(std::vector<std::string> const& value)
{
    m_Invite_ids = value;
}


} // namespace org::openapitools::server::model

