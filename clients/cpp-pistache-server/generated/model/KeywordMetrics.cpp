/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "KeywordMetrics.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

KeywordMetrics::KeywordMetrics()
{
    m_Avg_cpc_in_micro_currency = 0.0;
    m_Avg_cpc_in_micro_currencyIsSet = false;
    m_Keyword_query_volume = "";
    m_Keyword_query_volumeIsSet = false;
    
}

void KeywordMetrics::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool KeywordMetrics::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool KeywordMetrics::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "KeywordMetrics" : pathPrefix;

            
    return success;
}

bool KeywordMetrics::operator==(const KeywordMetrics& rhs) const
{
    return
    
    
    
    ((!avgCpcInMicroCurrencyIsSet() && !rhs.avgCpcInMicroCurrencyIsSet()) || (avgCpcInMicroCurrencyIsSet() && rhs.avgCpcInMicroCurrencyIsSet() && getAvgCpcInMicroCurrency() == rhs.getAvgCpcInMicroCurrency())) &&
    
    
    ((!keywordQueryVolumeIsSet() && !rhs.keywordQueryVolumeIsSet()) || (keywordQueryVolumeIsSet() && rhs.keywordQueryVolumeIsSet() && getKeywordQueryVolume() == rhs.getKeywordQueryVolume()))
    
    ;
}

bool KeywordMetrics::operator!=(const KeywordMetrics& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const KeywordMetrics& o)
{
    j = nlohmann::json::object();
    if(o.avgCpcInMicroCurrencyIsSet())
        j["avg_cpc_in_micro_currency"] = o.m_Avg_cpc_in_micro_currency;
    if(o.keywordQueryVolumeIsSet())
        j["keyword_query_volume"] = o.m_Keyword_query_volume;
    
}

void from_json(const nlohmann::json& j, KeywordMetrics& o)
{
    if(j.find("avg_cpc_in_micro_currency") != j.end())
    {
        j.at("avg_cpc_in_micro_currency").get_to(o.m_Avg_cpc_in_micro_currency);
        o.m_Avg_cpc_in_micro_currencyIsSet = true;
    } 
    if(j.find("keyword_query_volume") != j.end())
    {
        j.at("keyword_query_volume").get_to(o.m_Keyword_query_volume);
        o.m_Keyword_query_volumeIsSet = true;
    } 
    
}

double KeywordMetrics::getAvgCpcInMicroCurrency() const
{
    return m_Avg_cpc_in_micro_currency;
}
void KeywordMetrics::setAvgCpcInMicroCurrency(double const value)
{
    m_Avg_cpc_in_micro_currency = value;
    m_Avg_cpc_in_micro_currencyIsSet = true;
}
bool KeywordMetrics::avgCpcInMicroCurrencyIsSet() const
{
    return m_Avg_cpc_in_micro_currencyIsSet;
}
void KeywordMetrics::unsetAvg_cpc_in_micro_currency()
{
    m_Avg_cpc_in_micro_currencyIsSet = false;
}
std::string KeywordMetrics::getKeywordQueryVolume() const
{
    return m_Keyword_query_volume;
}
void KeywordMetrics::setKeywordQueryVolume(std::string const& value)
{
    m_Keyword_query_volume = value;
    m_Keyword_query_volumeIsSet = true;
}
bool KeywordMetrics::keywordQueryVolumeIsSet() const
{
    return m_Keyword_query_volumeIsSet;
}
void KeywordMetrics::unsetKeyword_query_volume()
{
    m_Keyword_query_volumeIsSet = false;
}


} // namespace org::openapitools::server::model

