/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * AdCountry.h
 *
 * Country ID from ISO 3166-1 alpha-2.
 */

#ifndef AdCountry_H_
#define AdCountry_H_


#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// Country ID from ISO 3166-1 alpha-2.
/// </summary>
class  AdCountry
{
public:
    AdCountry();
    virtual ~AdCountry() = default;

    enum class eAdCountry {
    // To have a valid default value.
    // Avoiding name clashes with user defined
    // enum values
    INVALID_VALUE_OPENAPI_GENERATED = 0,
    AD, 
    AE, 
    AF, 
    AG, 
    AI, 
    AL, 
    AM, 
    AO, 
    AQ, 
    AR, 
    AS, 
    AT, 
    AU, 
    AW, 
    AX, 
    AZ, 
    BA, 
    BB, 
    BD, 
    BE, 
    BF, 
    BG, 
    BH, 
    BI, 
    BJ, 
    BL, 
    BM, 
    BN, 
    BO, 
    BQ, 
    BR, 
    BS, 
    BT, 
    BV, 
    BW, 
    BY, 
    BZ, 
    CA, 
    CC, 
    CD, 
    CF, 
    CG, 
    CH, 
    CI, 
    CK, 
    CL, 
    CM, 
    CN, 
    CO, 
    CR, 
    CU, 
    CV, 
    CW, 
    CX, 
    CY, 
    CZ, 
    DE, 
    DJ, 
    DK, 
    DM, 
    DO, 
    DZ, 
    EC, 
    EE, 
    EG, 
    EH, 
    ER, 
    ES, 
    ET, 
    FI, 
    FJ, 
    FK, 
    FM, 
    FO, 
    FR, 
    GA, 
    GB, 
    GD, 
    GE, 
    GF, 
    GG, 
    GH, 
    GI, 
    GL, 
    GM, 
    GN, 
    GP, 
    GQ, 
    GR, 
    GS, 
    GT, 
    GU, 
    GW, 
    GY, 
    HK, 
    HM, 
    HN, 
    HR, 
    HT, 
    HU, 
    ID, 
    IE, 
    IL, 
    IM, 
    IN, 
    IO, 
    IQ, 
    IR, 
    IS, 
    IT, 
    JE, 
    JM, 
    JO, 
    JP, 
    KE, 
    KG, 
    KH, 
    KI, 
    KM, 
    KN, 
    KR, 
    KW, 
    KY, 
    KZ, 
    LA, 
    LB, 
    LC, 
    LI, 
    LK, 
    LR, 
    LS, 
    LT, 
    LU, 
    LV, 
    LY, 
    MA, 
    MC, 
    MD, 
    ME, 
    MF, 
    MG, 
    MH, 
    MK, 
    ML, 
    MM, 
    MN, 
    MO, 
    MP, 
    MQ, 
    MR, 
    MS, 
    MT, 
    MU, 
    MV, 
    MW, 
    MX, 
    MY, 
    MZ, 
    NA, 
    NC, 
    NE, 
    NF, 
    NG, 
    NI, 
    NL, 
    NO, 
    NP, 
    NR, 
    NU, 
    NZ, 
    OM, 
    PA, 
    PE, 
    PF, 
    PG, 
    PH, 
    PK, 
    PL, 
    PM, 
    PN, 
    PR, 
    PS, 
    PT, 
    PW, 
    PY, 
    QA, 
    RE, 
    RO, 
    RS, 
    RU, 
    RW, 
    SA, 
    SB, 
    SC, 
    SD, 
    SE, 
    SG, 
    SH, 
    SI, 
    SJ, 
    SK, 
    SL, 
    SM, 
    SN, 
    SO, 
    SR, 
    SS, 
    ST, 
    SV, 
    SX, 
    SY, 
    SZ, 
    TC, 
    TD, 
    TF, 
    TG, 
    TH, 
    TJ, 
    TK, 
    TL, 
    TM, 
    TN, 
    TO, 
    TR, 
    TT, 
    TV, 
    TW, 
    TZ, 
    UA, 
    UG, 
    UM, 
    US, 
    UY, 
    UZ, 
    VA, 
    VC, 
    VE, 
    VG, 
    VI, 
    VN, 
    VU, 
    WF, 
    WS, 
    YE, 
    YT, 
    ZA, 
    ZM, 
    ZW
    };

    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const AdCountry& rhs) const;
    bool operator!=(const AdCountry& rhs) const;

    /////////////////////////////////////////////
    /// AdCountry members

    AdCountry::eAdCountry getValue() const;
    void setValue(AdCountry::eAdCountry value);
    
    friend  void to_json(nlohmann::json& j, const AdCountry& o);
    friend  void from_json(const nlohmann::json& j, AdCountry& o);
protected:
    AdCountry::eAdCountry m_value = AdCountry::eAdCountry::INVALID_VALUE_OPENAPI_GENERATED;
};

} // namespace org::openapitools::server::model

#endif /* AdCountry_H_ */
