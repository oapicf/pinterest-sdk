/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "SingleInterestTargetingOptionResponse.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

SingleInterestTargetingOptionResponse::SingleInterestTargetingOptionResponse()
{
    m_Id = "";
    m_IdIsSet = false;
    m_Name = "";
    m_NameIsSet = false;
    m_Child_interestsIsSet = false;
    m_Level = 0;
    m_LevelIsSet = false;
    
}

void SingleInterestTargetingOptionResponse::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool SingleInterestTargetingOptionResponse::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool SingleInterestTargetingOptionResponse::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "SingleInterestTargetingOptionResponse" : pathPrefix;

         
    if (idIsSet())
    {
        const std::string& value = m_Id;
        const std::string currentValuePath = _pathPrefix + ".id";
                
        

    }
             
    if (childInterestsIsSet())
    {
        const std::vector<std::string>& value = m_Child_interests;
        const std::string currentValuePath = _pathPrefix + ".childInterests";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const std::string& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }

    }
        
    return success;
}

bool SingleInterestTargetingOptionResponse::operator==(const SingleInterestTargetingOptionResponse& rhs) const
{
    return
    
    
    
    ((!idIsSet() && !rhs.idIsSet()) || (idIsSet() && rhs.idIsSet() && getId() == rhs.getId())) &&
    
    
    ((!nameIsSet() && !rhs.nameIsSet()) || (nameIsSet() && rhs.nameIsSet() && getName() == rhs.getName())) &&
    
    
    ((!childInterestsIsSet() && !rhs.childInterestsIsSet()) || (childInterestsIsSet() && rhs.childInterestsIsSet() && getChildInterests() == rhs.getChildInterests())) &&
    
    
    ((!levelIsSet() && !rhs.levelIsSet()) || (levelIsSet() && rhs.levelIsSet() && getLevel() == rhs.getLevel()))
    
    ;
}

bool SingleInterestTargetingOptionResponse::operator!=(const SingleInterestTargetingOptionResponse& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const SingleInterestTargetingOptionResponse& o)
{
    j = nlohmann::json::object();
    if(o.idIsSet())
        j["id"] = o.m_Id;
    if(o.nameIsSet())
        j["name"] = o.m_Name;
    if(o.childInterestsIsSet() || !o.m_Child_interests.empty())
        j["child_interests"] = o.m_Child_interests;
    if(o.levelIsSet())
        j["level"] = o.m_Level;
    
}

void from_json(const nlohmann::json& j, SingleInterestTargetingOptionResponse& o)
{
    if(j.find("id") != j.end())
    {
        j.at("id").get_to(o.m_Id);
        o.m_IdIsSet = true;
    } 
    if(j.find("name") != j.end())
    {
        j.at("name").get_to(o.m_Name);
        o.m_NameIsSet = true;
    } 
    if(j.find("child_interests") != j.end())
    {
        j.at("child_interests").get_to(o.m_Child_interests);
        o.m_Child_interestsIsSet = true;
    } 
    if(j.find("level") != j.end())
    {
        j.at("level").get_to(o.m_Level);
        o.m_LevelIsSet = true;
    } 
    
}

std::string SingleInterestTargetingOptionResponse::getId() const
{
    return m_Id;
}
void SingleInterestTargetingOptionResponse::setId(std::string const& value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool SingleInterestTargetingOptionResponse::idIsSet() const
{
    return m_IdIsSet;
}
void SingleInterestTargetingOptionResponse::unsetId()
{
    m_IdIsSet = false;
}
std::string SingleInterestTargetingOptionResponse::getName() const
{
    return m_Name;
}
void SingleInterestTargetingOptionResponse::setName(std::string const& value)
{
    m_Name = value;
    m_NameIsSet = true;
}
bool SingleInterestTargetingOptionResponse::nameIsSet() const
{
    return m_NameIsSet;
}
void SingleInterestTargetingOptionResponse::unsetName()
{
    m_NameIsSet = false;
}
std::vector<std::string> SingleInterestTargetingOptionResponse::getChildInterests() const
{
    return m_Child_interests;
}
void SingleInterestTargetingOptionResponse::setChildInterests(std::vector<std::string> const& value)
{
    m_Child_interests = value;
    m_Child_interestsIsSet = true;
}
bool SingleInterestTargetingOptionResponse::childInterestsIsSet() const
{
    return m_Child_interestsIsSet;
}
void SingleInterestTargetingOptionResponse::unsetChild_interests()
{
    m_Child_interestsIsSet = false;
}
int32_t SingleInterestTargetingOptionResponse::getLevel() const
{
    return m_Level;
}
void SingleInterestTargetingOptionResponse::setLevel(int32_t const value)
{
    m_Level = value;
    m_LevelIsSet = true;
}
bool SingleInterestTargetingOptionResponse::levelIsSet() const
{
    return m_LevelIsSet;
}
void SingleInterestTargetingOptionResponse::unsetLevel()
{
    m_LevelIsSet = false;
}


} // namespace org::openapitools::server::model

