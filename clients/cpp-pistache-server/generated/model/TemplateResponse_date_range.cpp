/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "TemplateResponse_date_range.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

TemplateResponse_date_range::TemplateResponse_date_range()
{
    m_Dynamic_date_rangeIsSet = false;
    m_Relative_date_rangeIsSet = false;
    m_Absolute_date_rangeIsSet = false;
    
}

void TemplateResponse_date_range::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool TemplateResponse_date_range::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool TemplateResponse_date_range::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "TemplateResponse_date_range" : pathPrefix;

                
    return success;
}

bool TemplateResponse_date_range::operator==(const TemplateResponse_date_range& rhs) const
{
    return
    
    
    
    ((!dynamicDateRangeIsSet() && !rhs.dynamicDateRangeIsSet()) || (dynamicDateRangeIsSet() && rhs.dynamicDateRangeIsSet() && getDynamicDateRange() == rhs.getDynamicDateRange())) &&
    
    
    ((!relativeDateRangeIsSet() && !rhs.relativeDateRangeIsSet()) || (relativeDateRangeIsSet() && rhs.relativeDateRangeIsSet() && getRelativeDateRange() == rhs.getRelativeDateRange())) &&
    
    
    ((!absoluteDateRangeIsSet() && !rhs.absoluteDateRangeIsSet()) || (absoluteDateRangeIsSet() && rhs.absoluteDateRangeIsSet() && getAbsoluteDateRange() == rhs.getAbsoluteDateRange()))
    
    ;
}

bool TemplateResponse_date_range::operator!=(const TemplateResponse_date_range& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const TemplateResponse_date_range& o)
{
    j = nlohmann::json::object();
    if(o.dynamicDateRangeIsSet())
        j["dynamic_date_range"] = o.m_Dynamic_date_range;
    if(o.relativeDateRangeIsSet())
        j["relative_date_range"] = o.m_Relative_date_range;
    if(o.absoluteDateRangeIsSet())
        j["absolute_date_range"] = o.m_Absolute_date_range;
    
}

void from_json(const nlohmann::json& j, TemplateResponse_date_range& o)
{
    if(j.find("dynamic_date_range") != j.end())
    {
        j.at("dynamic_date_range").get_to(o.m_Dynamic_date_range);
        o.m_Dynamic_date_rangeIsSet = true;
    } 
    if(j.find("relative_date_range") != j.end())
    {
        j.at("relative_date_range").get_to(o.m_Relative_date_range);
        o.m_Relative_date_rangeIsSet = true;
    } 
    if(j.find("absolute_date_range") != j.end())
    {
        j.at("absolute_date_range").get_to(o.m_Absolute_date_range);
        o.m_Absolute_date_rangeIsSet = true;
    } 
    
}

org::openapitools::server::model::TemplateResponse_date_range_dynamic_date_range TemplateResponse_date_range::getDynamicDateRange() const
{
    return m_Dynamic_date_range;
}
void TemplateResponse_date_range::setDynamicDateRange(org::openapitools::server::model::TemplateResponse_date_range_dynamic_date_range const& value)
{
    m_Dynamic_date_range = value;
    m_Dynamic_date_rangeIsSet = true;
}
bool TemplateResponse_date_range::dynamicDateRangeIsSet() const
{
    return m_Dynamic_date_rangeIsSet;
}
void TemplateResponse_date_range::unsetDynamic_date_range()
{
    m_Dynamic_date_rangeIsSet = false;
}
org::openapitools::server::model::TemplateResponse_date_range_relative_date_range TemplateResponse_date_range::getRelativeDateRange() const
{
    return m_Relative_date_range;
}
void TemplateResponse_date_range::setRelativeDateRange(org::openapitools::server::model::TemplateResponse_date_range_relative_date_range const& value)
{
    m_Relative_date_range = value;
    m_Relative_date_rangeIsSet = true;
}
bool TemplateResponse_date_range::relativeDateRangeIsSet() const
{
    return m_Relative_date_rangeIsSet;
}
void TemplateResponse_date_range::unsetRelative_date_range()
{
    m_Relative_date_rangeIsSet = false;
}
org::openapitools::server::model::TemplateResponse_date_range_absolute_date_range TemplateResponse_date_range::getAbsoluteDateRange() const
{
    return m_Absolute_date_range;
}
void TemplateResponse_date_range::setAbsoluteDateRange(org::openapitools::server::model::TemplateResponse_date_range_absolute_date_range const& value)
{
    m_Absolute_date_range = value;
    m_Absolute_date_rangeIsSet = true;
}
bool TemplateResponse_date_range::absoluteDateRangeIsSet() const
{
    return m_Absolute_date_rangeIsSet;
}
void TemplateResponse_date_range::unsetAbsolute_date_range()
{
    m_Absolute_date_rangeIsSet = false;
}


} // namespace org::openapitools::server::model

