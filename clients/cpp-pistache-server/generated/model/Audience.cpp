/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "Audience.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

Audience::Audience()
{
    m_Ad_account_id = "";
    m_Ad_account_idIsSet = false;
    m_Id = "";
    m_IdIsSet = false;
    m_Name = "";
    m_NameIsSet = false;
    m_Audience_type = "";
    m_Audience_typeIsSet = false;
    m_Description = "";
    m_DescriptionIsSet = false;
    m_RuleIsSet = false;
    m_Size = 0;
    m_SizeIsSet = false;
    m_Status = "";
    m_StatusIsSet = false;
    m_Type = "";
    m_TypeIsSet = false;
    m_Created_timestamp = 0;
    m_Created_timestampIsSet = false;
    m_Updated_timestamp = 0;
    m_Updated_timestampIsSet = false;
    
}

void Audience::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool Audience::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool Audience::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "Audience" : pathPrefix;

         
    if (adAccountIdIsSet())
    {
        const std::string& value = m_Ad_account_id;
        const std::string currentValuePath = _pathPrefix + ".adAccountId";
                
        

    }
         
    if (idIsSet())
    {
        const std::string& value = m_Id;
        const std::string currentValuePath = _pathPrefix + ".id";
                
        

    }
                                        
    return success;
}

bool Audience::operator==(const Audience& rhs) const
{
    return
    
    
    
    ((!adAccountIdIsSet() && !rhs.adAccountIdIsSet()) || (adAccountIdIsSet() && rhs.adAccountIdIsSet() && getAdAccountId() == rhs.getAdAccountId())) &&
    
    
    ((!idIsSet() && !rhs.idIsSet()) || (idIsSet() && rhs.idIsSet() && getId() == rhs.getId())) &&
    
    
    ((!nameIsSet() && !rhs.nameIsSet()) || (nameIsSet() && rhs.nameIsSet() && getName() == rhs.getName())) &&
    
    
    ((!audienceTypeIsSet() && !rhs.audienceTypeIsSet()) || (audienceTypeIsSet() && rhs.audienceTypeIsSet() && getAudienceType() == rhs.getAudienceType())) &&
    
    
    ((!descriptionIsSet() && !rhs.descriptionIsSet()) || (descriptionIsSet() && rhs.descriptionIsSet() && getDescription() == rhs.getDescription())) &&
    
    
    ((!ruleIsSet() && !rhs.ruleIsSet()) || (ruleIsSet() && rhs.ruleIsSet() && getRule() == rhs.getRule())) &&
    
    
    ((!sizeIsSet() && !rhs.sizeIsSet()) || (sizeIsSet() && rhs.sizeIsSet() && getSize() == rhs.getSize())) &&
    
    
    ((!statusIsSet() && !rhs.statusIsSet()) || (statusIsSet() && rhs.statusIsSet() && getStatus() == rhs.getStatus())) &&
    
    
    ((!typeIsSet() && !rhs.typeIsSet()) || (typeIsSet() && rhs.typeIsSet() && getType() == rhs.getType())) &&
    
    
    ((!createdTimestampIsSet() && !rhs.createdTimestampIsSet()) || (createdTimestampIsSet() && rhs.createdTimestampIsSet() && getCreatedTimestamp() == rhs.getCreatedTimestamp())) &&
    
    
    ((!updatedTimestampIsSet() && !rhs.updatedTimestampIsSet()) || (updatedTimestampIsSet() && rhs.updatedTimestampIsSet() && getUpdatedTimestamp() == rhs.getUpdatedTimestamp()))
    
    ;
}

bool Audience::operator!=(const Audience& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const Audience& o)
{
    j = nlohmann::json::object();
    if(o.adAccountIdIsSet())
        j["ad_account_id"] = o.m_Ad_account_id;
    if(o.idIsSet())
        j["id"] = o.m_Id;
    if(o.nameIsSet())
        j["name"] = o.m_Name;
    if(o.audienceTypeIsSet())
        j["audience_type"] = o.m_Audience_type;
    if(o.descriptionIsSet())
        j["description"] = o.m_Description;
    if(o.ruleIsSet())
        j["rule"] = o.m_Rule;
    if(o.sizeIsSet())
        j["size"] = o.m_Size;
    if(o.statusIsSet())
        j["status"] = o.m_Status;
    if(o.typeIsSet())
        j["type"] = o.m_Type;
    if(o.createdTimestampIsSet())
        j["created_timestamp"] = o.m_Created_timestamp;
    if(o.updatedTimestampIsSet())
        j["updated_timestamp"] = o.m_Updated_timestamp;
    
}

void from_json(const nlohmann::json& j, Audience& o)
{
    if(j.find("ad_account_id") != j.end())
    {
        j.at("ad_account_id").get_to(o.m_Ad_account_id);
        o.m_Ad_account_idIsSet = true;
    } 
    if(j.find("id") != j.end())
    {
        j.at("id").get_to(o.m_Id);
        o.m_IdIsSet = true;
    } 
    if(j.find("name") != j.end())
    {
        j.at("name").get_to(o.m_Name);
        o.m_NameIsSet = true;
    } 
    if(j.find("audience_type") != j.end())
    {
        j.at("audience_type").get_to(o.m_Audience_type);
        o.m_Audience_typeIsSet = true;
    } 
    if(j.find("description") != j.end())
    {
        j.at("description").get_to(o.m_Description);
        o.m_DescriptionIsSet = true;
    } 
    if(j.find("rule") != j.end())
    {
        j.at("rule").get_to(o.m_Rule);
        o.m_RuleIsSet = true;
    } 
    if(j.find("size") != j.end())
    {
        j.at("size").get_to(o.m_Size);
        o.m_SizeIsSet = true;
    } 
    if(j.find("status") != j.end())
    {
        j.at("status").get_to(o.m_Status);
        o.m_StatusIsSet = true;
    } 
    if(j.find("type") != j.end())
    {
        j.at("type").get_to(o.m_Type);
        o.m_TypeIsSet = true;
    } 
    if(j.find("created_timestamp") != j.end())
    {
        j.at("created_timestamp").get_to(o.m_Created_timestamp);
        o.m_Created_timestampIsSet = true;
    } 
    if(j.find("updated_timestamp") != j.end())
    {
        j.at("updated_timestamp").get_to(o.m_Updated_timestamp);
        o.m_Updated_timestampIsSet = true;
    } 
    
}

std::string Audience::getAdAccountId() const
{
    return m_Ad_account_id;
}
void Audience::setAdAccountId(std::string const& value)
{
    m_Ad_account_id = value;
    m_Ad_account_idIsSet = true;
}
bool Audience::adAccountIdIsSet() const
{
    return m_Ad_account_idIsSet;
}
void Audience::unsetAd_account_id()
{
    m_Ad_account_idIsSet = false;
}
std::string Audience::getId() const
{
    return m_Id;
}
void Audience::setId(std::string const& value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool Audience::idIsSet() const
{
    return m_IdIsSet;
}
void Audience::unsetId()
{
    m_IdIsSet = false;
}
std::string Audience::getName() const
{
    return m_Name;
}
void Audience::setName(std::string const& value)
{
    m_Name = value;
    m_NameIsSet = true;
}
bool Audience::nameIsSet() const
{
    return m_NameIsSet;
}
void Audience::unsetName()
{
    m_NameIsSet = false;
}
std::string Audience::getAudienceType() const
{
    return m_Audience_type;
}
void Audience::setAudienceType(std::string const& value)
{
    m_Audience_type = value;
    m_Audience_typeIsSet = true;
}
bool Audience::audienceTypeIsSet() const
{
    return m_Audience_typeIsSet;
}
void Audience::unsetAudience_type()
{
    m_Audience_typeIsSet = false;
}
std::string Audience::getDescription() const
{
    return m_Description;
}
void Audience::setDescription(std::string const& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}
bool Audience::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}
void Audience::unsetDescription()
{
    m_DescriptionIsSet = false;
}
org::openapitools::server::model::AudienceRule Audience::getRule() const
{
    return m_Rule;
}
void Audience::setRule(org::openapitools::server::model::AudienceRule const& value)
{
    m_Rule = value;
    m_RuleIsSet = true;
}
bool Audience::ruleIsSet() const
{
    return m_RuleIsSet;
}
void Audience::unsetRule()
{
    m_RuleIsSet = false;
}
int32_t Audience::getSize() const
{
    return m_Size;
}
void Audience::setSize(int32_t const value)
{
    m_Size = value;
    m_SizeIsSet = true;
}
bool Audience::sizeIsSet() const
{
    return m_SizeIsSet;
}
void Audience::unsetSize()
{
    m_SizeIsSet = false;
}
std::string Audience::getStatus() const
{
    return m_Status;
}
void Audience::setStatus(std::string const& value)
{
    m_Status = value;
    m_StatusIsSet = true;
}
bool Audience::statusIsSet() const
{
    return m_StatusIsSet;
}
void Audience::unsetStatus()
{
    m_StatusIsSet = false;
}
std::string Audience::getType() const
{
    return m_Type;
}
void Audience::setType(std::string const& value)
{
    m_Type = value;
    m_TypeIsSet = true;
}
bool Audience::typeIsSet() const
{
    return m_TypeIsSet;
}
void Audience::unsetType()
{
    m_TypeIsSet = false;
}
int32_t Audience::getCreatedTimestamp() const
{
    return m_Created_timestamp;
}
void Audience::setCreatedTimestamp(int32_t const value)
{
    m_Created_timestamp = value;
    m_Created_timestampIsSet = true;
}
bool Audience::createdTimestampIsSet() const
{
    return m_Created_timestampIsSet;
}
void Audience::unsetCreated_timestamp()
{
    m_Created_timestampIsSet = false;
}
int32_t Audience::getUpdatedTimestamp() const
{
    return m_Updated_timestamp;
}
void Audience::setUpdatedTimestamp(int32_t const value)
{
    m_Updated_timestamp = value;
    m_Updated_timestampIsSet = true;
}
bool Audience::updatedTimestampIsSet() const
{
    return m_Updated_timestampIsSet;
}
void Audience::unsetUpdated_timestamp()
{
    m_Updated_timestampIsSet = false;
}


} // namespace org::openapitools::server::model

