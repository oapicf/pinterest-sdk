/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * AudienceInsightsResponse.h
 *
 * Audience interests and demographics.
 */

#ifndef AudienceInsightsResponse_H_
#define AudienceInsightsResponse_H_


#include "AudienceCategory.h"
#include "AudienceInsightType.h"
#include <string>
#include "AudienceDemographics.h"
#include <vector>
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// Audience interests and demographics.
/// </summary>
class  AudienceInsightsResponse
{
public:
    AudienceInsightsResponse();
    virtual ~AudienceInsightsResponse() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const AudienceInsightsResponse& rhs) const;
    bool operator!=(const AudienceInsightsResponse& rhs) const;

    /////////////////////////////////////////////
    /// AudienceInsightsResponse members

    /// <summary>
    /// Category interest distribution
    /// </summary>
    std::vector<org::openapitools::server::model::AudienceCategory> getCategories() const;
    void setCategories(std::vector<org::openapitools::server::model::AudienceCategory> const& value);
    bool categoriesIsSet() const;
    void unsetCategories();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::AudienceDemographics getDemographics() const;
    void setDemographics(org::openapitools::server::model::AudienceDemographics const& value);
    bool demographicsIsSet() const;
    void unsetDemographics();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::AudienceInsightType getType() const;
    void setType(org::openapitools::server::model::AudienceInsightType const& value);
    bool typeIsSet() const;
    void unsetType();
    /// <summary>
    /// Generation date
    /// </summary>
    std::string getDate() const;
    void setDate(std::string const& value);
    bool dateIsSet() const;
    void unsetdate();
    /// <summary>
    /// Population count.
    /// </summary>
    int32_t getSize() const;
    void setSize(int32_t const value);
    bool sizeIsSet() const;
    void unsetSize();
    /// <summary>
    /// Indicates whether the audience size has been rounded up to the next highest upper boundary.
    /// </summary>
    bool isSizeIsUpperBound() const;
    void setSizeIsUpperBound(bool const value);
    bool sizeIsUpperBoundIsSet() const;
    void unsetSize_is_upper_bound();

    friend  void to_json(nlohmann::json& j, const AudienceInsightsResponse& o);
    friend  void from_json(const nlohmann::json& j, AudienceInsightsResponse& o);
protected:
    std::vector<org::openapitools::server::model::AudienceCategory> m_Categories;
    bool m_CategoriesIsSet;
    org::openapitools::server::model::AudienceDemographics m_Demographics;
    bool m_DemographicsIsSet;
    org::openapitools::server::model::AudienceInsightType m_Type;
    bool m_TypeIsSet;
    std::string m_date;
    bool m_dateIsSet;
    int32_t m_Size;
    bool m_SizeIsSet;
    bool m_Size_is_upper_bound;
    bool m_Size_is_upper_boundIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* AudienceInsightsResponse_H_ */
