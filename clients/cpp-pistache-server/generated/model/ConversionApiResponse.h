/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * ConversionApiResponse.h
 *
 * Schema describing the object in the response, which contains information about the events that were received and processed.
 */

#ifndef ConversionApiResponse_H_
#define ConversionApiResponse_H_


#include "ConversionApiResponse_events_inner.h"
#include <vector>
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// Schema describing the object in the response, which contains information about the events that were received and processed.
/// </summary>
class  ConversionApiResponse
{
public:
    ConversionApiResponse();
    virtual ~ConversionApiResponse() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const ConversionApiResponse& rhs) const;
    bool operator!=(const ConversionApiResponse& rhs) const;

    /////////////////////////////////////////////
    /// ConversionApiResponse members

    /// <summary>
    /// Total number of events received in the request.
    /// </summary>
    int32_t getNumEventsReceived() const;
    void setNumEventsReceived(int32_t const value);
    /// <summary>
    /// Number of events that were successfully processed from the events.
    /// </summary>
    int32_t getNumEventsProcessed() const;
    void setNumEventsProcessed(int32_t const value);
    /// <summary>
    /// Specific messages for each event received. The order will match the order in which the events were received in the request.
    /// </summary>
    std::vector<org::openapitools::server::model::ConversionApiResponse_events_inner> getEvents() const;
    void setEvents(std::vector<org::openapitools::server::model::ConversionApiResponse_events_inner> const& value);

    friend  void to_json(nlohmann::json& j, const ConversionApiResponse& o);
    friend  void from_json(const nlohmann::json& j, ConversionApiResponse& o);
protected:
    int32_t m_Num_events_received;

    int32_t m_Num_events_processed;

    std::vector<org::openapitools::server::model::ConversionApiResponse_events_inner> m_Events;

    
};

} // namespace org::openapitools::server::model

#endif /* ConversionApiResponse_H_ */
