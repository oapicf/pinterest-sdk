/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "IntegrationRequestPatch.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

IntegrationRequestPatch::IntegrationRequestPatch()
{
    m_Connected_merchant_id = "";
    m_Connected_merchant_idIsSet = false;
    m_Connected_advertiser_id = "";
    m_Connected_advertiser_idIsSet = false;
    m_Connected_lba_id = "";
    m_Connected_lba_idIsSet = false;
    m_Connected_tag_id = "";
    m_Connected_tag_idIsSet = false;
    m_Partner_access_token = "";
    m_Partner_access_tokenIsSet = false;
    m_Partner_refresh_token = "";
    m_Partner_refresh_tokenIsSet = false;
    m_Partner_primary_email = "";
    m_Partner_primary_emailIsSet = false;
    m_Partner_access_token_expiry = 0.0;
    m_Partner_access_token_expiryIsSet = false;
    m_Partner_refresh_token_expiry = 0.0;
    m_Partner_refresh_token_expiryIsSet = false;
    m_Scopes = "";
    m_ScopesIsSet = false;
    m_Additional_id_1 = "";
    m_Additional_id_1IsSet = false;
    m_Partner_metadata = "";
    m_Partner_metadataIsSet = false;
    
}

void IntegrationRequestPatch::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool IntegrationRequestPatch::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool IntegrationRequestPatch::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "IntegrationRequestPatch" : pathPrefix;

                                                    
    return success;
}

bool IntegrationRequestPatch::operator==(const IntegrationRequestPatch& rhs) const
{
    return
    
    
    
    ((!connectedMerchantIdIsSet() && !rhs.connectedMerchantIdIsSet()) || (connectedMerchantIdIsSet() && rhs.connectedMerchantIdIsSet() && getConnectedMerchantId() == rhs.getConnectedMerchantId())) &&
    
    
    ((!connectedAdvertiserIdIsSet() && !rhs.connectedAdvertiserIdIsSet()) || (connectedAdvertiserIdIsSet() && rhs.connectedAdvertiserIdIsSet() && getConnectedAdvertiserId() == rhs.getConnectedAdvertiserId())) &&
    
    
    ((!connectedLbaIdIsSet() && !rhs.connectedLbaIdIsSet()) || (connectedLbaIdIsSet() && rhs.connectedLbaIdIsSet() && getConnectedLbaId() == rhs.getConnectedLbaId())) &&
    
    
    ((!connectedTagIdIsSet() && !rhs.connectedTagIdIsSet()) || (connectedTagIdIsSet() && rhs.connectedTagIdIsSet() && getConnectedTagId() == rhs.getConnectedTagId())) &&
    
    
    ((!partnerAccessTokenIsSet() && !rhs.partnerAccessTokenIsSet()) || (partnerAccessTokenIsSet() && rhs.partnerAccessTokenIsSet() && getPartnerAccessToken() == rhs.getPartnerAccessToken())) &&
    
    
    ((!partnerRefreshTokenIsSet() && !rhs.partnerRefreshTokenIsSet()) || (partnerRefreshTokenIsSet() && rhs.partnerRefreshTokenIsSet() && getPartnerRefreshToken() == rhs.getPartnerRefreshToken())) &&
    
    
    ((!partnerPrimaryEmailIsSet() && !rhs.partnerPrimaryEmailIsSet()) || (partnerPrimaryEmailIsSet() && rhs.partnerPrimaryEmailIsSet() && getPartnerPrimaryEmail() == rhs.getPartnerPrimaryEmail())) &&
    
    
    ((!partnerAccessTokenExpiryIsSet() && !rhs.partnerAccessTokenExpiryIsSet()) || (partnerAccessTokenExpiryIsSet() && rhs.partnerAccessTokenExpiryIsSet() && getPartnerAccessTokenExpiry() == rhs.getPartnerAccessTokenExpiry())) &&
    
    
    ((!partnerRefreshTokenExpiryIsSet() && !rhs.partnerRefreshTokenExpiryIsSet()) || (partnerRefreshTokenExpiryIsSet() && rhs.partnerRefreshTokenExpiryIsSet() && getPartnerRefreshTokenExpiry() == rhs.getPartnerRefreshTokenExpiry())) &&
    
    
    ((!scopesIsSet() && !rhs.scopesIsSet()) || (scopesIsSet() && rhs.scopesIsSet() && getScopes() == rhs.getScopes())) &&
    
    
    ((!additionalId1IsSet() && !rhs.additionalId1IsSet()) || (additionalId1IsSet() && rhs.additionalId1IsSet() && getAdditionalId1() == rhs.getAdditionalId1())) &&
    
    
    ((!partnerMetadataIsSet() && !rhs.partnerMetadataIsSet()) || (partnerMetadataIsSet() && rhs.partnerMetadataIsSet() && getPartnerMetadata() == rhs.getPartnerMetadata()))
    
    ;
}

bool IntegrationRequestPatch::operator!=(const IntegrationRequestPatch& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const IntegrationRequestPatch& o)
{
    j = nlohmann::json::object();
    if(o.connectedMerchantIdIsSet())
        j["connected_merchant_id"] = o.m_Connected_merchant_id;
    if(o.connectedAdvertiserIdIsSet())
        j["connected_advertiser_id"] = o.m_Connected_advertiser_id;
    if(o.connectedLbaIdIsSet())
        j["connected_lba_id"] = o.m_Connected_lba_id;
    if(o.connectedTagIdIsSet())
        j["connected_tag_id"] = o.m_Connected_tag_id;
    if(o.partnerAccessTokenIsSet())
        j["partner_access_token"] = o.m_Partner_access_token;
    if(o.partnerRefreshTokenIsSet())
        j["partner_refresh_token"] = o.m_Partner_refresh_token;
    if(o.partnerPrimaryEmailIsSet())
        j["partner_primary_email"] = o.m_Partner_primary_email;
    if(o.partnerAccessTokenExpiryIsSet())
        j["partner_access_token_expiry"] = o.m_Partner_access_token_expiry;
    if(o.partnerRefreshTokenExpiryIsSet())
        j["partner_refresh_token_expiry"] = o.m_Partner_refresh_token_expiry;
    if(o.scopesIsSet())
        j["scopes"] = o.m_Scopes;
    if(o.additionalId1IsSet())
        j["additional_id_1"] = o.m_Additional_id_1;
    if(o.partnerMetadataIsSet())
        j["partner_metadata"] = o.m_Partner_metadata;
    
}

void from_json(const nlohmann::json& j, IntegrationRequestPatch& o)
{
    if(j.find("connected_merchant_id") != j.end())
    {
        j.at("connected_merchant_id").get_to(o.m_Connected_merchant_id);
        o.m_Connected_merchant_idIsSet = true;
    } 
    if(j.find("connected_advertiser_id") != j.end())
    {
        j.at("connected_advertiser_id").get_to(o.m_Connected_advertiser_id);
        o.m_Connected_advertiser_idIsSet = true;
    } 
    if(j.find("connected_lba_id") != j.end())
    {
        j.at("connected_lba_id").get_to(o.m_Connected_lba_id);
        o.m_Connected_lba_idIsSet = true;
    } 
    if(j.find("connected_tag_id") != j.end())
    {
        j.at("connected_tag_id").get_to(o.m_Connected_tag_id);
        o.m_Connected_tag_idIsSet = true;
    } 
    if(j.find("partner_access_token") != j.end())
    {
        j.at("partner_access_token").get_to(o.m_Partner_access_token);
        o.m_Partner_access_tokenIsSet = true;
    } 
    if(j.find("partner_refresh_token") != j.end())
    {
        j.at("partner_refresh_token").get_to(o.m_Partner_refresh_token);
        o.m_Partner_refresh_tokenIsSet = true;
    } 
    if(j.find("partner_primary_email") != j.end())
    {
        j.at("partner_primary_email").get_to(o.m_Partner_primary_email);
        o.m_Partner_primary_emailIsSet = true;
    } 
    if(j.find("partner_access_token_expiry") != j.end())
    {
        j.at("partner_access_token_expiry").get_to(o.m_Partner_access_token_expiry);
        o.m_Partner_access_token_expiryIsSet = true;
    } 
    if(j.find("partner_refresh_token_expiry") != j.end())
    {
        j.at("partner_refresh_token_expiry").get_to(o.m_Partner_refresh_token_expiry);
        o.m_Partner_refresh_token_expiryIsSet = true;
    } 
    if(j.find("scopes") != j.end())
    {
        j.at("scopes").get_to(o.m_Scopes);
        o.m_ScopesIsSet = true;
    } 
    if(j.find("additional_id_1") != j.end())
    {
        j.at("additional_id_1").get_to(o.m_Additional_id_1);
        o.m_Additional_id_1IsSet = true;
    } 
    if(j.find("partner_metadata") != j.end())
    {
        j.at("partner_metadata").get_to(o.m_Partner_metadata);
        o.m_Partner_metadataIsSet = true;
    } 
    
}

std::string IntegrationRequestPatch::getConnectedMerchantId() const
{
    return m_Connected_merchant_id;
}
void IntegrationRequestPatch::setConnectedMerchantId(std::string const& value)
{
    m_Connected_merchant_id = value;
    m_Connected_merchant_idIsSet = true;
}
bool IntegrationRequestPatch::connectedMerchantIdIsSet() const
{
    return m_Connected_merchant_idIsSet;
}
void IntegrationRequestPatch::unsetConnected_merchant_id()
{
    m_Connected_merchant_idIsSet = false;
}
std::string IntegrationRequestPatch::getConnectedAdvertiserId() const
{
    return m_Connected_advertiser_id;
}
void IntegrationRequestPatch::setConnectedAdvertiserId(std::string const& value)
{
    m_Connected_advertiser_id = value;
    m_Connected_advertiser_idIsSet = true;
}
bool IntegrationRequestPatch::connectedAdvertiserIdIsSet() const
{
    return m_Connected_advertiser_idIsSet;
}
void IntegrationRequestPatch::unsetConnected_advertiser_id()
{
    m_Connected_advertiser_idIsSet = false;
}
std::string IntegrationRequestPatch::getConnectedLbaId() const
{
    return m_Connected_lba_id;
}
void IntegrationRequestPatch::setConnectedLbaId(std::string const& value)
{
    m_Connected_lba_id = value;
    m_Connected_lba_idIsSet = true;
}
bool IntegrationRequestPatch::connectedLbaIdIsSet() const
{
    return m_Connected_lba_idIsSet;
}
void IntegrationRequestPatch::unsetConnected_lba_id()
{
    m_Connected_lba_idIsSet = false;
}
std::string IntegrationRequestPatch::getConnectedTagId() const
{
    return m_Connected_tag_id;
}
void IntegrationRequestPatch::setConnectedTagId(std::string const& value)
{
    m_Connected_tag_id = value;
    m_Connected_tag_idIsSet = true;
}
bool IntegrationRequestPatch::connectedTagIdIsSet() const
{
    return m_Connected_tag_idIsSet;
}
void IntegrationRequestPatch::unsetConnected_tag_id()
{
    m_Connected_tag_idIsSet = false;
}
std::string IntegrationRequestPatch::getPartnerAccessToken() const
{
    return m_Partner_access_token;
}
void IntegrationRequestPatch::setPartnerAccessToken(std::string const& value)
{
    m_Partner_access_token = value;
    m_Partner_access_tokenIsSet = true;
}
bool IntegrationRequestPatch::partnerAccessTokenIsSet() const
{
    return m_Partner_access_tokenIsSet;
}
void IntegrationRequestPatch::unsetPartner_access_token()
{
    m_Partner_access_tokenIsSet = false;
}
std::string IntegrationRequestPatch::getPartnerRefreshToken() const
{
    return m_Partner_refresh_token;
}
void IntegrationRequestPatch::setPartnerRefreshToken(std::string const& value)
{
    m_Partner_refresh_token = value;
    m_Partner_refresh_tokenIsSet = true;
}
bool IntegrationRequestPatch::partnerRefreshTokenIsSet() const
{
    return m_Partner_refresh_tokenIsSet;
}
void IntegrationRequestPatch::unsetPartner_refresh_token()
{
    m_Partner_refresh_tokenIsSet = false;
}
std::string IntegrationRequestPatch::getPartnerPrimaryEmail() const
{
    return m_Partner_primary_email;
}
void IntegrationRequestPatch::setPartnerPrimaryEmail(std::string const& value)
{
    m_Partner_primary_email = value;
    m_Partner_primary_emailIsSet = true;
}
bool IntegrationRequestPatch::partnerPrimaryEmailIsSet() const
{
    return m_Partner_primary_emailIsSet;
}
void IntegrationRequestPatch::unsetPartner_primary_email()
{
    m_Partner_primary_emailIsSet = false;
}
double IntegrationRequestPatch::getPartnerAccessTokenExpiry() const
{
    return m_Partner_access_token_expiry;
}
void IntegrationRequestPatch::setPartnerAccessTokenExpiry(double const value)
{
    m_Partner_access_token_expiry = value;
    m_Partner_access_token_expiryIsSet = true;
}
bool IntegrationRequestPatch::partnerAccessTokenExpiryIsSet() const
{
    return m_Partner_access_token_expiryIsSet;
}
void IntegrationRequestPatch::unsetPartner_access_token_expiry()
{
    m_Partner_access_token_expiryIsSet = false;
}
double IntegrationRequestPatch::getPartnerRefreshTokenExpiry() const
{
    return m_Partner_refresh_token_expiry;
}
void IntegrationRequestPatch::setPartnerRefreshTokenExpiry(double const value)
{
    m_Partner_refresh_token_expiry = value;
    m_Partner_refresh_token_expiryIsSet = true;
}
bool IntegrationRequestPatch::partnerRefreshTokenExpiryIsSet() const
{
    return m_Partner_refresh_token_expiryIsSet;
}
void IntegrationRequestPatch::unsetPartner_refresh_token_expiry()
{
    m_Partner_refresh_token_expiryIsSet = false;
}
std::string IntegrationRequestPatch::getScopes() const
{
    return m_Scopes;
}
void IntegrationRequestPatch::setScopes(std::string const& value)
{
    m_Scopes = value;
    m_ScopesIsSet = true;
}
bool IntegrationRequestPatch::scopesIsSet() const
{
    return m_ScopesIsSet;
}
void IntegrationRequestPatch::unsetScopes()
{
    m_ScopesIsSet = false;
}
std::string IntegrationRequestPatch::getAdditionalId1() const
{
    return m_Additional_id_1;
}
void IntegrationRequestPatch::setAdditionalId1(std::string const& value)
{
    m_Additional_id_1 = value;
    m_Additional_id_1IsSet = true;
}
bool IntegrationRequestPatch::additionalId1IsSet() const
{
    return m_Additional_id_1IsSet;
}
void IntegrationRequestPatch::unsetAdditional_id_1()
{
    m_Additional_id_1IsSet = false;
}
std::string IntegrationRequestPatch::getPartnerMetadata() const
{
    return m_Partner_metadata;
}
void IntegrationRequestPatch::setPartnerMetadata(std::string const& value)
{
    m_Partner_metadata = value;
    m_Partner_metadataIsSet = true;
}
bool IntegrationRequestPatch::partnerMetadataIsSet() const
{
    return m_Partner_metadataIsSet;
}
void IntegrationRequestPatch::unsetPartner_metadata()
{
    m_Partner_metadataIsSet = false;
}


} // namespace org::openapitools::server::model

