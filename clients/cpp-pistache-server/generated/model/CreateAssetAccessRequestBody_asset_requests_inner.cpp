/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "CreateAssetAccessRequestBody_asset_requests_inner.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

CreateAssetAccessRequestBody_asset_requests_inner::CreateAssetAccessRequestBody_asset_requests_inner()
{
    m_Partner_id = "";
    
}

void CreateAssetAccessRequestBody_asset_requests_inner::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool CreateAssetAccessRequestBody_asset_requests_inner::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool CreateAssetAccessRequestBody_asset_requests_inner::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "CreateAssetAccessRequestBody_asset_requests_inner" : pathPrefix;

         
    
    /* Partner_id */ {
        const std::string& value = m_Partner_id;
        const std::string currentValuePath = _pathPrefix + ".partnerId";
                
        

    }
         
    
    /* Asset_id_to_permissions */ {
        const std::map<std::string, std::vector<org::openapitools::server::model::Permissions>>& value = m_Asset_id_to_permissions;
        const std::string currentValuePath = _pathPrefix + ".assetIdToPermissions";
                
        

    }
    
    return success;
}

bool CreateAssetAccessRequestBody_asset_requests_inner::operator==(const CreateAssetAccessRequestBody_asset_requests_inner& rhs) const
{
    return
    
    
    (getPartnerId() == rhs.getPartnerId())
     &&
    
    (getAssetIdToPermissions() == rhs.getAssetIdToPermissions())
    
    
    ;
}

bool CreateAssetAccessRequestBody_asset_requests_inner::operator!=(const CreateAssetAccessRequestBody_asset_requests_inner& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const CreateAssetAccessRequestBody_asset_requests_inner& o)
{
    j = nlohmann::json::object();
    j["partner_id"] = o.m_Partner_id;
    j["asset_id_to_permissions"] = o.m_Asset_id_to_permissions;
    
}

void from_json(const nlohmann::json& j, CreateAssetAccessRequestBody_asset_requests_inner& o)
{
    j.at("partner_id").get_to(o.m_Partner_id);
    j.at("asset_id_to_permissions").get_to(o.m_Asset_id_to_permissions);
    
}

std::string CreateAssetAccessRequestBody_asset_requests_inner::getPartnerId() const
{
    return m_Partner_id;
}
void CreateAssetAccessRequestBody_asset_requests_inner::setPartnerId(std::string const& value)
{
    m_Partner_id = value;
}
std::map<std::string, std::vector<org::openapitools::server::model::Permissions>> CreateAssetAccessRequestBody_asset_requests_inner::getAssetIdToPermissions() const
{
    return m_Asset_id_to_permissions;
}
void CreateAssetAccessRequestBody_asset_requests_inner::setAssetIdToPermissions(std::map<std::string, std::vector<org::openapitools::server::model::Permissions>> const& value)
{
    m_Asset_id_to_permissions = value;
}


} // namespace org::openapitools::server::model

