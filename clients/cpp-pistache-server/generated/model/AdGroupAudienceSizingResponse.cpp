/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "AdGroupAudienceSizingResponse.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

AdGroupAudienceSizingResponse::AdGroupAudienceSizingResponse()
{
    m_Audience_size_lower_bound = 0.0;
    m_Audience_size_lower_boundIsSet = false;
    m_Audience_size_upper_bound = 0.0;
    m_Audience_size_upper_boundIsSet = false;
    
}

void AdGroupAudienceSizingResponse::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool AdGroupAudienceSizingResponse::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool AdGroupAudienceSizingResponse::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "AdGroupAudienceSizingResponse" : pathPrefix;

            
    return success;
}

bool AdGroupAudienceSizingResponse::operator==(const AdGroupAudienceSizingResponse& rhs) const
{
    return
    
    
    
    ((!audienceSizeLowerBoundIsSet() && !rhs.audienceSizeLowerBoundIsSet()) || (audienceSizeLowerBoundIsSet() && rhs.audienceSizeLowerBoundIsSet() && getAudienceSizeLowerBound() == rhs.getAudienceSizeLowerBound())) &&
    
    
    ((!audienceSizeUpperBoundIsSet() && !rhs.audienceSizeUpperBoundIsSet()) || (audienceSizeUpperBoundIsSet() && rhs.audienceSizeUpperBoundIsSet() && getAudienceSizeUpperBound() == rhs.getAudienceSizeUpperBound()))
    
    ;
}

bool AdGroupAudienceSizingResponse::operator!=(const AdGroupAudienceSizingResponse& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const AdGroupAudienceSizingResponse& o)
{
    j = nlohmann::json::object();
    if(o.audienceSizeLowerBoundIsSet())
        j["audience_size_lower_bound"] = o.m_Audience_size_lower_bound;
    if(o.audienceSizeUpperBoundIsSet())
        j["audience_size_upper_bound"] = o.m_Audience_size_upper_bound;
    
}

void from_json(const nlohmann::json& j, AdGroupAudienceSizingResponse& o)
{
    if(j.find("audience_size_lower_bound") != j.end())
    {
        j.at("audience_size_lower_bound").get_to(o.m_Audience_size_lower_bound);
        o.m_Audience_size_lower_boundIsSet = true;
    } 
    if(j.find("audience_size_upper_bound") != j.end())
    {
        j.at("audience_size_upper_bound").get_to(o.m_Audience_size_upper_bound);
        o.m_Audience_size_upper_boundIsSet = true;
    } 
    
}

double AdGroupAudienceSizingResponse::getAudienceSizeLowerBound() const
{
    return m_Audience_size_lower_bound;
}
void AdGroupAudienceSizingResponse::setAudienceSizeLowerBound(double const value)
{
    m_Audience_size_lower_bound = value;
    m_Audience_size_lower_boundIsSet = true;
}
bool AdGroupAudienceSizingResponse::audienceSizeLowerBoundIsSet() const
{
    return m_Audience_size_lower_boundIsSet;
}
void AdGroupAudienceSizingResponse::unsetAudience_size_lower_bound()
{
    m_Audience_size_lower_boundIsSet = false;
}
double AdGroupAudienceSizingResponse::getAudienceSizeUpperBound() const
{
    return m_Audience_size_upper_bound;
}
void AdGroupAudienceSizingResponse::setAudienceSizeUpperBound(double const value)
{
    m_Audience_size_upper_bound = value;
    m_Audience_size_upper_boundIsSet = true;
}
bool AdGroupAudienceSizingResponse::audienceSizeUpperBoundIsSet() const
{
    return m_Audience_size_upper_boundIsSet;
}
void AdGroupAudienceSizingResponse::unsetAudience_size_upper_bound()
{
    m_Audience_size_upper_boundIsSet = false;
}


} // namespace org::openapitools::server::model

