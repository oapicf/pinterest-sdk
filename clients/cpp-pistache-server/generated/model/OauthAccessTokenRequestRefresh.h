/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * OauthAccessTokenRequestRefresh.h
 *
 * A request to exchange a refresh token for a new access token.
 */

#ifndef OauthAccessTokenRequestRefresh_H_
#define OauthAccessTokenRequestRefresh_H_


#include <string>
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// A request to exchange a refresh token for a new access token.
/// </summary>
class  OauthAccessTokenRequestRefresh
{
public:
    OauthAccessTokenRequestRefresh();
    virtual ~OauthAccessTokenRequestRefresh() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const OauthAccessTokenRequestRefresh& rhs) const;
    bool operator!=(const OauthAccessTokenRequestRefresh& rhs) const;

    /////////////////////////////////////////////
    /// OauthAccessTokenRequestRefresh members

    /// <summary>
    /// 
    /// </summary>
    std::string getGrantType() const;
    void setGrantType(std::string const& value);
    /// <summary>
    /// 
    /// </summary>
    std::string getRefreshToken() const;
    void setRefreshToken(std::string const& value);
    /// <summary>
    /// 
    /// </summary>
    std::string getScope() const;
    void setScope(std::string const& value);
    bool scopeIsSet() const;
    void unsetScope();
    /// <summary>
    /// Setting this field to &lt;code&gt;true&lt;/code&gt; will add a new refresh token to your 200 response, as well as the refresh_token_expires_in and refresh_token_expires_at fields. To see the structure of this payload, set the 200 response_type to \&quot;everlasting_refresh\&quot;.
    /// </summary>
    bool isRefreshOn() const;
    void setRefreshOn(bool const value);
    bool refreshOnIsSet() const;
    void unsetRefresh_on();

    friend  void to_json(nlohmann::json& j, const OauthAccessTokenRequestRefresh& o);
    friend  void from_json(const nlohmann::json& j, OauthAccessTokenRequestRefresh& o);
protected:
    std::string m_Grant_type;

    std::string m_Refresh_token;

    std::string m_Scope;
    bool m_ScopeIsSet;
    bool m_Refresh_on;
    bool m_Refresh_onIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* OauthAccessTokenRequestRefresh_H_ */
