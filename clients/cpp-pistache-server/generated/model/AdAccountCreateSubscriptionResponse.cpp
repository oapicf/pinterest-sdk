/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "AdAccountCreateSubscriptionResponse.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

AdAccountCreateSubscriptionResponse::AdAccountCreateSubscriptionResponse()
{
    m_Id = "";
    m_IdIsSet = false;
    m_Cryptographic_key = "";
    m_Cryptographic_keyIsSet = false;
    m_Cryptographic_algorithm = "";
    m_Cryptographic_algorithmIsSet = false;
    m_Created_time = 0;
    m_Created_timeIsSet = false;
    
}

void AdAccountCreateSubscriptionResponse::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool AdAccountCreateSubscriptionResponse::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool AdAccountCreateSubscriptionResponse::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "AdAccountCreateSubscriptionResponse" : pathPrefix;

         
    if (idIsSet())
    {
        const std::string& value = m_Id;
        const std::string currentValuePath = _pathPrefix + ".id";
                
        

    }
                
    return success;
}

bool AdAccountCreateSubscriptionResponse::operator==(const AdAccountCreateSubscriptionResponse& rhs) const
{
    return
    
    
    
    ((!idIsSet() && !rhs.idIsSet()) || (idIsSet() && rhs.idIsSet() && getId() == rhs.getId())) &&
    
    
    ((!cryptographicKeyIsSet() && !rhs.cryptographicKeyIsSet()) || (cryptographicKeyIsSet() && rhs.cryptographicKeyIsSet() && getCryptographicKey() == rhs.getCryptographicKey())) &&
    
    
    ((!cryptographicAlgorithmIsSet() && !rhs.cryptographicAlgorithmIsSet()) || (cryptographicAlgorithmIsSet() && rhs.cryptographicAlgorithmIsSet() && getCryptographicAlgorithm() == rhs.getCryptographicAlgorithm())) &&
    
    
    ((!createdTimeIsSet() && !rhs.createdTimeIsSet()) || (createdTimeIsSet() && rhs.createdTimeIsSet() && getCreatedTime() == rhs.getCreatedTime()))
    
    ;
}

bool AdAccountCreateSubscriptionResponse::operator!=(const AdAccountCreateSubscriptionResponse& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const AdAccountCreateSubscriptionResponse& o)
{
    j = nlohmann::json::object();
    if(o.idIsSet())
        j["id"] = o.m_Id;
    if(o.cryptographicKeyIsSet())
        j["cryptographic_key"] = o.m_Cryptographic_key;
    if(o.cryptographicAlgorithmIsSet())
        j["cryptographic_algorithm"] = o.m_Cryptographic_algorithm;
    if(o.createdTimeIsSet())
        j["created_time"] = o.m_Created_time;
    
}

void from_json(const nlohmann::json& j, AdAccountCreateSubscriptionResponse& o)
{
    if(j.find("id") != j.end())
    {
        j.at("id").get_to(o.m_Id);
        o.m_IdIsSet = true;
    } 
    if(j.find("cryptographic_key") != j.end())
    {
        j.at("cryptographic_key").get_to(o.m_Cryptographic_key);
        o.m_Cryptographic_keyIsSet = true;
    } 
    if(j.find("cryptographic_algorithm") != j.end())
    {
        j.at("cryptographic_algorithm").get_to(o.m_Cryptographic_algorithm);
        o.m_Cryptographic_algorithmIsSet = true;
    } 
    if(j.find("created_time") != j.end())
    {
        j.at("created_time").get_to(o.m_Created_time);
        o.m_Created_timeIsSet = true;
    } 
    
}

std::string AdAccountCreateSubscriptionResponse::getId() const
{
    return m_Id;
}
void AdAccountCreateSubscriptionResponse::setId(std::string const& value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool AdAccountCreateSubscriptionResponse::idIsSet() const
{
    return m_IdIsSet;
}
void AdAccountCreateSubscriptionResponse::unsetId()
{
    m_IdIsSet = false;
}
std::string AdAccountCreateSubscriptionResponse::getCryptographicKey() const
{
    return m_Cryptographic_key;
}
void AdAccountCreateSubscriptionResponse::setCryptographicKey(std::string const& value)
{
    m_Cryptographic_key = value;
    m_Cryptographic_keyIsSet = true;
}
bool AdAccountCreateSubscriptionResponse::cryptographicKeyIsSet() const
{
    return m_Cryptographic_keyIsSet;
}
void AdAccountCreateSubscriptionResponse::unsetCryptographic_key()
{
    m_Cryptographic_keyIsSet = false;
}
std::string AdAccountCreateSubscriptionResponse::getCryptographicAlgorithm() const
{
    return m_Cryptographic_algorithm;
}
void AdAccountCreateSubscriptionResponse::setCryptographicAlgorithm(std::string const& value)
{
    m_Cryptographic_algorithm = value;
    m_Cryptographic_algorithmIsSet = true;
}
bool AdAccountCreateSubscriptionResponse::cryptographicAlgorithmIsSet() const
{
    return m_Cryptographic_algorithmIsSet;
}
void AdAccountCreateSubscriptionResponse::unsetCryptographic_algorithm()
{
    m_Cryptographic_algorithmIsSet = false;
}
int32_t AdAccountCreateSubscriptionResponse::getCreatedTime() const
{
    return m_Created_time;
}
void AdAccountCreateSubscriptionResponse::setCreatedTime(int32_t const value)
{
    m_Created_time = value;
    m_Created_timeIsSet = true;
}
bool AdAccountCreateSubscriptionResponse::createdTimeIsSet() const
{
    return m_Created_timeIsSet;
}
void AdAccountCreateSubscriptionResponse::unsetCreated_time()
{
    m_Created_timeIsSet = false;
}


} // namespace org::openapitools::server::model

