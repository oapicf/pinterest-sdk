/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "BusinessAccessUserSummary.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

BusinessAccessUserSummary::BusinessAccessUserSummary()
{
    m_Email = "";
    m_EmailIsSet = false;
    m_Id = "";
    m_IdIsSet = false;
    m_Username = "";
    m_UsernameIsSet = false;
    
}

void BusinessAccessUserSummary::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool BusinessAccessUserSummary::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool BusinessAccessUserSummary::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "BusinessAccessUserSummary" : pathPrefix;

             
    if (idIsSet())
    {
        const std::string& value = m_Id;
        const std::string currentValuePath = _pathPrefix + ".id";
                
        
        if (value.length() < 1)
        {
            success = false;
            msg << currentValuePath << ": must be at least 1 characters long;";
        }
        if (value.length() > 20)
        {
            success = false;
            msg << currentValuePath << ": must be at most 20 characters long;";
        }

    }
        
    return success;
}

bool BusinessAccessUserSummary::operator==(const BusinessAccessUserSummary& rhs) const
{
    return
    
    
    
    ((!emailIsSet() && !rhs.emailIsSet()) || (emailIsSet() && rhs.emailIsSet() && getEmail() == rhs.getEmail())) &&
    
    
    ((!idIsSet() && !rhs.idIsSet()) || (idIsSet() && rhs.idIsSet() && getId() == rhs.getId())) &&
    
    
    ((!usernameIsSet() && !rhs.usernameIsSet()) || (usernameIsSet() && rhs.usernameIsSet() && getUsername() == rhs.getUsername()))
    
    ;
}

bool BusinessAccessUserSummary::operator!=(const BusinessAccessUserSummary& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const BusinessAccessUserSummary& o)
{
    j = nlohmann::json::object();
    if(o.emailIsSet())
        j["email"] = o.m_Email;
    if(o.idIsSet())
        j["id"] = o.m_Id;
    if(o.usernameIsSet())
        j["username"] = o.m_Username;
    
}

void from_json(const nlohmann::json& j, BusinessAccessUserSummary& o)
{
    if(j.find("email") != j.end())
    {
        j.at("email").get_to(o.m_Email);
        o.m_EmailIsSet = true;
    } 
    if(j.find("id") != j.end())
    {
        j.at("id").get_to(o.m_Id);
        o.m_IdIsSet = true;
    } 
    if(j.find("username") != j.end())
    {
        j.at("username").get_to(o.m_Username);
        o.m_UsernameIsSet = true;
    } 
    
}

std::string BusinessAccessUserSummary::getEmail() const
{
    return m_Email;
}
void BusinessAccessUserSummary::setEmail(std::string const& value)
{
    m_Email = value;
    m_EmailIsSet = true;
}
bool BusinessAccessUserSummary::emailIsSet() const
{
    return m_EmailIsSet;
}
void BusinessAccessUserSummary::unsetEmail()
{
    m_EmailIsSet = false;
}
std::string BusinessAccessUserSummary::getId() const
{
    return m_Id;
}
void BusinessAccessUserSummary::setId(std::string const& value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool BusinessAccessUserSummary::idIsSet() const
{
    return m_IdIsSet;
}
void BusinessAccessUserSummary::unsetId()
{
    m_IdIsSet = false;
}
std::string BusinessAccessUserSummary::getUsername() const
{
    return m_Username;
}
void BusinessAccessUserSummary::setUsername(std::string const& value)
{
    m_Username = value;
    m_UsernameIsSet = true;
}
bool BusinessAccessUserSummary::usernameIsSet() const
{
    return m_UsernameIsSet;
}
void BusinessAccessUserSummary::unsetUsername()
{
    m_UsernameIsSet = false;
}


} // namespace org::openapitools::server::model

