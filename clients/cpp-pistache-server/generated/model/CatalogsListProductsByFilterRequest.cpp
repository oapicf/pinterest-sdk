/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "CatalogsListProductsByFilterRequest.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

CatalogsListProductsByFilterRequest::CatalogsListProductsByFilterRequest()
{
    m_Feed_id = "";
    m_Catalog_type = "";
    m_Catalog_id = "";
    
}

void CatalogsListProductsByFilterRequest::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool CatalogsListProductsByFilterRequest::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool CatalogsListProductsByFilterRequest::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "CatalogsListProductsByFilterRequest" : pathPrefix;

         
    
    /* Feed_id */ {
        const std::string& value = m_Feed_id;
        const std::string currentValuePath = _pathPrefix + ".feedId";
                
        

    }
        
    if (!m_Filters.validate(msg, _pathPrefix + ".filters")) {
        msg << _pathPrefix << ": Filters is invalid;";
        success = false;
    }         
    
    /* Catalog_id */ {
        const std::string& value = m_Catalog_id;
        const std::string currentValuePath = _pathPrefix + ".catalogId";
                
        

    }
            
    return success;
}

bool CatalogsListProductsByFilterRequest::operator==(const CatalogsListProductsByFilterRequest& rhs) const
{
    return
    
    
    (getFeedId() == rhs.getFeedId())
     &&
    
    (getFilters() == rhs.getFilters())
     &&
    
    (getCatalogType() == rhs.getCatalogType())
     &&
    
    (getCatalogId() == rhs.getCatalogId())
     &&
    
    (getCountry() == rhs.getCountry())
     &&
    
    (getLocale() == rhs.getLocale())
    
    
    ;
}

bool CatalogsListProductsByFilterRequest::operator!=(const CatalogsListProductsByFilterRequest& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const CatalogsListProductsByFilterRequest& o)
{
    j = nlohmann::json::object();
    j["feed_id"] = o.m_Feed_id;
    j["filters"] = o.m_Filters;
    j["catalog_type"] = o.m_Catalog_type;
    j["catalog_id"] = o.m_Catalog_id;
    j["country"] = o.m_Country;
    j["locale"] = o.m_Locale;
    
}

void from_json(const nlohmann::json& j, CatalogsListProductsByFilterRequest& o)
{
    j.at("feed_id").get_to(o.m_Feed_id);
    j.at("filters").get_to(o.m_Filters);
    j.at("catalog_type").get_to(o.m_Catalog_type);
    j.at("catalog_id").get_to(o.m_Catalog_id);
    j.at("country").get_to(o.m_Country);
    j.at("locale").get_to(o.m_Locale);
    
}

std::string CatalogsListProductsByFilterRequest::getFeedId() const
{
    return m_Feed_id;
}
void CatalogsListProductsByFilterRequest::setFeedId(std::string const& value)
{
    m_Feed_id = value;
}
org::openapitools::server::model::CatalogsCreativeAssetsProductGroupFilters CatalogsListProductsByFilterRequest::getFilters() const
{
    return m_Filters;
}
void CatalogsListProductsByFilterRequest::setFilters(org::openapitools::server::model::CatalogsCreativeAssetsProductGroupFilters const& value)
{
    m_Filters = value;
}
std::string CatalogsListProductsByFilterRequest::getCatalogType() const
{
    return m_Catalog_type;
}
void CatalogsListProductsByFilterRequest::setCatalogType(std::string const& value)
{
    m_Catalog_type = value;
}
std::string CatalogsListProductsByFilterRequest::getCatalogId() const
{
    return m_Catalog_id;
}
void CatalogsListProductsByFilterRequest::setCatalogId(std::string const& value)
{
    m_Catalog_id = value;
}
org::openapitools::server::model::Country CatalogsListProductsByFilterRequest::getCountry() const
{
    return m_Country;
}
void CatalogsListProductsByFilterRequest::setCountry(org::openapitools::server::model::Country const& value)
{
    m_Country = value;
}
org::openapitools::server::model::CatalogsLocale CatalogsListProductsByFilterRequest::getLocale() const
{
    return m_Locale;
}
void CatalogsListProductsByFilterRequest::setLocale(org::openapitools::server::model::CatalogsLocale const& value)
{
    m_Locale = value;
}


} // namespace org::openapitools::server::model

