/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "Board_media.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

Board_media::Board_media()
{
    m_Image_cover_url = "";
    m_Image_cover_urlIsSet = false;
    m_Pin_thumbnail_urlsIsSet = false;
    
}

void Board_media::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool Board_media::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool Board_media::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "Board_media" : pathPrefix;

             
    if (pinThumbnailUrlsIsSet())
    {
        const std::vector<std::string>& value = m_Pin_thumbnail_urls;
        const std::string currentValuePath = _pathPrefix + ".pinThumbnailUrls";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const std::string& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }

    }
    
    return success;
}

bool Board_media::operator==(const Board_media& rhs) const
{
    return
    
    
    
    ((!imageCoverUrlIsSet() && !rhs.imageCoverUrlIsSet()) || (imageCoverUrlIsSet() && rhs.imageCoverUrlIsSet() && getImageCoverUrl() == rhs.getImageCoverUrl())) &&
    
    
    ((!pinThumbnailUrlsIsSet() && !rhs.pinThumbnailUrlsIsSet()) || (pinThumbnailUrlsIsSet() && rhs.pinThumbnailUrlsIsSet() && getPinThumbnailUrls() == rhs.getPinThumbnailUrls()))
    
    ;
}

bool Board_media::operator!=(const Board_media& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const Board_media& o)
{
    j = nlohmann::json::object();
    if(o.imageCoverUrlIsSet())
        j["image_cover_url"] = o.m_Image_cover_url;
    if(o.pinThumbnailUrlsIsSet() || !o.m_Pin_thumbnail_urls.empty())
        j["pin_thumbnail_urls"] = o.m_Pin_thumbnail_urls;
    
}

void from_json(const nlohmann::json& j, Board_media& o)
{
    if(j.find("image_cover_url") != j.end())
    {
        j.at("image_cover_url").get_to(o.m_Image_cover_url);
        o.m_Image_cover_urlIsSet = true;
    } 
    if(j.find("pin_thumbnail_urls") != j.end())
    {
        j.at("pin_thumbnail_urls").get_to(o.m_Pin_thumbnail_urls);
        o.m_Pin_thumbnail_urlsIsSet = true;
    } 
    
}

std::string Board_media::getImageCoverUrl() const
{
    return m_Image_cover_url;
}
void Board_media::setImageCoverUrl(std::string const& value)
{
    m_Image_cover_url = value;
    m_Image_cover_urlIsSet = true;
}
bool Board_media::imageCoverUrlIsSet() const
{
    return m_Image_cover_urlIsSet;
}
void Board_media::unsetImage_cover_url()
{
    m_Image_cover_urlIsSet = false;
}
std::vector<std::string> Board_media::getPinThumbnailUrls() const
{
    return m_Pin_thumbnail_urls;
}
void Board_media::setPinThumbnailUrls(std::vector<std::string> const& value)
{
    m_Pin_thumbnail_urls = value;
    m_Pin_thumbnail_urlsIsSet = true;
}
bool Board_media::pinThumbnailUrlsIsSet() const
{
    return m_Pin_thumbnail_urlsIsSet;
}
void Board_media::unsetPin_thumbnail_urls()
{
    m_Pin_thumbnail_urlsIsSet = false;
}


} // namespace org::openapitools::server::model

