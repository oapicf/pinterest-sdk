/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "CatalogsRetailProductGroupProductCounts.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

CatalogsRetailProductGroupProductCounts::CatalogsRetailProductGroupProductCounts()
{
    m_Catalog_type = "";
    m_In_stock = 0.0;
    m_Out_of_stock = 0.0;
    m_Preorder = 0.0;
    m_Total = 0.0;
    m_Videos = 0.0;
    m_VideosIsSet = false;
    
}

void CatalogsRetailProductGroupProductCounts::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool CatalogsRetailProductGroupProductCounts::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool CatalogsRetailProductGroupProductCounts::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "CatalogsRetailProductGroupProductCounts" : pathPrefix;

             
    
    /* In_stock */ {
        const double& value = m_In_stock;
        const std::string currentValuePath = _pathPrefix + ".inStock";
                
        
        if (value < 0)
        {
            success = false;
            msg << currentValuePath << ": must be greater than or equal to 0;";
        }

    }
         
    
    /* Out_of_stock */ {
        const double& value = m_Out_of_stock;
        const std::string currentValuePath = _pathPrefix + ".outOfStock";
                
        
        if (value < 0)
        {
            success = false;
            msg << currentValuePath << ": must be greater than or equal to 0;";
        }

    }
         
    
    /* Preorder */ {
        const double& value = m_Preorder;
        const std::string currentValuePath = _pathPrefix + ".preorder";
                
        
        if (value < 0)
        {
            success = false;
            msg << currentValuePath << ": must be greater than or equal to 0;";
        }

    }
         
    
    /* Total */ {
        const double& value = m_Total;
        const std::string currentValuePath = _pathPrefix + ".total";
                
        
        if (value < 0)
        {
            success = false;
            msg << currentValuePath << ": must be greater than or equal to 0;";
        }

    }
         
    if (videosIsSet())
    {
        const double& value = m_Videos;
        const std::string currentValuePath = _pathPrefix + ".videos";
                
        
        if (value < 0)
        {
            success = false;
            msg << currentValuePath << ": must be greater than or equal to 0;";
        }

    }
    
    return success;
}

bool CatalogsRetailProductGroupProductCounts::operator==(const CatalogsRetailProductGroupProductCounts& rhs) const
{
    return
    
    
    (getCatalogType() == rhs.getCatalogType())
     &&
    
    (getInStock() == rhs.getInStock())
     &&
    
    (getOutOfStock() == rhs.getOutOfStock())
     &&
    
    (getPreorder() == rhs.getPreorder())
     &&
    
    (getTotal() == rhs.getTotal())
     &&
    
    
    ((!videosIsSet() && !rhs.videosIsSet()) || (videosIsSet() && rhs.videosIsSet() && getVideos() == rhs.getVideos()))
    
    ;
}

bool CatalogsRetailProductGroupProductCounts::operator!=(const CatalogsRetailProductGroupProductCounts& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const CatalogsRetailProductGroupProductCounts& o)
{
    j = nlohmann::json::object();
    j["catalog_type"] = o.m_Catalog_type;
    j["in_stock"] = o.m_In_stock;
    j["out_of_stock"] = o.m_Out_of_stock;
    j["preorder"] = o.m_Preorder;
    j["total"] = o.m_Total;
    if(o.videosIsSet())
        j["videos"] = o.m_Videos;
    
}

void from_json(const nlohmann::json& j, CatalogsRetailProductGroupProductCounts& o)
{
    j.at("catalog_type").get_to(o.m_Catalog_type);
    j.at("in_stock").get_to(o.m_In_stock);
    j.at("out_of_stock").get_to(o.m_Out_of_stock);
    j.at("preorder").get_to(o.m_Preorder);
    j.at("total").get_to(o.m_Total);
    if(j.find("videos") != j.end())
    {
        j.at("videos").get_to(o.m_Videos);
        o.m_VideosIsSet = true;
    } 
    
}

std::string CatalogsRetailProductGroupProductCounts::getCatalogType() const
{
    return m_Catalog_type;
}
void CatalogsRetailProductGroupProductCounts::setCatalogType(std::string const& value)
{
    m_Catalog_type = value;
}
double CatalogsRetailProductGroupProductCounts::getInStock() const
{
    return m_In_stock;
}
void CatalogsRetailProductGroupProductCounts::setInStock(double const value)
{
    m_In_stock = value;
}
double CatalogsRetailProductGroupProductCounts::getOutOfStock() const
{
    return m_Out_of_stock;
}
void CatalogsRetailProductGroupProductCounts::setOutOfStock(double const value)
{
    m_Out_of_stock = value;
}
double CatalogsRetailProductGroupProductCounts::getPreorder() const
{
    return m_Preorder;
}
void CatalogsRetailProductGroupProductCounts::setPreorder(double const value)
{
    m_Preorder = value;
}
double CatalogsRetailProductGroupProductCounts::getTotal() const
{
    return m_Total;
}
void CatalogsRetailProductGroupProductCounts::setTotal(double const value)
{
    m_Total = value;
}
double CatalogsRetailProductGroupProductCounts::getVideos() const
{
    return m_Videos;
}
void CatalogsRetailProductGroupProductCounts::setVideos(double const value)
{
    m_Videos = value;
    m_VideosIsSet = true;
}
bool CatalogsRetailProductGroupProductCounts::videosIsSet() const
{
    return m_VideosIsSet;
}
void CatalogsRetailProductGroupProductCounts::unsetVideos()
{
    m_VideosIsSet = false;
}


} // namespace org::openapitools::server::model

