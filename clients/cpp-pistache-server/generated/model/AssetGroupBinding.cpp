/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "AssetGroupBinding.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

AssetGroupBinding::AssetGroupBinding()
{
    m_Id = "";
    m_IdIsSet = false;
    m_Asset_group_name = "";
    m_Asset_group_nameIsSet = false;
    m_Asset_group_description = "";
    m_Asset_group_descriptionIsSet = false;
    m_Asset_group_typesIsSet = false;
    m_Ad_accounts_idsIsSet = false;
    m_Profiles_idsIsSet = false;
    m_Created_time = 0;
    m_Created_timeIsSet = false;
    m_Updated_time = 0;
    m_Updated_timeIsSet = false;
    m_OwnerIsSet = false;
    m_Created_byIsSet = false;
    
}

void AssetGroupBinding::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool AssetGroupBinding::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool AssetGroupBinding::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "AssetGroupBinding" : pathPrefix;

         
    if (idIsSet())
    {
        const std::string& value = m_Id;
        const std::string currentValuePath = _pathPrefix + ".id";
                
        

    }
                 
    if (assetGroupTypesIsSet())
    {
        const std::vector<std::string>& value = m_Asset_group_types;
        const std::string currentValuePath = _pathPrefix + ".assetGroupTypes";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const std::string& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }

    }
         
    if (adAccountsIdsIsSet())
    {
        const std::vector<std::string>& value = m_Ad_accounts_ids;
        const std::string currentValuePath = _pathPrefix + ".adAccountsIds";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const std::string& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }

    }
         
    if (profilesIdsIsSet())
    {
        const std::vector<std::string>& value = m_Profiles_ids;
        const std::string currentValuePath = _pathPrefix + ".profilesIds";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const std::string& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }

    }
                    
    return success;
}

bool AssetGroupBinding::operator==(const AssetGroupBinding& rhs) const
{
    return
    
    
    
    ((!idIsSet() && !rhs.idIsSet()) || (idIsSet() && rhs.idIsSet() && getId() == rhs.getId())) &&
    
    
    ((!assetGroupNameIsSet() && !rhs.assetGroupNameIsSet()) || (assetGroupNameIsSet() && rhs.assetGroupNameIsSet() && getAssetGroupName() == rhs.getAssetGroupName())) &&
    
    
    ((!assetGroupDescriptionIsSet() && !rhs.assetGroupDescriptionIsSet()) || (assetGroupDescriptionIsSet() && rhs.assetGroupDescriptionIsSet() && getAssetGroupDescription() == rhs.getAssetGroupDescription())) &&
    
    
    ((!assetGroupTypesIsSet() && !rhs.assetGroupTypesIsSet()) || (assetGroupTypesIsSet() && rhs.assetGroupTypesIsSet() && getAssetGroupTypes() == rhs.getAssetGroupTypes())) &&
    
    
    ((!adAccountsIdsIsSet() && !rhs.adAccountsIdsIsSet()) || (adAccountsIdsIsSet() && rhs.adAccountsIdsIsSet() && getAdAccountsIds() == rhs.getAdAccountsIds())) &&
    
    
    ((!profilesIdsIsSet() && !rhs.profilesIdsIsSet()) || (profilesIdsIsSet() && rhs.profilesIdsIsSet() && getProfilesIds() == rhs.getProfilesIds())) &&
    
    
    ((!createdTimeIsSet() && !rhs.createdTimeIsSet()) || (createdTimeIsSet() && rhs.createdTimeIsSet() && getCreatedTime() == rhs.getCreatedTime())) &&
    
    
    ((!updatedTimeIsSet() && !rhs.updatedTimeIsSet()) || (updatedTimeIsSet() && rhs.updatedTimeIsSet() && getUpdatedTime() == rhs.getUpdatedTime())) &&
    
    
    ((!ownerIsSet() && !rhs.ownerIsSet()) || (ownerIsSet() && rhs.ownerIsSet() && getOwner() == rhs.getOwner())) &&
    
    
    ((!createdByIsSet() && !rhs.createdByIsSet()) || (createdByIsSet() && rhs.createdByIsSet() && getCreatedBy() == rhs.getCreatedBy()))
    
    ;
}

bool AssetGroupBinding::operator!=(const AssetGroupBinding& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const AssetGroupBinding& o)
{
    j = nlohmann::json::object();
    if(o.idIsSet())
        j["id"] = o.m_Id;
    if(o.assetGroupNameIsSet())
        j["asset_group_name"] = o.m_Asset_group_name;
    if(o.assetGroupDescriptionIsSet())
        j["asset_group_description"] = o.m_Asset_group_description;
    if(o.assetGroupTypesIsSet() || !o.m_Asset_group_types.empty())
        j["asset_group_types"] = o.m_Asset_group_types;
    if(o.adAccountsIdsIsSet() || !o.m_Ad_accounts_ids.empty())
        j["ad_accounts_ids"] = o.m_Ad_accounts_ids;
    if(o.profilesIdsIsSet() || !o.m_Profiles_ids.empty())
        j["profiles_ids"] = o.m_Profiles_ids;
    if(o.createdTimeIsSet())
        j["created_time"] = o.m_Created_time;
    if(o.updatedTimeIsSet())
        j["updated_time"] = o.m_Updated_time;
    if(o.ownerIsSet())
        j["owner"] = o.m_Owner;
    if(o.createdByIsSet())
        j["created_by"] = o.m_Created_by;
    
}

void from_json(const nlohmann::json& j, AssetGroupBinding& o)
{
    if(j.find("id") != j.end())
    {
        j.at("id").get_to(o.m_Id);
        o.m_IdIsSet = true;
    } 
    if(j.find("asset_group_name") != j.end())
    {
        j.at("asset_group_name").get_to(o.m_Asset_group_name);
        o.m_Asset_group_nameIsSet = true;
    } 
    if(j.find("asset_group_description") != j.end())
    {
        j.at("asset_group_description").get_to(o.m_Asset_group_description);
        o.m_Asset_group_descriptionIsSet = true;
    } 
    if(j.find("asset_group_types") != j.end())
    {
        j.at("asset_group_types").get_to(o.m_Asset_group_types);
        o.m_Asset_group_typesIsSet = true;
    } 
    if(j.find("ad_accounts_ids") != j.end())
    {
        j.at("ad_accounts_ids").get_to(o.m_Ad_accounts_ids);
        o.m_Ad_accounts_idsIsSet = true;
    } 
    if(j.find("profiles_ids") != j.end())
    {
        j.at("profiles_ids").get_to(o.m_Profiles_ids);
        o.m_Profiles_idsIsSet = true;
    } 
    if(j.find("created_time") != j.end())
    {
        j.at("created_time").get_to(o.m_Created_time);
        o.m_Created_timeIsSet = true;
    } 
    if(j.find("updated_time") != j.end())
    {
        j.at("updated_time").get_to(o.m_Updated_time);
        o.m_Updated_timeIsSet = true;
    } 
    if(j.find("owner") != j.end())
    {
        j.at("owner").get_to(o.m_Owner);
        o.m_OwnerIsSet = true;
    } 
    if(j.find("created_by") != j.end())
    {
        j.at("created_by").get_to(o.m_Created_by);
        o.m_Created_byIsSet = true;
    } 
    
}

std::string AssetGroupBinding::getId() const
{
    return m_Id;
}
void AssetGroupBinding::setId(std::string const& value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool AssetGroupBinding::idIsSet() const
{
    return m_IdIsSet;
}
void AssetGroupBinding::unsetId()
{
    m_IdIsSet = false;
}
std::string AssetGroupBinding::getAssetGroupName() const
{
    return m_Asset_group_name;
}
void AssetGroupBinding::setAssetGroupName(std::string const& value)
{
    m_Asset_group_name = value;
    m_Asset_group_nameIsSet = true;
}
bool AssetGroupBinding::assetGroupNameIsSet() const
{
    return m_Asset_group_nameIsSet;
}
void AssetGroupBinding::unsetAsset_group_name()
{
    m_Asset_group_nameIsSet = false;
}
std::string AssetGroupBinding::getAssetGroupDescription() const
{
    return m_Asset_group_description;
}
void AssetGroupBinding::setAssetGroupDescription(std::string const& value)
{
    m_Asset_group_description = value;
    m_Asset_group_descriptionIsSet = true;
}
bool AssetGroupBinding::assetGroupDescriptionIsSet() const
{
    return m_Asset_group_descriptionIsSet;
}
void AssetGroupBinding::unsetAsset_group_description()
{
    m_Asset_group_descriptionIsSet = false;
}
std::vector<std::string> AssetGroupBinding::getAssetGroupTypes() const
{
    return m_Asset_group_types;
}
void AssetGroupBinding::setAssetGroupTypes(std::vector<std::string> const& value)
{
    m_Asset_group_types = value;
    m_Asset_group_typesIsSet = true;
}
bool AssetGroupBinding::assetGroupTypesIsSet() const
{
    return m_Asset_group_typesIsSet;
}
void AssetGroupBinding::unsetAsset_group_types()
{
    m_Asset_group_typesIsSet = false;
}
std::vector<std::string> AssetGroupBinding::getAdAccountsIds() const
{
    return m_Ad_accounts_ids;
}
void AssetGroupBinding::setAdAccountsIds(std::vector<std::string> const& value)
{
    m_Ad_accounts_ids = value;
    m_Ad_accounts_idsIsSet = true;
}
bool AssetGroupBinding::adAccountsIdsIsSet() const
{
    return m_Ad_accounts_idsIsSet;
}
void AssetGroupBinding::unsetAd_accounts_ids()
{
    m_Ad_accounts_idsIsSet = false;
}
std::vector<std::string> AssetGroupBinding::getProfilesIds() const
{
    return m_Profiles_ids;
}
void AssetGroupBinding::setProfilesIds(std::vector<std::string> const& value)
{
    m_Profiles_ids = value;
    m_Profiles_idsIsSet = true;
}
bool AssetGroupBinding::profilesIdsIsSet() const
{
    return m_Profiles_idsIsSet;
}
void AssetGroupBinding::unsetProfiles_ids()
{
    m_Profiles_idsIsSet = false;
}
int32_t AssetGroupBinding::getCreatedTime() const
{
    return m_Created_time;
}
void AssetGroupBinding::setCreatedTime(int32_t const value)
{
    m_Created_time = value;
    m_Created_timeIsSet = true;
}
bool AssetGroupBinding::createdTimeIsSet() const
{
    return m_Created_timeIsSet;
}
void AssetGroupBinding::unsetCreated_time()
{
    m_Created_timeIsSet = false;
}
int32_t AssetGroupBinding::getUpdatedTime() const
{
    return m_Updated_time;
}
void AssetGroupBinding::setUpdatedTime(int32_t const value)
{
    m_Updated_time = value;
    m_Updated_timeIsSet = true;
}
bool AssetGroupBinding::updatedTimeIsSet() const
{
    return m_Updated_timeIsSet;
}
void AssetGroupBinding::unsetUpdated_time()
{
    m_Updated_timeIsSet = false;
}
org::openapitools::server::model::BusinessAccessUserSummary AssetGroupBinding::getOwner() const
{
    return m_Owner;
}
void AssetGroupBinding::setOwner(org::openapitools::server::model::BusinessAccessUserSummary const& value)
{
    m_Owner = value;
    m_OwnerIsSet = true;
}
bool AssetGroupBinding::ownerIsSet() const
{
    return m_OwnerIsSet;
}
void AssetGroupBinding::unsetOwner()
{
    m_OwnerIsSet = false;
}
org::openapitools::server::model::BusinessAccessUserSummary AssetGroupBinding::getCreatedBy() const
{
    return m_Created_by;
}
void AssetGroupBinding::setCreatedBy(org::openapitools::server::model::BusinessAccessUserSummary const& value)
{
    m_Created_by = value;
    m_Created_byIsSet = true;
}
bool AssetGroupBinding::createdByIsSet() const
{
    return m_Created_byIsSet;
}
void AssetGroupBinding::unsetCreated_by()
{
    m_Created_byIsSet = false;
}


} // namespace org::openapitools::server::model

