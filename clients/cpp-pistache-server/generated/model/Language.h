/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * Language.h
 *
 * Language code, which is among the offical ISO 639-1 language list.
 */

#ifndef Language_H_
#define Language_H_


#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// Language code, which is among the offical ISO 639-1 language list.
/// </summary>
class  Language
{
public:
    Language();
    virtual ~Language() = default;

    enum class eLanguage {
    // To have a valid default value.
    // Avoiding name clashes with user defined
    // enum values
    INVALID_VALUE_OPENAPI_GENERATED = 0,
    AM, 
    AR, 
    AZ, 
    BG, 
    BN, 
    BS, 
    CA, 
    CS, 
    DA, 
    DV, 
    DZ, 
    DE, 
    EL, 
    EN, 
    ES, 
    ET, 
    FA, 
    FI, 
    FR, 
    HE, 
    HI, 
    HR, 
    HU, 
    HY, 
    ID, 
    IN, 
    IS, 
    IT, 
    IW, 
    JA, 
    KA, 
    KM, 
    KO, 
    LO, 
    LT, 
    LV, 
    MK, 
    MN, 
    MS, 
    MY, 
    NB, 
    NE, 
    NL, 
    NO, 
    PL, 
    PT, 
    RO, 
    RU, 
    SK, 
    SL, 
    SQ, 
    SR, 
    SV, 
    TL, 
    UK, 
    VI, 
    TE, 
    TH, 
    TR, 
    XX, 
    ZH
    };

    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const Language& rhs) const;
    bool operator!=(const Language& rhs) const;

    /////////////////////////////////////////////
    /// Language members

    Language::eLanguage getValue() const;
    void setValue(Language::eLanguage value);
    
    friend  void to_json(nlohmann::json& j, const Language& o);
    friend  void from_json(const nlohmann::json& j, Language& o);
protected:
    Language::eLanguage m_value = Language::eLanguage::INVALID_VALUE_OPENAPI_GENERATED;
};

} // namespace org::openapitools::server::model

#endif /* Language_H_ */
