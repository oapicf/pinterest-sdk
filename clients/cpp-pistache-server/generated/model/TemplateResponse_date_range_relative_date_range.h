/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * TemplateResponse_date_range_relative_date_range.h
 *
 * The relative date range of the template
 */

#ifndef TemplateResponse_date_range_relative_date_range_H_
#define TemplateResponse_date_range_relative_date_range_H_


#include <string>
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// The relative date range of the template
/// </summary>
class  TemplateResponse_date_range_relative_date_range
{
public:
    TemplateResponse_date_range_relative_date_range();
    virtual ~TemplateResponse_date_range_relative_date_range() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const TemplateResponse_date_range_relative_date_range& rhs) const;
    bool operator!=(const TemplateResponse_date_range_relative_date_range& rhs) const;

    /////////////////////////////////////////////
    /// TemplateResponse_date_range_relative_date_range members

    /// <summary>
    /// The date range type
    /// </summary>
    std::string getType() const;
    void setType(std::string const& value);
    bool typeIsSet() const;
    void unsetType();
    /// <summary>
    /// The start date of the date range
    /// </summary>
    double getStartDaysInPast() const;
    void setStartDaysInPast(double const value);
    bool startDaysInPastIsSet() const;
    void unsetStart_days_in_past();
    /// <summary>
    /// The end date of the date range
    /// </summary>
    double getEndDaysInPast() const;
    void setEndDaysInPast(double const value);
    bool endDaysInPastIsSet() const;
    void unsetEnd_days_in_past();

    friend  void to_json(nlohmann::json& j, const TemplateResponse_date_range_relative_date_range& o);
    friend  void from_json(const nlohmann::json& j, TemplateResponse_date_range_relative_date_range& o);
protected:
    std::string m_Type;
    bool m_TypeIsSet;
    double m_Start_days_in_past;
    bool m_Start_days_in_pastIsSet;
    double m_End_days_in_past;
    bool m_End_days_in_pastIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* TemplateResponse_date_range_relative_date_range_H_ */
