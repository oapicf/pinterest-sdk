/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "AdGroupAudienceSizingRequest.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

AdGroupAudienceSizingRequest::AdGroupAudienceSizingRequest()
{
    m_Auto_targeting_enabled = true;
    m_Auto_targeting_enabledIsSet = false;
    m_Placement_groupIsSet = false;
    m_Creative_typesIsSet = false;
    m_Targeting_specIsSet = false;
    m_Product_group_idsIsSet = false;
    m_KeywordsIsSet = false;
    
}

void AdGroupAudienceSizingRequest::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool AdGroupAudienceSizingRequest::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool AdGroupAudienceSizingRequest::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "AdGroupAudienceSizingRequest" : pathPrefix;

                 
    if (creativeTypesIsSet())
    {
        const std::vector<std::string>& value = m_Creative_types;
        const std::string currentValuePath = _pathPrefix + ".creativeTypes";
                
        success = value.validate(msg, currentValuePath) && success;
        
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const std::string& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
        if (
            value != "REGULAR" &&
            value != "VIDEO" &&
            value != "SHOPPING" &&
            value != "CAROUSEL" &&
            value != "MAX_VIDEO" &&
            value != "SHOP_THE_PIN" &&
            value != "COLLECTION" &&
            value != "IDEA"
        ) {
            success = false;
            msg << currentValuePath << ": has invalid value \"" << value << "\";";
        }
 
                i++;
            }
        }

    }
             
    if (productGroupIdsIsSet())
    {
        const std::vector<std::string>& value = m_Product_group_ids;
        const std::string currentValuePath = _pathPrefix + ".productGroupIds";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const std::string& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }

    }
         
    if (keywordsIsSet())
    {
        const std::vector<org::openapitools::server::model::AdGroupAudienceSizingRequest_keywords_inner>& value = m_Keywords;
        const std::string currentValuePath = _pathPrefix + ".keywords";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::AdGroupAudienceSizingRequest_keywords_inner& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".keywords") && success;
 
                i++;
            }
        }

    }
    
    return success;
}

bool AdGroupAudienceSizingRequest::operator==(const AdGroupAudienceSizingRequest& rhs) const
{
    return
    
    
    
    ((!autoTargetingEnabledIsSet() && !rhs.autoTargetingEnabledIsSet()) || (autoTargetingEnabledIsSet() && rhs.autoTargetingEnabledIsSet() && isAutoTargetingEnabled() == rhs.isAutoTargetingEnabled())) &&
    
    
    ((!placementGroupIsSet() && !rhs.placementGroupIsSet()) || (placementGroupIsSet() && rhs.placementGroupIsSet() && getPlacementGroup() == rhs.getPlacementGroup())) &&
    
    
    ((!creativeTypesIsSet() && !rhs.creativeTypesIsSet()) || (creativeTypesIsSet() && rhs.creativeTypesIsSet() && getCreativeTypes() == rhs.getCreativeTypes())) &&
    
    
    ((!targetingSpecIsSet() && !rhs.targetingSpecIsSet()) || (targetingSpecIsSet() && rhs.targetingSpecIsSet() && getTargetingSpec() == rhs.getTargetingSpec())) &&
    
    
    ((!productGroupIdsIsSet() && !rhs.productGroupIdsIsSet()) || (productGroupIdsIsSet() && rhs.productGroupIdsIsSet() && getProductGroupIds() == rhs.getProductGroupIds())) &&
    
    
    ((!keywordsIsSet() && !rhs.keywordsIsSet()) || (keywordsIsSet() && rhs.keywordsIsSet() && getKeywords() == rhs.getKeywords()))
    
    ;
}

bool AdGroupAudienceSizingRequest::operator!=(const AdGroupAudienceSizingRequest& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const AdGroupAudienceSizingRequest& o)
{
    j = nlohmann::json::object();
    if(o.autoTargetingEnabledIsSet())
        j["auto_targeting_enabled"] = o.m_Auto_targeting_enabled;
    if(o.placementGroupIsSet())
        j["placement_group"] = o.m_Placement_group;
    if(o.creativeTypesIsSet() || !o.m_Creative_types.empty())
        j["creative_types"] = o.m_Creative_types;
    if(o.targetingSpecIsSet())
        j["targeting_spec"] = o.m_Targeting_spec;
    if(o.productGroupIdsIsSet() || !o.m_Product_group_ids.empty())
        j["product_group_ids"] = o.m_Product_group_ids;
    if(o.keywordsIsSet() || !o.m_Keywords.empty())
        j["keywords"] = o.m_Keywords;
    
}

void from_json(const nlohmann::json& j, AdGroupAudienceSizingRequest& o)
{
    if(j.find("auto_targeting_enabled") != j.end())
    {
        j.at("auto_targeting_enabled").get_to(o.m_Auto_targeting_enabled);
        o.m_Auto_targeting_enabledIsSet = true;
    } 
    if(j.find("placement_group") != j.end())
    {
        j.at("placement_group").get_to(o.m_Placement_group);
        o.m_Placement_groupIsSet = true;
    } 
    if(j.find("creative_types") != j.end())
    {
        j.at("creative_types").get_to(o.m_Creative_types);
        o.m_Creative_typesIsSet = true;
    } 
    if(j.find("targeting_spec") != j.end())
    {
        j.at("targeting_spec").get_to(o.m_Targeting_spec);
        o.m_Targeting_specIsSet = true;
    } 
    if(j.find("product_group_ids") != j.end())
    {
        j.at("product_group_ids").get_to(o.m_Product_group_ids);
        o.m_Product_group_idsIsSet = true;
    } 
    if(j.find("keywords") != j.end())
    {
        j.at("keywords").get_to(o.m_Keywords);
        o.m_KeywordsIsSet = true;
    } 
    
}

bool AdGroupAudienceSizingRequest::isAutoTargetingEnabled() const
{
    return m_Auto_targeting_enabled;
}
void AdGroupAudienceSizingRequest::setAutoTargetingEnabled(bool const value)
{
    m_Auto_targeting_enabled = value;
    m_Auto_targeting_enabledIsSet = true;
}
bool AdGroupAudienceSizingRequest::autoTargetingEnabledIsSet() const
{
    return m_Auto_targeting_enabledIsSet;
}
void AdGroupAudienceSizingRequest::unsetAuto_targeting_enabled()
{
    m_Auto_targeting_enabledIsSet = false;
}
org::openapitools::server::model::PlacementGroupType AdGroupAudienceSizingRequest::getPlacementGroup() const
{
    return m_Placement_group;
}
void AdGroupAudienceSizingRequest::setPlacementGroup(org::openapitools::server::model::PlacementGroupType const& value)
{
    m_Placement_group = value;
    m_Placement_groupIsSet = true;
}
bool AdGroupAudienceSizingRequest::placementGroupIsSet() const
{
    return m_Placement_groupIsSet;
}
void AdGroupAudienceSizingRequest::unsetPlacement_group()
{
    m_Placement_groupIsSet = false;
}
std::vector<std::string> AdGroupAudienceSizingRequest::getCreativeTypes() const
{
    return m_Creative_types;
}
void AdGroupAudienceSizingRequest::setCreativeTypes(std::vector<std::string> const& value)
{
    m_Creative_types = value;
    m_Creative_typesIsSet = true;
}
bool AdGroupAudienceSizingRequest::creativeTypesIsSet() const
{
    return m_Creative_typesIsSet;
}
void AdGroupAudienceSizingRequest::unsetCreative_types()
{
    m_Creative_typesIsSet = false;
}
org::openapitools::server::model::TargetingSpec AdGroupAudienceSizingRequest::getTargetingSpec() const
{
    return m_Targeting_spec;
}
void AdGroupAudienceSizingRequest::setTargetingSpec(org::openapitools::server::model::TargetingSpec const& value)
{
    m_Targeting_spec = value;
    m_Targeting_specIsSet = true;
}
bool AdGroupAudienceSizingRequest::targetingSpecIsSet() const
{
    return m_Targeting_specIsSet;
}
void AdGroupAudienceSizingRequest::unsetTargeting_spec()
{
    m_Targeting_specIsSet = false;
}
std::vector<std::string> AdGroupAudienceSizingRequest::getProductGroupIds() const
{
    return m_Product_group_ids;
}
void AdGroupAudienceSizingRequest::setProductGroupIds(std::vector<std::string> const& value)
{
    m_Product_group_ids = value;
    m_Product_group_idsIsSet = true;
}
bool AdGroupAudienceSizingRequest::productGroupIdsIsSet() const
{
    return m_Product_group_idsIsSet;
}
void AdGroupAudienceSizingRequest::unsetProduct_group_ids()
{
    m_Product_group_idsIsSet = false;
}
std::vector<org::openapitools::server::model::AdGroupAudienceSizingRequest_keywords_inner> AdGroupAudienceSizingRequest::getKeywords() const
{
    return m_Keywords;
}
void AdGroupAudienceSizingRequest::setKeywords(std::vector<org::openapitools::server::model::AdGroupAudienceSizingRequest_keywords_inner> const& value)
{
    m_Keywords = value;
    m_KeywordsIsSet = true;
}
bool AdGroupAudienceSizingRequest::keywordsIsSet() const
{
    return m_KeywordsIsSet;
}
void AdGroupAudienceSizingRequest::unsetKeywords()
{
    m_KeywordsIsSet = false;
}


} // namespace org::openapitools::server::model

