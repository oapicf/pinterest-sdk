/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "SharedAudienceAccount.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

SharedAudienceAccount::SharedAudienceAccount()
{
    m_Account_id = "";
    m_Account_name = "";
    m_Account_type = "";
    m_Shared_on_timestamp = 0;
    
}

void SharedAudienceAccount::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool SharedAudienceAccount::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool SharedAudienceAccount::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "SharedAudienceAccount" : pathPrefix;

         
    
    /* Account_id */ {
        const std::string& value = m_Account_id;
        const std::string currentValuePath = _pathPrefix + ".accountId";
                
        

    }
                
    return success;
}

bool SharedAudienceAccount::operator==(const SharedAudienceAccount& rhs) const
{
    return
    
    
    (getAccountId() == rhs.getAccountId())
     &&
    
    (getAccountName() == rhs.getAccountName())
     &&
    
    (getAccountType() == rhs.getAccountType())
     &&
    
    (getSharedOnTimestamp() == rhs.getSharedOnTimestamp())
    
    
    ;
}

bool SharedAudienceAccount::operator!=(const SharedAudienceAccount& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const SharedAudienceAccount& o)
{
    j = nlohmann::json::object();
    j["account_id"] = o.m_Account_id;
    j["account_name"] = o.m_Account_name;
    j["account_type"] = o.m_Account_type;
    j["shared_on_timestamp"] = o.m_Shared_on_timestamp;
    
}

void from_json(const nlohmann::json& j, SharedAudienceAccount& o)
{
    j.at("account_id").get_to(o.m_Account_id);
    j.at("account_name").get_to(o.m_Account_name);
    j.at("account_type").get_to(o.m_Account_type);
    j.at("shared_on_timestamp").get_to(o.m_Shared_on_timestamp);
    
}

std::string SharedAudienceAccount::getAccountId() const
{
    return m_Account_id;
}
void SharedAudienceAccount::setAccountId(std::string const& value)
{
    m_Account_id = value;
}
std::string SharedAudienceAccount::getAccountName() const
{
    return m_Account_name;
}
void SharedAudienceAccount::setAccountName(std::string const& value)
{
    m_Account_name = value;
}
std::string SharedAudienceAccount::getAccountType() const
{
    return m_Account_type;
}
void SharedAudienceAccount::setAccountType(std::string const& value)
{
    m_Account_type = value;
}
int32_t SharedAudienceAccount::getSharedOnTimestamp() const
{
    return m_Shared_on_timestamp;
}
void SharedAudienceAccount::setSharedOnTimestamp(int32_t const value)
{
    m_Shared_on_timestamp = value;
}


} // namespace org::openapitools::server::model

