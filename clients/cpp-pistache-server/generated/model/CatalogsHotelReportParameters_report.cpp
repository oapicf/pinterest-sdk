/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "CatalogsHotelReportParameters_report.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

CatalogsHotelReportParameters_report::CatalogsHotelReportParameters_report()
{
    m_Report_type = "";
    m_Report_typeIsSet = false;
    m_Feed_id = "";
    m_Processing_result_id = "";
    m_Processing_result_idIsSet = false;
    m_Catalog_id = "";
    m_Catalog_idIsSet = false;
    
}

void CatalogsHotelReportParameters_report::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool CatalogsHotelReportParameters_report::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool CatalogsHotelReportParameters_report::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "CatalogsHotelReportParameters_report" : pathPrefix;

             
    
    /* Feed_id */ {
        const std::string& value = m_Feed_id;
        const std::string currentValuePath = _pathPrefix + ".feedId";
                
        

    }
         
    if (processingResultIdIsSet())
    {
        const std::string& value = m_Processing_result_id;
        const std::string currentValuePath = _pathPrefix + ".processingResultId";
                
        

    }
         
    if (catalogIdIsSet())
    {
        const std::string& value = m_Catalog_id;
        const std::string currentValuePath = _pathPrefix + ".catalogId";
                
        

    }
    
    return success;
}

bool CatalogsHotelReportParameters_report::operator==(const CatalogsHotelReportParameters_report& rhs) const
{
    return
    
    
    
    ((!reportTypeIsSet() && !rhs.reportTypeIsSet()) || (reportTypeIsSet() && rhs.reportTypeIsSet() && getReportType() == rhs.getReportType())) &&
    
    (getFeedId() == rhs.getFeedId())
     &&
    
    
    ((!processingResultIdIsSet() && !rhs.processingResultIdIsSet()) || (processingResultIdIsSet() && rhs.processingResultIdIsSet() && getProcessingResultId() == rhs.getProcessingResultId())) &&
    
    
    ((!catalogIdIsSet() && !rhs.catalogIdIsSet()) || (catalogIdIsSet() && rhs.catalogIdIsSet() && getCatalogId() == rhs.getCatalogId()))
    
    ;
}

bool CatalogsHotelReportParameters_report::operator!=(const CatalogsHotelReportParameters_report& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const CatalogsHotelReportParameters_report& o)
{
    j = nlohmann::json::object();
    if(o.reportTypeIsSet())
        j["report_type"] = o.m_Report_type;
    j["feed_id"] = o.m_Feed_id;
    if(o.processingResultIdIsSet())
        j["processing_result_id"] = o.m_Processing_result_id;
    if(o.catalogIdIsSet())
        j["catalog_id"] = o.m_Catalog_id;
    
}

void from_json(const nlohmann::json& j, CatalogsHotelReportParameters_report& o)
{
    if(j.find("report_type") != j.end())
    {
        j.at("report_type").get_to(o.m_Report_type);
        o.m_Report_typeIsSet = true;
    } 
    j.at("feed_id").get_to(o.m_Feed_id);
    if(j.find("processing_result_id") != j.end())
    {
        j.at("processing_result_id").get_to(o.m_Processing_result_id);
        o.m_Processing_result_idIsSet = true;
    } 
    if(j.find("catalog_id") != j.end())
    {
        j.at("catalog_id").get_to(o.m_Catalog_id);
        o.m_Catalog_idIsSet = true;
    } 
    
}

std::string CatalogsHotelReportParameters_report::getReportType() const
{
    return m_Report_type;
}
void CatalogsHotelReportParameters_report::setReportType(std::string const& value)
{
    m_Report_type = value;
    m_Report_typeIsSet = true;
}
bool CatalogsHotelReportParameters_report::reportTypeIsSet() const
{
    return m_Report_typeIsSet;
}
void CatalogsHotelReportParameters_report::unsetReport_type()
{
    m_Report_typeIsSet = false;
}
std::string CatalogsHotelReportParameters_report::getFeedId() const
{
    return m_Feed_id;
}
void CatalogsHotelReportParameters_report::setFeedId(std::string const& value)
{
    m_Feed_id = value;
}
std::string CatalogsHotelReportParameters_report::getProcessingResultId() const
{
    return m_Processing_result_id;
}
void CatalogsHotelReportParameters_report::setProcessingResultId(std::string const& value)
{
    m_Processing_result_id = value;
    m_Processing_result_idIsSet = true;
}
bool CatalogsHotelReportParameters_report::processingResultIdIsSet() const
{
    return m_Processing_result_idIsSet;
}
void CatalogsHotelReportParameters_report::unsetProcessing_result_id()
{
    m_Processing_result_idIsSet = false;
}
std::string CatalogsHotelReportParameters_report::getCatalogId() const
{
    return m_Catalog_id;
}
void CatalogsHotelReportParameters_report::setCatalogId(std::string const& value)
{
    m_Catalog_id = value;
    m_Catalog_idIsSet = true;
}
bool CatalogsHotelReportParameters_report::catalogIdIsSet() const
{
    return m_Catalog_idIsSet;
}
void CatalogsHotelReportParameters_report::unsetCatalog_id()
{
    m_Catalog_idIsSet = false;
}


} // namespace org::openapitools::server::model

