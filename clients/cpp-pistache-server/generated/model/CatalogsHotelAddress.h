/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * CatalogsHotelAddress.h
 *
 * 
 */

#ifndef CatalogsHotelAddress_H_
#define CatalogsHotelAddress_H_


#include <string>
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// 
/// </summary>
class  CatalogsHotelAddress
{
public:
    CatalogsHotelAddress();
    virtual ~CatalogsHotelAddress() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const CatalogsHotelAddress& rhs) const;
    bool operator!=(const CatalogsHotelAddress& rhs) const;

    /////////////////////////////////////////////
    /// CatalogsHotelAddress members

    /// <summary>
    /// Primary street address of hotel.
    /// </summary>
    std::string getAddr1() const;
    void setAddr1(std::string const& value);
    bool addr1IsSet() const;
    void unsetAddr1();
    /// <summary>
    /// City where the hotel is located.
    /// </summary>
    std::string getCity() const;
    void setCity(std::string const& value);
    bool cityIsSet() const;
    void unsetCity();
    /// <summary>
    /// State, county, province, where the hotel is located.
    /// </summary>
    std::string getRegion() const;
    void setRegion(std::string const& value);
    bool regionIsSet() const;
    void unsetRegion();
    /// <summary>
    /// Country where the hotel is located.
    /// </summary>
    std::string getCountry() const;
    void setCountry(std::string const& value);
    bool countryIsSet() const;
    void unsetCountry();
    /// <summary>
    /// Required for countries with a postal code system. Postal or zip code of the hotel.
    /// </summary>
    std::string getPostalCode() const;
    void setPostalCode(std::string const& value);
    bool postalCodeIsSet() const;
    void unsetPostal_code();

    friend  void to_json(nlohmann::json& j, const CatalogsHotelAddress& o);
    friend  void from_json(const nlohmann::json& j, CatalogsHotelAddress& o);
protected:
    std::string m_Addr1;
    bool m_Addr1IsSet;
    std::string m_City;
    bool m_CityIsSet;
    std::string m_Region;
    bool m_RegionIsSet;
    std::string m_Country;
    bool m_CountryIsSet;
    std::string m_Postal_code;
    bool m_Postal_codeIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* CatalogsHotelAddress_H_ */
