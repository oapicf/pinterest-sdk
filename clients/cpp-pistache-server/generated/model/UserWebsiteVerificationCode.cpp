/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "UserWebsiteVerificationCode.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

UserWebsiteVerificationCode::UserWebsiteVerificationCode()
{
    m_Verification_code = "";
    m_Verification_codeIsSet = false;
    m_Dns_txt_record = "";
    m_Dns_txt_recordIsSet = false;
    m_Metatag = "";
    m_MetatagIsSet = false;
    m_Filename = "";
    m_FilenameIsSet = false;
    m_File_content = "";
    m_File_contentIsSet = false;
    
}

void UserWebsiteVerificationCode::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool UserWebsiteVerificationCode::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool UserWebsiteVerificationCode::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "UserWebsiteVerificationCode" : pathPrefix;

                        
    return success;
}

bool UserWebsiteVerificationCode::operator==(const UserWebsiteVerificationCode& rhs) const
{
    return
    
    
    
    ((!verificationCodeIsSet() && !rhs.verificationCodeIsSet()) || (verificationCodeIsSet() && rhs.verificationCodeIsSet() && getVerificationCode() == rhs.getVerificationCode())) &&
    
    
    ((!dnsTxtRecordIsSet() && !rhs.dnsTxtRecordIsSet()) || (dnsTxtRecordIsSet() && rhs.dnsTxtRecordIsSet() && getDnsTxtRecord() == rhs.getDnsTxtRecord())) &&
    
    
    ((!metatagIsSet() && !rhs.metatagIsSet()) || (metatagIsSet() && rhs.metatagIsSet() && getMetatag() == rhs.getMetatag())) &&
    
    
    ((!filenameIsSet() && !rhs.filenameIsSet()) || (filenameIsSet() && rhs.filenameIsSet() && getFilename() == rhs.getFilename())) &&
    
    
    ((!fileContentIsSet() && !rhs.fileContentIsSet()) || (fileContentIsSet() && rhs.fileContentIsSet() && getFileContent() == rhs.getFileContent()))
    
    ;
}

bool UserWebsiteVerificationCode::operator!=(const UserWebsiteVerificationCode& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const UserWebsiteVerificationCode& o)
{
    j = nlohmann::json::object();
    if(o.verificationCodeIsSet())
        j["verification_code"] = o.m_Verification_code;
    if(o.dnsTxtRecordIsSet())
        j["dns_txt_record"] = o.m_Dns_txt_record;
    if(o.metatagIsSet())
        j["metatag"] = o.m_Metatag;
    if(o.filenameIsSet())
        j["filename"] = o.m_Filename;
    if(o.fileContentIsSet())
        j["file_content"] = o.m_File_content;
    
}

void from_json(const nlohmann::json& j, UserWebsiteVerificationCode& o)
{
    if(j.find("verification_code") != j.end())
    {
        j.at("verification_code").get_to(o.m_Verification_code);
        o.m_Verification_codeIsSet = true;
    } 
    if(j.find("dns_txt_record") != j.end())
    {
        j.at("dns_txt_record").get_to(o.m_Dns_txt_record);
        o.m_Dns_txt_recordIsSet = true;
    } 
    if(j.find("metatag") != j.end())
    {
        j.at("metatag").get_to(o.m_Metatag);
        o.m_MetatagIsSet = true;
    } 
    if(j.find("filename") != j.end())
    {
        j.at("filename").get_to(o.m_Filename);
        o.m_FilenameIsSet = true;
    } 
    if(j.find("file_content") != j.end())
    {
        j.at("file_content").get_to(o.m_File_content);
        o.m_File_contentIsSet = true;
    } 
    
}

std::string UserWebsiteVerificationCode::getVerificationCode() const
{
    return m_Verification_code;
}
void UserWebsiteVerificationCode::setVerificationCode(std::string const& value)
{
    m_Verification_code = value;
    m_Verification_codeIsSet = true;
}
bool UserWebsiteVerificationCode::verificationCodeIsSet() const
{
    return m_Verification_codeIsSet;
}
void UserWebsiteVerificationCode::unsetVerification_code()
{
    m_Verification_codeIsSet = false;
}
std::string UserWebsiteVerificationCode::getDnsTxtRecord() const
{
    return m_Dns_txt_record;
}
void UserWebsiteVerificationCode::setDnsTxtRecord(std::string const& value)
{
    m_Dns_txt_record = value;
    m_Dns_txt_recordIsSet = true;
}
bool UserWebsiteVerificationCode::dnsTxtRecordIsSet() const
{
    return m_Dns_txt_recordIsSet;
}
void UserWebsiteVerificationCode::unsetDns_txt_record()
{
    m_Dns_txt_recordIsSet = false;
}
std::string UserWebsiteVerificationCode::getMetatag() const
{
    return m_Metatag;
}
void UserWebsiteVerificationCode::setMetatag(std::string const& value)
{
    m_Metatag = value;
    m_MetatagIsSet = true;
}
bool UserWebsiteVerificationCode::metatagIsSet() const
{
    return m_MetatagIsSet;
}
void UserWebsiteVerificationCode::unsetMetatag()
{
    m_MetatagIsSet = false;
}
std::string UserWebsiteVerificationCode::getFilename() const
{
    return m_Filename;
}
void UserWebsiteVerificationCode::setFilename(std::string const& value)
{
    m_Filename = value;
    m_FilenameIsSet = true;
}
bool UserWebsiteVerificationCode::filenameIsSet() const
{
    return m_FilenameIsSet;
}
void UserWebsiteVerificationCode::unsetFilename()
{
    m_FilenameIsSet = false;
}
std::string UserWebsiteVerificationCode::getFileContent() const
{
    return m_File_content;
}
void UserWebsiteVerificationCode::setFileContent(std::string const& value)
{
    m_File_content = value;
    m_File_contentIsSet = true;
}
bool UserWebsiteVerificationCode::fileContentIsSet() const
{
    return m_File_contentIsSet;
}
void UserWebsiteVerificationCode::unsetFile_content()
{
    m_File_contentIsSet = false;
}


} // namespace org::openapitools::server::model

