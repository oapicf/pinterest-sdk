/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "CatalogsRetailBatchRequest.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

CatalogsRetailBatchRequest::CatalogsRetailBatchRequest()
{
    m_Catalog_type = "";
    
}

void CatalogsRetailBatchRequest::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool CatalogsRetailBatchRequest::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool CatalogsRetailBatchRequest::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "CatalogsRetailBatchRequest" : pathPrefix;

                
    if (!m_Language.validate(msg, _pathPrefix + ".language")) {
        msg << _pathPrefix << ": Language is invalid;";
        success = false;
    }     
    
    /* Items */ {
        const std::vector<org::openapitools::server::model::CatalogsRetailBatchRequest_items_inner>& value = m_Items;
        const std::string currentValuePath = _pathPrefix + ".items";
                
        
        if (value.size() < 1)
        {
            success = false;
            msg << currentValuePath << ": must have at least 1 elements;";
        }
        if (value.size() > 1000)
        {
            success = false;
            msg << currentValuePath << ": must have at most 1000 elements;";
        }
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::CatalogsRetailBatchRequest_items_inner& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".items") && success;
 
                i++;
            }
        }

    }
    
    return success;
}

bool CatalogsRetailBatchRequest::operator==(const CatalogsRetailBatchRequest& rhs) const
{
    return
    
    
    (getCatalogType() == rhs.getCatalogType())
     &&
    
    (getCountry() == rhs.getCountry())
     &&
    
    (getLanguage() == rhs.getLanguage())
     &&
    
    (getItems() == rhs.getItems())
    
    
    ;
}

bool CatalogsRetailBatchRequest::operator!=(const CatalogsRetailBatchRequest& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const CatalogsRetailBatchRequest& o)
{
    j = nlohmann::json::object();
    j["catalog_type"] = o.m_Catalog_type;
    j["country"] = o.m_Country;
    j["language"] = o.m_Language;
    j["items"] = o.m_Items;
    
}

void from_json(const nlohmann::json& j, CatalogsRetailBatchRequest& o)
{
    j.at("catalog_type").get_to(o.m_Catalog_type);
    j.at("country").get_to(o.m_Country);
    j.at("language").get_to(o.m_Language);
    j.at("items").get_to(o.m_Items);
    
}

std::string CatalogsRetailBatchRequest::getCatalogType() const
{
    return m_Catalog_type;
}
void CatalogsRetailBatchRequest::setCatalogType(std::string const& value)
{
    m_Catalog_type = value;
}
org::openapitools::server::model::Country CatalogsRetailBatchRequest::getCountry() const
{
    return m_Country;
}
void CatalogsRetailBatchRequest::setCountry(org::openapitools::server::model::Country const& value)
{
    m_Country = value;
}
org::openapitools::server::model::CatalogsItemsRequest_language CatalogsRetailBatchRequest::getLanguage() const
{
    return m_Language;
}
void CatalogsRetailBatchRequest::setLanguage(org::openapitools::server::model::CatalogsItemsRequest_language const& value)
{
    m_Language = value;
}
std::vector<org::openapitools::server::model::CatalogsRetailBatchRequest_items_inner> CatalogsRetailBatchRequest::getItems() const
{
    return m_Items;
}
void CatalogsRetailBatchRequest::setItems(std::vector<org::openapitools::server::model::CatalogsRetailBatchRequest_items_inner> const& value)
{
    m_Items = value;
}


} // namespace org::openapitools::server::model

