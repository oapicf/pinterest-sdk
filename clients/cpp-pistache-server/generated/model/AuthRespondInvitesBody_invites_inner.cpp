/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "AuthRespondInvitesBody_invites_inner.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

AuthRespondInvitesBody_invites_inner::AuthRespondInvitesBody_invites_inner()
{
    m_Invite_id = "";
    
}

void AuthRespondInvitesBody_invites_inner::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool AuthRespondInvitesBody_invites_inner::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool AuthRespondInvitesBody_invites_inner::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "AuthRespondInvitesBody_invites_inner" : pathPrefix;

        
    if (!m_Action.validate(msg, _pathPrefix + ".action")) {
        msg << _pathPrefix << ": Action is invalid;";
        success = false;
    }     
    
    /* Invite_id */ {
        const std::string& value = m_Invite_id;
        const std::string currentValuePath = _pathPrefix + ".inviteId";
                
        
        if (value.length() < 1)
        {
            success = false;
            msg << currentValuePath << ": must be at least 1 characters long;";
        }
        if (value.length() > 25)
        {
            success = false;
            msg << currentValuePath << ": must be at most 25 characters long;";
        }

    }
    
    return success;
}

bool AuthRespondInvitesBody_invites_inner::operator==(const AuthRespondInvitesBody_invites_inner& rhs) const
{
    return
    
    
    (getAction() == rhs.getAction())
     &&
    
    (getInviteId() == rhs.getInviteId())
    
    
    ;
}

bool AuthRespondInvitesBody_invites_inner::operator!=(const AuthRespondInvitesBody_invites_inner& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const AuthRespondInvitesBody_invites_inner& o)
{
    j = nlohmann::json::object();
    j["action"] = o.m_Action;
    j["invite_id"] = o.m_Invite_id;
    
}

void from_json(const nlohmann::json& j, AuthRespondInvitesBody_invites_inner& o)
{
    j.at("action").get_to(o.m_Action);
    j.at("invite_id").get_to(o.m_Invite_id);
    
}

org::openapitools::server::model::AuthRespondInvitesBody_invites_inner_action AuthRespondInvitesBody_invites_inner::getAction() const
{
    return m_Action;
}
void AuthRespondInvitesBody_invites_inner::setAction(org::openapitools::server::model::AuthRespondInvitesBody_invites_inner_action const& value)
{
    m_Action = value;
}
std::string AuthRespondInvitesBody_invites_inner::getInviteId() const
{
    return m_Invite_id;
}
void AuthRespondInvitesBody_invites_inner::setInviteId(std::string const& value)
{
    m_Invite_id = value;
}


} // namespace org::openapitools::server::model

