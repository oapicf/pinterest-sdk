/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "DataStatus.h"
#include "Helpers.h"
#include <stdexcept>
#include <sstream>

namespace org::openapitools::server::model
{

DataStatus::DataStatus()
{
    
}

void DataStatus::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool DataStatus::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool DataStatus::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "DataStatus" : pathPrefix;

    
    if (m_value == DataStatus::eDataStatus::INVALID_VALUE_OPENAPI_GENERATED)
    {
        success = false;
        msg << _pathPrefix << ": has no value;";
    }

    return success;
}

bool DataStatus::operator==(const DataStatus& rhs) const
{
    return
    getValue() == rhs.getValue()
    
    ;
}

bool DataStatus::operator!=(const DataStatus& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const DataStatus& o)
{
    j = nlohmann::json::object();
    
    switch (o.getValue())
    {
        case DataStatus::eDataStatus::INVALID_VALUE_OPENAPI_GENERATED:
            j = "INVALID_VALUE_OPENAPI_GENERATED";
            break;
        case DataStatus::eDataStatus::PROCESSING:
            j = "PROCESSING";
            break;
        case DataStatus::eDataStatus::READY:
            j = "READY";
            break;
        case DataStatus::eDataStatus::ESTIMATE:
            j = "ESTIMATE";
            break;
        case DataStatus::eDataStatus::BEFORE_BUSINESS_CREATED:
            j = "BEFORE_BUSINESS_CREATED";
            break;
        case DataStatus::eDataStatus::BEFORE_DATA_RETENTION_PERIOD:
            j = "BEFORE_DATA_RETENTION_PERIOD";
            break;
        case DataStatus::eDataStatus::BEFORE_PIN_DATA_RETENTION_PERIOD:
            j = "BEFORE_PIN_DATA_RETENTION_PERIOD";
            break;
        case DataStatus::eDataStatus::BEFORE_METRIC_START_DATE:
            j = "BEFORE_METRIC_START_DATE";
            break;
        case DataStatus::eDataStatus::BEFORE_CORE_METRIC_START_DATE:
            j = "BEFORE_CORE_METRIC_START_DATE";
            break;
        case DataStatus::eDataStatus::BEFORE_PIN_FORMAT_METRIC_START_DATE:
            j = "BEFORE_PIN_FORMAT_METRIC_START_DATE";
            break;
        case DataStatus::eDataStatus::BEFORE_AUDIENCE_METRIC_START_DATE:
            j = "BEFORE_AUDIENCE_METRIC_START_DATE";
            break;
        case DataStatus::eDataStatus::BEFORE_AUDIENCE_MONTHLY_METRIC_START_DATE:
            j = "BEFORE_AUDIENCE_MONTHLY_METRIC_START_DATE";
            break;
        case DataStatus::eDataStatus::BEFORE_VIDEO_METRIC_START_DATE:
            j = "BEFORE_VIDEO_METRIC_START_DATE";
            break;
        case DataStatus::eDataStatus::BEFORE_CONVERSION_METRIC_START_DATE:
            j = "BEFORE_CONVERSION_METRIC_START_DATE";
            break;
        case DataStatus::eDataStatus::PURCHASERS_METRIC_SMALLER_THAN_THRESHOLD:
            j = "PURCHASERS_METRIC_SMALLER_THAN_THRESHOLD";
            break;
        case DataStatus::eDataStatus::IN_BAD_TAG_DATE:
            j = "IN_BAD_TAG_DATE";
            break;
        case DataStatus::eDataStatus::BEFORE_PUBLISHED_METRIC_START_DATE:
            j = "BEFORE_PUBLISHED_METRIC_START_DATE";
            break;
        case DataStatus::eDataStatus::BEFORE_ASSIST_METRIC_START_DATE:
            j = "BEFORE_ASSIST_METRIC_START_DATE";
            break;
        case DataStatus::eDataStatus::BEFORE_PIN_CREATED:
            j = "BEFORE_PIN_CREATED";
            break;
        case DataStatus::eDataStatus::BEFORE_ACCOUNT_CLAIMED:
            j = "BEFORE_ACCOUNT_CLAIMED";
            break;
        case DataStatus::eDataStatus::BEFORE_DEMOGRAPHIC_FILTERS_START_DATE:
            j = "BEFORE_DEMOGRAPHIC_FILTERS_START_DATE";
            break;
        case DataStatus::eDataStatus::AUDIENCE_SEGMENT_SMALLER_THAN_THRESHOLD:
            j = "AUDIENCE_SEGMENT_SMALLER_THAN_THRESHOLD";
            break;
        case DataStatus::eDataStatus::AUDIENCE_TOTAL_SMALLER_THAN_THRESHOLD:
            j = "AUDIENCE_TOTAL_SMALLER_THAN_THRESHOLD";
            break;
        case DataStatus::eDataStatus::BEFORE_PRODUCT_GROUP_FILTER_START_DATE:
            j = "BEFORE_PRODUCT_GROUP_FILTER_START_DATE";
            break;
    }
}

void from_json(const nlohmann::json& j, DataStatus& o)
{
    
    auto s = j.get<std::string>();
    if (s == "PROCESSING") {
     o.setValue(DataStatus::eDataStatus::PROCESSING);
    } 
    else if (s == "READY") {
     o.setValue(DataStatus::eDataStatus::READY);
    } 
    else if (s == "ESTIMATE") {
     o.setValue(DataStatus::eDataStatus::ESTIMATE);
    } 
    else if (s == "BEFORE_BUSINESS_CREATED") {
     o.setValue(DataStatus::eDataStatus::BEFORE_BUSINESS_CREATED);
    } 
    else if (s == "BEFORE_DATA_RETENTION_PERIOD") {
     o.setValue(DataStatus::eDataStatus::BEFORE_DATA_RETENTION_PERIOD);
    } 
    else if (s == "BEFORE_PIN_DATA_RETENTION_PERIOD") {
     o.setValue(DataStatus::eDataStatus::BEFORE_PIN_DATA_RETENTION_PERIOD);
    } 
    else if (s == "BEFORE_METRIC_START_DATE") {
     o.setValue(DataStatus::eDataStatus::BEFORE_METRIC_START_DATE);
    } 
    else if (s == "BEFORE_CORE_METRIC_START_DATE") {
     o.setValue(DataStatus::eDataStatus::BEFORE_CORE_METRIC_START_DATE);
    } 
    else if (s == "BEFORE_PIN_FORMAT_METRIC_START_DATE") {
     o.setValue(DataStatus::eDataStatus::BEFORE_PIN_FORMAT_METRIC_START_DATE);
    } 
    else if (s == "BEFORE_AUDIENCE_METRIC_START_DATE") {
     o.setValue(DataStatus::eDataStatus::BEFORE_AUDIENCE_METRIC_START_DATE);
    } 
    else if (s == "BEFORE_AUDIENCE_MONTHLY_METRIC_START_DATE") {
     o.setValue(DataStatus::eDataStatus::BEFORE_AUDIENCE_MONTHLY_METRIC_START_DATE);
    } 
    else if (s == "BEFORE_VIDEO_METRIC_START_DATE") {
     o.setValue(DataStatus::eDataStatus::BEFORE_VIDEO_METRIC_START_DATE);
    } 
    else if (s == "BEFORE_CONVERSION_METRIC_START_DATE") {
     o.setValue(DataStatus::eDataStatus::BEFORE_CONVERSION_METRIC_START_DATE);
    } 
    else if (s == "PURCHASERS_METRIC_SMALLER_THAN_THRESHOLD") {
     o.setValue(DataStatus::eDataStatus::PURCHASERS_METRIC_SMALLER_THAN_THRESHOLD);
    } 
    else if (s == "IN_BAD_TAG_DATE") {
     o.setValue(DataStatus::eDataStatus::IN_BAD_TAG_DATE);
    } 
    else if (s == "BEFORE_PUBLISHED_METRIC_START_DATE") {
     o.setValue(DataStatus::eDataStatus::BEFORE_PUBLISHED_METRIC_START_DATE);
    } 
    else if (s == "BEFORE_ASSIST_METRIC_START_DATE") {
     o.setValue(DataStatus::eDataStatus::BEFORE_ASSIST_METRIC_START_DATE);
    } 
    else if (s == "BEFORE_PIN_CREATED") {
     o.setValue(DataStatus::eDataStatus::BEFORE_PIN_CREATED);
    } 
    else if (s == "BEFORE_ACCOUNT_CLAIMED") {
     o.setValue(DataStatus::eDataStatus::BEFORE_ACCOUNT_CLAIMED);
    } 
    else if (s == "BEFORE_DEMOGRAPHIC_FILTERS_START_DATE") {
     o.setValue(DataStatus::eDataStatus::BEFORE_DEMOGRAPHIC_FILTERS_START_DATE);
    } 
    else if (s == "AUDIENCE_SEGMENT_SMALLER_THAN_THRESHOLD") {
     o.setValue(DataStatus::eDataStatus::AUDIENCE_SEGMENT_SMALLER_THAN_THRESHOLD);
    } 
    else if (s == "AUDIENCE_TOTAL_SMALLER_THAN_THRESHOLD") {
     o.setValue(DataStatus::eDataStatus::AUDIENCE_TOTAL_SMALLER_THAN_THRESHOLD);
    } 
    else if (s == "BEFORE_PRODUCT_GROUP_FILTER_START_DATE") {
     o.setValue(DataStatus::eDataStatus::BEFORE_PRODUCT_GROUP_FILTER_START_DATE);
    }  else {
     std::stringstream ss;
     ss << "Unexpected value " << s << " in json"
        << " cannot be converted to enum of type"
        << " DataStatus::eDataStatus";
     throw std::invalid_argument(ss.str());
    } 

}

DataStatus::eDataStatus DataStatus::getValue() const
{
    return m_value;
}
void DataStatus::setValue(DataStatus::eDataStatus value)
{
    m_value = value;
}

} // namespace org::openapitools::server::model

