/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "CatalogsProductGroupUpdateRequest.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

CatalogsProductGroupUpdateRequest::CatalogsProductGroupUpdateRequest()
{
    m_Name = "";
    m_NameIsSet = false;
    m_Description = "";
    m_DescriptionIsSet = false;
    m_Is_featured = false;
    m_Is_featuredIsSet = false;
    m_FiltersIsSet = false;
    
}

void CatalogsProductGroupUpdateRequest::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool CatalogsProductGroupUpdateRequest::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool CatalogsProductGroupUpdateRequest::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "CatalogsProductGroupUpdateRequest" : pathPrefix;

                    
    return success;
}

bool CatalogsProductGroupUpdateRequest::operator==(const CatalogsProductGroupUpdateRequest& rhs) const
{
    return
    
    
    
    ((!nameIsSet() && !rhs.nameIsSet()) || (nameIsSet() && rhs.nameIsSet() && getName() == rhs.getName())) &&
    
    
    ((!descriptionIsSet() && !rhs.descriptionIsSet()) || (descriptionIsSet() && rhs.descriptionIsSet() && getDescription() == rhs.getDescription())) &&
    
    
    ((!isFeaturedIsSet() && !rhs.isFeaturedIsSet()) || (isFeaturedIsSet() && rhs.isFeaturedIsSet() && isIsFeatured() == rhs.isIsFeatured())) &&
    
    
    ((!filtersIsSet() && !rhs.filtersIsSet()) || (filtersIsSet() && rhs.filtersIsSet() && getFilters() == rhs.getFilters()))
    
    ;
}

bool CatalogsProductGroupUpdateRequest::operator!=(const CatalogsProductGroupUpdateRequest& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const CatalogsProductGroupUpdateRequest& o)
{
    j = nlohmann::json::object();
    if(o.nameIsSet())
        j["name"] = o.m_Name;
    if(o.descriptionIsSet())
        j["description"] = o.m_Description;
    if(o.isFeaturedIsSet())
        j["is_featured"] = o.m_Is_featured;
    if(o.filtersIsSet())
        j["filters"] = o.m_Filters;
    
}

void from_json(const nlohmann::json& j, CatalogsProductGroupUpdateRequest& o)
{
    if(j.find("name") != j.end())
    {
        j.at("name").get_to(o.m_Name);
        o.m_NameIsSet = true;
    } 
    if(j.find("description") != j.end())
    {
        j.at("description").get_to(o.m_Description);
        o.m_DescriptionIsSet = true;
    } 
    if(j.find("is_featured") != j.end())
    {
        j.at("is_featured").get_to(o.m_Is_featured);
        o.m_Is_featuredIsSet = true;
    } 
    if(j.find("filters") != j.end())
    {
        j.at("filters").get_to(o.m_Filters);
        o.m_FiltersIsSet = true;
    } 
    
}

std::string CatalogsProductGroupUpdateRequest::getName() const
{
    return m_Name;
}
void CatalogsProductGroupUpdateRequest::setName(std::string const& value)
{
    m_Name = value;
    m_NameIsSet = true;
}
bool CatalogsProductGroupUpdateRequest::nameIsSet() const
{
    return m_NameIsSet;
}
void CatalogsProductGroupUpdateRequest::unsetName()
{
    m_NameIsSet = false;
}
std::string CatalogsProductGroupUpdateRequest::getDescription() const
{
    return m_Description;
}
void CatalogsProductGroupUpdateRequest::setDescription(std::string const& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}
bool CatalogsProductGroupUpdateRequest::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}
void CatalogsProductGroupUpdateRequest::unsetDescription()
{
    m_DescriptionIsSet = false;
}
bool CatalogsProductGroupUpdateRequest::isIsFeatured() const
{
    return m_Is_featured;
}
void CatalogsProductGroupUpdateRequest::setIsFeatured(bool const value)
{
    m_Is_featured = value;
    m_Is_featuredIsSet = true;
}
bool CatalogsProductGroupUpdateRequest::isFeaturedIsSet() const
{
    return m_Is_featuredIsSet;
}
void CatalogsProductGroupUpdateRequest::unsetIs_featured()
{
    m_Is_featuredIsSet = false;
}
org::openapitools::server::model::CatalogsProductGroupFiltersRequest CatalogsProductGroupUpdateRequest::getFilters() const
{
    return m_Filters;
}
void CatalogsProductGroupUpdateRequest::setFilters(org::openapitools::server::model::CatalogsProductGroupFiltersRequest const& value)
{
    m_Filters = value;
    m_FiltersIsSet = true;
}
bool CatalogsProductGroupUpdateRequest::filtersIsSet() const
{
    return m_FiltersIsSet;
}
void CatalogsProductGroupUpdateRequest::unsetFilters()
{
    m_FiltersIsSet = false;
}


} // namespace org::openapitools::server::model

