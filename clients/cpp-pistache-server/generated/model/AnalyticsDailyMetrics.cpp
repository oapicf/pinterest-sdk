/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "AnalyticsDailyMetrics.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

AnalyticsDailyMetrics::AnalyticsDailyMetrics()
{
    m_Data_statusIsSet = false;
    m_date = "";
    m_dateIsSet = false;
    m_MetricsIsSet = false;
    
}

void AnalyticsDailyMetrics::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool AnalyticsDailyMetrics::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool AnalyticsDailyMetrics::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "AnalyticsDailyMetrics" : pathPrefix;

                
    return success;
}

bool AnalyticsDailyMetrics::operator==(const AnalyticsDailyMetrics& rhs) const
{
    return
    
    
    
    ((!dataStatusIsSet() && !rhs.dataStatusIsSet()) || (dataStatusIsSet() && rhs.dataStatusIsSet() && getDataStatus() == rhs.getDataStatus())) &&
    
    
    ((!dateIsSet() && !rhs.dateIsSet()) || (dateIsSet() && rhs.dateIsSet() && getDate() == rhs.getDate())) &&
    
    
    ((!metricsIsSet() && !rhs.metricsIsSet()) || (metricsIsSet() && rhs.metricsIsSet() && getMetrics() == rhs.getMetrics()))
    
    ;
}

bool AnalyticsDailyMetrics::operator!=(const AnalyticsDailyMetrics& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const AnalyticsDailyMetrics& o)
{
    j = nlohmann::json::object();
    if(o.dataStatusIsSet())
        j["data_status"] = o.m_Data_status;
    if(o.dateIsSet())
        j["date"] = o.m_date;
    if(o.metricsIsSet() || !o.m_Metrics.empty())
        j["metrics"] = o.m_Metrics;
    
}

void from_json(const nlohmann::json& j, AnalyticsDailyMetrics& o)
{
    if(j.find("data_status") != j.end())
    {
        j.at("data_status").get_to(o.m_Data_status);
        o.m_Data_statusIsSet = true;
    } 
    if(j.find("date") != j.end())
    {
        j.at("date").get_to(o.m_date);
        o.m_dateIsSet = true;
    } 
    if(j.find("metrics") != j.end())
    {
        j.at("metrics").get_to(o.m_Metrics);
        o.m_MetricsIsSet = true;
    } 
    
}

org::openapitools::server::model::DataStatus AnalyticsDailyMetrics::getDataStatus() const
{
    return m_Data_status;
}
void AnalyticsDailyMetrics::setDataStatus(org::openapitools::server::model::DataStatus const& value)
{
    m_Data_status = value;
    m_Data_statusIsSet = true;
}
bool AnalyticsDailyMetrics::dataStatusIsSet() const
{
    return m_Data_statusIsSet;
}
void AnalyticsDailyMetrics::unsetData_status()
{
    m_Data_statusIsSet = false;
}
std::string AnalyticsDailyMetrics::getDate() const
{
    return m_date;
}
void AnalyticsDailyMetrics::setDate(std::string const& value)
{
    m_date = value;
    m_dateIsSet = true;
}
bool AnalyticsDailyMetrics::dateIsSet() const
{
    return m_dateIsSet;
}
void AnalyticsDailyMetrics::unsetdate()
{
    m_dateIsSet = false;
}
std::map<std::string, double> AnalyticsDailyMetrics::getMetrics() const
{
    return m_Metrics;
}
void AnalyticsDailyMetrics::setMetrics(std::map<std::string, double> const value)
{
    m_Metrics = value;
    m_MetricsIsSet = true;
}
bool AnalyticsDailyMetrics::metricsIsSet() const
{
    return m_MetricsIsSet;
}
void AnalyticsDailyMetrics::unsetMetrics()
{
    m_MetricsIsSet = false;
}


} // namespace org::openapitools::server::model

