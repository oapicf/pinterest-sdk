/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ConversionEventResponse.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

ConversionEventResponse::ConversionEventResponse()
{
    m_Conversion_event = "";
    m_Conversion_eventIsSet = false;
    m_Conversion_tag_id = "";
    m_Conversion_tag_idIsSet = false;
    m_Ad_account_id = "";
    m_Ad_account_idIsSet = false;
    m_Created_time = 0;
    m_Created_timeIsSet = false;
    
}

void ConversionEventResponse::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool ConversionEventResponse::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool ConversionEventResponse::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "ConversionEventResponse" : pathPrefix;

             
    if (conversionTagIdIsSet())
    {
        const std::string& value = m_Conversion_tag_id;
        const std::string currentValuePath = _pathPrefix + ".conversionTagId";
                
        

    }
         
    if (adAccountIdIsSet())
    {
        const std::string& value = m_Ad_account_id;
        const std::string currentValuePath = _pathPrefix + ".adAccountId";
                
        

    }
        
    return success;
}

bool ConversionEventResponse::operator==(const ConversionEventResponse& rhs) const
{
    return
    
    
    
    ((!conversionEventIsSet() && !rhs.conversionEventIsSet()) || (conversionEventIsSet() && rhs.conversionEventIsSet() && getConversionEvent() == rhs.getConversionEvent())) &&
    
    
    ((!conversionTagIdIsSet() && !rhs.conversionTagIdIsSet()) || (conversionTagIdIsSet() && rhs.conversionTagIdIsSet() && getConversionTagId() == rhs.getConversionTagId())) &&
    
    
    ((!adAccountIdIsSet() && !rhs.adAccountIdIsSet()) || (adAccountIdIsSet() && rhs.adAccountIdIsSet() && getAdAccountId() == rhs.getAdAccountId())) &&
    
    
    ((!createdTimeIsSet() && !rhs.createdTimeIsSet()) || (createdTimeIsSet() && rhs.createdTimeIsSet() && getCreatedTime() == rhs.getCreatedTime()))
    
    ;
}

bool ConversionEventResponse::operator!=(const ConversionEventResponse& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const ConversionEventResponse& o)
{
    j = nlohmann::json::object();
    if(o.conversionEventIsSet())
        j["conversion_event"] = o.m_Conversion_event;
    if(o.conversionTagIdIsSet())
        j["conversion_tag_id"] = o.m_Conversion_tag_id;
    if(o.adAccountIdIsSet())
        j["ad_account_id"] = o.m_Ad_account_id;
    if(o.createdTimeIsSet())
        j["created_time"] = o.m_Created_time;
    
}

void from_json(const nlohmann::json& j, ConversionEventResponse& o)
{
    if(j.find("conversion_event") != j.end())
    {
        j.at("conversion_event").get_to(o.m_Conversion_event);
        o.m_Conversion_eventIsSet = true;
    } 
    if(j.find("conversion_tag_id") != j.end())
    {
        j.at("conversion_tag_id").get_to(o.m_Conversion_tag_id);
        o.m_Conversion_tag_idIsSet = true;
    } 
    if(j.find("ad_account_id") != j.end())
    {
        j.at("ad_account_id").get_to(o.m_Ad_account_id);
        o.m_Ad_account_idIsSet = true;
    } 
    if(j.find("created_time") != j.end())
    {
        j.at("created_time").get_to(o.m_Created_time);
        o.m_Created_timeIsSet = true;
    } 
    
}

ConversionTagType ConversionEventResponse::getConversionEvent() const
{
    return m_Conversion_event;
}
void ConversionEventResponse::setConversionEvent(ConversionTagType const& value)
{
    m_Conversion_event = value;
    m_Conversion_eventIsSet = true;
}
bool ConversionEventResponse::conversionEventIsSet() const
{
    return m_Conversion_eventIsSet;
}
void ConversionEventResponse::unsetConversion_event()
{
    m_Conversion_eventIsSet = false;
}
std::string ConversionEventResponse::getConversionTagId() const
{
    return m_Conversion_tag_id;
}
void ConversionEventResponse::setConversionTagId(std::string const& value)
{
    m_Conversion_tag_id = value;
    m_Conversion_tag_idIsSet = true;
}
bool ConversionEventResponse::conversionTagIdIsSet() const
{
    return m_Conversion_tag_idIsSet;
}
void ConversionEventResponse::unsetConversion_tag_id()
{
    m_Conversion_tag_idIsSet = false;
}
std::string ConversionEventResponse::getAdAccountId() const
{
    return m_Ad_account_id;
}
void ConversionEventResponse::setAdAccountId(std::string const& value)
{
    m_Ad_account_id = value;
    m_Ad_account_idIsSet = true;
}
bool ConversionEventResponse::adAccountIdIsSet() const
{
    return m_Ad_account_idIsSet;
}
void ConversionEventResponse::unsetAd_account_id()
{
    m_Ad_account_idIsSet = false;
}
int32_t ConversionEventResponse::getCreatedTime() const
{
    return m_Created_time;
}
void ConversionEventResponse::setCreatedTime(int32_t const value)
{
    m_Created_time = value;
    m_Created_timeIsSet = true;
}
bool ConversionEventResponse::createdTimeIsSet() const
{
    return m_Created_timeIsSet;
}
void ConversionEventResponse::unsetCreated_time()
{
    m_Created_timeIsSet = false;
}


} // namespace org::openapitools::server::model

