/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "SharedAudienceResponseCommon.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

SharedAudienceResponseCommon::SharedAudienceResponseCommon()
{
    m_Audience_id = "";
    m_Audience_idIsSet = false;
    m_PermissionsIsSet = false;
    
}

void SharedAudienceResponseCommon::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool SharedAudienceResponseCommon::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool SharedAudienceResponseCommon::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "SharedAudienceResponseCommon" : pathPrefix;

             
    if (permissionsIsSet())
    {
        const std::vector<org::openapitools::server::model::Role>& value = m_Permissions;
        const std::string currentValuePath = _pathPrefix + ".permissions";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::Role& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath) && success;
        
        
 
                i++;
            }
        }

    }
    
    return success;
}

bool SharedAudienceResponseCommon::operator==(const SharedAudienceResponseCommon& rhs) const
{
    return
    
    
    
    ((!audienceIdIsSet() && !rhs.audienceIdIsSet()) || (audienceIdIsSet() && rhs.audienceIdIsSet() && getAudienceId() == rhs.getAudienceId())) &&
    
    
    ((!permissionsIsSet() && !rhs.permissionsIsSet()) || (permissionsIsSet() && rhs.permissionsIsSet() && getPermissions() == rhs.getPermissions()))
    
    ;
}

bool SharedAudienceResponseCommon::operator!=(const SharedAudienceResponseCommon& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const SharedAudienceResponseCommon& o)
{
    j = nlohmann::json::object();
    if(o.audienceIdIsSet())
        j["audience_id"] = o.m_Audience_id;
    if(o.permissionsIsSet() || !o.m_Permissions.empty())
        j["permissions"] = o.m_Permissions;
    
}

void from_json(const nlohmann::json& j, SharedAudienceResponseCommon& o)
{
    if(j.find("audience_id") != j.end())
    {
        j.at("audience_id").get_to(o.m_Audience_id);
        o.m_Audience_idIsSet = true;
    } 
    if(j.find("permissions") != j.end())
    {
        j.at("permissions").get_to(o.m_Permissions);
        o.m_PermissionsIsSet = true;
    } 
    
}

std::string SharedAudienceResponseCommon::getAudienceId() const
{
    return m_Audience_id;
}
void SharedAudienceResponseCommon::setAudienceId(std::string const& value)
{
    m_Audience_id = value;
    m_Audience_idIsSet = true;
}
bool SharedAudienceResponseCommon::audienceIdIsSet() const
{
    return m_Audience_idIsSet;
}
void SharedAudienceResponseCommon::unsetAudience_id()
{
    m_Audience_idIsSet = false;
}
std::vector<org::openapitools::server::model::Role> SharedAudienceResponseCommon::getPermissions() const
{
    return m_Permissions;
}
void SharedAudienceResponseCommon::setPermissions(std::vector<org::openapitools::server::model::Role> const& value)
{
    m_Permissions = value;
    m_PermissionsIsSet = true;
}
bool SharedAudienceResponseCommon::permissionsIsSet() const
{
    return m_PermissionsIsSet;
}
void SharedAudienceResponseCommon::unsetPermissions()
{
    m_PermissionsIsSet = false;
}


} // namespace org::openapitools::server::model

