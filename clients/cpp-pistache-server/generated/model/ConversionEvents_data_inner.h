/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * ConversionEvents_data_inner.h
 *
 * 
 */

#ifndef ConversionEvents_data_inner_H_
#define ConversionEvents_data_inner_H_


#include "ConversionEvents_data_inner_custom_data.h"
#include "ConversionEventsUserData.h"
#include <string>
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// 
/// </summary>
class  ConversionEvents_data_inner
{
public:
    ConversionEvents_data_inner();
    virtual ~ConversionEvents_data_inner() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const ConversionEvents_data_inner& rhs) const;
    bool operator!=(const ConversionEvents_data_inner& rhs) const;

    /////////////////////////////////////////////
    /// ConversionEvents_data_inner members

    /// <summary>
    /// &lt;p&gt;The type of the user event. Please use the right event_name otherwise the event won&#39;t be accepted and show up correctly in reports.   &lt;ul&gt;   &lt;li&gt;&lt;code&gt;add_to_cart&lt;/code&gt;&lt;/li&gt;   &lt;li&gt;&lt;code&gt;checkout&lt;/code&gt;&lt;/li&gt;   &lt;li&gt;&lt;code&gt;custom&lt;/code&gt;&lt;/li&gt;   &lt;li&gt;&lt;code&gt;lead&lt;/code&gt;&lt;/li&gt;   &lt;li&gt;&lt;code&gt;page_visit&lt;/code&gt;&lt;/li&gt;   &lt;li&gt;&lt;code&gt;search&lt;/code&gt;&lt;/li&gt;   &lt;li&gt;&lt;code&gt;signup&lt;/code&gt;&lt;/li&gt;   &lt;li&gt;&lt;code&gt;view_category&lt;/code&gt;&lt;/li&gt;   &lt;li&gt;&lt;code&gt;watch_video&lt;/code&gt;&lt;/li&gt;   &lt;/ul&gt; &lt;/p&gt; 
    /// </summary>
    std::string getEventName() const;
    void setEventName(std::string const& value);
    /// <summary>
    /// &lt;p&gt;   The source indicating where the conversion event occurred.   &lt;ul&gt;     &lt;li&gt;&lt;code&gt;app_android&lt;/code&gt;&lt;/li&gt;     &lt;li&gt;&lt;code&gt;app_ios&lt;/code&gt;&lt;/li&gt;     &lt;li&gt;&lt;code&gt;web&lt;/code&gt;&lt;/li&gt;     &lt;li&gt;&lt;code&gt;offline&lt;/code&gt;&lt;/li&gt;   &lt;/ul&gt; &lt;/p&gt; 
    /// </summary>
    std::string getActionSource() const;
    void setActionSource(std::string const& value);
    /// <summary>
    /// The time when the event happened. Unix timestamp in seconds.
    /// </summary>
    int64_t getEventTime() const;
    void setEventTime(int64_t const value);
    /// <summary>
    /// A unique id string that identifies this event and can be used for deduping between events ingested via both the conversion API and Pinterest tracking. Without this, event&#39;s data is likely to be double counted and will cause report metric inflation. Third-party vendors make sure this field is updated on both Pinterest tag and Conversions API side before rolling out template for Conversions API.
    /// </summary>
    std::string getEventId() const;
    void setEventId(std::string const& value);
    /// <summary>
    /// URL of the web conversion event.
    /// </summary>
    std::string getEventSourceUrl() const;
    void setEventSourceUrl(std::string const& value);
    bool eventSourceUrlIsSet() const;
    void unsetEvent_source_url();
    /// <summary>
    /// When action_source is web or offline, it defines whether the user has opted out of tracking for web conversion events. While when action_source is app_android or app_ios, it defines whether the user has enabled Limit Ad Tracking on their iOS device, or opted out of Ads Personalization on their Android device.
    /// </summary>
    bool isOptOut() const;
    void setOptOut(bool const value);
    bool optOutIsSet() const;
    void unsetOpt_out();
    /// <summary>
    /// The third party partner name responsible to send the event to Conversions API on behalf of the advertiser. The naming convention is \&quot;ss-partnername\&quot; lowercase. E.g ‘ss-shopify’
    /// </summary>
    std::string getPartnerName() const;
    void setPartnerName(std::string const& value);
    bool partnerNameIsSet() const;
    void unsetPartner_name();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::ConversionEventsUserData getUserData() const;
    void setUserData(org::openapitools::server::model::ConversionEventsUserData const& value);
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::ConversionEvents_data_inner_custom_data getCustomData() const;
    void setCustomData(org::openapitools::server::model::ConversionEvents_data_inner_custom_data const& value);
    bool customDataIsSet() const;
    void unsetCustom_data();
    /// <summary>
    /// The app store app ID.
    /// </summary>
    std::string getAppId() const;
    void setAppId(std::string const& value);
    bool appIdIsSet() const;
    void unsetApp_id();
    /// <summary>
    /// Name of the app.
    /// </summary>
    std::string getAppName() const;
    void setAppName(std::string const& value);
    bool appNameIsSet() const;
    void unsetApp_name();
    /// <summary>
    /// Version of the app.
    /// </summary>
    std::string getAppVersion() const;
    void setAppVersion(std::string const& value);
    bool appVersionIsSet() const;
    void unsetApp_version();
    /// <summary>
    /// Brand of the user device.
    /// </summary>
    std::string getDeviceBrand() const;
    void setDeviceBrand(std::string const& value);
    bool deviceBrandIsSet() const;
    void unsetDevice_brand();
    /// <summary>
    /// User device&#39;s mobile carrier.
    /// </summary>
    std::string getDeviceCarrier() const;
    void setDeviceCarrier(std::string const& value);
    bool deviceCarrierIsSet() const;
    void unsetDevice_carrier();
    /// <summary>
    /// Model of the user device.
    /// </summary>
    std::string getDeviceModel() const;
    void setDeviceModel(std::string const& value);
    bool deviceModelIsSet() const;
    void unsetDevice_model();
    /// <summary>
    /// Type of the user device.
    /// </summary>
    std::string getDeviceType() const;
    void setDeviceType(std::string const& value);
    bool deviceTypeIsSet() const;
    void unsetDevice_type();
    /// <summary>
    /// Version of the device operating system.
    /// </summary>
    std::string getOsVersion() const;
    void setOsVersion(std::string const& value);
    bool osVersionIsSet() const;
    void unsetOs_version();
    /// <summary>
    /// Whether the event occurred when the user device was connected to wifi.
    /// </summary>
    bool isWifi() const;
    void setWifi(bool const value);
    bool wifiIsSet() const;
    void unsetWifi();
    /// <summary>
    /// Two-character ISO-639-1 language code indicating the user&#39;s language.
    /// </summary>
    std::string getLanguage() const;
    void setLanguage(std::string const& value);
    bool languageIsSet() const;
    void unsetLanguage();

    friend  void to_json(nlohmann::json& j, const ConversionEvents_data_inner& o);
    friend  void from_json(const nlohmann::json& j, ConversionEvents_data_inner& o);
protected:
    std::string m_Event_name;

    std::string m_Action_source;

    int64_t m_Event_time;

    std::string m_Event_id;

    std::string m_Event_source_url;
    bool m_Event_source_urlIsSet;
    bool m_Opt_out;
    bool m_Opt_outIsSet;
    std::string m_Partner_name;
    bool m_Partner_nameIsSet;
    org::openapitools::server::model::ConversionEventsUserData m_User_data;

    org::openapitools::server::model::ConversionEvents_data_inner_custom_data m_Custom_data;
    bool m_Custom_dataIsSet;
    std::string m_App_id;
    bool m_App_idIsSet;
    std::string m_App_name;
    bool m_App_nameIsSet;
    std::string m_App_version;
    bool m_App_versionIsSet;
    std::string m_Device_brand;
    bool m_Device_brandIsSet;
    std::string m_Device_carrier;
    bool m_Device_carrierIsSet;
    std::string m_Device_model;
    bool m_Device_modelIsSet;
    std::string m_Device_type;
    bool m_Device_typeIsSet;
    std::string m_Os_version;
    bool m_Os_versionIsSet;
    bool m_Wifi;
    bool m_WifiIsSet;
    std::string m_Language;
    bool m_LanguageIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* ConversionEvents_data_inner_H_ */
