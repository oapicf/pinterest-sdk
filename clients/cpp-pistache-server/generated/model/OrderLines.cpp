/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "OrderLines.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

OrderLines::OrderLines()
{
    m_Id = "";
    m_IdIsSet = false;
    m_Type = "";
    m_TypeIsSet = false;
    m_Ad_account_id = "";
    m_Ad_account_idIsSet = false;
    m_Purchase_order_id = "";
    m_Purchase_order_idIsSet = false;
    m_Start_time = 0.0;
    m_Start_timeIsSet = false;
    m_End_time = 0.0;
    m_End_timeIsSet = false;
    m_Budget = 0.0;
    m_BudgetIsSet = false;
    m_Paid_budget = 0.0;
    m_Paid_budgetIsSet = false;
    m_StatusIsSet = false;
    m_Name = "";
    m_NameIsSet = false;
    m_Paid_typeIsSet = false;
    
}

void OrderLines::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool OrderLines::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool OrderLines::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "OrderLines" : pathPrefix;

         
    if (idIsSet())
    {
        const std::string& value = m_Id;
        const std::string currentValuePath = _pathPrefix + ".id";
                
        

    }
                                            
    return success;
}

bool OrderLines::operator==(const OrderLines& rhs) const
{
    return
    
    
    
    ((!idIsSet() && !rhs.idIsSet()) || (idIsSet() && rhs.idIsSet() && getId() == rhs.getId())) &&
    
    
    ((!typeIsSet() && !rhs.typeIsSet()) || (typeIsSet() && rhs.typeIsSet() && getType() == rhs.getType())) &&
    
    
    ((!adAccountIdIsSet() && !rhs.adAccountIdIsSet()) || (adAccountIdIsSet() && rhs.adAccountIdIsSet() && getAdAccountId() == rhs.getAdAccountId())) &&
    
    
    ((!purchaseOrderIdIsSet() && !rhs.purchaseOrderIdIsSet()) || (purchaseOrderIdIsSet() && rhs.purchaseOrderIdIsSet() && getPurchaseOrderId() == rhs.getPurchaseOrderId())) &&
    
    
    ((!startTimeIsSet() && !rhs.startTimeIsSet()) || (startTimeIsSet() && rhs.startTimeIsSet() && getStartTime() == rhs.getStartTime())) &&
    
    
    ((!endTimeIsSet() && !rhs.endTimeIsSet()) || (endTimeIsSet() && rhs.endTimeIsSet() && getEndTime() == rhs.getEndTime())) &&
    
    
    ((!budgetIsSet() && !rhs.budgetIsSet()) || (budgetIsSet() && rhs.budgetIsSet() && getBudget() == rhs.getBudget())) &&
    
    
    ((!paidBudgetIsSet() && !rhs.paidBudgetIsSet()) || (paidBudgetIsSet() && rhs.paidBudgetIsSet() && getPaidBudget() == rhs.getPaidBudget())) &&
    
    
    ((!statusIsSet() && !rhs.statusIsSet()) || (statusIsSet() && rhs.statusIsSet() && getStatus() == rhs.getStatus())) &&
    
    
    ((!nameIsSet() && !rhs.nameIsSet()) || (nameIsSet() && rhs.nameIsSet() && getName() == rhs.getName())) &&
    
    
    ((!paidTypeIsSet() && !rhs.paidTypeIsSet()) || (paidTypeIsSet() && rhs.paidTypeIsSet() && getPaidType() == rhs.getPaidType()))
    
    ;
}

bool OrderLines::operator!=(const OrderLines& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const OrderLines& o)
{
    j = nlohmann::json::object();
    if(o.idIsSet())
        j["id"] = o.m_Id;
    if(o.typeIsSet())
        j["type"] = o.m_Type;
    if(o.adAccountIdIsSet())
        j["ad_account_id"] = o.m_Ad_account_id;
    if(o.purchaseOrderIdIsSet())
        j["purchase_order_id"] = o.m_Purchase_order_id;
    if(o.startTimeIsSet())
        j["start_time"] = o.m_Start_time;
    if(o.endTimeIsSet())
        j["end_time"] = o.m_End_time;
    if(o.budgetIsSet())
        j["budget"] = o.m_Budget;
    if(o.paidBudgetIsSet())
        j["paid_budget"] = o.m_Paid_budget;
    if(o.statusIsSet())
        j["status"] = o.m_Status;
    if(o.nameIsSet())
        j["name"] = o.m_Name;
    if(o.paidTypeIsSet())
        j["paid_type"] = o.m_Paid_type;
    
}

void from_json(const nlohmann::json& j, OrderLines& o)
{
    if(j.find("id") != j.end())
    {
        j.at("id").get_to(o.m_Id);
        o.m_IdIsSet = true;
    } 
    if(j.find("type") != j.end())
    {
        j.at("type").get_to(o.m_Type);
        o.m_TypeIsSet = true;
    } 
    if(j.find("ad_account_id") != j.end())
    {
        j.at("ad_account_id").get_to(o.m_Ad_account_id);
        o.m_Ad_account_idIsSet = true;
    } 
    if(j.find("purchase_order_id") != j.end())
    {
        j.at("purchase_order_id").get_to(o.m_Purchase_order_id);
        o.m_Purchase_order_idIsSet = true;
    } 
    if(j.find("start_time") != j.end())
    {
        j.at("start_time").get_to(o.m_Start_time);
        o.m_Start_timeIsSet = true;
    } 
    if(j.find("end_time") != j.end())
    {
        j.at("end_time").get_to(o.m_End_time);
        o.m_End_timeIsSet = true;
    } 
    if(j.find("budget") != j.end())
    {
        j.at("budget").get_to(o.m_Budget);
        o.m_BudgetIsSet = true;
    } 
    if(j.find("paid_budget") != j.end())
    {
        j.at("paid_budget").get_to(o.m_Paid_budget);
        o.m_Paid_budgetIsSet = true;
    } 
    if(j.find("status") != j.end())
    {
        j.at("status").get_to(o.m_Status);
        o.m_StatusIsSet = true;
    } 
    if(j.find("name") != j.end())
    {
        j.at("name").get_to(o.m_Name);
        o.m_NameIsSet = true;
    } 
    if(j.find("paid_type") != j.end())
    {
        j.at("paid_type").get_to(o.m_Paid_type);
        o.m_Paid_typeIsSet = true;
    } 
    
}

std::string OrderLines::getId() const
{
    return m_Id;
}
void OrderLines::setId(std::string const& value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool OrderLines::idIsSet() const
{
    return m_IdIsSet;
}
void OrderLines::unsetId()
{
    m_IdIsSet = false;
}
std::string OrderLines::getType() const
{
    return m_Type;
}
void OrderLines::setType(std::string const& value)
{
    m_Type = value;
    m_TypeIsSet = true;
}
bool OrderLines::typeIsSet() const
{
    return m_TypeIsSet;
}
void OrderLines::unsetType()
{
    m_TypeIsSet = false;
}
std::string OrderLines::getAdAccountId() const
{
    return m_Ad_account_id;
}
void OrderLines::setAdAccountId(std::string const& value)
{
    m_Ad_account_id = value;
    m_Ad_account_idIsSet = true;
}
bool OrderLines::adAccountIdIsSet() const
{
    return m_Ad_account_idIsSet;
}
void OrderLines::unsetAd_account_id()
{
    m_Ad_account_idIsSet = false;
}
std::string OrderLines::getPurchaseOrderId() const
{
    return m_Purchase_order_id;
}
void OrderLines::setPurchaseOrderId(std::string const& value)
{
    m_Purchase_order_id = value;
    m_Purchase_order_idIsSet = true;
}
bool OrderLines::purchaseOrderIdIsSet() const
{
    return m_Purchase_order_idIsSet;
}
void OrderLines::unsetPurchase_order_id()
{
    m_Purchase_order_idIsSet = false;
}
double OrderLines::getStartTime() const
{
    return m_Start_time;
}
void OrderLines::setStartTime(double const value)
{
    m_Start_time = value;
    m_Start_timeIsSet = true;
}
bool OrderLines::startTimeIsSet() const
{
    return m_Start_timeIsSet;
}
void OrderLines::unsetStart_time()
{
    m_Start_timeIsSet = false;
}
double OrderLines::getEndTime() const
{
    return m_End_time;
}
void OrderLines::setEndTime(double const value)
{
    m_End_time = value;
    m_End_timeIsSet = true;
}
bool OrderLines::endTimeIsSet() const
{
    return m_End_timeIsSet;
}
void OrderLines::unsetEnd_time()
{
    m_End_timeIsSet = false;
}
double OrderLines::getBudget() const
{
    return m_Budget;
}
void OrderLines::setBudget(double const value)
{
    m_Budget = value;
    m_BudgetIsSet = true;
}
bool OrderLines::budgetIsSet() const
{
    return m_BudgetIsSet;
}
void OrderLines::unsetBudget()
{
    m_BudgetIsSet = false;
}
double OrderLines::getPaidBudget() const
{
    return m_Paid_budget;
}
void OrderLines::setPaidBudget(double const value)
{
    m_Paid_budget = value;
    m_Paid_budgetIsSet = true;
}
bool OrderLines::paidBudgetIsSet() const
{
    return m_Paid_budgetIsSet;
}
void OrderLines::unsetPaid_budget()
{
    m_Paid_budgetIsSet = false;
}
org::openapitools::server::model::OrderLineStatus OrderLines::getStatus() const
{
    return m_Status;
}
void OrderLines::setStatus(org::openapitools::server::model::OrderLineStatus const& value)
{
    m_Status = value;
    m_StatusIsSet = true;
}
bool OrderLines::statusIsSet() const
{
    return m_StatusIsSet;
}
void OrderLines::unsetStatus()
{
    m_StatusIsSet = false;
}
std::string OrderLines::getName() const
{
    return m_Name;
}
void OrderLines::setName(std::string const& value)
{
    m_Name = value;
    m_NameIsSet = true;
}
bool OrderLines::nameIsSet() const
{
    return m_NameIsSet;
}
void OrderLines::unsetName()
{
    m_NameIsSet = false;
}
org::openapitools::server::model::OrderLinePaidType OrderLines::getPaidType() const
{
    return m_Paid_type;
}
void OrderLines::setPaidType(org::openapitools::server::model::OrderLinePaidType const& value)
{
    m_Paid_type = value;
    m_Paid_typeIsSet = true;
}
bool OrderLines::paidTypeIsSet() const
{
    return m_Paid_typeIsSet;
}
void OrderLines::unsetPaid_type()
{
    m_Paid_typeIsSet = false;
}


} // namespace org::openapitools::server::model

