/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * IntegrationLogClientError.h
 *
 * System error details included in the log sent by the client.
 */

#ifndef IntegrationLogClientError_H_
#define IntegrationLogClientError_H_


#include <string>
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// System error details included in the log sent by the client.
/// </summary>
class  IntegrationLogClientError
{
public:
    IntegrationLogClientError();
    virtual ~IntegrationLogClientError() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const IntegrationLogClientError& rhs) const;
    bool operator!=(const IntegrationLogClientError& rhs) const;

    /////////////////////////////////////////////
    /// IntegrationLogClientError members

    /// <summary>
    /// Original cause of the error.
    /// </summary>
    std::string getCause() const;
    void setCause(std::string const& value);
    bool causeIsSet() const;
    void unsetCause();
    /// <summary>
    /// Column number in the line of the file that raised the error.
    /// </summary>
    int32_t getColumnNumber() const;
    void setColumnNumber(int32_t const value);
    bool columnNumberIsSet() const;
    void unsetColumn_number();
    /// <summary>
    /// Filename where the error happened.
    /// </summary>
    std::string getFileName() const;
    void setFileName(std::string const& value);
    bool fileNameIsSet() const;
    void unsetFile_name();
    /// <summary>
    /// Line number where the error happened.
    /// </summary>
    int32_t getLineNumber() const;
    void setLineNumber(int32_t const value);
    bool lineNumberIsSet() const;
    void unsetLine_number();
    /// <summary>
    /// Human-readable description of the error.
    /// </summary>
    std::string getMessage() const;
    void setMessage(std::string const& value);
    bool messageIsSet() const;
    void unsetMessage();
    /// <summary>
    /// More detail about the message.
    /// </summary>
    std::string getMessageDetail() const;
    void setMessageDetail(std::string const& value);
    bool messageDetailIsSet() const;
    void unsetMessage_detail();
    /// <summary>
    /// Filename where the error happened.
    /// </summary>
    std::string getName() const;
    void setName(std::string const& value);
    bool nameIsSet() const;
    void unsetName();
    /// <summary>
    /// Integer that specifies the error code.
    /// </summary>
    int32_t getNumber() const;
    void setNumber(int32_t const value);
    bool numberIsSet() const;
    void unsetnumber();
    /// <summary>
    /// Stack trace of where the error happened.
    /// </summary>
    std::string getStackTrace() const;
    void setStackTrace(std::string const& value);
    bool stackTraceIsSet() const;
    void unsetStack_trace();

    friend  void to_json(nlohmann::json& j, const IntegrationLogClientError& o);
    friend  void from_json(const nlohmann::json& j, IntegrationLogClientError& o);
protected:
    std::string m_Cause;
    bool m_CauseIsSet;
    int32_t m_Column_number;
    bool m_Column_numberIsSet;
    std::string m_File_name;
    bool m_File_nameIsSet;
    int32_t m_Line_number;
    bool m_Line_numberIsSet;
    std::string m_Message;
    bool m_MessageIsSet;
    std::string m_Message_detail;
    bool m_Message_detailIsSet;
    std::string m_Name;
    bool m_NameIsSet;
    int32_t m_number;
    bool m_numberIsSet;
    std::string m_Stack_trace;
    bool m_Stack_traceIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* IntegrationLogClientError_H_ */
