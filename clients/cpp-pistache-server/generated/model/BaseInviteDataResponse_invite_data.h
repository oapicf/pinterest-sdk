/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * BaseInviteDataResponse_invite_data.h
 *
 * Metadata for the invite/request.
 */

#ifndef BaseInviteDataResponse_invite_data_H_
#define BaseInviteDataResponse_invite_data_H_


#include <string>
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// Metadata for the invite/request.
/// </summary>
class  BaseInviteDataResponse_invite_data
{
public:
    BaseInviteDataResponse_invite_data();
    virtual ~BaseInviteDataResponse_invite_data() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const BaseInviteDataResponse_invite_data& rhs) const;
    bool operator!=(const BaseInviteDataResponse_invite_data& rhs) const;

    /////////////////////////////////////////////
    /// BaseInviteDataResponse_invite_data members

    /// <summary>
    /// The date and time when the invite/request will expire. Returned in milliseconds.
    /// </summary>
    int32_t getInviteExpiration() const;
    void setInviteExpiration(int32_t const value);
    bool inviteExpirationIsSet() const;
    void unsetInvite_expiration();
    /// <summary>
    /// The current status of the invite. The invite can be in one of the following states PENDING, ACCEPTED, DECLINED, CANCELLED, EXPIRED.
    /// </summary>
    std::string getInviteStatus() const;
    void setInviteStatus(std::string const& value);
    bool inviteStatusIsSet() const;
    void unsetInvite_status();
    /// <summary>
    /// The type of invite. &lt;br&gt;&#39;MEMBER_INVITE&#39; is to invite a member to access your business assets. &lt;br&gt;&#39;PARTNER_INVITE&#39; is to invite a partner to access your business assets. &lt;br&gt;&#39;PARTNER_REQUEST&#39; is to request access a partner&#39;s business assets.
    /// </summary>
    std::string getInviteType() const;
    void setInviteType(std::string const& value);
    bool inviteTypeIsSet() const;
    void unsetInvite_type();
    /// <summary>
    /// The date and time the invite/request was last updated. Returned in milliseconds.
    /// </summary>
    int32_t getLastUpdatedTime() const;
    void setLastUpdatedTime(int32_t const value);
    bool lastUpdatedTimeIsSet() const;
    void unsetLast_updated_time();
    /// <summary>
    /// The date and time the invite/request was sent/created. Returned in milliseconds.
    /// </summary>
    int32_t getSentAt() const;
    void setSentAt(int32_t const value);
    bool sentAtIsSet() const;
    void unsetSent_at();

    friend  void to_json(nlohmann::json& j, const BaseInviteDataResponse_invite_data& o);
    friend  void from_json(const nlohmann::json& j, BaseInviteDataResponse_invite_data& o);
protected:
    int32_t m_Invite_expiration;
    bool m_Invite_expirationIsSet;
    std::string m_Invite_status;
    bool m_Invite_statusIsSet;
    std::string m_Invite_type;
    bool m_Invite_typeIsSet;
    int32_t m_Last_updated_time;
    bool m_Last_updated_timeIsSet;
    int32_t m_Sent_at;
    bool m_Sent_atIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* BaseInviteDataResponse_invite_data_H_ */
