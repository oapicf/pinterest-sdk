/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "LineItem.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

LineItem::LineItem()
{
    m_Product_brand = "";
    m_Product_brandIsSet = false;
    m_Product_category = "";
    m_Product_categoryIsSet = false;
    m_Product_id = 0;
    m_Product_idIsSet = false;
    m_Product_name = "";
    m_Product_nameIsSet = false;
    m_Product_price = "";
    m_Product_priceIsSet = false;
    m_Product_quantity = 0;
    m_Product_quantityIsSet = false;
    m_Product_variant = "";
    m_Product_variantIsSet = false;
    m_Product_variant_id = "";
    m_Product_variant_idIsSet = false;
    
}

void LineItem::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool LineItem::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool LineItem::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "LineItem" : pathPrefix;

                                    
    return success;
}

bool LineItem::operator==(const LineItem& rhs) const
{
    return
    
    
    
    ((!productBrandIsSet() && !rhs.productBrandIsSet()) || (productBrandIsSet() && rhs.productBrandIsSet() && getProductBrand() == rhs.getProductBrand())) &&
    
    
    ((!productCategoryIsSet() && !rhs.productCategoryIsSet()) || (productCategoryIsSet() && rhs.productCategoryIsSet() && getProductCategory() == rhs.getProductCategory())) &&
    
    
    ((!productIdIsSet() && !rhs.productIdIsSet()) || (productIdIsSet() && rhs.productIdIsSet() && getProductId() == rhs.getProductId())) &&
    
    
    ((!productNameIsSet() && !rhs.productNameIsSet()) || (productNameIsSet() && rhs.productNameIsSet() && getProductName() == rhs.getProductName())) &&
    
    
    ((!productPriceIsSet() && !rhs.productPriceIsSet()) || (productPriceIsSet() && rhs.productPriceIsSet() && getProductPrice() == rhs.getProductPrice())) &&
    
    
    ((!productQuantityIsSet() && !rhs.productQuantityIsSet()) || (productQuantityIsSet() && rhs.productQuantityIsSet() && getProductQuantity() == rhs.getProductQuantity())) &&
    
    
    ((!productVariantIsSet() && !rhs.productVariantIsSet()) || (productVariantIsSet() && rhs.productVariantIsSet() && getProductVariant() == rhs.getProductVariant())) &&
    
    
    ((!productVariantIdIsSet() && !rhs.productVariantIdIsSet()) || (productVariantIdIsSet() && rhs.productVariantIdIsSet() && getProductVariantId() == rhs.getProductVariantId()))
    
    ;
}

bool LineItem::operator!=(const LineItem& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const LineItem& o)
{
    j = nlohmann::json::object();
    if(o.productBrandIsSet())
        j["product_brand"] = o.m_Product_brand;
    if(o.productCategoryIsSet())
        j["product_category"] = o.m_Product_category;
    if(o.productIdIsSet())
        j["product_id"] = o.m_Product_id;
    if(o.productNameIsSet())
        j["product_name"] = o.m_Product_name;
    if(o.productPriceIsSet())
        j["product_price"] = o.m_Product_price;
    if(o.productQuantityIsSet())
        j["product_quantity"] = o.m_Product_quantity;
    if(o.productVariantIsSet())
        j["product_variant"] = o.m_Product_variant;
    if(o.productVariantIdIsSet())
        j["product_variant_id"] = o.m_Product_variant_id;
    
}

void from_json(const nlohmann::json& j, LineItem& o)
{
    if(j.find("product_brand") != j.end())
    {
        j.at("product_brand").get_to(o.m_Product_brand);
        o.m_Product_brandIsSet = true;
    } 
    if(j.find("product_category") != j.end())
    {
        j.at("product_category").get_to(o.m_Product_category);
        o.m_Product_categoryIsSet = true;
    } 
    if(j.find("product_id") != j.end())
    {
        j.at("product_id").get_to(o.m_Product_id);
        o.m_Product_idIsSet = true;
    } 
    if(j.find("product_name") != j.end())
    {
        j.at("product_name").get_to(o.m_Product_name);
        o.m_Product_nameIsSet = true;
    } 
    if(j.find("product_price") != j.end())
    {
        j.at("product_price").get_to(o.m_Product_price);
        o.m_Product_priceIsSet = true;
    } 
    if(j.find("product_quantity") != j.end())
    {
        j.at("product_quantity").get_to(o.m_Product_quantity);
        o.m_Product_quantityIsSet = true;
    } 
    if(j.find("product_variant") != j.end())
    {
        j.at("product_variant").get_to(o.m_Product_variant);
        o.m_Product_variantIsSet = true;
    } 
    if(j.find("product_variant_id") != j.end())
    {
        j.at("product_variant_id").get_to(o.m_Product_variant_id);
        o.m_Product_variant_idIsSet = true;
    } 
    
}

std::string LineItem::getProductBrand() const
{
    return m_Product_brand;
}
void LineItem::setProductBrand(std::string const& value)
{
    m_Product_brand = value;
    m_Product_brandIsSet = true;
}
bool LineItem::productBrandIsSet() const
{
    return m_Product_brandIsSet;
}
void LineItem::unsetProduct_brand()
{
    m_Product_brandIsSet = false;
}
std::string LineItem::getProductCategory() const
{
    return m_Product_category;
}
void LineItem::setProductCategory(std::string const& value)
{
    m_Product_category = value;
    m_Product_categoryIsSet = true;
}
bool LineItem::productCategoryIsSet() const
{
    return m_Product_categoryIsSet;
}
void LineItem::unsetProduct_category()
{
    m_Product_categoryIsSet = false;
}
int32_t LineItem::getProductId() const
{
    return m_Product_id;
}
void LineItem::setProductId(int32_t const value)
{
    m_Product_id = value;
    m_Product_idIsSet = true;
}
bool LineItem::productIdIsSet() const
{
    return m_Product_idIsSet;
}
void LineItem::unsetProduct_id()
{
    m_Product_idIsSet = false;
}
std::string LineItem::getProductName() const
{
    return m_Product_name;
}
void LineItem::setProductName(std::string const& value)
{
    m_Product_name = value;
    m_Product_nameIsSet = true;
}
bool LineItem::productNameIsSet() const
{
    return m_Product_nameIsSet;
}
void LineItem::unsetProduct_name()
{
    m_Product_nameIsSet = false;
}
std::string LineItem::getProductPrice() const
{
    return m_Product_price;
}
void LineItem::setProductPrice(std::string const& value)
{
    m_Product_price = value;
    m_Product_priceIsSet = true;
}
bool LineItem::productPriceIsSet() const
{
    return m_Product_priceIsSet;
}
void LineItem::unsetProduct_price()
{
    m_Product_priceIsSet = false;
}
int32_t LineItem::getProductQuantity() const
{
    return m_Product_quantity;
}
void LineItem::setProductQuantity(int32_t const value)
{
    m_Product_quantity = value;
    m_Product_quantityIsSet = true;
}
bool LineItem::productQuantityIsSet() const
{
    return m_Product_quantityIsSet;
}
void LineItem::unsetProduct_quantity()
{
    m_Product_quantityIsSet = false;
}
std::string LineItem::getProductVariant() const
{
    return m_Product_variant;
}
void LineItem::setProductVariant(std::string const& value)
{
    m_Product_variant = value;
    m_Product_variantIsSet = true;
}
bool LineItem::productVariantIsSet() const
{
    return m_Product_variantIsSet;
}
void LineItem::unsetProduct_variant()
{
    m_Product_variantIsSet = false;
}
std::string LineItem::getProductVariantId() const
{
    return m_Product_variant_id;
}
void LineItem::setProductVariantId(std::string const& value)
{
    m_Product_variant_id = value;
    m_Product_variant_idIsSet = true;
}
bool LineItem::productVariantIdIsSet() const
{
    return m_Product_variant_idIsSet;
}
void LineItem::unsetProduct_variant_id()
{
    m_Product_variant_idIsSet = false;
}


} // namespace org::openapitools::server::model

