/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "UserWebsiteSummary.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

UserWebsiteSummary::UserWebsiteSummary()
{
    m_Website = "";
    m_WebsiteIsSet = false;
    m_Status = "";
    m_StatusIsSet = false;
    m_Verified_at = "";
    m_Verified_atIsSet = false;
    
}

void UserWebsiteSummary::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool UserWebsiteSummary::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool UserWebsiteSummary::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "UserWebsiteSummary" : pathPrefix;

                
    return success;
}

bool UserWebsiteSummary::operator==(const UserWebsiteSummary& rhs) const
{
    return
    
    
    
    ((!websiteIsSet() && !rhs.websiteIsSet()) || (websiteIsSet() && rhs.websiteIsSet() && getWebsite() == rhs.getWebsite())) &&
    
    
    ((!statusIsSet() && !rhs.statusIsSet()) || (statusIsSet() && rhs.statusIsSet() && getStatus() == rhs.getStatus())) &&
    
    
    ((!verifiedAtIsSet() && !rhs.verifiedAtIsSet()) || (verifiedAtIsSet() && rhs.verifiedAtIsSet() && getVerifiedAt() == rhs.getVerifiedAt()))
    
    ;
}

bool UserWebsiteSummary::operator!=(const UserWebsiteSummary& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const UserWebsiteSummary& o)
{
    j = nlohmann::json::object();
    if(o.websiteIsSet())
        j["website"] = o.m_Website;
    if(o.statusIsSet())
        j["status"] = o.m_Status;
    if(o.verifiedAtIsSet())
        j["verified_at"] = o.m_Verified_at;
    
}

void from_json(const nlohmann::json& j, UserWebsiteSummary& o)
{
    if(j.find("website") != j.end())
    {
        j.at("website").get_to(o.m_Website);
        o.m_WebsiteIsSet = true;
    } 
    if(j.find("status") != j.end())
    {
        j.at("status").get_to(o.m_Status);
        o.m_StatusIsSet = true;
    } 
    if(j.find("verified_at") != j.end())
    {
        j.at("verified_at").get_to(o.m_Verified_at);
        o.m_Verified_atIsSet = true;
    } 
    
}

std::string UserWebsiteSummary::getWebsite() const
{
    return m_Website;
}
void UserWebsiteSummary::setWebsite(std::string const& value)
{
    m_Website = value;
    m_WebsiteIsSet = true;
}
bool UserWebsiteSummary::websiteIsSet() const
{
    return m_WebsiteIsSet;
}
void UserWebsiteSummary::unsetWebsite()
{
    m_WebsiteIsSet = false;
}
std::string UserWebsiteSummary::getStatus() const
{
    return m_Status;
}
void UserWebsiteSummary::setStatus(std::string const& value)
{
    m_Status = value;
    m_StatusIsSet = true;
}
bool UserWebsiteSummary::statusIsSet() const
{
    return m_StatusIsSet;
}
void UserWebsiteSummary::unsetStatus()
{
    m_StatusIsSet = false;
}
std::string UserWebsiteSummary::getVerifiedAt() const
{
    return m_Verified_at;
}
void UserWebsiteSummary::setVerifiedAt(std::string const& value)
{
    m_Verified_at = value;
    m_Verified_atIsSet = true;
}
bool UserWebsiteSummary::verifiedAtIsSet() const
{
    return m_Verified_atIsSet;
}
void UserWebsiteSummary::unsetVerified_at()
{
    m_Verified_atIsSet = false;
}


} // namespace org::openapitools::server::model

