/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ConversionEvents_data_inner_custom_data.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

ConversionEvents_data_inner_custom_data::ConversionEvents_data_inner_custom_data()
{
    m_Currency = "";
    m_CurrencyIsSet = false;
    m_Value = "";
    m_ValueIsSet = false;
    m_Content_idsIsSet = false;
    m_Content_name = "";
    m_Content_nameIsSet = false;
    m_Content_category = "";
    m_Content_categoryIsSet = false;
    m_Content_brand = "";
    m_Content_brandIsSet = false;
    m_ContentsIsSet = false;
    m_Num_items = 0L;
    m_Num_itemsIsSet = false;
    m_Order_id = "";
    m_Order_idIsSet = false;
    m_Search_string = "";
    m_Search_stringIsSet = false;
    m_Opt_out_type = "";
    m_Opt_out_typeIsSet = false;
    m_Np = "";
    m_NpIsSet = false;
    
}

void ConversionEvents_data_inner_custom_data::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool ConversionEvents_data_inner_custom_data::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool ConversionEvents_data_inner_custom_data::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "ConversionEvents_data_inner_custom_data" : pathPrefix;

                 
    if (contentIdsIsSet())
    {
        const std::vector<std::string>& value = m_Content_ids;
        const std::string currentValuePath = _pathPrefix + ".contentIds";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const std::string& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }

    }
                     
    if (contentsIsSet())
    {
        const std::vector<org::openapitools::server::model::ConversionEvents_data_inner_custom_data_contents_inner>& value = m_Contents;
        const std::string currentValuePath = _pathPrefix + ".contents";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::ConversionEvents_data_inner_custom_data_contents_inner& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".contents") && success;
 
                i++;
            }
        }

    }
                        
    return success;
}

bool ConversionEvents_data_inner_custom_data::operator==(const ConversionEvents_data_inner_custom_data& rhs) const
{
    return
    
    
    
    ((!currencyIsSet() && !rhs.currencyIsSet()) || (currencyIsSet() && rhs.currencyIsSet() && getCurrency() == rhs.getCurrency())) &&
    
    
    ((!valueIsSet() && !rhs.valueIsSet()) || (valueIsSet() && rhs.valueIsSet() && getValue() == rhs.getValue())) &&
    
    
    ((!contentIdsIsSet() && !rhs.contentIdsIsSet()) || (contentIdsIsSet() && rhs.contentIdsIsSet() && getContentIds() == rhs.getContentIds())) &&
    
    
    ((!contentNameIsSet() && !rhs.contentNameIsSet()) || (contentNameIsSet() && rhs.contentNameIsSet() && getContentName() == rhs.getContentName())) &&
    
    
    ((!contentCategoryIsSet() && !rhs.contentCategoryIsSet()) || (contentCategoryIsSet() && rhs.contentCategoryIsSet() && getContentCategory() == rhs.getContentCategory())) &&
    
    
    ((!contentBrandIsSet() && !rhs.contentBrandIsSet()) || (contentBrandIsSet() && rhs.contentBrandIsSet() && getContentBrand() == rhs.getContentBrand())) &&
    
    
    ((!contentsIsSet() && !rhs.contentsIsSet()) || (contentsIsSet() && rhs.contentsIsSet() && getContents() == rhs.getContents())) &&
    
    
    ((!numItemsIsSet() && !rhs.numItemsIsSet()) || (numItemsIsSet() && rhs.numItemsIsSet() && getNumItems() == rhs.getNumItems())) &&
    
    
    ((!orderIdIsSet() && !rhs.orderIdIsSet()) || (orderIdIsSet() && rhs.orderIdIsSet() && getOrderId() == rhs.getOrderId())) &&
    
    
    ((!searchStringIsSet() && !rhs.searchStringIsSet()) || (searchStringIsSet() && rhs.searchStringIsSet() && getSearchString() == rhs.getSearchString())) &&
    
    
    ((!optOutTypeIsSet() && !rhs.optOutTypeIsSet()) || (optOutTypeIsSet() && rhs.optOutTypeIsSet() && getOptOutType() == rhs.getOptOutType())) &&
    
    
    ((!npIsSet() && !rhs.npIsSet()) || (npIsSet() && rhs.npIsSet() && getNp() == rhs.getNp()))
    
    ;
}

bool ConversionEvents_data_inner_custom_data::operator!=(const ConversionEvents_data_inner_custom_data& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const ConversionEvents_data_inner_custom_data& o)
{
    j = nlohmann::json::object();
    if(o.currencyIsSet())
        j["currency"] = o.m_Currency;
    if(o.valueIsSet())
        j["value"] = o.m_Value;
    if(o.contentIdsIsSet() || !o.m_Content_ids.empty())
        j["content_ids"] = o.m_Content_ids;
    if(o.contentNameIsSet())
        j["content_name"] = o.m_Content_name;
    if(o.contentCategoryIsSet())
        j["content_category"] = o.m_Content_category;
    if(o.contentBrandIsSet())
        j["content_brand"] = o.m_Content_brand;
    if(o.contentsIsSet() || !o.m_Contents.empty())
        j["contents"] = o.m_Contents;
    if(o.numItemsIsSet())
        j["num_items"] = o.m_Num_items;
    if(o.orderIdIsSet())
        j["order_id"] = o.m_Order_id;
    if(o.searchStringIsSet())
        j["search_string"] = o.m_Search_string;
    if(o.optOutTypeIsSet())
        j["opt_out_type"] = o.m_Opt_out_type;
    if(o.npIsSet())
        j["np"] = o.m_Np;
    
}

void from_json(const nlohmann::json& j, ConversionEvents_data_inner_custom_data& o)
{
    if(j.find("currency") != j.end())
    {
        j.at("currency").get_to(o.m_Currency);
        o.m_CurrencyIsSet = true;
    } 
    if(j.find("value") != j.end())
    {
        j.at("value").get_to(o.m_Value);
        o.m_ValueIsSet = true;
    } 
    if(j.find("content_ids") != j.end())
    {
        j.at("content_ids").get_to(o.m_Content_ids);
        o.m_Content_idsIsSet = true;
    } 
    if(j.find("content_name") != j.end())
    {
        j.at("content_name").get_to(o.m_Content_name);
        o.m_Content_nameIsSet = true;
    } 
    if(j.find("content_category") != j.end())
    {
        j.at("content_category").get_to(o.m_Content_category);
        o.m_Content_categoryIsSet = true;
    } 
    if(j.find("content_brand") != j.end())
    {
        j.at("content_brand").get_to(o.m_Content_brand);
        o.m_Content_brandIsSet = true;
    } 
    if(j.find("contents") != j.end())
    {
        j.at("contents").get_to(o.m_Contents);
        o.m_ContentsIsSet = true;
    } 
    if(j.find("num_items") != j.end())
    {
        j.at("num_items").get_to(o.m_Num_items);
        o.m_Num_itemsIsSet = true;
    } 
    if(j.find("order_id") != j.end())
    {
        j.at("order_id").get_to(o.m_Order_id);
        o.m_Order_idIsSet = true;
    } 
    if(j.find("search_string") != j.end())
    {
        j.at("search_string").get_to(o.m_Search_string);
        o.m_Search_stringIsSet = true;
    } 
    if(j.find("opt_out_type") != j.end())
    {
        j.at("opt_out_type").get_to(o.m_Opt_out_type);
        o.m_Opt_out_typeIsSet = true;
    } 
    if(j.find("np") != j.end())
    {
        j.at("np").get_to(o.m_Np);
        o.m_NpIsSet = true;
    } 
    
}

std::string ConversionEvents_data_inner_custom_data::getCurrency() const
{
    return m_Currency;
}
void ConversionEvents_data_inner_custom_data::setCurrency(std::string const& value)
{
    m_Currency = value;
    m_CurrencyIsSet = true;
}
bool ConversionEvents_data_inner_custom_data::currencyIsSet() const
{
    return m_CurrencyIsSet;
}
void ConversionEvents_data_inner_custom_data::unsetCurrency()
{
    m_CurrencyIsSet = false;
}
std::string ConversionEvents_data_inner_custom_data::getValue() const
{
    return m_Value;
}
void ConversionEvents_data_inner_custom_data::setValue(std::string const& value)
{
    m_Value = value;
    m_ValueIsSet = true;
}
bool ConversionEvents_data_inner_custom_data::valueIsSet() const
{
    return m_ValueIsSet;
}
void ConversionEvents_data_inner_custom_data::unsetValue()
{
    m_ValueIsSet = false;
}
std::vector<std::string> ConversionEvents_data_inner_custom_data::getContentIds() const
{
    return m_Content_ids;
}
void ConversionEvents_data_inner_custom_data::setContentIds(std::vector<std::string> const& value)
{
    m_Content_ids = value;
    m_Content_idsIsSet = true;
}
bool ConversionEvents_data_inner_custom_data::contentIdsIsSet() const
{
    return m_Content_idsIsSet;
}
void ConversionEvents_data_inner_custom_data::unsetContent_ids()
{
    m_Content_idsIsSet = false;
}
std::string ConversionEvents_data_inner_custom_data::getContentName() const
{
    return m_Content_name;
}
void ConversionEvents_data_inner_custom_data::setContentName(std::string const& value)
{
    m_Content_name = value;
    m_Content_nameIsSet = true;
}
bool ConversionEvents_data_inner_custom_data::contentNameIsSet() const
{
    return m_Content_nameIsSet;
}
void ConversionEvents_data_inner_custom_data::unsetContent_name()
{
    m_Content_nameIsSet = false;
}
std::string ConversionEvents_data_inner_custom_data::getContentCategory() const
{
    return m_Content_category;
}
void ConversionEvents_data_inner_custom_data::setContentCategory(std::string const& value)
{
    m_Content_category = value;
    m_Content_categoryIsSet = true;
}
bool ConversionEvents_data_inner_custom_data::contentCategoryIsSet() const
{
    return m_Content_categoryIsSet;
}
void ConversionEvents_data_inner_custom_data::unsetContent_category()
{
    m_Content_categoryIsSet = false;
}
std::string ConversionEvents_data_inner_custom_data::getContentBrand() const
{
    return m_Content_brand;
}
void ConversionEvents_data_inner_custom_data::setContentBrand(std::string const& value)
{
    m_Content_brand = value;
    m_Content_brandIsSet = true;
}
bool ConversionEvents_data_inner_custom_data::contentBrandIsSet() const
{
    return m_Content_brandIsSet;
}
void ConversionEvents_data_inner_custom_data::unsetContent_brand()
{
    m_Content_brandIsSet = false;
}
std::vector<org::openapitools::server::model::ConversionEvents_data_inner_custom_data_contents_inner> ConversionEvents_data_inner_custom_data::getContents() const
{
    return m_Contents;
}
void ConversionEvents_data_inner_custom_data::setContents(std::vector<org::openapitools::server::model::ConversionEvents_data_inner_custom_data_contents_inner> const& value)
{
    m_Contents = value;
    m_ContentsIsSet = true;
}
bool ConversionEvents_data_inner_custom_data::contentsIsSet() const
{
    return m_ContentsIsSet;
}
void ConversionEvents_data_inner_custom_data::unsetContents()
{
    m_ContentsIsSet = false;
}
int64_t ConversionEvents_data_inner_custom_data::getNumItems() const
{
    return m_Num_items;
}
void ConversionEvents_data_inner_custom_data::setNumItems(int64_t const value)
{
    m_Num_items = value;
    m_Num_itemsIsSet = true;
}
bool ConversionEvents_data_inner_custom_data::numItemsIsSet() const
{
    return m_Num_itemsIsSet;
}
void ConversionEvents_data_inner_custom_data::unsetNum_items()
{
    m_Num_itemsIsSet = false;
}
std::string ConversionEvents_data_inner_custom_data::getOrderId() const
{
    return m_Order_id;
}
void ConversionEvents_data_inner_custom_data::setOrderId(std::string const& value)
{
    m_Order_id = value;
    m_Order_idIsSet = true;
}
bool ConversionEvents_data_inner_custom_data::orderIdIsSet() const
{
    return m_Order_idIsSet;
}
void ConversionEvents_data_inner_custom_data::unsetOrder_id()
{
    m_Order_idIsSet = false;
}
std::string ConversionEvents_data_inner_custom_data::getSearchString() const
{
    return m_Search_string;
}
void ConversionEvents_data_inner_custom_data::setSearchString(std::string const& value)
{
    m_Search_string = value;
    m_Search_stringIsSet = true;
}
bool ConversionEvents_data_inner_custom_data::searchStringIsSet() const
{
    return m_Search_stringIsSet;
}
void ConversionEvents_data_inner_custom_data::unsetSearch_string()
{
    m_Search_stringIsSet = false;
}
std::string ConversionEvents_data_inner_custom_data::getOptOutType() const
{
    return m_Opt_out_type;
}
void ConversionEvents_data_inner_custom_data::setOptOutType(std::string const& value)
{
    m_Opt_out_type = value;
    m_Opt_out_typeIsSet = true;
}
bool ConversionEvents_data_inner_custom_data::optOutTypeIsSet() const
{
    return m_Opt_out_typeIsSet;
}
void ConversionEvents_data_inner_custom_data::unsetOpt_out_type()
{
    m_Opt_out_typeIsSet = false;
}
std::string ConversionEvents_data_inner_custom_data::getNp() const
{
    return m_Np;
}
void ConversionEvents_data_inner_custom_data::setNp(std::string const& value)
{
    m_Np = value;
    m_NpIsSet = true;
}
bool ConversionEvents_data_inner_custom_data::npIsSet() const
{
    return m_NpIsSet;
}
void ConversionEvents_data_inner_custom_data::unsetNp()
{
    m_NpIsSet = false;
}


} // namespace org::openapitools::server::model

