/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "SummaryPin.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

SummaryPin::SummaryPin()
{
    m_MediaIsSet = false;
    m_Alt_text = "";
    m_Alt_textIsSet = false;
    m_Link = "";
    m_LinkIsSet = false;
    m_Title = "";
    m_TitleIsSet = false;
    m_Description = "";
    m_DescriptionIsSet = false;
    
}

void SummaryPin::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool SummaryPin::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool SummaryPin::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "SummaryPin" : pathPrefix;

             
    if (altTextIsSet())
    {
        const std::string& value = m_Alt_text;
        const std::string currentValuePath = _pathPrefix + ".altText";
                
        
        if (value.length() > 500)
        {
            success = false;
            msg << currentValuePath << ": must be at most 500 characters long;";
        }

    }
         
    if (linkIsSet())
    {
        const std::string& value = m_Link;
        const std::string currentValuePath = _pathPrefix + ".link";
                
        
        if (value.length() > 2048)
        {
            success = false;
            msg << currentValuePath << ": must be at most 2048 characters long;";
        }

    }
            
    return success;
}

bool SummaryPin::operator==(const SummaryPin& rhs) const
{
    return
    
    
    
    ((!mediaIsSet() && !rhs.mediaIsSet()) || (mediaIsSet() && rhs.mediaIsSet() && getMedia() == rhs.getMedia())) &&
    
    
    ((!altTextIsSet() && !rhs.altTextIsSet()) || (altTextIsSet() && rhs.altTextIsSet() && getAltText() == rhs.getAltText())) &&
    
    
    ((!linkIsSet() && !rhs.linkIsSet()) || (linkIsSet() && rhs.linkIsSet() && getLink() == rhs.getLink())) &&
    
    
    ((!titleIsSet() && !rhs.titleIsSet()) || (titleIsSet() && rhs.titleIsSet() && getTitle() == rhs.getTitle())) &&
    
    
    ((!descriptionIsSet() && !rhs.descriptionIsSet()) || (descriptionIsSet() && rhs.descriptionIsSet() && getDescription() == rhs.getDescription()))
    
    ;
}

bool SummaryPin::operator!=(const SummaryPin& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const SummaryPin& o)
{
    j = nlohmann::json::object();
    if(o.mediaIsSet())
        j["media"] = o.m_Media;
    if(o.altTextIsSet())
        j["alt_text"] = o.m_Alt_text;
    if(o.linkIsSet())
        j["link"] = o.m_Link;
    if(o.titleIsSet())
        j["title"] = o.m_Title;
    if(o.descriptionIsSet())
        j["description"] = o.m_Description;
    
}

void from_json(const nlohmann::json& j, SummaryPin& o)
{
    if(j.find("media") != j.end())
    {
        j.at("media").get_to(o.m_Media);
        o.m_MediaIsSet = true;
    } 
    if(j.find("alt_text") != j.end())
    {
        j.at("alt_text").get_to(o.m_Alt_text);
        o.m_Alt_textIsSet = true;
    } 
    if(j.find("link") != j.end())
    {
        j.at("link").get_to(o.m_Link);
        o.m_LinkIsSet = true;
    } 
    if(j.find("title") != j.end())
    {
        j.at("title").get_to(o.m_Title);
        o.m_TitleIsSet = true;
    } 
    if(j.find("description") != j.end())
    {
        j.at("description").get_to(o.m_Description);
        o.m_DescriptionIsSet = true;
    } 
    
}

org::openapitools::server::model::PinMedia SummaryPin::getMedia() const
{
    return m_Media;
}
void SummaryPin::setMedia(org::openapitools::server::model::PinMedia const& value)
{
    m_Media = value;
    m_MediaIsSet = true;
}
bool SummaryPin::mediaIsSet() const
{
    return m_MediaIsSet;
}
void SummaryPin::unsetMedia()
{
    m_MediaIsSet = false;
}
std::string SummaryPin::getAltText() const
{
    return m_Alt_text;
}
void SummaryPin::setAltText(std::string const& value)
{
    m_Alt_text = value;
    m_Alt_textIsSet = true;
}
bool SummaryPin::altTextIsSet() const
{
    return m_Alt_textIsSet;
}
void SummaryPin::unsetAlt_text()
{
    m_Alt_textIsSet = false;
}
std::string SummaryPin::getLink() const
{
    return m_Link;
}
void SummaryPin::setLink(std::string const& value)
{
    m_Link = value;
    m_LinkIsSet = true;
}
bool SummaryPin::linkIsSet() const
{
    return m_LinkIsSet;
}
void SummaryPin::unsetLink()
{
    m_LinkIsSet = false;
}
std::string SummaryPin::getTitle() const
{
    return m_Title;
}
void SummaryPin::setTitle(std::string const& value)
{
    m_Title = value;
    m_TitleIsSet = true;
}
bool SummaryPin::titleIsSet() const
{
    return m_TitleIsSet;
}
void SummaryPin::unsetTitle()
{
    m_TitleIsSet = false;
}
std::string SummaryPin::getDescription() const
{
    return m_Description;
}
void SummaryPin::setDescription(std::string const& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}
bool SummaryPin::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}
void SummaryPin::unsetDescription()
{
    m_DescriptionIsSet = false;
}


} // namespace org::openapitools::server::model

