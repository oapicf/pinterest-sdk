/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "CatalogsHotelAttributes_allOf_main_image.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

CatalogsHotelAttributes_allOf_main_image::CatalogsHotelAttributes_allOf_main_image()
{
    m_Link = "";
    m_LinkIsSet = false;
    m_TagIsSet = false;
    
}

void CatalogsHotelAttributes_allOf_main_image::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool CatalogsHotelAttributes_allOf_main_image::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool CatalogsHotelAttributes_allOf_main_image::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "CatalogsHotelAttributes_allOf_main_image" : pathPrefix;

             
    if (tagIsSet())
    {
        const std::vector<std::string>& value = m_Tag;
        const std::string currentValuePath = _pathPrefix + ".tag";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const std::string& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }

    }
    
    return success;
}

bool CatalogsHotelAttributes_allOf_main_image::operator==(const CatalogsHotelAttributes_allOf_main_image& rhs) const
{
    return
    
    
    
    ((!linkIsSet() && !rhs.linkIsSet()) || (linkIsSet() && rhs.linkIsSet() && getLink() == rhs.getLink())) &&
    
    
    ((!tagIsSet() && !rhs.tagIsSet()) || (tagIsSet() && rhs.tagIsSet() && getTag() == rhs.getTag()))
    
    ;
}

bool CatalogsHotelAttributes_allOf_main_image::operator!=(const CatalogsHotelAttributes_allOf_main_image& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const CatalogsHotelAttributes_allOf_main_image& o)
{
    j = nlohmann::json::object();
    if(o.linkIsSet())
        j["link"] = o.m_Link;
    if(o.tagIsSet() || !o.m_Tag.empty())
        j["tag"] = o.m_Tag;
    
}

void from_json(const nlohmann::json& j, CatalogsHotelAttributes_allOf_main_image& o)
{
    if(j.find("link") != j.end())
    {
        j.at("link").get_to(o.m_Link);
        o.m_LinkIsSet = true;
    } 
    if(j.find("tag") != j.end())
    {
        j.at("tag").get_to(o.m_Tag);
        o.m_TagIsSet = true;
    } 
    
}

std::string CatalogsHotelAttributes_allOf_main_image::getLink() const
{
    return m_Link;
}
void CatalogsHotelAttributes_allOf_main_image::setLink(std::string const& value)
{
    m_Link = value;
    m_LinkIsSet = true;
}
bool CatalogsHotelAttributes_allOf_main_image::linkIsSet() const
{
    return m_LinkIsSet;
}
void CatalogsHotelAttributes_allOf_main_image::unsetLink()
{
    m_LinkIsSet = false;
}
std::vector<std::string> CatalogsHotelAttributes_allOf_main_image::getTag() const
{
    return m_Tag;
}
void CatalogsHotelAttributes_allOf_main_image::setTag(std::vector<std::string> const& value)
{
    m_Tag = value;
    m_TagIsSet = true;
}
bool CatalogsHotelAttributes_allOf_main_image::tagIsSet() const
{
    return m_TagIsSet;
}
void CatalogsHotelAttributes_allOf_main_image::unsetTag()
{
    m_TagIsSet = false;
}


} // namespace org::openapitools::server::model

