/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "BusinessMemberAssetsSummary.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

BusinessMemberAssetsSummary::BusinessMemberAssetsSummary()
{
    m_Ad_accountsIsSet = false;
    m_ProfilesIsSet = false;
    
}

void BusinessMemberAssetsSummary::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool BusinessMemberAssetsSummary::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool BusinessMemberAssetsSummary::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "BusinessMemberAssetsSummary" : pathPrefix;

         
    if (adAccountsIsSet())
    {
        const std::vector<org::openapitools::server::model::BusinessMemberAssetsSummary_ad_accounts_inner>& value = m_Ad_accounts;
        const std::string currentValuePath = _pathPrefix + ".adAccounts";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::BusinessMemberAssetsSummary_ad_accounts_inner& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".adAccounts") && success;
 
                i++;
            }
        }

    }
         
    if (profilesIsSet())
    {
        const std::vector<org::openapitools::server::model::BusinessMemberAssetsSummary_profiles_inner>& value = m_Profiles;
        const std::string currentValuePath = _pathPrefix + ".profiles";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::BusinessMemberAssetsSummary_profiles_inner& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".profiles") && success;
 
                i++;
            }
        }

    }
    
    return success;
}

bool BusinessMemberAssetsSummary::operator==(const BusinessMemberAssetsSummary& rhs) const
{
    return
    
    
    
    ((!adAccountsIsSet() && !rhs.adAccountsIsSet()) || (adAccountsIsSet() && rhs.adAccountsIsSet() && getAdAccounts() == rhs.getAdAccounts())) &&
    
    
    ((!profilesIsSet() && !rhs.profilesIsSet()) || (profilesIsSet() && rhs.profilesIsSet() && getProfiles() == rhs.getProfiles()))
    
    ;
}

bool BusinessMemberAssetsSummary::operator!=(const BusinessMemberAssetsSummary& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const BusinessMemberAssetsSummary& o)
{
    j = nlohmann::json::object();
    if(o.adAccountsIsSet() || !o.m_Ad_accounts.empty())
        j["ad_accounts"] = o.m_Ad_accounts;
    if(o.profilesIsSet() || !o.m_Profiles.empty())
        j["profiles"] = o.m_Profiles;
    
}

void from_json(const nlohmann::json& j, BusinessMemberAssetsSummary& o)
{
    if(j.find("ad_accounts") != j.end())
    {
        j.at("ad_accounts").get_to(o.m_Ad_accounts);
        o.m_Ad_accountsIsSet = true;
    } 
    if(j.find("profiles") != j.end())
    {
        j.at("profiles").get_to(o.m_Profiles);
        o.m_ProfilesIsSet = true;
    } 
    
}

std::vector<org::openapitools::server::model::BusinessMemberAssetsSummary_ad_accounts_inner> BusinessMemberAssetsSummary::getAdAccounts() const
{
    return m_Ad_accounts;
}
void BusinessMemberAssetsSummary::setAdAccounts(std::vector<org::openapitools::server::model::BusinessMemberAssetsSummary_ad_accounts_inner> const& value)
{
    m_Ad_accounts = value;
    m_Ad_accountsIsSet = true;
}
bool BusinessMemberAssetsSummary::adAccountsIsSet() const
{
    return m_Ad_accountsIsSet;
}
void BusinessMemberAssetsSummary::unsetAd_accounts()
{
    m_Ad_accountsIsSet = false;
}
std::vector<org::openapitools::server::model::BusinessMemberAssetsSummary_profiles_inner> BusinessMemberAssetsSummary::getProfiles() const
{
    return m_Profiles;
}
void BusinessMemberAssetsSummary::setProfiles(std::vector<org::openapitools::server::model::BusinessMemberAssetsSummary_profiles_inner> const& value)
{
    m_Profiles = value;
    m_ProfilesIsSet = true;
}
bool BusinessMemberAssetsSummary::profilesIsSet() const
{
    return m_ProfilesIsSet;
}
void BusinessMemberAssetsSummary::unsetProfiles()
{
    m_ProfilesIsSet = false;
}


} // namespace org::openapitools::server::model

