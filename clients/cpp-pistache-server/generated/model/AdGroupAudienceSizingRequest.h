/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * AdGroupAudienceSizingRequest.h
 *
 * 
 */

#ifndef AdGroupAudienceSizingRequest_H_
#define AdGroupAudienceSizingRequest_H_


#include "TargetingSpec.h"
#include "PlacementGroupType.h"
#include <string>
#include <vector>
#include "AdGroupAudienceSizingRequest_keywords_inner.h"
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// 
/// </summary>
class  AdGroupAudienceSizingRequest
{
public:
    AdGroupAudienceSizingRequest();
    virtual ~AdGroupAudienceSizingRequest() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const AdGroupAudienceSizingRequest& rhs) const;
    bool operator!=(const AdGroupAudienceSizingRequest& rhs) const;

    /////////////////////////////////////////////
    /// AdGroupAudienceSizingRequest members

    /// <summary>
    /// Enable auto-targeting for ad group. Also known as &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/expanded-targeting\&quot; target&#x3D;\&quot;_blank\&quot;&gt;\&quot;expanded targeting\&quot;&lt;/a&gt;.
    /// </summary>
    bool isAutoTargetingEnabled() const;
    void setAutoTargetingEnabled(bool const value);
    bool autoTargetingEnabledIsSet() const;
    void unsetAuto_targeting_enabled();
    /// <summary>
    /// &lt;a href&#x3D;\&quot;/docs/redoc/#section/Placement-group\&quot;&gt;Placement group&lt;/a&gt;.
    /// </summary>
    org::openapitools::server::model::PlacementGroupType getPlacementGroup() const;
    void setPlacementGroup(org::openapitools::server::model::PlacementGroupType const& value);
    bool placementGroupIsSet() const;
    void unsetPlacement_group();
    /// <summary>
    /// Pin creative types filter. &lt;/p&gt;&lt;strong&gt;Note:&lt;/strong&gt; SHOP_THE_PIN has been deprecated. Please use COLLECTION instead.
    /// </summary>
    std::vector<std::string> getCreativeTypes() const;
    void setCreativeTypes(std::vector<std::string> const& value);
    bool creativeTypesIsSet() const;
    void unsetCreative_types();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::TargetingSpec getTargetingSpec() const;
    void setTargetingSpec(org::openapitools::server::model::TargetingSpec const& value);
    bool targetingSpecIsSet() const;
    void unsetTargeting_spec();
    /// <summary>
    /// Targeted product group IDs. &lt;/p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This can only be combined with shopping/catalog sales campaigns. For more information, &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/shopping-ads#section-14571\&quot; target&#x3D;\&quot;_blank\&quot;&gt;click here&lt;/a&gt;. SHOPPING_RETARGETING must be included in targeting_spec object or this field will be ignored.
    /// </summary>
    std::vector<std::string> getProductGroupIds() const;
    void setProductGroupIds(std::vector<std::string> const& value);
    bool productGroupIdsIsSet() const;
    void unsetProduct_group_ids();
    /// <summary>
    /// Array of keyword objects. If the keywords field is missing, all keywords will be targeted.
    /// </summary>
    std::vector<org::openapitools::server::model::AdGroupAudienceSizingRequest_keywords_inner> getKeywords() const;
    void setKeywords(std::vector<org::openapitools::server::model::AdGroupAudienceSizingRequest_keywords_inner> const& value);
    bool keywordsIsSet() const;
    void unsetKeywords();

    friend  void to_json(nlohmann::json& j, const AdGroupAudienceSizingRequest& o);
    friend  void from_json(const nlohmann::json& j, AdGroupAudienceSizingRequest& o);
protected:
    bool m_Auto_targeting_enabled;
    bool m_Auto_targeting_enabledIsSet;
    org::openapitools::server::model::PlacementGroupType m_Placement_group;
    bool m_Placement_groupIsSet;
    std::vector<std::string> m_Creative_types;
    bool m_Creative_typesIsSet;
    org::openapitools::server::model::TargetingSpec m_Targeting_spec;
    bool m_Targeting_specIsSet;
    std::vector<std::string> m_Product_group_ids;
    bool m_Product_group_idsIsSet;
    std::vector<org::openapitools::server::model::AdGroupAudienceSizingRequest_keywords_inner> m_Keywords;
    bool m_KeywordsIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* AdGroupAudienceSizingRequest_H_ */
