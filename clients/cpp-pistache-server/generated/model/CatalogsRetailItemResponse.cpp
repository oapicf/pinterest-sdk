/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "CatalogsRetailItemResponse.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

CatalogsRetailItemResponse::CatalogsRetailItemResponse()
{
    m_Item_id = "";
    m_Item_idIsSet = false;
    m_PinsIsSet = false;
    m_AttributesIsSet = false;
    
}

void CatalogsRetailItemResponse::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool CatalogsRetailItemResponse::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool CatalogsRetailItemResponse::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "CatalogsRetailItemResponse" : pathPrefix;

                 
    if (pinsIsSet())
    {
        const std::vector<org::openapitools::server::model::Pin>& value = m_Pins;
        const std::string currentValuePath = _pathPrefix + ".pins";
                
        
        if (value.size() > 11)
        {
            success = false;
            msg << currentValuePath << ": must have at most 11 elements;";
        }
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::Pin& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".pins") && success;
 
                i++;
            }
        }

    }
        
    return success;
}

bool CatalogsRetailItemResponse::operator==(const CatalogsRetailItemResponse& rhs) const
{
    return
    
    
    (getCatalogType() == rhs.getCatalogType())
     &&
    
    
    ((!itemIdIsSet() && !rhs.itemIdIsSet()) || (itemIdIsSet() && rhs.itemIdIsSet() && getItemId() == rhs.getItemId())) &&
    
    
    ((!pinsIsSet() && !rhs.pinsIsSet()) || (pinsIsSet() && rhs.pinsIsSet() && getPins() == rhs.getPins())) &&
    
    
    ((!attributesIsSet() && !rhs.attributesIsSet()) || (attributesIsSet() && rhs.attributesIsSet() && getAttributes() == rhs.getAttributes()))
    
    ;
}

bool CatalogsRetailItemResponse::operator!=(const CatalogsRetailItemResponse& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const CatalogsRetailItemResponse& o)
{
    j = nlohmann::json::object();
    j["catalog_type"] = o.m_Catalog_type;
    if(o.itemIdIsSet())
        j["item_id"] = o.m_Item_id;
    if(o.pinsIsSet() || !o.m_Pins.empty())
        j["pins"] = o.m_Pins;
    if(o.attributesIsSet())
        j["attributes"] = o.m_Attributes;
    
}

void from_json(const nlohmann::json& j, CatalogsRetailItemResponse& o)
{
    j.at("catalog_type").get_to(o.m_Catalog_type);
    if(j.find("item_id") != j.end())
    {
        j.at("item_id").get_to(o.m_Item_id);
        o.m_Item_idIsSet = true;
    } 
    if(j.find("pins") != j.end())
    {
        j.at("pins").get_to(o.m_Pins);
        o.m_PinsIsSet = true;
    } 
    if(j.find("attributes") != j.end())
    {
        j.at("attributes").get_to(o.m_Attributes);
        o.m_AttributesIsSet = true;
    } 
    
}

org::openapitools::server::model::CatalogsType CatalogsRetailItemResponse::getCatalogType() const
{
    return m_Catalog_type;
}
void CatalogsRetailItemResponse::setCatalogType(org::openapitools::server::model::CatalogsType const& value)
{
    m_Catalog_type = value;
}
std::string CatalogsRetailItemResponse::getItemId() const
{
    return m_Item_id;
}
void CatalogsRetailItemResponse::setItemId(std::string const& value)
{
    m_Item_id = value;
    m_Item_idIsSet = true;
}
bool CatalogsRetailItemResponse::itemIdIsSet() const
{
    return m_Item_idIsSet;
}
void CatalogsRetailItemResponse::unsetItem_id()
{
    m_Item_idIsSet = false;
}
std::vector<org::openapitools::server::model::Pin> CatalogsRetailItemResponse::getPins() const
{
    return m_Pins;
}
void CatalogsRetailItemResponse::setPins(std::vector<org::openapitools::server::model::Pin> const& value)
{
    m_Pins = value;
    m_PinsIsSet = true;
}
bool CatalogsRetailItemResponse::pinsIsSet() const
{
    return m_PinsIsSet;
}
void CatalogsRetailItemResponse::unsetPins()
{
    m_PinsIsSet = false;
}
org::openapitools::server::model::ItemAttributes CatalogsRetailItemResponse::getAttributes() const
{
    return m_Attributes;
}
void CatalogsRetailItemResponse::setAttributes(org::openapitools::server::model::ItemAttributes const& value)
{
    m_Attributes = value;
    m_AttributesIsSet = true;
}
bool CatalogsRetailItemResponse::attributesIsSet() const
{
    return m_AttributesIsSet;
}
void CatalogsRetailItemResponse::unsetAttributes()
{
    m_AttributesIsSet = false;
}


} // namespace org::openapitools::server::model

