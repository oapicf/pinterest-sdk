/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "CatalogsRetailReportParameters.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

CatalogsRetailReportParameters::CatalogsRetailReportParameters()
{
    m_Catalog_type = "";
    
}

void CatalogsRetailReportParameters::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool CatalogsRetailReportParameters::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool CatalogsRetailReportParameters::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "CatalogsRetailReportParameters" : pathPrefix;

            
    if (!m_Report.validate(msg, _pathPrefix + ".report")) {
        msg << _pathPrefix << ": Report is invalid;";
        success = false;
    }
    return success;
}

bool CatalogsRetailReportParameters::operator==(const CatalogsRetailReportParameters& rhs) const
{
    return
    
    
    (getCatalogType() == rhs.getCatalogType())
     &&
    
    (getReport() == rhs.getReport())
    
    
    ;
}

bool CatalogsRetailReportParameters::operator!=(const CatalogsRetailReportParameters& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const CatalogsRetailReportParameters& o)
{
    j = nlohmann::json::object();
    j["catalog_type"] = o.m_Catalog_type;
    j["report"] = o.m_Report;
    
}

void from_json(const nlohmann::json& j, CatalogsRetailReportParameters& o)
{
    j.at("catalog_type").get_to(o.m_Catalog_type);
    j.at("report").get_to(o.m_Report);
    
}

std::string CatalogsRetailReportParameters::getCatalogType() const
{
    return m_Catalog_type;
}
void CatalogsRetailReportParameters::setCatalogType(std::string const& value)
{
    m_Catalog_type = value;
}
org::openapitools::server::model::CatalogsHotelReportParameters_report CatalogsRetailReportParameters::getReport() const
{
    return m_Report;
}
void CatalogsRetailReportParameters::setReport(org::openapitools::server::model::CatalogsHotelReportParameters_report const& value)
{
    m_Report = value;
}


} // namespace org::openapitools::server::model

