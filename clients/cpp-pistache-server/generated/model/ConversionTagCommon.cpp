/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ConversionTagCommon.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

ConversionTagCommon::ConversionTagCommon()
{
    m_Ad_account_id = "";
    m_Ad_account_idIsSet = false;
    m_Code_snippet = "";
    m_Code_snippetIsSet = false;
    m_Enhanced_match_statusIsSet = false;
    m_Id = "";
    m_IdIsSet = false;
    m_Last_fired_time_ms = 0.0;
    m_Last_fired_time_msIsSet = false;
    m_Name = "";
    m_NameIsSet = false;
    m_StatusIsSet = false;
    m_Version = "";
    m_VersionIsSet = false;
    m_ConfigsIsSet = false;
    
}

void ConversionTagCommon::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool ConversionTagCommon::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool ConversionTagCommon::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "ConversionTagCommon" : pathPrefix;

                                        
    return success;
}

bool ConversionTagCommon::operator==(const ConversionTagCommon& rhs) const
{
    return
    
    
    
    ((!adAccountIdIsSet() && !rhs.adAccountIdIsSet()) || (adAccountIdIsSet() && rhs.adAccountIdIsSet() && getAdAccountId() == rhs.getAdAccountId())) &&
    
    
    ((!codeSnippetIsSet() && !rhs.codeSnippetIsSet()) || (codeSnippetIsSet() && rhs.codeSnippetIsSet() && getCodeSnippet() == rhs.getCodeSnippet())) &&
    
    
    ((!enhancedMatchStatusIsSet() && !rhs.enhancedMatchStatusIsSet()) || (enhancedMatchStatusIsSet() && rhs.enhancedMatchStatusIsSet() && getEnhancedMatchStatus() == rhs.getEnhancedMatchStatus())) &&
    
    
    ((!idIsSet() && !rhs.idIsSet()) || (idIsSet() && rhs.idIsSet() && getId() == rhs.getId())) &&
    
    
    ((!lastFiredTimeMsIsSet() && !rhs.lastFiredTimeMsIsSet()) || (lastFiredTimeMsIsSet() && rhs.lastFiredTimeMsIsSet() && getLastFiredTimeMs() == rhs.getLastFiredTimeMs())) &&
    
    
    ((!nameIsSet() && !rhs.nameIsSet()) || (nameIsSet() && rhs.nameIsSet() && getName() == rhs.getName())) &&
    
    
    ((!statusIsSet() && !rhs.statusIsSet()) || (statusIsSet() && rhs.statusIsSet() && getStatus() == rhs.getStatus())) &&
    
    
    ((!versionIsSet() && !rhs.versionIsSet()) || (versionIsSet() && rhs.versionIsSet() && getVersion() == rhs.getVersion())) &&
    
    
    ((!configsIsSet() && !rhs.configsIsSet()) || (configsIsSet() && rhs.configsIsSet() && getConfigs() == rhs.getConfigs()))
    
    ;
}

bool ConversionTagCommon::operator!=(const ConversionTagCommon& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const ConversionTagCommon& o)
{
    j = nlohmann::json::object();
    if(o.adAccountIdIsSet())
        j["ad_account_id"] = o.m_Ad_account_id;
    if(o.codeSnippetIsSet())
        j["code_snippet"] = o.m_Code_snippet;
    if(o.enhancedMatchStatusIsSet())
        j["enhanced_match_status"] = o.m_Enhanced_match_status;
    if(o.idIsSet())
        j["id"] = o.m_Id;
    if(o.lastFiredTimeMsIsSet())
        j["last_fired_time_ms"] = o.m_Last_fired_time_ms;
    if(o.nameIsSet())
        j["name"] = o.m_Name;
    if(o.statusIsSet())
        j["status"] = o.m_Status;
    if(o.versionIsSet())
        j["version"] = o.m_Version;
    if(o.configsIsSet())
        j["configs"] = o.m_Configs;
    
}

void from_json(const nlohmann::json& j, ConversionTagCommon& o)
{
    if(j.find("ad_account_id") != j.end())
    {
        j.at("ad_account_id").get_to(o.m_Ad_account_id);
        o.m_Ad_account_idIsSet = true;
    } 
    if(j.find("code_snippet") != j.end())
    {
        j.at("code_snippet").get_to(o.m_Code_snippet);
        o.m_Code_snippetIsSet = true;
    } 
    if(j.find("enhanced_match_status") != j.end())
    {
        j.at("enhanced_match_status").get_to(o.m_Enhanced_match_status);
        o.m_Enhanced_match_statusIsSet = true;
    } 
    if(j.find("id") != j.end())
    {
        j.at("id").get_to(o.m_Id);
        o.m_IdIsSet = true;
    } 
    if(j.find("last_fired_time_ms") != j.end())
    {
        j.at("last_fired_time_ms").get_to(o.m_Last_fired_time_ms);
        o.m_Last_fired_time_msIsSet = true;
    } 
    if(j.find("name") != j.end())
    {
        j.at("name").get_to(o.m_Name);
        o.m_NameIsSet = true;
    } 
    if(j.find("status") != j.end())
    {
        j.at("status").get_to(o.m_Status);
        o.m_StatusIsSet = true;
    } 
    if(j.find("version") != j.end())
    {
        j.at("version").get_to(o.m_Version);
        o.m_VersionIsSet = true;
    } 
    if(j.find("configs") != j.end())
    {
        j.at("configs").get_to(o.m_Configs);
        o.m_ConfigsIsSet = true;
    } 
    
}

std::string ConversionTagCommon::getAdAccountId() const
{
    return m_Ad_account_id;
}
void ConversionTagCommon::setAdAccountId(std::string const& value)
{
    m_Ad_account_id = value;
    m_Ad_account_idIsSet = true;
}
bool ConversionTagCommon::adAccountIdIsSet() const
{
    return m_Ad_account_idIsSet;
}
void ConversionTagCommon::unsetAd_account_id()
{
    m_Ad_account_idIsSet = false;
}
std::string ConversionTagCommon::getCodeSnippet() const
{
    return m_Code_snippet;
}
void ConversionTagCommon::setCodeSnippet(std::string const& value)
{
    m_Code_snippet = value;
    m_Code_snippetIsSet = true;
}
bool ConversionTagCommon::codeSnippetIsSet() const
{
    return m_Code_snippetIsSet;
}
void ConversionTagCommon::unsetCode_snippet()
{
    m_Code_snippetIsSet = false;
}
org::openapitools::server::model::EnhancedMatchStatusType ConversionTagCommon::getEnhancedMatchStatus() const
{
    return m_Enhanced_match_status;
}
void ConversionTagCommon::setEnhancedMatchStatus(org::openapitools::server::model::EnhancedMatchStatusType const& value)
{
    m_Enhanced_match_status = value;
    m_Enhanced_match_statusIsSet = true;
}
bool ConversionTagCommon::enhancedMatchStatusIsSet() const
{
    return m_Enhanced_match_statusIsSet;
}
void ConversionTagCommon::unsetEnhanced_match_status()
{
    m_Enhanced_match_statusIsSet = false;
}
std::string ConversionTagCommon::getId() const
{
    return m_Id;
}
void ConversionTagCommon::setId(std::string const& value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool ConversionTagCommon::idIsSet() const
{
    return m_IdIsSet;
}
void ConversionTagCommon::unsetId()
{
    m_IdIsSet = false;
}
double ConversionTagCommon::getLastFiredTimeMs() const
{
    return m_Last_fired_time_ms;
}
void ConversionTagCommon::setLastFiredTimeMs(double const value)
{
    m_Last_fired_time_ms = value;
    m_Last_fired_time_msIsSet = true;
}
bool ConversionTagCommon::lastFiredTimeMsIsSet() const
{
    return m_Last_fired_time_msIsSet;
}
void ConversionTagCommon::unsetLast_fired_time_ms()
{
    m_Last_fired_time_msIsSet = false;
}
std::string ConversionTagCommon::getName() const
{
    return m_Name;
}
void ConversionTagCommon::setName(std::string const& value)
{
    m_Name = value;
    m_NameIsSet = true;
}
bool ConversionTagCommon::nameIsSet() const
{
    return m_NameIsSet;
}
void ConversionTagCommon::unsetName()
{
    m_NameIsSet = false;
}
org::openapitools::server::model::EntityStatus ConversionTagCommon::getStatus() const
{
    return m_Status;
}
void ConversionTagCommon::setStatus(org::openapitools::server::model::EntityStatus const& value)
{
    m_Status = value;
    m_StatusIsSet = true;
}
bool ConversionTagCommon::statusIsSet() const
{
    return m_StatusIsSet;
}
void ConversionTagCommon::unsetStatus()
{
    m_StatusIsSet = false;
}
std::string ConversionTagCommon::getVersion() const
{
    return m_Version;
}
void ConversionTagCommon::setVersion(std::string const& value)
{
    m_Version = value;
    m_VersionIsSet = true;
}
bool ConversionTagCommon::versionIsSet() const
{
    return m_VersionIsSet;
}
void ConversionTagCommon::unsetVersion()
{
    m_VersionIsSet = false;
}
org::openapitools::server::model::ConversionTagConfigs ConversionTagCommon::getConfigs() const
{
    return m_Configs;
}
void ConversionTagCommon::setConfigs(org::openapitools::server::model::ConversionTagConfigs const& value)
{
    m_Configs = value;
    m_ConfigsIsSet = true;
}
bool ConversionTagCommon::configsIsSet() const
{
    return m_ConfigsIsSet;
}
void ConversionTagCommon::unsetConfigs()
{
    m_ConfigsIsSet = false;
}


} // namespace org::openapitools::server::model

