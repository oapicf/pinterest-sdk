/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "SSIOAccountItem.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

SSIOAccountItem::SSIOAccountItem()
{
    m_Id = "";
    m_IdIsSet = false;
    m_Io_terms_id = "";
    m_Io_terms_idIsSet = false;
    m_Io_terms = "";
    m_Io_termsIsSet = false;
    m_Us_terms_id = "";
    m_Us_terms_idIsSet = false;
    m_Us_terms = "";
    m_Us_termsIsSet = false;
    m_Row_terms_id = "";
    m_Row_terms_idIsSet = false;
    m_Row_terms = "";
    m_Row_termsIsSet = false;
    m_Io_type = "";
    m_Io_typeIsSet = false;
    m_AddressesIsSet = false;
    
}

void SSIOAccountItem::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool SSIOAccountItem::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool SSIOAccountItem::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "SSIOAccountItem" : pathPrefix;

                                         
    if (addressesIsSet())
    {
        const std::vector<org::openapitools::server::model::SSIOAccountAddress>& value = m_Addresses;
        const std::string currentValuePath = _pathPrefix + ".addresses";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::SSIOAccountAddress& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".addresses") && success;
 
                i++;
            }
        }

    }
    
    return success;
}

bool SSIOAccountItem::operator==(const SSIOAccountItem& rhs) const
{
    return
    
    
    
    ((!idIsSet() && !rhs.idIsSet()) || (idIsSet() && rhs.idIsSet() && getId() == rhs.getId())) &&
    
    
    ((!ioTermsIdIsSet() && !rhs.ioTermsIdIsSet()) || (ioTermsIdIsSet() && rhs.ioTermsIdIsSet() && getIoTermsId() == rhs.getIoTermsId())) &&
    
    
    ((!ioTermsIsSet() && !rhs.ioTermsIsSet()) || (ioTermsIsSet() && rhs.ioTermsIsSet() && getIoTerms() == rhs.getIoTerms())) &&
    
    
    ((!usTermsIdIsSet() && !rhs.usTermsIdIsSet()) || (usTermsIdIsSet() && rhs.usTermsIdIsSet() && getUsTermsId() == rhs.getUsTermsId())) &&
    
    
    ((!usTermsIsSet() && !rhs.usTermsIsSet()) || (usTermsIsSet() && rhs.usTermsIsSet() && getUsTerms() == rhs.getUsTerms())) &&
    
    
    ((!rowTermsIdIsSet() && !rhs.rowTermsIdIsSet()) || (rowTermsIdIsSet() && rhs.rowTermsIdIsSet() && getRowTermsId() == rhs.getRowTermsId())) &&
    
    
    ((!rowTermsIsSet() && !rhs.rowTermsIsSet()) || (rowTermsIsSet() && rhs.rowTermsIsSet() && getRowTerms() == rhs.getRowTerms())) &&
    
    
    ((!ioTypeIsSet() && !rhs.ioTypeIsSet()) || (ioTypeIsSet() && rhs.ioTypeIsSet() && getIoType() == rhs.getIoType())) &&
    
    
    ((!addressesIsSet() && !rhs.addressesIsSet()) || (addressesIsSet() && rhs.addressesIsSet() && getAddresses() == rhs.getAddresses()))
    
    ;
}

bool SSIOAccountItem::operator!=(const SSIOAccountItem& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const SSIOAccountItem& o)
{
    j = nlohmann::json::object();
    if(o.idIsSet())
        j["id"] = o.m_Id;
    if(o.ioTermsIdIsSet())
        j["io_terms_id"] = o.m_Io_terms_id;
    if(o.ioTermsIsSet())
        j["io_terms"] = o.m_Io_terms;
    if(o.usTermsIdIsSet())
        j["us_terms_id"] = o.m_Us_terms_id;
    if(o.usTermsIsSet())
        j["us_terms"] = o.m_Us_terms;
    if(o.rowTermsIdIsSet())
        j["row_terms_id"] = o.m_Row_terms_id;
    if(o.rowTermsIsSet())
        j["row_terms"] = o.m_Row_terms;
    if(o.ioTypeIsSet())
        j["io_type"] = o.m_Io_type;
    if(o.addressesIsSet() || !o.m_Addresses.empty())
        j["addresses"] = o.m_Addresses;
    
}

void from_json(const nlohmann::json& j, SSIOAccountItem& o)
{
    if(j.find("id") != j.end())
    {
        j.at("id").get_to(o.m_Id);
        o.m_IdIsSet = true;
    } 
    if(j.find("io_terms_id") != j.end())
    {
        j.at("io_terms_id").get_to(o.m_Io_terms_id);
        o.m_Io_terms_idIsSet = true;
    } 
    if(j.find("io_terms") != j.end())
    {
        j.at("io_terms").get_to(o.m_Io_terms);
        o.m_Io_termsIsSet = true;
    } 
    if(j.find("us_terms_id") != j.end())
    {
        j.at("us_terms_id").get_to(o.m_Us_terms_id);
        o.m_Us_terms_idIsSet = true;
    } 
    if(j.find("us_terms") != j.end())
    {
        j.at("us_terms").get_to(o.m_Us_terms);
        o.m_Us_termsIsSet = true;
    } 
    if(j.find("row_terms_id") != j.end())
    {
        j.at("row_terms_id").get_to(o.m_Row_terms_id);
        o.m_Row_terms_idIsSet = true;
    } 
    if(j.find("row_terms") != j.end())
    {
        j.at("row_terms").get_to(o.m_Row_terms);
        o.m_Row_termsIsSet = true;
    } 
    if(j.find("io_type") != j.end())
    {
        j.at("io_type").get_to(o.m_Io_type);
        o.m_Io_typeIsSet = true;
    } 
    if(j.find("addresses") != j.end())
    {
        j.at("addresses").get_to(o.m_Addresses);
        o.m_AddressesIsSet = true;
    } 
    
}

std::string SSIOAccountItem::getId() const
{
    return m_Id;
}
void SSIOAccountItem::setId(std::string const& value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool SSIOAccountItem::idIsSet() const
{
    return m_IdIsSet;
}
void SSIOAccountItem::unsetId()
{
    m_IdIsSet = false;
}
std::string SSIOAccountItem::getIoTermsId() const
{
    return m_Io_terms_id;
}
void SSIOAccountItem::setIoTermsId(std::string const& value)
{
    m_Io_terms_id = value;
    m_Io_terms_idIsSet = true;
}
bool SSIOAccountItem::ioTermsIdIsSet() const
{
    return m_Io_terms_idIsSet;
}
void SSIOAccountItem::unsetIo_terms_id()
{
    m_Io_terms_idIsSet = false;
}
std::string SSIOAccountItem::getIoTerms() const
{
    return m_Io_terms;
}
void SSIOAccountItem::setIoTerms(std::string const& value)
{
    m_Io_terms = value;
    m_Io_termsIsSet = true;
}
bool SSIOAccountItem::ioTermsIsSet() const
{
    return m_Io_termsIsSet;
}
void SSIOAccountItem::unsetIo_terms()
{
    m_Io_termsIsSet = false;
}
std::string SSIOAccountItem::getUsTermsId() const
{
    return m_Us_terms_id;
}
void SSIOAccountItem::setUsTermsId(std::string const& value)
{
    m_Us_terms_id = value;
    m_Us_terms_idIsSet = true;
}
bool SSIOAccountItem::usTermsIdIsSet() const
{
    return m_Us_terms_idIsSet;
}
void SSIOAccountItem::unsetUs_terms_id()
{
    m_Us_terms_idIsSet = false;
}
std::string SSIOAccountItem::getUsTerms() const
{
    return m_Us_terms;
}
void SSIOAccountItem::setUsTerms(std::string const& value)
{
    m_Us_terms = value;
    m_Us_termsIsSet = true;
}
bool SSIOAccountItem::usTermsIsSet() const
{
    return m_Us_termsIsSet;
}
void SSIOAccountItem::unsetUs_terms()
{
    m_Us_termsIsSet = false;
}
std::string SSIOAccountItem::getRowTermsId() const
{
    return m_Row_terms_id;
}
void SSIOAccountItem::setRowTermsId(std::string const& value)
{
    m_Row_terms_id = value;
    m_Row_terms_idIsSet = true;
}
bool SSIOAccountItem::rowTermsIdIsSet() const
{
    return m_Row_terms_idIsSet;
}
void SSIOAccountItem::unsetRow_terms_id()
{
    m_Row_terms_idIsSet = false;
}
std::string SSIOAccountItem::getRowTerms() const
{
    return m_Row_terms;
}
void SSIOAccountItem::setRowTerms(std::string const& value)
{
    m_Row_terms = value;
    m_Row_termsIsSet = true;
}
bool SSIOAccountItem::rowTermsIsSet() const
{
    return m_Row_termsIsSet;
}
void SSIOAccountItem::unsetRow_terms()
{
    m_Row_termsIsSet = false;
}
std::string SSIOAccountItem::getIoType() const
{
    return m_Io_type;
}
void SSIOAccountItem::setIoType(std::string const& value)
{
    m_Io_type = value;
    m_Io_typeIsSet = true;
}
bool SSIOAccountItem::ioTypeIsSet() const
{
    return m_Io_typeIsSet;
}
void SSIOAccountItem::unsetIo_type()
{
    m_Io_typeIsSet = false;
}
std::vector<org::openapitools::server::model::SSIOAccountAddress> SSIOAccountItem::getAddresses() const
{
    return m_Addresses;
}
void SSIOAccountItem::setAddresses(std::vector<org::openapitools::server::model::SSIOAccountAddress> const& value)
{
    m_Addresses = value;
    m_AddressesIsSet = true;
}
bool SSIOAccountItem::addressesIsSet() const
{
    return m_AddressesIsSet;
}
void SSIOAccountItem::unsetAddresses()
{
    m_AddressesIsSet = false;
}


} // namespace org::openapitools::server::model

