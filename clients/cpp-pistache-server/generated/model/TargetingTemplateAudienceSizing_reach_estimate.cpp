/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "TargetingTemplateAudienceSizing_reach_estimate.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

TargetingTemplateAudienceSizing_reach_estimate::TargetingTemplateAudienceSizing_reach_estimate()
{
    m_Estimate = 0L;
    m_EstimateIsSet = false;
    m_Lower_bound = 0L;
    m_Lower_boundIsSet = false;
    m_Upper_bound = 0L;
    m_Upper_boundIsSet = false;
    
}

void TargetingTemplateAudienceSizing_reach_estimate::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool TargetingTemplateAudienceSizing_reach_estimate::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool TargetingTemplateAudienceSizing_reach_estimate::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "TargetingTemplateAudienceSizing_reach_estimate" : pathPrefix;

                
    return success;
}

bool TargetingTemplateAudienceSizing_reach_estimate::operator==(const TargetingTemplateAudienceSizing_reach_estimate& rhs) const
{
    return
    
    
    
    ((!estimateIsSet() && !rhs.estimateIsSet()) || (estimateIsSet() && rhs.estimateIsSet() && getEstimate() == rhs.getEstimate())) &&
    
    
    ((!lowerBoundIsSet() && !rhs.lowerBoundIsSet()) || (lowerBoundIsSet() && rhs.lowerBoundIsSet() && getLowerBound() == rhs.getLowerBound())) &&
    
    
    ((!upperBoundIsSet() && !rhs.upperBoundIsSet()) || (upperBoundIsSet() && rhs.upperBoundIsSet() && getUpperBound() == rhs.getUpperBound()))
    
    ;
}

bool TargetingTemplateAudienceSizing_reach_estimate::operator!=(const TargetingTemplateAudienceSizing_reach_estimate& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const TargetingTemplateAudienceSizing_reach_estimate& o)
{
    j = nlohmann::json::object();
    if(o.estimateIsSet())
        j["estimate"] = o.m_Estimate;
    if(o.lowerBoundIsSet())
        j["lower_bound"] = o.m_Lower_bound;
    if(o.upperBoundIsSet())
        j["upper_bound"] = o.m_Upper_bound;
    
}

void from_json(const nlohmann::json& j, TargetingTemplateAudienceSizing_reach_estimate& o)
{
    if(j.find("estimate") != j.end())
    {
        j.at("estimate").get_to(o.m_Estimate);
        o.m_EstimateIsSet = true;
    } 
    if(j.find("lower_bound") != j.end())
    {
        j.at("lower_bound").get_to(o.m_Lower_bound);
        o.m_Lower_boundIsSet = true;
    } 
    if(j.find("upper_bound") != j.end())
    {
        j.at("upper_bound").get_to(o.m_Upper_bound);
        o.m_Upper_boundIsSet = true;
    } 
    
}

int64_t TargetingTemplateAudienceSizing_reach_estimate::getEstimate() const
{
    return m_Estimate;
}
void TargetingTemplateAudienceSizing_reach_estimate::setEstimate(int64_t const value)
{
    m_Estimate = value;
    m_EstimateIsSet = true;
}
bool TargetingTemplateAudienceSizing_reach_estimate::estimateIsSet() const
{
    return m_EstimateIsSet;
}
void TargetingTemplateAudienceSizing_reach_estimate::unsetEstimate()
{
    m_EstimateIsSet = false;
}
int64_t TargetingTemplateAudienceSizing_reach_estimate::getLowerBound() const
{
    return m_Lower_bound;
}
void TargetingTemplateAudienceSizing_reach_estimate::setLowerBound(int64_t const value)
{
    m_Lower_bound = value;
    m_Lower_boundIsSet = true;
}
bool TargetingTemplateAudienceSizing_reach_estimate::lowerBoundIsSet() const
{
    return m_Lower_boundIsSet;
}
void TargetingTemplateAudienceSizing_reach_estimate::unsetLower_bound()
{
    m_Lower_boundIsSet = false;
}
int64_t TargetingTemplateAudienceSizing_reach_estimate::getUpperBound() const
{
    return m_Upper_bound;
}
void TargetingTemplateAudienceSizing_reach_estimate::setUpperBound(int64_t const value)
{
    m_Upper_bound = value;
    m_Upper_boundIsSet = true;
}
bool TargetingTemplateAudienceSizing_reach_estimate::upperBoundIsSet() const
{
    return m_Upper_boundIsSet;
}
void TargetingTemplateAudienceSizing_reach_estimate::unsetUpper_bound()
{
    m_Upper_boundIsSet = false;
}


} // namespace org::openapitools::server::model

