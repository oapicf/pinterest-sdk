/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "RelatedTerms_related_terms_list_inner.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

RelatedTerms_related_terms_list_inner::RelatedTerms_related_terms_list_inner()
{
    m_Term = "";
    m_TermIsSet = false;
    m_Related_termsIsSet = false;
    
}

void RelatedTerms_related_terms_list_inner::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool RelatedTerms_related_terms_list_inner::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool RelatedTerms_related_terms_list_inner::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "RelatedTerms_related_terms_list_inner" : pathPrefix;

             
    if (relatedTermsIsSet())
    {
        const std::vector<std::string>& value = m_Related_terms;
        const std::string currentValuePath = _pathPrefix + ".relatedTerms";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const std::string& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }

    }
    
    return success;
}

bool RelatedTerms_related_terms_list_inner::operator==(const RelatedTerms_related_terms_list_inner& rhs) const
{
    return
    
    
    
    ((!termIsSet() && !rhs.termIsSet()) || (termIsSet() && rhs.termIsSet() && getTerm() == rhs.getTerm())) &&
    
    
    ((!relatedTermsIsSet() && !rhs.relatedTermsIsSet()) || (relatedTermsIsSet() && rhs.relatedTermsIsSet() && getRelatedTerms() == rhs.getRelatedTerms()))
    
    ;
}

bool RelatedTerms_related_terms_list_inner::operator!=(const RelatedTerms_related_terms_list_inner& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const RelatedTerms_related_terms_list_inner& o)
{
    j = nlohmann::json::object();
    if(o.termIsSet())
        j["term"] = o.m_Term;
    if(o.relatedTermsIsSet() || !o.m_Related_terms.empty())
        j["related_terms"] = o.m_Related_terms;
    
}

void from_json(const nlohmann::json& j, RelatedTerms_related_terms_list_inner& o)
{
    if(j.find("term") != j.end())
    {
        j.at("term").get_to(o.m_Term);
        o.m_TermIsSet = true;
    } 
    if(j.find("related_terms") != j.end())
    {
        j.at("related_terms").get_to(o.m_Related_terms);
        o.m_Related_termsIsSet = true;
    } 
    
}

std::string RelatedTerms_related_terms_list_inner::getTerm() const
{
    return m_Term;
}
void RelatedTerms_related_terms_list_inner::setTerm(std::string const& value)
{
    m_Term = value;
    m_TermIsSet = true;
}
bool RelatedTerms_related_terms_list_inner::termIsSet() const
{
    return m_TermIsSet;
}
void RelatedTerms_related_terms_list_inner::unsetTerm()
{
    m_TermIsSet = false;
}
std::vector<std::string> RelatedTerms_related_terms_list_inner::getRelatedTerms() const
{
    return m_Related_terms;
}
void RelatedTerms_related_terms_list_inner::setRelatedTerms(std::vector<std::string> const& value)
{
    m_Related_terms = value;
    m_Related_termsIsSet = true;
}
bool RelatedTerms_related_terms_list_inner::relatedTermsIsSet() const
{
    return m_Related_termsIsSet;
}
void RelatedTerms_related_terms_list_inner::unsetRelated_terms()
{
    m_Related_termsIsSet = false;
}


} // namespace org::openapitools::server::model

