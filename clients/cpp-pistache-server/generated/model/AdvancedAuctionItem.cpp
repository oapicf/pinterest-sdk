/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "AdvancedAuctionItem.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

AdvancedAuctionItem::AdvancedAuctionItem()
{
    m_Item_id = "";
    
}

void AdvancedAuctionItem::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool AdvancedAuctionItem::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool AdvancedAuctionItem::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "AdvancedAuctionItem" : pathPrefix;

                    
    if (!m_Bid_options.validate(msg, _pathPrefix + ".bidOptions")) {
        msg << _pathPrefix << ": Bid_options is invalid;";
        success = false;
    }
    return success;
}

bool AdvancedAuctionItem::operator==(const AdvancedAuctionItem& rhs) const
{
    return
    
    
    (getItemId() == rhs.getItemId())
     &&
    
    (getCountry() == rhs.getCountry())
     &&
    
    (getLanguage() == rhs.getLanguage())
     &&
    
    (getBidOptions() == rhs.getBidOptions())
    
    
    ;
}

bool AdvancedAuctionItem::operator!=(const AdvancedAuctionItem& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const AdvancedAuctionItem& o)
{
    j = nlohmann::json::object();
    j["item_id"] = o.m_Item_id;
    j["country"] = o.m_Country;
    j["language"] = o.m_Language;
    j["bid_options"] = o.m_Bid_options;
    
}

void from_json(const nlohmann::json& j, AdvancedAuctionItem& o)
{
    j.at("item_id").get_to(o.m_Item_id);
    j.at("country").get_to(o.m_Country);
    j.at("language").get_to(o.m_Language);
    j.at("bid_options").get_to(o.m_Bid_options);
    
}

std::string AdvancedAuctionItem::getItemId() const
{
    return m_Item_id;
}
void AdvancedAuctionItem::setItemId(std::string const& value)
{
    m_Item_id = value;
}
org::openapitools::server::model::Country AdvancedAuctionItem::getCountry() const
{
    return m_Country;
}
void AdvancedAuctionItem::setCountry(org::openapitools::server::model::Country const& value)
{
    m_Country = value;
}
org::openapitools::server::model::Language AdvancedAuctionItem::getLanguage() const
{
    return m_Language;
}
void AdvancedAuctionItem::setLanguage(org::openapitools::server::model::Language const& value)
{
    m_Language = value;
}
org::openapitools::server::model::AdvancedAuctionBidOptions AdvancedAuctionItem::getBidOptions() const
{
    return m_Bid_options;
}
void AdvancedAuctionItem::setBidOptions(org::openapitools::server::model::AdvancedAuctionBidOptions const& value)
{
    m_Bid_options = value;
}


} // namespace org::openapitools::server::model

