/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "Role.h"
#include "Helpers.h"
#include <stdexcept>
#include <sstream>

namespace org::openapitools::server::model
{

Role::Role()
{
    
}

void Role::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool Role::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool Role::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "Role" : pathPrefix;

    
    if (m_value == Role::eRole::INVALID_VALUE_OPENAPI_GENERATED)
    {
        success = false;
        msg << _pathPrefix << ": has no value;";
    }

    return success;
}

bool Role::operator==(const Role& rhs) const
{
    return
    getValue() == rhs.getValue()
    
    ;
}

bool Role::operator!=(const Role& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const Role& o)
{
    j = nlohmann::json::object();
    
    switch (o.getValue())
    {
        case Role::eRole::INVALID_VALUE_OPENAPI_GENERATED:
            j = "INVALID_VALUE_OPENAPI_GENERATED";
            break;
        case Role::eRole::UNKNOWN:
            j = "UNKNOWN";
            break;
        case Role::eRole::OWNER:
            j = "OWNER";
            break;
        case Role::eRole::ADMIN:
            j = "ADMIN";
            break;
        case Role::eRole::ANALYST:
            j = "ANALYST";
            break;
        case Role::eRole::SOS_READER:
            j = "SOS_READER";
            break;
        case Role::eRole::FINANCE_MANAGER:
            j = "FINANCE_MANAGER";
            break;
        case Role::eRole::AUDIENCE_MANAGER:
            j = "AUDIENCE_MANAGER";
            break;
        case Role::eRole::CAMPAIGN_MANAGER:
            j = "CAMPAIGN_MANAGER";
            break;
        case Role::eRole::CATALOGS_MANAGER:
            j = "CATALOGS_MANAGER";
            break;
        case Role::eRole::RESTRICTED_OWNER:
            j = "RESTRICTED_OWNER";
            break;
        case Role::eRole::PROFILE_MANAGER:
            j = "PROFILE_MANAGER";
            break;
        case Role::eRole::PROFILE_PUBLISHER:
            j = "PROFILE_PUBLISHER";
            break;
        case Role::eRole::RESOURCE_PINNER_LIST_OWNER:
            j = "RESOURCE_PINNER_LIST_OWNER";
            break;
        case Role::eRole::RESOURCE_PINNER_LIST_READER:
            j = "RESOURCE_PINNER_LIST_READER";
            break;
        case Role::eRole::BIZ_PINNER_LIST_SHARER:
            j = "BIZ_PINNER_LIST_SHARER";
            break;
        case Role::eRole::RESOURCE_CONVERSION_TAGS_READER:
            j = "RESOURCE_CONVERSION_TAGS_READER";
            break;
    }
}

void from_json(const nlohmann::json& j, Role& o)
{
    
    auto s = j.get<std::string>();
    if (s == "UNKNOWN") {
     o.setValue(Role::eRole::UNKNOWN);
    } 
    else if (s == "OWNER") {
     o.setValue(Role::eRole::OWNER);
    } 
    else if (s == "ADMIN") {
     o.setValue(Role::eRole::ADMIN);
    } 
    else if (s == "ANALYST") {
     o.setValue(Role::eRole::ANALYST);
    } 
    else if (s == "SOS_READER") {
     o.setValue(Role::eRole::SOS_READER);
    } 
    else if (s == "FINANCE_MANAGER") {
     o.setValue(Role::eRole::FINANCE_MANAGER);
    } 
    else if (s == "AUDIENCE_MANAGER") {
     o.setValue(Role::eRole::AUDIENCE_MANAGER);
    } 
    else if (s == "CAMPAIGN_MANAGER") {
     o.setValue(Role::eRole::CAMPAIGN_MANAGER);
    } 
    else if (s == "CATALOGS_MANAGER") {
     o.setValue(Role::eRole::CATALOGS_MANAGER);
    } 
    else if (s == "RESTRICTED_OWNER") {
     o.setValue(Role::eRole::RESTRICTED_OWNER);
    } 
    else if (s == "PROFILE_MANAGER") {
     o.setValue(Role::eRole::PROFILE_MANAGER);
    } 
    else if (s == "PROFILE_PUBLISHER") {
     o.setValue(Role::eRole::PROFILE_PUBLISHER);
    } 
    else if (s == "RESOURCE_PINNER_LIST_OWNER") {
     o.setValue(Role::eRole::RESOURCE_PINNER_LIST_OWNER);
    } 
    else if (s == "RESOURCE_PINNER_LIST_READER") {
     o.setValue(Role::eRole::RESOURCE_PINNER_LIST_READER);
    } 
    else if (s == "BIZ_PINNER_LIST_SHARER") {
     o.setValue(Role::eRole::BIZ_PINNER_LIST_SHARER);
    } 
    else if (s == "RESOURCE_CONVERSION_TAGS_READER") {
     o.setValue(Role::eRole::RESOURCE_CONVERSION_TAGS_READER);
    }  else {
     std::stringstream ss;
     ss << "Unexpected value " << s << " in json"
        << " cannot be converted to enum of type"
        << " Role::eRole";
     throw std::invalid_argument(ss.str());
    } 

}

Role::eRole Role::getValue() const
{
    return m_value;
}
void Role::setValue(Role::eRole value)
{
    m_value = value;
}

} // namespace org::openapitools::server::model

