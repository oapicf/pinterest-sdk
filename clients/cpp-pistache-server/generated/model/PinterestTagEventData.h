/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * PinterestTagEventData.h
 *
 * Optional for VISITOR &#x60;audience_type&#x60;. With the Pinterest tag, you can use event data to capture event details from your website. This object lists all the available predefined event data fields in the Pinterest tag. You can include these event data fields as part of a VISITOR audience’ s &#x60;rule&#x60;; however, you **must** specify an &#x60;event&#x60; for the &#x60;event_data&#x60; fields to be evaluated. Besides what’s listed, you can also create your own set of &#x60;event_data&#x60; fields and define their usages or purposes according to your website needs. However, the benefit of using the predefined event data fields is that we can provide various metrics based on those fields&#39; data.&lt;br&gt;Examples per &#x60;event&#x60; type:&lt;br&gt;&#x60;pagevisit&#x60;&lt;br&gt;\&quot;event_data\&quot;: { \&quot;page_name\&quot;: \&quot;My online store 123 | view items | shoe\&quot; }&lt;br&gt;&#x60;signup&#x60;&lt;br&gt;\&quot;event_data\&quot;: { \&quot;lead_type\&quot;: \&quot;New release promotion\&quot; }&lt;br&gt;&#x60;checkout&#x60;&lt;br&gt;\&quot;event_data\&quot;: { \&quot;value\&quot;: 116, \&quot;order_quantity\&quot;: 2, \&quot;currency\&quot;: \&quot;USD\&quot;, \&quot;line_items\&quot;: [ { \&quot;product_name\&quot;: \&quot;Pillows (Set of 2)\&quot;, \&quot;product_id\&quot;: \&quot;11\&quot;, \&quot;product_price\&quot;: 48, \&quot;product_quantity\&quot;: 1 }, { \&quot;product_name\&quot;: \&quot;Pillows, Large (Set of 2)\&quot;, \&quot;product_id\&quot;: \&quot;15\&quot;, \&quot;product_price\&quot;: 68, \&quot;product_quantity\&quot;: 1 } ] }&lt;br&gt;&#x60;addtocart&#x60;&lt;br&gt;\&quot;event_data\&quot;: { \&quot;value\&quot;: 499, \&quot;order_quantity\&quot;: 1, \&quot;currency\&quot;: \&quot;USD\&quot;, \&quot;line_items\&quot;: [ { \&quot;product_name\&quot;: \&quot;Red leather boots\&quot;, \&quot;product_id\&quot;: \&quot;3486\&quot;, \&quot;product_category\&quot;: \&quot;shoe\&quot;, \&quot;product_variant_id\&quot;: \&quot;JB11103000\&quot;, \&quot;product_price\&quot;: 499, \&quot;product_quantity\&quot;: \&quot;1\&quot; , \&quot;product_brand\&quot;: \&quot;My brand\&quot; }]}&lt;br&gt;&#x60;watchvideo&#x60;&lt;br&gt;\&quot;event_data\&quot;: { \&quot;video_title\&quot;: \&quot;My Product Video 01\&quot; }&lt;br&gt;&#x60;lead&#x60;&lt;br&gt;\&quot;event_data\&quot;: { \&quot;lead_type\&quot;: \&quot;Newsletter\&quot; }
 */

#ifndef PinterestTagEventData_H_
#define PinterestTagEventData_H_


#include "LineItem.h"
#include <string>
#include "Currency.h"
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// Optional for VISITOR &#x60;audience_type&#x60;. With the Pinterest tag, you can use event data to capture event details from your website. This object lists all the available predefined event data fields in the Pinterest tag. You can include these event data fields as part of a VISITOR audience’ s &#x60;rule&#x60;; however, you **must** specify an &#x60;event&#x60; for the &#x60;event_data&#x60; fields to be evaluated. Besides what’s listed, you can also create your own set of &#x60;event_data&#x60; fields and define their usages or purposes according to your website needs. However, the benefit of using the predefined event data fields is that we can provide various metrics based on those fields&#39; data.&lt;br&gt;Examples per &#x60;event&#x60; type:&lt;br&gt;&#x60;pagevisit&#x60;&lt;br&gt;\&quot;event_data\&quot;: { \&quot;page_name\&quot;: \&quot;My online store 123 | view items | shoe\&quot; }&lt;br&gt;&#x60;signup&#x60;&lt;br&gt;\&quot;event_data\&quot;: { \&quot;lead_type\&quot;: \&quot;New release promotion\&quot; }&lt;br&gt;&#x60;checkout&#x60;&lt;br&gt;\&quot;event_data\&quot;: { \&quot;value\&quot;: 116, \&quot;order_quantity\&quot;: 2, \&quot;currency\&quot;: \&quot;USD\&quot;, \&quot;line_items\&quot;: [ { \&quot;product_name\&quot;: \&quot;Pillows (Set of 2)\&quot;, \&quot;product_id\&quot;: \&quot;11\&quot;, \&quot;product_price\&quot;: 48, \&quot;product_quantity\&quot;: 1 }, { \&quot;product_name\&quot;: \&quot;Pillows, Large (Set of 2)\&quot;, \&quot;product_id\&quot;: \&quot;15\&quot;, \&quot;product_price\&quot;: 68, \&quot;product_quantity\&quot;: 1 } ] }&lt;br&gt;&#x60;addtocart&#x60;&lt;br&gt;\&quot;event_data\&quot;: { \&quot;value\&quot;: 499, \&quot;order_quantity\&quot;: 1, \&quot;currency\&quot;: \&quot;USD\&quot;, \&quot;line_items\&quot;: [ { \&quot;product_name\&quot;: \&quot;Red leather boots\&quot;, \&quot;product_id\&quot;: \&quot;3486\&quot;, \&quot;product_category\&quot;: \&quot;shoe\&quot;, \&quot;product_variant_id\&quot;: \&quot;JB11103000\&quot;, \&quot;product_price\&quot;: 499, \&quot;product_quantity\&quot;: \&quot;1\&quot; , \&quot;product_brand\&quot;: \&quot;My brand\&quot; }]}&lt;br&gt;&#x60;watchvideo&#x60;&lt;br&gt;\&quot;event_data\&quot;: { \&quot;video_title\&quot;: \&quot;My Product Video 01\&quot; }&lt;br&gt;&#x60;lead&#x60;&lt;br&gt;\&quot;event_data\&quot;: { \&quot;lead_type\&quot;: \&quot;Newsletter\&quot; }
/// </summary>
class  PinterestTagEventData
{
public:
    PinterestTagEventData();
    virtual ~PinterestTagEventData() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const PinterestTagEventData& rhs) const;
    bool operator!=(const PinterestTagEventData& rhs) const;

    /////////////////////////////////////////////
    /// PinterestTagEventData members

    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::Currency getCurrency() const;
    void setCurrency(org::openapitools::server::model::Currency const& value);
    bool currencyIsSet() const;
    void unsetCurrency();
    /// <summary>
    /// Promotion code. For example, \&quot;Newsletter\&quot;.
    /// </summary>
    std::string getLeadType() const;
    void setLeadType(std::string const& value);
    bool leadTypeIsSet() const;
    void unsetLead_type();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::LineItem getLineItems() const;
    void setLineItems(org::openapitools::server::model::LineItem const& value);
    bool lineItemsIsSet() const;
    void unsetLine_items();
    /// <summary>
    /// Order ID. For example, \&quot;X-151481\&quot;.
    /// </summary>
    std::string getOrderId() const;
    void setOrderId(std::string const& value);
    bool orderIdIsSet() const;
    void unsetOrder_id();
    /// <summary>
    /// Order quantity. For example, 1.
    /// </summary>
    int32_t getOrderQuantity() const;
    void setOrderQuantity(int32_t const value);
    bool orderQuantityIsSet() const;
    void unsetOrder_quantity();
    /// <summary>
    /// Page name. For example, \&quot;Our Favorite Pins on Pinterest\&quot;.
    /// </summary>
    std::string getPageName() const;
    void setPageName(std::string const& value);
    bool pageNameIsSet() const;
    void unsetPage_name();
    /// <summary>
    /// Promotion code. For example, \&quot;WINTER10\&quot;.
    /// </summary>
    std::string getPromoCode() const;
    void setPromoCode(std::string const& value);
    bool promoCodeIsSet() const;
    void unsetPromo_code();
    /// <summary>
    /// Property. For example, \&quot;Athleta\&quot;.
    /// </summary>
    std::string getProperty() const;
    void setProperty(std::string const& value);
    bool propertyIsSet() const;
    void unsetProperty();
    /// <summary>
    /// Search query string. For example, \&quot;boots\&quot;.
    /// </summary>
    std::string getSearchQuery() const;
    void setSearchQuery(std::string const& value);
    bool searchQueryIsSet() const;
    void unsetSearch_query();
    /// <summary>
    /// Product value. For example, \&quot;199.98\&quot;
    /// </summary>
    std::string getValue() const;
    void setValue(std::string const& value);
    bool valueIsSet() const;
    void unsetValue();
    /// <summary>
    /// Video title. For example, \&quot;How to style your Parker Boots\&quot;.
    /// </summary>
    std::string getVideoTitle() const;
    void setVideoTitle(std::string const& value);
    bool videoTitleIsSet() const;
    void unsetVideo_title();

    friend  void to_json(nlohmann::json& j, const PinterestTagEventData& o);
    friend  void from_json(const nlohmann::json& j, PinterestTagEventData& o);
protected:
    org::openapitools::server::model::Currency m_Currency;
    bool m_CurrencyIsSet;
    std::string m_Lead_type;
    bool m_Lead_typeIsSet;
    org::openapitools::server::model::LineItem m_Line_items;
    bool m_Line_itemsIsSet;
    std::string m_Order_id;
    bool m_Order_idIsSet;
    int32_t m_Order_quantity;
    bool m_Order_quantityIsSet;
    std::string m_Page_name;
    bool m_Page_nameIsSet;
    std::string m_Promo_code;
    bool m_Promo_codeIsSet;
    std::string m_Property;
    bool m_PropertyIsSet;
    std::string m_Search_query;
    bool m_Search_queryIsSet;
    std::string m_Value;
    bool m_ValueIsSet;
    std::string m_Video_title;
    bool m_Video_titleIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* PinterestTagEventData_H_ */
