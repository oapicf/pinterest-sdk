/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "SharedAudience.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

SharedAudience::SharedAudience()
{
    m_Audience_id = "";
    
}

void SharedAudience::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool SharedAudience::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool SharedAudience::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "SharedAudience" : pathPrefix;

         
    
    /* Audience_id */ {
        const std::string& value = m_Audience_id;
        const std::string currentValuePath = _pathPrefix + ".audienceId";
                
        

    }
             
    
    /* Recipient_account_ids */ {
        const std::vector<std::string>& value = m_Recipient_account_ids;
        const std::string currentValuePath = _pathPrefix + ".recipientAccountIds";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const std::string& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }

    }
    
    return success;
}

bool SharedAudience::operator==(const SharedAudience& rhs) const
{
    return
    
    
    (getAudienceId() == rhs.getAudienceId())
     &&
    
    (getOperationType() == rhs.getOperationType())
     &&
    
    (getRecipientAccountIds() == rhs.getRecipientAccountIds())
    
    
    ;
}

bool SharedAudience::operator!=(const SharedAudience& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const SharedAudience& o)
{
    j = nlohmann::json::object();
    j["audience_id"] = o.m_Audience_id;
    j["operation_type"] = o.m_Operation_type;
    j["recipient_account_ids"] = o.m_Recipient_account_ids;
    
}

void from_json(const nlohmann::json& j, SharedAudience& o)
{
    j.at("audience_id").get_to(o.m_Audience_id);
    j.at("operation_type").get_to(o.m_Operation_type);
    j.at("recipient_account_ids").get_to(o.m_Recipient_account_ids);
    
}

std::string SharedAudience::getAudienceId() const
{
    return m_Audience_id;
}
void SharedAudience::setAudienceId(std::string const& value)
{
    m_Audience_id = value;
}
org::openapitools::server::model::OperationType SharedAudience::getOperationType() const
{
    return m_Operation_type;
}
void SharedAudience::setOperationType(org::openapitools::server::model::OperationType const& value)
{
    m_Operation_type = value;
}
std::vector<std::string> SharedAudience::getRecipientAccountIds() const
{
    return m_Recipient_account_ids;
}
void SharedAudience::setRecipientAccountIds(std::vector<std::string> const& value)
{
    m_Recipient_account_ids = value;
}


} // namespace org::openapitools::server::model

