/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * IntegrationLog.h
 *
 * Schema for log sent from an integration application.
 */

#ifndef IntegrationLog_H_
#define IntegrationLog_H_


#include <string>
#include "IntegrationLogClientError.h"
#include "IntegrationLogClientRequest.h"
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// Schema for log sent from an integration application.
/// </summary>
class  IntegrationLog
{
public:
    IntegrationLog();
    virtual ~IntegrationLog() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const IntegrationLog& rhs) const;
    bool operator!=(const IntegrationLog& rhs) const;

    /////////////////////////////////////////////
    /// IntegrationLog members

    /// <summary>
    /// Timestamp in milliseconds of when the log was executed at the client.
    /// </summary>
    int32_t getClientTimestamp() const;
    void setClientTimestamp(int32_t const value);
    /// <summary>
    /// Log event type
    /// </summary>
    std::string getEventType() const;
    void setEventType(std::string const& value);
    /// <summary>
    /// Log level type
    /// </summary>
    std::string getLogLevel() const;
    void setLogLevel(std::string const& value);
    /// <summary>
    /// 
    /// </summary>
    std::string getExternalBusinessId() const;
    void setExternalBusinessId(std::string const& value);
    bool externalBusinessIdIsSet() const;
    void unsetExternal_business_id();
    /// <summary>
    /// 
    /// </summary>
    std::string getAdvertiserId() const;
    void setAdvertiserId(std::string const& value);
    bool advertiserIdIsSet() const;
    void unsetAdvertiser_id();
    /// <summary>
    /// 
    /// </summary>
    std::string getMerchantId() const;
    void setMerchantId(std::string const& value);
    bool merchantIdIsSet() const;
    void unsetMerchant_id();
    /// <summary>
    /// 
    /// </summary>
    std::string getTagId() const;
    void setTagId(std::string const& value);
    bool tagIdIsSet() const;
    void unsetTag_id();
    /// <summary>
    /// 
    /// </summary>
    std::string getFeedProfileId() const;
    void setFeedProfileId(std::string const& value);
    bool feedProfileIdIsSet() const;
    void unsetFeed_profile_id();
    /// <summary>
    /// Explanation of the event that occured.
    /// </summary>
    std::string getMessage() const;
    void setMessage(std::string const& value);
    bool messageIsSet() const;
    void unsetMessage();
    /// <summary>
    /// Version number of the integration application.
    /// </summary>
    std::string getAppVersionNumber() const;
    void setAppVersionNumber(std::string const& value);
    bool appVersionNumberIsSet() const;
    void unsetApp_version_number();
    /// <summary>
    /// Version number of the platform the integration application is running on.
    /// </summary>
    std::string getPlatformVersionNumber() const;
    void setPlatformVersionNumber(std::string const& value);
    bool platformVersionNumberIsSet() const;
    void unsetPlatform_version_number();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::IntegrationLogClientError getError() const;
    void setError(org::openapitools::server::model::IntegrationLogClientError const& value);
    bool errorIsSet() const;
    void unsetError();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::IntegrationLogClientRequest getRequest() const;
    void setRequest(org::openapitools::server::model::IntegrationLogClientRequest const& value);
    bool requestIsSet() const;
    void unsetRequest();

    friend  void to_json(nlohmann::json& j, const IntegrationLog& o);
    friend  void from_json(const nlohmann::json& j, IntegrationLog& o);
protected:
    int32_t m_Client_timestamp;

    std::string m_Event_type;

    std::string m_Log_level;

    std::string m_External_business_id;
    bool m_External_business_idIsSet;
    std::string m_Advertiser_id;
    bool m_Advertiser_idIsSet;
    std::string m_Merchant_id;
    bool m_Merchant_idIsSet;
    std::string m_Tag_id;
    bool m_Tag_idIsSet;
    std::string m_Feed_profile_id;
    bool m_Feed_profile_idIsSet;
    std::string m_Message;
    bool m_MessageIsSet;
    std::string m_App_version_number;
    bool m_App_version_numberIsSet;
    std::string m_Platform_version_number;
    bool m_Platform_version_numberIsSet;
    org::openapitools::server::model::IntegrationLogClientError m_Error;
    bool m_ErrorIsSet;
    org::openapitools::server::model::IntegrationLogClientRequest m_Request;
    bool m_RequestIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* IntegrationLog_H_ */
