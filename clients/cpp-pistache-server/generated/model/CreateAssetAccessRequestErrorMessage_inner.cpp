/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "CreateAssetAccessRequestErrorMessage_inner.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

CreateAssetAccessRequestErrorMessage_inner::CreateAssetAccessRequestErrorMessage_inner()
{
    m_Code = 0;
    m_CodeIsSet = false;
    m_MessagesIsSet = false;
    
}

void CreateAssetAccessRequestErrorMessage_inner::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool CreateAssetAccessRequestErrorMessage_inner::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool CreateAssetAccessRequestErrorMessage_inner::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "CreateAssetAccessRequestErrorMessage_inner" : pathPrefix;

             
    if (messagesIsSet())
    {
        const std::vector<std::string>& value = m_Messages;
        const std::string currentValuePath = _pathPrefix + ".messages";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const std::string& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }

    }
    
    return success;
}

bool CreateAssetAccessRequestErrorMessage_inner::operator==(const CreateAssetAccessRequestErrorMessage_inner& rhs) const
{
    return
    
    
    
    ((!codeIsSet() && !rhs.codeIsSet()) || (codeIsSet() && rhs.codeIsSet() && getCode() == rhs.getCode())) &&
    
    
    ((!messagesIsSet() && !rhs.messagesIsSet()) || (messagesIsSet() && rhs.messagesIsSet() && getMessages() == rhs.getMessages()))
    
    ;
}

bool CreateAssetAccessRequestErrorMessage_inner::operator!=(const CreateAssetAccessRequestErrorMessage_inner& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const CreateAssetAccessRequestErrorMessage_inner& o)
{
    j = nlohmann::json::object();
    if(o.codeIsSet())
        j["code"] = o.m_Code;
    if(o.messagesIsSet() || !o.m_Messages.empty())
        j["messages"] = o.m_Messages;
    
}

void from_json(const nlohmann::json& j, CreateAssetAccessRequestErrorMessage_inner& o)
{
    if(j.find("code") != j.end())
    {
        j.at("code").get_to(o.m_Code);
        o.m_CodeIsSet = true;
    } 
    if(j.find("messages") != j.end())
    {
        j.at("messages").get_to(o.m_Messages);
        o.m_MessagesIsSet = true;
    } 
    
}

int32_t CreateAssetAccessRequestErrorMessage_inner::getCode() const
{
    return m_Code;
}
void CreateAssetAccessRequestErrorMessage_inner::setCode(int32_t const value)
{
    m_Code = value;
    m_CodeIsSet = true;
}
bool CreateAssetAccessRequestErrorMessage_inner::codeIsSet() const
{
    return m_CodeIsSet;
}
void CreateAssetAccessRequestErrorMessage_inner::unsetCode()
{
    m_CodeIsSet = false;
}
std::vector<std::string> CreateAssetAccessRequestErrorMessage_inner::getMessages() const
{
    return m_Messages;
}
void CreateAssetAccessRequestErrorMessage_inner::setMessages(std::vector<std::string> const& value)
{
    m_Messages = value;
    m_MessagesIsSet = true;
}
bool CreateAssetAccessRequestErrorMessage_inner::messagesIsSet() const
{
    return m_MessagesIsSet;
}
void CreateAssetAccessRequestErrorMessage_inner::unsetMessages()
{
    m_MessagesIsSet = false;
}


} // namespace org::openapitools::server::model

