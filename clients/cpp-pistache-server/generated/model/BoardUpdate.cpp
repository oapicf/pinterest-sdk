/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "BoardUpdate.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

BoardUpdate::BoardUpdate()
{
    m_Name = "";
    m_NameIsSet = false;
    m_Description = "";
    m_DescriptionIsSet = false;
    m_Privacy = "";
    m_PrivacyIsSet = false;
    
}

void BoardUpdate::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool BoardUpdate::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool BoardUpdate::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "BoardUpdate" : pathPrefix;

                
    return success;
}

bool BoardUpdate::operator==(const BoardUpdate& rhs) const
{
    return
    
    
    
    ((!nameIsSet() && !rhs.nameIsSet()) || (nameIsSet() && rhs.nameIsSet() && getName() == rhs.getName())) &&
    
    
    ((!descriptionIsSet() && !rhs.descriptionIsSet()) || (descriptionIsSet() && rhs.descriptionIsSet() && getDescription() == rhs.getDescription())) &&
    
    
    ((!privacyIsSet() && !rhs.privacyIsSet()) || (privacyIsSet() && rhs.privacyIsSet() && getPrivacy() == rhs.getPrivacy()))
    
    ;
}

bool BoardUpdate::operator!=(const BoardUpdate& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const BoardUpdate& o)
{
    j = nlohmann::json::object();
    if(o.nameIsSet())
        j["name"] = o.m_Name;
    if(o.descriptionIsSet())
        j["description"] = o.m_Description;
    if(o.privacyIsSet())
        j["privacy"] = o.m_Privacy;
    
}

void from_json(const nlohmann::json& j, BoardUpdate& o)
{
    if(j.find("name") != j.end())
    {
        j.at("name").get_to(o.m_Name);
        o.m_NameIsSet = true;
    } 
    if(j.find("description") != j.end())
    {
        j.at("description").get_to(o.m_Description);
        o.m_DescriptionIsSet = true;
    } 
    if(j.find("privacy") != j.end())
    {
        j.at("privacy").get_to(o.m_Privacy);
        o.m_PrivacyIsSet = true;
    } 
    
}

std::string BoardUpdate::getName() const
{
    return m_Name;
}
void BoardUpdate::setName(std::string const& value)
{
    m_Name = value;
    m_NameIsSet = true;
}
bool BoardUpdate::nameIsSet() const
{
    return m_NameIsSet;
}
void BoardUpdate::unsetName()
{
    m_NameIsSet = false;
}
std::string BoardUpdate::getDescription() const
{
    return m_Description;
}
void BoardUpdate::setDescription(std::string const& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}
bool BoardUpdate::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}
void BoardUpdate::unsetDescription()
{
    m_DescriptionIsSet = false;
}
std::string BoardUpdate::getPrivacy() const
{
    return m_Privacy;
}
void BoardUpdate::setPrivacy(std::string const& value)
{
    m_Privacy = value;
    m_PrivacyIsSet = true;
}
bool BoardUpdate::privacyIsSet() const
{
    return m_PrivacyIsSet;
}
void BoardUpdate::unsetPrivacy()
{
    m_PrivacyIsSet = false;
}


} // namespace org::openapitools::server::model

