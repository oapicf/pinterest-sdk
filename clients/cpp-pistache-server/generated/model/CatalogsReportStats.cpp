/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "CatalogsReportStats.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

CatalogsReportStats::CatalogsReportStats()
{
    m_Report_type = "";
    m_Catalog_id = "";
    m_Catalog_idIsSet = false;
    m_Code = 0;
    m_CodeIsSet = false;
    m_Code_label = "";
    m_Code_labelIsSet = false;
    m_Message = "";
    m_MessageIsSet = false;
    m_Occurrences = 0;
    m_OccurrencesIsSet = false;
    m_Severity = "";
    m_SeverityIsSet = false;
    m_Ineligible_for_ads = false;
    m_Ineligible_for_adsIsSet = false;
    m_Ineligible_for_organic = false;
    m_Ineligible_for_organicIsSet = false;
    
}

void CatalogsReportStats::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool CatalogsReportStats::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool CatalogsReportStats::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "CatalogsReportStats" : pathPrefix;

             
    if (catalogIdIsSet())
    {
        const std::string& value = m_Catalog_id;
        const std::string currentValuePath = _pathPrefix + ".catalogId";
                
        

    }
                                
    return success;
}

bool CatalogsReportStats::operator==(const CatalogsReportStats& rhs) const
{
    return
    
    
    (getReportType() == rhs.getReportType())
     &&
    
    
    ((!catalogIdIsSet() && !rhs.catalogIdIsSet()) || (catalogIdIsSet() && rhs.catalogIdIsSet() && getCatalogId() == rhs.getCatalogId())) &&
    
    
    ((!codeIsSet() && !rhs.codeIsSet()) || (codeIsSet() && rhs.codeIsSet() && getCode() == rhs.getCode())) &&
    
    
    ((!codeLabelIsSet() && !rhs.codeLabelIsSet()) || (codeLabelIsSet() && rhs.codeLabelIsSet() && getCodeLabel() == rhs.getCodeLabel())) &&
    
    
    ((!messageIsSet() && !rhs.messageIsSet()) || (messageIsSet() && rhs.messageIsSet() && getMessage() == rhs.getMessage())) &&
    
    
    ((!occurrencesIsSet() && !rhs.occurrencesIsSet()) || (occurrencesIsSet() && rhs.occurrencesIsSet() && getOccurrences() == rhs.getOccurrences())) &&
    
    
    ((!severityIsSet() && !rhs.severityIsSet()) || (severityIsSet() && rhs.severityIsSet() && getSeverity() == rhs.getSeverity())) &&
    
    
    ((!ineligibleForAdsIsSet() && !rhs.ineligibleForAdsIsSet()) || (ineligibleForAdsIsSet() && rhs.ineligibleForAdsIsSet() && isIneligibleForAds() == rhs.isIneligibleForAds())) &&
    
    
    ((!ineligibleForOrganicIsSet() && !rhs.ineligibleForOrganicIsSet()) || (ineligibleForOrganicIsSet() && rhs.ineligibleForOrganicIsSet() && isIneligibleForOrganic() == rhs.isIneligibleForOrganic()))
    
    ;
}

bool CatalogsReportStats::operator!=(const CatalogsReportStats& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const CatalogsReportStats& o)
{
    j = nlohmann::json::object();
    j["report_type"] = o.m_Report_type;
    if(o.catalogIdIsSet())
        j["catalog_id"] = o.m_Catalog_id;
    if(o.codeIsSet())
        j["code"] = o.m_Code;
    if(o.codeLabelIsSet())
        j["code_label"] = o.m_Code_label;
    if(o.messageIsSet())
        j["message"] = o.m_Message;
    if(o.occurrencesIsSet())
        j["occurrences"] = o.m_Occurrences;
    if(o.severityIsSet())
        j["severity"] = o.m_Severity;
    if(o.ineligibleForAdsIsSet())
        j["ineligible_for_ads"] = o.m_Ineligible_for_ads;
    if(o.ineligibleForOrganicIsSet())
        j["ineligible_for_organic"] = o.m_Ineligible_for_organic;
    
}

void from_json(const nlohmann::json& j, CatalogsReportStats& o)
{
    j.at("report_type").get_to(o.m_Report_type);
    if(j.find("catalog_id") != j.end())
    {
        j.at("catalog_id").get_to(o.m_Catalog_id);
        o.m_Catalog_idIsSet = true;
    } 
    if(j.find("code") != j.end())
    {
        j.at("code").get_to(o.m_Code);
        o.m_CodeIsSet = true;
    } 
    if(j.find("code_label") != j.end())
    {
        j.at("code_label").get_to(o.m_Code_label);
        o.m_Code_labelIsSet = true;
    } 
    if(j.find("message") != j.end())
    {
        j.at("message").get_to(o.m_Message);
        o.m_MessageIsSet = true;
    } 
    if(j.find("occurrences") != j.end())
    {
        j.at("occurrences").get_to(o.m_Occurrences);
        o.m_OccurrencesIsSet = true;
    } 
    if(j.find("severity") != j.end())
    {
        j.at("severity").get_to(o.m_Severity);
        o.m_SeverityIsSet = true;
    } 
    if(j.find("ineligible_for_ads") != j.end())
    {
        j.at("ineligible_for_ads").get_to(o.m_Ineligible_for_ads);
        o.m_Ineligible_for_adsIsSet = true;
    } 
    if(j.find("ineligible_for_organic") != j.end())
    {
        j.at("ineligible_for_organic").get_to(o.m_Ineligible_for_organic);
        o.m_Ineligible_for_organicIsSet = true;
    } 
    
}

std::string CatalogsReportStats::getReportType() const
{
    return m_Report_type;
}
void CatalogsReportStats::setReportType(std::string const& value)
{
    m_Report_type = value;
}
std::string CatalogsReportStats::getCatalogId() const
{
    return m_Catalog_id;
}
void CatalogsReportStats::setCatalogId(std::string const& value)
{
    m_Catalog_id = value;
    m_Catalog_idIsSet = true;
}
bool CatalogsReportStats::catalogIdIsSet() const
{
    return m_Catalog_idIsSet;
}
void CatalogsReportStats::unsetCatalog_id()
{
    m_Catalog_idIsSet = false;
}
int32_t CatalogsReportStats::getCode() const
{
    return m_Code;
}
void CatalogsReportStats::setCode(int32_t const value)
{
    m_Code = value;
    m_CodeIsSet = true;
}
bool CatalogsReportStats::codeIsSet() const
{
    return m_CodeIsSet;
}
void CatalogsReportStats::unsetCode()
{
    m_CodeIsSet = false;
}
std::string CatalogsReportStats::getCodeLabel() const
{
    return m_Code_label;
}
void CatalogsReportStats::setCodeLabel(std::string const& value)
{
    m_Code_label = value;
    m_Code_labelIsSet = true;
}
bool CatalogsReportStats::codeLabelIsSet() const
{
    return m_Code_labelIsSet;
}
void CatalogsReportStats::unsetCode_label()
{
    m_Code_labelIsSet = false;
}
std::string CatalogsReportStats::getMessage() const
{
    return m_Message;
}
void CatalogsReportStats::setMessage(std::string const& value)
{
    m_Message = value;
    m_MessageIsSet = true;
}
bool CatalogsReportStats::messageIsSet() const
{
    return m_MessageIsSet;
}
void CatalogsReportStats::unsetMessage()
{
    m_MessageIsSet = false;
}
int32_t CatalogsReportStats::getOccurrences() const
{
    return m_Occurrences;
}
void CatalogsReportStats::setOccurrences(int32_t const value)
{
    m_Occurrences = value;
    m_OccurrencesIsSet = true;
}
bool CatalogsReportStats::occurrencesIsSet() const
{
    return m_OccurrencesIsSet;
}
void CatalogsReportStats::unsetOccurrences()
{
    m_OccurrencesIsSet = false;
}
std::string CatalogsReportStats::getSeverity() const
{
    return m_Severity;
}
void CatalogsReportStats::setSeverity(std::string const& value)
{
    m_Severity = value;
    m_SeverityIsSet = true;
}
bool CatalogsReportStats::severityIsSet() const
{
    return m_SeverityIsSet;
}
void CatalogsReportStats::unsetSeverity()
{
    m_SeverityIsSet = false;
}
bool CatalogsReportStats::isIneligibleForAds() const
{
    return m_Ineligible_for_ads;
}
void CatalogsReportStats::setIneligibleForAds(bool const value)
{
    m_Ineligible_for_ads = value;
    m_Ineligible_for_adsIsSet = true;
}
bool CatalogsReportStats::ineligibleForAdsIsSet() const
{
    return m_Ineligible_for_adsIsSet;
}
void CatalogsReportStats::unsetIneligible_for_ads()
{
    m_Ineligible_for_adsIsSet = false;
}
bool CatalogsReportStats::isIneligibleForOrganic() const
{
    return m_Ineligible_for_organic;
}
void CatalogsReportStats::setIneligibleForOrganic(bool const value)
{
    m_Ineligible_for_organic = value;
    m_Ineligible_for_organicIsSet = true;
}
bool CatalogsReportStats::ineligibleForOrganicIsSet() const
{
    return m_Ineligible_for_organicIsSet;
}
void CatalogsReportStats::unsetIneligible_for_organic()
{
    m_Ineligible_for_organicIsSet = false;
}


} // namespace org::openapitools::server::model

