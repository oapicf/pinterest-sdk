/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * SSIOCreateInsertionOrderRequest.h
 *
 * 
 */

#ifndef SSIOCreateInsertionOrderRequest_H_
#define SSIOCreateInsertionOrderRequest_H_


#include <string>
#include "Currency.h"
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// 
/// </summary>
class  SSIOCreateInsertionOrderRequest
{
public:
    SSIOCreateInsertionOrderRequest();
    virtual ~SSIOCreateInsertionOrderRequest() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const SSIOCreateInsertionOrderRequest& rhs) const;
    bool operator!=(const SSIOCreateInsertionOrderRequest& rhs) const;

    /////////////////////////////////////////////
    /// SSIOCreateInsertionOrderRequest members

    /// <summary>
    /// Starting date of time period. Format: YYYY-MM-DD
    /// </summary>
    std::string getStartDate() const;
    void setStartDate(std::string const& value);
    /// <summary>
    /// End date of time period. Format: YYYY-MM-DD
    /// </summary>
    std::string getEndDate() const;
    void setEndDate(std::string const& value);
    bool endDateIsSet() const;
    void unsetEnd_date();
    /// <summary>
    /// The po number
    /// </summary>
    std::string getPoNumber() const;
    void setPoNumber(std::string const& value);
    /// <summary>
    /// If Budget order line, the budget amount.
    /// </summary>
    double getBudgetAmount() const;
    void setBudgetAmount(double const value);
    bool budgetAmountIsSet() const;
    void unsetBudget_amount();
    /// <summary>
    /// The billing contact first name
    /// </summary>
    std::string getBillingContactFirstname() const;
    void setBillingContactFirstname(std::string const& value);
    /// <summary>
    /// The billing contact last name
    /// </summary>
    std::string getBillingContactLastname() const;
    void setBillingContactLastname(std::string const& value);
    /// <summary>
    /// The billing contact email
    /// </summary>
    std::string getBillingContactEmail() const;
    void setBillingContactEmail(std::string const& value);
    /// <summary>
    /// The media contact first name
    /// </summary>
    std::string getMediaContactFirstname() const;
    void setMediaContactFirstname(std::string const& value);
    /// <summary>
    /// The media contact last name
    /// </summary>
    std::string getMediaContactLastname() const;
    void setMediaContactLastname(std::string const& value);
    /// <summary>
    /// The media contact email
    /// </summary>
    std::string getMediaContactEmail() const;
    void setMediaContactEmail(std::string const& value);
    /// <summary>
    /// URL link for agency
    /// </summary>
    std::string getAgencyLink() const;
    void setAgencyLink(std::string const& value);
    bool agencyLinkIsSet() const;
    void unsetAgency_link();
    /// <summary>
    /// The email of user submitting the insertion order
    /// </summary>
    std::string getUserEmail() const;
    void setUserEmail(std::string const& value);
    bool userEmailIsSet() const;
    void unsetUser_email();
    /// <summary>
    /// The UTC timestamp (to the nearest sec) of when terms were accepted
    /// </summary>
    int32_t getAcceptedTermsTime() const;
    void setAcceptedTermsTime(int32_t const value);
    bool acceptedTermsTimeIsSet() const;
    void unsetAccepted_terms_time();
    /// <summary>
    /// The pmp id
    /// </summary>
    std::string getPmpId() const;
    void setPmpId(std::string const& value);
    /// <summary>
    /// The order name
    /// </summary>
    std::string getOrderName() const;
    void setOrderName(std::string const& value);
    /// <summary>
    /// Type can be Budget or Perpetual
    /// </summary>
    std::string getOrderLineType() const;
    void setOrderLineType(std::string const& value);
    /// <summary>
    /// The SFDC id for the terms
    /// </summary>
    std::string getAcceptedTermsId() const;
    void setAcceptedTermsId(std::string const& value);
    /// <summary>
    /// The bill-to company id
    /// </summary>
    std::string getBilltoCompanyId() const;
    void setBilltoCompanyId(std::string const& value);
    /// <summary>
    /// The bill-to business address id
    /// </summary>
    std::string getBilltoBusinessAddressId() const;
    void setBilltoBusinessAddressId(std::string const& value);
    /// <summary>
    /// The bill-to billing address id
    /// </summary>
    std::string getBilltoBillingAddressId() const;
    void setBilltoBillingAddressId(std::string const& value);
    /// <summary>
    /// If Ongoing (perpetual) order line, the estimated monthly spend
    /// </summary>
    double getEstimatedMonthlySpend() const;
    void setEstimatedMonthlySpend(double const value);
    bool estimatedMonthlySpendIsSet() const;
    void unsetEstimated_monthly_spend();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::Currency getCurrencyInfo() const;
    void setCurrencyInfo(org::openapitools::server::model::Currency const& value);

    friend  void to_json(nlohmann::json& j, const SSIOCreateInsertionOrderRequest& o);
    friend  void from_json(const nlohmann::json& j, SSIOCreateInsertionOrderRequest& o);
protected:
    std::string m_Start_date;

    std::string m_End_date;
    bool m_End_dateIsSet;
    std::string m_Po_number;

    double m_Budget_amount;
    bool m_Budget_amountIsSet;
    std::string m_Billing_contact_firstname;

    std::string m_Billing_contact_lastname;

    std::string m_Billing_contact_email;

    std::string m_Media_contact_firstname;

    std::string m_Media_contact_lastname;

    std::string m_Media_contact_email;

    std::string m_Agency_link;
    bool m_Agency_linkIsSet;
    std::string m_User_email;
    bool m_User_emailIsSet;
    int32_t m_Accepted_terms_time;
    bool m_Accepted_terms_timeIsSet;
    std::string m_Pmp_id;

    std::string m_Order_name;

    std::string m_Order_line_type;

    std::string m_Accepted_terms_id;

    std::string m_Billto_company_id;

    std::string m_Billto_business_address_id;

    std::string m_Billto_billing_address_id;

    double m_Estimated_monthly_spend;
    bool m_Estimated_monthly_spendIsSet;
    org::openapitools::server::model::Currency m_Currency_info;

    
};

} // namespace org::openapitools::server::model

#endif /* SSIOCreateInsertionOrderRequest_H_ */
