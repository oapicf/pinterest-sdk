/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "CreateMembershipOrPartnershipInvitesBody.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

CreateMembershipOrPartnershipInvitesBody::CreateMembershipOrPartnershipInvitesBody()
{
    m_Business_role = "";
    m_MembersIsSet = false;
    m_PartnersIsSet = false;
    
}

void CreateMembershipOrPartnershipInvitesBody::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool CreateMembershipOrPartnershipInvitesBody::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool CreateMembershipOrPartnershipInvitesBody::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "CreateMembershipOrPartnershipInvitesBody" : pathPrefix;

                 
    if (membersIsSet())
    {
        const std::vector<std::string>& value = m_Members;
        const std::string currentValuePath = _pathPrefix + ".members";
                
        
        if (value.size() < 1)
        {
            success = false;
            msg << currentValuePath << ": must have at least 1 elements;";
        }
        if (value.size() > 50)
        {
            success = false;
            msg << currentValuePath << ": must have at most 50 elements;";
        }
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const std::string& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }

    }
         
    if (partnersIsSet())
    {
        const std::vector<std::string>& value = m_Partners;
        const std::string currentValuePath = _pathPrefix + ".partners";
                
        
        if (value.size() < 1)
        {
            success = false;
            msg << currentValuePath << ": must have at least 1 elements;";
        }
        if (value.size() > 50)
        {
            success = false;
            msg << currentValuePath << ": must have at most 50 elements;";
        }
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const std::string& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
        if (value.length() > 25)
        {
            success = false;
            msg << currentValuePath << ": must be at most 25 characters long;";
        }
 
                i++;
            }
        }

    }
    
    return success;
}

bool CreateMembershipOrPartnershipInvitesBody::operator==(const CreateMembershipOrPartnershipInvitesBody& rhs) const
{
    return
    
    
    (getBusinessRole() == rhs.getBusinessRole())
     &&
    
    (getInviteType() == rhs.getInviteType())
     &&
    
    
    ((!membersIsSet() && !rhs.membersIsSet()) || (membersIsSet() && rhs.membersIsSet() && getMembers() == rhs.getMembers())) &&
    
    
    ((!partnersIsSet() && !rhs.partnersIsSet()) || (partnersIsSet() && rhs.partnersIsSet() && getPartners() == rhs.getPartners()))
    
    ;
}

bool CreateMembershipOrPartnershipInvitesBody::operator!=(const CreateMembershipOrPartnershipInvitesBody& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const CreateMembershipOrPartnershipInvitesBody& o)
{
    j = nlohmann::json::object();
    j["business_role"] = o.m_Business_role;
    j["invite_type"] = o.m_Invite_type;
    if(o.membersIsSet() || !o.m_Members.empty())
        j["members"] = o.m_Members;
    if(o.partnersIsSet() || !o.m_Partners.empty())
        j["partners"] = o.m_Partners;
    
}

void from_json(const nlohmann::json& j, CreateMembershipOrPartnershipInvitesBody& o)
{
    j.at("business_role").get_to(o.m_Business_role);
    j.at("invite_type").get_to(o.m_Invite_type);
    if(j.find("members") != j.end())
    {
        j.at("members").get_to(o.m_Members);
        o.m_MembersIsSet = true;
    } 
    if(j.find("partners") != j.end())
    {
        j.at("partners").get_to(o.m_Partners);
        o.m_PartnersIsSet = true;
    } 
    
}

std::string CreateMembershipOrPartnershipInvitesBody::getBusinessRole() const
{
    return m_Business_role;
}
void CreateMembershipOrPartnershipInvitesBody::setBusinessRole(std::string const& value)
{
    m_Business_role = value;
}
org::openapitools::server::model::InviteType CreateMembershipOrPartnershipInvitesBody::getInviteType() const
{
    return m_Invite_type;
}
void CreateMembershipOrPartnershipInvitesBody::setInviteType(org::openapitools::server::model::InviteType const& value)
{
    m_Invite_type = value;
}
std::vector<std::string> CreateMembershipOrPartnershipInvitesBody::getMembers() const
{
    return m_Members;
}
void CreateMembershipOrPartnershipInvitesBody::setMembers(std::vector<std::string> const& value)
{
    m_Members = value;
    m_MembersIsSet = true;
}
bool CreateMembershipOrPartnershipInvitesBody::membersIsSet() const
{
    return m_MembersIsSet;
}
void CreateMembershipOrPartnershipInvitesBody::unsetMembers()
{
    m_MembersIsSet = false;
}
std::vector<std::string> CreateMembershipOrPartnershipInvitesBody::getPartners() const
{
    return m_Partners;
}
void CreateMembershipOrPartnershipInvitesBody::setPartners(std::vector<std::string> const& value)
{
    m_Partners = value;
    m_PartnersIsSet = true;
}
bool CreateMembershipOrPartnershipInvitesBody::partnersIsSet() const
{
    return m_PartnersIsSet;
}
void CreateMembershipOrPartnershipInvitesBody::unsetPartners()
{
    m_PartnersIsSet = false;
}


} // namespace org::openapitools::server::model

