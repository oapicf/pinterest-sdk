/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * AudienceDemographics.h
 *
 * Audience demographics
 */

#ifndef AudienceDemographics_H_
#define AudienceDemographics_H_


#include "AudienceDemographicValue.h"
#include <vector>
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// Audience demographics
/// </summary>
class  AudienceDemographics
{
public:
    AudienceDemographics();
    virtual ~AudienceDemographics() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const AudienceDemographics& rhs) const;
    bool operator!=(const AudienceDemographics& rhs) const;

    /////////////////////////////////////////////
    /// AudienceDemographics members

    /// <summary>
    /// Ages distribution.
    /// </summary>
    std::vector<org::openapitools::server::model::AudienceDemographicValue> getAges() const;
    void setAges(std::vector<org::openapitools::server::model::AudienceDemographicValue> const& value);
    bool agesIsSet() const;
    void unsetAges();
    /// <summary>
    /// Gender distribution.
    /// </summary>
    std::vector<org::openapitools::server::model::AudienceDemographicValue> getGenders() const;
    void setGenders(std::vector<org::openapitools::server::model::AudienceDemographicValue> const& value);
    bool gendersIsSet() const;
    void unsetGenders();
    /// <summary>
    /// Device usage distribution.
    /// </summary>
    std::vector<org::openapitools::server::model::AudienceDemographicValue> getDevices() const;
    void setDevices(std::vector<org::openapitools::server::model::AudienceDemographicValue> const& value);
    bool devicesIsSet() const;
    void unsetDevices();
    /// <summary>
    /// Geographic metro area distribution.
    /// </summary>
    std::vector<org::openapitools::server::model::AudienceDemographicValue> getMetros() const;
    void setMetros(std::vector<org::openapitools::server::model::AudienceDemographicValue> const& value);
    bool metrosIsSet() const;
    void unsetMetros();
    /// <summary>
    /// Country area distribution.
    /// </summary>
    std::vector<org::openapitools::server::model::AudienceDemographicValue> getCountries() const;
    void setCountries(std::vector<org::openapitools::server::model::AudienceDemographicValue> const& value);
    bool countriesIsSet() const;
    void unsetCountries();

    friend  void to_json(nlohmann::json& j, const AudienceDemographics& o);
    friend  void from_json(const nlohmann::json& j, AudienceDemographics& o);
protected:
    std::vector<org::openapitools::server::model::AudienceDemographicValue> m_Ages;
    bool m_AgesIsSet;
    std::vector<org::openapitools::server::model::AudienceDemographicValue> m_Genders;
    bool m_GendersIsSet;
    std::vector<org::openapitools::server::model::AudienceDemographicValue> m_Devices;
    bool m_DevicesIsSet;
    std::vector<org::openapitools::server::model::AudienceDemographicValue> m_Metros;
    bool m_MetrosIsSet;
    std::vector<org::openapitools::server::model::AudienceDemographicValue> m_Countries;
    bool m_CountriesIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* AudienceDemographics_H_ */
