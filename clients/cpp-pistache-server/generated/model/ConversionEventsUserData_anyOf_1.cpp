/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ConversionEventsUserData_anyOf_1.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

ConversionEventsUserData_anyOf_1::ConversionEventsUserData_anyOf_1()
{
    m_EmIsSet = false;
    m_Client_ip_address = "";
    m_Client_ip_addressIsSet = false;
    m_Client_user_agent = "";
    m_Client_user_agentIsSet = false;
    
}

void ConversionEventsUserData_anyOf_1::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool ConversionEventsUserData_anyOf_1::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool ConversionEventsUserData_anyOf_1::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "ConversionEventsUserData_anyOf_1" : pathPrefix;

         
    if (emIsSet())
    {
        const std::vector<std::string>& value = m_Em;
        const std::string currentValuePath = _pathPrefix + ".em";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const std::string& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }

    }
         
    
    /* Hashed_maids */ {
        const std::vector<std::string>& value = m_Hashed_maids;
        const std::string currentValuePath = _pathPrefix + ".hashedMaids";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const std::string& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }

    }
            
    return success;
}

bool ConversionEventsUserData_anyOf_1::operator==(const ConversionEventsUserData_anyOf_1& rhs) const
{
    return
    
    
    
    ((!emIsSet() && !rhs.emIsSet()) || (emIsSet() && rhs.emIsSet() && getEm() == rhs.getEm())) &&
    
    (getHashedMaids() == rhs.getHashedMaids())
     &&
    
    
    ((!clientIpAddressIsSet() && !rhs.clientIpAddressIsSet()) || (clientIpAddressIsSet() && rhs.clientIpAddressIsSet() && getClientIpAddress() == rhs.getClientIpAddress())) &&
    
    
    ((!clientUserAgentIsSet() && !rhs.clientUserAgentIsSet()) || (clientUserAgentIsSet() && rhs.clientUserAgentIsSet() && getClientUserAgent() == rhs.getClientUserAgent()))
    
    ;
}

bool ConversionEventsUserData_anyOf_1::operator!=(const ConversionEventsUserData_anyOf_1& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const ConversionEventsUserData_anyOf_1& o)
{
    j = nlohmann::json::object();
    if(o.emIsSet() || !o.m_Em.empty())
        j["em"] = o.m_Em;
    j["hashed_maids"] = o.m_Hashed_maids;
    if(o.clientIpAddressIsSet())
        j["client_ip_address"] = o.m_Client_ip_address;
    if(o.clientUserAgentIsSet())
        j["client_user_agent"] = o.m_Client_user_agent;
    
}

void from_json(const nlohmann::json& j, ConversionEventsUserData_anyOf_1& o)
{
    if(j.find("em") != j.end())
    {
        j.at("em").get_to(o.m_Em);
        o.m_EmIsSet = true;
    } 
    j.at("hashed_maids").get_to(o.m_Hashed_maids);
    if(j.find("client_ip_address") != j.end())
    {
        j.at("client_ip_address").get_to(o.m_Client_ip_address);
        o.m_Client_ip_addressIsSet = true;
    } 
    if(j.find("client_user_agent") != j.end())
    {
        j.at("client_user_agent").get_to(o.m_Client_user_agent);
        o.m_Client_user_agentIsSet = true;
    } 
    
}

std::vector<std::string> ConversionEventsUserData_anyOf_1::getEm() const
{
    return m_Em;
}
void ConversionEventsUserData_anyOf_1::setEm(std::vector<std::string> const& value)
{
    m_Em = value;
    m_EmIsSet = true;
}
bool ConversionEventsUserData_anyOf_1::emIsSet() const
{
    return m_EmIsSet;
}
void ConversionEventsUserData_anyOf_1::unsetEm()
{
    m_EmIsSet = false;
}
std::vector<std::string> ConversionEventsUserData_anyOf_1::getHashedMaids() const
{
    return m_Hashed_maids;
}
void ConversionEventsUserData_anyOf_1::setHashedMaids(std::vector<std::string> const& value)
{
    m_Hashed_maids = value;
}
std::string ConversionEventsUserData_anyOf_1::getClientIpAddress() const
{
    return m_Client_ip_address;
}
void ConversionEventsUserData_anyOf_1::setClientIpAddress(std::string const& value)
{
    m_Client_ip_address = value;
    m_Client_ip_addressIsSet = true;
}
bool ConversionEventsUserData_anyOf_1::clientIpAddressIsSet() const
{
    return m_Client_ip_addressIsSet;
}
void ConversionEventsUserData_anyOf_1::unsetClient_ip_address()
{
    m_Client_ip_addressIsSet = false;
}
std::string ConversionEventsUserData_anyOf_1::getClientUserAgent() const
{
    return m_Client_user_agent;
}
void ConversionEventsUserData_anyOf_1::setClientUserAgent(std::string const& value)
{
    m_Client_user_agent = value;
    m_Client_user_agentIsSet = true;
}
bool ConversionEventsUserData_anyOf_1::clientUserAgentIsSet() const
{
    return m_Client_user_agentIsSet;
}
void ConversionEventsUserData_anyOf_1::unsetClient_user_agent()
{
    m_Client_user_agentIsSet = false;
}


} // namespace org::openapitools::server::model

