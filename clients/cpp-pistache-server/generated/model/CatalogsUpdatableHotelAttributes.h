/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * CatalogsUpdatableHotelAttributes.h
 *
 * 
 */

#ifndef CatalogsUpdatableHotelAttributes_H_
#define CatalogsUpdatableHotelAttributes_H_


#include "CatalogsHotelGuestRatings.h"
#include "CatalogsHotelAddress.h"
#include <string>
#include <vector>
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// 
/// </summary>
class  CatalogsUpdatableHotelAttributes
{
public:
    CatalogsUpdatableHotelAttributes();
    virtual ~CatalogsUpdatableHotelAttributes() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const CatalogsUpdatableHotelAttributes& rhs) const;
    bool operator!=(const CatalogsUpdatableHotelAttributes& rhs) const;

    /////////////////////////////////////////////
    /// CatalogsUpdatableHotelAttributes members

    /// <summary>
    /// The hotel&#39;s name.
    /// </summary>
    std::string getName() const;
    void setName(std::string const& value);
    bool nameIsSet() const;
    void unsetName();
    /// <summary>
    /// Link to the product page
    /// </summary>
    std::string getLink() const;
    void setLink(std::string const& value);
    bool linkIsSet() const;
    void unsetLink();
    /// <summary>
    /// Brief description of the hotel.
    /// </summary>
    std::string getDescription() const;
    void setDescription(std::string const& value);
    bool descriptionIsSet() const;
    void unsetDescription();
    /// <summary>
    /// The brand to which this hotel belongs to.
    /// </summary>
    std::string getBrand() const;
    void setBrand(std::string const& value);
    bool brandIsSet() const;
    void unsetBrand();
    /// <summary>
    /// Latitude of the hotel.
    /// </summary>
    double getLatitude() const;
    void setLatitude(double const value);
    bool latitudeIsSet() const;
    void unsetLatitude();
    /// <summary>
    /// Longitude of the hotel.
    /// </summary>
    double getLongitude() const;
    void setLongitude(double const value);
    bool longitudeIsSet() const;
    void unsetLongitude();
    /// <summary>
    /// A list of neighborhoods where the hotel is located
    /// </summary>
    std::vector<std::string> getNeighborhood() const;
    void setNeighborhood(std::vector<std::string> const& value);
    bool neighborhoodIsSet() const;
    void unsetNeighborhood();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::CatalogsHotelAddress getAddress() const;
    void setAddress(org::openapitools::server::model::CatalogsHotelAddress const& value);
    bool addressIsSet() const;
    void unsetAddress();
    /// <summary>
    /// Custom grouping of hotels
    /// </summary>
    std::string getCustomLabel0() const;
    void setCustomLabel0(std::string const& value);
    bool customLabel0IsSet() const;
    void unsetCustom_label_0();
    /// <summary>
    /// Custom grouping of hotels
    /// </summary>
    std::string getCustomLabel1() const;
    void setCustomLabel1(std::string const& value);
    bool customLabel1IsSet() const;
    void unsetCustom_label_1();
    /// <summary>
    /// Custom grouping of hotels
    /// </summary>
    std::string getCustomLabel2() const;
    void setCustomLabel2(std::string const& value);
    bool customLabel2IsSet() const;
    void unsetCustom_label_2();
    /// <summary>
    /// Custom grouping of hotels
    /// </summary>
    std::string getCustomLabel3() const;
    void setCustomLabel3(std::string const& value);
    bool customLabel3IsSet() const;
    void unsetCustom_label_3();
    /// <summary>
    /// Custom grouping of hotels
    /// </summary>
    std::string getCustomLabel4() const;
    void setCustomLabel4(std::string const& value);
    bool customLabel4IsSet() const;
    void unsetCustom_label_4();
    /// <summary>
    /// The type of property. The category can be any type of internal description desired.
    /// </summary>
    std::string getCategory() const;
    void setCategory(std::string const& value);
    bool categoryIsSet() const;
    void unsetCategory();
    /// <summary>
    /// Base price of the hotel room per night followed by the ISO currency code
    /// </summary>
    std::string getBasePrice() const;
    void setBasePrice(std::string const& value);
    bool basePriceIsSet() const;
    void unsetBase_price();
    /// <summary>
    /// Sale price of a hotel room per night. Used to advertise discounts off the regular price of the hotel.
    /// </summary>
    std::string getSalePrice() const;
    void setSalePrice(std::string const& value);
    bool salePriceIsSet() const;
    void unsetSale_price();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::CatalogsHotelGuestRatings getGuestRatings() const;
    void setGuestRatings(org::openapitools::server::model::CatalogsHotelGuestRatings const& value);
    bool guestRatingsIsSet() const;
    void unsetGuest_ratings();

    friend  void to_json(nlohmann::json& j, const CatalogsUpdatableHotelAttributes& o);
    friend  void from_json(const nlohmann::json& j, CatalogsUpdatableHotelAttributes& o);
protected:
    std::string m_Name;
    bool m_NameIsSet;
    std::string m_Link;
    bool m_LinkIsSet;
    std::string m_Description;
    bool m_DescriptionIsSet;
    std::string m_Brand;
    bool m_BrandIsSet;
    double m_Latitude;
    bool m_LatitudeIsSet;
    double m_Longitude;
    bool m_LongitudeIsSet;
    std::vector<std::string> m_Neighborhood;
    bool m_NeighborhoodIsSet;
    org::openapitools::server::model::CatalogsHotelAddress m_Address;
    bool m_AddressIsSet;
    std::string m_Custom_label_0;
    bool m_Custom_label_0IsSet;
    std::string m_Custom_label_1;
    bool m_Custom_label_1IsSet;
    std::string m_Custom_label_2;
    bool m_Custom_label_2IsSet;
    std::string m_Custom_label_3;
    bool m_Custom_label_3IsSet;
    std::string m_Custom_label_4;
    bool m_Custom_label_4IsSet;
    std::string m_Category;
    bool m_CategoryIsSet;
    std::string m_Base_price;
    bool m_Base_priceIsSet;
    std::string m_Sale_price;
    bool m_Sale_priceIsSet;
    org::openapitools::server::model::CatalogsHotelGuestRatings m_Guest_ratings;
    bool m_Guest_ratingsIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* CatalogsUpdatableHotelAttributes_H_ */
