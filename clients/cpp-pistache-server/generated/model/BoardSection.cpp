/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "BoardSection.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

BoardSection::BoardSection()
{
    m_Id = "";
    m_IdIsSet = false;
    m_Name = "";
    
}

void BoardSection::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool BoardSection::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool BoardSection::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "BoardSection" : pathPrefix;

             
    
    /* Name */ {
        const std::string& value = m_Name;
        const std::string currentValuePath = _pathPrefix + ".name";
                
        
        if (value.length() < 1)
        {
            success = false;
            msg << currentValuePath << ": must be at least 1 characters long;";
        }
        if (value.length() > 180)
        {
            success = false;
            msg << currentValuePath << ": must be at most 180 characters long;";
        }

    }
    
    return success;
}

bool BoardSection::operator==(const BoardSection& rhs) const
{
    return
    
    
    
    ((!idIsSet() && !rhs.idIsSet()) || (idIsSet() && rhs.idIsSet() && getId() == rhs.getId())) &&
    
    (getName() == rhs.getName())
    
    
    ;
}

bool BoardSection::operator!=(const BoardSection& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const BoardSection& o)
{
    j = nlohmann::json::object();
    if(o.idIsSet())
        j["id"] = o.m_Id;
    j["name"] = o.m_Name;
    
}

void from_json(const nlohmann::json& j, BoardSection& o)
{
    if(j.find("id") != j.end())
    {
        j.at("id").get_to(o.m_Id);
        o.m_IdIsSet = true;
    } 
    j.at("name").get_to(o.m_Name);
    
}

std::string BoardSection::getId() const
{
    return m_Id;
}
void BoardSection::setId(std::string const& value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool BoardSection::idIsSet() const
{
    return m_IdIsSet;
}
void BoardSection::unsetId()
{
    m_IdIsSet = false;
}
std::string BoardSection::getName() const
{
    return m_Name;
}
void BoardSection::setName(std::string const& value)
{
    m_Name = value;
}


} // namespace org::openapitools::server::model

