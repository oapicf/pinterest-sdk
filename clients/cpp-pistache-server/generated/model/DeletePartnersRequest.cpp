/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "DeletePartnersRequest.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

DeletePartnersRequest::DeletePartnersRequest()
{
    m_Partner_type = "";
    m_Partner_typeIsSet = false;
    
}

void DeletePartnersRequest::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool DeletePartnersRequest::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool DeletePartnersRequest::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "DeletePartnersRequest" : pathPrefix;

         
    
    /* Partner_ids */ {
        const std::vector<std::string>& value = m_Partner_ids;
        const std::string currentValuePath = _pathPrefix + ".partnerIds";
                
        
        if (value.size() < 1)
        {
            success = false;
            msg << currentValuePath << ": must have at least 1 elements;";
        }
        if (value.size() > 50)
        {
            success = false;
            msg << currentValuePath << ": must have at most 50 elements;";
        }
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const std::string& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
        if (value.length() > 22)
        {
            success = false;
            msg << currentValuePath << ": must be at most 22 characters long;";
        }
 
                i++;
            }
        }

    }
        
    return success;
}

bool DeletePartnersRequest::operator==(const DeletePartnersRequest& rhs) const
{
    return
    
    
    (getPartnerIds() == rhs.getPartnerIds())
     &&
    
    
    ((!partnerTypeIsSet() && !rhs.partnerTypeIsSet()) || (partnerTypeIsSet() && rhs.partnerTypeIsSet() && getPartnerType() == rhs.getPartnerType()))
    
    ;
}

bool DeletePartnersRequest::operator!=(const DeletePartnersRequest& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const DeletePartnersRequest& o)
{
    j = nlohmann::json::object();
    j["partner_ids"] = o.m_Partner_ids;
    if(o.partnerTypeIsSet())
        j["partner_type"] = o.m_Partner_type;
    
}

void from_json(const nlohmann::json& j, DeletePartnersRequest& o)
{
    j.at("partner_ids").get_to(o.m_Partner_ids);
    if(j.find("partner_type") != j.end())
    {
        j.at("partner_type").get_to(o.m_Partner_type);
        o.m_Partner_typeIsSet = true;
    } 
    
}

std::vector<std::string> DeletePartnersRequest::getPartnerIds() const
{
    return m_Partner_ids;
}
void DeletePartnersRequest::setPartnerIds(std::vector<std::string> const& value)
{
    m_Partner_ids = value;
}
std::string DeletePartnersRequest::getPartnerType() const
{
    return m_Partner_type;
}
void DeletePartnersRequest::setPartnerType(std::string const& value)
{
    m_Partner_type = value;
    m_Partner_typeIsSet = true;
}
bool DeletePartnersRequest::partnerTypeIsSet() const
{
    return m_Partner_typeIsSet;
}
void DeletePartnersRequest::unsetPartner_type()
{
    m_Partner_typeIsSet = false;
}


} // namespace org::openapitools::server::model

