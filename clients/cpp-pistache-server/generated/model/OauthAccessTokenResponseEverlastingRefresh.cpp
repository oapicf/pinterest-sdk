/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "OauthAccessTokenResponseEverlastingRefresh.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

OauthAccessTokenResponseEverlastingRefresh::OauthAccessTokenResponseEverlastingRefresh()
{
    m_Response_type = "";
    m_Response_typeIsSet = false;
    m_Access_token = "";
    m_Token_type = "bearer";
    m_Expires_in = 0;
    m_Scope = "";
    m_Refresh_token = "";
    m_Refresh_token_expires_in = 0;
    m_Refresh_token_expires_at = 0;
    
}

void OauthAccessTokenResponseEverlastingRefresh::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool OauthAccessTokenResponseEverlastingRefresh::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool OauthAccessTokenResponseEverlastingRefresh::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "OauthAccessTokenResponseEverlastingRefresh" : pathPrefix;

                                    
    return success;
}

bool OauthAccessTokenResponseEverlastingRefresh::operator==(const OauthAccessTokenResponseEverlastingRefresh& rhs) const
{
    return
    
    
    
    ((!responseTypeIsSet() && !rhs.responseTypeIsSet()) || (responseTypeIsSet() && rhs.responseTypeIsSet() && getResponseType() == rhs.getResponseType())) &&
    
    (getAccessToken() == rhs.getAccessToken())
     &&
    
    (getTokenType() == rhs.getTokenType())
     &&
    
    (getExpiresIn() == rhs.getExpiresIn())
     &&
    
    (getScope() == rhs.getScope())
     &&
    
    (getRefreshToken() == rhs.getRefreshToken())
     &&
    
    (getRefreshTokenExpiresIn() == rhs.getRefreshTokenExpiresIn())
     &&
    
    (getRefreshTokenExpiresAt() == rhs.getRefreshTokenExpiresAt())
    
    
    ;
}

bool OauthAccessTokenResponseEverlastingRefresh::operator!=(const OauthAccessTokenResponseEverlastingRefresh& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const OauthAccessTokenResponseEverlastingRefresh& o)
{
    j = nlohmann::json::object();
    if(o.responseTypeIsSet())
        j["response_type"] = o.m_Response_type;
    j["access_token"] = o.m_Access_token;
    j["token_type"] = o.m_Token_type;
    j["expires_in"] = o.m_Expires_in;
    j["scope"] = o.m_Scope;
    j["refresh_token"] = o.m_Refresh_token;
    j["refresh_token_expires_in"] = o.m_Refresh_token_expires_in;
    j["refresh_token_expires_at"] = o.m_Refresh_token_expires_at;
    
}

void from_json(const nlohmann::json& j, OauthAccessTokenResponseEverlastingRefresh& o)
{
    if(j.find("response_type") != j.end())
    {
        j.at("response_type").get_to(o.m_Response_type);
        o.m_Response_typeIsSet = true;
    } 
    j.at("access_token").get_to(o.m_Access_token);
    j.at("token_type").get_to(o.m_Token_type);
    j.at("expires_in").get_to(o.m_Expires_in);
    j.at("scope").get_to(o.m_Scope);
    j.at("refresh_token").get_to(o.m_Refresh_token);
    j.at("refresh_token_expires_in").get_to(o.m_Refresh_token_expires_in);
    j.at("refresh_token_expires_at").get_to(o.m_Refresh_token_expires_at);
    
}

std::string OauthAccessTokenResponseEverlastingRefresh::getResponseType() const
{
    return m_Response_type;
}
void OauthAccessTokenResponseEverlastingRefresh::setResponseType(std::string const& value)
{
    m_Response_type = value;
    m_Response_typeIsSet = true;
}
bool OauthAccessTokenResponseEverlastingRefresh::responseTypeIsSet() const
{
    return m_Response_typeIsSet;
}
void OauthAccessTokenResponseEverlastingRefresh::unsetResponse_type()
{
    m_Response_typeIsSet = false;
}
std::string OauthAccessTokenResponseEverlastingRefresh::getAccessToken() const
{
    return m_Access_token;
}
void OauthAccessTokenResponseEverlastingRefresh::setAccessToken(std::string const& value)
{
    m_Access_token = value;
}
std::string OauthAccessTokenResponseEverlastingRefresh::getTokenType() const
{
    return m_Token_type;
}
void OauthAccessTokenResponseEverlastingRefresh::setTokenType(std::string const& value)
{
    m_Token_type = value;
}
int32_t OauthAccessTokenResponseEverlastingRefresh::getExpiresIn() const
{
    return m_Expires_in;
}
void OauthAccessTokenResponseEverlastingRefresh::setExpiresIn(int32_t const value)
{
    m_Expires_in = value;
}
std::string OauthAccessTokenResponseEverlastingRefresh::getScope() const
{
    return m_Scope;
}
void OauthAccessTokenResponseEverlastingRefresh::setScope(std::string const& value)
{
    m_Scope = value;
}
std::string OauthAccessTokenResponseEverlastingRefresh::getRefreshToken() const
{
    return m_Refresh_token;
}
void OauthAccessTokenResponseEverlastingRefresh::setRefreshToken(std::string const& value)
{
    m_Refresh_token = value;
}
int32_t OauthAccessTokenResponseEverlastingRefresh::getRefreshTokenExpiresIn() const
{
    return m_Refresh_token_expires_in;
}
void OauthAccessTokenResponseEverlastingRefresh::setRefreshTokenExpiresIn(int32_t const value)
{
    m_Refresh_token_expires_in = value;
}
int32_t OauthAccessTokenResponseEverlastingRefresh::getRefreshTokenExpiresAt() const
{
    return m_Refresh_token_expires_at;
}
void OauthAccessTokenResponseEverlastingRefresh::setRefreshTokenExpiresAt(int32_t const value)
{
    m_Refresh_token_expires_at = value;
}


} // namespace org::openapitools::server::model

