/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "CatalogsHotelProductGroup.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

CatalogsHotelProductGroup::CatalogsHotelProductGroup()
{
    m_Catalog_type = "";
    m_Id = "";
    m_Name = "";
    m_NameIsSet = false;
    m_Description = "";
    m_DescriptionIsSet = false;
    m_Created_at = 0;
    m_Created_atIsSet = false;
    m_Updated_at = 0;
    m_Updated_atIsSet = false;
    m_Catalog_id = "";
    
}

void CatalogsHotelProductGroup::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool CatalogsHotelProductGroup::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool CatalogsHotelProductGroup::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "CatalogsHotelProductGroup" : pathPrefix;

             
    
    /* Id */ {
        const std::string& value = m_Id;
        const std::string currentValuePath = _pathPrefix + ".id";
                
        

    }
                
    if (!m_Filters.validate(msg, _pathPrefix + ".filters")) {
        msg << _pathPrefix << ": Filters is invalid;";
        success = false;
    }             
    
    /* Catalog_id */ {
        const std::string& value = m_Catalog_id;
        const std::string currentValuePath = _pathPrefix + ".catalogId";
                
        

    }
    
    return success;
}

bool CatalogsHotelProductGroup::operator==(const CatalogsHotelProductGroup& rhs) const
{
    return
    
    
    (getCatalogType() == rhs.getCatalogType())
     &&
    
    (getId() == rhs.getId())
     &&
    
    
    ((!nameIsSet() && !rhs.nameIsSet()) || (nameIsSet() && rhs.nameIsSet() && getName() == rhs.getName())) &&
    
    
    ((!descriptionIsSet() && !rhs.descriptionIsSet()) || (descriptionIsSet() && rhs.descriptionIsSet() && getDescription() == rhs.getDescription())) &&
    
    (getFilters() == rhs.getFilters())
     &&
    
    
    ((!createdAtIsSet() && !rhs.createdAtIsSet()) || (createdAtIsSet() && rhs.createdAtIsSet() && getCreatedAt() == rhs.getCreatedAt())) &&
    
    
    ((!updatedAtIsSet() && !rhs.updatedAtIsSet()) || (updatedAtIsSet() && rhs.updatedAtIsSet() && getUpdatedAt() == rhs.getUpdatedAt())) &&
    
    (getCatalogId() == rhs.getCatalogId())
    
    
    ;
}

bool CatalogsHotelProductGroup::operator!=(const CatalogsHotelProductGroup& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const CatalogsHotelProductGroup& o)
{
    j = nlohmann::json::object();
    j["catalog_type"] = o.m_Catalog_type;
    j["id"] = o.m_Id;
    if(o.nameIsSet())
        j["name"] = o.m_Name;
    if(o.descriptionIsSet())
        j["description"] = o.m_Description;
    j["filters"] = o.m_Filters;
    if(o.createdAtIsSet())
        j["created_at"] = o.m_Created_at;
    if(o.updatedAtIsSet())
        j["updated_at"] = o.m_Updated_at;
    j["catalog_id"] = o.m_Catalog_id;
    
}

void from_json(const nlohmann::json& j, CatalogsHotelProductGroup& o)
{
    j.at("catalog_type").get_to(o.m_Catalog_type);
    j.at("id").get_to(o.m_Id);
    if(j.find("name") != j.end())
    {
        j.at("name").get_to(o.m_Name);
        o.m_NameIsSet = true;
    } 
    if(j.find("description") != j.end())
    {
        j.at("description").get_to(o.m_Description);
        o.m_DescriptionIsSet = true;
    } 
    j.at("filters").get_to(o.m_Filters);
    if(j.find("created_at") != j.end())
    {
        j.at("created_at").get_to(o.m_Created_at);
        o.m_Created_atIsSet = true;
    } 
    if(j.find("updated_at") != j.end())
    {
        j.at("updated_at").get_to(o.m_Updated_at);
        o.m_Updated_atIsSet = true;
    } 
    j.at("catalog_id").get_to(o.m_Catalog_id);
    
}

std::string CatalogsHotelProductGroup::getCatalogType() const
{
    return m_Catalog_type;
}
void CatalogsHotelProductGroup::setCatalogType(std::string const& value)
{
    m_Catalog_type = value;
}
std::string CatalogsHotelProductGroup::getId() const
{
    return m_Id;
}
void CatalogsHotelProductGroup::setId(std::string const& value)
{
    m_Id = value;
}
std::string CatalogsHotelProductGroup::getName() const
{
    return m_Name;
}
void CatalogsHotelProductGroup::setName(std::string const& value)
{
    m_Name = value;
    m_NameIsSet = true;
}
bool CatalogsHotelProductGroup::nameIsSet() const
{
    return m_NameIsSet;
}
void CatalogsHotelProductGroup::unsetName()
{
    m_NameIsSet = false;
}
std::string CatalogsHotelProductGroup::getDescription() const
{
    return m_Description;
}
void CatalogsHotelProductGroup::setDescription(std::string const& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}
bool CatalogsHotelProductGroup::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}
void CatalogsHotelProductGroup::unsetDescription()
{
    m_DescriptionIsSet = false;
}
org::openapitools::server::model::CatalogsHotelProductGroupFilters CatalogsHotelProductGroup::getFilters() const
{
    return m_Filters;
}
void CatalogsHotelProductGroup::setFilters(org::openapitools::server::model::CatalogsHotelProductGroupFilters const& value)
{
    m_Filters = value;
}
int32_t CatalogsHotelProductGroup::getCreatedAt() const
{
    return m_Created_at;
}
void CatalogsHotelProductGroup::setCreatedAt(int32_t const value)
{
    m_Created_at = value;
    m_Created_atIsSet = true;
}
bool CatalogsHotelProductGroup::createdAtIsSet() const
{
    return m_Created_atIsSet;
}
void CatalogsHotelProductGroup::unsetCreated_at()
{
    m_Created_atIsSet = false;
}
int32_t CatalogsHotelProductGroup::getUpdatedAt() const
{
    return m_Updated_at;
}
void CatalogsHotelProductGroup::setUpdatedAt(int32_t const value)
{
    m_Updated_at = value;
    m_Updated_atIsSet = true;
}
bool CatalogsHotelProductGroup::updatedAtIsSet() const
{
    return m_Updated_atIsSet;
}
void CatalogsHotelProductGroup::unsetUpdated_at()
{
    m_Updated_atIsSet = false;
}
std::string CatalogsHotelProductGroup::getCatalogId() const
{
    return m_Catalog_id;
}
void CatalogsHotelProductGroup::setCatalogId(std::string const& value)
{
    m_Catalog_id = value;
}


} // namespace org::openapitools::server::model

