/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "AdAccountGetSubscriptionResponse.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

AdAccountGetSubscriptionResponse::AdAccountGetSubscriptionResponse()
{
    m_Lead_form_id = "";
    m_Lead_form_idIsSet = false;
    m_Webhook_url = "";
    m_Webhook_urlIsSet = false;
    m_Id = "";
    m_IdIsSet = false;
    m_User_account_id = "";
    m_User_account_idIsSet = false;
    m_Ad_account_id = "";
    m_Ad_account_idIsSet = false;
    m_Api_version = "";
    m_Api_versionIsSet = false;
    m_Cryptographic_key = "";
    m_Cryptographic_keyIsSet = false;
    m_Cryptographic_algorithm = "";
    m_Cryptographic_algorithmIsSet = false;
    m_Created_time = 0;
    m_Created_timeIsSet = false;
    
}

void AdAccountGetSubscriptionResponse::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool AdAccountGetSubscriptionResponse::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool AdAccountGetSubscriptionResponse::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "AdAccountGetSubscriptionResponse" : pathPrefix;

         
    if (leadFormIdIsSet())
    {
        const std::string& value = m_Lead_form_id;
        const std::string currentValuePath = _pathPrefix + ".leadFormId";
                
        

    }
             
    if (idIsSet())
    {
        const std::string& value = m_Id;
        const std::string currentValuePath = _pathPrefix + ".id";
                
        

    }
         
    if (userAccountIdIsSet())
    {
        const std::string& value = m_User_account_id;
        const std::string currentValuePath = _pathPrefix + ".userAccountId";
                
        

    }
         
    if (adAccountIdIsSet())
    {
        const std::string& value = m_Ad_account_id;
        const std::string currentValuePath = _pathPrefix + ".adAccountId";
                
        

    }
                    
    return success;
}

bool AdAccountGetSubscriptionResponse::operator==(const AdAccountGetSubscriptionResponse& rhs) const
{
    return
    
    
    
    ((!leadFormIdIsSet() && !rhs.leadFormIdIsSet()) || (leadFormIdIsSet() && rhs.leadFormIdIsSet() && getLeadFormId() == rhs.getLeadFormId())) &&
    
    
    ((!webhookUrlIsSet() && !rhs.webhookUrlIsSet()) || (webhookUrlIsSet() && rhs.webhookUrlIsSet() && getWebhookUrl() == rhs.getWebhookUrl())) &&
    
    
    ((!idIsSet() && !rhs.idIsSet()) || (idIsSet() && rhs.idIsSet() && getId() == rhs.getId())) &&
    
    
    ((!userAccountIdIsSet() && !rhs.userAccountIdIsSet()) || (userAccountIdIsSet() && rhs.userAccountIdIsSet() && getUserAccountId() == rhs.getUserAccountId())) &&
    
    
    ((!adAccountIdIsSet() && !rhs.adAccountIdIsSet()) || (adAccountIdIsSet() && rhs.adAccountIdIsSet() && getAdAccountId() == rhs.getAdAccountId())) &&
    
    
    ((!apiVersionIsSet() && !rhs.apiVersionIsSet()) || (apiVersionIsSet() && rhs.apiVersionIsSet() && getApiVersion() == rhs.getApiVersion())) &&
    
    
    ((!cryptographicKeyIsSet() && !rhs.cryptographicKeyIsSet()) || (cryptographicKeyIsSet() && rhs.cryptographicKeyIsSet() && getCryptographicKey() == rhs.getCryptographicKey())) &&
    
    
    ((!cryptographicAlgorithmIsSet() && !rhs.cryptographicAlgorithmIsSet()) || (cryptographicAlgorithmIsSet() && rhs.cryptographicAlgorithmIsSet() && getCryptographicAlgorithm() == rhs.getCryptographicAlgorithm())) &&
    
    
    ((!createdTimeIsSet() && !rhs.createdTimeIsSet()) || (createdTimeIsSet() && rhs.createdTimeIsSet() && getCreatedTime() == rhs.getCreatedTime()))
    
    ;
}

bool AdAccountGetSubscriptionResponse::operator!=(const AdAccountGetSubscriptionResponse& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const AdAccountGetSubscriptionResponse& o)
{
    j = nlohmann::json::object();
    if(o.leadFormIdIsSet())
        j["lead_form_id"] = o.m_Lead_form_id;
    if(o.webhookUrlIsSet())
        j["webhook_url"] = o.m_Webhook_url;
    if(o.idIsSet())
        j["id"] = o.m_Id;
    if(o.userAccountIdIsSet())
        j["user_account_id"] = o.m_User_account_id;
    if(o.adAccountIdIsSet())
        j["ad_account_id"] = o.m_Ad_account_id;
    if(o.apiVersionIsSet())
        j["api_version"] = o.m_Api_version;
    if(o.cryptographicKeyIsSet())
        j["cryptographic_key"] = o.m_Cryptographic_key;
    if(o.cryptographicAlgorithmIsSet())
        j["cryptographic_algorithm"] = o.m_Cryptographic_algorithm;
    if(o.createdTimeIsSet())
        j["created_time"] = o.m_Created_time;
    
}

void from_json(const nlohmann::json& j, AdAccountGetSubscriptionResponse& o)
{
    if(j.find("lead_form_id") != j.end())
    {
        j.at("lead_form_id").get_to(o.m_Lead_form_id);
        o.m_Lead_form_idIsSet = true;
    } 
    if(j.find("webhook_url") != j.end())
    {
        j.at("webhook_url").get_to(o.m_Webhook_url);
        o.m_Webhook_urlIsSet = true;
    } 
    if(j.find("id") != j.end())
    {
        j.at("id").get_to(o.m_Id);
        o.m_IdIsSet = true;
    } 
    if(j.find("user_account_id") != j.end())
    {
        j.at("user_account_id").get_to(o.m_User_account_id);
        o.m_User_account_idIsSet = true;
    } 
    if(j.find("ad_account_id") != j.end())
    {
        j.at("ad_account_id").get_to(o.m_Ad_account_id);
        o.m_Ad_account_idIsSet = true;
    } 
    if(j.find("api_version") != j.end())
    {
        j.at("api_version").get_to(o.m_Api_version);
        o.m_Api_versionIsSet = true;
    } 
    if(j.find("cryptographic_key") != j.end())
    {
        j.at("cryptographic_key").get_to(o.m_Cryptographic_key);
        o.m_Cryptographic_keyIsSet = true;
    } 
    if(j.find("cryptographic_algorithm") != j.end())
    {
        j.at("cryptographic_algorithm").get_to(o.m_Cryptographic_algorithm);
        o.m_Cryptographic_algorithmIsSet = true;
    } 
    if(j.find("created_time") != j.end())
    {
        j.at("created_time").get_to(o.m_Created_time);
        o.m_Created_timeIsSet = true;
    } 
    
}

std::string AdAccountGetSubscriptionResponse::getLeadFormId() const
{
    return m_Lead_form_id;
}
void AdAccountGetSubscriptionResponse::setLeadFormId(std::string const& value)
{
    m_Lead_form_id = value;
    m_Lead_form_idIsSet = true;
}
bool AdAccountGetSubscriptionResponse::leadFormIdIsSet() const
{
    return m_Lead_form_idIsSet;
}
void AdAccountGetSubscriptionResponse::unsetLead_form_id()
{
    m_Lead_form_idIsSet = false;
}
std::string AdAccountGetSubscriptionResponse::getWebhookUrl() const
{
    return m_Webhook_url;
}
void AdAccountGetSubscriptionResponse::setWebhookUrl(std::string const& value)
{
    m_Webhook_url = value;
    m_Webhook_urlIsSet = true;
}
bool AdAccountGetSubscriptionResponse::webhookUrlIsSet() const
{
    return m_Webhook_urlIsSet;
}
void AdAccountGetSubscriptionResponse::unsetWebhook_url()
{
    m_Webhook_urlIsSet = false;
}
std::string AdAccountGetSubscriptionResponse::getId() const
{
    return m_Id;
}
void AdAccountGetSubscriptionResponse::setId(std::string const& value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool AdAccountGetSubscriptionResponse::idIsSet() const
{
    return m_IdIsSet;
}
void AdAccountGetSubscriptionResponse::unsetId()
{
    m_IdIsSet = false;
}
std::string AdAccountGetSubscriptionResponse::getUserAccountId() const
{
    return m_User_account_id;
}
void AdAccountGetSubscriptionResponse::setUserAccountId(std::string const& value)
{
    m_User_account_id = value;
    m_User_account_idIsSet = true;
}
bool AdAccountGetSubscriptionResponse::userAccountIdIsSet() const
{
    return m_User_account_idIsSet;
}
void AdAccountGetSubscriptionResponse::unsetUser_account_id()
{
    m_User_account_idIsSet = false;
}
std::string AdAccountGetSubscriptionResponse::getAdAccountId() const
{
    return m_Ad_account_id;
}
void AdAccountGetSubscriptionResponse::setAdAccountId(std::string const& value)
{
    m_Ad_account_id = value;
    m_Ad_account_idIsSet = true;
}
bool AdAccountGetSubscriptionResponse::adAccountIdIsSet() const
{
    return m_Ad_account_idIsSet;
}
void AdAccountGetSubscriptionResponse::unsetAd_account_id()
{
    m_Ad_account_idIsSet = false;
}
std::string AdAccountGetSubscriptionResponse::getApiVersion() const
{
    return m_Api_version;
}
void AdAccountGetSubscriptionResponse::setApiVersion(std::string const& value)
{
    m_Api_version = value;
    m_Api_versionIsSet = true;
}
bool AdAccountGetSubscriptionResponse::apiVersionIsSet() const
{
    return m_Api_versionIsSet;
}
void AdAccountGetSubscriptionResponse::unsetApi_version()
{
    m_Api_versionIsSet = false;
}
std::string AdAccountGetSubscriptionResponse::getCryptographicKey() const
{
    return m_Cryptographic_key;
}
void AdAccountGetSubscriptionResponse::setCryptographicKey(std::string const& value)
{
    m_Cryptographic_key = value;
    m_Cryptographic_keyIsSet = true;
}
bool AdAccountGetSubscriptionResponse::cryptographicKeyIsSet() const
{
    return m_Cryptographic_keyIsSet;
}
void AdAccountGetSubscriptionResponse::unsetCryptographic_key()
{
    m_Cryptographic_keyIsSet = false;
}
std::string AdAccountGetSubscriptionResponse::getCryptographicAlgorithm() const
{
    return m_Cryptographic_algorithm;
}
void AdAccountGetSubscriptionResponse::setCryptographicAlgorithm(std::string const& value)
{
    m_Cryptographic_algorithm = value;
    m_Cryptographic_algorithmIsSet = true;
}
bool AdAccountGetSubscriptionResponse::cryptographicAlgorithmIsSet() const
{
    return m_Cryptographic_algorithmIsSet;
}
void AdAccountGetSubscriptionResponse::unsetCryptographic_algorithm()
{
    m_Cryptographic_algorithmIsSet = false;
}
int32_t AdAccountGetSubscriptionResponse::getCreatedTime() const
{
    return m_Created_time;
}
void AdAccountGetSubscriptionResponse::setCreatedTime(int32_t const value)
{
    m_Created_time = value;
    m_Created_timeIsSet = true;
}
bool AdAccountGetSubscriptionResponse::createdTimeIsSet() const
{
    return m_Created_timeIsSet;
}
void AdAccountGetSubscriptionResponse::unsetCreated_time()
{
    m_Created_timeIsSet = false;
}


} // namespace org::openapitools::server::model

