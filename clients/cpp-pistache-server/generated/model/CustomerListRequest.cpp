/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "CustomerListRequest.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

CustomerListRequest::CustomerListRequest()
{
    m_Name = "";
    m_Records = "";
    m_List_typeIsSet = false;
    m_ExceptionsIsSet = false;
    
}

void CustomerListRequest::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool CustomerListRequest::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool CustomerListRequest::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "CustomerListRequest" : pathPrefix;

                    
    return success;
}

bool CustomerListRequest::operator==(const CustomerListRequest& rhs) const
{
    return
    
    
    (getName() == rhs.getName())
     &&
    
    (getRecords() == rhs.getRecords())
     &&
    
    
    ((!listTypeIsSet() && !rhs.listTypeIsSet()) || (listTypeIsSet() && rhs.listTypeIsSet() && getListType() == rhs.getListType())) &&
    
    
    ((!exceptionsIsSet() && !rhs.exceptionsIsSet()) || (exceptionsIsSet() && rhs.exceptionsIsSet() && getExceptions() == rhs.getExceptions()))
    
    ;
}

bool CustomerListRequest::operator!=(const CustomerListRequest& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const CustomerListRequest& o)
{
    j = nlohmann::json::object();
    j["name"] = o.m_Name;
    j["records"] = o.m_Records;
    if(o.listTypeIsSet())
        j["list_type"] = o.m_List_type;
    if(o.exceptionsIsSet())
        j["exceptions"] = o.m_Exceptions;
    
}

void from_json(const nlohmann::json& j, CustomerListRequest& o)
{
    j.at("name").get_to(o.m_Name);
    j.at("records").get_to(o.m_Records);
    if(j.find("list_type") != j.end())
    {
        j.at("list_type").get_to(o.m_List_type);
        o.m_List_typeIsSet = true;
    } 
    if(j.find("exceptions") != j.end())
    {
        j.at("exceptions").get_to(o.m_Exceptions);
        o.m_ExceptionsIsSet = true;
    } 
    
}

std::string CustomerListRequest::getName() const
{
    return m_Name;
}
void CustomerListRequest::setName(std::string const& value)
{
    m_Name = value;
}
std::string CustomerListRequest::getRecords() const
{
    return m_Records;
}
void CustomerListRequest::setRecords(std::string const& value)
{
    m_Records = value;
}
org::openapitools::server::model::UserListType CustomerListRequest::getListType() const
{
    return m_List_type;
}
void CustomerListRequest::setListType(org::openapitools::server::model::UserListType const& value)
{
    m_List_type = value;
    m_List_typeIsSet = true;
}
bool CustomerListRequest::listTypeIsSet() const
{
    return m_List_typeIsSet;
}
void CustomerListRequest::unsetList_type()
{
    m_List_typeIsSet = false;
}
nlohmann::json CustomerListRequest::getExceptions() const
{
    return m_Exceptions;
}
void CustomerListRequest::setExceptions(nlohmann::json const& value)
{
    m_Exceptions = value;
    m_ExceptionsIsSet = true;
}
bool CustomerListRequest::exceptionsIsSet() const
{
    return m_ExceptionsIsSet;
}
void CustomerListRequest::unsetExceptions()
{
    m_ExceptionsIsSet = false;
}


} // namespace org::openapitools::server::model

