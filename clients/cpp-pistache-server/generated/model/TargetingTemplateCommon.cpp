/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "TargetingTemplateCommon.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

TargetingTemplateCommon::TargetingTemplateCommon()
{
    m_Name = "";
    m_NameIsSet = false;
    m_Auto_targeting_enabled = true;
    m_Auto_targeting_enabledIsSet = false;
    m_Targeting_attributesIsSet = false;
    m_Placement_groupIsSet = false;
    m_KeywordsIsSet = false;
    m_Tracking_urlsIsSet = false;
    
}

void TargetingTemplateCommon::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool TargetingTemplateCommon::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool TargetingTemplateCommon::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "TargetingTemplateCommon" : pathPrefix;

                         
    if (keywordsIsSet())
    {
        const std::vector<org::openapitools::server::model::TargetingTemplateKeyword>& value = m_Keywords;
        const std::string currentValuePath = _pathPrefix + ".keywords";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::TargetingTemplateKeyword& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".keywords") && success;
 
                i++;
            }
        }

    }
        
    return success;
}

bool TargetingTemplateCommon::operator==(const TargetingTemplateCommon& rhs) const
{
    return
    
    
    
    ((!nameIsSet() && !rhs.nameIsSet()) || (nameIsSet() && rhs.nameIsSet() && getName() == rhs.getName())) &&
    
    
    ((!autoTargetingEnabledIsSet() && !rhs.autoTargetingEnabledIsSet()) || (autoTargetingEnabledIsSet() && rhs.autoTargetingEnabledIsSet() && isAutoTargetingEnabled() == rhs.isAutoTargetingEnabled())) &&
    
    
    ((!targetingAttributesIsSet() && !rhs.targetingAttributesIsSet()) || (targetingAttributesIsSet() && rhs.targetingAttributesIsSet() && getTargetingAttributes() == rhs.getTargetingAttributes())) &&
    
    
    ((!placementGroupIsSet() && !rhs.placementGroupIsSet()) || (placementGroupIsSet() && rhs.placementGroupIsSet() && getPlacementGroup() == rhs.getPlacementGroup())) &&
    
    
    ((!keywordsIsSet() && !rhs.keywordsIsSet()) || (keywordsIsSet() && rhs.keywordsIsSet() && getKeywords() == rhs.getKeywords())) &&
    
    
    ((!trackingUrlsIsSet() && !rhs.trackingUrlsIsSet()) || (trackingUrlsIsSet() && rhs.trackingUrlsIsSet() && getTrackingUrls() == rhs.getTrackingUrls()))
    
    ;
}

bool TargetingTemplateCommon::operator!=(const TargetingTemplateCommon& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const TargetingTemplateCommon& o)
{
    j = nlohmann::json::object();
    if(o.nameIsSet())
        j["name"] = o.m_Name;
    if(o.autoTargetingEnabledIsSet())
        j["auto_targeting_enabled"] = o.m_Auto_targeting_enabled;
    if(o.targetingAttributesIsSet())
        j["targeting_attributes"] = o.m_Targeting_attributes;
    if(o.placementGroupIsSet())
        j["placement_group"] = o.m_Placement_group;
    if(o.keywordsIsSet() || !o.m_Keywords.empty())
        j["keywords"] = o.m_Keywords;
    if(o.trackingUrlsIsSet())
        j["tracking_urls"] = o.m_Tracking_urls;
    
}

void from_json(const nlohmann::json& j, TargetingTemplateCommon& o)
{
    if(j.find("name") != j.end())
    {
        j.at("name").get_to(o.m_Name);
        o.m_NameIsSet = true;
    } 
    if(j.find("auto_targeting_enabled") != j.end())
    {
        j.at("auto_targeting_enabled").get_to(o.m_Auto_targeting_enabled);
        o.m_Auto_targeting_enabledIsSet = true;
    } 
    if(j.find("targeting_attributes") != j.end())
    {
        j.at("targeting_attributes").get_to(o.m_Targeting_attributes);
        o.m_Targeting_attributesIsSet = true;
    } 
    if(j.find("placement_group") != j.end())
    {
        j.at("placement_group").get_to(o.m_Placement_group);
        o.m_Placement_groupIsSet = true;
    } 
    if(j.find("keywords") != j.end())
    {
        j.at("keywords").get_to(o.m_Keywords);
        o.m_KeywordsIsSet = true;
    } 
    if(j.find("tracking_urls") != j.end())
    {
        j.at("tracking_urls").get_to(o.m_Tracking_urls);
        o.m_Tracking_urlsIsSet = true;
    } 
    
}

std::string TargetingTemplateCommon::getName() const
{
    return m_Name;
}
void TargetingTemplateCommon::setName(std::string const& value)
{
    m_Name = value;
    m_NameIsSet = true;
}
bool TargetingTemplateCommon::nameIsSet() const
{
    return m_NameIsSet;
}
void TargetingTemplateCommon::unsetName()
{
    m_NameIsSet = false;
}
bool TargetingTemplateCommon::isAutoTargetingEnabled() const
{
    return m_Auto_targeting_enabled;
}
void TargetingTemplateCommon::setAutoTargetingEnabled(bool const value)
{
    m_Auto_targeting_enabled = value;
    m_Auto_targeting_enabledIsSet = true;
}
bool TargetingTemplateCommon::autoTargetingEnabledIsSet() const
{
    return m_Auto_targeting_enabledIsSet;
}
void TargetingTemplateCommon::unsetAuto_targeting_enabled()
{
    m_Auto_targeting_enabledIsSet = false;
}
org::openapitools::server::model::TargetingSpec TargetingTemplateCommon::getTargetingAttributes() const
{
    return m_Targeting_attributes;
}
void TargetingTemplateCommon::setTargetingAttributes(org::openapitools::server::model::TargetingSpec const& value)
{
    m_Targeting_attributes = value;
    m_Targeting_attributesIsSet = true;
}
bool TargetingTemplateCommon::targetingAttributesIsSet() const
{
    return m_Targeting_attributesIsSet;
}
void TargetingTemplateCommon::unsetTargeting_attributes()
{
    m_Targeting_attributesIsSet = false;
}
org::openapitools::server::model::PlacementGroupType TargetingTemplateCommon::getPlacementGroup() const
{
    return m_Placement_group;
}
void TargetingTemplateCommon::setPlacementGroup(org::openapitools::server::model::PlacementGroupType const& value)
{
    m_Placement_group = value;
    m_Placement_groupIsSet = true;
}
bool TargetingTemplateCommon::placementGroupIsSet() const
{
    return m_Placement_groupIsSet;
}
void TargetingTemplateCommon::unsetPlacement_group()
{
    m_Placement_groupIsSet = false;
}
std::vector<org::openapitools::server::model::TargetingTemplateKeyword> TargetingTemplateCommon::getKeywords() const
{
    return m_Keywords;
}
void TargetingTemplateCommon::setKeywords(std::vector<org::openapitools::server::model::TargetingTemplateKeyword> const& value)
{
    m_Keywords = value;
    m_KeywordsIsSet = true;
}
bool TargetingTemplateCommon::keywordsIsSet() const
{
    return m_KeywordsIsSet;
}
void TargetingTemplateCommon::unsetKeywords()
{
    m_KeywordsIsSet = false;
}
org::openapitools::server::model::TrackingUrls TargetingTemplateCommon::getTrackingUrls() const
{
    return m_Tracking_urls;
}
void TargetingTemplateCommon::setTrackingUrls(org::openapitools::server::model::TrackingUrls const& value)
{
    m_Tracking_urls = value;
    m_Tracking_urlsIsSet = true;
}
bool TargetingTemplateCommon::trackingUrlsIsSet() const
{
    return m_Tracking_urlsIsSet;
}
void TargetingTemplateCommon::unsetTracking_urls()
{
    m_Tracking_urlsIsSet = false;
}


} // namespace org::openapitools::server::model

