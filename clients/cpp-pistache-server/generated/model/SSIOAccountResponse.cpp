/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "SSIOAccountResponse.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

SSIOAccountResponse::SSIOAccountResponse()
{
    m_Eligible = false;
    m_EligibleIsSet = false;
    m_Can_edit = false;
    m_Can_editIsSet = false;
    m_Billto_infosIsSet = false;
    m_Currency = "";
    m_CurrencyIsSet = false;
    m_Pmp_namesIsSet = false;
    m_Error = "";
    m_ErrorIsSet = false;
    
}

void SSIOAccountResponse::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool SSIOAccountResponse::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool SSIOAccountResponse::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "SSIOAccountResponse" : pathPrefix;

                 
    if (billtoInfosIsSet())
    {
        const std::vector<org::openapitools::server::model::SSIOAccountItem>& value = m_Billto_infos;
        const std::string currentValuePath = _pathPrefix + ".billtoInfos";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::SSIOAccountItem& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".billtoInfos") && success;
 
                i++;
            }
        }

    }
             
    if (pmpNamesIsSet())
    {
        const std::vector<org::openapitools::server::model::SSIOAccountPMPName>& value = m_Pmp_names;
        const std::string currentValuePath = _pathPrefix + ".pmpNames";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::SSIOAccountPMPName& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".pmpNames") && success;
 
                i++;
            }
        }

    }
        
    return success;
}

bool SSIOAccountResponse::operator==(const SSIOAccountResponse& rhs) const
{
    return
    
    
    
    ((!eligibleIsSet() && !rhs.eligibleIsSet()) || (eligibleIsSet() && rhs.eligibleIsSet() && isEligible() == rhs.isEligible())) &&
    
    
    ((!canEditIsSet() && !rhs.canEditIsSet()) || (canEditIsSet() && rhs.canEditIsSet() && isCanEdit() == rhs.isCanEdit())) &&
    
    
    ((!billtoInfosIsSet() && !rhs.billtoInfosIsSet()) || (billtoInfosIsSet() && rhs.billtoInfosIsSet() && getBilltoInfos() == rhs.getBilltoInfos())) &&
    
    
    ((!currencyIsSet() && !rhs.currencyIsSet()) || (currencyIsSet() && rhs.currencyIsSet() && getCurrency() == rhs.getCurrency())) &&
    
    
    ((!pmpNamesIsSet() && !rhs.pmpNamesIsSet()) || (pmpNamesIsSet() && rhs.pmpNamesIsSet() && getPmpNames() == rhs.getPmpNames())) &&
    
    
    ((!errorIsSet() && !rhs.errorIsSet()) || (errorIsSet() && rhs.errorIsSet() && getError() == rhs.getError()))
    
    ;
}

bool SSIOAccountResponse::operator!=(const SSIOAccountResponse& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const SSIOAccountResponse& o)
{
    j = nlohmann::json::object();
    if(o.eligibleIsSet())
        j["eligible"] = o.m_Eligible;
    if(o.canEditIsSet())
        j["can_edit"] = o.m_Can_edit;
    if(o.billtoInfosIsSet() || !o.m_Billto_infos.empty())
        j["billto_infos"] = o.m_Billto_infos;
    if(o.currencyIsSet())
        j["currency"] = o.m_Currency;
    if(o.pmpNamesIsSet() || !o.m_Pmp_names.empty())
        j["pmp_names"] = o.m_Pmp_names;
    if(o.errorIsSet())
        j["error"] = o.m_Error;
    
}

void from_json(const nlohmann::json& j, SSIOAccountResponse& o)
{
    if(j.find("eligible") != j.end())
    {
        j.at("eligible").get_to(o.m_Eligible);
        o.m_EligibleIsSet = true;
    } 
    if(j.find("can_edit") != j.end())
    {
        j.at("can_edit").get_to(o.m_Can_edit);
        o.m_Can_editIsSet = true;
    } 
    if(j.find("billto_infos") != j.end())
    {
        j.at("billto_infos").get_to(o.m_Billto_infos);
        o.m_Billto_infosIsSet = true;
    } 
    if(j.find("currency") != j.end())
    {
        j.at("currency").get_to(o.m_Currency);
        o.m_CurrencyIsSet = true;
    } 
    if(j.find("pmp_names") != j.end())
    {
        j.at("pmp_names").get_to(o.m_Pmp_names);
        o.m_Pmp_namesIsSet = true;
    } 
    if(j.find("error") != j.end())
    {
        j.at("error").get_to(o.m_Error);
        o.m_ErrorIsSet = true;
    } 
    
}

bool SSIOAccountResponse::isEligible() const
{
    return m_Eligible;
}
void SSIOAccountResponse::setEligible(bool const value)
{
    m_Eligible = value;
    m_EligibleIsSet = true;
}
bool SSIOAccountResponse::eligibleIsSet() const
{
    return m_EligibleIsSet;
}
void SSIOAccountResponse::unsetEligible()
{
    m_EligibleIsSet = false;
}
bool SSIOAccountResponse::isCanEdit() const
{
    return m_Can_edit;
}
void SSIOAccountResponse::setCanEdit(bool const value)
{
    m_Can_edit = value;
    m_Can_editIsSet = true;
}
bool SSIOAccountResponse::canEditIsSet() const
{
    return m_Can_editIsSet;
}
void SSIOAccountResponse::unsetCan_edit()
{
    m_Can_editIsSet = false;
}
std::vector<org::openapitools::server::model::SSIOAccountItem> SSIOAccountResponse::getBilltoInfos() const
{
    return m_Billto_infos;
}
void SSIOAccountResponse::setBilltoInfos(std::vector<org::openapitools::server::model::SSIOAccountItem> const& value)
{
    m_Billto_infos = value;
    m_Billto_infosIsSet = true;
}
bool SSIOAccountResponse::billtoInfosIsSet() const
{
    return m_Billto_infosIsSet;
}
void SSIOAccountResponse::unsetBillto_infos()
{
    m_Billto_infosIsSet = false;
}
std::string SSIOAccountResponse::getCurrency() const
{
    return m_Currency;
}
void SSIOAccountResponse::setCurrency(std::string const& value)
{
    m_Currency = value;
    m_CurrencyIsSet = true;
}
bool SSIOAccountResponse::currencyIsSet() const
{
    return m_CurrencyIsSet;
}
void SSIOAccountResponse::unsetCurrency()
{
    m_CurrencyIsSet = false;
}
std::vector<org::openapitools::server::model::SSIOAccountPMPName> SSIOAccountResponse::getPmpNames() const
{
    return m_Pmp_names;
}
void SSIOAccountResponse::setPmpNames(std::vector<org::openapitools::server::model::SSIOAccountPMPName> const& value)
{
    m_Pmp_names = value;
    m_Pmp_namesIsSet = true;
}
bool SSIOAccountResponse::pmpNamesIsSet() const
{
    return m_Pmp_namesIsSet;
}
void SSIOAccountResponse::unsetPmp_names()
{
    m_Pmp_namesIsSet = false;
}
std::string SSIOAccountResponse::getError() const
{
    return m_Error;
}
void SSIOAccountResponse::setError(std::string const& value)
{
    m_Error = value;
    m_ErrorIsSet = true;
}
bool SSIOAccountResponse::errorIsSet() const
{
    return m_ErrorIsSet;
}
void SSIOAccountResponse::unsetError()
{
    m_ErrorIsSet = false;
}


} // namespace org::openapitools::server::model

