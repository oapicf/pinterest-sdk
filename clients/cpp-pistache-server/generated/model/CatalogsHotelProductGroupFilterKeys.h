/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * CatalogsHotelProductGroupFilterKeys.h
 *
 * 
 */

#ifndef CatalogsHotelProductGroupFilterKeys_H_
#define CatalogsHotelProductGroupFilterKeys_H_


#include "CustomLabel4Filter.h"
#include "HotelIdFilter.h"
#include "BrandFilter.h"
#include "CustomLabel1Filter.h"
#include "CustomLabel3Filter.h"
#include "PriceFilter.h"
#include "CatalogsProductGroupMultipleCountriesCriteria.h"
#include "CatalogsProductGroupMultipleStringCriteria.h"
#include "Catalogs_product_group_pricing_currency_criteria.h"
#include "CustomLabel0Filter.h"
#include "CountryFilter.h"
#include "CustomLabel2Filter.h"
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// 
/// </summary>
class  CatalogsHotelProductGroupFilterKeys
{
public:
    CatalogsHotelProductGroupFilterKeys();
    virtual ~CatalogsHotelProductGroupFilterKeys() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const CatalogsHotelProductGroupFilterKeys& rhs) const;
    bool operator!=(const CatalogsHotelProductGroupFilterKeys& rhs) const;

    /////////////////////////////////////////////
    /// CatalogsHotelProductGroupFilterKeys members

    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::Catalogs_product_group_pricing_currency_criteria getPRICE() const;
    void setPRICE(org::openapitools::server::model::Catalogs_product_group_pricing_currency_criteria const& value);
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::CatalogsProductGroupMultipleStringCriteria getHOTELID() const;
    void setHOTELID(org::openapitools::server::model::CatalogsProductGroupMultipleStringCriteria const& value);
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::CatalogsProductGroupMultipleStringCriteria getBRAND() const;
    void setBRAND(org::openapitools::server::model::CatalogsProductGroupMultipleStringCriteria const& value);
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::CatalogsProductGroupMultipleStringCriteria getCUSTOMLABEL0() const;
    void setCUSTOMLABEL0(org::openapitools::server::model::CatalogsProductGroupMultipleStringCriteria const& value);
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::CatalogsProductGroupMultipleStringCriteria getCUSTOMLABEL1() const;
    void setCUSTOMLABEL1(org::openapitools::server::model::CatalogsProductGroupMultipleStringCriteria const& value);
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::CatalogsProductGroupMultipleStringCriteria getCUSTOMLABEL2() const;
    void setCUSTOMLABEL2(org::openapitools::server::model::CatalogsProductGroupMultipleStringCriteria const& value);
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::CatalogsProductGroupMultipleStringCriteria getCUSTOMLABEL3() const;
    void setCUSTOMLABEL3(org::openapitools::server::model::CatalogsProductGroupMultipleStringCriteria const& value);
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::CatalogsProductGroupMultipleStringCriteria getCUSTOMLABEL4() const;
    void setCUSTOMLABEL4(org::openapitools::server::model::CatalogsProductGroupMultipleStringCriteria const& value);
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::CatalogsProductGroupMultipleCountriesCriteria getCOUNTRY() const;
    void setCOUNTRY(org::openapitools::server::model::CatalogsProductGroupMultipleCountriesCriteria const& value);

    friend  void to_json(nlohmann::json& j, const CatalogsHotelProductGroupFilterKeys& o);
    friend  void from_json(const nlohmann::json& j, CatalogsHotelProductGroupFilterKeys& o);
protected:
    org::openapitools::server::model::Catalogs_product_group_pricing_currency_criteria m_PRICE;

    org::openapitools::server::model::CatalogsProductGroupMultipleStringCriteria m_HOTEL_ID;

    org::openapitools::server::model::CatalogsProductGroupMultipleStringCriteria m_BRAND;

    org::openapitools::server::model::CatalogsProductGroupMultipleStringCriteria m_CUSTOM_LABEL_0;

    org::openapitools::server::model::CatalogsProductGroupMultipleStringCriteria m_CUSTOM_LABEL_1;

    org::openapitools::server::model::CatalogsProductGroupMultipleStringCriteria m_CUSTOM_LABEL_2;

    org::openapitools::server::model::CatalogsProductGroupMultipleStringCriteria m_CUSTOM_LABEL_3;

    org::openapitools::server::model::CatalogsProductGroupMultipleStringCriteria m_CUSTOM_LABEL_4;

    org::openapitools::server::model::CatalogsProductGroupMultipleCountriesCriteria m_COUNTRY;

    
};

} // namespace org::openapitools::server::model

#endif /* CatalogsHotelProductGroupFilterKeys_H_ */
