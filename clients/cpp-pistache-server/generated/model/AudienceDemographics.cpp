/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "AudienceDemographics.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

AudienceDemographics::AudienceDemographics()
{
    m_AgesIsSet = false;
    m_GendersIsSet = false;
    m_DevicesIsSet = false;
    m_MetrosIsSet = false;
    m_CountriesIsSet = false;
    
}

void AudienceDemographics::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool AudienceDemographics::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool AudienceDemographics::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "AudienceDemographics" : pathPrefix;

         
    if (agesIsSet())
    {
        const std::vector<org::openapitools::server::model::AudienceDemographicValue>& value = m_Ages;
        const std::string currentValuePath = _pathPrefix + ".ages";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::AudienceDemographicValue& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".ages") && success;
 
                i++;
            }
        }

    }
         
    if (gendersIsSet())
    {
        const std::vector<org::openapitools::server::model::AudienceDemographicValue>& value = m_Genders;
        const std::string currentValuePath = _pathPrefix + ".genders";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::AudienceDemographicValue& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".genders") && success;
 
                i++;
            }
        }

    }
         
    if (devicesIsSet())
    {
        const std::vector<org::openapitools::server::model::AudienceDemographicValue>& value = m_Devices;
        const std::string currentValuePath = _pathPrefix + ".devices";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::AudienceDemographicValue& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".devices") && success;
 
                i++;
            }
        }

    }
         
    if (metrosIsSet())
    {
        const std::vector<org::openapitools::server::model::AudienceDemographicValue>& value = m_Metros;
        const std::string currentValuePath = _pathPrefix + ".metros";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::AudienceDemographicValue& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".metros") && success;
 
                i++;
            }
        }

    }
         
    if (countriesIsSet())
    {
        const std::vector<org::openapitools::server::model::AudienceDemographicValue>& value = m_Countries;
        const std::string currentValuePath = _pathPrefix + ".countries";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::AudienceDemographicValue& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".countries") && success;
 
                i++;
            }
        }

    }
    
    return success;
}

bool AudienceDemographics::operator==(const AudienceDemographics& rhs) const
{
    return
    
    
    
    ((!agesIsSet() && !rhs.agesIsSet()) || (agesIsSet() && rhs.agesIsSet() && getAges() == rhs.getAges())) &&
    
    
    ((!gendersIsSet() && !rhs.gendersIsSet()) || (gendersIsSet() && rhs.gendersIsSet() && getGenders() == rhs.getGenders())) &&
    
    
    ((!devicesIsSet() && !rhs.devicesIsSet()) || (devicesIsSet() && rhs.devicesIsSet() && getDevices() == rhs.getDevices())) &&
    
    
    ((!metrosIsSet() && !rhs.metrosIsSet()) || (metrosIsSet() && rhs.metrosIsSet() && getMetros() == rhs.getMetros())) &&
    
    
    ((!countriesIsSet() && !rhs.countriesIsSet()) || (countriesIsSet() && rhs.countriesIsSet() && getCountries() == rhs.getCountries()))
    
    ;
}

bool AudienceDemographics::operator!=(const AudienceDemographics& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const AudienceDemographics& o)
{
    j = nlohmann::json::object();
    if(o.agesIsSet() || !o.m_Ages.empty())
        j["ages"] = o.m_Ages;
    if(o.gendersIsSet() || !o.m_Genders.empty())
        j["genders"] = o.m_Genders;
    if(o.devicesIsSet() || !o.m_Devices.empty())
        j["devices"] = o.m_Devices;
    if(o.metrosIsSet() || !o.m_Metros.empty())
        j["metros"] = o.m_Metros;
    if(o.countriesIsSet() || !o.m_Countries.empty())
        j["countries"] = o.m_Countries;
    
}

void from_json(const nlohmann::json& j, AudienceDemographics& o)
{
    if(j.find("ages") != j.end())
    {
        j.at("ages").get_to(o.m_Ages);
        o.m_AgesIsSet = true;
    } 
    if(j.find("genders") != j.end())
    {
        j.at("genders").get_to(o.m_Genders);
        o.m_GendersIsSet = true;
    } 
    if(j.find("devices") != j.end())
    {
        j.at("devices").get_to(o.m_Devices);
        o.m_DevicesIsSet = true;
    } 
    if(j.find("metros") != j.end())
    {
        j.at("metros").get_to(o.m_Metros);
        o.m_MetrosIsSet = true;
    } 
    if(j.find("countries") != j.end())
    {
        j.at("countries").get_to(o.m_Countries);
        o.m_CountriesIsSet = true;
    } 
    
}

std::vector<org::openapitools::server::model::AudienceDemographicValue> AudienceDemographics::getAges() const
{
    return m_Ages;
}
void AudienceDemographics::setAges(std::vector<org::openapitools::server::model::AudienceDemographicValue> const& value)
{
    m_Ages = value;
    m_AgesIsSet = true;
}
bool AudienceDemographics::agesIsSet() const
{
    return m_AgesIsSet;
}
void AudienceDemographics::unsetAges()
{
    m_AgesIsSet = false;
}
std::vector<org::openapitools::server::model::AudienceDemographicValue> AudienceDemographics::getGenders() const
{
    return m_Genders;
}
void AudienceDemographics::setGenders(std::vector<org::openapitools::server::model::AudienceDemographicValue> const& value)
{
    m_Genders = value;
    m_GendersIsSet = true;
}
bool AudienceDemographics::gendersIsSet() const
{
    return m_GendersIsSet;
}
void AudienceDemographics::unsetGenders()
{
    m_GendersIsSet = false;
}
std::vector<org::openapitools::server::model::AudienceDemographicValue> AudienceDemographics::getDevices() const
{
    return m_Devices;
}
void AudienceDemographics::setDevices(std::vector<org::openapitools::server::model::AudienceDemographicValue> const& value)
{
    m_Devices = value;
    m_DevicesIsSet = true;
}
bool AudienceDemographics::devicesIsSet() const
{
    return m_DevicesIsSet;
}
void AudienceDemographics::unsetDevices()
{
    m_DevicesIsSet = false;
}
std::vector<org::openapitools::server::model::AudienceDemographicValue> AudienceDemographics::getMetros() const
{
    return m_Metros;
}
void AudienceDemographics::setMetros(std::vector<org::openapitools::server::model::AudienceDemographicValue> const& value)
{
    m_Metros = value;
    m_MetrosIsSet = true;
}
bool AudienceDemographics::metrosIsSet() const
{
    return m_MetrosIsSet;
}
void AudienceDemographics::unsetMetros()
{
    m_MetrosIsSet = false;
}
std::vector<org::openapitools::server::model::AudienceDemographicValue> AudienceDemographics::getCountries() const
{
    return m_Countries;
}
void AudienceDemographics::setCountries(std::vector<org::openapitools::server::model::AudienceDemographicValue> const& value)
{
    m_Countries = value;
    m_CountriesIsSet = true;
}
bool AudienceDemographics::countriesIsSet() const
{
    return m_CountriesIsSet;
}
void AudienceDemographics::unsetCountries()
{
    m_CountriesIsSet = false;
}


} // namespace org::openapitools::server::model

