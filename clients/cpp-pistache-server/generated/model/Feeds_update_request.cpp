/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "Feeds_update_request.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

Feeds_update_request::Feeds_update_request()
{
    m_Default_currencyIsSet = false;
    m_Name = "";
    m_NameIsSet = false;
    m_FormatIsSet = false;
    m_CredentialsIsSet = false;
    m_Location = "";
    m_LocationIsSet = false;
    m_Preferred_processing_scheduleIsSet = false;
    m_StatusIsSet = false;
    m_Default_availabilityIsSet = false;
    
}

void Feeds_update_request::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool Feeds_update_request::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool Feeds_update_request::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "Feeds_update_request" : pathPrefix;

                         
    if (locationIsSet())
    {
        const std::string& value = m_Location;
        const std::string currentValuePath = _pathPrefix + ".location";
                
        

    }
                    
    return success;
}

bool Feeds_update_request::operator==(const Feeds_update_request& rhs) const
{
    return
    
    
    
    ((!defaultCurrencyIsSet() && !rhs.defaultCurrencyIsSet()) || (defaultCurrencyIsSet() && rhs.defaultCurrencyIsSet() && getDefaultCurrency() == rhs.getDefaultCurrency())) &&
    
    
    ((!nameIsSet() && !rhs.nameIsSet()) || (nameIsSet() && rhs.nameIsSet() && getName() == rhs.getName())) &&
    
    
    ((!formatIsSet() && !rhs.formatIsSet()) || (formatIsSet() && rhs.formatIsSet() && getFormat() == rhs.getFormat())) &&
    
    
    ((!credentialsIsSet() && !rhs.credentialsIsSet()) || (credentialsIsSet() && rhs.credentialsIsSet() && getCredentials() == rhs.getCredentials())) &&
    
    
    ((!locationIsSet() && !rhs.locationIsSet()) || (locationIsSet() && rhs.locationIsSet() && getLocation() == rhs.getLocation())) &&
    
    
    ((!preferredProcessingScheduleIsSet() && !rhs.preferredProcessingScheduleIsSet()) || (preferredProcessingScheduleIsSet() && rhs.preferredProcessingScheduleIsSet() && getPreferredProcessingSchedule() == rhs.getPreferredProcessingSchedule())) &&
    
    
    ((!statusIsSet() && !rhs.statusIsSet()) || (statusIsSet() && rhs.statusIsSet() && getStatus() == rhs.getStatus())) &&
    
    (getCatalogType() == rhs.getCatalogType())
     &&
    
    
    ((!defaultAvailabilityIsSet() && !rhs.defaultAvailabilityIsSet()) || (defaultAvailabilityIsSet() && rhs.defaultAvailabilityIsSet() && getDefaultAvailability() == rhs.getDefaultAvailability()))
    
    ;
}

bool Feeds_update_request::operator!=(const Feeds_update_request& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const Feeds_update_request& o)
{
    j = nlohmann::json::object();
    if(o.defaultCurrencyIsSet())
        j["default_currency"] = o.m_Default_currency;
    if(o.nameIsSet())
        j["name"] = o.m_Name;
    if(o.formatIsSet())
        j["format"] = o.m_Format;
    if(o.credentialsIsSet())
        j["credentials"] = o.m_Credentials;
    if(o.locationIsSet())
        j["location"] = o.m_Location;
    if(o.preferredProcessingScheduleIsSet())
        j["preferred_processing_schedule"] = o.m_Preferred_processing_schedule;
    if(o.statusIsSet())
        j["status"] = o.m_Status;
    j["catalog_type"] = o.m_Catalog_type;
    if(o.defaultAvailabilityIsSet())
        j["default_availability"] = o.m_Default_availability;
    
}

void from_json(const nlohmann::json& j, Feeds_update_request& o)
{
    if(j.find("default_currency") != j.end())
    {
        j.at("default_currency").get_to(o.m_Default_currency);
        o.m_Default_currencyIsSet = true;
    } 
    if(j.find("name") != j.end())
    {
        j.at("name").get_to(o.m_Name);
        o.m_NameIsSet = true;
    } 
    if(j.find("format") != j.end())
    {
        j.at("format").get_to(o.m_Format);
        o.m_FormatIsSet = true;
    } 
    if(j.find("credentials") != j.end())
    {
        j.at("credentials").get_to(o.m_Credentials);
        o.m_CredentialsIsSet = true;
    } 
    if(j.find("location") != j.end())
    {
        j.at("location").get_to(o.m_Location);
        o.m_LocationIsSet = true;
    } 
    if(j.find("preferred_processing_schedule") != j.end())
    {
        j.at("preferred_processing_schedule").get_to(o.m_Preferred_processing_schedule);
        o.m_Preferred_processing_scheduleIsSet = true;
    } 
    if(j.find("status") != j.end())
    {
        j.at("status").get_to(o.m_Status);
        o.m_StatusIsSet = true;
    } 
    j.at("catalog_type").get_to(o.m_Catalog_type);
    if(j.find("default_availability") != j.end())
    {
        j.at("default_availability").get_to(o.m_Default_availability);
        o.m_Default_availabilityIsSet = true;
    } 
    
}

org::openapitools::server::model::NullableCurrency Feeds_update_request::getDefaultCurrency() const
{
    return m_Default_currency;
}
void Feeds_update_request::setDefaultCurrency(org::openapitools::server::model::NullableCurrency const& value)
{
    m_Default_currency = value;
    m_Default_currencyIsSet = true;
}
bool Feeds_update_request::defaultCurrencyIsSet() const
{
    return m_Default_currencyIsSet;
}
void Feeds_update_request::unsetDefault_currency()
{
    m_Default_currencyIsSet = false;
}
std::string Feeds_update_request::getName() const
{
    return m_Name;
}
void Feeds_update_request::setName(std::string const& value)
{
    m_Name = value;
    m_NameIsSet = true;
}
bool Feeds_update_request::nameIsSet() const
{
    return m_NameIsSet;
}
void Feeds_update_request::unsetName()
{
    m_NameIsSet = false;
}
org::openapitools::server::model::CatalogsFormat Feeds_update_request::getFormat() const
{
    return m_Format;
}
void Feeds_update_request::setFormat(org::openapitools::server::model::CatalogsFormat const& value)
{
    m_Format = value;
    m_FormatIsSet = true;
}
bool Feeds_update_request::formatIsSet() const
{
    return m_FormatIsSet;
}
void Feeds_update_request::unsetFormat()
{
    m_FormatIsSet = false;
}
org::openapitools::server::model::CatalogsFeedCredentials Feeds_update_request::getCredentials() const
{
    return m_Credentials;
}
void Feeds_update_request::setCredentials(org::openapitools::server::model::CatalogsFeedCredentials const& value)
{
    m_Credentials = value;
    m_CredentialsIsSet = true;
}
bool Feeds_update_request::credentialsIsSet() const
{
    return m_CredentialsIsSet;
}
void Feeds_update_request::unsetCredentials()
{
    m_CredentialsIsSet = false;
}
std::string Feeds_update_request::getLocation() const
{
    return m_Location;
}
void Feeds_update_request::setLocation(std::string const& value)
{
    m_Location = value;
    m_LocationIsSet = true;
}
bool Feeds_update_request::locationIsSet() const
{
    return m_LocationIsSet;
}
void Feeds_update_request::unsetLocation()
{
    m_LocationIsSet = false;
}
org::openapitools::server::model::CatalogsFeedProcessingSchedule Feeds_update_request::getPreferredProcessingSchedule() const
{
    return m_Preferred_processing_schedule;
}
void Feeds_update_request::setPreferredProcessingSchedule(org::openapitools::server::model::CatalogsFeedProcessingSchedule const& value)
{
    m_Preferred_processing_schedule = value;
    m_Preferred_processing_scheduleIsSet = true;
}
bool Feeds_update_request::preferredProcessingScheduleIsSet() const
{
    return m_Preferred_processing_scheduleIsSet;
}
void Feeds_update_request::unsetPreferred_processing_schedule()
{
    m_Preferred_processing_scheduleIsSet = false;
}
org::openapitools::server::model::CatalogsStatus Feeds_update_request::getStatus() const
{
    return m_Status;
}
void Feeds_update_request::setStatus(org::openapitools::server::model::CatalogsStatus const& value)
{
    m_Status = value;
    m_StatusIsSet = true;
}
bool Feeds_update_request::statusIsSet() const
{
    return m_StatusIsSet;
}
void Feeds_update_request::unsetStatus()
{
    m_StatusIsSet = false;
}
org::openapitools::server::model::CatalogsType Feeds_update_request::getCatalogType() const
{
    return m_Catalog_type;
}
void Feeds_update_request::setCatalogType(org::openapitools::server::model::CatalogsType const& value)
{
    m_Catalog_type = value;
}
org::openapitools::server::model::ProductAvailabilityType Feeds_update_request::getDefaultAvailability() const
{
    return m_Default_availability;
}
void Feeds_update_request::setDefaultAvailability(org::openapitools::server::model::ProductAvailabilityType const& value)
{
    m_Default_availability = value;
    m_Default_availabilityIsSet = true;
}
bool Feeds_update_request::defaultAvailabilityIsSet() const
{
    return m_Default_availabilityIsSet;
}
void Feeds_update_request::unsetDefault_availability()
{
    m_Default_availabilityIsSet = false;
}


} // namespace org::openapitools::server::model

