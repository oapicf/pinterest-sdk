/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "CampaignCreateResponseItem.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

CampaignCreateResponseItem::CampaignCreateResponseItem()
{
    m_DataIsSet = false;
    m_ExceptionsIsSet = false;
    
}

void CampaignCreateResponseItem::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool CampaignCreateResponseItem::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool CampaignCreateResponseItem::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "CampaignCreateResponseItem" : pathPrefix;

             
    if (exceptionsIsSet())
    {
        const std::vector<org::openapitools::server::model::Exception>& value = m_Exceptions;
        const std::string currentValuePath = _pathPrefix + ".exceptions";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::Exception& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".exceptions") && success;
 
                i++;
            }
        }

    }
    
    return success;
}

bool CampaignCreateResponseItem::operator==(const CampaignCreateResponseItem& rhs) const
{
    return
    
    
    
    ((!dataIsSet() && !rhs.dataIsSet()) || (dataIsSet() && rhs.dataIsSet() && getData() == rhs.getData())) &&
    
    
    ((!exceptionsIsSet() && !rhs.exceptionsIsSet()) || (exceptionsIsSet() && rhs.exceptionsIsSet() && getExceptions() == rhs.getExceptions()))
    
    ;
}

bool CampaignCreateResponseItem::operator!=(const CampaignCreateResponseItem& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const CampaignCreateResponseItem& o)
{
    j = nlohmann::json::object();
    if(o.dataIsSet())
        j["data"] = o.m_Data;
    if(o.exceptionsIsSet() || !o.m_Exceptions.empty())
        j["exceptions"] = o.m_Exceptions;
    
}

void from_json(const nlohmann::json& j, CampaignCreateResponseItem& o)
{
    if(j.find("data") != j.end())
    {
        j.at("data").get_to(o.m_Data);
        o.m_DataIsSet = true;
    } 
    if(j.find("exceptions") != j.end())
    {
        j.at("exceptions").get_to(o.m_Exceptions);
        o.m_ExceptionsIsSet = true;
    } 
    
}

org::openapitools::server::model::CampaignCreateResponseData CampaignCreateResponseItem::getData() const
{
    return m_Data;
}
void CampaignCreateResponseItem::setData(org::openapitools::server::model::CampaignCreateResponseData const& value)
{
    m_Data = value;
    m_DataIsSet = true;
}
bool CampaignCreateResponseItem::dataIsSet() const
{
    return m_DataIsSet;
}
void CampaignCreateResponseItem::unsetData()
{
    m_DataIsSet = false;
}
std::vector<org::openapitools::server::model::Exception> CampaignCreateResponseItem::getExceptions() const
{
    return m_Exceptions;
}
void CampaignCreateResponseItem::setExceptions(std::vector<org::openapitools::server::model::Exception> const& value)
{
    m_Exceptions = value;
    m_ExceptionsIsSet = true;
}
bool CampaignCreateResponseItem::exceptionsIsSet() const
{
    return m_ExceptionsIsSet;
}
void CampaignCreateResponseItem::unsetExceptions()
{
    m_ExceptionsIsSet = false;
}


} // namespace org::openapitools::server::model

