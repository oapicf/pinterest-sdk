/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "IntegrationLogClientRequest.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

IntegrationLogClientRequest::IntegrationLogClientRequest()
{
    m_Method = "";
    m_Host = "";
    m_Path = "";
    m_Request_headersIsSet = false;
    m_Response_headersIsSet = false;
    m_Response_status_code = 0;
    m_Response_status_codeIsSet = false;
    
}

void IntegrationLogClientRequest::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool IntegrationLogClientRequest::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool IntegrationLogClientRequest::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "IntegrationLogClientRequest" : pathPrefix;

                            
    return success;
}

bool IntegrationLogClientRequest::operator==(const IntegrationLogClientRequest& rhs) const
{
    return
    
    
    (getMethod() == rhs.getMethod())
     &&
    
    (getHost() == rhs.getHost())
     &&
    
    (getPath() == rhs.getPath())
     &&
    
    
    ((!requestHeadersIsSet() && !rhs.requestHeadersIsSet()) || (requestHeadersIsSet() && rhs.requestHeadersIsSet() && getRequestHeaders() == rhs.getRequestHeaders())) &&
    
    
    ((!responseHeadersIsSet() && !rhs.responseHeadersIsSet()) || (responseHeadersIsSet() && rhs.responseHeadersIsSet() && getResponseHeaders() == rhs.getResponseHeaders())) &&
    
    
    ((!responseStatusCodeIsSet() && !rhs.responseStatusCodeIsSet()) || (responseStatusCodeIsSet() && rhs.responseStatusCodeIsSet() && getResponseStatusCode() == rhs.getResponseStatusCode()))
    
    ;
}

bool IntegrationLogClientRequest::operator!=(const IntegrationLogClientRequest& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const IntegrationLogClientRequest& o)
{
    j = nlohmann::json::object();
    j["method"] = o.m_Method;
    j["host"] = o.m_Host;
    j["path"] = o.m_Path;
    if(o.requestHeadersIsSet() || !o.m_Request_headers.empty())
        j["request_headers"] = o.m_Request_headers;
    if(o.responseHeadersIsSet() || !o.m_Response_headers.empty())
        j["response_headers"] = o.m_Response_headers;
    if(o.responseStatusCodeIsSet())
        j["response_status_code"] = o.m_Response_status_code;
    
}

void from_json(const nlohmann::json& j, IntegrationLogClientRequest& o)
{
    j.at("method").get_to(o.m_Method);
    j.at("host").get_to(o.m_Host);
    j.at("path").get_to(o.m_Path);
    if(j.find("request_headers") != j.end())
    {
        j.at("request_headers").get_to(o.m_Request_headers);
        o.m_Request_headersIsSet = true;
    } 
    if(j.find("response_headers") != j.end())
    {
        j.at("response_headers").get_to(o.m_Response_headers);
        o.m_Response_headersIsSet = true;
    } 
    if(j.find("response_status_code") != j.end())
    {
        j.at("response_status_code").get_to(o.m_Response_status_code);
        o.m_Response_status_codeIsSet = true;
    } 
    
}

std::string IntegrationLogClientRequest::getMethod() const
{
    return m_Method;
}
void IntegrationLogClientRequest::setMethod(std::string const& value)
{
    m_Method = value;
}
std::string IntegrationLogClientRequest::getHost() const
{
    return m_Host;
}
void IntegrationLogClientRequest::setHost(std::string const& value)
{
    m_Host = value;
}
std::string IntegrationLogClientRequest::getPath() const
{
    return m_Path;
}
void IntegrationLogClientRequest::setPath(std::string const& value)
{
    m_Path = value;
}
std::map<std::string, std::string> IntegrationLogClientRequest::getRequestHeaders() const
{
    return m_Request_headers;
}
void IntegrationLogClientRequest::setRequestHeaders(std::map<std::string, std::string> const& value)
{
    m_Request_headers = value;
    m_Request_headersIsSet = true;
}
bool IntegrationLogClientRequest::requestHeadersIsSet() const
{
    return m_Request_headersIsSet;
}
void IntegrationLogClientRequest::unsetRequest_headers()
{
    m_Request_headersIsSet = false;
}
std::map<std::string, std::string> IntegrationLogClientRequest::getResponseHeaders() const
{
    return m_Response_headers;
}
void IntegrationLogClientRequest::setResponseHeaders(std::map<std::string, std::string> const& value)
{
    m_Response_headers = value;
    m_Response_headersIsSet = true;
}
bool IntegrationLogClientRequest::responseHeadersIsSet() const
{
    return m_Response_headersIsSet;
}
void IntegrationLogClientRequest::unsetResponse_headers()
{
    m_Response_headersIsSet = false;
}
int32_t IntegrationLogClientRequest::getResponseStatusCode() const
{
    return m_Response_status_code;
}
void IntegrationLogClientRequest::setResponseStatusCode(int32_t const value)
{
    m_Response_status_code = value;
    m_Response_status_codeIsSet = true;
}
bool IntegrationLogClientRequest::responseStatusCodeIsSet() const
{
    return m_Response_status_codeIsSet;
}
void IntegrationLogClientRequest::unsetResponse_status_code()
{
    m_Response_status_codeIsSet = false;
}


} // namespace org::openapitools::server::model

