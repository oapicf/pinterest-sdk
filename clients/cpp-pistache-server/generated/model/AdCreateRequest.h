/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * AdCreateRequest.h
 *
 * 
 */

#ifndef AdCreateRequest_H_
#define AdCreateRequest_H_


#include "CreativeType.h"
#include "EntityStatus.h"
#include <string>
#include "GridClickType.h"
#include "QuizPinData.h"
#include "TrackingUrls.h"
#include <vector>
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// 
/// </summary>
class  AdCreateRequest
{
public:
    AdCreateRequest();
    virtual ~AdCreateRequest() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const AdCreateRequest& rhs) const;
    bool operator!=(const AdCreateRequest& rhs) const;

    /////////////////////////////////////////////
    /// AdCreateRequest members

    /// <summary>
    /// ID of the ad group that contains the ad.
    /// </summary>
    std::string getAdGroupId() const;
    void setAdGroupId(std::string const& value);
    /// <summary>
    /// Deep link URL for Android devices.
    /// </summary>
    std::string getAndroidDeepLink() const;
    void setAndroidDeepLink(std::string const& value);
    bool androidDeepLinkIsSet() const;
    void unsetAndroid_deep_link();
    /// <summary>
    /// Comma-separated deep links for the carousel pin on Android.
    /// </summary>
    std::vector<std::string> getCarouselAndroidDeepLinks() const;
    void setCarouselAndroidDeepLinks(std::vector<std::string> const& value);
    bool carouselAndroidDeepLinksIsSet() const;
    void unsetCarousel_android_deep_links();
    /// <summary>
    /// Comma-separated destination URLs for the carousel pin to promote.
    /// </summary>
    std::vector<std::string> getCarouselDestinationUrls() const;
    void setCarouselDestinationUrls(std::vector<std::string> const& value);
    bool carouselDestinationUrlsIsSet() const;
    void unsetCarousel_destination_urls();
    /// <summary>
    /// Comma-separated deep links for the carousel pin on iOS.
    /// </summary>
    std::vector<std::string> getCarouselIosDeepLinks() const;
    void setCarouselIosDeepLinks(std::vector<std::string> const& value);
    bool carouselIosDeepLinksIsSet() const;
    void unsetCarousel_ios_deep_links();
    /// <summary>
    /// Tracking url for the ad clicks.
    /// </summary>
    std::string getClickTrackingUrl() const;
    void setClickTrackingUrl(std::string const& value);
    bool clickTrackingUrlIsSet() const;
    void unsetClick_tracking_url();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::CreativeType getCreativeType() const;
    void setCreativeType(org::openapitools::server::model::CreativeType const& value);
    /// <summary>
    /// Destination URL.
    /// </summary>
    std::string getDestinationUrl() const;
    void setDestinationUrl(std::string const& value);
    bool destinationUrlIsSet() const;
    void unsetDestination_url();
    /// <summary>
    /// Deep link URL for iOS devices.
    /// </summary>
    std::string getIosDeepLink() const;
    void setIosDeepLink(std::string const& value);
    bool iosDeepLinkIsSet() const;
    void unsetIos_deep_link();
    /// <summary>
    /// Is original pin deleted?
    /// </summary>
    bool isIsPinDeleted() const;
    void setIsPinDeleted(bool const value);
    bool isPinDeletedIsSet() const;
    void unsetIs_pin_deleted();
    /// <summary>
    /// Is pin repinnable?
    /// </summary>
    bool isIsRemovable() const;
    void setIsRemovable(bool const value);
    bool isRemovableIsSet() const;
    void unsetIs_removable();
    /// <summary>
    /// Name of the ad - 255 chars max.
    /// </summary>
    std::string getName() const;
    void setName(std::string const& value);
    bool nameIsSet() const;
    void unsetName();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::EntityStatus getStatus() const;
    void setStatus(org::openapitools::server::model::EntityStatus const& value);
    bool statusIsSet() const;
    void unsetStatus();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::TrackingUrls getTrackingUrls() const;
    void setTrackingUrls(org::openapitools::server::model::TrackingUrls const& value);
    bool trackingUrlsIsSet() const;
    void unsetTracking_urls();
    /// <summary>
    /// Tracking URL for ad impressions.
    /// </summary>
    std::string getViewTrackingUrl() const;
    void setViewTrackingUrl(std::string const& value);
    bool viewTrackingUrlIsSet() const;
    void unsetView_tracking_url();
    /// <summary>
    /// Lead form ID for lead ad generation.
    /// </summary>
    std::string getLeadFormId() const;
    void setLeadFormId(std::string const& value);
    bool leadFormIdIsSet() const;
    void unsetLead_form_id();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::GridClickType getGridClickType() const;
    void setGridClickType(org::openapitools::server::model::GridClickType const& value);
    bool gridClickTypeIsSet() const;
    void unsetGrid_click_type();
    /// <summary>
    /// Select a call to action (CTA) to display below your ad. Available only for ads with direct links enabled. CTA options for consideration and conversion campaigns are LEARN_MORE, SHOP_NOW, BOOK_NOW, SIGN_UP, VISIT_SITE, BUY_NOW, GET_OFFER, ORDER_NOW, ADD_TO_CART (for conversion campaigns with add to cart conversion events only)
    /// </summary>
    std::string getCustomizableCtaType() const;
    void setCustomizableCtaType(std::string const& value);
    bool customizableCtaTypeIsSet() const;
    void unsetCustomizable_cta_type();
    /// <summary>
    /// Before creating a quiz ad, you must create an organic Pin using POST/Create Pin for each result in the quiz. Quiz ads cannot be saved by a Pinner. Quiz ad results can be saved.
    /// </summary>
    org::openapitools::server::model::QuizPinData getQuizPinData() const;
    void setQuizPinData(org::openapitools::server::model::QuizPinData const& value);
    bool quizPinDataIsSet() const;
    void unsetQuiz_pin_data();
    /// <summary>
    /// Pin ID.
    /// </summary>
    std::string getPinId() const;
    void setPinId(std::string const& value);

    friend  void to_json(nlohmann::json& j, const AdCreateRequest& o);
    friend  void from_json(const nlohmann::json& j, AdCreateRequest& o);
protected:
    std::string m_Ad_group_id;

    std::string m_Android_deep_link;
    bool m_Android_deep_linkIsSet;
    std::vector<std::string> m_Carousel_android_deep_links;
    bool m_Carousel_android_deep_linksIsSet;
    std::vector<std::string> m_Carousel_destination_urls;
    bool m_Carousel_destination_urlsIsSet;
    std::vector<std::string> m_Carousel_ios_deep_links;
    bool m_Carousel_ios_deep_linksIsSet;
    std::string m_Click_tracking_url;
    bool m_Click_tracking_urlIsSet;
    org::openapitools::server::model::CreativeType m_Creative_type;

    std::string m_Destination_url;
    bool m_Destination_urlIsSet;
    std::string m_Ios_deep_link;
    bool m_Ios_deep_linkIsSet;
    bool m_Is_pin_deleted;
    bool m_Is_pin_deletedIsSet;
    bool m_Is_removable;
    bool m_Is_removableIsSet;
    std::string m_Name;
    bool m_NameIsSet;
    org::openapitools::server::model::EntityStatus m_Status;
    bool m_StatusIsSet;
    org::openapitools::server::model::TrackingUrls m_Tracking_urls;
    bool m_Tracking_urlsIsSet;
    std::string m_View_tracking_url;
    bool m_View_tracking_urlIsSet;
    std::string m_Lead_form_id;
    bool m_Lead_form_idIsSet;
    org::openapitools::server::model::GridClickType m_Grid_click_type;
    bool m_Grid_click_typeIsSet;
    std::string m_Customizable_cta_type;
    bool m_Customizable_cta_typeIsSet;
    org::openapitools::server::model::QuizPinData m_Quiz_pin_data;
    bool m_Quiz_pin_dataIsSet;
    std::string m_Pin_id;

    
};

} // namespace org::openapitools::server::model

#endif /* AdCreateRequest_H_ */
