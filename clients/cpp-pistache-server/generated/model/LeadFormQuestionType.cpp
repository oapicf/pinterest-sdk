/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "LeadFormQuestionType.h"
#include "Helpers.h"
#include <stdexcept>
#include <sstream>

namespace org::openapitools::server::model
{

LeadFormQuestionType::LeadFormQuestionType()
{
    
}

void LeadFormQuestionType::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool LeadFormQuestionType::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool LeadFormQuestionType::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "LeadFormQuestionType" : pathPrefix;

    
    if (m_value == LeadFormQuestionType::eLeadFormQuestionType::INVALID_VALUE_OPENAPI_GENERATED)
    {
        success = false;
        msg << _pathPrefix << ": has no value;";
    }

    return success;
}

bool LeadFormQuestionType::operator==(const LeadFormQuestionType& rhs) const
{
    return
    getValue() == rhs.getValue()
    
    ;
}

bool LeadFormQuestionType::operator!=(const LeadFormQuestionType& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const LeadFormQuestionType& o)
{
    j = nlohmann::json::object();
    
    switch (o.getValue())
    {
        case LeadFormQuestionType::eLeadFormQuestionType::INVALID_VALUE_OPENAPI_GENERATED:
            j = "INVALID_VALUE_OPENAPI_GENERATED";
            break;
        case LeadFormQuestionType::eLeadFormQuestionType::CUSTOM:
            j = "CUSTOM";
            break;
        case LeadFormQuestionType::eLeadFormQuestionType::FULL_NAME:
            j = "FULL_NAME";
            break;
        case LeadFormQuestionType::eLeadFormQuestionType::FIRST_NAME:
            j = "FIRST_NAME";
            break;
        case LeadFormQuestionType::eLeadFormQuestionType::LAST_NAME:
            j = "LAST_NAME";
            break;
        case LeadFormQuestionType::eLeadFormQuestionType::EMAIL:
            j = "EMAIL";
            break;
        case LeadFormQuestionType::eLeadFormQuestionType::PHONE_NUMBER:
            j = "PHONE_NUMBER";
            break;
        case LeadFormQuestionType::eLeadFormQuestionType::ZIP_CODE:
            j = "ZIP_CODE";
            break;
        case LeadFormQuestionType::eLeadFormQuestionType::GENDER:
            j = "GENDER";
            break;
        case LeadFormQuestionType::eLeadFormQuestionType::CITY:
            j = "CITY";
            break;
        case LeadFormQuestionType::eLeadFormQuestionType::COUNTRY:
            j = "COUNTRY";
            break;
        case LeadFormQuestionType::eLeadFormQuestionType::STATE_PROVINCE:
            j = "STATE_PROVINCE";
            break;
        case LeadFormQuestionType::eLeadFormQuestionType::ADDRESS:
            j = "ADDRESS";
            break;
        case LeadFormQuestionType::eLeadFormQuestionType::DATE_OF_BIRTH:
            j = "DATE_OF_BIRTH";
            break;
        case LeadFormQuestionType::eLeadFormQuestionType::AGE:
            j = "AGE";
            break;
    }
}

void from_json(const nlohmann::json& j, LeadFormQuestionType& o)
{
    
    auto s = j.get<std::string>();
    if (s == "CUSTOM") {
     o.setValue(LeadFormQuestionType::eLeadFormQuestionType::CUSTOM);
    } 
    else if (s == "FULL_NAME") {
     o.setValue(LeadFormQuestionType::eLeadFormQuestionType::FULL_NAME);
    } 
    else if (s == "FIRST_NAME") {
     o.setValue(LeadFormQuestionType::eLeadFormQuestionType::FIRST_NAME);
    } 
    else if (s == "LAST_NAME") {
     o.setValue(LeadFormQuestionType::eLeadFormQuestionType::LAST_NAME);
    } 
    else if (s == "EMAIL") {
     o.setValue(LeadFormQuestionType::eLeadFormQuestionType::EMAIL);
    } 
    else if (s == "PHONE_NUMBER") {
     o.setValue(LeadFormQuestionType::eLeadFormQuestionType::PHONE_NUMBER);
    } 
    else if (s == "ZIP_CODE") {
     o.setValue(LeadFormQuestionType::eLeadFormQuestionType::ZIP_CODE);
    } 
    else if (s == "GENDER") {
     o.setValue(LeadFormQuestionType::eLeadFormQuestionType::GENDER);
    } 
    else if (s == "CITY") {
     o.setValue(LeadFormQuestionType::eLeadFormQuestionType::CITY);
    } 
    else if (s == "COUNTRY") {
     o.setValue(LeadFormQuestionType::eLeadFormQuestionType::COUNTRY);
    } 
    else if (s == "STATE_PROVINCE") {
     o.setValue(LeadFormQuestionType::eLeadFormQuestionType::STATE_PROVINCE);
    } 
    else if (s == "ADDRESS") {
     o.setValue(LeadFormQuestionType::eLeadFormQuestionType::ADDRESS);
    } 
    else if (s == "DATE_OF_BIRTH") {
     o.setValue(LeadFormQuestionType::eLeadFormQuestionType::DATE_OF_BIRTH);
    } 
    else if (s == "AGE") {
     o.setValue(LeadFormQuestionType::eLeadFormQuestionType::AGE);
    }  else {
     std::stringstream ss;
     ss << "Unexpected value " << s << " in json"
        << " cannot be converted to enum of type"
        << " LeadFormQuestionType::eLeadFormQuestionType";
     throw std::invalid_argument(ss.str());
    } 

}

LeadFormQuestionType::eLeadFormQuestionType LeadFormQuestionType::getValue() const
{
    return m_value;
}
void LeadFormQuestionType::setValue(LeadFormQuestionType::eLeadFormQuestionType value)
{
    m_value = value;
}

} // namespace org::openapitools::server::model

