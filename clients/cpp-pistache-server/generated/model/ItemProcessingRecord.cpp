/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ItemProcessingRecord.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

ItemProcessingRecord::ItemProcessingRecord()
{
    m_Item_id = "";
    m_Item_idIsSet = false;
    m_ErrorsIsSet = false;
    m_WarningsIsSet = false;
    m_StatusIsSet = false;
    
}

void ItemProcessingRecord::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool ItemProcessingRecord::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool ItemProcessingRecord::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "ItemProcessingRecord" : pathPrefix;

             
    if (errorsIsSet())
    {
        const std::vector<org::openapitools::server::model::ItemValidationEvent>& value = m_Errors;
        const std::string currentValuePath = _pathPrefix + ".errors";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::ItemValidationEvent& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".errors") && success;
 
                i++;
            }
        }

    }
         
    if (warningsIsSet())
    {
        const std::vector<org::openapitools::server::model::ItemValidationEvent>& value = m_Warnings;
        const std::string currentValuePath = _pathPrefix + ".warnings";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::ItemValidationEvent& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".warnings") && success;
 
                i++;
            }
        }

    }
        
    return success;
}

bool ItemProcessingRecord::operator==(const ItemProcessingRecord& rhs) const
{
    return
    
    
    
    ((!itemIdIsSet() && !rhs.itemIdIsSet()) || (itemIdIsSet() && rhs.itemIdIsSet() && getItemId() == rhs.getItemId())) &&
    
    
    ((!errorsIsSet() && !rhs.errorsIsSet()) || (errorsIsSet() && rhs.errorsIsSet() && getErrors() == rhs.getErrors())) &&
    
    
    ((!warningsIsSet() && !rhs.warningsIsSet()) || (warningsIsSet() && rhs.warningsIsSet() && getWarnings() == rhs.getWarnings())) &&
    
    
    ((!statusIsSet() && !rhs.statusIsSet()) || (statusIsSet() && rhs.statusIsSet() && getStatus() == rhs.getStatus()))
    
    ;
}

bool ItemProcessingRecord::operator!=(const ItemProcessingRecord& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const ItemProcessingRecord& o)
{
    j = nlohmann::json::object();
    if(o.itemIdIsSet())
        j["item_id"] = o.m_Item_id;
    if(o.errorsIsSet() || !o.m_Errors.empty())
        j["errors"] = o.m_Errors;
    if(o.warningsIsSet() || !o.m_Warnings.empty())
        j["warnings"] = o.m_Warnings;
    if(o.statusIsSet())
        j["status"] = o.m_Status;
    
}

void from_json(const nlohmann::json& j, ItemProcessingRecord& o)
{
    if(j.find("item_id") != j.end())
    {
        j.at("item_id").get_to(o.m_Item_id);
        o.m_Item_idIsSet = true;
    } 
    if(j.find("errors") != j.end())
    {
        j.at("errors").get_to(o.m_Errors);
        o.m_ErrorsIsSet = true;
    } 
    if(j.find("warnings") != j.end())
    {
        j.at("warnings").get_to(o.m_Warnings);
        o.m_WarningsIsSet = true;
    } 
    if(j.find("status") != j.end())
    {
        j.at("status").get_to(o.m_Status);
        o.m_StatusIsSet = true;
    } 
    
}

std::string ItemProcessingRecord::getItemId() const
{
    return m_Item_id;
}
void ItemProcessingRecord::setItemId(std::string const& value)
{
    m_Item_id = value;
    m_Item_idIsSet = true;
}
bool ItemProcessingRecord::itemIdIsSet() const
{
    return m_Item_idIsSet;
}
void ItemProcessingRecord::unsetItem_id()
{
    m_Item_idIsSet = false;
}
std::vector<org::openapitools::server::model::ItemValidationEvent> ItemProcessingRecord::getErrors() const
{
    return m_Errors;
}
void ItemProcessingRecord::setErrors(std::vector<org::openapitools::server::model::ItemValidationEvent> const& value)
{
    m_Errors = value;
    m_ErrorsIsSet = true;
}
bool ItemProcessingRecord::errorsIsSet() const
{
    return m_ErrorsIsSet;
}
void ItemProcessingRecord::unsetErrors()
{
    m_ErrorsIsSet = false;
}
std::vector<org::openapitools::server::model::ItemValidationEvent> ItemProcessingRecord::getWarnings() const
{
    return m_Warnings;
}
void ItemProcessingRecord::setWarnings(std::vector<org::openapitools::server::model::ItemValidationEvent> const& value)
{
    m_Warnings = value;
    m_WarningsIsSet = true;
}
bool ItemProcessingRecord::warningsIsSet() const
{
    return m_WarningsIsSet;
}
void ItemProcessingRecord::unsetWarnings()
{
    m_WarningsIsSet = false;
}
org::openapitools::server::model::ItemProcessingStatus ItemProcessingRecord::getStatus() const
{
    return m_Status;
}
void ItemProcessingRecord::setStatus(org::openapitools::server::model::ItemProcessingStatus const& value)
{
    m_Status = value;
    m_StatusIsSet = true;
}
bool ItemProcessingRecord::statusIsSet() const
{
    return m_StatusIsSet;
}
void ItemProcessingRecord::unsetStatus()
{
    m_StatusIsSet = false;
}


} // namespace org::openapitools::server::model

