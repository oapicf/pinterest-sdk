/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "TemplateResponse_date_range_relative_date_range.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

TemplateResponse_date_range_relative_date_range::TemplateResponse_date_range_relative_date_range()
{
    m_Type = "";
    m_TypeIsSet = false;
    m_Start_days_in_past = 0.0;
    m_Start_days_in_pastIsSet = false;
    m_End_days_in_past = 0.0;
    m_End_days_in_pastIsSet = false;
    
}

void TemplateResponse_date_range_relative_date_range::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool TemplateResponse_date_range_relative_date_range::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool TemplateResponse_date_range_relative_date_range::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "TemplateResponse_date_range_relative_date_range" : pathPrefix;

                
    return success;
}

bool TemplateResponse_date_range_relative_date_range::operator==(const TemplateResponse_date_range_relative_date_range& rhs) const
{
    return
    
    
    
    ((!typeIsSet() && !rhs.typeIsSet()) || (typeIsSet() && rhs.typeIsSet() && getType() == rhs.getType())) &&
    
    
    ((!startDaysInPastIsSet() && !rhs.startDaysInPastIsSet()) || (startDaysInPastIsSet() && rhs.startDaysInPastIsSet() && getStartDaysInPast() == rhs.getStartDaysInPast())) &&
    
    
    ((!endDaysInPastIsSet() && !rhs.endDaysInPastIsSet()) || (endDaysInPastIsSet() && rhs.endDaysInPastIsSet() && getEndDaysInPast() == rhs.getEndDaysInPast()))
    
    ;
}

bool TemplateResponse_date_range_relative_date_range::operator!=(const TemplateResponse_date_range_relative_date_range& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const TemplateResponse_date_range_relative_date_range& o)
{
    j = nlohmann::json::object();
    if(o.typeIsSet())
        j["type"] = o.m_Type;
    if(o.startDaysInPastIsSet())
        j["start_days_in_past"] = o.m_Start_days_in_past;
    if(o.endDaysInPastIsSet())
        j["end_days_in_past"] = o.m_End_days_in_past;
    
}

void from_json(const nlohmann::json& j, TemplateResponse_date_range_relative_date_range& o)
{
    if(j.find("type") != j.end())
    {
        j.at("type").get_to(o.m_Type);
        o.m_TypeIsSet = true;
    } 
    if(j.find("start_days_in_past") != j.end())
    {
        j.at("start_days_in_past").get_to(o.m_Start_days_in_past);
        o.m_Start_days_in_pastIsSet = true;
    } 
    if(j.find("end_days_in_past") != j.end())
    {
        j.at("end_days_in_past").get_to(o.m_End_days_in_past);
        o.m_End_days_in_pastIsSet = true;
    } 
    
}

std::string TemplateResponse_date_range_relative_date_range::getType() const
{
    return m_Type;
}
void TemplateResponse_date_range_relative_date_range::setType(std::string const& value)
{
    m_Type = value;
    m_TypeIsSet = true;
}
bool TemplateResponse_date_range_relative_date_range::typeIsSet() const
{
    return m_TypeIsSet;
}
void TemplateResponse_date_range_relative_date_range::unsetType()
{
    m_TypeIsSet = false;
}
double TemplateResponse_date_range_relative_date_range::getStartDaysInPast() const
{
    return m_Start_days_in_past;
}
void TemplateResponse_date_range_relative_date_range::setStartDaysInPast(double const value)
{
    m_Start_days_in_past = value;
    m_Start_days_in_pastIsSet = true;
}
bool TemplateResponse_date_range_relative_date_range::startDaysInPastIsSet() const
{
    return m_Start_days_in_pastIsSet;
}
void TemplateResponse_date_range_relative_date_range::unsetStart_days_in_past()
{
    m_Start_days_in_pastIsSet = false;
}
double TemplateResponse_date_range_relative_date_range::getEndDaysInPast() const
{
    return m_End_days_in_past;
}
void TemplateResponse_date_range_relative_date_range::setEndDaysInPast(double const value)
{
    m_End_days_in_past = value;
    m_End_days_in_pastIsSet = true;
}
bool TemplateResponse_date_range_relative_date_range::endDaysInPastIsSet() const
{
    return m_End_days_in_pastIsSet;
}
void TemplateResponse_date_range_relative_date_range::unsetEnd_days_in_past()
{
    m_End_days_in_pastIsSet = false;
}


} // namespace org::openapitools::server::model

