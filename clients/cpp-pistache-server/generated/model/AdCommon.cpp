/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "AdCommon.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

AdCommon::AdCommon()
{
    m_Ad_group_id = "";
    m_Ad_group_idIsSet = false;
    m_Android_deep_link = "";
    m_Android_deep_linkIsSet = false;
    m_Carousel_android_deep_linksIsSet = false;
    m_Carousel_destination_urlsIsSet = false;
    m_Carousel_ios_deep_linksIsSet = false;
    m_Click_tracking_url = "";
    m_Click_tracking_urlIsSet = false;
    m_Creative_typeIsSet = false;
    m_Destination_url = "";
    m_Destination_urlIsSet = false;
    m_Ios_deep_link = "";
    m_Ios_deep_linkIsSet = false;
    m_Is_pin_deleted = false;
    m_Is_pin_deletedIsSet = false;
    m_Is_removable = false;
    m_Is_removableIsSet = false;
    m_Name = "";
    m_NameIsSet = false;
    m_StatusIsSet = false;
    m_Tracking_urlsIsSet = false;
    m_View_tracking_url = "";
    m_View_tracking_urlIsSet = false;
    m_Lead_form_id = "";
    m_Lead_form_idIsSet = false;
    m_Grid_click_typeIsSet = false;
    m_Customizable_cta_type = "";
    m_Customizable_cta_typeIsSet = false;
    m_Quiz_pin_dataIsSet = false;
    
}

void AdCommon::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool AdCommon::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool AdCommon::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "AdCommon" : pathPrefix;

         
    if (adGroupIdIsSet())
    {
        const std::string& value = m_Ad_group_id;
        const std::string currentValuePath = _pathPrefix + ".adGroupId";
                
        

    }
             
    if (carouselAndroidDeepLinksIsSet())
    {
        const std::vector<std::string>& value = m_Carousel_android_deep_links;
        const std::string currentValuePath = _pathPrefix + ".carouselAndroidDeepLinks";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const std::string& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }

    }
         
    if (carouselDestinationUrlsIsSet())
    {
        const std::vector<std::string>& value = m_Carousel_destination_urls;
        const std::string currentValuePath = _pathPrefix + ".carouselDestinationUrls";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const std::string& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }

    }
         
    if (carouselIosDeepLinksIsSet())
    {
        const std::vector<std::string>& value = m_Carousel_ios_deep_links;
        const std::string currentValuePath = _pathPrefix + ".carouselIosDeepLinks";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const std::string& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }

    }
                                                 
    if (leadFormIdIsSet())
    {
        const std::string& value = m_Lead_form_id;
        const std::string currentValuePath = _pathPrefix + ".leadFormId";
                
        

    }
                
    return success;
}

bool AdCommon::operator==(const AdCommon& rhs) const
{
    return
    
    
    
    ((!adGroupIdIsSet() && !rhs.adGroupIdIsSet()) || (adGroupIdIsSet() && rhs.adGroupIdIsSet() && getAdGroupId() == rhs.getAdGroupId())) &&
    
    
    ((!androidDeepLinkIsSet() && !rhs.androidDeepLinkIsSet()) || (androidDeepLinkIsSet() && rhs.androidDeepLinkIsSet() && getAndroidDeepLink() == rhs.getAndroidDeepLink())) &&
    
    
    ((!carouselAndroidDeepLinksIsSet() && !rhs.carouselAndroidDeepLinksIsSet()) || (carouselAndroidDeepLinksIsSet() && rhs.carouselAndroidDeepLinksIsSet() && getCarouselAndroidDeepLinks() == rhs.getCarouselAndroidDeepLinks())) &&
    
    
    ((!carouselDestinationUrlsIsSet() && !rhs.carouselDestinationUrlsIsSet()) || (carouselDestinationUrlsIsSet() && rhs.carouselDestinationUrlsIsSet() && getCarouselDestinationUrls() == rhs.getCarouselDestinationUrls())) &&
    
    
    ((!carouselIosDeepLinksIsSet() && !rhs.carouselIosDeepLinksIsSet()) || (carouselIosDeepLinksIsSet() && rhs.carouselIosDeepLinksIsSet() && getCarouselIosDeepLinks() == rhs.getCarouselIosDeepLinks())) &&
    
    
    ((!clickTrackingUrlIsSet() && !rhs.clickTrackingUrlIsSet()) || (clickTrackingUrlIsSet() && rhs.clickTrackingUrlIsSet() && getClickTrackingUrl() == rhs.getClickTrackingUrl())) &&
    
    
    ((!creativeTypeIsSet() && !rhs.creativeTypeIsSet()) || (creativeTypeIsSet() && rhs.creativeTypeIsSet() && getCreativeType() == rhs.getCreativeType())) &&
    
    
    ((!destinationUrlIsSet() && !rhs.destinationUrlIsSet()) || (destinationUrlIsSet() && rhs.destinationUrlIsSet() && getDestinationUrl() == rhs.getDestinationUrl())) &&
    
    
    ((!iosDeepLinkIsSet() && !rhs.iosDeepLinkIsSet()) || (iosDeepLinkIsSet() && rhs.iosDeepLinkIsSet() && getIosDeepLink() == rhs.getIosDeepLink())) &&
    
    
    ((!isPinDeletedIsSet() && !rhs.isPinDeletedIsSet()) || (isPinDeletedIsSet() && rhs.isPinDeletedIsSet() && isIsPinDeleted() == rhs.isIsPinDeleted())) &&
    
    
    ((!isRemovableIsSet() && !rhs.isRemovableIsSet()) || (isRemovableIsSet() && rhs.isRemovableIsSet() && isIsRemovable() == rhs.isIsRemovable())) &&
    
    
    ((!nameIsSet() && !rhs.nameIsSet()) || (nameIsSet() && rhs.nameIsSet() && getName() == rhs.getName())) &&
    
    
    ((!statusIsSet() && !rhs.statusIsSet()) || (statusIsSet() && rhs.statusIsSet() && getStatus() == rhs.getStatus())) &&
    
    
    ((!trackingUrlsIsSet() && !rhs.trackingUrlsIsSet()) || (trackingUrlsIsSet() && rhs.trackingUrlsIsSet() && getTrackingUrls() == rhs.getTrackingUrls())) &&
    
    
    ((!viewTrackingUrlIsSet() && !rhs.viewTrackingUrlIsSet()) || (viewTrackingUrlIsSet() && rhs.viewTrackingUrlIsSet() && getViewTrackingUrl() == rhs.getViewTrackingUrl())) &&
    
    
    ((!leadFormIdIsSet() && !rhs.leadFormIdIsSet()) || (leadFormIdIsSet() && rhs.leadFormIdIsSet() && getLeadFormId() == rhs.getLeadFormId())) &&
    
    
    ((!gridClickTypeIsSet() && !rhs.gridClickTypeIsSet()) || (gridClickTypeIsSet() && rhs.gridClickTypeIsSet() && getGridClickType() == rhs.getGridClickType())) &&
    
    
    ((!customizableCtaTypeIsSet() && !rhs.customizableCtaTypeIsSet()) || (customizableCtaTypeIsSet() && rhs.customizableCtaTypeIsSet() && getCustomizableCtaType() == rhs.getCustomizableCtaType())) &&
    
    
    ((!quizPinDataIsSet() && !rhs.quizPinDataIsSet()) || (quizPinDataIsSet() && rhs.quizPinDataIsSet() && getQuizPinData() == rhs.getQuizPinData()))
    
    ;
}

bool AdCommon::operator!=(const AdCommon& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const AdCommon& o)
{
    j = nlohmann::json::object();
    if(o.adGroupIdIsSet())
        j["ad_group_id"] = o.m_Ad_group_id;
    if(o.androidDeepLinkIsSet())
        j["android_deep_link"] = o.m_Android_deep_link;
    if(o.carouselAndroidDeepLinksIsSet() || !o.m_Carousel_android_deep_links.empty())
        j["carousel_android_deep_links"] = o.m_Carousel_android_deep_links;
    if(o.carouselDestinationUrlsIsSet() || !o.m_Carousel_destination_urls.empty())
        j["carousel_destination_urls"] = o.m_Carousel_destination_urls;
    if(o.carouselIosDeepLinksIsSet() || !o.m_Carousel_ios_deep_links.empty())
        j["carousel_ios_deep_links"] = o.m_Carousel_ios_deep_links;
    if(o.clickTrackingUrlIsSet())
        j["click_tracking_url"] = o.m_Click_tracking_url;
    if(o.creativeTypeIsSet())
        j["creative_type"] = o.m_Creative_type;
    if(o.destinationUrlIsSet())
        j["destination_url"] = o.m_Destination_url;
    if(o.iosDeepLinkIsSet())
        j["ios_deep_link"] = o.m_Ios_deep_link;
    if(o.isPinDeletedIsSet())
        j["is_pin_deleted"] = o.m_Is_pin_deleted;
    if(o.isRemovableIsSet())
        j["is_removable"] = o.m_Is_removable;
    if(o.nameIsSet())
        j["name"] = o.m_Name;
    if(o.statusIsSet())
        j["status"] = o.m_Status;
    if(o.trackingUrlsIsSet())
        j["tracking_urls"] = o.m_Tracking_urls;
    if(o.viewTrackingUrlIsSet())
        j["view_tracking_url"] = o.m_View_tracking_url;
    if(o.leadFormIdIsSet())
        j["lead_form_id"] = o.m_Lead_form_id;
    if(o.gridClickTypeIsSet())
        j["grid_click_type"] = o.m_Grid_click_type;
    if(o.customizableCtaTypeIsSet())
        j["customizable_cta_type"] = o.m_Customizable_cta_type;
    if(o.quizPinDataIsSet())
        j["quiz_pin_data"] = o.m_Quiz_pin_data;
    
}

void from_json(const nlohmann::json& j, AdCommon& o)
{
    if(j.find("ad_group_id") != j.end())
    {
        j.at("ad_group_id").get_to(o.m_Ad_group_id);
        o.m_Ad_group_idIsSet = true;
    } 
    if(j.find("android_deep_link") != j.end())
    {
        j.at("android_deep_link").get_to(o.m_Android_deep_link);
        o.m_Android_deep_linkIsSet = true;
    } 
    if(j.find("carousel_android_deep_links") != j.end())
    {
        j.at("carousel_android_deep_links").get_to(o.m_Carousel_android_deep_links);
        o.m_Carousel_android_deep_linksIsSet = true;
    } 
    if(j.find("carousel_destination_urls") != j.end())
    {
        j.at("carousel_destination_urls").get_to(o.m_Carousel_destination_urls);
        o.m_Carousel_destination_urlsIsSet = true;
    } 
    if(j.find("carousel_ios_deep_links") != j.end())
    {
        j.at("carousel_ios_deep_links").get_to(o.m_Carousel_ios_deep_links);
        o.m_Carousel_ios_deep_linksIsSet = true;
    } 
    if(j.find("click_tracking_url") != j.end())
    {
        j.at("click_tracking_url").get_to(o.m_Click_tracking_url);
        o.m_Click_tracking_urlIsSet = true;
    } 
    if(j.find("creative_type") != j.end())
    {
        j.at("creative_type").get_to(o.m_Creative_type);
        o.m_Creative_typeIsSet = true;
    } 
    if(j.find("destination_url") != j.end())
    {
        j.at("destination_url").get_to(o.m_Destination_url);
        o.m_Destination_urlIsSet = true;
    } 
    if(j.find("ios_deep_link") != j.end())
    {
        j.at("ios_deep_link").get_to(o.m_Ios_deep_link);
        o.m_Ios_deep_linkIsSet = true;
    } 
    if(j.find("is_pin_deleted") != j.end())
    {
        j.at("is_pin_deleted").get_to(o.m_Is_pin_deleted);
        o.m_Is_pin_deletedIsSet = true;
    } 
    if(j.find("is_removable") != j.end())
    {
        j.at("is_removable").get_to(o.m_Is_removable);
        o.m_Is_removableIsSet = true;
    } 
    if(j.find("name") != j.end())
    {
        j.at("name").get_to(o.m_Name);
        o.m_NameIsSet = true;
    } 
    if(j.find("status") != j.end())
    {
        j.at("status").get_to(o.m_Status);
        o.m_StatusIsSet = true;
    } 
    if(j.find("tracking_urls") != j.end())
    {
        j.at("tracking_urls").get_to(o.m_Tracking_urls);
        o.m_Tracking_urlsIsSet = true;
    } 
    if(j.find("view_tracking_url") != j.end())
    {
        j.at("view_tracking_url").get_to(o.m_View_tracking_url);
        o.m_View_tracking_urlIsSet = true;
    } 
    if(j.find("lead_form_id") != j.end())
    {
        j.at("lead_form_id").get_to(o.m_Lead_form_id);
        o.m_Lead_form_idIsSet = true;
    } 
    if(j.find("grid_click_type") != j.end())
    {
        j.at("grid_click_type").get_to(o.m_Grid_click_type);
        o.m_Grid_click_typeIsSet = true;
    } 
    if(j.find("customizable_cta_type") != j.end())
    {
        j.at("customizable_cta_type").get_to(o.m_Customizable_cta_type);
        o.m_Customizable_cta_typeIsSet = true;
    } 
    if(j.find("quiz_pin_data") != j.end())
    {
        j.at("quiz_pin_data").get_to(o.m_Quiz_pin_data);
        o.m_Quiz_pin_dataIsSet = true;
    } 
    
}

std::string AdCommon::getAdGroupId() const
{
    return m_Ad_group_id;
}
void AdCommon::setAdGroupId(std::string const& value)
{
    m_Ad_group_id = value;
    m_Ad_group_idIsSet = true;
}
bool AdCommon::adGroupIdIsSet() const
{
    return m_Ad_group_idIsSet;
}
void AdCommon::unsetAd_group_id()
{
    m_Ad_group_idIsSet = false;
}
std::string AdCommon::getAndroidDeepLink() const
{
    return m_Android_deep_link;
}
void AdCommon::setAndroidDeepLink(std::string const& value)
{
    m_Android_deep_link = value;
    m_Android_deep_linkIsSet = true;
}
bool AdCommon::androidDeepLinkIsSet() const
{
    return m_Android_deep_linkIsSet;
}
void AdCommon::unsetAndroid_deep_link()
{
    m_Android_deep_linkIsSet = false;
}
std::vector<std::string> AdCommon::getCarouselAndroidDeepLinks() const
{
    return m_Carousel_android_deep_links;
}
void AdCommon::setCarouselAndroidDeepLinks(std::vector<std::string> const& value)
{
    m_Carousel_android_deep_links = value;
    m_Carousel_android_deep_linksIsSet = true;
}
bool AdCommon::carouselAndroidDeepLinksIsSet() const
{
    return m_Carousel_android_deep_linksIsSet;
}
void AdCommon::unsetCarousel_android_deep_links()
{
    m_Carousel_android_deep_linksIsSet = false;
}
std::vector<std::string> AdCommon::getCarouselDestinationUrls() const
{
    return m_Carousel_destination_urls;
}
void AdCommon::setCarouselDestinationUrls(std::vector<std::string> const& value)
{
    m_Carousel_destination_urls = value;
    m_Carousel_destination_urlsIsSet = true;
}
bool AdCommon::carouselDestinationUrlsIsSet() const
{
    return m_Carousel_destination_urlsIsSet;
}
void AdCommon::unsetCarousel_destination_urls()
{
    m_Carousel_destination_urlsIsSet = false;
}
std::vector<std::string> AdCommon::getCarouselIosDeepLinks() const
{
    return m_Carousel_ios_deep_links;
}
void AdCommon::setCarouselIosDeepLinks(std::vector<std::string> const& value)
{
    m_Carousel_ios_deep_links = value;
    m_Carousel_ios_deep_linksIsSet = true;
}
bool AdCommon::carouselIosDeepLinksIsSet() const
{
    return m_Carousel_ios_deep_linksIsSet;
}
void AdCommon::unsetCarousel_ios_deep_links()
{
    m_Carousel_ios_deep_linksIsSet = false;
}
std::string AdCommon::getClickTrackingUrl() const
{
    return m_Click_tracking_url;
}
void AdCommon::setClickTrackingUrl(std::string const& value)
{
    m_Click_tracking_url = value;
    m_Click_tracking_urlIsSet = true;
}
bool AdCommon::clickTrackingUrlIsSet() const
{
    return m_Click_tracking_urlIsSet;
}
void AdCommon::unsetClick_tracking_url()
{
    m_Click_tracking_urlIsSet = false;
}
org::openapitools::server::model::CreativeType AdCommon::getCreativeType() const
{
    return m_Creative_type;
}
void AdCommon::setCreativeType(org::openapitools::server::model::CreativeType const& value)
{
    m_Creative_type = value;
    m_Creative_typeIsSet = true;
}
bool AdCommon::creativeTypeIsSet() const
{
    return m_Creative_typeIsSet;
}
void AdCommon::unsetCreative_type()
{
    m_Creative_typeIsSet = false;
}
std::string AdCommon::getDestinationUrl() const
{
    return m_Destination_url;
}
void AdCommon::setDestinationUrl(std::string const& value)
{
    m_Destination_url = value;
    m_Destination_urlIsSet = true;
}
bool AdCommon::destinationUrlIsSet() const
{
    return m_Destination_urlIsSet;
}
void AdCommon::unsetDestination_url()
{
    m_Destination_urlIsSet = false;
}
std::string AdCommon::getIosDeepLink() const
{
    return m_Ios_deep_link;
}
void AdCommon::setIosDeepLink(std::string const& value)
{
    m_Ios_deep_link = value;
    m_Ios_deep_linkIsSet = true;
}
bool AdCommon::iosDeepLinkIsSet() const
{
    return m_Ios_deep_linkIsSet;
}
void AdCommon::unsetIos_deep_link()
{
    m_Ios_deep_linkIsSet = false;
}
bool AdCommon::isIsPinDeleted() const
{
    return m_Is_pin_deleted;
}
void AdCommon::setIsPinDeleted(bool const value)
{
    m_Is_pin_deleted = value;
    m_Is_pin_deletedIsSet = true;
}
bool AdCommon::isPinDeletedIsSet() const
{
    return m_Is_pin_deletedIsSet;
}
void AdCommon::unsetIs_pin_deleted()
{
    m_Is_pin_deletedIsSet = false;
}
bool AdCommon::isIsRemovable() const
{
    return m_Is_removable;
}
void AdCommon::setIsRemovable(bool const value)
{
    m_Is_removable = value;
    m_Is_removableIsSet = true;
}
bool AdCommon::isRemovableIsSet() const
{
    return m_Is_removableIsSet;
}
void AdCommon::unsetIs_removable()
{
    m_Is_removableIsSet = false;
}
std::string AdCommon::getName() const
{
    return m_Name;
}
void AdCommon::setName(std::string const& value)
{
    m_Name = value;
    m_NameIsSet = true;
}
bool AdCommon::nameIsSet() const
{
    return m_NameIsSet;
}
void AdCommon::unsetName()
{
    m_NameIsSet = false;
}
org::openapitools::server::model::EntityStatus AdCommon::getStatus() const
{
    return m_Status;
}
void AdCommon::setStatus(org::openapitools::server::model::EntityStatus const& value)
{
    m_Status = value;
    m_StatusIsSet = true;
}
bool AdCommon::statusIsSet() const
{
    return m_StatusIsSet;
}
void AdCommon::unsetStatus()
{
    m_StatusIsSet = false;
}
org::openapitools::server::model::TrackingUrls AdCommon::getTrackingUrls() const
{
    return m_Tracking_urls;
}
void AdCommon::setTrackingUrls(org::openapitools::server::model::TrackingUrls const& value)
{
    m_Tracking_urls = value;
    m_Tracking_urlsIsSet = true;
}
bool AdCommon::trackingUrlsIsSet() const
{
    return m_Tracking_urlsIsSet;
}
void AdCommon::unsetTracking_urls()
{
    m_Tracking_urlsIsSet = false;
}
std::string AdCommon::getViewTrackingUrl() const
{
    return m_View_tracking_url;
}
void AdCommon::setViewTrackingUrl(std::string const& value)
{
    m_View_tracking_url = value;
    m_View_tracking_urlIsSet = true;
}
bool AdCommon::viewTrackingUrlIsSet() const
{
    return m_View_tracking_urlIsSet;
}
void AdCommon::unsetView_tracking_url()
{
    m_View_tracking_urlIsSet = false;
}
std::string AdCommon::getLeadFormId() const
{
    return m_Lead_form_id;
}
void AdCommon::setLeadFormId(std::string const& value)
{
    m_Lead_form_id = value;
    m_Lead_form_idIsSet = true;
}
bool AdCommon::leadFormIdIsSet() const
{
    return m_Lead_form_idIsSet;
}
void AdCommon::unsetLead_form_id()
{
    m_Lead_form_idIsSet = false;
}
org::openapitools::server::model::GridClickType AdCommon::getGridClickType() const
{
    return m_Grid_click_type;
}
void AdCommon::setGridClickType(org::openapitools::server::model::GridClickType const& value)
{
    m_Grid_click_type = value;
    m_Grid_click_typeIsSet = true;
}
bool AdCommon::gridClickTypeIsSet() const
{
    return m_Grid_click_typeIsSet;
}
void AdCommon::unsetGrid_click_type()
{
    m_Grid_click_typeIsSet = false;
}
std::string AdCommon::getCustomizableCtaType() const
{
    return m_Customizable_cta_type;
}
void AdCommon::setCustomizableCtaType(std::string const& value)
{
    m_Customizable_cta_type = value;
    m_Customizable_cta_typeIsSet = true;
}
bool AdCommon::customizableCtaTypeIsSet() const
{
    return m_Customizable_cta_typeIsSet;
}
void AdCommon::unsetCustomizable_cta_type()
{
    m_Customizable_cta_typeIsSet = false;
}
org::openapitools::server::model::QuizPinData AdCommon::getQuizPinData() const
{
    return m_Quiz_pin_data;
}
void AdCommon::setQuizPinData(org::openapitools::server::model::QuizPinData const& value)
{
    m_Quiz_pin_data = value;
    m_Quiz_pin_dataIsSet = true;
}
bool AdCommon::quizPinDataIsSet() const
{
    return m_Quiz_pin_dataIsSet;
}
void AdCommon::unsetQuiz_pin_data()
{
    m_Quiz_pin_dataIsSet = false;
}


} // namespace org::openapitools::server::model

