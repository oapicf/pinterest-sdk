/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "LinkedBusiness.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

LinkedBusiness::LinkedBusiness()
{
    m_Username = "";
    m_UsernameIsSet = false;
    m_Image_small_url = "";
    m_Image_small_urlIsSet = false;
    m_Image_medium_url = "";
    m_Image_medium_urlIsSet = false;
    m_Image_large_url = "";
    m_Image_large_urlIsSet = false;
    m_Image_xlarge_url = "";
    m_Image_xlarge_urlIsSet = false;
    
}

void LinkedBusiness::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool LinkedBusiness::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool LinkedBusiness::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "LinkedBusiness" : pathPrefix;

                        
    return success;
}

bool LinkedBusiness::operator==(const LinkedBusiness& rhs) const
{
    return
    
    
    
    ((!usernameIsSet() && !rhs.usernameIsSet()) || (usernameIsSet() && rhs.usernameIsSet() && getUsername() == rhs.getUsername())) &&
    
    
    ((!imageSmallUrlIsSet() && !rhs.imageSmallUrlIsSet()) || (imageSmallUrlIsSet() && rhs.imageSmallUrlIsSet() && getImageSmallUrl() == rhs.getImageSmallUrl())) &&
    
    
    ((!imageMediumUrlIsSet() && !rhs.imageMediumUrlIsSet()) || (imageMediumUrlIsSet() && rhs.imageMediumUrlIsSet() && getImageMediumUrl() == rhs.getImageMediumUrl())) &&
    
    
    ((!imageLargeUrlIsSet() && !rhs.imageLargeUrlIsSet()) || (imageLargeUrlIsSet() && rhs.imageLargeUrlIsSet() && getImageLargeUrl() == rhs.getImageLargeUrl())) &&
    
    
    ((!imageXlargeUrlIsSet() && !rhs.imageXlargeUrlIsSet()) || (imageXlargeUrlIsSet() && rhs.imageXlargeUrlIsSet() && getImageXlargeUrl() == rhs.getImageXlargeUrl()))
    
    ;
}

bool LinkedBusiness::operator!=(const LinkedBusiness& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const LinkedBusiness& o)
{
    j = nlohmann::json::object();
    if(o.usernameIsSet())
        j["username"] = o.m_Username;
    if(o.imageSmallUrlIsSet())
        j["image_small_url"] = o.m_Image_small_url;
    if(o.imageMediumUrlIsSet())
        j["image_medium_url"] = o.m_Image_medium_url;
    if(o.imageLargeUrlIsSet())
        j["image_large_url"] = o.m_Image_large_url;
    if(o.imageXlargeUrlIsSet())
        j["image_xlarge_url"] = o.m_Image_xlarge_url;
    
}

void from_json(const nlohmann::json& j, LinkedBusiness& o)
{
    if(j.find("username") != j.end())
    {
        j.at("username").get_to(o.m_Username);
        o.m_UsernameIsSet = true;
    } 
    if(j.find("image_small_url") != j.end())
    {
        j.at("image_small_url").get_to(o.m_Image_small_url);
        o.m_Image_small_urlIsSet = true;
    } 
    if(j.find("image_medium_url") != j.end())
    {
        j.at("image_medium_url").get_to(o.m_Image_medium_url);
        o.m_Image_medium_urlIsSet = true;
    } 
    if(j.find("image_large_url") != j.end())
    {
        j.at("image_large_url").get_to(o.m_Image_large_url);
        o.m_Image_large_urlIsSet = true;
    } 
    if(j.find("image_xlarge_url") != j.end())
    {
        j.at("image_xlarge_url").get_to(o.m_Image_xlarge_url);
        o.m_Image_xlarge_urlIsSet = true;
    } 
    
}

std::string LinkedBusiness::getUsername() const
{
    return m_Username;
}
void LinkedBusiness::setUsername(std::string const& value)
{
    m_Username = value;
    m_UsernameIsSet = true;
}
bool LinkedBusiness::usernameIsSet() const
{
    return m_UsernameIsSet;
}
void LinkedBusiness::unsetUsername()
{
    m_UsernameIsSet = false;
}
std::string LinkedBusiness::getImageSmallUrl() const
{
    return m_Image_small_url;
}
void LinkedBusiness::setImageSmallUrl(std::string const& value)
{
    m_Image_small_url = value;
    m_Image_small_urlIsSet = true;
}
bool LinkedBusiness::imageSmallUrlIsSet() const
{
    return m_Image_small_urlIsSet;
}
void LinkedBusiness::unsetImage_small_url()
{
    m_Image_small_urlIsSet = false;
}
std::string LinkedBusiness::getImageMediumUrl() const
{
    return m_Image_medium_url;
}
void LinkedBusiness::setImageMediumUrl(std::string const& value)
{
    m_Image_medium_url = value;
    m_Image_medium_urlIsSet = true;
}
bool LinkedBusiness::imageMediumUrlIsSet() const
{
    return m_Image_medium_urlIsSet;
}
void LinkedBusiness::unsetImage_medium_url()
{
    m_Image_medium_urlIsSet = false;
}
std::string LinkedBusiness::getImageLargeUrl() const
{
    return m_Image_large_url;
}
void LinkedBusiness::setImageLargeUrl(std::string const& value)
{
    m_Image_large_url = value;
    m_Image_large_urlIsSet = true;
}
bool LinkedBusiness::imageLargeUrlIsSet() const
{
    return m_Image_large_urlIsSet;
}
void LinkedBusiness::unsetImage_large_url()
{
    m_Image_large_urlIsSet = false;
}
std::string LinkedBusiness::getImageXlargeUrl() const
{
    return m_Image_xlarge_url;
}
void LinkedBusiness::setImageXlargeUrl(std::string const& value)
{
    m_Image_xlarge_url = value;
    m_Image_xlarge_urlIsSet = true;
}
bool LinkedBusiness::imageXlargeUrlIsSet() const
{
    return m_Image_xlarge_urlIsSet;
}
void LinkedBusiness::unsetImage_xlarge_url()
{
    m_Image_xlarge_urlIsSet = false;
}


} // namespace org::openapitools::server::model

