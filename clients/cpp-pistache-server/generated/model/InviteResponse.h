/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * InviteResponse.h
 *
 * 
 */

#ifndef InviteResponse_H_
#define InviteResponse_H_


#include "InviteAssetsSummary.h"
#include <string>
#include "BaseInviteDataResponse_invite_data.h"
#include <vector>
#include "BusinessAccessUserSummary.h"
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// 
/// </summary>
class  InviteResponse
{
public:
    InviteResponse();
    virtual ~InviteResponse() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const InviteResponse& rhs) const;
    bool operator!=(const InviteResponse& rhs) const;

    /////////////////////////////////////////////
    /// InviteResponse members

    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::InviteAssetsSummary getAssetsSummary() const;
    void setAssetsSummary(org::openapitools::server::model::InviteAssetsSummary const& value);
    bool assetsSummaryIsSet() const;
    void unsetAssets_summary();
    /// <summary>
    /// The access level a user would be granted on the business if the invite/request is accepted. This can be EMPLOYEE, BIZ_ADMIN, or PARTNER.
    /// </summary>
    std::vector<std::string> getBusinessRoles() const;
    void setBusinessRoles(std::vector<std::string> const& value);
    bool businessRolesIsSet() const;
    void unsetBusiness_roles();
    /// <summary>
    /// Metadata for the business that created the invite/request.
    /// </summary>
    org::openapitools::server::model::BusinessAccessUserSummary getCreatedByBusiness() const;
    void setCreatedByBusiness(org::openapitools::server::model::BusinessAccessUserSummary const& value);
    bool createdByBusinessIsSet() const;
    void unsetCreated_by_business();
    /// <summary>
    /// Metadata for the user that created the invite/request.
    /// </summary>
    org::openapitools::server::model::BusinessAccessUserSummary getCreatedByUser() const;
    void setCreatedByUser(org::openapitools::server::model::BusinessAccessUserSummary const& value);
    bool createdByUserIsSet() const;
    void unsetCreated_by_user();
    /// <summary>
    /// The time the invite/request was created. Returned in milliseconds.
    /// </summary>
    int32_t getCreatedTime() const;
    void setCreatedTime(int32_t const value);
    bool createdTimeIsSet() const;
    void unsetCreated_time();
    /// <summary>
    /// Unique identifier of the invite/request.
    /// </summary>
    std::string getId() const;
    void setId(std::string const& value);
    bool idIsSet() const;
    void unsetId();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::BaseInviteDataResponse_invite_data getInviteData() const;
    void setInviteData(org::openapitools::server::model::BaseInviteDataResponse_invite_data const& value);
    bool inviteDataIsSet() const;
    void unsetInvite_data();
    /// <summary>
    /// Indicates whether the invite/request was received.
    /// </summary>
    bool isIsReceivedInvite() const;
    void setIsReceivedInvite(bool const value);
    bool isReceivedInviteIsSet() const;
    void unsetIs_received_invite();
    /// <summary>
    /// Metadata for the member/partner that was sent the invite/request.
    /// </summary>
    org::openapitools::server::model::BusinessAccessUserSummary getUser() const;
    void setUser(org::openapitools::server::model::BusinessAccessUserSummary const& value);
    bool userIsSet() const;
    void unsetUser();

    friend  void to_json(nlohmann::json& j, const InviteResponse& o);
    friend  void from_json(const nlohmann::json& j, InviteResponse& o);
protected:
    org::openapitools::server::model::InviteAssetsSummary m_Assets_summary;
    bool m_Assets_summaryIsSet;
    std::vector<std::string> m_Business_roles;
    bool m_Business_rolesIsSet;
    org::openapitools::server::model::BusinessAccessUserSummary m_Created_by_business;
    bool m_Created_by_businessIsSet;
    org::openapitools::server::model::BusinessAccessUserSummary m_Created_by_user;
    bool m_Created_by_userIsSet;
    int32_t m_Created_time;
    bool m_Created_timeIsSet;
    std::string m_Id;
    bool m_IdIsSet;
    org::openapitools::server::model::BaseInviteDataResponse_invite_data m_Invite_data;
    bool m_Invite_dataIsSet;
    bool m_Is_received_invite;
    bool m_Is_received_inviteIsSet;
    org::openapitools::server::model::BusinessAccessUserSummary m_User;
    bool m_UserIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* InviteResponse_H_ */
