/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "IntegrationLog.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

IntegrationLog::IntegrationLog()
{
    m_Client_timestamp = 0;
    m_Event_type = "";
    m_Log_level = "";
    m_External_business_id = "";
    m_External_business_idIsSet = false;
    m_Advertiser_id = "";
    m_Advertiser_idIsSet = false;
    m_Merchant_id = "";
    m_Merchant_idIsSet = false;
    m_Tag_id = "";
    m_Tag_idIsSet = false;
    m_Feed_profile_id = "";
    m_Feed_profile_idIsSet = false;
    m_Message = "";
    m_MessageIsSet = false;
    m_App_version_number = "";
    m_App_version_numberIsSet = false;
    m_Platform_version_number = "";
    m_Platform_version_numberIsSet = false;
    m_ErrorIsSet = false;
    m_RequestIsSet = false;
    
}

void IntegrationLog::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool IntegrationLog::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool IntegrationLog::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "IntegrationLog" : pathPrefix;

                     
    if (externalBusinessIdIsSet())
    {
        const std::string& value = m_External_business_id;
        const std::string currentValuePath = _pathPrefix + ".externalBusinessId";
                
        
        if (value.length() > 2048)
        {
            success = false;
            msg << currentValuePath << ": must be at most 2048 characters long;";
        }

    }
         
    if (advertiserIdIsSet())
    {
        const std::string& value = m_Advertiser_id;
        const std::string currentValuePath = _pathPrefix + ".advertiserId";
                
        
        if (value.length() > 128)
        {
            success = false;
            msg << currentValuePath << ": must be at most 128 characters long;";
        }

    }
         
    if (merchantIdIsSet())
    {
        const std::string& value = m_Merchant_id;
        const std::string currentValuePath = _pathPrefix + ".merchantId";
                
        
        if (value.length() > 128)
        {
            success = false;
            msg << currentValuePath << ": must be at most 128 characters long;";
        }

    }
         
    if (tagIdIsSet())
    {
        const std::string& value = m_Tag_id;
        const std::string currentValuePath = _pathPrefix + ".tagId";
                
        
        if (value.length() > 128)
        {
            success = false;
            msg << currentValuePath << ": must be at most 128 characters long;";
        }

    }
         
    if (feedProfileIdIsSet())
    {
        const std::string& value = m_Feed_profile_id;
        const std::string currentValuePath = _pathPrefix + ".feedProfileId";
                
        
        if (value.length() > 128)
        {
            success = false;
            msg << currentValuePath << ": must be at most 128 characters long;";
        }

    }
         
    if (messageIsSet())
    {
        const std::string& value = m_Message;
        const std::string currentValuePath = _pathPrefix + ".message";
                
        
        if (value.length() > 2048)
        {
            success = false;
            msg << currentValuePath << ": must be at most 2048 characters long;";
        }

    }
         
    if (appVersionNumberIsSet())
    {
        const std::string& value = m_App_version_number;
        const std::string currentValuePath = _pathPrefix + ".appVersionNumber";
                
        
        if (value.length() > 20)
        {
            success = false;
            msg << currentValuePath << ": must be at most 20 characters long;";
        }

    }
         
    if (platformVersionNumberIsSet())
    {
        const std::string& value = m_Platform_version_number;
        const std::string currentValuePath = _pathPrefix + ".platformVersionNumber";
                
        
        if (value.length() > 20)
        {
            success = false;
            msg << currentValuePath << ": must be at most 20 characters long;";
        }

    }
            
    return success;
}

bool IntegrationLog::operator==(const IntegrationLog& rhs) const
{
    return
    
    
    (getClientTimestamp() == rhs.getClientTimestamp())
     &&
    
    (getEventType() == rhs.getEventType())
     &&
    
    (getLogLevel() == rhs.getLogLevel())
     &&
    
    
    ((!externalBusinessIdIsSet() && !rhs.externalBusinessIdIsSet()) || (externalBusinessIdIsSet() && rhs.externalBusinessIdIsSet() && getExternalBusinessId() == rhs.getExternalBusinessId())) &&
    
    
    ((!advertiserIdIsSet() && !rhs.advertiserIdIsSet()) || (advertiserIdIsSet() && rhs.advertiserIdIsSet() && getAdvertiserId() == rhs.getAdvertiserId())) &&
    
    
    ((!merchantIdIsSet() && !rhs.merchantIdIsSet()) || (merchantIdIsSet() && rhs.merchantIdIsSet() && getMerchantId() == rhs.getMerchantId())) &&
    
    
    ((!tagIdIsSet() && !rhs.tagIdIsSet()) || (tagIdIsSet() && rhs.tagIdIsSet() && getTagId() == rhs.getTagId())) &&
    
    
    ((!feedProfileIdIsSet() && !rhs.feedProfileIdIsSet()) || (feedProfileIdIsSet() && rhs.feedProfileIdIsSet() && getFeedProfileId() == rhs.getFeedProfileId())) &&
    
    
    ((!messageIsSet() && !rhs.messageIsSet()) || (messageIsSet() && rhs.messageIsSet() && getMessage() == rhs.getMessage())) &&
    
    
    ((!appVersionNumberIsSet() && !rhs.appVersionNumberIsSet()) || (appVersionNumberIsSet() && rhs.appVersionNumberIsSet() && getAppVersionNumber() == rhs.getAppVersionNumber())) &&
    
    
    ((!platformVersionNumberIsSet() && !rhs.platformVersionNumberIsSet()) || (platformVersionNumberIsSet() && rhs.platformVersionNumberIsSet() && getPlatformVersionNumber() == rhs.getPlatformVersionNumber())) &&
    
    
    ((!errorIsSet() && !rhs.errorIsSet()) || (errorIsSet() && rhs.errorIsSet() && getError() == rhs.getError())) &&
    
    
    ((!requestIsSet() && !rhs.requestIsSet()) || (requestIsSet() && rhs.requestIsSet() && getRequest() == rhs.getRequest()))
    
    ;
}

bool IntegrationLog::operator!=(const IntegrationLog& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const IntegrationLog& o)
{
    j = nlohmann::json::object();
    j["client_timestamp"] = o.m_Client_timestamp;
    j["event_type"] = o.m_Event_type;
    j["log_level"] = o.m_Log_level;
    if(o.externalBusinessIdIsSet())
        j["external_business_id"] = o.m_External_business_id;
    if(o.advertiserIdIsSet())
        j["advertiser_id"] = o.m_Advertiser_id;
    if(o.merchantIdIsSet())
        j["merchant_id"] = o.m_Merchant_id;
    if(o.tagIdIsSet())
        j["tag_id"] = o.m_Tag_id;
    if(o.feedProfileIdIsSet())
        j["feed_profile_id"] = o.m_Feed_profile_id;
    if(o.messageIsSet())
        j["message"] = o.m_Message;
    if(o.appVersionNumberIsSet())
        j["app_version_number"] = o.m_App_version_number;
    if(o.platformVersionNumberIsSet())
        j["platform_version_number"] = o.m_Platform_version_number;
    if(o.errorIsSet())
        j["error"] = o.m_Error;
    if(o.requestIsSet())
        j["request"] = o.m_Request;
    
}

void from_json(const nlohmann::json& j, IntegrationLog& o)
{
    j.at("client_timestamp").get_to(o.m_Client_timestamp);
    j.at("event_type").get_to(o.m_Event_type);
    j.at("log_level").get_to(o.m_Log_level);
    if(j.find("external_business_id") != j.end())
    {
        j.at("external_business_id").get_to(o.m_External_business_id);
        o.m_External_business_idIsSet = true;
    } 
    if(j.find("advertiser_id") != j.end())
    {
        j.at("advertiser_id").get_to(o.m_Advertiser_id);
        o.m_Advertiser_idIsSet = true;
    } 
    if(j.find("merchant_id") != j.end())
    {
        j.at("merchant_id").get_to(o.m_Merchant_id);
        o.m_Merchant_idIsSet = true;
    } 
    if(j.find("tag_id") != j.end())
    {
        j.at("tag_id").get_to(o.m_Tag_id);
        o.m_Tag_idIsSet = true;
    } 
    if(j.find("feed_profile_id") != j.end())
    {
        j.at("feed_profile_id").get_to(o.m_Feed_profile_id);
        o.m_Feed_profile_idIsSet = true;
    } 
    if(j.find("message") != j.end())
    {
        j.at("message").get_to(o.m_Message);
        o.m_MessageIsSet = true;
    } 
    if(j.find("app_version_number") != j.end())
    {
        j.at("app_version_number").get_to(o.m_App_version_number);
        o.m_App_version_numberIsSet = true;
    } 
    if(j.find("platform_version_number") != j.end())
    {
        j.at("platform_version_number").get_to(o.m_Platform_version_number);
        o.m_Platform_version_numberIsSet = true;
    } 
    if(j.find("error") != j.end())
    {
        j.at("error").get_to(o.m_Error);
        o.m_ErrorIsSet = true;
    } 
    if(j.find("request") != j.end())
    {
        j.at("request").get_to(o.m_Request);
        o.m_RequestIsSet = true;
    } 
    
}

int32_t IntegrationLog::getClientTimestamp() const
{
    return m_Client_timestamp;
}
void IntegrationLog::setClientTimestamp(int32_t const value)
{
    m_Client_timestamp = value;
}
std::string IntegrationLog::getEventType() const
{
    return m_Event_type;
}
void IntegrationLog::setEventType(std::string const& value)
{
    m_Event_type = value;
}
std::string IntegrationLog::getLogLevel() const
{
    return m_Log_level;
}
void IntegrationLog::setLogLevel(std::string const& value)
{
    m_Log_level = value;
}
std::string IntegrationLog::getExternalBusinessId() const
{
    return m_External_business_id;
}
void IntegrationLog::setExternalBusinessId(std::string const& value)
{
    m_External_business_id = value;
    m_External_business_idIsSet = true;
}
bool IntegrationLog::externalBusinessIdIsSet() const
{
    return m_External_business_idIsSet;
}
void IntegrationLog::unsetExternal_business_id()
{
    m_External_business_idIsSet = false;
}
std::string IntegrationLog::getAdvertiserId() const
{
    return m_Advertiser_id;
}
void IntegrationLog::setAdvertiserId(std::string const& value)
{
    m_Advertiser_id = value;
    m_Advertiser_idIsSet = true;
}
bool IntegrationLog::advertiserIdIsSet() const
{
    return m_Advertiser_idIsSet;
}
void IntegrationLog::unsetAdvertiser_id()
{
    m_Advertiser_idIsSet = false;
}
std::string IntegrationLog::getMerchantId() const
{
    return m_Merchant_id;
}
void IntegrationLog::setMerchantId(std::string const& value)
{
    m_Merchant_id = value;
    m_Merchant_idIsSet = true;
}
bool IntegrationLog::merchantIdIsSet() const
{
    return m_Merchant_idIsSet;
}
void IntegrationLog::unsetMerchant_id()
{
    m_Merchant_idIsSet = false;
}
std::string IntegrationLog::getTagId() const
{
    return m_Tag_id;
}
void IntegrationLog::setTagId(std::string const& value)
{
    m_Tag_id = value;
    m_Tag_idIsSet = true;
}
bool IntegrationLog::tagIdIsSet() const
{
    return m_Tag_idIsSet;
}
void IntegrationLog::unsetTag_id()
{
    m_Tag_idIsSet = false;
}
std::string IntegrationLog::getFeedProfileId() const
{
    return m_Feed_profile_id;
}
void IntegrationLog::setFeedProfileId(std::string const& value)
{
    m_Feed_profile_id = value;
    m_Feed_profile_idIsSet = true;
}
bool IntegrationLog::feedProfileIdIsSet() const
{
    return m_Feed_profile_idIsSet;
}
void IntegrationLog::unsetFeed_profile_id()
{
    m_Feed_profile_idIsSet = false;
}
std::string IntegrationLog::getMessage() const
{
    return m_Message;
}
void IntegrationLog::setMessage(std::string const& value)
{
    m_Message = value;
    m_MessageIsSet = true;
}
bool IntegrationLog::messageIsSet() const
{
    return m_MessageIsSet;
}
void IntegrationLog::unsetMessage()
{
    m_MessageIsSet = false;
}
std::string IntegrationLog::getAppVersionNumber() const
{
    return m_App_version_number;
}
void IntegrationLog::setAppVersionNumber(std::string const& value)
{
    m_App_version_number = value;
    m_App_version_numberIsSet = true;
}
bool IntegrationLog::appVersionNumberIsSet() const
{
    return m_App_version_numberIsSet;
}
void IntegrationLog::unsetApp_version_number()
{
    m_App_version_numberIsSet = false;
}
std::string IntegrationLog::getPlatformVersionNumber() const
{
    return m_Platform_version_number;
}
void IntegrationLog::setPlatformVersionNumber(std::string const& value)
{
    m_Platform_version_number = value;
    m_Platform_version_numberIsSet = true;
}
bool IntegrationLog::platformVersionNumberIsSet() const
{
    return m_Platform_version_numberIsSet;
}
void IntegrationLog::unsetPlatform_version_number()
{
    m_Platform_version_numberIsSet = false;
}
org::openapitools::server::model::IntegrationLogClientError IntegrationLog::getError() const
{
    return m_Error;
}
void IntegrationLog::setError(org::openapitools::server::model::IntegrationLogClientError const& value)
{
    m_Error = value;
    m_ErrorIsSet = true;
}
bool IntegrationLog::errorIsSet() const
{
    return m_ErrorIsSet;
}
void IntegrationLog::unsetError()
{
    m_ErrorIsSet = false;
}
org::openapitools::server::model::IntegrationLogClientRequest IntegrationLog::getRequest() const
{
    return m_Request;
}
void IntegrationLog::setRequest(org::openapitools::server::model::IntegrationLogClientRequest const& value)
{
    m_Request = value;
    m_RequestIsSet = true;
}
bool IntegrationLog::requestIsSet() const
{
    return m_RequestIsSet;
}
void IntegrationLog::unsetRequest()
{
    m_RequestIsSet = false;
}


} // namespace org::openapitools::server::model

