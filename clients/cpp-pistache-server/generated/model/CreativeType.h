/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * CreativeType.h
 *
 * Ad creative type enum. For update, only draft ads may update creative type. &lt;/p&gt;&lt;strong&gt;Note:&lt;/strong&gt; SHOP_THE_PIN has been deprecated. Please use COLLECTION instead.
 */

#ifndef CreativeType_H_
#define CreativeType_H_


#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// Ad creative type enum. For update, only draft ads may update creative type. &lt;/p&gt;&lt;strong&gt;Note:&lt;/strong&gt; SHOP_THE_PIN has been deprecated. Please use COLLECTION instead.
/// </summary>
class  CreativeType
{
public:
    CreativeType();
    virtual ~CreativeType() = default;

    enum class eCreativeType {
    // To have a valid default value.
    // Avoiding name clashes with user defined
    // enum values
    INVALID_VALUE_OPENAPI_GENERATED = 0,
    REGULAR, 
    VIDEO, 
    SHOPPING, 
    CAROUSEL, 
    MAX_VIDEO, 
    SHOP_THE_PIN, 
    COLLECTION, 
    IDEA, 
    SHOWCASE, 
    QUIZ
    };

    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const CreativeType& rhs) const;
    bool operator!=(const CreativeType& rhs) const;

    /////////////////////////////////////////////
    /// CreativeType members

    CreativeType::eCreativeType getValue() const;
    void setValue(CreativeType::eCreativeType value);
    
    friend  void to_json(nlohmann::json& j, const CreativeType& o);
    friend  void from_json(const nlohmann::json& j, CreativeType& o);
protected:
    CreativeType::eCreativeType m_value = CreativeType::eCreativeType::INVALID_VALUE_OPENAPI_GENERATED;
};

} // namespace org::openapitools::server::model

#endif /* CreativeType_H_ */
