/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "Pin.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

Pin::Pin()
{
    m_Id = "";
    m_IdIsSet = false;
    m_Created_at = "";
    m_Created_atIsSet = false;
    m_Link = "";
    m_LinkIsSet = false;
    m_Title = "";
    m_TitleIsSet = false;
    m_Description = "";
    m_DescriptionIsSet = false;
    m_Dominant_color = "";
    m_Dominant_colorIsSet = false;
    m_Alt_text = "";
    m_Alt_textIsSet = false;
    m_Creative_typeIsSet = false;
    m_Board_id = "";
    m_Board_idIsSet = false;
    m_Board_section_id = "";
    m_Board_section_idIsSet = false;
    m_Board_ownerIsSet = false;
    m_Is_owner = false;
    m_Is_ownerIsSet = false;
    m_MediaIsSet = false;
    m_Media_sourceIsSet = false;
    m_Parent_pin_id = "";
    m_Parent_pin_idIsSet = false;
    m_Is_standard = false;
    m_Is_standardIsSet = false;
    m_Has_been_promoted = false;
    m_Has_been_promotedIsSet = false;
    m_Note = "";
    m_NoteIsSet = false;
    m_Pin_metricsIsSet = false;
    
}

void Pin::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool Pin::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool Pin::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "Pin" : pathPrefix;

         
    if (idIsSet())
    {
        const std::string& value = m_Id;
        const std::string currentValuePath = _pathPrefix + ".id";
                
        

    }
             
    if (linkIsSet())
    {
        const std::string& value = m_Link;
        const std::string currentValuePath = _pathPrefix + ".link";
                
        
        if (value.length() > 2048)
        {
            success = false;
            msg << currentValuePath << ": must be at most 2048 characters long;";
        }

    }
                     
    if (altTextIsSet())
    {
        const std::string& value = m_Alt_text;
        const std::string currentValuePath = _pathPrefix + ".altText";
                
        
        if (value.length() > 500)
        {
            success = false;
            msg << currentValuePath << ": must be at most 500 characters long;";
        }

    }
             
    if (boardIdIsSet())
    {
        const std::string& value = m_Board_id;
        const std::string currentValuePath = _pathPrefix + ".boardId";
                
        

    }
         
    if (boardSectionIdIsSet())
    {
        const std::string& value = m_Board_section_id;
        const std::string currentValuePath = _pathPrefix + ".boardSectionId";
                
        

    }
                         
    if (parentPinIdIsSet())
    {
        const std::string& value = m_Parent_pin_id;
        const std::string currentValuePath = _pathPrefix + ".parentPinId";
                
        

    }
                    
    return success;
}

bool Pin::operator==(const Pin& rhs) const
{
    return
    
    
    
    ((!idIsSet() && !rhs.idIsSet()) || (idIsSet() && rhs.idIsSet() && getId() == rhs.getId())) &&
    
    
    ((!createdAtIsSet() && !rhs.createdAtIsSet()) || (createdAtIsSet() && rhs.createdAtIsSet() && getCreatedAt() == rhs.getCreatedAt())) &&
    
    
    ((!linkIsSet() && !rhs.linkIsSet()) || (linkIsSet() && rhs.linkIsSet() && getLink() == rhs.getLink())) &&
    
    
    ((!titleIsSet() && !rhs.titleIsSet()) || (titleIsSet() && rhs.titleIsSet() && getTitle() == rhs.getTitle())) &&
    
    
    ((!descriptionIsSet() && !rhs.descriptionIsSet()) || (descriptionIsSet() && rhs.descriptionIsSet() && getDescription() == rhs.getDescription())) &&
    
    
    ((!dominantColorIsSet() && !rhs.dominantColorIsSet()) || (dominantColorIsSet() && rhs.dominantColorIsSet() && getDominantColor() == rhs.getDominantColor())) &&
    
    
    ((!altTextIsSet() && !rhs.altTextIsSet()) || (altTextIsSet() && rhs.altTextIsSet() && getAltText() == rhs.getAltText())) &&
    
    
    ((!creativeTypeIsSet() && !rhs.creativeTypeIsSet()) || (creativeTypeIsSet() && rhs.creativeTypeIsSet() && getCreativeType() == rhs.getCreativeType())) &&
    
    
    ((!boardIdIsSet() && !rhs.boardIdIsSet()) || (boardIdIsSet() && rhs.boardIdIsSet() && getBoardId() == rhs.getBoardId())) &&
    
    
    ((!boardSectionIdIsSet() && !rhs.boardSectionIdIsSet()) || (boardSectionIdIsSet() && rhs.boardSectionIdIsSet() && getBoardSectionId() == rhs.getBoardSectionId())) &&
    
    
    ((!boardOwnerIsSet() && !rhs.boardOwnerIsSet()) || (boardOwnerIsSet() && rhs.boardOwnerIsSet() && getBoardOwner() == rhs.getBoardOwner())) &&
    
    
    ((!isOwnerIsSet() && !rhs.isOwnerIsSet()) || (isOwnerIsSet() && rhs.isOwnerIsSet() && isIsOwner() == rhs.isIsOwner())) &&
    
    
    ((!mediaIsSet() && !rhs.mediaIsSet()) || (mediaIsSet() && rhs.mediaIsSet() && getMedia() == rhs.getMedia())) &&
    
    
    ((!mediaSourceIsSet() && !rhs.mediaSourceIsSet()) || (mediaSourceIsSet() && rhs.mediaSourceIsSet() && getMediaSource() == rhs.getMediaSource())) &&
    
    
    ((!parentPinIdIsSet() && !rhs.parentPinIdIsSet()) || (parentPinIdIsSet() && rhs.parentPinIdIsSet() && getParentPinId() == rhs.getParentPinId())) &&
    
    
    ((!isStandardIsSet() && !rhs.isStandardIsSet()) || (isStandardIsSet() && rhs.isStandardIsSet() && isIsStandard() == rhs.isIsStandard())) &&
    
    
    ((!hasBeenPromotedIsSet() && !rhs.hasBeenPromotedIsSet()) || (hasBeenPromotedIsSet() && rhs.hasBeenPromotedIsSet() && isHasBeenPromoted() == rhs.isHasBeenPromoted())) &&
    
    
    ((!noteIsSet() && !rhs.noteIsSet()) || (noteIsSet() && rhs.noteIsSet() && getNote() == rhs.getNote())) &&
    
    
    ((!pinMetricsIsSet() && !rhs.pinMetricsIsSet()) || (pinMetricsIsSet() && rhs.pinMetricsIsSet() && getPinMetrics() == rhs.getPinMetrics()))
    
    ;
}

bool Pin::operator!=(const Pin& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const Pin& o)
{
    j = nlohmann::json::object();
    if(o.idIsSet())
        j["id"] = o.m_Id;
    if(o.createdAtIsSet())
        j["created_at"] = o.m_Created_at;
    if(o.linkIsSet())
        j["link"] = o.m_Link;
    if(o.titleIsSet())
        j["title"] = o.m_Title;
    if(o.descriptionIsSet())
        j["description"] = o.m_Description;
    if(o.dominantColorIsSet())
        j["dominant_color"] = o.m_Dominant_color;
    if(o.altTextIsSet())
        j["alt_text"] = o.m_Alt_text;
    if(o.creativeTypeIsSet())
        j["creative_type"] = o.m_Creative_type;
    if(o.boardIdIsSet())
        j["board_id"] = o.m_Board_id;
    if(o.boardSectionIdIsSet())
        j["board_section_id"] = o.m_Board_section_id;
    if(o.boardOwnerIsSet())
        j["board_owner"] = o.m_Board_owner;
    if(o.isOwnerIsSet())
        j["is_owner"] = o.m_Is_owner;
    if(o.mediaIsSet())
        j["media"] = o.m_Media;
    if(o.mediaSourceIsSet())
        j["media_source"] = o.m_Media_source;
    if(o.parentPinIdIsSet())
        j["parent_pin_id"] = o.m_Parent_pin_id;
    if(o.isStandardIsSet())
        j["is_standard"] = o.m_Is_standard;
    if(o.hasBeenPromotedIsSet())
        j["has_been_promoted"] = o.m_Has_been_promoted;
    if(o.noteIsSet())
        j["note"] = o.m_Note;
    if(o.pinMetricsIsSet())
        j["pin_metrics"] = o.m_Pin_metrics;
    
}

void from_json(const nlohmann::json& j, Pin& o)
{
    if(j.find("id") != j.end())
    {
        j.at("id").get_to(o.m_Id);
        o.m_IdIsSet = true;
    } 
    if(j.find("created_at") != j.end())
    {
        j.at("created_at").get_to(o.m_Created_at);
        o.m_Created_atIsSet = true;
    } 
    if(j.find("link") != j.end())
    {
        j.at("link").get_to(o.m_Link);
        o.m_LinkIsSet = true;
    } 
    if(j.find("title") != j.end())
    {
        j.at("title").get_to(o.m_Title);
        o.m_TitleIsSet = true;
    } 
    if(j.find("description") != j.end())
    {
        j.at("description").get_to(o.m_Description);
        o.m_DescriptionIsSet = true;
    } 
    if(j.find("dominant_color") != j.end())
    {
        j.at("dominant_color").get_to(o.m_Dominant_color);
        o.m_Dominant_colorIsSet = true;
    } 
    if(j.find("alt_text") != j.end())
    {
        j.at("alt_text").get_to(o.m_Alt_text);
        o.m_Alt_textIsSet = true;
    } 
    if(j.find("creative_type") != j.end())
    {
        j.at("creative_type").get_to(o.m_Creative_type);
        o.m_Creative_typeIsSet = true;
    } 
    if(j.find("board_id") != j.end())
    {
        j.at("board_id").get_to(o.m_Board_id);
        o.m_Board_idIsSet = true;
    } 
    if(j.find("board_section_id") != j.end())
    {
        j.at("board_section_id").get_to(o.m_Board_section_id);
        o.m_Board_section_idIsSet = true;
    } 
    if(j.find("board_owner") != j.end())
    {
        j.at("board_owner").get_to(o.m_Board_owner);
        o.m_Board_ownerIsSet = true;
    } 
    if(j.find("is_owner") != j.end())
    {
        j.at("is_owner").get_to(o.m_Is_owner);
        o.m_Is_ownerIsSet = true;
    } 
    if(j.find("media") != j.end())
    {
        j.at("media").get_to(o.m_Media);
        o.m_MediaIsSet = true;
    } 
    if(j.find("media_source") != j.end())
    {
        j.at("media_source").get_to(o.m_Media_source);
        o.m_Media_sourceIsSet = true;
    } 
    if(j.find("parent_pin_id") != j.end())
    {
        j.at("parent_pin_id").get_to(o.m_Parent_pin_id);
        o.m_Parent_pin_idIsSet = true;
    } 
    if(j.find("is_standard") != j.end())
    {
        j.at("is_standard").get_to(o.m_Is_standard);
        o.m_Is_standardIsSet = true;
    } 
    if(j.find("has_been_promoted") != j.end())
    {
        j.at("has_been_promoted").get_to(o.m_Has_been_promoted);
        o.m_Has_been_promotedIsSet = true;
    } 
    if(j.find("note") != j.end())
    {
        j.at("note").get_to(o.m_Note);
        o.m_NoteIsSet = true;
    } 
    if(j.find("pin_metrics") != j.end())
    {
        j.at("pin_metrics").get_to(o.m_Pin_metrics);
        o.m_Pin_metricsIsSet = true;
    } 
    
}

std::string Pin::getId() const
{
    return m_Id;
}
void Pin::setId(std::string const& value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool Pin::idIsSet() const
{
    return m_IdIsSet;
}
void Pin::unsetId()
{
    m_IdIsSet = false;
}
std::string Pin::getCreatedAt() const
{
    return m_Created_at;
}
void Pin::setCreatedAt(std::string const& value)
{
    m_Created_at = value;
    m_Created_atIsSet = true;
}
bool Pin::createdAtIsSet() const
{
    return m_Created_atIsSet;
}
void Pin::unsetCreated_at()
{
    m_Created_atIsSet = false;
}
std::string Pin::getLink() const
{
    return m_Link;
}
void Pin::setLink(std::string const& value)
{
    m_Link = value;
    m_LinkIsSet = true;
}
bool Pin::linkIsSet() const
{
    return m_LinkIsSet;
}
void Pin::unsetLink()
{
    m_LinkIsSet = false;
}
std::string Pin::getTitle() const
{
    return m_Title;
}
void Pin::setTitle(std::string const& value)
{
    m_Title = value;
    m_TitleIsSet = true;
}
bool Pin::titleIsSet() const
{
    return m_TitleIsSet;
}
void Pin::unsetTitle()
{
    m_TitleIsSet = false;
}
std::string Pin::getDescription() const
{
    return m_Description;
}
void Pin::setDescription(std::string const& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}
bool Pin::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}
void Pin::unsetDescription()
{
    m_DescriptionIsSet = false;
}
std::string Pin::getDominantColor() const
{
    return m_Dominant_color;
}
void Pin::setDominantColor(std::string const& value)
{
    m_Dominant_color = value;
    m_Dominant_colorIsSet = true;
}
bool Pin::dominantColorIsSet() const
{
    return m_Dominant_colorIsSet;
}
void Pin::unsetDominant_color()
{
    m_Dominant_colorIsSet = false;
}
std::string Pin::getAltText() const
{
    return m_Alt_text;
}
void Pin::setAltText(std::string const& value)
{
    m_Alt_text = value;
    m_Alt_textIsSet = true;
}
bool Pin::altTextIsSet() const
{
    return m_Alt_textIsSet;
}
void Pin::unsetAlt_text()
{
    m_Alt_textIsSet = false;
}
org::openapitools::server::model::CreativeType Pin::getCreativeType() const
{
    return m_Creative_type;
}
void Pin::setCreativeType(org::openapitools::server::model::CreativeType const& value)
{
    m_Creative_type = value;
    m_Creative_typeIsSet = true;
}
bool Pin::creativeTypeIsSet() const
{
    return m_Creative_typeIsSet;
}
void Pin::unsetCreative_type()
{
    m_Creative_typeIsSet = false;
}
std::string Pin::getBoardId() const
{
    return m_Board_id;
}
void Pin::setBoardId(std::string const& value)
{
    m_Board_id = value;
    m_Board_idIsSet = true;
}
bool Pin::boardIdIsSet() const
{
    return m_Board_idIsSet;
}
void Pin::unsetBoard_id()
{
    m_Board_idIsSet = false;
}
std::string Pin::getBoardSectionId() const
{
    return m_Board_section_id;
}
void Pin::setBoardSectionId(std::string const& value)
{
    m_Board_section_id = value;
    m_Board_section_idIsSet = true;
}
bool Pin::boardSectionIdIsSet() const
{
    return m_Board_section_idIsSet;
}
void Pin::unsetBoard_section_id()
{
    m_Board_section_idIsSet = false;
}
org::openapitools::server::model::BoardOwner Pin::getBoardOwner() const
{
    return m_Board_owner;
}
void Pin::setBoardOwner(org::openapitools::server::model::BoardOwner const& value)
{
    m_Board_owner = value;
    m_Board_ownerIsSet = true;
}
bool Pin::boardOwnerIsSet() const
{
    return m_Board_ownerIsSet;
}
void Pin::unsetBoard_owner()
{
    m_Board_ownerIsSet = false;
}
bool Pin::isIsOwner() const
{
    return m_Is_owner;
}
void Pin::setIsOwner(bool const value)
{
    m_Is_owner = value;
    m_Is_ownerIsSet = true;
}
bool Pin::isOwnerIsSet() const
{
    return m_Is_ownerIsSet;
}
void Pin::unsetIs_owner()
{
    m_Is_ownerIsSet = false;
}
org::openapitools::server::model::PinMedia Pin::getMedia() const
{
    return m_Media;
}
void Pin::setMedia(org::openapitools::server::model::PinMedia const& value)
{
    m_Media = value;
    m_MediaIsSet = true;
}
bool Pin::mediaIsSet() const
{
    return m_MediaIsSet;
}
void Pin::unsetMedia()
{
    m_MediaIsSet = false;
}
org::openapitools::server::model::PinMediaSource Pin::getMediaSource() const
{
    return m_Media_source;
}
void Pin::setMediaSource(org::openapitools::server::model::PinMediaSource const& value)
{
    m_Media_source = value;
    m_Media_sourceIsSet = true;
}
bool Pin::mediaSourceIsSet() const
{
    return m_Media_sourceIsSet;
}
void Pin::unsetMedia_source()
{
    m_Media_sourceIsSet = false;
}
std::string Pin::getParentPinId() const
{
    return m_Parent_pin_id;
}
void Pin::setParentPinId(std::string const& value)
{
    m_Parent_pin_id = value;
    m_Parent_pin_idIsSet = true;
}
bool Pin::parentPinIdIsSet() const
{
    return m_Parent_pin_idIsSet;
}
void Pin::unsetParent_pin_id()
{
    m_Parent_pin_idIsSet = false;
}
bool Pin::isIsStandard() const
{
    return m_Is_standard;
}
void Pin::setIsStandard(bool const value)
{
    m_Is_standard = value;
    m_Is_standardIsSet = true;
}
bool Pin::isStandardIsSet() const
{
    return m_Is_standardIsSet;
}
void Pin::unsetIs_standard()
{
    m_Is_standardIsSet = false;
}
bool Pin::isHasBeenPromoted() const
{
    return m_Has_been_promoted;
}
void Pin::setHasBeenPromoted(bool const value)
{
    m_Has_been_promoted = value;
    m_Has_been_promotedIsSet = true;
}
bool Pin::hasBeenPromotedIsSet() const
{
    return m_Has_been_promotedIsSet;
}
void Pin::unsetHas_been_promoted()
{
    m_Has_been_promotedIsSet = false;
}
std::string Pin::getNote() const
{
    return m_Note;
}
void Pin::setNote(std::string const& value)
{
    m_Note = value;
    m_NoteIsSet = true;
}
bool Pin::noteIsSet() const
{
    return m_NoteIsSet;
}
void Pin::unsetNote()
{
    m_NoteIsSet = false;
}
nlohmann::json Pin::getPinMetrics() const
{
    return m_Pin_metrics;
}
void Pin::setPinMetrics(nlohmann::json const& value)
{
    m_Pin_metrics = value;
    m_Pin_metricsIsSet = true;
}
bool Pin::pinMetricsIsSet() const
{
    return m_Pin_metricsIsSet;
}
void Pin::unsetPin_metrics()
{
    m_Pin_metricsIsSet = false;
}


} // namespace org::openapitools::server::model

