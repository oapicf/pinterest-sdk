/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * OauthAccessTokenResponseEverlastingRefresh.h
 *
 * A successful OAuth access token response for the refresh token flow, with an added everlasting refresh token.
 */

#ifndef OauthAccessTokenResponseEverlastingRefresh_H_
#define OauthAccessTokenResponseEverlastingRefresh_H_


#include <string>
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// A successful OAuth access token response for the refresh token flow, with an added everlasting refresh token.
/// </summary>
class  OauthAccessTokenResponseEverlastingRefresh
{
public:
    OauthAccessTokenResponseEverlastingRefresh();
    virtual ~OauthAccessTokenResponseEverlastingRefresh() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const OauthAccessTokenResponseEverlastingRefresh& rhs) const;
    bool operator!=(const OauthAccessTokenResponseEverlastingRefresh& rhs) const;

    /////////////////////////////////////////////
    /// OauthAccessTokenResponseEverlastingRefresh members

    /// <summary>
    /// 
    /// </summary>
    std::string getResponseType() const;
    void setResponseType(std::string const& value);
    bool responseTypeIsSet() const;
    void unsetResponse_type();
    /// <summary>
    /// 
    /// </summary>
    std::string getAccessToken() const;
    void setAccessToken(std::string const& value);
    /// <summary>
    /// 
    /// </summary>
    std::string getTokenType() const;
    void setTokenType(std::string const& value);
    /// <summary>
    /// 
    /// </summary>
    int32_t getExpiresIn() const;
    void setExpiresIn(int32_t const value);
    /// <summary>
    /// 
    /// </summary>
    std::string getScope() const;
    void setScope(std::string const& value);
    /// <summary>
    /// 
    /// </summary>
    std::string getRefreshToken() const;
    void setRefreshToken(std::string const& value);
    /// <summary>
    /// 
    /// </summary>
    int32_t getRefreshTokenExpiresIn() const;
    void setRefreshTokenExpiresIn(int32_t const value);
    /// <summary>
    /// 
    /// </summary>
    int32_t getRefreshTokenExpiresAt() const;
    void setRefreshTokenExpiresAt(int32_t const value);

    friend  void to_json(nlohmann::json& j, const OauthAccessTokenResponseEverlastingRefresh& o);
    friend  void from_json(const nlohmann::json& j, OauthAccessTokenResponseEverlastingRefresh& o);
protected:
    std::string m_Response_type;
    bool m_Response_typeIsSet;
    std::string m_Access_token;

    std::string m_Token_type;

    int32_t m_Expires_in;

    std::string m_Scope;

    std::string m_Refresh_token;

    int32_t m_Refresh_token_expires_in;

    int32_t m_Refresh_token_expires_at;

    
};

} // namespace org::openapitools::server::model

#endif /* OauthAccessTokenResponseEverlastingRefresh_H_ */
