/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "PinUpdate.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

PinUpdate::PinUpdate()
{
    m_Alt_text = "";
    m_Alt_textIsSet = false;
    m_Board_id = "";
    m_Board_idIsSet = false;
    m_Board_section_id = "";
    m_Board_section_idIsSet = false;
    m_Description = "";
    m_DescriptionIsSet = false;
    m_Link = "";
    m_LinkIsSet = false;
    m_Title = "";
    m_TitleIsSet = false;
    m_Carousel_slotsIsSet = false;
    m_Note = "";
    m_NoteIsSet = false;
    
}

void PinUpdate::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool PinUpdate::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool PinUpdate::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "PinUpdate" : pathPrefix;

         
    if (altTextIsSet())
    {
        const std::string& value = m_Alt_text;
        const std::string currentValuePath = _pathPrefix + ".altText";
                
        
        if (value.length() > 500)
        {
            success = false;
            msg << currentValuePath << ": must be at most 500 characters long;";
        }

    }
         
    if (boardIdIsSet())
    {
        const std::string& value = m_Board_id;
        const std::string currentValuePath = _pathPrefix + ".boardId";
                
        

    }
         
    if (boardSectionIdIsSet())
    {
        const std::string& value = m_Board_section_id;
        const std::string currentValuePath = _pathPrefix + ".boardSectionId";
                
        

    }
         
    if (descriptionIsSet())
    {
        const std::string& value = m_Description;
        const std::string currentValuePath = _pathPrefix + ".description";
                
        
        if (value.length() > 800)
        {
            success = false;
            msg << currentValuePath << ": must be at most 800 characters long;";
        }

    }
         
    if (linkIsSet())
    {
        const std::string& value = m_Link;
        const std::string currentValuePath = _pathPrefix + ".link";
                
        
        if (value.length() > 2048)
        {
            success = false;
            msg << currentValuePath << ": must be at most 2048 characters long;";
        }

    }
         
    if (titleIsSet())
    {
        const std::string& value = m_Title;
        const std::string currentValuePath = _pathPrefix + ".title";
                
        
        if (value.length() > 100)
        {
            success = false;
            msg << currentValuePath << ": must be at most 100 characters long;";
        }

    }
         
    if (carouselSlotsIsSet())
    {
        const std::vector<org::openapitools::server::model::PinUpdate_carousel_slots_inner>& value = m_Carousel_slots;
        const std::string currentValuePath = _pathPrefix + ".carouselSlots";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::PinUpdate_carousel_slots_inner& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".carouselSlots") && success;
 
                i++;
            }
        }

    }
        
    return success;
}

bool PinUpdate::operator==(const PinUpdate& rhs) const
{
    return
    
    
    
    ((!altTextIsSet() && !rhs.altTextIsSet()) || (altTextIsSet() && rhs.altTextIsSet() && getAltText() == rhs.getAltText())) &&
    
    
    ((!boardIdIsSet() && !rhs.boardIdIsSet()) || (boardIdIsSet() && rhs.boardIdIsSet() && getBoardId() == rhs.getBoardId())) &&
    
    
    ((!boardSectionIdIsSet() && !rhs.boardSectionIdIsSet()) || (boardSectionIdIsSet() && rhs.boardSectionIdIsSet() && getBoardSectionId() == rhs.getBoardSectionId())) &&
    
    
    ((!descriptionIsSet() && !rhs.descriptionIsSet()) || (descriptionIsSet() && rhs.descriptionIsSet() && getDescription() == rhs.getDescription())) &&
    
    
    ((!linkIsSet() && !rhs.linkIsSet()) || (linkIsSet() && rhs.linkIsSet() && getLink() == rhs.getLink())) &&
    
    
    ((!titleIsSet() && !rhs.titleIsSet()) || (titleIsSet() && rhs.titleIsSet() && getTitle() == rhs.getTitle())) &&
    
    
    ((!carouselSlotsIsSet() && !rhs.carouselSlotsIsSet()) || (carouselSlotsIsSet() && rhs.carouselSlotsIsSet() && getCarouselSlots() == rhs.getCarouselSlots())) &&
    
    
    ((!noteIsSet() && !rhs.noteIsSet()) || (noteIsSet() && rhs.noteIsSet() && getNote() == rhs.getNote()))
    
    ;
}

bool PinUpdate::operator!=(const PinUpdate& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const PinUpdate& o)
{
    j = nlohmann::json::object();
    if(o.altTextIsSet())
        j["alt_text"] = o.m_Alt_text;
    if(o.boardIdIsSet())
        j["board_id"] = o.m_Board_id;
    if(o.boardSectionIdIsSet())
        j["board_section_id"] = o.m_Board_section_id;
    if(o.descriptionIsSet())
        j["description"] = o.m_Description;
    if(o.linkIsSet())
        j["link"] = o.m_Link;
    if(o.titleIsSet())
        j["title"] = o.m_Title;
    if(o.carouselSlotsIsSet() || !o.m_Carousel_slots.empty())
        j["carousel_slots"] = o.m_Carousel_slots;
    if(o.noteIsSet())
        j["note"] = o.m_Note;
    
}

void from_json(const nlohmann::json& j, PinUpdate& o)
{
    if(j.find("alt_text") != j.end())
    {
        j.at("alt_text").get_to(o.m_Alt_text);
        o.m_Alt_textIsSet = true;
    } 
    if(j.find("board_id") != j.end())
    {
        j.at("board_id").get_to(o.m_Board_id);
        o.m_Board_idIsSet = true;
    } 
    if(j.find("board_section_id") != j.end())
    {
        j.at("board_section_id").get_to(o.m_Board_section_id);
        o.m_Board_section_idIsSet = true;
    } 
    if(j.find("description") != j.end())
    {
        j.at("description").get_to(o.m_Description);
        o.m_DescriptionIsSet = true;
    } 
    if(j.find("link") != j.end())
    {
        j.at("link").get_to(o.m_Link);
        o.m_LinkIsSet = true;
    } 
    if(j.find("title") != j.end())
    {
        j.at("title").get_to(o.m_Title);
        o.m_TitleIsSet = true;
    } 
    if(j.find("carousel_slots") != j.end())
    {
        j.at("carousel_slots").get_to(o.m_Carousel_slots);
        o.m_Carousel_slotsIsSet = true;
    } 
    if(j.find("note") != j.end())
    {
        j.at("note").get_to(o.m_Note);
        o.m_NoteIsSet = true;
    } 
    
}

std::string PinUpdate::getAltText() const
{
    return m_Alt_text;
}
void PinUpdate::setAltText(std::string const& value)
{
    m_Alt_text = value;
    m_Alt_textIsSet = true;
}
bool PinUpdate::altTextIsSet() const
{
    return m_Alt_textIsSet;
}
void PinUpdate::unsetAlt_text()
{
    m_Alt_textIsSet = false;
}
std::string PinUpdate::getBoardId() const
{
    return m_Board_id;
}
void PinUpdate::setBoardId(std::string const& value)
{
    m_Board_id = value;
    m_Board_idIsSet = true;
}
bool PinUpdate::boardIdIsSet() const
{
    return m_Board_idIsSet;
}
void PinUpdate::unsetBoard_id()
{
    m_Board_idIsSet = false;
}
std::string PinUpdate::getBoardSectionId() const
{
    return m_Board_section_id;
}
void PinUpdate::setBoardSectionId(std::string const& value)
{
    m_Board_section_id = value;
    m_Board_section_idIsSet = true;
}
bool PinUpdate::boardSectionIdIsSet() const
{
    return m_Board_section_idIsSet;
}
void PinUpdate::unsetBoard_section_id()
{
    m_Board_section_idIsSet = false;
}
std::string PinUpdate::getDescription() const
{
    return m_Description;
}
void PinUpdate::setDescription(std::string const& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}
bool PinUpdate::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}
void PinUpdate::unsetDescription()
{
    m_DescriptionIsSet = false;
}
std::string PinUpdate::getLink() const
{
    return m_Link;
}
void PinUpdate::setLink(std::string const& value)
{
    m_Link = value;
    m_LinkIsSet = true;
}
bool PinUpdate::linkIsSet() const
{
    return m_LinkIsSet;
}
void PinUpdate::unsetLink()
{
    m_LinkIsSet = false;
}
std::string PinUpdate::getTitle() const
{
    return m_Title;
}
void PinUpdate::setTitle(std::string const& value)
{
    m_Title = value;
    m_TitleIsSet = true;
}
bool PinUpdate::titleIsSet() const
{
    return m_TitleIsSet;
}
void PinUpdate::unsetTitle()
{
    m_TitleIsSet = false;
}
std::vector<org::openapitools::server::model::PinUpdate_carousel_slots_inner> PinUpdate::getCarouselSlots() const
{
    return m_Carousel_slots;
}
void PinUpdate::setCarouselSlots(std::vector<org::openapitools::server::model::PinUpdate_carousel_slots_inner> const& value)
{
    m_Carousel_slots = value;
    m_Carousel_slotsIsSet = true;
}
bool PinUpdate::carouselSlotsIsSet() const
{
    return m_Carousel_slotsIsSet;
}
void PinUpdate::unsetCarousel_slots()
{
    m_Carousel_slotsIsSet = false;
}
std::string PinUpdate::getNote() const
{
    return m_Note;
}
void PinUpdate::setNote(std::string const& value)
{
    m_Note = value;
    m_NoteIsSet = true;
}
bool PinUpdate::noteIsSet() const
{
    return m_NoteIsSet;
}
void PinUpdate::unsetNote()
{
    m_NoteIsSet = false;
}


} // namespace org::openapitools::server::model

