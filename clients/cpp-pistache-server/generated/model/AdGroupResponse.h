/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * AdGroupResponse.h
 *
 * 
 */

#ifndef AdGroupResponse_H_
#define AdGroupResponse_H_


#include "TargetingSpec.h"
#include "PlacementGroupType.h"
#include <nlohmann/json.hpp>
#include "EntityStatus.h"
#include "PacingDeliveryType.h"
#include <string>
#include "TrackingUrls.h"
#include "ActionType.h"
#include "AdGroupSummaryStatus.h"
#include "BudgetType.h"
#include "OptimizationGoalMetadata.h"
#include <vector>
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// 
/// </summary>
class  AdGroupResponse
{
public:
    AdGroupResponse();
    virtual ~AdGroupResponse() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const AdGroupResponse& rhs) const;
    bool operator!=(const AdGroupResponse& rhs) const;

    /////////////////////////////////////////////
    /// AdGroupResponse members

    /// <summary>
    /// Ad group name.
    /// </summary>
    std::string getName() const;
    void setName(std::string const& value);
    bool nameIsSet() const;
    void unsetName();
    /// <summary>
    /// Ad group/entity status.
    /// </summary>
    org::openapitools::server::model::EntityStatus getStatus() const;
    void setStatus(org::openapitools::server::model::EntityStatus const& value);
    bool statusIsSet() const;
    void unsetStatus();
    /// <summary>
    /// Budget in micro currency. This field is **REQUIRED** for non-CBO (campaign budget optimization) campaigns.  A CBO campaign automatically generates ad group budgets from its campaign budget to maximize campaign outcome. A CBO campaign is limited to 70 or less ad groups.
    /// </summary>
    int32_t getBudgetInMicroCurrency() const;
    void setBudgetInMicroCurrency(int32_t const value);
    bool budgetInMicroCurrencyIsSet() const;
    void unsetBudget_in_micro_currency();
    /// <summary>
    /// Bid price in micro currency. This field is **REQUIRED** for the following campaign objective_type/billable_event combinations: AWARENESS/IMPRESSION, CONSIDERATION/CLICKTHROUGH, CATALOG_SALES/CLICKTHROUGH, VIDEO_VIEW/VIDEO_V_50_MRC.
    /// </summary>
    int32_t getBidInMicroCurrency() const;
    void setBidInMicroCurrency(int32_t const value);
    bool bidInMicroCurrencyIsSet() const;
    void unsetBid_in_micro_currency();
    /// <summary>
    /// Optimization goals for objective-based performance campaigns. **REQUIRED** when campaign&#39;s &#x60;objective_type&#x60; is set to &#x60;\&quot;WEB_CONVERSION\&quot;&#x60;.
    /// </summary>
    org::openapitools::server::model::OptimizationGoalMetadata getOptimizationGoalMetadata() const;
    void setOptimizationGoalMetadata(org::openapitools::server::model::OptimizationGoalMetadata const& value);
    bool optimizationGoalMetadataIsSet() const;
    void unsetOptimization_goal_metadata();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::BudgetType getBudgetType() const;
    void setBudgetType(org::openapitools::server::model::BudgetType const& value);
    bool budgetTypeIsSet() const;
    void unsetBudget_type();
    /// <summary>
    /// Ad group start time. Unix timestamp in seconds. Defaults to current time.
    /// </summary>
    int32_t getStartTime() const;
    void setStartTime(int32_t const value);
    bool startTimeIsSet() const;
    void unsetStart_time();
    /// <summary>
    /// Ad group end time. Unix timestamp in seconds.
    /// </summary>
    int32_t getEndTime() const;
    void setEndTime(int32_t const value);
    bool endTimeIsSet() const;
    void unsetEnd_time();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::TargetingSpec getTargetingSpec() const;
    void setTargetingSpec(org::openapitools::server::model::TargetingSpec const& value);
    bool targetingSpecIsSet() const;
    void unsetTargeting_spec();
    /// <summary>
    /// Set a limit to the number of times a promoted pin from this campaign can be impressed by a pinner within the past rolling 30 days. Only available for CPM (cost per mille (1000 impressions))  ad groups. A CPM ad group has an IMPRESSION &lt;a href&#x3D;\&quot;/docs/redoc/#section/Billable-event\&quot;&gt;billable_event&lt;/a&gt; value. This field **REQUIRES** the &#x60;end_time&#x60; field.
    /// </summary>
    int32_t getLifetimeFrequencyCap() const;
    void setLifetimeFrequencyCap(int32_t const value);
    bool lifetimeFrequencyCapIsSet() const;
    void unsetLifetime_frequency_cap();
    /// <summary>
    /// Third-party tracking URLs.&lt;br&gt; JSON object with the format: {\&quot;&lt;a href&#x3D;\&quot;/docs/redoc/#section/Tracking-URL-event\&quot;&gt;Tracking event enum&lt;/a&gt;\&quot;:[URL string array],...}&lt;br&gt; For example: {\&quot;impression\&quot;: [\&quot;URL1\&quot;, \&quot;URL2\&quot;], \&quot;click\&quot;: [\&quot;URL1\&quot;, \&quot;URL2\&quot;, \&quot;URL3\&quot;]}.&lt;br&gt;Up to three tracking URLs are supported for each event type. Tracking URLs set at the ad group or ad level can override those set at the campaign level. May be null. Pass in an empty object - {} - to remove tracking URLs.&lt;br&gt;&lt;br&gt; For more information, see &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/third-party-and-dynamic-tracking\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Third-party and dynamic tracking&lt;/a&gt;.
    /// </summary>
    org::openapitools::server::model::TrackingUrls getTrackingUrls() const;
    void setTrackingUrls(org::openapitools::server::model::TrackingUrls const& value);
    bool trackingUrlsIsSet() const;
    void unsetTracking_urls();
    /// <summary>
    /// Enable auto-targeting for ad group. Also known as &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/expanded-targeting\&quot; target&#x3D;\&quot;_blank\&quot;&gt;\&quot;expanded targeting\&quot;&lt;/a&gt;.
    /// </summary>
    bool isAutoTargetingEnabled() const;
    void setAutoTargetingEnabled(bool const value);
    bool autoTargetingEnabledIsSet() const;
    void unsetAuto_targeting_enabled();
    /// <summary>
    /// &lt;a href&#x3D;\&quot;/docs/redoc/#section/Placement-group\&quot;&gt;Placement group&lt;/a&gt;.
    /// </summary>
    org::openapitools::server::model::PlacementGroupType getPlacementGroup() const;
    void setPlacementGroup(org::openapitools::server::model::PlacementGroupType const& value);
    bool placementGroupIsSet() const;
    void unsetPlacement_group();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::PacingDeliveryType getPacingDeliveryType() const;
    void setPacingDeliveryType(org::openapitools::server::model::PacingDeliveryType const& value);
    bool pacingDeliveryTypeIsSet() const;
    void unsetPacing_delivery_type();
    /// <summary>
    /// Campaign ID of the ad group.
    /// </summary>
    std::string getCampaignId() const;
    void setCampaignId(std::string const& value);
    bool campaignIdIsSet() const;
    void unsetCampaign_id();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::ActionType getBillableEvent() const;
    void setBillableEvent(org::openapitools::server::model::ActionType const& value);
    bool billableEventIsSet() const;
    void unsetBillable_event();
    /// <summary>
    /// Bid strategy type. For Campaigns with Video Completion objectives, the only supported bid strategy type is AUTOMATIC_BID.
    /// </summary>
    std::string getBidStrategyType() const;
    void setBidStrategyType(std::string const& value);
    bool bidStrategyTypeIsSet() const;
    void unsetBid_strategy_type();
    /// <summary>
    /// Targeting template IDs applied to the ad group. We currently only support 1 targeting template per ad group. To use targeting templates, do not set any other targeting fields: targeting_spec, tracking_urls, auto_targeting_enabled, placement_group. To clear all targeting template IDs, set this field to [&#39;0&#39;].
    /// </summary>
    std::vector<std::string> getTargetingTemplateIds() const;
    void setTargetingTemplateIds(std::vector<std::string> const& value);
    bool targetingTemplateIdsIsSet() const;
    void unsetTargeting_template_ids();
    /// <summary>
    /// Ad group ID.
    /// </summary>
    std::string getId() const;
    void setId(std::string const& value);
    bool idIsSet() const;
    void unsetId();
    /// <summary>
    /// Advertiser ID.
    /// </summary>
    std::string getAdAccountId() const;
    void setAdAccountId(std::string const& value);
    bool adAccountIdIsSet() const;
    void unsetAd_account_id();
    /// <summary>
    /// Ad group creation time. Unix timestamp in seconds.
    /// </summary>
    int32_t getCreatedTime() const;
    void setCreatedTime(int32_t const value);
    bool createdTimeIsSet() const;
    void unsetCreated_time();
    /// <summary>
    /// Ad group last update time. Unix timestamp in seconds.
    /// </summary>
    int32_t getUpdatedTime() const;
    void setUpdatedTime(int32_t const value);
    bool updatedTimeIsSet() const;
    void unsetUpdated_time();
    /// <summary>
    /// Always \&quot;adgroup\&quot;.
    /// </summary>
    std::string getType() const;
    void setType(std::string const& value);
    bool typeIsSet() const;
    void unsetType();
    /// <summary>
    /// oCPM learn mode
    /// </summary>
    std::string getConversionLearningModeType() const;
    void setConversionLearningModeType(std::string const& value);
    bool conversionLearningModeTypeIsSet() const;
    void unsetConversion_learning_mode_type();
    /// <summary>
    /// Ad group summary status.
    /// </summary>
    org::openapitools::server::model::AdGroupSummaryStatus getSummaryStatus() const;
    void setSummaryStatus(org::openapitools::server::model::AdGroupSummaryStatus const& value);
    bool summaryStatusIsSet() const;
    void unsetSummary_status();
    /// <summary>
    /// Feed Profile ID associated to the adgroup.
    /// </summary>
    std::string getFeedProfileId() const;
    void setFeedProfileId(std::string const& value);
    bool feedProfileIdIsSet() const;
    void unsetFeed_profile_id();
    /// <summary>
    /// [DCA] The Dynamic creative assets to use for DCA. Dynamic Creative Assembly (DCA) accepts basic creative assets of an ad (image, video, title, call to action, logo etc). Then it automatically generates optimized ad combinations based on these assets.
    /// </summary>
    nlohmann::json getDcaAssets() const;
    void setDcaAssets(nlohmann::json const& value);
    bool dcaAssetsIsSet() const;
    void unsetDca_assets();

    friend  void to_json(nlohmann::json& j, const AdGroupResponse& o);
    friend  void from_json(const nlohmann::json& j, AdGroupResponse& o);
protected:
    std::string m_Name;
    bool m_NameIsSet;
    org::openapitools::server::model::EntityStatus m_Status;
    bool m_StatusIsSet;
    int32_t m_Budget_in_micro_currency;
    bool m_Budget_in_micro_currencyIsSet;
    int32_t m_Bid_in_micro_currency;
    bool m_Bid_in_micro_currencyIsSet;
    org::openapitools::server::model::OptimizationGoalMetadata m_Optimization_goal_metadata;
    bool m_Optimization_goal_metadataIsSet;
    org::openapitools::server::model::BudgetType m_Budget_type;
    bool m_Budget_typeIsSet;
    int32_t m_Start_time;
    bool m_Start_timeIsSet;
    int32_t m_End_time;
    bool m_End_timeIsSet;
    org::openapitools::server::model::TargetingSpec m_Targeting_spec;
    bool m_Targeting_specIsSet;
    int32_t m_Lifetime_frequency_cap;
    bool m_Lifetime_frequency_capIsSet;
    org::openapitools::server::model::TrackingUrls m_Tracking_urls;
    bool m_Tracking_urlsIsSet;
    bool m_Auto_targeting_enabled;
    bool m_Auto_targeting_enabledIsSet;
    org::openapitools::server::model::PlacementGroupType m_Placement_group;
    bool m_Placement_groupIsSet;
    org::openapitools::server::model::PacingDeliveryType m_Pacing_delivery_type;
    bool m_Pacing_delivery_typeIsSet;
    std::string m_Campaign_id;
    bool m_Campaign_idIsSet;
    org::openapitools::server::model::ActionType m_Billable_event;
    bool m_Billable_eventIsSet;
    std::string m_Bid_strategy_type;
    bool m_Bid_strategy_typeIsSet;
    std::vector<std::string> m_Targeting_template_ids;
    bool m_Targeting_template_idsIsSet;
    std::string m_Id;
    bool m_IdIsSet;
    std::string m_Ad_account_id;
    bool m_Ad_account_idIsSet;
    int32_t m_Created_time;
    bool m_Created_timeIsSet;
    int32_t m_Updated_time;
    bool m_Updated_timeIsSet;
    std::string m_Type;
    bool m_TypeIsSet;
    std::string m_Conversion_learning_mode_type;
    bool m_Conversion_learning_mode_typeIsSet;
    org::openapitools::server::model::AdGroupSummaryStatus m_Summary_status;
    bool m_Summary_statusIsSet;
    std::string m_Feed_profile_id;
    bool m_Feed_profile_idIsSet;
    nlohmann::json m_Dca_assets;
    bool m_Dca_assetsIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* AdGroupResponse_H_ */
