/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "TargetingAdvertiserCountry.h"
#include "Helpers.h"
#include <stdexcept>
#include <sstream>

namespace org::openapitools::server::model
{

TargetingAdvertiserCountry::TargetingAdvertiserCountry()
{
    
}

void TargetingAdvertiserCountry::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool TargetingAdvertiserCountry::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool TargetingAdvertiserCountry::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "TargetingAdvertiserCountry" : pathPrefix;

    
    if (m_value == TargetingAdvertiserCountry::eTargetingAdvertiserCountry::INVALID_VALUE_OPENAPI_GENERATED)
    {
        success = false;
        msg << _pathPrefix << ": has no value;";
    }

    return success;
}

bool TargetingAdvertiserCountry::operator==(const TargetingAdvertiserCountry& rhs) const
{
    return
    getValue() == rhs.getValue()
    
    ;
}

bool TargetingAdvertiserCountry::operator!=(const TargetingAdvertiserCountry& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const TargetingAdvertiserCountry& o)
{
    j = nlohmann::json::object();
    
    switch (o.getValue())
    {
        case TargetingAdvertiserCountry::eTargetingAdvertiserCountry::INVALID_VALUE_OPENAPI_GENERATED:
            j = "INVALID_VALUE_OPENAPI_GENERATED";
            break;
        case TargetingAdvertiserCountry::eTargetingAdvertiserCountry::US:
            j = "US";
            break;
        case TargetingAdvertiserCountry::eTargetingAdvertiserCountry::GB:
            j = "GB";
            break;
        case TargetingAdvertiserCountry::eTargetingAdvertiserCountry::CA:
            j = "CA";
            break;
        case TargetingAdvertiserCountry::eTargetingAdvertiserCountry::IE:
            j = "IE";
            break;
        case TargetingAdvertiserCountry::eTargetingAdvertiserCountry::AU:
            j = "AU";
            break;
        case TargetingAdvertiserCountry::eTargetingAdvertiserCountry::NZ:
            j = "NZ";
            break;
        case TargetingAdvertiserCountry::eTargetingAdvertiserCountry::FR:
            j = "FR";
            break;
        case TargetingAdvertiserCountry::eTargetingAdvertiserCountry::SE:
            j = "SE";
            break;
        case TargetingAdvertiserCountry::eTargetingAdvertiserCountry::IL:
            j = "IL";
            break;
        case TargetingAdvertiserCountry::eTargetingAdvertiserCountry::DE:
            j = "DE";
            break;
        case TargetingAdvertiserCountry::eTargetingAdvertiserCountry::AT:
            j = "AT";
            break;
        case TargetingAdvertiserCountry::eTargetingAdvertiserCountry::IT:
            j = "IT";
            break;
        case TargetingAdvertiserCountry::eTargetingAdvertiserCountry::ES:
            j = "ES";
            break;
        case TargetingAdvertiserCountry::eTargetingAdvertiserCountry::NL:
            j = "NL";
            break;
        case TargetingAdvertiserCountry::eTargetingAdvertiserCountry::BE:
            j = "BE";
            break;
        case TargetingAdvertiserCountry::eTargetingAdvertiserCountry::PT:
            j = "PT";
            break;
        case TargetingAdvertiserCountry::eTargetingAdvertiserCountry::CH:
            j = "CH";
            break;
        case TargetingAdvertiserCountry::eTargetingAdvertiserCountry::HK:
            j = "HK";
            break;
        case TargetingAdvertiserCountry::eTargetingAdvertiserCountry::JP:
            j = "JP";
            break;
        case TargetingAdvertiserCountry::eTargetingAdvertiserCountry::KR:
            j = "KR";
            break;
        case TargetingAdvertiserCountry::eTargetingAdvertiserCountry::SG:
            j = "SG";
            break;
        case TargetingAdvertiserCountry::eTargetingAdvertiserCountry::NO:
            j = "NO";
            break;
        case TargetingAdvertiserCountry::eTargetingAdvertiserCountry::DK:
            j = "DK";
            break;
        case TargetingAdvertiserCountry::eTargetingAdvertiserCountry::FI:
            j = "FI";
            break;
        case TargetingAdvertiserCountry::eTargetingAdvertiserCountry::CY:
            j = "CY";
            break;
        case TargetingAdvertiserCountry::eTargetingAdvertiserCountry::LU:
            j = "LU";
            break;
        case TargetingAdvertiserCountry::eTargetingAdvertiserCountry::MT:
            j = "MT";
            break;
        case TargetingAdvertiserCountry::eTargetingAdvertiserCountry::PL:
            j = "PL";
            break;
        case TargetingAdvertiserCountry::eTargetingAdvertiserCountry::RO:
            j = "RO";
            break;
        case TargetingAdvertiserCountry::eTargetingAdvertiserCountry::HU:
            j = "HU";
            break;
        case TargetingAdvertiserCountry::eTargetingAdvertiserCountry::CZ:
            j = "CZ";
            break;
        case TargetingAdvertiserCountry::eTargetingAdvertiserCountry::GR:
            j = "GR";
            break;
        case TargetingAdvertiserCountry::eTargetingAdvertiserCountry::SK:
            j = "SK";
            break;
        case TargetingAdvertiserCountry::eTargetingAdvertiserCountry::BR:
            j = "BR";
            break;
        case TargetingAdvertiserCountry::eTargetingAdvertiserCountry::MX:
            j = "MX";
            break;
        case TargetingAdvertiserCountry::eTargetingAdvertiserCountry::AR:
            j = "AR";
            break;
        case TargetingAdvertiserCountry::eTargetingAdvertiserCountry::CL:
            j = "CL";
            break;
        case TargetingAdvertiserCountry::eTargetingAdvertiserCountry::CO:
            j = "CO";
            break;
    }
}

void from_json(const nlohmann::json& j, TargetingAdvertiserCountry& o)
{
    
    auto s = j.get<std::string>();
    if (s == "US") {
     o.setValue(TargetingAdvertiserCountry::eTargetingAdvertiserCountry::US);
    } 
    else if (s == "GB") {
     o.setValue(TargetingAdvertiserCountry::eTargetingAdvertiserCountry::GB);
    } 
    else if (s == "CA") {
     o.setValue(TargetingAdvertiserCountry::eTargetingAdvertiserCountry::CA);
    } 
    else if (s == "IE") {
     o.setValue(TargetingAdvertiserCountry::eTargetingAdvertiserCountry::IE);
    } 
    else if (s == "AU") {
     o.setValue(TargetingAdvertiserCountry::eTargetingAdvertiserCountry::AU);
    } 
    else if (s == "NZ") {
     o.setValue(TargetingAdvertiserCountry::eTargetingAdvertiserCountry::NZ);
    } 
    else if (s == "FR") {
     o.setValue(TargetingAdvertiserCountry::eTargetingAdvertiserCountry::FR);
    } 
    else if (s == "SE") {
     o.setValue(TargetingAdvertiserCountry::eTargetingAdvertiserCountry::SE);
    } 
    else if (s == "IL") {
     o.setValue(TargetingAdvertiserCountry::eTargetingAdvertiserCountry::IL);
    } 
    else if (s == "DE") {
     o.setValue(TargetingAdvertiserCountry::eTargetingAdvertiserCountry::DE);
    } 
    else if (s == "AT") {
     o.setValue(TargetingAdvertiserCountry::eTargetingAdvertiserCountry::AT);
    } 
    else if (s == "IT") {
     o.setValue(TargetingAdvertiserCountry::eTargetingAdvertiserCountry::IT);
    } 
    else if (s == "ES") {
     o.setValue(TargetingAdvertiserCountry::eTargetingAdvertiserCountry::ES);
    } 
    else if (s == "NL") {
     o.setValue(TargetingAdvertiserCountry::eTargetingAdvertiserCountry::NL);
    } 
    else if (s == "BE") {
     o.setValue(TargetingAdvertiserCountry::eTargetingAdvertiserCountry::BE);
    } 
    else if (s == "PT") {
     o.setValue(TargetingAdvertiserCountry::eTargetingAdvertiserCountry::PT);
    } 
    else if (s == "CH") {
     o.setValue(TargetingAdvertiserCountry::eTargetingAdvertiserCountry::CH);
    } 
    else if (s == "HK") {
     o.setValue(TargetingAdvertiserCountry::eTargetingAdvertiserCountry::HK);
    } 
    else if (s == "JP") {
     o.setValue(TargetingAdvertiserCountry::eTargetingAdvertiserCountry::JP);
    } 
    else if (s == "KR") {
     o.setValue(TargetingAdvertiserCountry::eTargetingAdvertiserCountry::KR);
    } 
    else if (s == "SG") {
     o.setValue(TargetingAdvertiserCountry::eTargetingAdvertiserCountry::SG);
    } 
    else if (s == "NO") {
     o.setValue(TargetingAdvertiserCountry::eTargetingAdvertiserCountry::NO);
    } 
    else if (s == "DK") {
     o.setValue(TargetingAdvertiserCountry::eTargetingAdvertiserCountry::DK);
    } 
    else if (s == "FI") {
     o.setValue(TargetingAdvertiserCountry::eTargetingAdvertiserCountry::FI);
    } 
    else if (s == "CY") {
     o.setValue(TargetingAdvertiserCountry::eTargetingAdvertiserCountry::CY);
    } 
    else if (s == "LU") {
     o.setValue(TargetingAdvertiserCountry::eTargetingAdvertiserCountry::LU);
    } 
    else if (s == "MT") {
     o.setValue(TargetingAdvertiserCountry::eTargetingAdvertiserCountry::MT);
    } 
    else if (s == "PL") {
     o.setValue(TargetingAdvertiserCountry::eTargetingAdvertiserCountry::PL);
    } 
    else if (s == "RO") {
     o.setValue(TargetingAdvertiserCountry::eTargetingAdvertiserCountry::RO);
    } 
    else if (s == "HU") {
     o.setValue(TargetingAdvertiserCountry::eTargetingAdvertiserCountry::HU);
    } 
    else if (s == "CZ") {
     o.setValue(TargetingAdvertiserCountry::eTargetingAdvertiserCountry::CZ);
    } 
    else if (s == "GR") {
     o.setValue(TargetingAdvertiserCountry::eTargetingAdvertiserCountry::GR);
    } 
    else if (s == "SK") {
     o.setValue(TargetingAdvertiserCountry::eTargetingAdvertiserCountry::SK);
    } 
    else if (s == "BR") {
     o.setValue(TargetingAdvertiserCountry::eTargetingAdvertiserCountry::BR);
    } 
    else if (s == "MX") {
     o.setValue(TargetingAdvertiserCountry::eTargetingAdvertiserCountry::MX);
    } 
    else if (s == "AR") {
     o.setValue(TargetingAdvertiserCountry::eTargetingAdvertiserCountry::AR);
    } 
    else if (s == "CL") {
     o.setValue(TargetingAdvertiserCountry::eTargetingAdvertiserCountry::CL);
    } 
    else if (s == "CO") {
     o.setValue(TargetingAdvertiserCountry::eTargetingAdvertiserCountry::CO);
    }  else {
     std::stringstream ss;
     ss << "Unexpected value " << s << " in json"
        << " cannot be converted to enum of type"
        << " TargetingAdvertiserCountry::eTargetingAdvertiserCountry";
     throw std::invalid_argument(ss.str());
    } 

}

TargetingAdvertiserCountry::eTargetingAdvertiserCountry TargetingAdvertiserCountry::getValue() const
{
    return m_value;
}
void TargetingAdvertiserCountry::setValue(TargetingAdvertiserCountry::eTargetingAdvertiserCountry value)
{
    m_value = value;
}

} // namespace org::openapitools::server::model

