/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "BaseInviteDataResponse.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

BaseInviteDataResponse::BaseInviteDataResponse()
{
    m_Id = "";
    m_IdIsSet = false;
    m_Invite_dataIsSet = false;
    m_Is_received_invite = false;
    m_Is_received_inviteIsSet = false;
    m_UserIsSet = false;
    
}

void BaseInviteDataResponse::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool BaseInviteDataResponse::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool BaseInviteDataResponse::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "BaseInviteDataResponse" : pathPrefix;

         
    if (idIsSet())
    {
        const std::string& value = m_Id;
        const std::string currentValuePath = _pathPrefix + ".id";
                
        

    }
                
    return success;
}

bool BaseInviteDataResponse::operator==(const BaseInviteDataResponse& rhs) const
{
    return
    
    
    
    ((!idIsSet() && !rhs.idIsSet()) || (idIsSet() && rhs.idIsSet() && getId() == rhs.getId())) &&
    
    
    ((!inviteDataIsSet() && !rhs.inviteDataIsSet()) || (inviteDataIsSet() && rhs.inviteDataIsSet() && getInviteData() == rhs.getInviteData())) &&
    
    
    ((!isReceivedInviteIsSet() && !rhs.isReceivedInviteIsSet()) || (isReceivedInviteIsSet() && rhs.isReceivedInviteIsSet() && isIsReceivedInvite() == rhs.isIsReceivedInvite())) &&
    
    
    ((!userIsSet() && !rhs.userIsSet()) || (userIsSet() && rhs.userIsSet() && getUser() == rhs.getUser()))
    
    ;
}

bool BaseInviteDataResponse::operator!=(const BaseInviteDataResponse& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const BaseInviteDataResponse& o)
{
    j = nlohmann::json::object();
    if(o.idIsSet())
        j["id"] = o.m_Id;
    if(o.inviteDataIsSet())
        j["invite_data"] = o.m_Invite_data;
    if(o.isReceivedInviteIsSet())
        j["is_received_invite"] = o.m_Is_received_invite;
    if(o.userIsSet())
        j["user"] = o.m_User;
    
}

void from_json(const nlohmann::json& j, BaseInviteDataResponse& o)
{
    if(j.find("id") != j.end())
    {
        j.at("id").get_to(o.m_Id);
        o.m_IdIsSet = true;
    } 
    if(j.find("invite_data") != j.end())
    {
        j.at("invite_data").get_to(o.m_Invite_data);
        o.m_Invite_dataIsSet = true;
    } 
    if(j.find("is_received_invite") != j.end())
    {
        j.at("is_received_invite").get_to(o.m_Is_received_invite);
        o.m_Is_received_inviteIsSet = true;
    } 
    if(j.find("user") != j.end())
    {
        j.at("user").get_to(o.m_User);
        o.m_UserIsSet = true;
    } 
    
}

std::string BaseInviteDataResponse::getId() const
{
    return m_Id;
}
void BaseInviteDataResponse::setId(std::string const& value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool BaseInviteDataResponse::idIsSet() const
{
    return m_IdIsSet;
}
void BaseInviteDataResponse::unsetId()
{
    m_IdIsSet = false;
}
org::openapitools::server::model::BaseInviteDataResponse_invite_data BaseInviteDataResponse::getInviteData() const
{
    return m_Invite_data;
}
void BaseInviteDataResponse::setInviteData(org::openapitools::server::model::BaseInviteDataResponse_invite_data const& value)
{
    m_Invite_data = value;
    m_Invite_dataIsSet = true;
}
bool BaseInviteDataResponse::inviteDataIsSet() const
{
    return m_Invite_dataIsSet;
}
void BaseInviteDataResponse::unsetInvite_data()
{
    m_Invite_dataIsSet = false;
}
bool BaseInviteDataResponse::isIsReceivedInvite() const
{
    return m_Is_received_invite;
}
void BaseInviteDataResponse::setIsReceivedInvite(bool const value)
{
    m_Is_received_invite = value;
    m_Is_received_inviteIsSet = true;
}
bool BaseInviteDataResponse::isReceivedInviteIsSet() const
{
    return m_Is_received_inviteIsSet;
}
void BaseInviteDataResponse::unsetIs_received_invite()
{
    m_Is_received_inviteIsSet = false;
}
org::openapitools::server::model::BusinessAccessUserSummary BaseInviteDataResponse::getUser() const
{
    return m_User;
}
void BaseInviteDataResponse::setUser(org::openapitools::server::model::BusinessAccessUserSummary const& value)
{
    m_User = value;
    m_UserIsSet = true;
}
bool BaseInviteDataResponse::userIsSet() const
{
    return m_UserIsSet;
}
void BaseInviteDataResponse::unsetUser()
{
    m_UserIsSet = false;
}


} // namespace org::openapitools::server::model

