/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * ResourcesApi.h
 *
 * 
 */

#ifndef ResourcesApi_H_
#define ResourcesApi_H_


#include "ApiBase.h"

#include <pistache/http.h>
#include <pistache/router.h>
#include <pistache/http_headers.h>

#include <optional>
#include <utility>

#include "AdAccountsCountryResponse.h"
#include "BookClosedResponse.h"
#include "DeliveryMetricsResponse.h"
#include "Error.h"
#include "SingleInterestTargetingOptionResponse.h"
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace org::openapitools::server::api
{

class  ResourcesApi : public ApiBase {
public:
    explicit ResourcesApi(const std::shared_ptr<Pistache::Rest::Router>& rtr);
    ~ResourcesApi() override = default;
    void init() override;

    static const std::string base;

private:
    void setupRoutes();

    void ad_account_countries_get_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void delivery_metrics_get_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void interest_targeting_options_get_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void lead_form_questions_get_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void metrics_ready_state_get_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void targeting_options_get_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void resources_api_default_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);

    /// <summary>
    /// Helper function to handle unexpected Exceptions during Parameter parsing and validation.
    /// May be overridden to return custom error formats. This is called inside a catch block.
    /// Important: When overriding, do not call `throw ex;`, but instead use `throw;`.
    /// </summary>
    virtual void handleParsingException(const std::exception& ex, Pistache::Http::ResponseWriter &response) const noexcept;

    /// <summary>
    /// Helper function to handle unexpected Exceptions during Parameter parsing and validation.
    /// May be overridden to return custom error formats. This is called inside a catch block.
    /// Important: When overriding, do not call `throw ex;`, but instead use `throw;`.
    /// </summary>
    virtual std::pair<Pistache::Http::Code, std::string> handleParsingException(const std::exception& ex) const noexcept;

    /// <summary>
    /// Helper function to handle unexpected Exceptions during processing of the request in handler functions.
    /// May be overridden to return custom error formats. This is called inside a catch block.
    /// Important: When overriding, do not call `throw ex;`, but instead use `throw;`.
    /// </summary>
    virtual void handleOperationException(const std::exception& ex, Pistache::Http::ResponseWriter &response) const noexcept;

    /// <summary>
    /// Helper function to handle unexpected Exceptions during processing of the request in handler functions.
    /// May be overridden to return custom error formats. This is called inside a catch block.
    /// Important: When overriding, do not call `throw ex;`, but instead use `throw;`.
    /// </summary>
    virtual std::pair<Pistache::Http::Code, std::string> handleOperationException(const std::exception& ex) const noexcept;

    /// <summary>
    /// Get ad accounts countries
    /// </summary>
    /// <remarks>
    /// Get Ad Accounts countries
    /// </remarks>
    virtual void ad_account_countries_get(Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Get available metrics&#39; definitions
    /// </summary>
    /// <remarks>
    /// Get the definitions for ads and organic metrics available across both synchronous and asynchronous report endpoints. The &#x60;display_name&#x60; attribute will match how the metric is named in our native tools like Ads Manager. See &lt;a href&#x3D;&#39;/docs/api-features/analytics-overview/&#39;&gt;Organic Analytics&lt;/a&gt; and &lt;a href&#x3D;&#39;/docs/api-features/ads-reporting/&#39;&gt;Ads Analytics&lt;/a&gt; for more information.
    /// </remarks>
    /// <param name="reportType">Report type. (optional, default to &quot;&quot;)</param>
    virtual void delivery_metrics_get(const std::optional<std::string> &reportType, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Get interest details
    /// </summary>
    /// <remarks>
    /// &lt;p&gt;Get details of a specific interest given interest ID.&lt;/p&gt; &lt;p&gt;Click &lt;a href&#x3D;\&quot;https://docs.google.com/spreadsheets/d/1HxL-0Z3p2fgxis9YBP2HWC3tvPrs1hAuHDRtH-NJTIM/edit#gid&#x3D;118370875\&quot; target&#x3D;\&quot;_blank\&quot;&gt;here&lt;/a&gt; for a spreadsheet listing interests and their IDs.&lt;/p&gt;
    /// </remarks>
    /// <param name="interestId">Unique identifier of an interest.</param>
    virtual void interest_targeting_options_get(const std::string &interestId, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Get lead form questions
    /// </summary>
    /// <remarks>
    /// Get a list of all lead form question type names. Some questions might not be used.  &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/getting-started/beta-and-advanced-access/&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;
    /// </remarks>
    virtual void lead_form_questions_get(Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Get metrics ready state
    /// </summary>
    /// <remarks>
    /// Learn whether conversion or non-conversion metrics are finalized and ready to query.
    /// </remarks>
    /// <param name="date">Analytics reports request date (UTC). Format: YYYY-MM-DD</param>
    virtual void metrics_ready_state_get(const std::optional<std::string> &date, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Get targeting options
    /// </summary>
    /// <remarks>
    /// &lt;p&gt;You can use targeting values in ads placement to define your intended audience. &lt;/p&gt; &lt;p&gt;Targeting metrics are organized around targeting specifications.&lt;/p&gt; &lt;p&gt;For more information on ads targeting, see &lt;a class&#x3D;\&quot;reference external\&quot; href&#x3D;\&quot;https://help.pinterest.com/en/business/article/audience-targeting\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Audience targeting&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;b&gt;Sample return:&lt;/b&gt;&lt;/p&gt; &lt;pre class&#x3D;\&quot;literal-block\&quot;&gt; [{&amp;quot;36313&amp;quot;: &amp;quot;Australia: Moreton Bay - North&amp;quot;, &amp;quot;124735&amp;quot;: &amp;quot;Canada: North Battleford&amp;quot;, &amp;quot;36109&amp;quot;: &amp;quot;Australia: Murray&amp;quot;, &amp;quot;36108&amp;quot;: &amp;quot;Australia: Mid North Coast&amp;quot;, &amp;quot;36101&amp;quot;: &amp;quot;Australia: Capital Region&amp;quot;, &amp;quot;811&amp;quot;: &amp;quot;U.S.: Reno&amp;quot;, &amp;quot;36103&amp;quot;: &amp;quot;Australia: Central West&amp;quot;, &amp;quot;36102&amp;quot;: &amp;quot;Australia: Central Coast&amp;quot;, &amp;quot;36105&amp;quot;: &amp;quot;Australia: Far West and Orana&amp;quot;, &amp;quot;36104&amp;quot;: &amp;quot;Australia: Coffs Harbour - Grafton&amp;quot;, &amp;quot;36107&amp;quot;: &amp;quot;Australia: Illawarra&amp;quot;, &amp;quot;36106&amp;quot;: &amp;quot;Australia: Hunter Valley Exc Newcastle&amp;quot;, &amp;quot;554017&amp;quot;: &amp;quot;New Zealand: Wanganui&amp;quot;, &amp;quot;554016&amp;quot;: &amp;quot;New Zealand: Marlborough&amp;quot;, &amp;quot;554015&amp;quot;: &amp;quot;New Zealand: Gisborne&amp;quot;, &amp;quot;554014&amp;quot;: &amp;quot;New Zealand: Tararua&amp;quot;, &amp;quot;554013&amp;quot;: &amp;quot;New Zealand: Invercargill&amp;quot;, &amp;quot;GR&amp;quot;: &amp;quot;Greece&amp;quot;, &amp;quot;554011&amp;quot;: &amp;quot;New Zealand: Whangarei&amp;quot;, &amp;quot;554010&amp;quot;: &amp;quot;New Zealand: Far North&amp;quot;, &amp;quot;717&amp;quot;: &amp;quot;U.S.: Quincy-Hannibal-Keokuk&amp;quot;, &amp;quot;716&amp;quot;: &amp;quot;U.S.: Baton Rouge&amp;quot;,...}] &lt;/pre&gt;
    /// </remarks>
    /// <param name="targetingType">Public targeting type.</param>
    /// <param name="clientId">Client ID. (optional, default to &quot;&quot;)</param>
    /// <param name="oauthSignature">Oauth signature (optional, default to &quot;&quot;)</param>
    /// <param name="timestamp">Timestamp (optional, default to &quot;&quot;)</param>
    /// <param name="adAccountId">Unique identifier of an ad account. (optional, default to &quot;&quot;)</param>
    virtual void targeting_options_get(const std::string &targetingType, const std::optional<std::string> &clientId, const std::optional<std::string> &oauthSignature, const std::optional<std::string> &timestamp, const std::optional<std::string> &adAccountId, Pistache::Http::ResponseWriter &response) = 0;

};

} // namespace org::openapitools::server::api

#endif /* ResourcesApi_H_ */

