/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * BusinessAccessRelationshipsApi.h
 *
 * 
 */

#ifndef BusinessAccessRelationshipsApi_H_
#define BusinessAccessRelationshipsApi_H_


#include "ApiBase.h"

#include <pistache/http.h>
#include <pistache/router.h>
#include <pistache/http_headers.h>

#include <optional>
#include <utility>

#include "DeletePartnersRequest.h"
#include "DeletePartnersResponse.h"
#include "DeletedMembersResponse.h"
#include "Error.h"
#include "Get_business_employers_200_response.h"
#include "Get_business_members_200_response.h"
#include "Get_business_partners_200_response.h"
#include "MemberBusinessRole.h"
#include "MembersToDeleteBody.h"
#include "PartnerType.h"
#include "UpdateMemberBusinessRoleBody.h"
#include "UpdateMemberResultsResponseArray.h"
#include <string>
#include <vector>

namespace org::openapitools::server::api
{

class  BusinessAccessRelationshipsApi : public ApiBase {
public:
    explicit BusinessAccessRelationshipsApi(const std::shared_ptr<Pistache::Rest::Router>& rtr);
    ~BusinessAccessRelationshipsApi() override = default;
    void init() override;

    static const std::string base;

private:
    void setupRoutes();

    void delete_business_membership_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void delete_business_partners_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void get_business_employers_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void get_business_members_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void get_business_partners_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void update_business_memberships_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void business_access_relationships_api_default_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);

    /// <summary>
    /// Helper function to handle unexpected Exceptions during Parameter parsing and validation.
    /// May be overridden to return custom error formats. This is called inside a catch block.
    /// Important: When overriding, do not call `throw ex;`, but instead use `throw;`.
    /// </summary>
    virtual void handleParsingException(const std::exception& ex, Pistache::Http::ResponseWriter &response) const noexcept;

    /// <summary>
    /// Helper function to handle unexpected Exceptions during Parameter parsing and validation.
    /// May be overridden to return custom error formats. This is called inside a catch block.
    /// Important: When overriding, do not call `throw ex;`, but instead use `throw;`.
    /// </summary>
    virtual std::pair<Pistache::Http::Code, std::string> handleParsingException(const std::exception& ex) const noexcept;

    /// <summary>
    /// Helper function to handle unexpected Exceptions during processing of the request in handler functions.
    /// May be overridden to return custom error formats. This is called inside a catch block.
    /// Important: When overriding, do not call `throw ex;`, but instead use `throw;`.
    /// </summary>
    virtual void handleOperationException(const std::exception& ex, Pistache::Http::ResponseWriter &response) const noexcept;

    /// <summary>
    /// Helper function to handle unexpected Exceptions during processing of the request in handler functions.
    /// May be overridden to return custom error formats. This is called inside a catch block.
    /// Important: When overriding, do not call `throw ex;`, but instead use `throw;`.
    /// </summary>
    virtual std::pair<Pistache::Http::Code, std::string> handleOperationException(const std::exception& ex) const noexcept;

    /// <summary>
    /// Terminate business memberships
    /// </summary>
    /// <remarks>
    /// Terminate memberships between the specified members and your business.
    /// </remarks>
    /// <param name="businessId">Business id</param>
    /// <param name="membersToDeleteBody">List of members with role to delete.</param>
    virtual void delete_business_membership(const std::string &businessId, const org::openapitools::server::model::MembersToDeleteBody &membersToDeleteBody, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Terminate business partnerships
    /// </summary>
    /// <remarks>
    /// Terminate partnerships between the specified partners and your business. Note: You may only batch terminate partners of the same partner type.
    /// </remarks>
    /// <param name="businessId">Unique identifier of the requesting business.</param>
    /// <param name="deletePartnersRequest">An object containing a \&quot;partner_ids\&quot; property composed of a list of partner IDs and a \&quot;partners_type\&quot; property specifying the type of partners to delete. </param>
    virtual void delete_business_partners(const std::string &businessId, const org::openapitools::server::model::DeletePartnersRequest &deletePartnersRequest, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// List business employers for user
    /// </summary>
    /// <remarks>
    /// Get all of the viewing user&#39;s business employers.
    /// </remarks>
    /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
    /// <param name="bookmark">Cursor used to fetch the next page of items (optional, default to &quot;&quot;)</param>
    virtual void get_business_employers(const std::optional<int32_t> &pageSize, const std::optional<std::string> &bookmark, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Get business members
    /// </summary>
    /// <remarks>
    /// Get all members of the specified business. The return response will include the member&#39;s business_role and assets they have access to if assets_summary&#x3D;TRUE
    /// </remarks>
    /// <param name="businessId">Unique identifier of the requesting business.</param>
    /// <param name="assetsSummary">Include assets summary in the response if this is true.  The assets summary returns a dictionary representing a summary of the assets for the business user ID, with information like the ad accounts and profiles the user has permissions for and what those permissions are (optional, default to false)</param>
    /// <param name="businessRoles">A list of business roles to filter the members by. Only members whose roles are in the specified roles will be returned. (optional, default to std::vector&lt;std::shared_ptr&lt;MemberBusinessRole&gt;&gt;())</param>
    /// <param name="memberIds">A list of business members ids separated by comma. (optional, default to &quot;&quot;)</param>
    /// <param name="startIndex">An index to start fetching the results from. Only the results starting from this index will be returned. (optional, default to 0)</param>
    /// <param name="bookmark">Cursor used to fetch the next page of items (optional, default to &quot;&quot;)</param>
    /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
    virtual void get_business_members(const std::string &businessId, const std::optional<bool> &assetsSummary, const std::optional<std::vector<org::openapitools::server::model::MemberBusinessRole>> &businessRoles, const std::optional<std::string> &memberIds, const std::optional<int32_t> &startIndex, const std::optional<std::string> &bookmark, const std::optional<int32_t> &pageSize, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Get business partners
    /// </summary>
    /// <remarks>
    /// Get all partners of the specified business.  If the assets_summary&#x3D;TRUE and: - partner_type&#x3D;INTERNAL, the business assets returned are your business assets the partner has access to. - partner_type&#x3D;EXTERNAL, the business assets returned are your partner&#39;s business assets the partner has granted you   access to.
    /// </remarks>
    /// <param name="businessId">Unique identifier of the requesting business.</param>
    /// <param name="assetsSummary">Include assets summary in the response if this is true.  The assets summary returns a dictionary representing a summary of the assets for the business user ID, with information like the ad accounts and profiles the user has permissions for and what those permissions are (optional, default to false)</param>
    /// <param name="partnerType">Specifies whether to fetch internal or external (shared) partners. If partner_type&#x3D;INTERNAL, the asset being queried is for accesses the partner has to your business assets.&lt;br&gt; If partner_type&#x3D;EXTERNAL, the asset being queried is for the accesses you have to the partner&#39;s business asset. (optional, default to std::make_shared&lt;PartnerType&gt;())</param>
    /// <param name="partnerIds">A list of business partner ids separated by commas used to filter the results. Only partners with the specified ids will be returned. (optional, default to &quot;&quot;)</param>
    /// <param name="startIndex">An index to start fetching the results from. Only the results starting from this index will be returned. (optional, default to 0)</param>
    /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
    /// <param name="bookmark">Cursor used to fetch the next page of items (optional, default to &quot;&quot;)</param>
    virtual void get_business_partners(const std::string &businessId, const std::optional<bool> &assetsSummary, const std::optional<org::openapitools::server::model::PartnerType> &partnerType, const std::optional<std::string> &partnerIds, const std::optional<int32_t> &startIndex, const std::optional<int32_t> &pageSize, const std::optional<std::string> &bookmark, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Update member&#39;s business role
    /// </summary>
    /// <remarks>
    /// Update a member&#39;s business role within the business.
    /// </remarks>
    /// <param name="businessId">Business id</param>
    /// <param name="updateMemberBusinessRoleBody">List of objects with the member id and the business_role.</param>
    virtual void update_business_memberships(const std::string &businessId, const std::vector<org::openapitools::server::model::UpdateMemberBusinessRoleBody> &updateMemberBusinessRoleBody, Pistache::Http::ResponseWriter &response) = 0;

};

} // namespace org::openapitools::server::api

#endif /* BusinessAccessRelationshipsApi_H_ */

