/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * LeadAdsApi.h
 *
 * 
 */

#ifndef LeadAdsApi_H_
#define LeadAdsApi_H_


#include "ApiBase.h"

#include <pistache/http.h>
#include <pistache/router.h>
#include <pistache/http_headers.h>

#include <optional>
#include <utility>

#include "AdAccountCreateSubscriptionRequest.h"
#include "AdAccountCreateSubscriptionResponse.h"
#include "AdAccountGetSubscriptionResponse.h"
#include "Ad_accounts_subscriptions_get_list_200_response.h"
#include "Error.h"
#include <string>

namespace org::openapitools::server::api
{

class  LeadAdsApi : public ApiBase {
public:
    explicit LeadAdsApi(const std::shared_ptr<Pistache::Rest::Router>& rtr);
    ~LeadAdsApi() override = default;
    void init() override;

    static const std::string base;

private:
    void setupRoutes();

    void ad_accounts_subscriptions_del_by_id_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void ad_accounts_subscriptions_get_by_id_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void ad_accounts_subscriptions_get_list_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void ad_accounts_subscriptions_post_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void lead_ads_api_default_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);

    /// <summary>
    /// Helper function to handle unexpected Exceptions during Parameter parsing and validation.
    /// May be overridden to return custom error formats. This is called inside a catch block.
    /// Important: When overriding, do not call `throw ex;`, but instead use `throw;`.
    /// </summary>
    virtual void handleParsingException(const std::exception& ex, Pistache::Http::ResponseWriter &response) const noexcept;

    /// <summary>
    /// Helper function to handle unexpected Exceptions during Parameter parsing and validation.
    /// May be overridden to return custom error formats. This is called inside a catch block.
    /// Important: When overriding, do not call `throw ex;`, but instead use `throw;`.
    /// </summary>
    virtual std::pair<Pistache::Http::Code, std::string> handleParsingException(const std::exception& ex) const noexcept;

    /// <summary>
    /// Helper function to handle unexpected Exceptions during processing of the request in handler functions.
    /// May be overridden to return custom error formats. This is called inside a catch block.
    /// Important: When overriding, do not call `throw ex;`, but instead use `throw;`.
    /// </summary>
    virtual void handleOperationException(const std::exception& ex, Pistache::Http::ResponseWriter &response) const noexcept;

    /// <summary>
    /// Helper function to handle unexpected Exceptions during processing of the request in handler functions.
    /// May be overridden to return custom error formats. This is called inside a catch block.
    /// Important: When overriding, do not call `throw ex;`, but instead use `throw;`.
    /// </summary>
    virtual std::pair<Pistache::Http::Code, std::string> handleOperationException(const std::exception& ex) const noexcept;

    /// <summary>
    /// Delete lead ads subscription
    /// </summary>
    /// <remarks>
    /// Delete an existing lead ads webhook subscription by ID. - Only requests for the OWNER or ADMIN of the ad_account will be allowed.  &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/getting-started/beta-and-advanced-access/&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;
    /// </remarks>
    /// <param name="adAccountId">Unique identifier of an ad account.</param>
    /// <param name="subscriptionId">Unique identifier of a subscription.</param>
    virtual void ad_accounts_subscriptions_del_by_id(const std::string &adAccountId, const std::string &subscriptionId, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Get lead ads subscription
    /// </summary>
    /// <remarks>
    /// Get a specific lead ads subscription record. - Only requests for the OWNER or ADMIN of the ad_account will be allowed.  &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/getting-started/beta-and-advanced-access/&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;
    /// </remarks>
    /// <param name="adAccountId">Unique identifier of an ad account.</param>
    /// <param name="subscriptionId">Unique identifier of a subscription.</param>
    virtual void ad_accounts_subscriptions_get_by_id(const std::string &adAccountId, const std::string &subscriptionId, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Get lead ads subscriptions
    /// </summary>
    /// <remarks>
    /// Get the advertiser&#39;s list of lead ads subscriptions. - Only requests for the OWNER or ADMIN of the ad_account will be allowed.  &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/getting-started/beta-and-advanced-access/&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;
    /// </remarks>
    /// <param name="adAccountId">Unique identifier of an ad account.</param>
    /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
    /// <param name="bookmark">Cursor used to fetch the next page of items (optional, default to &quot;&quot;)</param>
    virtual void ad_accounts_subscriptions_get_list(const std::string &adAccountId, const std::optional<int32_t> &pageSize, const std::optional<std::string> &bookmark, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Create lead ads subscription
    /// </summary>
    /// <remarks>
    /// Create a lead ads webhook subscription. Subscriptions allow Pinterest to deliver lead data from Ads Manager directly to the subscriber. Subscriptions can exist for a specific lead form or at ad account level. - Only requests for the OWNER or ADMIN of the ad_account will be allowed. - Advertisers can set up multiple integrations using ad_account_id + lead_form_id but only one integration per unique records. - For data security, egress lead data is encrypted with AES-256-GCM.  &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/getting-started/beta-and-advanced-access/&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;
    /// </remarks>
    /// <param name="adAccountId">Unique identifier of an ad account.</param>
    /// <param name="adAccountCreateSubscriptionRequest">Subscription to create.</param>
    virtual void ad_accounts_subscriptions_post(const std::string &adAccountId, const org::openapitools::server::model::AdAccountCreateSubscriptionRequest &adAccountCreateSubscriptionRequest, Pistache::Http::ResponseWriter &response) = 0;

};

} // namespace org::openapitools::server::api

#endif /* LeadAdsApi_H_ */

