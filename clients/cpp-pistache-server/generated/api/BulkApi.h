/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * BulkApi.h
 *
 * 
 */

#ifndef BulkApi_H_
#define BulkApi_H_


#include "ApiBase.h"

#include <pistache/http.h>
#include <pistache/router.h>
#include <pistache/http_headers.h>

#include <optional>
#include <utility>

#include "BulkDownloadRequest.h"
#include "BulkDownloadResponse.h"
#include "BulkUpsertRequest.h"
#include "BulkUpsertResponse.h"
#include "BulkUpsertStatusResponse.h"
#include "Error.h"
#include <string>

namespace org::openapitools::server::api
{

class  BulkApi : public ApiBase {
public:
    explicit BulkApi(const std::shared_ptr<Pistache::Rest::Router>& rtr);
    ~BulkApi() override = default;
    void init() override;

    static const std::string base;

private:
    void setupRoutes();

    void bulk_download_create_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void bulk_request_get_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void bulk_upsert_create_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void bulk_api_default_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);

    /// <summary>
    /// Helper function to handle unexpected Exceptions during Parameter parsing and validation.
    /// May be overridden to return custom error formats. This is called inside a catch block.
    /// Important: When overriding, do not call `throw ex;`, but instead use `throw;`.
    /// </summary>
    virtual void handleParsingException(const std::exception& ex, Pistache::Http::ResponseWriter &response) const noexcept;

    /// <summary>
    /// Helper function to handle unexpected Exceptions during Parameter parsing and validation.
    /// May be overridden to return custom error formats. This is called inside a catch block.
    /// Important: When overriding, do not call `throw ex;`, but instead use `throw;`.
    /// </summary>
    virtual std::pair<Pistache::Http::Code, std::string> handleParsingException(const std::exception& ex) const noexcept;

    /// <summary>
    /// Helper function to handle unexpected Exceptions during processing of the request in handler functions.
    /// May be overridden to return custom error formats. This is called inside a catch block.
    /// Important: When overriding, do not call `throw ex;`, but instead use `throw;`.
    /// </summary>
    virtual void handleOperationException(const std::exception& ex, Pistache::Http::ResponseWriter &response) const noexcept;

    /// <summary>
    /// Helper function to handle unexpected Exceptions during processing of the request in handler functions.
    /// May be overridden to return custom error formats. This is called inside a catch block.
    /// Important: When overriding, do not call `throw ex;`, but instead use `throw;`.
    /// </summary>
    virtual std::pair<Pistache::Http::Code, std::string> handleOperationException(const std::exception& ex) const noexcept;

    /// <summary>
    /// Get advertiser entities in bulk
    /// </summary>
    /// <remarks>
    /// Create an asynchronous report that may include information on campaigns, ad groups, product groups, ads, and/or keywords; can filter by campaigns. Though the entities may be active, archived, or paused, only active entities will return data.
    /// </remarks>
    /// <param name="adAccountId">Unique identifier of an ad account.</param>
    /// <param name="bulkDownloadRequest">Parameters to get ad entities in bulk</param>
    virtual void bulk_download_create(const std::string &adAccountId, const org::openapitools::server::model::BulkDownloadRequest &bulkDownloadRequest, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Download advertiser entities in bulk
    /// </summary>
    /// <remarks>
    /// Get the status of a bulk request by &lt;code&gt;request_id&lt;/code&gt;, along with a download URL that will allow you to download the new or updated entity data (campaigns, ad groups, product groups, ads, or keywords).
    /// </remarks>
    /// <param name="adAccountId">Unique identifier of an ad account.</param>
    /// <param name="bulkRequestId">Unique identifier of a bulk upsert request.</param>
    /// <param name="includeDetails">if set to True then attach the errors/details to all the requests (optional, default to false)</param>
    virtual void bulk_request_get(const std::string &adAccountId, const std::string &bulkRequestId, const std::optional<bool> &includeDetails, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Create/update ad entities in bulk
    /// </summary>
    /// <remarks>
    /// Either create or update any combination of campaigns, ad groups, product groups, ads, or keywords. Note that this request will be processed asynchronously; the response will include a &lt;code&gt;request_id&lt;/code&gt; that can be used to obtain the status of the request.
    /// </remarks>
    /// <param name="adAccountId">Unique identifier of an ad account.</param>
    /// <param name="bulkUpsertRequest">Parameters to get create/update ad entities in bulk</param>
    virtual void bulk_upsert_create(const std::string &adAccountId, const org::openapitools::server::model::BulkUpsertRequest &bulkUpsertRequest, Pistache::Http::ResponseWriter &response) = 0;

};

} // namespace org::openapitools::server::api

#endif /* BulkApi_H_ */

