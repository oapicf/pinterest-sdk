/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * LeadFormsApi.h
 *
 * 
 */

#ifndef LeadFormsApi_H_
#define LeadFormsApi_H_


#include "ApiBase.h"

#include <pistache/http.h>
#include <pistache/router.h>
#include <pistache/http_headers.h>

#include <optional>
#include <utility>

#include "Error.h"
#include "LeadFormArrayResponse.h"
#include "LeadFormCreateRequest.h"
#include "LeadFormResponse.h"
#include "LeadFormTestRequest.h"
#include "LeadFormTestResponse.h"
#include "LeadFormUpdateRequest.h"
#include "Lead_forms_list_200_response.h"
#include <string>
#include <vector>

namespace org::openapitools::server::api
{

class  LeadFormsApi : public ApiBase {
public:
    explicit LeadFormsApi(const std::shared_ptr<Pistache::Rest::Router>& rtr);
    ~LeadFormsApi() override = default;
    void init() override;

    static const std::string base;

private:
    void setupRoutes();

    void lead_form_test_create_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void lead_form_get_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void lead_forms_create_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void lead_forms_list_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void lead_forms_update_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void lead_forms_api_default_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);

    /// <summary>
    /// Helper function to handle unexpected Exceptions during Parameter parsing and validation.
    /// May be overridden to return custom error formats. This is called inside a catch block.
    /// Important: When overriding, do not call `throw ex;`, but instead use `throw;`.
    /// </summary>
    virtual void handleParsingException(const std::exception& ex, Pistache::Http::ResponseWriter &response) const noexcept;

    /// <summary>
    /// Helper function to handle unexpected Exceptions during Parameter parsing and validation.
    /// May be overridden to return custom error formats. This is called inside a catch block.
    /// Important: When overriding, do not call `throw ex;`, but instead use `throw;`.
    /// </summary>
    virtual std::pair<Pistache::Http::Code, std::string> handleParsingException(const std::exception& ex) const noexcept;

    /// <summary>
    /// Helper function to handle unexpected Exceptions during processing of the request in handler functions.
    /// May be overridden to return custom error formats. This is called inside a catch block.
    /// Important: When overriding, do not call `throw ex;`, but instead use `throw;`.
    /// </summary>
    virtual void handleOperationException(const std::exception& ex, Pistache::Http::ResponseWriter &response) const noexcept;

    /// <summary>
    /// Helper function to handle unexpected Exceptions during processing of the request in handler functions.
    /// May be overridden to return custom error formats. This is called inside a catch block.
    /// Important: When overriding, do not call `throw ex;`, but instead use `throw;`.
    /// </summary>
    virtual std::pair<Pistache::Http::Code, std::string> handleOperationException(const std::exception& ex) const noexcept;

    /// <summary>
    /// Create lead form test data
    /// </summary>
    /// <remarks>
    /// Create lead form test data based on the list of answers provided as part of the body. - List of answers should follow the questions creation order.  &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/getting-started/beta-and-advanced-access/&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;
    /// </remarks>
    /// <param name="adAccountId">Unique identifier of an ad account.</param>
    /// <param name="leadFormId">Unique identifier of a lead form.</param>
    /// <param name="leadFormTestRequest">Subscription to create.</param>
    virtual void lead_form_test_create(const std::string &adAccountId, const std::string &leadFormId, const org::openapitools::server::model::LeadFormTestRequest &leadFormTestRequest, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Get lead form by id
    /// </summary>
    /// <remarks>
    /// &lt;strong&gt;This feature is currently in beta and not available to all apps, if you&#39;re interested in joining the beta, please reach out to your Pinterest account manager.&lt;/strong&gt;  Gets a lead form given it&#39;s ID. It must also be associated with the provided ad account ID.  For more, see &lt;a class&#x3D;\&quot;reference external\&quot; href&#x3D;\&quot;https://help.pinterest.com/en/business/article/lead-ads\&quot;&gt;Lead ads&lt;/a&gt;.
    /// </remarks>
    /// <param name="adAccountId">Unique identifier of an ad account.</param>
    /// <param name="leadFormId">Unique identifier of a lead form.</param>
    virtual void lead_form_get(const std::string &adAccountId, const std::string &leadFormId, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Create lead forms
    /// </summary>
    /// <remarks>
    /// &lt;strong&gt;This feature is currently in beta and not available to all apps, if you&#39;re interested in joining the beta, please reach out to your Pinterest account manager.&lt;/strong&gt;  Create lead forms. Lead forms are used in lead ads and allow you to control what text appears on the lead form’ s description, questions and confirmation sections.  For more, see &lt;a class&#x3D;\&quot;reference external\&quot; href&#x3D;\&quot;https://help.pinterest.com/en/business/article/lead-ads\&quot;&gt;Lead ads&lt;/a&gt;.
    /// </remarks>
    /// <param name="adAccountId">Unique identifier of an ad account.</param>
    /// <param name="leadFormCreateRequest">List of lead forms to create, size limit [1, 30].</param>
    virtual void lead_forms_create(const std::string &adAccountId, const std::vector<org::openapitools::server::model::LeadFormCreateRequest> &leadFormCreateRequest, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// List lead forms
    /// </summary>
    /// <remarks>
    /// &lt;strong&gt;This feature is currently in beta and not available to all apps, if you&#39;re interested in joining the beta, please reach out to your Pinterest account manager.&lt;/strong&gt;  List lead forms associated with an ad account ID.  For more, see &lt;a class&#x3D;\&quot;reference external\&quot; href&#x3D;\&quot;https://help.pinterest.com/en/business/article/lead-ads\&quot;&gt;Lead ads&lt;/a&gt;.
    /// </remarks>
    /// <param name="adAccountId">Unique identifier of an ad account.</param>
    /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
    /// <param name="order">The order in which to sort the items returned: “ASCENDING” or “DESCENDING” by ID. Note that higher-value IDs are associated with more-recently added items. (optional, default to &quot;&quot;)</param>
    /// <param name="bookmark">Cursor used to fetch the next page of items (optional, default to &quot;&quot;)</param>
    virtual void lead_forms_list(const std::string &adAccountId, const std::optional<int32_t> &pageSize, const std::optional<std::string> &order, const std::optional<std::string> &bookmark, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Update lead forms
    /// </summary>
    /// <remarks>
    /// &lt;strong&gt;This feature is currently in beta and not available to all apps, if you&#39;re interested in joining the beta, please reach out to your Pinterest account manager.&lt;/strong&gt;  Update lead forms. Lead ads help you reach people who are actively looking for, and interested in, your goods and services. The lead form can be associated with an ad to allow people to fill out the form.  For more, see &lt;a class&#x3D;\&quot;reference external\&quot; href&#x3D;\&quot;https://help.pinterest.com/en/business/article/lead-ads\&quot;&gt;Lead ads&lt;/a&gt;.
    /// </remarks>
    /// <param name="adAccountId">Unique identifier of an ad account.</param>
    /// <param name="leadFormUpdateRequest">List of lead forms to update, size limit [1, 30].</param>
    virtual void lead_forms_update(const std::string &adAccountId, const std::vector<org::openapitools::server::model::LeadFormUpdateRequest> &leadFormUpdateRequest, Pistache::Http::ResponseWriter &response) = 0;

};

} // namespace org::openapitools::server::api

#endif /* LeadFormsApi_H_ */

