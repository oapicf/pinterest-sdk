/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * BusinessAccessAssetsApi.h
 *
 * 
 */

#ifndef BusinessAccessAssetsApi_H_
#define BusinessAccessAssetsApi_H_


#include "ApiBase.h"

#include <pistache/http.h>
#include <pistache/router.h>
#include <pistache/http_headers.h>

#include <optional>
#include <utility>

#include "Business_asset_members_get_200_response.h"
#include "Business_asset_partners_get_200_response.h"
#include "Business_assets_get_200_response.h"
#include "Business_member_assets_get_200_response.h"
#include "Business_members_asset_access_delete_request.h"
#include "Business_partner_asset_access_get_200_response.h"
#include "CreateAssetGroupBody.h"
#include "CreateAssetGroupResponse.h"
#include "DeleteAssetGroupBody.h"
#include "DeleteAssetGroupResponse.h"
#include "DeleteMemberAccessResultsResponseArray.h"
#include "DeletePartnerAssetAccessBody.h"
#include "DeletePartnerAssetsResultsResponseArray.h"
#include "Error.h"
#include "PartnerType.h"
#include "PermissionsWithOwner.h"
#include "UpdateAssetGroupBody.h"
#include "UpdateAssetGroupResponse.h"
#include "UpdateMemberAssetAccessBody.h"
#include "UpdateMemberAssetsResultsResponseArray.h"
#include "UpdatePartnerAssetAccessBody.h"
#include "UpdatePartnerAssetsResultsResponseArray.h"
#include <string>
#include <vector>

namespace org::openapitools::server::api
{

class  BusinessAccessAssetsApi : public ApiBase {
public:
    explicit BusinessAccessAssetsApi(const std::shared_ptr<Pistache::Rest::Router>& rtr);
    ~BusinessAccessAssetsApi() override = default;
    void init() override;

    static const std::string base;

private:
    void setupRoutes();

    void asset_group_create_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void asset_group_delete_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void asset_group_update_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void business_asset_members_get_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void business_asset_partners_get_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void business_assets_get_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void business_member_assets_get_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void business_members_asset_access_delete_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void business_members_asset_access_update_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void business_partner_asset_access_get_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void delete_partner_asset_access_handler_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void update_partner_asset_access_handler_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void business_access_assets_api_default_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);

    /// <summary>
    /// Helper function to handle unexpected Exceptions during Parameter parsing and validation.
    /// May be overridden to return custom error formats. This is called inside a catch block.
    /// Important: When overriding, do not call `throw ex;`, but instead use `throw;`.
    /// </summary>
    virtual void handleParsingException(const std::exception& ex, Pistache::Http::ResponseWriter &response) const noexcept;

    /// <summary>
    /// Helper function to handle unexpected Exceptions during Parameter parsing and validation.
    /// May be overridden to return custom error formats. This is called inside a catch block.
    /// Important: When overriding, do not call `throw ex;`, but instead use `throw;`.
    /// </summary>
    virtual std::pair<Pistache::Http::Code, std::string> handleParsingException(const std::exception& ex) const noexcept;

    /// <summary>
    /// Helper function to handle unexpected Exceptions during processing of the request in handler functions.
    /// May be overridden to return custom error formats. This is called inside a catch block.
    /// Important: When overriding, do not call `throw ex;`, but instead use `throw;`.
    /// </summary>
    virtual void handleOperationException(const std::exception& ex, Pistache::Http::ResponseWriter &response) const noexcept;

    /// <summary>
    /// Helper function to handle unexpected Exceptions during processing of the request in handler functions.
    /// May be overridden to return custom error formats. This is called inside a catch block.
    /// Important: When overriding, do not call `throw ex;`, but instead use `throw;`.
    /// </summary>
    virtual std::pair<Pistache::Http::Code, std::string> handleOperationException(const std::exception& ex) const noexcept;

    /// <summary>
    /// Create a new asset group.
    /// </summary>
    /// <remarks>
    /// Create a new asset group with the specified parameters. - An &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/asset-groups\&quot;&gt;asset group&lt;/a&gt; is a custom group of assets based on how youâ€™d like to manage your accounts.
    /// </remarks>
    /// <param name="businessId">Unique identifier of the requesting business.</param>
    /// <param name="createAssetGroupBody"></param>
    virtual void asset_group_create(const std::string &businessId, const org::openapitools::server::model::CreateAssetGroupBody &createAssetGroupBody, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Delete asset groups.
    /// </summary>
    /// <remarks>
    /// Delete a batch of asset groups.
    /// </remarks>
    /// <param name="businessId">Unique identifier of the requesting business.</param>
    /// <param name="deleteAssetGroupBody"></param>
    virtual void asset_group_delete(const std::string &businessId, const org::openapitools::server::model::DeleteAssetGroupBody &deleteAssetGroupBody, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Update asset groups.
    /// </summary>
    /// <remarks>
    /// Update a batch of asset groups with the specified parameters.
    /// </remarks>
    /// <param name="businessId">Unique identifier of the requesting business.</param>
    /// <param name="updateAssetGroupBody"></param>
    virtual void asset_group_update(const std::string &businessId, const org::openapitools::server::model::UpdateAssetGroupBody &updateAssetGroupBody, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Get members with access to asset
    /// </summary>
    /// <remarks>
    /// Get all the members the requesting business has granted access to on the given asset.
    /// </remarks>
    /// <param name="businessId">Unique identifier of the requesting business.</param>
    /// <param name="assetId">Unique identifier of a business asset.</param>
    /// <param name="bookmark">Cursor used to fetch the next page of items (optional, default to &quot;&quot;)</param>
    /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
    /// <param name="startIndex">An index to start fetching the results from. Only the results starting from this index will be returned. (optional, default to 0)</param>
    virtual void business_asset_members_get(const std::string &businessId, const std::string &assetId, const std::optional<std::string> &bookmark, const std::optional<int32_t> &pageSize, const std::optional<int32_t> &startIndex, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Get partners with access to asset
    /// </summary>
    /// <remarks>
    /// Get all the partners the requesting business has granted access to on the given asset. Note: If the asset has been shared with you, an empty array will be returned. This is because an asset shared with you cannot be shared with a different partner.
    /// </remarks>
    /// <param name="businessId">Unique identifier of the requesting business.</param>
    /// <param name="assetId">Unique identifier of a business asset.</param>
    /// <param name="startIndex">An index to start fetching the results from. Only the results starting from this index will be returned. (optional, default to 0)</param>
    /// <param name="bookmark">Cursor used to fetch the next page of items (optional, default to &quot;&quot;)</param>
    /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
    virtual void business_asset_partners_get(const std::string &businessId, const std::string &assetId, const std::optional<int32_t> &startIndex, const std::optional<std::string> &bookmark, const std::optional<int32_t> &pageSize, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// List business assets
    /// </summary>
    /// <remarks>
    /// Get all the assets the requesting business has access to. This includes assets the business owns and assets the business has access to through partnerships.
    /// </remarks>
    /// <param name="businessId">Unique identifier of the requesting business.</param>
    /// <param name="permissions">A list of asset permissions used to filter the assets. Only assets where the requesting business has at least one of the specified permissions will be returned. (optional, default to std::vector&lt;std::shared_ptr&lt;PermissionsWithOwner&gt;&gt;())</param>
    /// <param name="childAssetId">A child asset unique identifier. Used to fetch asset groups that contain the asset id as a child. (optional, default to &quot;&quot;)</param>
    /// <param name="assetGroupId">An asset group unique identifier. Used to fetch assets contained within the specified asset group. (optional, default to &quot;&quot;)</param>
    /// <param name="assetType">A resource type to filter the assets by. Only assets of the specified type will be returned. (optional, default to &quot;AD_ACCOUNT&quot;)</param>
    /// <param name="startIndex">An index to start fetching the results from. Only the results starting from this index will be returned. (optional, default to 0)</param>
    /// <param name="bookmark">Cursor used to fetch the next page of items (optional, default to &quot;&quot;)</param>
    /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
    virtual void business_assets_get(const std::string &businessId, const std::optional<std::vector<org::openapitools::server::model::PermissionsWithOwner>> &permissions, const std::optional<std::string> &childAssetId, const std::optional<std::string> &assetGroupId, const std::optional<std::string> &assetType, const std::optional<int32_t> &startIndex, const std::optional<std::string> &bookmark, const std::optional<int32_t> &pageSize, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Get assets assigned to a member
    /// </summary>
    /// <remarks>
    /// Get assets on which you assigned asset permissions to the given member. Can be used to: - get all assets, regardless of asset type or - get assets of one asset type by using the asset_type query. The return response will include the permissions the member has to that asset and the asset type.
    /// </remarks>
    /// <param name="businessId">Unique identifier of the requesting business.</param>
    /// <param name="memberId">The member id to fetch assets for.</param>
    /// <param name="assetType">A resource type to filter the assets by. Only assets of the specified type will be returned. (optional, default to &quot;AD_ACCOUNT&quot;)</param>
    /// <param name="startIndex">An index to start fetching the results from. Only the results starting from this index will be returned. (optional, default to 0)</param>
    /// <param name="bookmark">Cursor used to fetch the next page of items (optional, default to &quot;&quot;)</param>
    /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
    virtual void business_member_assets_get(const std::string &businessId, const std::string &memberId, const std::optional<std::string> &assetType, const std::optional<int32_t> &startIndex, const std::optional<std::string> &bookmark, const std::optional<int32_t> &pageSize, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Delete member access to asset
    /// </summary>
    /// <remarks>
    /// Terminate multiple members&#39; access to an asset.
    /// </remarks>
    /// <param name="businessId">Unique identifier of the requesting business.</param>
    /// <param name="businessMembersAssetAccessDeleteRequest">List member assset permissions to delete.</param>
    virtual void business_members_asset_access_delete(const std::string &businessId, const org::openapitools::server::model::Business_members_asset_access_delete_request &businessMembersAssetAccessDeleteRequest, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Assign/Update member asset permissions
    /// </summary>
    /// <remarks>
    /// Grant multiple members access to assets and/or update multiple member&#39;s exisiting permissions to an asset. Note: Not all listed permissions are applicable to each asset type. For example, PROFILE_PUBLISHER would not be applicable to an asset of type AD_ACCOUNT. The permission level PROFILE_PUBLISHER is only available to an asset of the type PROFILE. 
    /// </remarks>
    /// <param name="businessId">Unique identifier of the requesting business.</param>
    /// <param name="updateMemberAssetAccessBody">List of member asset permissions to create or update.</param>
    virtual void business_members_asset_access_update(const std::string &businessId, const org::openapitools::server::model::UpdateMemberAssetAccessBody &updateMemberAssetAccessBody, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Get assets assigned to a partner or assets assigned by a partner
    /// </summary>
    /// <remarks>
    /// Can be used to get the business assets your partner has granted you access to or the business assets you have granted your partner access to. If you specify: - partner_type&#x3D;INTERNAL, you will retrieve your business assets that the partner has access to. - partner_type&#x3D;EXTERNAL, you will retrieve the partner&#39;s business assets that the partner has granted you access to.
    /// </remarks>
    /// <param name="businessId">Unique identifier of the requesting business.</param>
    /// <param name="partnerId">The partner id to be bound to the Business</param>
    /// <param name="partnerType">Specifies whether to fetch internal or external (shared) partners. If partner_type&#x3D;INTERNAL, the asset being queried is for accesses the partner has to your business assets.&lt;br&gt; If partner_type&#x3D;EXTERNAL, the asset being queried is for the accesses you have to the partner&#39;s business asset. (optional, default to nullptr)</param>
    /// <param name="assetType">A resource type to filter the assets by. Only assets of the specified type will be returned. (optional, default to &quot;AD_ACCOUNT&quot;)</param>
    /// <param name="startIndex">An index to start fetching the results from. Only the results starting from this index will be returned. (optional, default to 0)</param>
    /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
    /// <param name="bookmark">Cursor used to fetch the next page of items (optional, default to &quot;&quot;)</param>
    virtual void business_partner_asset_access_get(const std::string &businessId, const std::string &partnerId, const std::optional<org::openapitools::server::model::org::openapitools::server::model::PartnerType> &partnerType, const std::optional<std::string> &assetType, const std::optional<int32_t> &startIndex, const std::optional<int32_t> &pageSize, const std::optional<std::string> &bookmark, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Delete partner access to asset
    /// </summary>
    /// <remarks>
    /// Terminate multiple partners&#39; access to an asset. If - partner_type&#x3D;INTERNAL: You will terminate a partner&#39;s asset access to your business assets. - partner_type&#x3D;EXTERNAL: You will terminate your own access to your partner&#39;s business assets.
    /// </remarks>
    /// <param name="businessId">Unique identifier of the requesting business.</param>
    /// <param name="deletePartnerAssetAccessBody"></param>
    virtual void delete_partner_asset_access_handler_impl(const std::string &businessId, const org::openapitools::server::model::DeletePartnerAssetAccessBody &deletePartnerAssetAccessBody, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Assign/Update partner asset permissions
    /// </summary>
    /// <remarks>
    /// Grant multiple partners access to assets and/or update multiple partner&#39;s exisiting permissions to an asset. If your partner already had permissions on the asset, they will be overriden with the new permissions you assign to them. To learn more about permission levels, visit https://help.pinterest.com/en/business/article/business-manager-overview  Note: Not all listed permissions are applicable to each asset type. For example, PROFILE_PUBLISHER would not be applicable to an asset of type AD_ACCOUNT. The permission level PROFILE_PUBLISHER is only available to an asset of the type PROFILE.
    /// </remarks>
    /// <param name="businessId">Unique identifier of the requesting business.</param>
    /// <param name="updatePartnerAssetAccessBody">A list of assets and permissions to assign to your partners.</param>
    virtual void update_partner_asset_access_handler_impl(const std::string &businessId, const org::openapitools::server::model::UpdatePartnerAssetAccessBody &updatePartnerAssetAccessBody, Pistache::Http::ResponseWriter &response) = 0;

};

} // namespace org::openapitools::server::api

#endif /* BusinessAccessAssetsApi_H_ */

