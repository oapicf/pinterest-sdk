/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * SearchApi.h
 *
 * 
 */

#ifndef SearchApi_H_
#define SearchApi_H_


#include "ApiBase.h"

#include <pistache/http.h>
#include <pistache/router.h>
#include <pistache/http_headers.h>

#include <optional>
#include <utility>

#include "Error.h"
#include "Pins_list_200_response.h"
#include "Search_partner_pins_200_response.h"
#include "Search_user_boards_get_200_response.h"
#include <string>

namespace org::openapitools::server::api
{

class  SearchApi : public ApiBase {
public:
    explicit SearchApi(const std::shared_ptr<Pistache::Rest::Router>& rtr);
    ~SearchApi() override = default;
    void init() override;

    static const std::string base;

private:
    void setupRoutes();

    void search_partner_pins_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void search_user_boards_get_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void search_user_pins_list_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void search_api_default_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);

    /// <summary>
    /// Helper function to handle unexpected Exceptions during Parameter parsing and validation.
    /// May be overridden to return custom error formats. This is called inside a catch block.
    /// Important: When overriding, do not call `throw ex;`, but instead use `throw;`.
    /// </summary>
    virtual void handleParsingException(const std::exception& ex, Pistache::Http::ResponseWriter &response) const noexcept;

    /// <summary>
    /// Helper function to handle unexpected Exceptions during Parameter parsing and validation.
    /// May be overridden to return custom error formats. This is called inside a catch block.
    /// Important: When overriding, do not call `throw ex;`, but instead use `throw;`.
    /// </summary>
    virtual std::pair<Pistache::Http::Code, std::string> handleParsingException(const std::exception& ex) const noexcept;

    /// <summary>
    /// Helper function to handle unexpected Exceptions during processing of the request in handler functions.
    /// May be overridden to return custom error formats. This is called inside a catch block.
    /// Important: When overriding, do not call `throw ex;`, but instead use `throw;`.
    /// </summary>
    virtual void handleOperationException(const std::exception& ex, Pistache::Http::ResponseWriter &response) const noexcept;

    /// <summary>
    /// Helper function to handle unexpected Exceptions during processing of the request in handler functions.
    /// May be overridden to return custom error formats. This is called inside a catch block.
    /// Important: When overriding, do not call `throw ex;`, but instead use `throw;`.
    /// </summary>
    virtual std::pair<Pistache::Http::Code, std::string> handleOperationException(const std::exception& ex) const noexcept;

    /// <summary>
    /// Search pins by a given search term
    /// </summary>
    /// <remarks>
    /// &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/getting-started/beta-and-advanced-access/&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Get the top 10 Pins by a given search term.
    /// </remarks>
    /// <param name="term">Search term to look up pins.</param>
    /// <param name="countryCode">Two letter country code (ISO 3166-1 alpha-2)</param>
    /// <param name="bookmark">Cursor used to fetch the next page of items (optional, default to &quot;&quot;)</param>
    /// <param name="locale">Search locale. (optional, default to &quot;&quot;)</param>
    /// <param name="limit">Max search result size (optional, default to 10)</param>
    virtual void search_partner_pins(const std::optional<std::string> &term, const std::optional<std::string> &countryCode, const std::optional<std::string> &bookmark, const std::optional<std::string> &locale, const std::optional<int32_t> &limit, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Search user&#39;s boards
    /// </summary>
    /// <remarks>
    /// Search for boards for the \&quot;operation user_account\&quot;. This includes boards of all board types. - By default, the \&quot;operation user_account\&quot; is the token user_account.  If using Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. See &lt;a href&#x3D;&#39;/docs/getting-started/using-business-access/&#39;&gt;Understanding Business Access&lt;/a&gt; for more information.
    /// </remarks>
    /// <param name="adAccountId">Unique identifier of an ad account. (optional, default to &quot;&quot;)</param>
    /// <param name="bookmark">Cursor used to fetch the next page of items (optional, default to &quot;&quot;)</param>
    /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
    /// <param name="query">Search query. Can contain pin description keywords or comma-separated pin IDs. (optional, default to &quot;&quot;)</param>
    virtual void search_user_boards_get(const std::optional<std::string> &adAccountId, const std::optional<std::string> &bookmark, const std::optional<int32_t> &pageSize, const std::optional<std::string> &query, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Search user&#39;s Pins
    /// </summary>
    /// <remarks>
    /// Search for pins for the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.  If using Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. See &lt;a href&#x3D;&#39;/docs/getting-started/using-business-access/&#39;&gt;Understanding Business Access&lt;/a&gt; for more information.
    /// </remarks>
    /// <param name="query">Search query. Can contain pin description keywords or comma-separated pin IDs.</param>
    /// <param name="adAccountId">Unique identifier of an ad account. (optional, default to &quot;&quot;)</param>
    /// <param name="bookmark">Cursor used to fetch the next page of items (optional, default to &quot;&quot;)</param>
    virtual void search_user_pins_list(const std::optional<std::string> &query, const std::optional<std::string> &adAccountId, const std::optional<std::string> &bookmark, Pistache::Http::ResponseWriter &response) = 0;

};

} // namespace org::openapitools::server::api

#endif /* SearchApi_H_ */

