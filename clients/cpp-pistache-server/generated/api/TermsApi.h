/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * TermsApi.h
 *
 * 
 */

#ifndef TermsApi_H_
#define TermsApi_H_


#include "ApiBase.h"

#include <pistache/http.h>
#include <pistache/router.h>
#include <pistache/http_headers.h>

#include <optional>
#include <utility>

#include "Error.h"
#include "RelatedTerms.h"
#include <string>
#include <vector>

namespace org::openapitools::server::api
{

class  TermsApi : public ApiBase {
public:
    explicit TermsApi(const std::shared_ptr<Pistache::Rest::Router>& rtr);
    ~TermsApi() override = default;
    void init() override;

    static const std::string base;

private:
    void setupRoutes();

    void terms_related_list_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void terms_suggested_list_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void terms_api_default_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);

    /// <summary>
    /// Helper function to handle unexpected Exceptions during Parameter parsing and validation.
    /// May be overridden to return custom error formats. This is called inside a catch block.
    /// Important: When overriding, do not call `throw ex;`, but instead use `throw;`.
    /// </summary>
    virtual void handleParsingException(const std::exception& ex, Pistache::Http::ResponseWriter &response) const noexcept;

    /// <summary>
    /// Helper function to handle unexpected Exceptions during Parameter parsing and validation.
    /// May be overridden to return custom error formats. This is called inside a catch block.
    /// Important: When overriding, do not call `throw ex;`, but instead use `throw;`.
    /// </summary>
    virtual std::pair<Pistache::Http::Code, std::string> handleParsingException(const std::exception& ex) const noexcept;

    /// <summary>
    /// Helper function to handle unexpected Exceptions during processing of the request in handler functions.
    /// May be overridden to return custom error formats. This is called inside a catch block.
    /// Important: When overriding, do not call `throw ex;`, but instead use `throw;`.
    /// </summary>
    virtual void handleOperationException(const std::exception& ex, Pistache::Http::ResponseWriter &response) const noexcept;

    /// <summary>
    /// Helper function to handle unexpected Exceptions during processing of the request in handler functions.
    /// May be overridden to return custom error formats. This is called inside a catch block.
    /// Important: When overriding, do not call `throw ex;`, but instead use `throw;`.
    /// </summary>
    virtual std::pair<Pistache::Http::Code, std::string> handleOperationException(const std::exception& ex) const noexcept;

    /// <summary>
    /// List related terms
    /// </summary>
    /// <remarks>
    /// Get a list of terms logically related to each input term. &lt;p/&gt; Example: the term &#39;workout&#39; would list related terms like &#39;one song workout&#39;, &#39;yoga workout&#39;, &#39;workout motivation&#39;, etc.
    /// </remarks>
    /// <param name="terms">List of input terms.</param>
    virtual void terms_related_list(const std::optional<std::vector<std::string>> &terms, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// List suggested terms
    /// </summary>
    /// <remarks>
    /// Get popular search terms that begin with your input term. &lt;p/&gt; Example: &#39;sport&#39; would return popular terms like &#39;sports bar&#39; and &#39;sportswear&#39;, but not &#39;motor sports&#39; since the phrase does not begin with the given term.
    /// </remarks>
    /// <param name="term">Input term.</param>
    /// <param name="limit">Max suggested terms to return. (optional, default to 4)</param>
    virtual void terms_suggested_list(const std::optional<std::string> &term, const std::optional<int32_t> &limit, Pistache::Http::ResponseWriter &response) = 0;

};

} // namespace org::openapitools::server::api

#endif /* TermsApi_H_ */

