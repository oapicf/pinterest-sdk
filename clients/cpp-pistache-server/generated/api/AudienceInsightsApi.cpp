/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

#include "AudienceInsightsApi.h"
#include "Helpers.h"

namespace org::openapitools::server::api
{

using namespace org::openapitools::server::helpers;
using namespace org::openapitools::server::model;

const std::string AudienceInsightsApi::base = "/v5";

AudienceInsightsApi::AudienceInsightsApi(const std::shared_ptr<Pistache::Rest::Router>& rtr)
    : ApiBase(rtr)
{
}

void AudienceInsightsApi::init() {
    setupRoutes();
}

void AudienceInsightsApi::setupRoutes() {
    using namespace Pistache::Rest;

    Routes::Get(*router, base + "/ad_accounts/:ad_account_id/insights/audiences", Routes::bind(&AudienceInsightsApi::audience_insights_scope_and_type_get_handler, this));
    Routes::Get(*router, base + "/ad_accounts/:ad_account_id/audience_insights", Routes::bind(&AudienceInsightsApi::audience_insights_get_handler, this));

    // Default handler, called when a route is not found
    router->addCustomHandler(Routes::bind(&AudienceInsightsApi::audience_insights_api_default_handler, this));
}

void AudienceInsightsApi::handleParsingException(const std::exception& ex, Pistache::Http::ResponseWriter &response) const noexcept
{
    std::pair<Pistache::Http::Code, std::string> codeAndError = handleParsingException(ex);
    response.send(codeAndError.first, codeAndError.second);
}

std::pair<Pistache::Http::Code, std::string> AudienceInsightsApi::handleParsingException(const std::exception& ex) const noexcept
{
    try {
        throw;
    } catch (nlohmann::detail::exception &e) {
        return std::make_pair(Pistache::Http::Code::Bad_Request, e.what());
    } catch (org::openapitools::server::helpers::ValidationException &e) {
        return std::make_pair(Pistache::Http::Code::Bad_Request, e.what());
    } catch (std::exception &e) {
        return std::make_pair(Pistache::Http::Code::Internal_Server_Error, e.what());
    }
}

void AudienceInsightsApi::handleOperationException(const std::exception& ex, Pistache::Http::ResponseWriter &response) const noexcept
{
    std::pair<Pistache::Http::Code, std::string> codeAndError = handleOperationException(ex);
    response.send(codeAndError.first, codeAndError.second);
}

std::pair<Pistache::Http::Code, std::string> AudienceInsightsApi::handleOperationException(const std::exception& ex) const noexcept
{
    return std::make_pair(Pistache::Http::Code::Internal_Server_Error, ex.what());
}

void AudienceInsightsApi::audience_insights_scope_and_type_get_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {

    // Getting the path params
    auto adAccountId = request.param(":adAccountId").as<std::string>();
    
    try {
        this->audience_insights_scope_and_type_get(adAccountId, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        this->handleOperationException(e, response);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void AudienceInsightsApi::audience_insights_get_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {

    // Getting the path params
    auto adAccountId = request.param(":adAccountId").as<std::string>();
    
    // Getting the query params
    auto audienceInsightTypeQuery = request.query().get("audience_insight_type");
    std::optional<AudienceInsightType> audienceInsightType;
    if(audienceInsightTypeQuery.has_value()){
        AudienceInsightType valueQuery_instance;
        if(fromStringValue(audienceInsightTypeQuery.value(), valueQuery_instance)){
            audienceInsightType = valueQuery_instance;
        }
    }
    
    try {
        this->audience_insights_get(adAccountId, audienceInsightType, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        this->handleOperationException(e, response);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}

void AudienceInsightsApi::audience_insights_api_default_handler(const Pistache::Rest::Request &, Pistache::Http::ResponseWriter response) {
    response.send(Pistache::Http::Code::Not_Found, "The requested method does not exist");
}

} // namespace org::openapitools::server::api

