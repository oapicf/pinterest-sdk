/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * UserAccountApi.h
 *
 * 
 */

#ifndef UserAccountApi_H_
#define UserAccountApi_H_


#include "ApiBase.h"

#include <pistache/http.h>
#include <pistache/router.h>
#include <pistache/http_headers.h>

#include <optional>
#include <utility>

#include "Account.h"
#include "AnalyticsMetricsResponse.h"
#include "Boards_user_follows_list_200_response.h"
#include "Error.h"
#include "FollowUserRequest.h"
#include "Followers_list_200_response.h"
#include "LinkedBusiness.h"
#include "TopPinsAnalyticsResponse.h"
#include "TopVideoPinsAnalyticsResponse.h"
#include "UserFollowingFeedType.h"
#include "UserSummary.h"
#include "UserWebsiteSummary.h"
#include "UserWebsiteVerificationCode.h"
#include "UserWebsiteVerifyRequest.h"
#include "User_account_followed_interests_200_response.h"
#include "User_following_get_200_response.h"
#include "User_websites_get_200_response.h"
#include <map>
#include <string>
#include <vector>

namespace org::openapitools::server::api
{

class  UserAccountApi : public ApiBase {
public:
    explicit UserAccountApi(const std::shared_ptr<Pistache::Rest::Router>& rtr);
    ~UserAccountApi() override = default;
    void init() override;

    static const std::string base;

private:
    void setupRoutes();

    void boards_user_follows_list_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void follow_user_update_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void followers_list_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void linked_business_accounts_get_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void unverify_website_delete_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void user_account_analytics_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void user_account_analytics_top_pins_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void user_account_analytics_top_video_pins_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void user_account_followed_interests_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void user_account_get_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void user_following_get_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void user_websites_get_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void verify_website_update_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void website_verification_get_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void user_account_api_default_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);

    /// <summary>
    /// Helper function to handle unexpected Exceptions during Parameter parsing and validation.
    /// May be overridden to return custom error formats. This is called inside a catch block.
    /// Important: When overriding, do not call `throw ex;`, but instead use `throw;`.
    /// </summary>
    virtual void handleParsingException(const std::exception& ex, Pistache::Http::ResponseWriter &response) const noexcept;

    /// <summary>
    /// Helper function to handle unexpected Exceptions during Parameter parsing and validation.
    /// May be overridden to return custom error formats. This is called inside a catch block.
    /// Important: When overriding, do not call `throw ex;`, but instead use `throw;`.
    /// </summary>
    virtual std::pair<Pistache::Http::Code, std::string> handleParsingException(const std::exception& ex) const noexcept;

    /// <summary>
    /// Helper function to handle unexpected Exceptions during processing of the request in handler functions.
    /// May be overridden to return custom error formats. This is called inside a catch block.
    /// Important: When overriding, do not call `throw ex;`, but instead use `throw;`.
    /// </summary>
    virtual void handleOperationException(const std::exception& ex, Pistache::Http::ResponseWriter &response) const noexcept;

    /// <summary>
    /// Helper function to handle unexpected Exceptions during processing of the request in handler functions.
    /// May be overridden to return custom error formats. This is called inside a catch block.
    /// Important: When overriding, do not call `throw ex;`, but instead use `throw;`.
    /// </summary>
    virtual std::pair<Pistache::Http::Code, std::string> handleOperationException(const std::exception& ex) const noexcept;

    /// <summary>
    /// List following boards
    /// </summary>
    /// <remarks>
    /// Get a list of the boards a user follows. The request returns a board summary object array.
    /// </remarks>
    /// <param name="bookmark">Cursor used to fetch the next page of items (optional, default to &quot;&quot;)</param>
    /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
    /// <param name="explicitFollowing">Whether or not to include implicit user follows, which means followees with board follows. When explicit_following is True, it means we only want explicit user follows. (optional, default to false)</param>
    /// <param name="adAccountId">Unique identifier of an ad account. (optional, default to &quot;&quot;)</param>
    virtual void boards_user_follows_list(const std::optional<std::string> &bookmark, const std::optional<int32_t> &pageSize, const std::optional<bool> &explicitFollowing, const std::optional<std::string> &adAccountId, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Follow user
    /// </summary>
    /// <remarks>
    /// &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/getting-started/beta-and-advanced-access/&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Use this request, as a signed-in user, to follow another user.
    /// </remarks>
    /// <param name="username">A valid username</param>
    /// <param name="followUserRequest">Follow a user.</param>
    virtual void follow_user_update(const std::string &username, const org::openapitools::server::model::FollowUserRequest &followUserRequest, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// List followers
    /// </summary>
    /// <remarks>
    /// Get a list of your followers.
    /// </remarks>
    /// <param name="bookmark">Cursor used to fetch the next page of items (optional, default to &quot;&quot;)</param>
    /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
    virtual void followers_list(const std::optional<std::string> &bookmark, const std::optional<int32_t> &pageSize, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// List linked businesses
    /// </summary>
    /// <remarks>
    /// Get a list of your linked business accounts.
    /// </remarks>
    virtual void linked_business_accounts_get(Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Unverify website
    /// </summary>
    /// <remarks>
    /// Unverifu a website verified by the signed-in user.
    /// </remarks>
    /// <param name="website">Website with path or domain only</param>
    virtual void unverify_website_delete(const std::optional<std::string> &website, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Get user account analytics
    /// </summary>
    /// <remarks>
    /// Get analytics for the \&quot;operation user_account\&quot; - By default, the \&quot;operation user_account\&quot; is the token user_account.  Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;.
    /// </remarks>
    /// <param name="startDate">Metric report start date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days back from today.</param>
    /// <param name="endDate">Metric report end date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days past start_date.</param>
    /// <param name="fromClaimedContent">Filter on Pins that match your claimed domain. (optional, default to &quot;BOTH&quot;)</param>
    /// <param name="pinFormat">Pin formats to get data for, default is all. (optional, default to &quot;ALL&quot;)</param>
    /// <param name="appTypes">Apps or devices to get data for, default is all. (optional, default to &quot;ALL&quot;)</param>
    /// <param name="contentType">Filter to paid or organic data. Default is all. (optional, default to &quot;ALL&quot;)</param>
    /// <param name="source">Filter to activity from Pins created and saved by your, or activity created and saved by others from your claimed accounts (optional, default to &quot;ALL&quot;)</param>
    /// <param name="metricTypes">Metric types to get data for, default is all.  (optional, default to std::vector&lt;std::shared_ptr&lt;std::string&gt;&gt;())</param>
    /// <param name="splitField">How to split the data into groups. Not including this param means data won&#39;t be split. (optional, default to &quot;NO_SPLIT&quot;)</param>
    /// <param name="adAccountId">Unique identifier of an ad account. (optional, default to &quot;&quot;)</param>
    virtual void user_account_analytics(const std::optional<std::string> &startDate, const std::optional<std::string> &endDate, const std::optional<std::string> &fromClaimedContent, const std::optional<std::string> &pinFormat, const std::optional<std::string> &appTypes, const std::optional<std::string> &contentType, const std::optional<std::string> &source, const std::optional<std::vector<std::string>> &metricTypes, const std::optional<std::string> &splitField, const std::optional<std::string> &adAccountId, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Get user account top pins analytics
    /// </summary>
    /// <remarks>
    /// Gets analytics data about a user&#39;s top pins (limited to the top 50). - By default, the \&quot;operation user_account\&quot; is the token user_account.  Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;.
    /// </remarks>
    /// <param name="startDate">Metric report start date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days back from today.</param>
    /// <param name="endDate">Metric report end date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days past start_date.</param>
    /// <param name="sortBy">Specify sorting order for metrics</param>
    /// <param name="fromClaimedContent">Filter on Pins that match your claimed domain. (optional, default to &quot;BOTH&quot;)</param>
    /// <param name="pinFormat">Pin formats to get data for, default is all. (optional, default to &quot;ALL&quot;)</param>
    /// <param name="appTypes">Apps or devices to get data for, default is all. (optional, default to &quot;ALL&quot;)</param>
    /// <param name="contentType">Filter to paid or organic data. Default is all. (optional, default to &quot;ALL&quot;)</param>
    /// <param name="source">Filter to activity from Pins created and saved by your, or activity created and saved by others from your claimed accounts (optional, default to &quot;ALL&quot;)</param>
    /// <param name="metricTypes">Metric types to get data for, default is all.  (optional, default to std::vector&lt;std::shared_ptr&lt;std::string&gt;&gt;())</param>
    /// <param name="numOfPins">Number of pins to include, default is 10. Max is 50. (optional, default to 10)</param>
    /// <param name="createdInLastNDays">Get metrics for pins created in the last \&quot;n\&quot; days. (optional, default to 0)</param>
    /// <param name="adAccountId">Unique identifier of an ad account. (optional, default to &quot;&quot;)</param>
    virtual void user_account_analytics_top_pins(const std::optional<std::string> &startDate, const std::optional<std::string> &endDate, const std::optional<std::string> &sortBy, const std::optional<std::string> &fromClaimedContent, const std::optional<std::string> &pinFormat, const std::optional<std::string> &appTypes, const std::optional<std::string> &contentType, const std::optional<std::string> &source, const std::optional<std::vector<std::string>> &metricTypes, const std::optional<int32_t> &numOfPins, const std::optional<int32_t> &createdInLastNDays, const std::optional<std::string> &adAccountId, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Get user account top video pins analytics
    /// </summary>
    /// <remarks>
    /// Gets analytics data about a user&#39;s top video pins (limited to the top 50). - By default, the \&quot;operation user_account\&quot; is the token user_account.  Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;.
    /// </remarks>
    /// <param name="startDate">Metric report start date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days back from today.</param>
    /// <param name="endDate">Metric report end date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days past start_date.</param>
    /// <param name="sortBy">Specify sorting order for video metrics</param>
    /// <param name="fromClaimedContent">Filter on Pins that match your claimed domain. (optional, default to &quot;BOTH&quot;)</param>
    /// <param name="pinFormat">Pin formats to get data for, default is all. (optional, default to &quot;ALL&quot;)</param>
    /// <param name="appTypes">Apps or devices to get data for, default is all. (optional, default to &quot;ALL&quot;)</param>
    /// <param name="contentType">Filter to paid or organic data. Default is all. (optional, default to &quot;ALL&quot;)</param>
    /// <param name="source">Filter to activity from Pins created and saved by your, or activity created and saved by others from your claimed accounts (optional, default to &quot;ALL&quot;)</param>
    /// <param name="metricTypes">Metric types to get video data for, default is all.  (optional, default to std::vector&lt;std::shared_ptr&lt;std::string&gt;&gt;())</param>
    /// <param name="numOfPins">Number of pins to include, default is 10. Max is 50. (optional, default to 10)</param>
    /// <param name="createdInLastNDays">Get metrics for pins created in the last \&quot;n\&quot; days. (optional, default to 0)</param>
    /// <param name="adAccountId">Unique identifier of an ad account. (optional, default to &quot;&quot;)</param>
    virtual void user_account_analytics_top_video_pins(const std::optional<std::string> &startDate, const std::optional<std::string> &endDate, const std::optional<std::string> &sortBy, const std::optional<std::string> &fromClaimedContent, const std::optional<std::string> &pinFormat, const std::optional<std::string> &appTypes, const std::optional<std::string> &contentType, const std::optional<std::string> &source, const std::optional<std::vector<std::string>> &metricTypes, const std::optional<int32_t> &numOfPins, const std::optional<int32_t> &createdInLastNDays, const std::optional<std::string> &adAccountId, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// List following interests
    /// </summary>
    /// <remarks>
    /// Get a list of a user&#39;s following interests in one place.
    /// </remarks>
    /// <param name="username">A valid username</param>
    /// <param name="bookmark">Cursor used to fetch the next page of items (optional, default to &quot;&quot;)</param>
    /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
    virtual void user_account_followed_interests(const std::string &username, const std::optional<std::string> &bookmark, const std::optional<int32_t> &pageSize, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Get user account
    /// </summary>
    /// <remarks>
    /// Get account information for the \&quot;operation user_account\&quot; - By default, the \&quot;operation user_account\&quot; is the token user_account.  If using Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. See &lt;a href&#x3D;&#39;/docs/getting-started/using-business-access/&#39;&gt;Understanding Business Access&lt;/a&gt; for more information.
    /// </remarks>
    /// <param name="adAccountId">Unique identifier of an ad account. (optional, default to &quot;&quot;)</param>
    virtual void user_account_get(const std::optional<std::string> &adAccountId, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// List following
    /// </summary>
    /// <remarks>
    /// Get a list of who a certain user follows.
    /// </remarks>
    /// <param name="bookmark">Cursor used to fetch the next page of items (optional, default to &quot;&quot;)</param>
    /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
    /// <param name="feedType">Thrift param specifying what type of followees will be kept. Default to include all followees. (optional, default to &quot;&quot;)</param>
    /// <param name="explicitFollowing">Whether or not to include implicit user follows, which means followees with board follows. When explicit_following is True, it means we only want explicit user follows. (optional, default to false)</param>
    /// <param name="adAccountId">Unique identifier of an ad account. (optional, default to &quot;&quot;)</param>
    virtual void user_following_get(const std::optional<std::string> &bookmark, const std::optional<int32_t> &pageSize, const std::optional<UserFollowingFeedType> &feedType, const std::optional<bool> &explicitFollowing, const std::optional<std::string> &adAccountId, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Get user websites
    /// </summary>
    /// <remarks>
    /// Get user websites, claimed or not
    /// </remarks>
    /// <param name="bookmark">Cursor used to fetch the next page of items (optional, default to &quot;&quot;)</param>
    /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
    virtual void user_websites_get(const std::optional<std::string> &bookmark, const std::optional<int32_t> &pageSize, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Verify website
    /// </summary>
    /// <remarks>
    /// Verify a website as a signed-in user.
    /// </remarks>
    /// <param name="userWebsiteVerifyRequest">Verify a website.</param>
    /// <param name="adAccountId">Unique identifier of an ad account. (optional, default to &quot;&quot;)</param>
    virtual void verify_website_update(const org::openapitools::server::model::UserWebsiteVerifyRequest &userWebsiteVerifyRequest, const std::optional<std::string> &adAccountId, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Get user verification code for website claiming
    /// </summary>
    /// <remarks>
    /// Get verification code for user to install on the website to claim it.
    /// </remarks>
    /// <param name="adAccountId">Unique identifier of an ad account. (optional, default to &quot;&quot;)</param>
    virtual void website_verification_get(const std::optional<std::string> &adAccountId, Pistache::Http::ResponseWriter &response) = 0;

};

} // namespace org::openapitools::server::api

#endif /* UserAccountApi_H_ */

