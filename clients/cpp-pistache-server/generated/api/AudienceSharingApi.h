/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * AudienceSharingApi.h
 *
 * 
 */

#ifndef AudienceSharingApi_H_
#define AudienceSharingApi_H_


#include "ApiBase.h"

#include <pistache/http.h>
#include <pistache/router.h>
#include <pistache/http_headers.h>

#include <optional>
#include <utility>

#include "Ad_accounts_audiences_shared_accounts_list_200_response.h"
#include "AudienceAccountType.h"
#include "Audiences_list_200_response.h"
#include "BusinessSharedAudience.h"
#include "BusinessSharedAudienceResponse.h"
#include "Error.h"
#include "SharedAudience.h"
#include "SharedAudienceResponse.h"
#include <string>

namespace org::openapitools::server::api
{

class  AudienceSharingApi : public ApiBase {
public:
    explicit AudienceSharingApi(const std::shared_ptr<Pistache::Rest::Router>& rtr);
    ~AudienceSharingApi() override = default;
    void init() override;

    static const std::string base;

private:
    void setupRoutes();

    void ad_accounts_audiences_shared_accounts_list_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void business_account_audiences_shared_accounts_list_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void shared_audiences_for_business_list_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void update_ad_account_to_ad_account_shared_audience_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void update_ad_account_to_business_shared_audience_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void update_business_to_ad_account_shared_audience_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void update_business_to_business_shared_audience_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void audience_sharing_api_default_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);

    /// <summary>
    /// Helper function to handle unexpected Exceptions during Parameter parsing and validation.
    /// May be overridden to return custom error formats. This is called inside a catch block.
    /// Important: When overriding, do not call `throw ex;`, but instead use `throw;`.
    /// </summary>
    virtual void handleParsingException(const std::exception& ex, Pistache::Http::ResponseWriter &response) const noexcept;

    /// <summary>
    /// Helper function to handle unexpected Exceptions during Parameter parsing and validation.
    /// May be overridden to return custom error formats. This is called inside a catch block.
    /// Important: When overriding, do not call `throw ex;`, but instead use `throw;`.
    /// </summary>
    virtual std::pair<Pistache::Http::Code, std::string> handleParsingException(const std::exception& ex) const noexcept;

    /// <summary>
    /// Helper function to handle unexpected Exceptions during processing of the request in handler functions.
    /// May be overridden to return custom error formats. This is called inside a catch block.
    /// Important: When overriding, do not call `throw ex;`, but instead use `throw;`.
    /// </summary>
    virtual void handleOperationException(const std::exception& ex, Pistache::Http::ResponseWriter &response) const noexcept;

    /// <summary>
    /// Helper function to handle unexpected Exceptions during processing of the request in handler functions.
    /// May be overridden to return custom error formats. This is called inside a catch block.
    /// Important: When overriding, do not call `throw ex;`, but instead use `throw;`.
    /// </summary>
    virtual std::pair<Pistache::Http::Code, std::string> handleOperationException(const std::exception& ex) const noexcept;

    /// <summary>
    /// List accounts with access to an audience owned by an ad account
    /// </summary>
    /// <remarks>
    /// List all ad accounts and/or businesses that have access to a specific audience. The audience must be owned by the requesting ad account.
    /// </remarks>
    /// <param name="adAccountId">Unique identifier of an ad account.</param>
    /// <param name="audienceId">Unique identifier of the audience to use to filter the results.</param>
    /// <param name="accountType">Filter accounts by account type.</param>
    /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
    /// <param name="bookmark">Cursor used to fetch the next page of items (optional, default to &quot;&quot;)</param>
    virtual void ad_accounts_audiences_shared_accounts_list(const std::string &adAccountId, const std::optional<std::string> &audienceId, const std::optional<org::openapitools::server::model::AudienceAccountType> &accountType, const std::optional<int32_t> &pageSize, const std::optional<std::string> &bookmark, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// List accounts with access to an audience owned by a business
    /// </summary>
    /// <remarks>
    /// List all ad accounts and/or businesses that have access to a specific audience. The audience must either be owned by an ad account in the requesting business, or it must have been shared with the requesting business. If the requesting business is not the owner of the audience, only ad accounts owned by the requesting business will be returned.
    /// </remarks>
    /// <param name="businessId">Unique identifier of the requesting business.</param>
    /// <param name="audienceId">Unique identifier of the audience to use to filter the results.</param>
    /// <param name="accountType">Filter accounts by account type.</param>
    /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
    /// <param name="bookmark">Cursor used to fetch the next page of items (optional, default to &quot;&quot;)</param>
    virtual void business_account_audiences_shared_accounts_list(const std::string &businessId, const std::optional<std::string> &audienceId, const std::optional<org::openapitools::server::model::AudienceAccountType> &accountType, const std::optional<int32_t> &pageSize, const std::optional<std::string> &bookmark, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// List received audiences for a business
    /// </summary>
    /// <remarks>
    /// Get a list of received audiences for the given business.
    /// </remarks>
    /// <param name="businessId">Unique identifier of the requesting business.</param>
    /// <param name="bookmark">Cursor used to fetch the next page of items (optional, default to &quot;&quot;)</param>
    /// <param name="order">The order in which to sort the items returned: “ASCENDING” or “DESCENDING” by ID. Note that higher-value IDs are associated with more-recently added items. (optional, default to &quot;&quot;)</param>
    /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
    virtual void shared_audiences_for_business_list(const std::string &businessId, const std::optional<std::string> &bookmark, const std::optional<std::string> &order, const std::optional<int32_t> &pageSize, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Update audience sharing between ad accounts
    /// </summary>
    /// <remarks>
    /// From an ad account, share a specific audience with another ad account, or revoke access to a previously shared audience. Only the audience owner account can share the audience. The recipient ad account(s) must be in the same &lt;a href&#x3D;&#39;https://help.pinterest.com/en/business/article/create-and-manage-accounts&#39;&gt;Pinterest Business Hierarchy&lt;/a&gt; as the business owner of the ad account.&lt;br&gt; This endpoint is not available to all apps.&lt;a href&#x3D;&#39;/docs/getting-started/beta-and-advanced-access/&#39;&gt;Learn more&lt;/a&gt;.
    /// </remarks>
    /// <param name="adAccountId">Unique identifier of an ad account.</param>
    /// <param name="sharedAudience"></param>
    virtual void update_ad_account_to_ad_account_shared_audience(const std::string &adAccountId, const org::openapitools::server::model::SharedAudience &sharedAudience, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Update audience sharing from an ad account to businesses
    /// </summary>
    /// <remarks>
    /// From an ad account, share a specific audience with a business account, or revoke access to a previously shared audience. Only the audience owner account can share the audience. The recipient business account must be in the same business hierarchy as the business owner of the ad account.&lt;br&gt; This endpoint is not available to all apps.&lt;a href&#x3D;&#39;/docs/getting-started/beta-and-advanced-access/&#39;&gt;Learn more&lt;/a&gt;.
    /// </remarks>
    /// <param name="adAccountId">Unique identifier of an ad account.</param>
    /// <param name="businessSharedAudience"></param>
    virtual void update_ad_account_to_business_shared_audience(const std::string &adAccountId, const org::openapitools::server::model::BusinessSharedAudience &businessSharedAudience, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Update audience sharing from a business to ad accounts
    /// </summary>
    /// <remarks>
    /// From a business, share a specific audience with other ad account(s), or revoke access to a previously shared audience. &lt;ul&gt; &lt;li&gt;If the business is the owner of the audience, it can share with any ad account within the same business hierarchy.&lt;/li&gt; &lt;li&gt;If the business is the recipient of the audience, it can share with any of its owned ad accounts.&lt;/li&gt; &lt;/ul&gt; This endpoint is not available to all apps.&lt;a href&#x3D;&#39;/docs/getting-started/beta-and-advanced-access/&#39;&gt;Learn more&lt;/a&gt;.
    /// </remarks>
    /// <param name="businessId">Unique identifier of the requesting business.</param>
    /// <param name="sharedAudience"></param>
    virtual void update_business_to_ad_account_shared_audience(const std::string &businessId, const org::openapitools::server::model::SharedAudience &sharedAudience, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Update audience sharing between businesses
    /// </summary>
    /// <remarks>
    /// From a business, share a specific audience with another business account, or revoke access to a previously shared audience. Only the audience owner can share the audience with other businesses, and the recipient business must be within the same business hierarchy.&lt;br&gt; This endpoint is not available to all apps.&lt;a href&#x3D;&#39;/docs/getting-started/beta-and-advanced-access/&#39;&gt;Learn more&lt;/a&gt;.
    /// </remarks>
    /// <param name="businessId">Unique identifier of the requesting business.</param>
    /// <param name="businessSharedAudience"></param>
    virtual void update_business_to_business_shared_audience(const std::string &businessId, const org::openapitools::server::model::BusinessSharedAudience &businessSharedAudience, Pistache::Http::ResponseWriter &response) = 0;

};

} // namespace org::openapitools::server::api

#endif /* AudienceSharingApi_H_ */

