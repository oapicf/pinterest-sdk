/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * AudienceInsightsApi.h
 *
 * 
 */

#ifndef AudienceInsightsApi_H_
#define AudienceInsightsApi_H_


#include "ApiBase.h"

#include <pistache/http.h>
#include <pistache/router.h>
#include <pistache/http_headers.h>

#include <optional>
#include <utility>

#include "AudienceDefinitionResponse.h"
#include "AudienceInsightType.h"
#include "AudienceInsightsResponse.h"
#include "Error.h"
#include <string>

namespace org::openapitools::server::api
{

class  AudienceInsightsApi : public ApiBase {
public:
    explicit AudienceInsightsApi(const std::shared_ptr<Pistache::Rest::Router>& rtr);
    ~AudienceInsightsApi() override = default;
    void init() override;

    static const std::string base;

private:
    void setupRoutes();

    void audience_insights_scope_and_type_get_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void audience_insights_get_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void audience_insights_api_default_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);

    /// <summary>
    /// Helper function to handle unexpected Exceptions during Parameter parsing and validation.
    /// May be overridden to return custom error formats. This is called inside a catch block.
    /// Important: When overriding, do not call `throw ex;`, but instead use `throw;`.
    /// </summary>
    virtual void handleParsingException(const std::exception& ex, Pistache::Http::ResponseWriter &response) const noexcept;

    /// <summary>
    /// Helper function to handle unexpected Exceptions during Parameter parsing and validation.
    /// May be overridden to return custom error formats. This is called inside a catch block.
    /// Important: When overriding, do not call `throw ex;`, but instead use `throw;`.
    /// </summary>
    virtual std::pair<Pistache::Http::Code, std::string> handleParsingException(const std::exception& ex) const noexcept;

    /// <summary>
    /// Helper function to handle unexpected Exceptions during processing of the request in handler functions.
    /// May be overridden to return custom error formats. This is called inside a catch block.
    /// Important: When overriding, do not call `throw ex;`, but instead use `throw;`.
    /// </summary>
    virtual void handleOperationException(const std::exception& ex, Pistache::Http::ResponseWriter &response) const noexcept;

    /// <summary>
    /// Helper function to handle unexpected Exceptions during processing of the request in handler functions.
    /// May be overridden to return custom error formats. This is called inside a catch block.
    /// Important: When overriding, do not call `throw ex;`, but instead use `throw;`.
    /// </summary>
    virtual std::pair<Pistache::Http::Code, std::string> handleOperationException(const std::exception& ex) const noexcept;

    /// <summary>
    /// Get audience insights scope and type
    /// </summary>
    /// <remarks>
    /// Get the scope and type of available audiences, which along with a date, is an audience that has recently had an interaction (referred to here as a type) on pins. Interacted pins can belong to at least the most common **partner** or **Pinterest** scopes. This means that user interactions made on advertiser or partner pins will have the **partner** scope. You can also have user interactions performed in general on Pinterest with the **Pinterest** scope. In that case, you can then use the returned type and scope values together on requests to other endpoints to retrieve insight metrics for a desired audience.
    /// </remarks>
    /// <param name="adAccountId">Unique identifier of an ad account.</param>
    virtual void audience_insights_scope_and_type_get(const std::string &adAccountId, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Get audience insights
    /// </summary>
    /// <remarks>
    /// Get Audience Insights for an ad account. The response will return insights for 3 types of audiences: the ad account&#39;s engaged audience on Pinterest, the ad account&#39;s total audience on Pinterest and Pinterest&#39;s total audience.&lt;p/&gt; &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/audience-insights\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Learn more about Audience Insights&lt;/a&gt;.
    /// </remarks>
    /// <param name="adAccountId">Unique identifier of an ad account.</param>
    /// <param name="audienceInsightType">Type of audience insights.</param>
    virtual void audience_insights_get(const std::string &adAccountId, const std::optional<org::openapitools::server::model::AudienceInsightType> &audienceInsightType, Pistache::Http::ResponseWriter &response) = 0;

};

} // namespace org::openapitools::server::api

#endif /* AudienceInsightsApi_H_ */

