/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * PinsApi.h
 *
 * 
 */

#ifndef PinsApi_H_
#define PinsApi_H_


#include "ApiBase.h"

#include <pistache/http.h>
#include <pistache/router.h>
#include <pistache/http_headers.h>

#include <optional>
#include <utility>

#include "Error.h"
#include "Pin.h"
#include "PinAnalyticsMetricsResponse.h"
#include "PinCreate.h"
#include "PinUpdate.h"
#include "Pins_analytics_metric_types_parameter_inner.h"
#include "Pins_list_200_response.h"
#include "Pins_save_request.h"
#include <map>
#include <string>
#include <vector>

namespace org::openapitools::server::api
{

class  PinsApi : public ApiBase {
public:
    explicit PinsApi(const std::shared_ptr<Pistache::Rest::Router>& rtr);
    ~PinsApi() override = default;
    void init() override;

    static const std::string base;

private:
    void setupRoutes();

    void multi_pins_analytics_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void pins_analytics_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void pins_create_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void pins_delete_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void pins_get_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void pins_list_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void pins_save_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void pins_update_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void pins_api_default_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);

    /// <summary>
    /// Helper function to handle unexpected Exceptions during Parameter parsing and validation.
    /// May be overridden to return custom error formats. This is called inside a catch block.
    /// Important: When overriding, do not call `throw ex;`, but instead use `throw;`.
    /// </summary>
    virtual void handleParsingException(const std::exception& ex, Pistache::Http::ResponseWriter &response) const noexcept;

    /// <summary>
    /// Helper function to handle unexpected Exceptions during Parameter parsing and validation.
    /// May be overridden to return custom error formats. This is called inside a catch block.
    /// Important: When overriding, do not call `throw ex;`, but instead use `throw;`.
    /// </summary>
    virtual std::pair<Pistache::Http::Code, std::string> handleParsingException(const std::exception& ex) const noexcept;

    /// <summary>
    /// Helper function to handle unexpected Exceptions during processing of the request in handler functions.
    /// May be overridden to return custom error formats. This is called inside a catch block.
    /// Important: When overriding, do not call `throw ex;`, but instead use `throw;`.
    /// </summary>
    virtual void handleOperationException(const std::exception& ex, Pistache::Http::ResponseWriter &response) const noexcept;

    /// <summary>
    /// Helper function to handle unexpected Exceptions during processing of the request in handler functions.
    /// May be overridden to return custom error formats. This is called inside a catch block.
    /// Important: When overriding, do not call `throw ex;`, but instead use `throw;`.
    /// </summary>
    virtual std::pair<Pistache::Http::Code, std::string> handleOperationException(const std::exception& ex) const noexcept;

    /// <summary>
    /// Get multiple Pin analytics
    /// </summary>
    /// <remarks>
    /// &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/getting-started/beta-and-advanced-access/&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Get analytics for multiple pins owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. - The maximum number of pins supported in a single request is 100. - By default, the \&quot;operation user_account\&quot; is the token user_account.  Optional: Business Access: Specify an &lt;code&gt;ad_account_id&lt;/code&gt; (obtained via &lt;a href&#x3D;\&quot;/docs/api/v5/#operation/ad_accounts/list\&quot;&gt;List ad accounts&lt;/a&gt;) to use the owner of that ad_account as the \&quot;operation user_account\&quot;. In order to do this, the token user_account must have one of the following &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt; roles on the ad_account:  - For Pins on public or protected boards: Admin, Analyst. - For Pins on secret boards: Admin.  If Pin was created before &lt;code&gt;2023-03-20&lt;/code&gt; lifetime metrics will only be available for Video and Idea Pin formats. Lifetime metrics are available for all Pin formats since then.
    /// </remarks>
    /// <param name="pinIds">List of Pin IDs.</param>
    /// <param name="startDate">Metric report start date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days back from today.</param>
    /// <param name="endDate">Metric report end date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days past start_date.</param>
    /// <param name="metricTypes">Pin metric types to get data for.</param>
    /// <param name="appTypes">Apps or devices to get data for, default is all. (optional, default to &quot;ALL&quot;)</param>
    /// <param name="adAccountId">Unique identifier of an ad account. (optional, default to &quot;&quot;)</param>
    virtual void multi_pins_analytics(const std::optional<std::vector<std::string>> &pinIds, const std::optional<std::string> &startDate, const std::optional<std::string> &endDate, const std::optional<std::vector<org::openapitools::server::model::Pins_analytics_metric_types_parameter_inner>> &metricTypes, const std::optional<std::string> &appTypes, const std::optional<std::string> &adAccountId, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Get Pin analytics
    /// </summary>
    /// <remarks>
    /// Get analytics for a Pin owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.  Optional: Business Access: Specify an &lt;code&gt;ad_account_id&lt;/code&gt; (obtained via &lt;a href&#x3D;\&quot;/docs/api/v5/#operation/ad_accounts/list\&quot;&gt;List ad accounts&lt;/a&gt;) to use the owner of that ad_account as the \&quot;operation user_account\&quot;. In order to do this, the token user_account must have one of the following &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt; roles on the ad_account:  - For Pins on public or protected boards: Admin, Analyst. - For Pins on secret boards: Admin.  If Pin was created before &lt;code&gt;2023-03-20&lt;/code&gt; lifetime metrics will only be available for Video and Idea Pin formats. Lifetime metrics are available for all Pin formats since then.
    /// </remarks>
    /// <param name="pinId">Unique identifier of a Pin.</param>
    /// <param name="startDate">Metric report start date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days back from today.</param>
    /// <param name="endDate">Metric report end date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days past start_date.</param>
    /// <param name="metricTypes">Pin metric types to get data for. VIDEO_MRC_VIEW are Video views, VIDEO_V50_WATCH_TIME is Total play time. If Pin was created before &lt;code&gt;2023-03-20&lt;/code&gt;, Profile visits and Follows will only be available for Idea Pins. These metrics are available for all Pin formats since then. Keep in mind this cannot have ALL if split_field is set to any value other than &lt;code&gt;NO_SPLIT&lt;/code&gt;.</param>
    /// <param name="appTypes">Apps or devices to get data for, default is all. (optional, default to &quot;ALL&quot;)</param>
    /// <param name="splitField">How to split the data into groups. Not including this param means data won&#39;t be split. (optional, default to &quot;NO_SPLIT&quot;)</param>
    /// <param name="adAccountId">Unique identifier of an ad account. (optional, default to &quot;&quot;)</param>
    virtual void pins_analytics(const std::string &pinId, const std::optional<std::string> &startDate, const std::optional<std::string> &endDate, const std::optional<std::vector<org::openapitools::server::model::Pins_analytics_metric_types_parameter_inner>> &metricTypes, const std::optional<std::string> &appTypes, const std::optional<std::string> &splitField, const std::optional<std::string> &adAccountId, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Create Pin
    /// </summary>
    /// <remarks>
    /// Create a Pin on a board or board section owned by the \&quot;operation user_account\&quot;.  Note: If the current \&quot;operation user_account\&quot; (defined by the access token) has access to another user&#39;s Ad Accounts via Pinterest Business Access, you can modify your request to make use of the current operation_user_account&#39;s permissions to those Ad Accounts by including the ad_account_id in the path parameters for the request (e.g. .../?ad_account_id&#x3D;12345&amp;...).  - This function is intended solely for publishing new content created by the user. If you are interested in saving content created by others to your Pinterest boards, sometimes called &#39;curated content&#39;, please use our &lt;a href&#x3D;&#39;/docs/web-features/add-ons-overview/&#39;&gt;Save button&lt;/a&gt; instead. For more tips on creating fresh content for Pinterest, review our &lt;a href&#x3D;&#39;/docs/api-features/content-overview/&#39;&gt;Content App Solutions Guide&lt;/a&gt;.  &lt;strong&gt;&lt;a href&#x3D;&#39;/docs/api-features/creating-boards-and-pins/#creating-video-pins&#39;&gt;Learn more&lt;/a&gt;&lt;/strong&gt; about video Pin creation.
    /// </remarks>
    /// <param name="pinCreate">Create a new Pin.</param>
    /// <param name="adAccountId">Unique identifier of an ad account. (optional, default to &quot;&quot;)</param>
    virtual void pins_create(const org::openapitools::server::model::PinCreate &pinCreate, const std::optional<std::string> &adAccountId, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Delete Pin
    /// </summary>
    /// <remarks>
    /// Delete a Pins owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.  Optional: Business Access: Specify an &lt;code&gt;ad_account_id&lt;/code&gt; (obtained via &lt;a href&#x3D;&#39;/docs/api/v5/#operation/ad_accounts/list&#39;&gt;List ad accounts&lt;/a&gt;) to use the owner of that ad_account as the \&quot;operation user_account\&quot;. In order to do this, the token user_account must have one of the following &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt; roles on the ad_account:  - For Pins on public or protected boards: Owner, Admin, Analyst, Campaign Manager. - For Pins on secret boards: Owner, Admin.
    /// </remarks>
    /// <param name="pinId">Unique identifier of a Pin.</param>
    /// <param name="adAccountId">Unique identifier of an ad account. (optional, default to &quot;&quot;)</param>
    virtual void pins_delete(const std::string &pinId, const std::optional<std::string> &adAccountId, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Get Pin
    /// </summary>
    /// <remarks>
    /// Get a Pin owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.  Optional: Business Access: Specify an &lt;code&gt;ad_account_id&lt;/code&gt; (obtained via &lt;a href&#x3D;&#39;/docs/api/v5/#operation/ad_accounts/list&#39;&gt;List ad accounts&lt;/a&gt;) to use the owner of that ad_account as the \&quot;operation user_account\&quot;. In order to do this, the token user_account must have one of the following &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt; roles on the ad_account:  - For Pins on public or protected boards: Owner, Admin, Analyst, Campaign Manager. - For Pins on secret boards: Owner, Admin.
    /// </remarks>
    /// <param name="pinId">Unique identifier of a Pin.</param>
    /// <param name="pinMetrics">Specify whether to return 90d and lifetime Pin metrics. Total comments and total reactions are only available with lifetime Pin metrics. If Pin was created before &lt;code&gt;2023-03-20&lt;/code&gt; lifetime metrics will only be available for Video and Idea Pin formats. Lifetime metrics are available for all Pin formats since then. (optional, default to false)</param>
    /// <param name="adAccountId">Unique identifier of an ad account. (optional, default to &quot;&quot;)</param>
    virtual void pins_get(const std::string &pinId, const std::optional<bool> &pinMetrics, const std::optional<std::string> &adAccountId, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// List Pins
    /// </summary>
    /// <remarks>
    /// Get a list of the Pins owned by the \&quot;operation user_account\&quot;.   - By default, the \&quot;operation user_account\&quot; is the token user_account.   - All Pins owned by the \&quot;operation user_account\&quot; are included, regardless of who owns the board they are on. Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;.  Disclaimer: there are known performance issues when filtering by field &lt;code&gt;creative_type&lt;/code&gt; and including protected pins. If your request is timing out in this scenario we encourage you to use &lt;a href&#x3D;&#39;/docs/api/v5/#operation/boards/list_pins&#39;&gt;GET List Pins on Board&lt;/a&gt;.
    /// </remarks>
    /// <param name="bookmark">Cursor used to fetch the next page of items (optional, default to &quot;&quot;)</param>
    /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
    /// <param name="pinFilter">Pin filter. (optional, default to &quot;&quot;)</param>
    /// <param name="includeProtectedPins">Specify if return pins from protected boards (optional, default to false)</param>
    /// <param name="pinType">The type of pins to return, currently only enabled for private pins (optional, default to &quot;&quot;)</param>
    /// <param name="creativeTypes">Pin creative types filter. &lt;/p&gt;&lt;strong&gt;Note:&lt;/strong&gt; SHOP_THE_PIN has been deprecated. Please use COLLECTION instead. (optional, default to std::vector&lt;std::shared_ptr&lt;std::string&gt;&gt;())</param>
    /// <param name="adAccountId">Unique identifier of an ad account. (optional, default to &quot;&quot;)</param>
    /// <param name="pinMetrics">Specify whether to return 90d and lifetime Pin metrics. Total comments and total reactions are only available with lifetime Pin metrics. If Pin was created before &lt;code&gt;2023-03-20&lt;/code&gt; lifetime metrics will only be available for Video and Idea Pin formats. Lifetime metrics are available for all Pin formats since then. (optional, default to false)</param>
    virtual void pins_list(const std::optional<std::string> &bookmark, const std::optional<int32_t> &pageSize, const std::optional<std::string> &pinFilter, const std::optional<bool> &includeProtectedPins, const std::optional<std::string> &pinType, const std::optional<std::vector<std::string>> &creativeTypes, const std::optional<std::string> &adAccountId, const std::optional<bool> &pinMetrics, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Save Pin
    /// </summary>
    /// <remarks>
    /// Save a Pin on a board or board section owned by the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account. Optional: Business Access: Specify an &lt;code&gt;ad_account_id&lt;/code&gt; (obtained via &lt;a href&#x3D;&#39;/docs/api/v5/#operation/ad_accounts/list&#39;&gt;List ad accounts&lt;/a&gt;) to use the owner of that ad_account as the \&quot;operation user_account\&quot;. In order to do this, the token user_account must have one of the following &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt; roles on the ad_account:  - For Pins on public or protected boards: Owner, Admin, Analyst, Campaign Manager. - For Pins on secret boards: Owner, Admin.  - Any Pin type can be saved: image Pin, video Pin, Idea Pin, product Pin, etc. - Any public Pin can be saved given a pin ID.
    /// </remarks>
    /// <param name="pinId">Unique identifier of a Pin.</param>
    /// <param name="pinsSaveRequest">Request object used to save an existing pin</param>
    /// <param name="adAccountId">Unique identifier of an ad account. (optional, default to &quot;&quot;)</param>
    virtual void pins_save(const std::string &pinId, const org::openapitools::server::model::Pins_save_request &pinsSaveRequest, const std::optional<std::string> &adAccountId, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Update Pin
    /// </summary>
    /// <remarks>
    /// Update a pin owned by the \&quot;operating user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.  Optional: Business Access: Specify an &lt;code&gt;ad_account_id&lt;/code&gt; (obtained via &lt;a href&#x3D;&#39;/docs/api/v5/#operation/ad_accounts/list&#39;&gt;List ad accounts&lt;/a&gt;) to use the owner of that ad_account as the \&quot;operation user_account\&quot;. In order to do this, the token user_account must have one of the following &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt; roles on the ad_account:  - For Pins on public or protected boards: Owner, Admin, Analyst, Campaign Manager. - For Pins on secret boards: Owner, Admin.  &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/getting-started/beta-and-advanced-access/&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;
    /// </remarks>
    /// <param name="pinId">Unique identifier of a Pin.</param>
    /// <param name="pinUpdate"></param>
    /// <param name="adAccountId">Unique identifier of an ad account. (optional, default to &quot;&quot;)</param>
    virtual void pins_update(const std::string &pinId, const org::openapitools::server::model::PinUpdate &pinUpdate, const std::optional<std::string> &adAccountId, Pistache::Http::ResponseWriter &response) = 0;

};

} // namespace org::openapitools::server::api

#endif /* PinsApi_H_ */

