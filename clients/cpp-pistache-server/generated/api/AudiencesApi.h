/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * AudiencesApi.h
 *
 * 
 */

#ifndef AudiencesApi_H_
#define AudiencesApi_H_


#include "ApiBase.h"

#include <pistache/http.h>
#include <pistache/router.h>
#include <pistache/http_headers.h>

#include <optional>
#include <utility>

#include "Audience.h"
#include "AudienceCreateCustomRequest.h"
#include "AudienceCreateRequest.h"
#include "AudienceUpdateRequest.h"
#include "Audiences_list_200_response.h"
#include "Error.h"
#include <string>

namespace org::openapitools::server::api
{

class  AudiencesApi : public ApiBase {
public:
    explicit AudiencesApi(const std::shared_ptr<Pistache::Rest::Router>& rtr);
    ~AudiencesApi() override = default;
    void init() override;

    static const std::string base;

private:
    void setupRoutes();

    void audiences_create_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void audiences_create_custom_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void audiences_get_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void audiences_list_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void audiences_update_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void audiences_api_default_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);

    /// <summary>
    /// Helper function to handle unexpected Exceptions during Parameter parsing and validation.
    /// May be overridden to return custom error formats. This is called inside a catch block.
    /// Important: When overriding, do not call `throw ex;`, but instead use `throw;`.
    /// </summary>
    virtual void handleParsingException(const std::exception& ex, Pistache::Http::ResponseWriter &response) const noexcept;

    /// <summary>
    /// Helper function to handle unexpected Exceptions during Parameter parsing and validation.
    /// May be overridden to return custom error formats. This is called inside a catch block.
    /// Important: When overriding, do not call `throw ex;`, but instead use `throw;`.
    /// </summary>
    virtual std::pair<Pistache::Http::Code, std::string> handleParsingException(const std::exception& ex) const noexcept;

    /// <summary>
    /// Helper function to handle unexpected Exceptions during processing of the request in handler functions.
    /// May be overridden to return custom error formats. This is called inside a catch block.
    /// Important: When overriding, do not call `throw ex;`, but instead use `throw;`.
    /// </summary>
    virtual void handleOperationException(const std::exception& ex, Pistache::Http::ResponseWriter &response) const noexcept;

    /// <summary>
    /// Helper function to handle unexpected Exceptions during processing of the request in handler functions.
    /// May be overridden to return custom error formats. This is called inside a catch block.
    /// Important: When overriding, do not call `throw ex;`, but instead use `throw;`.
    /// </summary>
    virtual std::pair<Pistache::Http::Code, std::string> handleOperationException(const std::exception& ex) const noexcept;

    /// <summary>
    /// Create audience
    /// </summary>
    /// <remarks>
    /// Create an audience you can use in targeting for specific ad groups. Targeting combines customer information with the ways users interact with Pinterest to help you reach specific groups of users; you can include or exclude specific audience_ids when you create an ad group. &lt;p/&gt; For more, see &lt;a class&#x3D;\&quot;reference external\&quot; href&#x3D;\&quot;https://help.pinterest.com/en/business/article/audience-targeting\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Audience targeting&lt;/a&gt;.
    /// </remarks>
    /// <param name="adAccountId">Unique identifier of an ad account.</param>
    /// <param name="audienceCreateRequest">List of ads to create, size limit [1, 30]</param>
    virtual void audiences_create(const std::string &adAccountId, const org::openapitools::server::model::AudienceCreateRequest &audienceCreateRequest, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Create custom audience
    /// </summary>
    /// <remarks>
    /// Create a custom audience and find the audiences you want your ads to reach.
    /// </remarks>
    /// <param name="adAccountId">Unique identifier of an ad account.</param>
    /// <param name="audienceCreateCustomRequest">Custom audience to create.</param>
    virtual void audiences_create_custom(const std::string &adAccountId, const org::openapitools::server::model::AudienceCreateCustomRequest &audienceCreateCustomRequest, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Get audience
    /// </summary>
    /// <remarks>
    /// Get a specific audience given the audience ID.
    /// </remarks>
    /// <param name="adAccountId">Unique identifier of an ad account.</param>
    /// <param name="audienceId">Unique identifier of an audience</param>
    virtual void audiences_get(const std::string &adAccountId, const std::string &audienceId, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// List audiences
    /// </summary>
    /// <remarks>
    /// Get list of audiences for the ad account.
    /// </remarks>
    /// <param name="adAccountId">Unique identifier of an ad account.</param>
    /// <param name="bookmark">Cursor used to fetch the next page of items (optional, default to &quot;&quot;)</param>
    /// <param name="order">The order in which to sort the items returned: “ASCENDING” or “DESCENDING” by ID. For received audiences, it is sorted by sharing event time. Note that higher-value IDs are associated with more-recently added items. (optional, default to &quot;&quot;)</param>
    /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
    /// <param name="ownershipType">Filter audiences by ownership type. (optional, default to &quot;OWNED&quot;)</param>
    virtual void audiences_list(const std::string &adAccountId, const std::optional<std::string> &bookmark, const std::optional<std::string> &order, const std::optional<int32_t> &pageSize, const std::optional<std::string> &ownershipType, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Update audience
    /// </summary>
    /// <remarks>
    /// Update (edit or remove) an existing targeting audience.
    /// </remarks>
    /// <param name="adAccountId">Unique identifier of an ad account.</param>
    /// <param name="audienceId">Unique identifier of an audience</param>
    /// <param name="audienceUpdateRequest">The audience to be updated. (optional)</param>
    virtual void audiences_update(const std::string &adAccountId, const std::string &audienceId, const org::openapitools::server::model::AudienceUpdateRequest &audienceUpdateRequest, Pistache::Http::ResponseWriter &response) = 0;

};

} // namespace org::openapitools::server::api

#endif /* AudiencesApi_H_ */

