/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

/*
* CatalogsApiImpl.h
*
* 
*/

#ifndef CATALOGS_API_IMPL_H_
#define CATALOGS_API_IMPL_H_


#include <pistache/endpoint.h>
#include <pistache/http.h>
#include <pistache/router.h>
#include <memory>
#include <optional>

#include <CatalogsApi.h>


#include "Catalog.h"
#include "CatalogsCreateReportResponse.h"
#include "CatalogsCreateRequest.h"
#include "CatalogsFeed.h"
#include "CatalogsFeedIngestion.h"
#include "CatalogsItemValidationIssue.h"
#include "CatalogsItems.h"
#include "CatalogsItemsBatch.h"
#include "CatalogsItemsFilters.h"
#include "CatalogsItemsRequest.h"
#include "CatalogsListProductsByFilterRequest.h"
#include "CatalogsProductGroupProductCountsVertical.h"
#include "CatalogsReport.h"
#include "CatalogsReportParameters.h"
#include "CatalogsVerticalProductGroup.h"
#include "Catalogs_list_200_response.h"
#include "Catalogs_product_group_pins_list_200_response.h"
#include "Catalogs_product_groups_list_200_response.h"
#include "Catalogs_product_groups_update_request.h"
#include "Error.h"
#include "Feed_processing_results_list_200_response.h"
#include "Feeds_create_request.h"
#include "Feeds_list_200_response.h"
#include "Feeds_update_request.h"
#include "Items_batch_post_request.h"
#include "Items_issues_list_200_response.h"
#include "Multiple_product_groups_inner.h"
#include "Reports_stats_200_response.h"
#include <string>
#include <vector>

namespace org::openapitools::server::api
{

using namespace org::openapitools::server::model;

class  CatalogsApiImpl : public org::openapitools::server::api::CatalogsApi {
public:
    explicit CatalogsApiImpl(const std::shared_ptr<Pistache::Rest::Router>& rtr);
    ~CatalogsApiImpl() override = default;

    void catalogs_product_group_pins_list(const std::string &productGroupId, const std::optional<std::string> &bookmark, const std::optional<int32_t> &pageSize, const std::optional<std::string> &adAccountId, const std::optional<bool> &pinMetrics, Pistache::Http::ResponseWriter &response);
    void catalogs_product_groups_create(const Multiple_product_groups_inner &multipleProductGroupsInner, const std::optional<std::string> &adAccountId, Pistache::Http::ResponseWriter &response);
    void catalogs_product_groups_create_many(const std::vector<org::openapitools::server::model::Multiple_product_groups_inner> &multipleProductGroupsInner, const std::optional<std::string> &adAccountId, Pistache::Http::ResponseWriter &response);
    void catalogs_product_groups_delete(const std::string &productGroupId, const std::optional<std::string> &adAccountId, Pistache::Http::ResponseWriter &response);
    void catalogs_product_groups_delete_many(const std::optional<std::vector<int32_t>> &id, const std::optional<std::string> &adAccountId, Pistache::Http::ResponseWriter &response);
    void catalogs_product_groups_get(const std::string &productGroupId, const std::optional<std::string> &adAccountId, Pistache::Http::ResponseWriter &response);
    void catalogs_product_groups_list(const std::optional<std::vector<int32_t>> &id, const std::optional<std::string> &feedId, const std::optional<std::string> &catalogId, const std::optional<std::string> &bookmark, const std::optional<int32_t> &pageSize, const std::optional<std::string> &adAccountId, Pistache::Http::ResponseWriter &response);
    void catalogs_product_groups_product_counts_get(const std::string &productGroupId, const std::optional<std::string> &adAccountId, Pistache::Http::ResponseWriter &response);
    void catalogs_product_groups_update(const std::string &productGroupId, const Catalogs_product_groups_update_request &catalogsProductGroupsUpdateRequest, const std::optional<std::string> &adAccountId, Pistache::Http::ResponseWriter &response);
    void catalogs_create(const CatalogsCreateRequest &catalogsCreateRequest, const std::optional<std::string> &adAccountId, Pistache::Http::ResponseWriter &response);
    void catalogs_list(const std::optional<std::string> &bookmark, const std::optional<int32_t> &pageSize, const std::optional<std::string> &adAccountId, Pistache::Http::ResponseWriter &response);
    void feed_processing_results_list(const std::string &feedId, const std::optional<std::string> &bookmark, const std::optional<int32_t> &pageSize, const std::optional<std::string> &adAccountId, Pistache::Http::ResponseWriter &response);
    void feeds_create(const Feeds_create_request &feedsCreateRequest, const std::optional<std::string> &adAccountId, Pistache::Http::ResponseWriter &response);
    void feeds_delete(const std::string &feedId, const std::optional<std::string> &adAccountId, Pistache::Http::ResponseWriter &response);
    void feeds_get(const std::string &feedId, const std::optional<std::string> &adAccountId, Pistache::Http::ResponseWriter &response);
    void feeds_ingest(const std::string &feedId, const std::optional<std::string> &adAccountId, Pistache::Http::ResponseWriter &response);
    void feeds_list(const std::optional<std::string> &bookmark, const std::optional<int32_t> &pageSize, const std::optional<std::string> &catalogId, const std::optional<std::string> &adAccountId, Pistache::Http::ResponseWriter &response);
    void feeds_update(const std::string &feedId, const Feeds_update_request &feedsUpdateRequest, const std::optional<std::string> &adAccountId, Pistache::Http::ResponseWriter &response);
    void items_batch_get(const std::string &batchId, const std::optional<std::string> &adAccountId, Pistache::Http::ResponseWriter &response);
    void items_batch_post(const Items_batch_post_request &itemsBatchPostRequest, const std::optional<std::string> &adAccountId, Pistache::Http::ResponseWriter &response);
    void items_issues_list(const std::string &processingResultId, const std::optional<std::string> &bookmark, const std::optional<int32_t> &pageSize, const std::optional<std::vector<int32_t>> &itemNumbers, const std::optional<org::openapitools::server::model::CatalogsItemValidationIssue> &itemValidationIssue, const std::optional<std::string> &adAccountId, Pistache::Http::ResponseWriter &response);
    void items_get(const std::optional<std::string> &country, const std::optional<std::string> &language, const std::optional<std::string> &adAccountId, const std::optional<std::vector<std::string>> &itemIds, const std::optional<org::openapitools::server::model::CatalogsItemsFilters> &filters, Pistache::Http::ResponseWriter &response);
    void items_post(const CatalogsItemsRequest &catalogsItemsRequest, const std::optional<std::string> &adAccountId, Pistache::Http::ResponseWriter &response);
    void products_by_product_group_filter_list(const CatalogsListProductsByFilterRequest &catalogsListProductsByFilterRequest, const std::optional<std::string> &bookmark, const std::optional<int32_t> &pageSize, const std::optional<std::string> &adAccountId, const std::optional<bool> &pinMetrics, Pistache::Http::ResponseWriter &response);
    void reports_create(const CatalogsReportParameters &catalogsReportParameters, const std::optional<std::string> &adAccountId, Pistache::Http::ResponseWriter &response);
    void reports_get(const std::optional<std::string> &token, const std::optional<std::string> &adAccountId, Pistache::Http::ResponseWriter &response);
    void reports_stats(const std::optional<org::openapitools::server::model::CatalogsReportParameters> &parameters, const std::optional<std::string> &adAccountId, const std::optional<int32_t> &pageSize, const std::optional<std::string> &bookmark, Pistache::Http::ResponseWriter &response);

};

} // namespace org::openapitools::server::api



#endif
