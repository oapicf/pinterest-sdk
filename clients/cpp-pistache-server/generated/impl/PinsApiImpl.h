/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

/*
* PinsApiImpl.h
*
* 
*/

#ifndef PINS_API_IMPL_H_
#define PINS_API_IMPL_H_


#include <pistache/endpoint.h>
#include <pistache/http.h>
#include <pistache/router.h>
#include <memory>
#include <optional>

#include <PinsApi.h>


#include "Error.h"
#include "Pin.h"
#include "PinAnalyticsMetricsResponse.h"
#include "PinCreate.h"
#include "PinUpdate.h"
#include "Pins_analytics_metric_types_parameter_inner.h"
#include "Pins_list_200_response.h"
#include "Pins_save_request.h"
#include <map>
#include <string>
#include <vector>

namespace org::openapitools::server::api
{

using namespace org::openapitools::server::model;

class  PinsApiImpl : public org::openapitools::server::api::PinsApi {
public:
    explicit PinsApiImpl(const std::shared_ptr<Pistache::Rest::Router>& rtr);
    ~PinsApiImpl() override = default;

    void multi_pins_analytics(const std::optional<std::vector<std::string>> &pinIds, const std::optional<std::string> &startDate, const std::optional<std::string> &endDate, const std::optional<std::vector<org::openapitools::server::model::Pins_analytics_metric_types_parameter_inner>> &metricTypes, const std::optional<std::string> &appTypes, const std::optional<std::string> &adAccountId, Pistache::Http::ResponseWriter &response);
    void pins_analytics(const std::string &pinId, const std::optional<std::string> &startDate, const std::optional<std::string> &endDate, const std::optional<std::vector<org::openapitools::server::model::Pins_analytics_metric_types_parameter_inner>> &metricTypes, const std::optional<std::string> &appTypes, const std::optional<std::string> &splitField, const std::optional<std::string> &adAccountId, Pistache::Http::ResponseWriter &response);
    void pins_create(const PinCreate &pinCreate, const std::optional<std::string> &adAccountId, Pistache::Http::ResponseWriter &response);
    void pins_delete(const std::string &pinId, const std::optional<std::string> &adAccountId, Pistache::Http::ResponseWriter &response);
    void pins_get(const std::string &pinId, const std::optional<bool> &pinMetrics, const std::optional<std::string> &adAccountId, Pistache::Http::ResponseWriter &response);
    void pins_list(const std::optional<std::string> &bookmark, const std::optional<int32_t> &pageSize, const std::optional<std::string> &pinFilter, const std::optional<bool> &includeProtectedPins, const std::optional<std::string> &pinType, const std::optional<std::vector<std::string>> &creativeTypes, const std::optional<std::string> &adAccountId, const std::optional<bool> &pinMetrics, Pistache::Http::ResponseWriter &response);
    void pins_save(const std::string &pinId, const Pins_save_request &pinsSaveRequest, const std::optional<std::string> &adAccountId, Pistache::Http::ResponseWriter &response);
    void pins_update(const std::string &pinId, const PinUpdate &pinUpdate, const std::optional<std::string> &adAccountId, Pistache::Http::ResponseWriter &response);

};

} // namespace org::openapitools::server::api



#endif
