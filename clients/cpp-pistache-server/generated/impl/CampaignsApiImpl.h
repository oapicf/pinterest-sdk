/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

/*
* CampaignsApiImpl.h
*
* 
*/

#ifndef CAMPAIGNS_API_IMPL_H_
#define CAMPAIGNS_API_IMPL_H_


#include <pistache/endpoint.h>
#include <pistache/http.h>
#include <pistache/router.h>
#include <memory>
#include <optional>

#include <CampaignsApi.h>


#include "AdsAnalyticsCampaignTargetingType.h"
#include "CampaignCreateRequest.h"
#include "CampaignCreateResponse.h"
#include "CampaignResponse.h"
#include "CampaignUpdateRequest.h"
#include "CampaignUpdateResponse.h"
#include "CampaignsAnalyticsResponse_inner.h"
#include "Campaigns_list_200_response.h"
#include "ConversionReportAttributionType.h"
#include "Error.h"
#include "Granularity.h"
#include "MetricsResponse.h"
#include <string>
#include <vector>

namespace org::openapitools::server::api
{

using namespace org::openapitools::server::model;

class  CampaignsApiImpl : public org::openapitools::server::api::CampaignsApi {
public:
    explicit CampaignsApiImpl(const std::shared_ptr<Pistache::Rest::Router>& rtr);
    ~CampaignsApiImpl() override = default;

    void campaign_targeting_analytics_get(const std::string &adAccountId, const std::optional<std::vector<std::string>> &campaignIds, const std::optional<std::string> &startDate, const std::optional<std::string> &endDate, const std::optional<std::vector<org::openapitools::server::model::AdsAnalyticsCampaignTargetingType>> &targetingTypes, const std::optional<std::vector<std::string>> &columns, const std::optional<org::openapitools::server::model::Granularity> &granularity, const std::optional<int32_t> &clickWindowDays, const std::optional<int32_t> &engagementWindowDays, const std::optional<int32_t> &viewWindowDays, const std::optional<std::string> &conversionReportTime, const std::optional<org::openapitools::server::model::ConversionReportAttributionType> &attributionTypes, Pistache::Http::ResponseWriter &response);
    void campaigns_analytics(const std::string &adAccountId, const std::optional<std::string> &startDate, const std::optional<std::string> &endDate, const std::optional<std::vector<std::string>> &campaignIds, const std::optional<std::vector<std::string>> &columns, const std::optional<org::openapitools::server::model::Granularity> &granularity, const std::optional<int32_t> &clickWindowDays, const std::optional<int32_t> &engagementWindowDays, const std::optional<int32_t> &viewWindowDays, const std::optional<std::string> &conversionReportTime, Pistache::Http::ResponseWriter &response);
    void campaigns_create(const std::string &adAccountId, const std::vector<org::openapitools::server::model::CampaignCreateRequest> &campaignCreateRequest, Pistache::Http::ResponseWriter &response);
    void campaigns_get(const std::string &adAccountId, const std::string &campaignId, Pistache::Http::ResponseWriter &response);
    void campaigns_list(const std::string &adAccountId, const std::optional<std::vector<std::string>> &campaignIds, const std::optional<std::vector<std::string>> &entityStatuses, const std::optional<int32_t> &pageSize, const std::optional<std::string> &order, const std::optional<std::string> &bookmark, Pistache::Http::ResponseWriter &response);
    void campaigns_update(const std::string &adAccountId, const std::vector<org::openapitools::server::model::CampaignUpdateRequest> &campaignUpdateRequest, Pistache::Http::ResponseWriter &response);

};

} // namespace org::openapitools::server::api



#endif
