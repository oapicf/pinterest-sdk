/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

#include "UserAccountApiImpl.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

UserAccountApiImpl::UserAccountApiImpl(const std::shared_ptr<Pistache::Rest::Router>& rtr)
    : UserAccountApi(rtr)
{
}

void UserAccountApiImpl::boards_user_follows_list(const std::optional<std::string> &bookmark, const std::optional<int32_t> &pageSize, const std::optional<bool> &explicitFollowing, const std::optional<std::string> &adAccountId, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void UserAccountApiImpl::follow_user_update(const std::string &username, const FollowUserRequest &followUserRequest, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void UserAccountApiImpl::followers_list(const std::optional<std::string> &bookmark, const std::optional<int32_t> &pageSize, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void UserAccountApiImpl::linked_business_accounts_get(Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void UserAccountApiImpl::unverify_website_delete(const std::optional<std::string> &website, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void UserAccountApiImpl::user_account_analytics(const std::optional<std::string> &startDate, const std::optional<std::string> &endDate, const std::optional<std::string> &fromClaimedContent, const std::optional<std::string> &pinFormat, const std::optional<std::string> &appTypes, const std::optional<std::string> &contentType, const std::optional<std::string> &source, const std::optional<std::vector<std::string>> &metricTypes, const std::optional<std::string> &splitField, const std::optional<std::string> &adAccountId, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void UserAccountApiImpl::user_account_analytics_top_pins(const std::optional<std::string> &startDate, const std::optional<std::string> &endDate, const std::optional<std::string> &sortBy, const std::optional<std::string> &fromClaimedContent, const std::optional<std::string> &pinFormat, const std::optional<std::string> &appTypes, const std::optional<std::string> &contentType, const std::optional<std::string> &source, const std::optional<std::vector<std::string>> &metricTypes, const std::optional<int32_t> &numOfPins, const std::optional<int32_t> &createdInLastNDays, const std::optional<std::string> &adAccountId, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void UserAccountApiImpl::user_account_analytics_top_video_pins(const std::optional<std::string> &startDate, const std::optional<std::string> &endDate, const std::optional<std::string> &sortBy, const std::optional<std::string> &fromClaimedContent, const std::optional<std::string> &pinFormat, const std::optional<std::string> &appTypes, const std::optional<std::string> &contentType, const std::optional<std::string> &source, const std::optional<std::vector<std::string>> &metricTypes, const std::optional<int32_t> &numOfPins, const std::optional<int32_t> &createdInLastNDays, const std::optional<std::string> &adAccountId, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void UserAccountApiImpl::user_account_followed_interests(const std::string &username, const std::optional<std::string> &bookmark, const std::optional<int32_t> &pageSize, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void UserAccountApiImpl::user_account_get(const std::optional<std::string> &adAccountId, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void UserAccountApiImpl::user_following_get(const std::optional<std::string> &bookmark, const std::optional<int32_t> &pageSize, const std::optional<UserFollowingFeedType> &feedType, const std::optional<bool> &explicitFollowing, const std::optional<std::string> &adAccountId, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void UserAccountApiImpl::user_websites_get(const std::optional<std::string> &bookmark, const std::optional<int32_t> &pageSize, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void UserAccountApiImpl::verify_website_update(const UserWebsiteVerifyRequest &userWebsiteVerifyRequest, const std::optional<std::string> &adAccountId, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void UserAccountApiImpl::website_verification_get(const std::optional<std::string> &adAccountId, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}

}
}
}
}

