/*
  Pinterest REST API

  Pinterest's REST API

  The version of the OpenAPI document: 5.14.0

  Contact: blah+oapicf@cliffano.com

  Generated by OpenAPI Generator: https://openapi-generator.tech
*/

syntax = "proto3";

package openapitools.services.useraccountservice;

import "google/protobuf/empty.proto";
import public "models/account.proto";
import public "models/analytics_metrics_response.proto";
import public "models/boards_user_follows_list200_response.proto";
import public "models/error.proto";
import public "models/follow_user_request.proto";
import public "models/followers_list200_response.proto";
import public "models/linked_business.proto";
import public "models/top_pins_analytics_response.proto";
import public "models/top_video_pins_analytics_response.proto";
import public "models/user_account_followed_interests200_response.proto";
import public "models/user_following_feed_type.proto";
import public "models/user_following_get200_response.proto";
import public "models/user_summary.proto";
import public "models/user_website_summary.proto";
import public "models/user_website_verification_code.proto";
import public "models/user_website_verify_request.proto";
import public "models/user_websites_get200_response.proto";

service UserAccountService {
  rpc BoardsUserFollowsList (BoardsUserFollowsListRequest) returns (BoardsUserFollowsList200Response);

  rpc FollowUserUpdate (FollowUserUpdateRequest) returns (UserSummary);

  rpc FollowersList (FollowersListRequest) returns (FollowersList200Response);

  rpc LinkedBusinessAccountsGet (google.protobuf.Empty) returns (LinkedBusinessAccountsGetResponse);

  rpc UnverifyWebsiteDelete (UnverifyWebsiteDeleteRequest) returns (google.protobuf.Empty);

  rpc UserAccountAnalytics (UserAccountAnalyticsRequest) returns (UserAccountAnalyticsResponse);

  rpc UserAccountAnalyticsTopPins (UserAccountAnalyticsTopPinsRequest) returns (TopPinsAnalyticsResponse);

  rpc UserAccountAnalyticsTopVideoPins (UserAccountAnalyticsTopVideoPinsRequest) returns (TopVideoPinsAnalyticsResponse);

  rpc UserAccountFollowedInterests (UserAccountFollowedInterestsRequest) returns (UserAccountFollowedInterests200Response);

  rpc UserAccountGet (UserAccountGetRequest) returns (Account);

  rpc UserFollowingGet (UserFollowingGetRequest) returns (UserFollowingGet200Response);

  rpc UserWebsitesGet (UserWebsitesGetRequest) returns (UserWebsitesGet200Response);

  rpc VerifyWebsiteUpdate (VerifyWebsiteUpdateRequest) returns (UserWebsiteSummary);

  rpc WebsiteVerificationGet (WebsiteVerificationGetRequest) returns (UserWebsiteVerificationCode);

}

message BoardsUserFollowsListRequest {
  // Cursor used to fetch the next page of items
  string bookmark = 1;
  // Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/reference/pagination/'>Pagination</a> for more information.
  int32 pageSize = 2;
  // Whether or not to include implicit user follows, which means followees with board follows. When explicit_following is True, it means we only want explicit user follows.
  bool explicitFollowing = 3;
  // Unique identifier of an ad account.
  string adAccountId = 4;

}

message FollowUserUpdateRequest {
  // A valid username
  string username = 1;
  // Follow a user.
  FollowUserRequest followUserRequest = 2;

}

message FollowersListRequest {
  // Cursor used to fetch the next page of items
  string bookmark = 1;
  // Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/reference/pagination/'>Pagination</a> for more information.
  int32 pageSize = 2;

}

message LinkedBusinessAccountsGetResponse {
  repeated LinkedBusiness data = 1;
}

message UnverifyWebsiteDeleteRequest {
  // Website with path or domain only
  string website = 1;

}

message UserAccountAnalyticsRequest {
  // Metric report start date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days back from today.
  string startDate = 1;
  // Metric report end date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days past start_date.
  string endDate = 2;
  // Filter on Pins that match your claimed domain.
  string fromClaimedContent = 3;
  // Pin formats to get data for, default is all.
  string pinFormat = 4;
  // Apps or devices to get data for, default is all.
  string appTypes = 5;
  // Filter to paid or organic data. Default is all.
  string contentType = 6;
  // Filter to activity from Pins created and saved by your, or activity created and saved by others from your claimed accounts
  string source = 7;
  // Metric types to get data for, default is all. 
  repeated string metricTypes = 8;
  // How to split the data into groups. Not including this param means data won't be split.
  string splitField = 9;
  // Unique identifier of an ad account.
  string adAccountId = 10;

}

message UserAccountAnalyticsResponse {
  AnalyticsMetricsResponse data = 1;
}

message UserAccountAnalyticsTopPinsRequest {
  // Metric report start date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days back from today.
  string startDate = 1;
  // Metric report end date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days past start_date.
  string endDate = 2;
  // Specify sorting order for metrics
  string sortBy = 3;
  // Filter on Pins that match your claimed domain.
  string fromClaimedContent = 4;
  // Pin formats to get data for, default is all.
  string pinFormat = 5;
  // Apps or devices to get data for, default is all.
  string appTypes = 6;
  // Filter to paid or organic data. Default is all.
  string contentType = 7;
  // Filter to activity from Pins created and saved by your, or activity created and saved by others from your claimed accounts
  string source = 8;
  // Metric types to get data for, default is all. 
  repeated string metricTypes = 9;
  // Number of pins to include, default is 10. Max is 50.
  int32 numOfPins = 10;
  // Get metrics for pins created in the last \"n\" days.
  int32 createdInLastNDays = 11;
  // Unique identifier of an ad account.
  string adAccountId = 12;

}

message UserAccountAnalyticsTopVideoPinsRequest {
  // Metric report start date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days back from today.
  string startDate = 1;
  // Metric report end date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days past start_date.
  string endDate = 2;
  // Specify sorting order for video metrics
  string sortBy = 3;
  // Filter on Pins that match your claimed domain.
  string fromClaimedContent = 4;
  // Pin formats to get data for, default is all.
  string pinFormat = 5;
  // Apps or devices to get data for, default is all.
  string appTypes = 6;
  // Filter to paid or organic data. Default is all.
  string contentType = 7;
  // Filter to activity from Pins created and saved by your, or activity created and saved by others from your claimed accounts
  string source = 8;
  // Metric types to get video data for, default is all. 
  repeated string metricTypes = 9;
  // Number of pins to include, default is 10. Max is 50.
  int32 numOfPins = 10;
  // Get metrics for pins created in the last \"n\" days.
  int32 createdInLastNDays = 11;
  // Unique identifier of an ad account.
  string adAccountId = 12;

}

message UserAccountFollowedInterestsRequest {
  // A valid username
  string username = 1;
  // Cursor used to fetch the next page of items
  string bookmark = 2;
  // Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/reference/pagination/'>Pagination</a> for more information.
  int32 pageSize = 3;

}

message UserAccountGetRequest {
  // Unique identifier of an ad account.
  string adAccountId = 1;

}

message UserFollowingGetRequest {
  // Cursor used to fetch the next page of items
  string bookmark = 1;
  // Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/reference/pagination/'>Pagination</a> for more information.
  int32 pageSize = 2;
  // Thrift param specifying what type of followees will be kept. Default to include all followees.
  UserFollowingFeedType feedType = 3;
  // Whether or not to include implicit user follows, which means followees with board follows. When explicit_following is True, it means we only want explicit user follows.
  bool explicitFollowing = 4;
  // Unique identifier of an ad account.
  string adAccountId = 5;

}

message UserWebsitesGetRequest {
  // Cursor used to fetch the next page of items
  string bookmark = 1;
  // Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/reference/pagination/'>Pagination</a> for more information.
  int32 pageSize = 2;

}

message VerifyWebsiteUpdateRequest {
  // Verify a website.
  UserWebsiteVerifyRequest userWebsiteVerifyRequest = 1;
  // Unique identifier of an ad account.
  string adAccountId = 2;

}

message WebsiteVerificationGetRequest {
  // Unique identifier of an ad account.
  string adAccountId = 1;

}

