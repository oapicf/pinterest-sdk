/*
  Pinterest REST API

  Pinterest's REST API

  The version of the OpenAPI document: 5.14.0

  Contact: blah+oapicf@cliffano.com

  Generated by OpenAPI Generator: https://openapi-generator.tech
*/

syntax = "proto3";

package openapitools.services.catalogsservice;

import "google/protobuf/empty.proto";
import public "models/catalog.proto";
import public "models/catalogs_create_report_response.proto";
import public "models/catalogs_create_request.proto";
import public "models/catalogs_feed.proto";
import public "models/catalogs_feed_ingestion.proto";
import public "models/catalogs_item_validation_issue.proto";
import public "models/catalogs_items.proto";
import public "models/catalogs_items_batch.proto";
import public "models/catalogs_items_filters.proto";
import public "models/catalogs_items_request.proto";
import public "models/catalogs_list200_response.proto";
import public "models/catalogs_list_products_by_filter_request.proto";
import public "models/catalogs_product_group_pins_list200_response.proto";
import public "models/catalogs_product_group_product_counts_vertical.proto";
import public "models/catalogs_product_groups_list200_response.proto";
import public "models/catalogs_product_groups_update_request.proto";
import public "models/catalogs_report.proto";
import public "models/catalogs_report_parameters.proto";
import public "models/catalogs_vertical_product_group.proto";
import public "models/error.proto";
import public "models/feed_processing_results_list200_response.proto";
import public "models/feeds_create_request.proto";
import public "models/feeds_list200_response.proto";
import public "models/feeds_update_request.proto";
import public "models/items_batch_post_request.proto";
import public "models/items_issues_list200_response.proto";
import public "models/multiple_product_groups_inner.proto";
import public "models/reports_stats200_response.proto";

service CatalogsService {
  rpc CatalogsCreate (CatalogsCreateRequest) returns (Catalog);

  rpc CatalogsList (CatalogsListRequest) returns (CatalogsList200Response);

  rpc CatalogsProductGroupPinsList (CatalogsProductGroupPinsListRequest) returns (CatalogsProductGroupPinsList200Response);

  rpc CatalogsProductGroupsCreate (CatalogsProductGroupsCreateRequest) returns (CatalogsVerticalProductGroup);

  rpc CatalogsProductGroupsCreateMany (CatalogsProductGroupsCreateManyRequest) returns (CatalogsProductGroupsCreateManyResponse);

  rpc CatalogsProductGroupsDelete (CatalogsProductGroupsDeleteRequest) returns (google.protobuf.Empty);

  rpc CatalogsProductGroupsDeleteMany (CatalogsProductGroupsDeleteManyRequest) returns (google.protobuf.Empty);

  rpc CatalogsProductGroupsGet (CatalogsProductGroupsGetRequest) returns (CatalogsVerticalProductGroup);

  rpc CatalogsProductGroupsList (CatalogsProductGroupsListRequest) returns (CatalogsProductGroupsList200Response);

  rpc CatalogsProductGroupsProductCountsGet (CatalogsProductGroupsProductCountsGetRequest) returns (CatalogsProductGroupProductCountsVertical);

  rpc CatalogsProductGroupsUpdate (CatalogsProductGroupsUpdateRequest) returns (CatalogsVerticalProductGroup);

  rpc FeedProcessingResultsList (FeedProcessingResultsListRequest) returns (FeedProcessingResultsList200Response);

  rpc FeedsCreate (FeedsCreateRequest) returns (CatalogsFeed);

  rpc FeedsDelete (FeedsDeleteRequest) returns (google.protobuf.Empty);

  rpc FeedsGet (FeedsGetRequest) returns (CatalogsFeed);

  rpc FeedsIngest (FeedsIngestRequest) returns (CatalogsFeedIngestion);

  rpc FeedsList (FeedsListRequest) returns (FeedsList200Response);

  rpc FeedsUpdate (FeedsUpdateRequest) returns (CatalogsFeed);

  rpc ItemsBatchGet (ItemsBatchGetRequest) returns (CatalogsItemsBatch);

  rpc ItemsBatchPost (ItemsBatchPostRequest) returns (CatalogsItemsBatch);

  rpc ItemsGet (ItemsGetRequest) returns (CatalogsItems);

  rpc ItemsIssuesList (ItemsIssuesListRequest) returns (ItemsIssuesList200Response);

  rpc ItemsPost (ItemsPostRequest) returns (CatalogsItems);

  rpc ProductsByProductGroupFilterList (ProductsByProductGroupFilterListRequest) returns (CatalogsProductGroupPinsList200Response);

  rpc ReportsCreate (ReportsCreateRequest) returns (CatalogsCreateReportResponse);

  rpc ReportsGet (ReportsGetRequest) returns (CatalogsReport);

  rpc ReportsStats (ReportsStatsRequest) returns (ReportsStats200Response);

}

message CatalogsCreateRequest {
  // Request object used to created a feed.
  CatalogsCreateRequest catalogsCreateRequest = 1;
  // Unique identifier of an ad account.
  string adAccountId = 2;

}

message CatalogsListRequest {
  // Cursor used to fetch the next page of items
  string bookmark = 1;
  // Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/reference/pagination/'>Pagination</a> for more information.
  int32 pageSize = 2;
  // Unique identifier of an ad account.
  string adAccountId = 3;

}

message CatalogsProductGroupPinsListRequest {
  // Unique identifier of a product group
  string productGroupId = 1;
  // Cursor used to fetch the next page of items
  string bookmark = 2;
  // Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/reference/pagination/'>Pagination</a> for more information.
  int32 pageSize = 3;
  // Unique identifier of an ad account.
  string adAccountId = 4;
  // Specify whether to return 90d and lifetime Pin metrics. Total comments and total reactions are only available with lifetime Pin metrics. If Pin was created before <code>2023-03-20</code> lifetime metrics will only be available for Video and Idea Pin formats. Lifetime metrics are available for all Pin formats since then.
  bool pinMetrics = 5;

}

message CatalogsProductGroupsCreateRequest {
  // Request object used to create a single catalogs product groups.
  MultipleProductGroupsInner multipleProductGroupsInner = 1;
  // Unique identifier of an ad account.
  string adAccountId = 2;

}

message CatalogsProductGroupsCreateManyRequest {
  // Request object used to create one or more catalogs product groups.
  repeated MultipleProductGroupsInner multipleProductGroupsInner = 1;
  // Unique identifier of an ad account.
  string adAccountId = 2;

}

message CatalogsProductGroupsCreateManyResponse {
  repeated string data = 1;
}

message CatalogsProductGroupsDeleteRequest {
  // Unique identifier of a product group
  string productGroupId = 1;
  // Unique identifier of an ad account.
  string adAccountId = 2;

}

message CatalogsProductGroupsDeleteManyRequest {
  // Comma-separated list of product group ids
  repeated int32 id = 1;
  // Unique identifier of an ad account.
  string adAccountId = 2;

}

message CatalogsProductGroupsGetRequest {
  // Unique identifier of a product group
  string productGroupId = 1;
  // Unique identifier of an ad account.
  string adAccountId = 2;

}

message CatalogsProductGroupsListRequest {
  // Comma-separated list of product group ids
  repeated int32 id = 1;
  // Filter entities for a given feed_id. If not given, all feeds are considered.
  string feedId = 2;
  // Filter entities for a given catalog_id. If not given, all catalogs are considered.
  string catalogId = 3;
  // Cursor used to fetch the next page of items
  string bookmark = 4;
  // Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/reference/pagination/'>Pagination</a> for more information.
  int32 pageSize = 5;
  // Unique identifier of an ad account.
  string adAccountId = 6;

}

message CatalogsProductGroupsProductCountsGetRequest {
  // Unique identifier of a product group
  string productGroupId = 1;
  // Unique identifier of an ad account.
  string adAccountId = 2;

}

message CatalogsProductGroupsUpdateRequest {
  // Unique identifier of a product group
  string productGroupId = 1;
  // Request object used to Update a catalogs product group.
  CatalogsProductGroupsUpdateRequest catalogsProductGroupsUpdateRequest = 2;
  // Unique identifier of an ad account.
  string adAccountId = 3;

}

message FeedProcessingResultsListRequest {
  // Unique identifier of a feed
  string feedId = 1;
  // Cursor used to fetch the next page of items
  string bookmark = 2;
  // Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/reference/pagination/'>Pagination</a> for more information.
  int32 pageSize = 3;
  // Unique identifier of an ad account.
  string adAccountId = 4;

}

message FeedsCreateRequest {
  // Request object used to created a feed.
  FeedsCreateRequest feedsCreateRequest = 1;
  // Unique identifier of an ad account.
  string adAccountId = 2;

}

message FeedsDeleteRequest {
  // Unique identifier of a feed
  string feedId = 1;
  // Unique identifier of an ad account.
  string adAccountId = 2;

}

message FeedsGetRequest {
  // Unique identifier of a feed
  string feedId = 1;
  // Unique identifier of an ad account.
  string adAccountId = 2;

}

message FeedsIngestRequest {
  // Unique identifier of a feed
  string feedId = 1;
  // Unique identifier of an ad account.
  string adAccountId = 2;

}

message FeedsListRequest {
  // Cursor used to fetch the next page of items
  string bookmark = 1;
  // Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/reference/pagination/'>Pagination</a> for more information.
  int32 pageSize = 2;
  // Filter entities for a given catalog_id. If not given, all catalogs are considered.
  string catalogId = 3;
  // Unique identifier of an ad account.
  string adAccountId = 4;

}

message FeedsUpdateRequest {
  // Unique identifier of a feed
  string feedId = 1;
  // Request object used to update a feed.
  FeedsUpdateRequest feedsUpdateRequest = 2;
  // Unique identifier of an ad account.
  string adAccountId = 3;

}

message ItemsBatchGetRequest {
  // Id of a catalogs items batch to fetch
  string batchId = 1;
  // Unique identifier of an ad account.
  string adAccountId = 2;

}

message ItemsBatchPostRequest {
  // Request object used to create catalogs items in a batch
  ItemsBatchPostRequest itemsBatchPostRequest = 1;
  // Unique identifier of an ad account.
  string adAccountId = 2;

}

message ItemsGetRequest {
  // Country for the Catalogs Items
  string country = 1;
  // Language for the Catalogs Items
  string language = 2;
  // Unique identifier of an ad account.
  string adAccountId = 3;
  // This parameter is deprecated. Use filters instead.
  repeated string itemIds = 4;
  // Identifies items to be retrieved. This is a required parameter.
  CatalogsItemsFilters filters = 5;

}

message ItemsIssuesListRequest {
  // Unique identifier of a feed processing result. It can be acquired from the \"id\" field of the \"items\" array within the response of the [List processing results for a given feed](/docs/api/v5/#operation/feed_processing_results/list).
  string processingResultId = 1;
  // Cursor used to fetch the next page of items
  string bookmark = 2;
  // Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/reference/pagination/'>Pagination</a> for more information.
  int32 pageSize = 3;
  // Item number based on order of appearance in the Catalogs Feed. For example, '0' refers to first item found in a feed that was downloaded from a 'location' specified during feed creation.
  repeated int32 itemNumbers = 4;
  // Filter item validation issues that have a given type of item validation issue.
  CatalogsItemValidationIssue itemValidationIssue = 5;
  // Unique identifier of an ad account.
  string adAccountId = 6;

}

message ItemsPostRequest {
  // Request object used to get catalogs items
  CatalogsItemsRequest catalogsItemsRequest = 1;
  // Unique identifier of an ad account.
  string adAccountId = 2;

}

message ProductsByProductGroupFilterListRequest {
  // Object holding a group of filters for a catalog product group
  CatalogsListProductsByFilterRequest catalogsListProductsByFilterRequest = 1;
  // Cursor used to fetch the next page of items
  string bookmark = 2;
  // Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/reference/pagination/'>Pagination</a> for more information.
  int32 pageSize = 3;
  // Unique identifier of an ad account.
  string adAccountId = 4;
  // Specify whether to return 90d and lifetime Pin metrics. Total comments and total reactions are only available with lifetime Pin metrics. If Pin was created before <code>2023-03-20</code> lifetime metrics will only be available for Video and Idea Pin formats. Lifetime metrics are available for all Pin formats since then.
  bool pinMetrics = 5;

}

message ReportsCreateRequest {
  // Request object to asynchronously create a report.
  CatalogsReportParameters catalogsReportParameters = 1;
  // Unique identifier of an ad account.
  string adAccountId = 2;

}

message ReportsGetRequest {
  // Token returned from async build report call
  string token = 1;
  // Unique identifier of an ad account.
  string adAccountId = 2;

}

message ReportsStatsRequest {
  // Contains the parameters for report identification.
  CatalogsReportParameters parameters = 1;
  // Unique identifier of an ad account.
  string adAccountId = 2;
  // Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/reference/pagination/'>Pagination</a> for more information.
  int32 pageSize = 3;
  // Cursor used to fetch the next page of items
  string bookmark = 4;

}

