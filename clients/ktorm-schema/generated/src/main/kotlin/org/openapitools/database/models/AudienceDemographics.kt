/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * Audience demographics
 * @param ages Ages distribution.
 * @param genders Gender distribution.
 * @param devices Device usage distribution.
 * @param metros Geographic metro area distribution.
 * @param countries Country area distribution.
 */
object AudienceDemographicss : BaseTable<AudienceDemographics>("AudienceDemographics") {

    /**
     * Create an entity of type AudienceDemographics from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = AudienceDemographics(
        ages = emptyList() /* kotlin.Array<AudienceDemographicValue>? */ /* Ages distribution. */,
        genders = emptyList() /* kotlin.Array<AudienceDemographicValue>? */ /* Gender distribution. */,
        devices = emptyList() /* kotlin.Array<AudienceDemographicValue>? */ /* Device usage distribution. */,
        metros = emptyList() /* kotlin.Array<AudienceDemographicValue>? */ /* Geographic metro area distribution. */,
        countries = emptyList() /* kotlin.Array<AudienceDemographicValue>? */ /* Country area distribution. */
    )

    /**
    * Assign all the columns from the entity of type AudienceDemographics to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = AudienceDemographics()
    * database.update(AudienceDemographicss, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: AudienceDemographics) {
        this.apply {
        }
    }

}


object AudienceDemographicsAudienceDemographicValue : BaseTable<Pair<kotlin.Long, kotlin.Long>>("AudienceDemographicsAudienceDemographicValue") {
    val audienceDemographics = long("audienceDemographics")
    val audienceDemographicValue = long("audienceDemographicValue")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[audienceDemographics] ?: 0, row[audienceDemographicValue] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(AudienceDemographicsAudienceDemographicValue.audienceDemographics, entity.first)
            set(AudienceDemographicsAudienceDemographicValue.audienceDemographicValue, entity.second)
        }
    }

}

object AudienceDemographicsAudienceDemographicValue : BaseTable<Pair<kotlin.Long, kotlin.Long>>("AudienceDemographicsAudienceDemographicValue") {
    val audienceDemographics = long("audienceDemographics")
    val audienceDemographicValue = long("audienceDemographicValue")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[audienceDemographics] ?: 0, row[audienceDemographicValue] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(AudienceDemographicsAudienceDemographicValue.audienceDemographics, entity.first)
            set(AudienceDemographicsAudienceDemographicValue.audienceDemographicValue, entity.second)
        }
    }

}

object AudienceDemographicsAudienceDemographicValue : BaseTable<Pair<kotlin.Long, kotlin.Long>>("AudienceDemographicsAudienceDemographicValue") {
    val audienceDemographics = long("audienceDemographics")
    val audienceDemographicValue = long("audienceDemographicValue")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[audienceDemographics] ?: 0, row[audienceDemographicValue] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(AudienceDemographicsAudienceDemographicValue.audienceDemographics, entity.first)
            set(AudienceDemographicsAudienceDemographicValue.audienceDemographicValue, entity.second)
        }
    }

}

object AudienceDemographicsAudienceDemographicValue : BaseTable<Pair<kotlin.Long, kotlin.Long>>("AudienceDemographicsAudienceDemographicValue") {
    val audienceDemographics = long("audienceDemographics")
    val audienceDemographicValue = long("audienceDemographicValue")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[audienceDemographics] ?: 0, row[audienceDemographicValue] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(AudienceDemographicsAudienceDemographicValue.audienceDemographics, entity.first)
            set(AudienceDemographicsAudienceDemographicValue.audienceDemographicValue, entity.second)
        }
    }

}

object AudienceDemographicsAudienceDemographicValue : BaseTable<Pair<kotlin.Long, kotlin.Long>>("AudienceDemographicsAudienceDemographicValue") {
    val audienceDemographics = long("audienceDemographics")
    val audienceDemographicValue = long("audienceDemographicValue")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[audienceDemographics] ?: 0, row[audienceDemographicValue] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(AudienceDemographicsAudienceDemographicValue.audienceDemographics, entity.first)
            set(AudienceDemographicsAudienceDemographicValue.audienceDemographicValue, entity.second)
        }
    }

}

