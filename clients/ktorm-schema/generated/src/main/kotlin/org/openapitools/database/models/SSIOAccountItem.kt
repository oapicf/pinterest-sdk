/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * 
 * @param id Salesforce id for billto_info
 * @param ioTermsId Salesforce id for IO Terms and Conditions
 * @param ioTerms Salesforce text for IO Terms and Conditions
 * @param usTermsId Salesforce id for US Terms and Conditions
 * @param usTerms Salesforce text for US Terms and Conditions
 * @param rowTermsId Salesforce id for Rest of the World Terms and Conditions
 * @param rowTerms Salesforce text for Rest of the World Terms and Conditions
 * @param ioType Insertion Order Type - Pinterest Paper or Agency Paper
 * @param addresses Address information that is associated with this account.
 */
object SSIOAccountItems : BaseTable<SSIOAccountItem>("SSIOAccountItem") {
    val id = text("id") /* null */ /* Salesforce id for billto_info */
    val ioTermsId = text("io_terms_id") /* null */ /* Salesforce id for IO Terms and Conditions */
    val ioTerms = text("io_terms") /* null */ /* Salesforce text for IO Terms and Conditions */
    val usTermsId = text("us_terms_id") /* null */ /* Salesforce id for US Terms and Conditions */
    val usTerms = text("us_terms") /* null */ /* Salesforce text for US Terms and Conditions */
    val rowTermsId = text("row_terms_id") /* null */ /* Salesforce id for Rest of the World Terms and Conditions */
    val rowTerms = text("row_terms") /* null */ /* Salesforce text for Rest of the World Terms and Conditions */
    val ioType = text("io_type") /* null */ /* Insertion Order Type - Pinterest Paper or Agency Paper */

    /**
     * Create an entity of type SSIOAccountItem from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = SSIOAccountItem(
        id = row[id]  /* kotlin.String? */ /* Salesforce id for billto_info */,
        ioTermsId = row[ioTermsId]  /* kotlin.String? */ /* Salesforce id for IO Terms and Conditions */,
        ioTerms = row[ioTerms]  /* kotlin.String? */ /* Salesforce text for IO Terms and Conditions */,
        usTermsId = row[usTermsId]  /* kotlin.String? */ /* Salesforce id for US Terms and Conditions */,
        usTerms = row[usTerms]  /* kotlin.String? */ /* Salesforce text for US Terms and Conditions */,
        rowTermsId = row[rowTermsId]  /* kotlin.String? */ /* Salesforce id for Rest of the World Terms and Conditions */,
        rowTerms = row[rowTerms]  /* kotlin.String? */ /* Salesforce text for Rest of the World Terms and Conditions */,
        ioType = row[ioType]  /* kotlin.String? */ /* Insertion Order Type - Pinterest Paper or Agency Paper */,
        addresses = emptyList() /* kotlin.Array<SSIOAccountAddress>? */ /* Address information that is associated with this account. */
    )

    /**
    * Assign all the columns from the entity of type SSIOAccountItem to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = SSIOAccountItem()
    * database.update(SSIOAccountItems, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: SSIOAccountItem) {
        this.apply {
            set(SSIOAccountItems.id, entity.id)
            set(SSIOAccountItems.ioTermsId, entity.ioTermsId)
            set(SSIOAccountItems.ioTerms, entity.ioTerms)
            set(SSIOAccountItems.usTermsId, entity.usTermsId)
            set(SSIOAccountItems.usTerms, entity.usTerms)
            set(SSIOAccountItems.rowTermsId, entity.rowTermsId)
            set(SSIOAccountItems.rowTerms, entity.rowTerms)
            set(SSIOAccountItems.ioType, entity.ioType)
        }
    }

}


object SSIOAccountItemSSIOAccountAddress : BaseTable<Pair<kotlin.Long, kotlin.Long>>("SSIOAccountItemSSIOAccountAddress") {
    val sSIOAccountItem = long("sSIOAccountItem")
    val sSIOAccountAddress = long("sSIOAccountAddress")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[sSIOAccountItem] ?: 0, row[sSIOAccountAddress] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(SSIOAccountItemSSIOAccountAddress.sSIOAccountItem, entity.first)
            set(SSIOAccountItemSSIOAccountAddress.sSIOAccountAddress, entity.second)
        }
    }

}

