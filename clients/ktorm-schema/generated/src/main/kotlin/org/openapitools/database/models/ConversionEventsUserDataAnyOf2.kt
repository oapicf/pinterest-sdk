/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * 
 * @param clientIpAddress The user's IP address, which can be either in IPv4 or IPv6 format. Used for matching. We highly recommend this for all events. It may improve reporting performance such as ROAS/CPA.
 * @param clientUserAgent The user agent string of the user's web browser. We highly recommend this for all events. It may improve reporting performance such as ROAS/CPA.
 * @param em Sha256 hashes of lowercase version of user's email addresses. Used for matching. We highly recommend this on checkout events at least. It may improve reporting performance such as ROAS/CPA. The string should be in the UTF-8 format.
 * @param hashedMaids Sha256 hashes of user's \"Google Advertising IDs\" (GAIDs) or \"Apple's Identifier for Advertisers\" (IDFAs). Used for matching. We highly recommend this on checkout events at least. It may improve reporting performance such as ROAS/CPA. The string should be in the UTF-8 format.
 */
object ConversionEventsUserDataAnyOf2s : BaseTable<ConversionEventsUserDataAnyOf2>("ConversionEventsUserData_anyOf_2") {
    val clientIpAddress = text("client_ip_address") /* The user's IP address, which can be either in IPv4 or IPv6 format. Used for matching. We highly recommend this for all events. It may improve reporting performance such as ROAS/CPA. */
    val clientUserAgent = text("client_user_agent") /* The user agent string of the user's web browser. We highly recommend this for all events. It may improve reporting performance such as ROAS/CPA. */

    /**
     * Create an entity of type ConversionEventsUserDataAnyOf2 from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = ConversionEventsUserDataAnyOf2(
        clientIpAddress = row[clientIpAddress] ?: "" /* kotlin.String */ /* The user's IP address, which can be either in IPv4 or IPv6 format. Used for matching. We highly recommend this for all events. It may improve reporting performance such as ROAS/CPA. */,
        clientUserAgent = row[clientUserAgent] ?: "" /* kotlin.String */ /* The user agent string of the user's web browser. We highly recommend this for all events. It may improve reporting performance such as ROAS/CPA. */,
        em = emptyList() /* kotlin.Array<kotlin.String>? */ /* Sha256 hashes of lowercase version of user's email addresses. Used for matching. We highly recommend this on checkout events at least. It may improve reporting performance such as ROAS/CPA. The string should be in the UTF-8 format. */,
        hashedMaids = emptyList() /* kotlin.Array<kotlin.String>? */ /* Sha256 hashes of user's \"Google Advertising IDs\" (GAIDs) or \"Apple's Identifier for Advertisers\" (IDFAs). Used for matching. We highly recommend this on checkout events at least. It may improve reporting performance such as ROAS/CPA. The string should be in the UTF-8 format. */
    )

    /**
    * Assign all the columns from the entity of type ConversionEventsUserDataAnyOf2 to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = ConversionEventsUserDataAnyOf2()
    * database.update(ConversionEventsUserDataAnyOf2s, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: ConversionEventsUserDataAnyOf2) {
        this.apply {
            set(ConversionEventsUserDataAnyOf2s.clientIpAddress, entity.clientIpAddress)
            set(ConversionEventsUserDataAnyOf2s.clientUserAgent, entity.clientUserAgent)
        }
    }

}


object ConversionEventsUserDataAnyOf2Em : BaseTable<Pair<kotlin.Long, kotlin.String>>("ConversionEventsUserDataAnyOf2Em") {
    val conversionEventsUserDataAnyOf2 = long("conversionEventsUserDataAnyOf2")
    val em = text("em")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.String> =
        Pair(row[conversionEventsUserDataAnyOf2] ?: 0, row[em] ?: "")

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.String>) {
        this.apply {
            set(ConversionEventsUserDataAnyOf2Em.conversionEventsUserDataAnyOf2, entity.first)
            set(ConversionEventsUserDataAnyOf2Em.em, entity.second)
        }
    }

}

object ConversionEventsUserDataAnyOf2HashedMaids : BaseTable<Pair<kotlin.Long, kotlin.String>>("ConversionEventsUserDataAnyOf2HashedMaids") {
    val conversionEventsUserDataAnyOf2 = long("conversionEventsUserDataAnyOf2")
    val hashedMaids = text("hashedMaids")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.String> =
        Pair(row[conversionEventsUserDataAnyOf2] ?: 0, row[hashedMaids] ?: "")

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.String>) {
        this.apply {
            set(ConversionEventsUserDataAnyOf2HashedMaids.conversionEventsUserDataAnyOf2, entity.first)
            set(ConversionEventsUserDataAnyOf2HashedMaids.hashedMaids, entity.second)
        }
    }

}

