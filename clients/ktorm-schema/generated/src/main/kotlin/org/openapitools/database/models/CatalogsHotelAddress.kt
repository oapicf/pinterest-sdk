/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * 
 * @param addr1 Primary street address of hotel.
 * @param city City where the hotel is located.
 * @param region State, county, province, where the hotel is located.
 * @param country Country where the hotel is located.
 * @param postalCode Required for countries with a postal code system. Postal or zip code of the hotel.
 */
object CatalogsHotelAddresss : BaseTable<CatalogsHotelAddress>("CatalogsHotelAddress") {
    val addr1 = text("addr1") /* null */ /* Primary street address of hotel. */
    val city = text("city") /* null */ /* City where the hotel is located. */
    val region = text("region") /* null */ /* State, county, province, where the hotel is located. */
    val country = text("country") /* null */ /* Country where the hotel is located. */
    val postalCode = text("postal_code") /* null */ /* Required for countries with a postal code system. Postal or zip code of the hotel. */

    /**
     * Create an entity of type CatalogsHotelAddress from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = CatalogsHotelAddress(
        addr1 = row[addr1]  /* kotlin.String? */ /* Primary street address of hotel. */,
        city = row[city]  /* kotlin.String? */ /* City where the hotel is located. */,
        region = row[region]  /* kotlin.String? */ /* State, county, province, where the hotel is located. */,
        country = row[country]  /* kotlin.String? */ /* Country where the hotel is located. */,
        postalCode = row[postalCode]  /* kotlin.String? */ /* Required for countries with a postal code system. Postal or zip code of the hotel. */
    )

    /**
    * Assign all the columns from the entity of type CatalogsHotelAddress to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = CatalogsHotelAddress()
    * database.update(CatalogsHotelAddresss, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: CatalogsHotelAddress) {
        this.apply {
            set(CatalogsHotelAddresss.addr1, entity.addr1)
            set(CatalogsHotelAddresss.city, entity.city)
            set(CatalogsHotelAddresss.region, entity.region)
            set(CatalogsHotelAddresss.country, entity.country)
            set(CatalogsHotelAddresss.postalCode, entity.postalCode)
        }
    }

}


