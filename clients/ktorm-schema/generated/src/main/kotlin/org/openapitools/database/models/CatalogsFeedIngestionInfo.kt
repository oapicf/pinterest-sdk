/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * 
 * @param IN_STOCK The number of ingested products that are in stock.
 * @param OUT_OF_STOCK The number of ingested products that are in out of stock.
 * @param PREORDER The number of ingested products that are in preorder.
 */
object CatalogsFeedIngestionInfos : BaseTable<CatalogsFeedIngestionInfo>("CatalogsFeedIngestionInfo") {
    val IN_STOCK = int("IN_STOCK") /* null */ /* The number of ingested products that are in stock. */
    val OUT_OF_STOCK = int("OUT_OF_STOCK") /* null */ /* The number of ingested products that are in out of stock. */
    val PREORDER = int("PREORDER") /* null */ /* The number of ingested products that are in preorder. */

    /**
     * Create an entity of type CatalogsFeedIngestionInfo from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = CatalogsFeedIngestionInfo(
        IN_STOCK = row[IN_STOCK]  /* kotlin.Int? */ /* The number of ingested products that are in stock. */,
        OUT_OF_STOCK = row[OUT_OF_STOCK]  /* kotlin.Int? */ /* The number of ingested products that are in out of stock. */,
        PREORDER = row[PREORDER]  /* kotlin.Int? */ /* The number of ingested products that are in preorder. */
    )

    /**
    * Assign all the columns from the entity of type CatalogsFeedIngestionInfo to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = CatalogsFeedIngestionInfo()
    * database.update(CatalogsFeedIngestionInfos, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: CatalogsFeedIngestionInfo) {
        this.apply {
            set(CatalogsFeedIngestionInfos.IN_STOCK, entity.IN_STOCK)
            set(CatalogsFeedIngestionInfos.OUT_OF_STOCK, entity.OUT_OF_STOCK)
            set(CatalogsFeedIngestionInfos.PREORDER, entity.PREORDER)
        }
    }

}


