/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * 
 * @param id Unique identifier of the invite/request.
 * @param inviteData 
 * @param isReceivedInvite Indicates whether the invite/request was received.
 * @param user Metadata for the member/partner that was sent the invite/request.
 */
object BaseInviteDataResponses : BaseTable<BaseInviteDataResponse>("BaseInviteDataResponse") {
    val id = text("id") /* null */ /* Unique identifier of the invite/request. */
    val inviteData = long("invite_data") /* null */
    val isReceivedInvite = boolean("is_received_invite") /* null */ /* Indicates whether the invite/request was received. */
    val user = long("user") /* null */ /* Metadata for the member/partner that was sent the invite/request. */

    /**
     * Create an entity of type BaseInviteDataResponse from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = BaseInviteDataResponse(
        id = row[id]  /* kotlin.String? */ /* Unique identifier of the invite/request. */,
        inviteData = BaseInviteDataResponseInviteDatas.createEntity(row, withReferences) /* BaseInviteDataResponseInviteData? */,
        isReceivedInvite = row[isReceivedInvite]  /* kotlin.Boolean? */ /* Indicates whether the invite/request was received. */,
        user = BusinessAccessUserSummarys.createEntity(row, withReferences) /* BusinessAccessUserSummary? */ /* Metadata for the member/partner that was sent the invite/request. */
    )

    /**
    * Assign all the columns from the entity of type BaseInviteDataResponse to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = BaseInviteDataResponse()
    * database.update(BaseInviteDataResponses, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: BaseInviteDataResponse) {
        this.apply {
            set(BaseInviteDataResponses.id, entity.id)
            set(BaseInviteDataResponses.inviteData, entity.inviteData)
            set(BaseInviteDataResponses.isReceivedInvite, entity.isReceivedInvite)
            set(BaseInviteDataResponses.user, entity.user)
        }
    }

}


