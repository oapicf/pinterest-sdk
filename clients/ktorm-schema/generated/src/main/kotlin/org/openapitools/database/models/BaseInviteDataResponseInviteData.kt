/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * Metadata for the invite/request.
 * @param inviteExpiration The date and time when the invite/request will expire. Returned in milliseconds.
 * @param inviteStatus The current status of the invite. The invite can be in one of the following states PENDING, ACCEPTED, DECLINED, CANCELLED, EXPIRED.
 * @param inviteType The type of invite. <br>'MEMBER_INVITE' is to invite a member to access your business assets. <br>'PARTNER_INVITE' is to invite a partner to access your business assets. <br>'PARTNER_REQUEST' is to request access a partner's business assets.
 * @param lastUpdatedTime The date and time the invite/request was last updated. Returned in milliseconds.
 * @param sentAt The date and time the invite/request was sent/created. Returned in milliseconds.
 */
object BaseInviteDataResponseInviteDatas : BaseTable<BaseInviteDataResponseInviteData>("BaseInviteDataResponse_invite_data") {
    val inviteExpiration = int("invite_expiration") /* null */ /* The date and time when the invite/request will expire. Returned in milliseconds. */
    val inviteStatus = text("invite_status") /* null */ /* The current status of the invite. The invite can be in one of the following states PENDING, ACCEPTED, DECLINED, CANCELLED, EXPIRED. */
    val inviteType = text("invite_type") /* null */ /* The type of invite. <br>'MEMBER_INVITE' is to invite a member to access your business assets. <br>'PARTNER_INVITE' is to invite a partner to access your business assets. <br>'PARTNER_REQUEST' is to request access a partner's business assets. */
    val lastUpdatedTime = int("last_updated_time") /* null */ /* The date and time the invite/request was last updated. Returned in milliseconds. */
    val sentAt = int("sent_at") /* null */ /* The date and time the invite/request was sent/created. Returned in milliseconds. */

    /**
     * Create an entity of type BaseInviteDataResponseInviteData from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = BaseInviteDataResponseInviteData(
        inviteExpiration = row[inviteExpiration]  /* kotlin.Int? */ /* The date and time when the invite/request will expire. Returned in milliseconds. */,
        inviteStatus = row[inviteStatus]  /* kotlin.String? */ /* The current status of the invite. The invite can be in one of the following states PENDING, ACCEPTED, DECLINED, CANCELLED, EXPIRED. */,
        inviteType = row[inviteType]  /* kotlin.String? */ /* The type of invite. <br>'MEMBER_INVITE' is to invite a member to access your business assets. <br>'PARTNER_INVITE' is to invite a partner to access your business assets. <br>'PARTNER_REQUEST' is to request access a partner's business assets. */,
        lastUpdatedTime = row[lastUpdatedTime]  /* kotlin.Int? */ /* The date and time the invite/request was last updated. Returned in milliseconds. */,
        sentAt = row[sentAt]  /* kotlin.Int? */ /* The date and time the invite/request was sent/created. Returned in milliseconds. */
    )

    /**
    * Assign all the columns from the entity of type BaseInviteDataResponseInviteData to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = BaseInviteDataResponseInviteData()
    * database.update(BaseInviteDataResponseInviteDatas, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: BaseInviteDataResponseInviteData) {
        this.apply {
            set(BaseInviteDataResponseInviteDatas.inviteExpiration, entity.inviteExpiration)
            set(BaseInviteDataResponseInviteDatas.inviteStatus, entity.inviteStatus)
            set(BaseInviteDataResponseInviteDatas.inviteType, entity.inviteType)
            set(BaseInviteDataResponseInviteDatas.lastUpdatedTime, entity.lastUpdatedTime)
            set(BaseInviteDataResponseInviteDatas.sentAt, entity.sentAt)
        }
    }

}


