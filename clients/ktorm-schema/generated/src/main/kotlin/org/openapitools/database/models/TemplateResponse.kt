/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * Template fields
 * @param id Template ID
 * @param adAccountId ID of the Ad Account that owns the template
 * @param adAccountIds IDs of the Ad Accounts that have access to this template
 * @param userId ID of the user who created the template
 * @param name Template Name
 * @param reportStartRelativeDaysInPast The number of days prior to the day the report will be delivered at which the report will start
 * @param reportEndRelativeDaysInPast The number of days prior to the day the report will be delivered at which the report will end
 * @param dateRange 
 * @param reportLevel 
 * @param reportFormat 
 * @param columns A list of columns to be included in the report
 * @param granularity 
 * @param viewWindowDays The length of the sliding window over which view conversions will be attributed
 * @param clickWindowDays The length of the sliding window over which click conversions will be attributed
 * @param engagementWindowDays The length of the sliding window over which engagement conversions will be attributed
 * @param conversionReportTimeType Conversion report time type
 * @param filtersJson A JSON representation of any filters to be applied before returning report data. Each filter object should contain all of the following fields:<br> \"field\": The column name<br> \"operator\": The operator. Allowed operators: [\"=\", \"!=\", \"in\", \"not_in\", \"~\", \">\", \"<\", \"contains_substring\"]<br> \"value\": A single value or a list of values
 * @param isOwnedByUser A boolean value that indicates if the user owns the template
 * @param isScheduled A boolean value that indicates if this template has been used to create a scheduled report
 * @param creationSource The surface used to create this template
 * @param isDeleted A boolean that indicates if the template has been deleted
 * @param updatedTime Time of last update in seconds since Unix epoch
 * @param customColumnIds A list of custom column IDs
 * @param type Reporting template type
 * @param ingestionSources The filter on the conversion ingestion source method for conversion metrics
 */
object TemplateResponses : BaseTable<TemplateResponse>("TemplateResponse") {
    val id = text("id") /* null */ /* Template ID */
    val adAccountId = text("ad_account_id") /* null */ /* ID of the Ad Account that owns the template */
    val userId = text("user_id") /* null */ /* ID of the user who created the template */
    val name = text("name") /* null */ /* Template Name */
    val reportStartRelativeDaysInPast = decimal("report_start_relative_days_in_past") /* null */ /* The number of days prior to the day the report will be delivered at which the report will start */
    val reportEndRelativeDaysInPast = decimal("report_end_relative_days_in_past") /* null */ /* The number of days prior to the day the report will be delivered at which the report will end */
    val dateRange = long("date_range") /* null */
    val reportLevel = long("report_level") /* null */
    val reportFormat = long("report_format") /* null */
    val granularity = long("granularity") /* null */
    val viewWindowDays = decimal("view_window_days") /* null */ /* The length of the sliding window over which view conversions will be attributed */
    val clickWindowDays = decimal("click_window_days") /* null */ /* The length of the sliding window over which click conversions will be attributed */
    val engagementWindowDays = decimal("engagement_window_days") /* null */ /* The length of the sliding window over which engagement conversions will be attributed */
    val conversionReportTimeType = text("conversion_report_time_type").transform({ TemplateResponse.ConversionReportTimeType.valueOf(it ?: "TIME_OF_AD_ACTION") }, { it.value }) /* null */ /* Conversion report time type */

    val filtersJson = text("filters_json") /* null */ /* A JSON representation of any filters to be applied before returning report data. Each filter object should contain all of the following fields:<br> \"field\": The column name<br> \"operator\": The operator. Allowed operators: [\"=\", \"!=\", \"in\", \"not_in\", \"~\", \">\", \"<\", \"contains_substring\"]<br> \"value\": A single value or a list of values */
    val isOwnedByUser = boolean("is_owned_by_user") /* null */ /* A boolean value that indicates if the user owns the template */
    val isScheduled = boolean("is_scheduled") /* null */ /* A boolean value that indicates if this template has been used to create a scheduled report */
    val creationSource = text("creation_source").transform({ TemplateResponse.CreationSource.valueOf(it ?: "ADS_API") }, { it.value }) /* null */ /* The surface used to create this template */

    val isDeleted = boolean("is_deleted") /* null */ /* A boolean that indicates if the template has been deleted */
    val updatedTime = decimal("updated_time") /* null */ /* Time of last update in seconds since Unix epoch */
    val type = text("type").transform({ TemplateResponse.Type.valueOf(it ?: "UNSPECIFIED") }, { it.value }) /* null */ /* Reporting template type */


    /**
     * Create an entity of type TemplateResponse from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = TemplateResponse(
        id = row[id]  /* kotlin.String? */ /* Template ID */,
        adAccountId = row[adAccountId]  /* kotlin.String? */ /* ID of the Ad Account that owns the template */,
        adAccountIds = emptyList() /* kotlin.Array<kotlin.String>? */ /* IDs of the Ad Accounts that have access to this template */,
        userId = row[userId]  /* kotlin.String? */ /* ID of the user who created the template */,
        name = row[name]  /* kotlin.String? */ /* Template Name */,
        reportStartRelativeDaysInPast = row[reportStartRelativeDaysInPast]  /* java.math.BigDecimal? */ /* The number of days prior to the day the report will be delivered at which the report will start */,
        reportEndRelativeDaysInPast = row[reportEndRelativeDaysInPast]  /* java.math.BigDecimal? */ /* The number of days prior to the day the report will be delivered at which the report will end */,
        dateRange = TemplateResponseDateRanges.createEntity(row, withReferences) /* TemplateResponseDateRange? */,
        reportLevel = MetricsReportingLevels.createEntity(row, withReferences) /* MetricsReportingLevel? */,
        reportFormat = DataOutputFormats.createEntity(row, withReferences) /* DataOutputFormat? */,
        columns = emptyList() /* kotlin.Array<kotlin.String>? */ /* A list of columns to be included in the report */,
        granularity = Granularitys.createEntity(row, withReferences) /* Granularity? */,
        viewWindowDays = row[viewWindowDays]  /* java.math.BigDecimal? */ /* The length of the sliding window over which view conversions will be attributed */,
        clickWindowDays = row[clickWindowDays]  /* java.math.BigDecimal? */ /* The length of the sliding window over which click conversions will be attributed */,
        engagementWindowDays = row[engagementWindowDays]  /* java.math.BigDecimal? */ /* The length of the sliding window over which engagement conversions will be attributed */,
        conversionReportTimeType = row[conversionReportTimeType]  /* kotlin.String? */ /* Conversion report time type */,
        filtersJson = row[filtersJson]  /* kotlin.String? */ /* A JSON representation of any filters to be applied before returning report data. Each filter object should contain all of the following fields:<br> \"field\": The column name<br> \"operator\": The operator. Allowed operators: [\"=\", \"!=\", \"in\", \"not_in\", \"~\", \">\", \"<\", \"contains_substring\"]<br> \"value\": A single value or a list of values */,
        isOwnedByUser = row[isOwnedByUser]  /* kotlin.Boolean? */ /* A boolean value that indicates if the user owns the template */,
        isScheduled = row[isScheduled]  /* kotlin.Boolean? */ /* A boolean value that indicates if this template has been used to create a scheduled report */,
        creationSource = row[creationSource]  /* kotlin.String? */ /* The surface used to create this template */,
        isDeleted = row[isDeleted]  /* kotlin.Boolean? */ /* A boolean that indicates if the template has been deleted */,
        updatedTime = row[updatedTime]  /* java.math.BigDecimal? */ /* Time of last update in seconds since Unix epoch */,
        customColumnIds = emptyList() /* kotlin.Array<kotlin.String>? */ /* A list of custom column IDs */,
        type = row[type]  /* kotlin.String? */ /* Reporting template type */,
        ingestionSources = emptyList() /* kotlin.Array<kotlin.String>? */ /* The filter on the conversion ingestion source method for conversion metrics */
    )

    /**
    * Assign all the columns from the entity of type TemplateResponse to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = TemplateResponse()
    * database.update(TemplateResponses, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: TemplateResponse) {
        this.apply {
            set(TemplateResponses.id, entity.id)
            set(TemplateResponses.adAccountId, entity.adAccountId)
            set(TemplateResponses.userId, entity.userId)
            set(TemplateResponses.name, entity.name)
            set(TemplateResponses.reportStartRelativeDaysInPast, entity.reportStartRelativeDaysInPast)
            set(TemplateResponses.reportEndRelativeDaysInPast, entity.reportEndRelativeDaysInPast)
            set(TemplateResponses.dateRange, entity.dateRange)
            set(TemplateResponses.reportLevel, entity.reportLevel)
            set(TemplateResponses.reportFormat, entity.reportFormat)
            set(TemplateResponses.granularity, entity.granularity)
            set(TemplateResponses.viewWindowDays, entity.viewWindowDays)
            set(TemplateResponses.clickWindowDays, entity.clickWindowDays)
            set(TemplateResponses.engagementWindowDays, entity.engagementWindowDays)
            set(TemplateResponses.conversionReportTimeType, entity.conversionReportTimeType)
            set(TemplateResponses.filtersJson, entity.filtersJson)
            set(TemplateResponses.isOwnedByUser, entity.isOwnedByUser)
            set(TemplateResponses.isScheduled, entity.isScheduled)
            set(TemplateResponses.creationSource, entity.creationSource)
            set(TemplateResponses.isDeleted, entity.isDeleted)
            set(TemplateResponses.updatedTime, entity.updatedTime)
            set(TemplateResponses.type, entity.type)
        }
    }

}


object TemplateResponseAdAccountIds : BaseTable<Pair<kotlin.Long, kotlin.String>>("TemplateResponseAdAccountIds") {
    val templateResponse = long("templateResponse")
    val adAccountIds = text("adAccountIds")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.String> =
        Pair(row[templateResponse] ?: 0, row[adAccountIds] ?: "")

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.String>) {
        this.apply {
            set(TemplateResponseAdAccountIds.templateResponse, entity.first)
            set(TemplateResponseAdAccountIds.adAccountIds, entity.second)
        }
    }

}

object TemplateResponseColumns : BaseTable<Pair<kotlin.Long, kotlin.String>>("TemplateResponseColumns") {
    val templateResponse = long("templateResponse")
    val columns = text("columns")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.String> =
        Pair(row[templateResponse] ?: 0, row[columns] ?: "")

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.String>) {
        this.apply {
            set(TemplateResponseColumns.templateResponse, entity.first)
            set(TemplateResponseColumns.columns, entity.second)
        }
    }

}

object TemplateResponseCustomColumnIds : BaseTable<Pair<kotlin.Long, kotlin.String>>("TemplateResponseCustomColumnIds") {
    val templateResponse = long("templateResponse")
    val customColumnIds = text("customColumnIds")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.String> =
        Pair(row[templateResponse] ?: 0, row[customColumnIds] ?: "")

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.String>) {
        this.apply {
            set(TemplateResponseCustomColumnIds.templateResponse, entity.first)
            set(TemplateResponseCustomColumnIds.customColumnIds, entity.second)
        }
    }

}

object TemplateResponseIngestionSources : BaseTable<Pair<kotlin.Long, kotlin.String>>("TemplateResponseIngestionSources") {
    val templateResponse = long("templateResponse")
    val ingestionSources = text("ingestionSources")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.String> =
        Pair(row[templateResponse] ?: 0, row[ingestionSources] ?: "")

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.String>) {
        this.apply {
            set(TemplateResponseIngestionSources.templateResponse, entity.first)
            set(TemplateResponseIngestionSources.ingestionSources, entity.second)
        }
    }

}

