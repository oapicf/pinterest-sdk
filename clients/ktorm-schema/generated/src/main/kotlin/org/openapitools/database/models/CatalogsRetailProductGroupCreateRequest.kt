/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * Request object for creating a product group.
 * @param catalogType Retail catalog based product group is available only for selected partners at the moment. If you are not eligible, please use feed based one.
 * @param name 
 * @param filters 
 * @param catalogId Catalog id pertaining to the retail product group.
 * @param country 
 * @param locale 
 * @param description 
 */
object CatalogsRetailProductGroupCreateRequests : BaseTable<CatalogsRetailProductGroupCreateRequest>("CatalogsRetailProductGroupCreateRequest") {
    val catalogType = text("catalog_type").transform({ CatalogsRetailProductGroupCreateRequest.CatalogType.valueOf(it) }, { it.value }) /* Retail catalog based product group is available only for selected partners at the moment. If you are not eligible, please use feed based one. */
    val name = text("name")
    val filters = long("filters")
    val catalogId = text("catalog_id") /* Catalog id pertaining to the retail product group. */
    val country = long("country")
    val locale = long("locale")
    val description = text("description") /* null */

    /**
     * Create an entity of type CatalogsRetailProductGroupCreateRequest from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = CatalogsRetailProductGroupCreateRequest(
        catalogType = row[catalogType] ?: CatalogsRetailProductGroupCreateRequest.CatalogType.valueOf("") /* kotlin.String */ /* Retail catalog based product group is available only for selected partners at the moment. If you are not eligible, please use feed based one. */,
        name = row[name] ?: "" /* kotlin.String */,
        filters = CatalogsProductGroupFiltersRequests.createEntity(row, withReferences) /* CatalogsProductGroupFiltersRequest */,
        catalogId = row[catalogId] ?: "" /* kotlin.String */ /* Catalog id pertaining to the retail product group. */,
        country = Countrys.createEntity(row, withReferences) /* Country */,
        locale = CatalogsLocales.createEntity(row, withReferences) /* CatalogsLocale */,
        description = row[description]  /* kotlin.String? */
    )

    /**
    * Assign all the columns from the entity of type CatalogsRetailProductGroupCreateRequest to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = CatalogsRetailProductGroupCreateRequest()
    * database.update(CatalogsRetailProductGroupCreateRequests, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: CatalogsRetailProductGroupCreateRequest) {
        this.apply {
            set(CatalogsRetailProductGroupCreateRequests.catalogType, entity.catalogType)
            set(CatalogsRetailProductGroupCreateRequests.name, entity.name)
            set(CatalogsRetailProductGroupCreateRequests.filters, entity.filters)
            set(CatalogsRetailProductGroupCreateRequests.catalogId, entity.catalogId)
            set(CatalogsRetailProductGroupCreateRequests.country, entity.country)
            set(CatalogsRetailProductGroupCreateRequests.locale, entity.locale)
            set(CatalogsRetailProductGroupCreateRequests.description, entity.description)
        }
    }

}


