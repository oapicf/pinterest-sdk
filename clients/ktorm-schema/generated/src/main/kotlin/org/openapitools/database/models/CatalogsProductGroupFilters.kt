/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * Object holding a group of filters for a catalog product group
 * @param anyOf 
 * @param allOf 
 */
object CatalogsProductGroupFilterss : BaseTable<CatalogsProductGroupFilters>("CatalogsProductGroupFilters") {

    /**
     * Create an entity of type CatalogsProductGroupFilters from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = CatalogsProductGroupFilters(
        anyOf = emptyList() /* kotlin.Array<CatalogsProductGroupFilterKeys> */,
        allOf = emptyList() /* kotlin.Array<CatalogsProductGroupFilterKeys> */
    )

    /**
    * Assign all the columns from the entity of type CatalogsProductGroupFilters to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = CatalogsProductGroupFilters()
    * database.update(CatalogsProductGroupFilterss, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: CatalogsProductGroupFilters) {
        this.apply {
        }
    }

}


object CatalogsProductGroupFiltersCatalogsProductGroupFilterKeys : BaseTable<Pair<kotlin.Long, kotlin.Long>>("CatalogsProductGroupFiltersCatalogsProductGroupFilterKeys") {
    val catalogsProductGroupFilters = long("catalogsProductGroupFilters")
    val catalogsProductGroupFilterKeys = long("catalogsProductGroupFilterKeys")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[catalogsProductGroupFilters] ?: 0, row[catalogsProductGroupFilterKeys] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(CatalogsProductGroupFiltersCatalogsProductGroupFilterKeys.catalogsProductGroupFilters, entity.first)
            set(CatalogsProductGroupFiltersCatalogsProductGroupFilterKeys.catalogsProductGroupFilterKeys, entity.second)
        }
    }

}

object CatalogsProductGroupFiltersCatalogsProductGroupFilterKeys : BaseTable<Pair<kotlin.Long, kotlin.Long>>("CatalogsProductGroupFiltersCatalogsProductGroupFilterKeys") {
    val catalogsProductGroupFilters = long("catalogsProductGroupFilters")
    val catalogsProductGroupFilterKeys = long("catalogsProductGroupFilterKeys")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[catalogsProductGroupFilters] ?: 0, row[catalogsProductGroupFilterKeys] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(CatalogsProductGroupFiltersCatalogsProductGroupFilterKeys.catalogsProductGroupFilters, entity.first)
            set(CatalogsProductGroupFiltersCatalogsProductGroupFilterKeys.catalogsProductGroupFilterKeys, entity.second)
        }
    }

}

