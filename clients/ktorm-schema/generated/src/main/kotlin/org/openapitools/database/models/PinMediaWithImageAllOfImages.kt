/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * 
 * @param 150x150 
 * @param 400x300 
 * @param 600x 
 * @param 1200x 
 */
object PinMediaWithImageAllOfImagess : BaseTable<PinMediaWithImageAllOfImages>("PinMediaWithImage_allOf_images") {
    val 150x150 = blob("150x150") /* null */
    val 400x300 = blob("400x300") /* null */
    val 600x = blob("600x") /* null */
    val 1200x = blob("1200x") /* null */

    /**
     * Create an entity of type PinMediaWithImageAllOfImages from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = PinMediaWithImageAllOfImages(
        150x150 = row[150x150]  /* kotlin.Any? */,
        400x300 = row[400x300]  /* kotlin.Any? */,
        600x = row[600x]  /* kotlin.Any? */,
        1200x = row[1200x]  /* kotlin.Any? */
    )

    /**
    * Assign all the columns from the entity of type PinMediaWithImageAllOfImages to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = PinMediaWithImageAllOfImages()
    * database.update(PinMediaWithImageAllOfImagess, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: PinMediaWithImageAllOfImages) {
        this.apply {
            set(PinMediaWithImageAllOfImagess.150x150, entity.150x150)
            set(PinMediaWithImageAllOfImagess.400x300, entity.400x300)
            set(PinMediaWithImageAllOfImagess.600x, entity.600x)
            set(PinMediaWithImageAllOfImagess.1200x, entity.1200x)
        }
    }

}


