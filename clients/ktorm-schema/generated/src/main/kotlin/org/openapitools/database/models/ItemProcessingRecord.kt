/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * Object describing an item processing record
 * @param itemId The catalog item id in the merchant namespace
 * @param errors Array with the validation errors for the item processing record. A non empty errors list causes the item processing to fail.
 * @param warnings Array with the validation warnings for the item processing record
 * @param status 
 */
object ItemProcessingRecords : BaseTable<ItemProcessingRecord>("ItemProcessingRecord") {
    val itemId = text("item_id") /* null */ /* The catalog item id in the merchant namespace */
    val status = long("status") /* null */

    /**
     * Create an entity of type ItemProcessingRecord from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = ItemProcessingRecord(
        itemId = row[itemId]  /* kotlin.String? */ /* The catalog item id in the merchant namespace */,
        errors = emptyList() /* kotlin.Array<ItemValidationEvent>? */ /* Array with the validation errors for the item processing record. A non empty errors list causes the item processing to fail. */,
        warnings = emptyList() /* kotlin.Array<ItemValidationEvent>? */ /* Array with the validation warnings for the item processing record */,
        status = ItemProcessingStatuss.createEntity(row, withReferences) /* ItemProcessingStatus? */
    )

    /**
    * Assign all the columns from the entity of type ItemProcessingRecord to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = ItemProcessingRecord()
    * database.update(ItemProcessingRecords, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: ItemProcessingRecord) {
        this.apply {
            set(ItemProcessingRecords.itemId, entity.itemId)
            set(ItemProcessingRecords.status, entity.status)
        }
    }

}


object ItemProcessingRecordItemValidationEvent : BaseTable<Pair<kotlin.Long, kotlin.Long>>("ItemProcessingRecordItemValidationEvent") {
    val itemProcessingRecord = long("itemProcessingRecord")
    val itemValidationEvent = long("itemValidationEvent")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[itemProcessingRecord] ?: 0, row[itemValidationEvent] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(ItemProcessingRecordItemValidationEvent.itemProcessingRecord, entity.first)
            set(ItemProcessingRecordItemValidationEvent.itemValidationEvent, entity.second)
        }
    }

}

object ItemProcessingRecordItemValidationEvent : BaseTable<Pair<kotlin.Long, kotlin.Long>>("ItemProcessingRecordItemValidationEvent") {
    val itemProcessingRecord = long("itemProcessingRecord")
    val itemValidationEvent = long("itemValidationEvent")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[itemProcessingRecord] ?: 0, row[itemValidationEvent] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(ItemProcessingRecordItemValidationEvent.itemProcessingRecord, entity.first)
            set(ItemProcessingRecordItemValidationEvent.itemValidationEvent, entity.second)
        }
    }

}

