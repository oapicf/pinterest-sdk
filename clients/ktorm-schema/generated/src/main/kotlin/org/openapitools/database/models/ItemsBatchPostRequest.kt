/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * 
 * @param catalogType 
 * @param country 
 * @param language 
 * @param items Array with catalogs items
 * @param operation 
 * @param catalogId Catalog id pertaining to the creative assets item. If not provided, default to oldest creative assets catalog
 */
object ItemsBatchPostRequests : BaseTable<ItemsBatchPostRequest>("items_batch_post_request") {
    val catalogType = text("catalog_type").transform({ ItemsBatchPostRequest.CatalogType.valueOf(it) }, { it.value })
    val country = long("country")
    val language = long("language")
    val operation = long("operation")
    val catalogId = text("catalog_id") /* null */ /* Catalog id pertaining to the creative assets item. If not provided, default to oldest creative assets catalog */

    /**
     * Create an entity of type ItemsBatchPostRequest from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = ItemsBatchPostRequest(
        catalogType = row[catalogType] ?: ItemsBatchPostRequest.CatalogType.valueOf("") /* kotlin.String */,
        country = Countrys.createEntity(row, withReferences) /* Country */,
        language = CatalogsItemsRequestLanguages.createEntity(row, withReferences) /* CatalogsItemsRequestLanguage */,
        items = emptyList() /* kotlin.Array<ItemDeleteBatchRecord> */ /* Array with catalogs items */,
        operation = BatchOperations.createEntity(row, withReferences) /* BatchOperation */,
        catalogId = row[catalogId]  /* kotlin.String? */ /* Catalog id pertaining to the creative assets item. If not provided, default to oldest creative assets catalog */
    )

    /**
    * Assign all the columns from the entity of type ItemsBatchPostRequest to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = ItemsBatchPostRequest()
    * database.update(ItemsBatchPostRequests, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: ItemsBatchPostRequest) {
        this.apply {
            set(ItemsBatchPostRequests.catalogType, entity.catalogType)
            set(ItemsBatchPostRequests.country, entity.country)
            set(ItemsBatchPostRequests.language, entity.language)
            set(ItemsBatchPostRequests.operation, entity.operation)
            set(ItemsBatchPostRequests.catalogId, entity.catalogId)
        }
    }

}


object ItemsBatchPostRequestItemDeleteBatchRecord : BaseTable<Pair<kotlin.Long, kotlin.Long>>("ItemsBatchPostRequestItemDeleteBatchRecord") {
    val itemsBatchPostRequest = long("itemsBatchPostRequest")
    val itemDeleteBatchRecord = long("itemDeleteBatchRecord")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[itemsBatchPostRequest] ?: 0, row[itemDeleteBatchRecord] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(ItemsBatchPostRequestItemDeleteBatchRecord.itemsBatchPostRequest, entity.first)
            set(ItemsBatchPostRequestItemDeleteBatchRecord.itemDeleteBatchRecord, entity.second)
        }
    }

}

