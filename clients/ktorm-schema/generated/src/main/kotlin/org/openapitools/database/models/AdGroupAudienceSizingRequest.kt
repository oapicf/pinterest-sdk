/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * 
 * @param autoTargetingEnabled Enable auto-targeting for ad group. Also known as <a href=\"https://help.pinterest.com/en/business/article/expanded-targeting\" target=\"_blank\">\"expanded targeting\"</a>.
 * @param placementGroup <a href=\"/docs/redoc/#section/Placement-group\">Placement group</a>.
 * @param creativeTypes Pin creative types filter. </p><strong>Note:</strong> SHOP_THE_PIN has been deprecated. Please use COLLECTION instead.
 * @param targetingSpec 
 * @param productGroupIds Targeted product group IDs. </p><strong>Note:</strong> This can only be combined with shopping/catalog sales campaigns. For more information, <a href=\"https://help.pinterest.com/en/business/article/shopping-ads#section-14571\" target=\"_blank\">click here</a>. SHOPPING_RETARGETING must be included in targeting_spec object or this field will be ignored.
 * @param keywords Array of keyword objects. If the keywords field is missing, all keywords will be targeted.
 */
object AdGroupAudienceSizingRequests : BaseTable<AdGroupAudienceSizingRequest>("AdGroupAudienceSizingRequest") {
    val autoTargetingEnabled = boolean("auto_targeting_enabled") /* null */ /* Enable auto-targeting for ad group. Also known as <a href=\"https://help.pinterest.com/en/business/article/expanded-targeting\" target=\"_blank\">\"expanded targeting\"</a>. */
    val placementGroup = long("placement_group") /* null */ /* <a href=\"/docs/redoc/#section/Placement-group\">Placement group</a>. */
    val targetingSpec = long("targeting_spec") /* null */

    /**
     * Create an entity of type AdGroupAudienceSizingRequest from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = AdGroupAudienceSizingRequest(
        autoTargetingEnabled = row[autoTargetingEnabled] ?: true /* kotlin.Boolean? */ /* Enable auto-targeting for ad group. Also known as <a href=\"https://help.pinterest.com/en/business/article/expanded-targeting\" target=\"_blank\">\"expanded targeting\"</a>. */,
        placementGroup = PlacementGroupTypes.createEntity(row, withReferences) /* PlacementGroupType? */ /* <a href=\"/docs/redoc/#section/Placement-group\">Placement group</a>. */,
        creativeTypes = emptyList() /* kotlin.Array<kotlin.String>? */ /* Pin creative types filter. </p><strong>Note:</strong> SHOP_THE_PIN has been deprecated. Please use COLLECTION instead. */,
        targetingSpec = TargetingSpecs.createEntity(row, withReferences) /* TargetingSpec? */,
        productGroupIds = emptyList() /* kotlin.Array<kotlin.String>? */ /* Targeted product group IDs. </p><strong>Note:</strong> This can only be combined with shopping/catalog sales campaigns. For more information, <a href=\"https://help.pinterest.com/en/business/article/shopping-ads#section-14571\" target=\"_blank\">click here</a>. SHOPPING_RETARGETING must be included in targeting_spec object or this field will be ignored. */,
        keywords = emptyList() /* kotlin.Array<AdGroupAudienceSizingRequestKeywordsInner>? */ /* Array of keyword objects. If the keywords field is missing, all keywords will be targeted. */
    )

    /**
    * Assign all the columns from the entity of type AdGroupAudienceSizingRequest to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = AdGroupAudienceSizingRequest()
    * database.update(AdGroupAudienceSizingRequests, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: AdGroupAudienceSizingRequest) {
        this.apply {
            set(AdGroupAudienceSizingRequests.autoTargetingEnabled, entity.autoTargetingEnabled)
            set(AdGroupAudienceSizingRequests.placementGroup, entity.placementGroup)
            set(AdGroupAudienceSizingRequests.targetingSpec, entity.targetingSpec)
        }
    }

}


object AdGroupAudienceSizingRequestCreativeTypes : BaseTable<Pair<kotlin.Long, kotlin.String>>("AdGroupAudienceSizingRequestCreativeTypes") {
    val adGroupAudienceSizingRequest = long("adGroupAudienceSizingRequest")
    val creativeTypes = text("creativeTypes")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.String> =
        Pair(row[adGroupAudienceSizingRequest] ?: 0, row[creativeTypes] ?: "")

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.String>) {
        this.apply {
            set(AdGroupAudienceSizingRequestCreativeTypes.adGroupAudienceSizingRequest, entity.first)
            set(AdGroupAudienceSizingRequestCreativeTypes.creativeTypes, entity.second)
        }
    }

}

object AdGroupAudienceSizingRequestProductGroupIds : BaseTable<Pair<kotlin.Long, kotlin.String>>("AdGroupAudienceSizingRequestProductGroupIds") {
    val adGroupAudienceSizingRequest = long("adGroupAudienceSizingRequest")
    val productGroupIds = text("productGroupIds")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.String> =
        Pair(row[adGroupAudienceSizingRequest] ?: 0, row[productGroupIds] ?: "")

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.String>) {
        this.apply {
            set(AdGroupAudienceSizingRequestProductGroupIds.adGroupAudienceSizingRequest, entity.first)
            set(AdGroupAudienceSizingRequestProductGroupIds.productGroupIds, entity.second)
        }
    }

}

object AdGroupAudienceSizingRequestAdGroupAudienceSizingRequestKeywordsInner : BaseTable<Pair<kotlin.Long, kotlin.Long>>("AdGroupAudienceSizingRequestAdGroupAudienceSizingRequestKeywordsInner") {
    val adGroupAudienceSizingRequest = long("adGroupAudienceSizingRequest")
    val adGroupAudienceSizingRequestKeywordsInner = long("adGroupAudienceSizingRequestKeywordsInner")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[adGroupAudienceSizingRequest] ?: 0, row[adGroupAudienceSizingRequestKeywordsInner] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(AdGroupAudienceSizingRequestAdGroupAudienceSizingRequestKeywordsInner.adGroupAudienceSizingRequest, entity.first)
            set(AdGroupAudienceSizingRequestAdGroupAudienceSizingRequestKeywordsInner.adGroupAudienceSizingRequestKeywordsInner, entity.second)
        }
    }

}

