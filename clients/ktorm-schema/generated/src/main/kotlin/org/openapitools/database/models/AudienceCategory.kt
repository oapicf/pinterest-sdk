/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * 
 * @param key Interest unique key (same as ID).
 * @param name Interest name.
 * @param ratio Interest's percent of category's total audience.
 * @param index Interest affinity index.
 * @param id Interest ID.
 * @param subcategories Subcategory interest distribution
 */
object AudienceCategorys : BaseTable<AudienceCategory>("AudienceCategory") {
    val key = text("key") /* null */ /* Interest unique key (same as ID). */
    val name = text("name") /* null */ /* Interest name. */
    val ratio = decimal("ratio") /* null */ /* Interest's percent of category's total audience. */
    val index = decimal("index") /* null */ /* Interest affinity index. */
    val id = text("id") /* null */ /* Interest ID. */

    /**
     * Create an entity of type AudienceCategory from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = AudienceCategory(
        key = row[key]  /* kotlin.String? */ /* Interest unique key (same as ID). */,
        name = row[name]  /* kotlin.String? */ /* Interest name. */,
        ratio = row[ratio]  /* java.math.BigDecimal? */ /* Interest's percent of category's total audience. */,
        index = row[index]  /* java.math.BigDecimal? */ /* Interest affinity index. */,
        id = row[id]  /* kotlin.String? */ /* Interest ID. */,
        subcategories = emptyList() /* kotlin.Array<AudienceSubcategory>? */ /* Subcategory interest distribution */
    )

    /**
    * Assign all the columns from the entity of type AudienceCategory to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = AudienceCategory()
    * database.update(AudienceCategorys, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: AudienceCategory) {
        this.apply {
            set(AudienceCategorys.key, entity.key)
            set(AudienceCategorys.name, entity.name)
            set(AudienceCategorys.ratio, entity.ratio)
            set(AudienceCategorys.index, entity.index)
            set(AudienceCategorys.id, entity.id)
        }
    }

}


object AudienceCategoryAudienceSubcategory : BaseTable<Pair<kotlin.Long, kotlin.Long>>("AudienceCategoryAudienceSubcategory") {
    val audienceCategory = long("audienceCategory")
    val audienceSubcategory = long("audienceSubcategory")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[audienceCategory] ?: 0, row[audienceSubcategory] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(AudienceCategoryAudienceSubcategory.audienceCategory, entity.first)
            set(AudienceCategoryAudienceSubcategory.audienceSubcategory, entity.second)
        }
    }

}

