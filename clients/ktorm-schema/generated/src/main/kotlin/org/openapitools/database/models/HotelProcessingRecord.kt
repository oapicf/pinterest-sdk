/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * Object describing an item processing record
 * @param hotelId The catalog hotel id in the merchant namespace
 * @param errors Array with the validation errors for the item processing record. A non empty errors list causes the item processing to fail.
 * @param warnings Array with the validation warnings for the item processing record
 * @param status 
 */
object HotelProcessingRecords : BaseTable<HotelProcessingRecord>("HotelProcessingRecord") {
    val hotelId = text("hotel_id") /* null */ /* The catalog hotel id in the merchant namespace */
    val status = long("status") /* null */

    /**
     * Create an entity of type HotelProcessingRecord from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = HotelProcessingRecord(
        hotelId = row[hotelId]  /* kotlin.String? */ /* The catalog hotel id in the merchant namespace */,
        errors = emptyList() /* kotlin.Array<ItemValidationEvent>? */ /* Array with the validation errors for the item processing record. A non empty errors list causes the item processing to fail. */,
        warnings = emptyList() /* kotlin.Array<ItemValidationEvent>? */ /* Array with the validation warnings for the item processing record */,
        status = ItemProcessingStatuss.createEntity(row, withReferences) /* ItemProcessingStatus? */
    )

    /**
    * Assign all the columns from the entity of type HotelProcessingRecord to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = HotelProcessingRecord()
    * database.update(HotelProcessingRecords, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: HotelProcessingRecord) {
        this.apply {
            set(HotelProcessingRecords.hotelId, entity.hotelId)
            set(HotelProcessingRecords.status, entity.status)
        }
    }

}


object HotelProcessingRecordItemValidationEvent : BaseTable<Pair<kotlin.Long, kotlin.Long>>("HotelProcessingRecordItemValidationEvent") {
    val hotelProcessingRecord = long("hotelProcessingRecord")
    val itemValidationEvent = long("itemValidationEvent")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[hotelProcessingRecord] ?: 0, row[itemValidationEvent] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(HotelProcessingRecordItemValidationEvent.hotelProcessingRecord, entity.first)
            set(HotelProcessingRecordItemValidationEvent.itemValidationEvent, entity.second)
        }
    }

}

object HotelProcessingRecordItemValidationEvent : BaseTable<Pair<kotlin.Long, kotlin.Long>>("HotelProcessingRecordItemValidationEvent") {
    val hotelProcessingRecord = long("hotelProcessingRecord")
    val itemValidationEvent = long("itemValidationEvent")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[hotelProcessingRecord] ?: 0, row[itemValidationEvent] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(HotelProcessingRecordItemValidationEvent.hotelProcessingRecord, entity.first)
            set(HotelProcessingRecordItemValidationEvent.itemValidationEvent, entity.second)
        }
    }

}

