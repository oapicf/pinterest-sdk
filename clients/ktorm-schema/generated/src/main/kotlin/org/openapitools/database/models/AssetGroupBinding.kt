/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * 
 * @param id Asset Group ID.
 * @param assetGroupName Asset Group name
 * @param assetGroupDescription Asset group description
 * @param assetGroupTypes Asset group types
 * @param adAccountsIds A list of ad account IDs under the asset group
 * @param profilesIds A list of profile IDs under asset group
 * @param createdTime The creation time of the asset group
 * @param updatedTime The last update time of the asset group
 * @param owner The data of the business that owns the asset group.
 * @param createdBy The data of the user that created the asset group.
 */
object AssetGroupBindings : BaseTable<AssetGroupBinding>("AssetGroupBinding") {
    val id = text("id") /* null */ /* Asset Group ID. */
    val assetGroupName = text("asset_group_name") /* null */ /* Asset Group name */
    val assetGroupDescription = text("asset_group_description") /* null */ /* Asset group description */
    val createdTime = int("created_time") /* null */ /* The creation time of the asset group */
    val updatedTime = int("updated_time") /* null */ /* The last update time of the asset group */
    val owner = long("owner") /* null */ /* The data of the business that owns the asset group. */
    val createdBy = long("created_by") /* null */ /* The data of the user that created the asset group. */

    /**
     * Create an entity of type AssetGroupBinding from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = AssetGroupBinding(
        id = row[id]  /* kotlin.String? */ /* Asset Group ID. */,
        assetGroupName = row[assetGroupName]  /* kotlin.String? */ /* Asset Group name */,
        assetGroupDescription = row[assetGroupDescription]  /* kotlin.String? */ /* Asset group description */,
        assetGroupTypes = emptyList() /* kotlin.Array<kotlin.String>? */ /* Asset group types */,
        adAccountsIds = emptyList() /* kotlin.Array<kotlin.String>? */ /* A list of ad account IDs under the asset group */,
        profilesIds = emptyList() /* kotlin.Array<kotlin.String>? */ /* A list of profile IDs under asset group */,
        createdTime = row[createdTime]  /* kotlin.Int? */ /* The creation time of the asset group */,
        updatedTime = row[updatedTime]  /* kotlin.Int? */ /* The last update time of the asset group */,
        owner = BusinessAccessUserSummarys.createEntity(row, withReferences) /* BusinessAccessUserSummary? */ /* The data of the business that owns the asset group. */,
        createdBy = BusinessAccessUserSummarys.createEntity(row, withReferences) /* BusinessAccessUserSummary? */ /* The data of the user that created the asset group. */
    )

    /**
    * Assign all the columns from the entity of type AssetGroupBinding to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = AssetGroupBinding()
    * database.update(AssetGroupBindings, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: AssetGroupBinding) {
        this.apply {
            set(AssetGroupBindings.id, entity.id)
            set(AssetGroupBindings.assetGroupName, entity.assetGroupName)
            set(AssetGroupBindings.assetGroupDescription, entity.assetGroupDescription)
            set(AssetGroupBindings.createdTime, entity.createdTime)
            set(AssetGroupBindings.updatedTime, entity.updatedTime)
            set(AssetGroupBindings.owner, entity.owner)
            set(AssetGroupBindings.createdBy, entity.createdBy)
        }
    }

}


object AssetGroupBindingAssetGroupTypes : BaseTable<Pair<kotlin.Long, kotlin.String>>("AssetGroupBindingAssetGroupTypes") {
    val assetGroupBinding = long("assetGroupBinding")
    val assetGroupTypes = text("assetGroupTypes")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.String> =
        Pair(row[assetGroupBinding] ?: 0, row[assetGroupTypes] ?: "")

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.String>) {
        this.apply {
            set(AssetGroupBindingAssetGroupTypes.assetGroupBinding, entity.first)
            set(AssetGroupBindingAssetGroupTypes.assetGroupTypes, entity.second)
        }
    }

}

object AssetGroupBindingAdAccountsIds : BaseTable<Pair<kotlin.Long, kotlin.String>>("AssetGroupBindingAdAccountsIds") {
    val assetGroupBinding = long("assetGroupBinding")
    val adAccountsIds = text("adAccountsIds")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.String> =
        Pair(row[assetGroupBinding] ?: 0, row[adAccountsIds] ?: "")

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.String>) {
        this.apply {
            set(AssetGroupBindingAdAccountsIds.assetGroupBinding, entity.first)
            set(AssetGroupBindingAdAccountsIds.adAccountsIds, entity.second)
        }
    }

}

object AssetGroupBindingProfilesIds : BaseTable<Pair<kotlin.Long, kotlin.String>>("AssetGroupBindingProfilesIds") {
    val assetGroupBinding = long("assetGroupBinding")
    val profilesIds = text("profilesIds")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.String> =
        Pair(row[assetGroupBinding] ?: 0, row[profilesIds] ?: "")

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.String>) {
        this.apply {
            set(AssetGroupBindingProfilesIds.assetGroupBinding, entity.first)
            set(AssetGroupBindingProfilesIds.profilesIds, entity.second)
        }
    }

}

