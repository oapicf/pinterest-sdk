/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * An object containing the permissions a business member has on the asset.
 * @param assetId Unique identifier of a business asset.
 * @param assetType Type of asset. Currently we only support AD_ACCOUNT and PROFILE, and ASSET_GROUP.
 * @param permissions Permission levels member or partner has on an asset.
 * @param assetGroupInfo 
 */
object AssetIdPermissionss : BaseTable<AssetIdPermissions>("AssetIdPermissions") {
    val assetId = text("asset_id") /* null */ /* Unique identifier of a business asset. */
    val assetType = text("asset_type") /* null */ /* Type of asset. Currently we only support AD_ACCOUNT and PROFILE, and ASSET_GROUP. */
    val assetGroupInfo = long("asset_group_info") /* null */

    /**
     * Create an entity of type AssetIdPermissions from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = AssetIdPermissions(
        assetId = row[assetId]  /* kotlin.String? */ /* Unique identifier of a business asset. */,
        assetType = row[assetType]  /* kotlin.String? */ /* Type of asset. Currently we only support AD_ACCOUNT and PROFILE, and ASSET_GROUP. */,
        permissions = emptyList() /* kotlin.Array<kotlin.String>? */ /* Permission levels member or partner has on an asset. */,
        assetGroupInfo = AssetGroupBindings.createEntity(row, withReferences) /* AssetGroupBinding? */
    )

    /**
    * Assign all the columns from the entity of type AssetIdPermissions to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = AssetIdPermissions()
    * database.update(AssetIdPermissionss, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: AssetIdPermissions) {
        this.apply {
            set(AssetIdPermissionss.assetId, entity.assetId)
            set(AssetIdPermissionss.assetType, entity.assetType)
            set(AssetIdPermissionss.assetGroupInfo, entity.assetGroupInfo)
        }
    }

}


object AssetIdPermissionsPermissions : BaseTable<Pair<kotlin.Long, kotlin.String>>("AssetIdPermissionsPermissions") {
    val assetIdPermissions = long("assetIdPermissions")
    val permissions = text("permissions")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.String> =
        Pair(row[assetIdPermissions] ?: 0, row[permissions] ?: "")

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.String>) {
        this.apply {
            set(AssetIdPermissionsPermissions.assetIdPermissions, entity.first)
            set(AssetIdPermissionsPermissions.permissions, entity.second)
        }
    }

}

