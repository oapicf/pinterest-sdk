/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * The list of parameter key/value pairs you will need to send with your POST request to upload your media file.
 * @param xAmzDate 
 * @param xAmzSignature 
 * @param xAmzSecurityToken 
 * @param xAmzAlgorithm 
 * @param key 
 * @param policy 
 * @param xAmzCredential 
 * @param contentType 
 */
object MediaUploadAllOfUploadParameterss : BaseTable<MediaUploadAllOfUploadParameters>("MediaUpload_allOf_upload_parameters") {
    val xAmzDate = text("xamzdate") /* null */
    val xAmzSignature = text("xamzsignature") /* null */
    val xAmzSecurityToken = text("xamzsecuritytoken") /* null */
    val xAmzAlgorithm = text("xamzalgorithm") /* null */
    val key = text("key") /* null */
    val policy = text("policy") /* null */
    val xAmzCredential = text("xamzcredential") /* null */
    val contentType = text("ContentType") /* null */

    /**
     * Create an entity of type MediaUploadAllOfUploadParameters from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = MediaUploadAllOfUploadParameters(
        xAmzDate = row[xAmzDate]  /* kotlin.String? */,
        xAmzSignature = row[xAmzSignature]  /* kotlin.String? */,
        xAmzSecurityToken = row[xAmzSecurityToken]  /* kotlin.String? */,
        xAmzAlgorithm = row[xAmzAlgorithm]  /* kotlin.String? */,
        key = row[key]  /* kotlin.String? */,
        policy = row[policy]  /* kotlin.String? */,
        xAmzCredential = row[xAmzCredential]  /* kotlin.String? */,
        contentType = row[contentType]  /* kotlin.String? */
    )

    /**
    * Assign all the columns from the entity of type MediaUploadAllOfUploadParameters to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = MediaUploadAllOfUploadParameters()
    * database.update(MediaUploadAllOfUploadParameterss, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: MediaUploadAllOfUploadParameters) {
        this.apply {
            set(MediaUploadAllOfUploadParameterss.xAmzDate, entity.xAmzDate)
            set(MediaUploadAllOfUploadParameterss.xAmzSignature, entity.xAmzSignature)
            set(MediaUploadAllOfUploadParameterss.xAmzSecurityToken, entity.xAmzSecurityToken)
            set(MediaUploadAllOfUploadParameterss.xAmzAlgorithm, entity.xAmzAlgorithm)
            set(MediaUploadAllOfUploadParameterss.key, entity.key)
            set(MediaUploadAllOfUploadParameterss.policy, entity.policy)
            set(MediaUploadAllOfUploadParameterss.xAmzCredential, entity.xAmzCredential)
            set(MediaUploadAllOfUploadParameterss.contentType, entity.contentType)
        }
    }

}


