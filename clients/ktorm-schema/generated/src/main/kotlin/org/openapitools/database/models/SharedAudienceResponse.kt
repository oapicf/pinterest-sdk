/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * 
 * @param audienceId Audience ID that was shared
 * @param permissions 
 * @param recipientAccountIds Account IDs that received the audience
 */
object SharedAudienceResponses : BaseTable<SharedAudienceResponse>("SharedAudienceResponse") {
    val audienceId = text("audience_id") /* null */ /* Audience ID that was shared */

    /**
     * Create an entity of type SharedAudienceResponse from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = SharedAudienceResponse(
        audienceId = row[audienceId]  /* kotlin.String? */ /* Audience ID that was shared */,
        permissions = emptyList() /* kotlin.Array<Role>? */,
        recipientAccountIds = emptyList() /* kotlin.Array<kotlin.String>? */ /* Account IDs that received the audience */
    )

    /**
    * Assign all the columns from the entity of type SharedAudienceResponse to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = SharedAudienceResponse()
    * database.update(SharedAudienceResponses, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: SharedAudienceResponse) {
        this.apply {
            set(SharedAudienceResponses.audienceId, entity.audienceId)
        }
    }

}


object SharedAudienceResponseRole : BaseTable<Pair<kotlin.Long, kotlin.Long>>("SharedAudienceResponseRole") {
    val sharedAudienceResponse = long("sharedAudienceResponse")
    val role = long("role")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[sharedAudienceResponse] ?: 0, row[role] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(SharedAudienceResponseRole.sharedAudienceResponse, entity.first)
            set(SharedAudienceResponseRole.role, entity.second)
        }
    }

}

object SharedAudienceResponseRecipientAccountIds : BaseTable<Pair<kotlin.Long, kotlin.String>>("SharedAudienceResponseRecipientAccountIds") {
    val sharedAudienceResponse = long("sharedAudienceResponse")
    val recipientAccountIds = text("recipientAccountIds")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.String> =
        Pair(row[sharedAudienceResponse] ?: 0, row[recipientAccountIds] ?: "")

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.String>) {
        this.apply {
            set(SharedAudienceResponseRecipientAccountIds.sharedAudienceResponse, entity.first)
            set(SharedAudienceResponseRecipientAccountIds.recipientAccountIds, entity.second)
        }
    }

}

