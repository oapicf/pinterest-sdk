/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * Body to be used on path to send Members or Partners Invite or Request
 * @param businessRole The business access level to grant member/partner. Note, values are case-sensitive. - EMPLOYEE: Can only view and access assets you assign them to. They cannot see details about other employees, partners, or other assets. - BIZ_ADMIN: Have full control of roles and can add employees and partners as well as grant asset access. - PARTNER: Can only view and access assets you assign them to/or they assign to you.
 * @param inviteType 
 * @param members A list of usernames, emails, or a mix of them. Should be used if invite_type is MEMBER_INVITE
 * @param partners A list of partner_id. Should be used if invite_type is PARTNER_INVITE or PARTNER_REQUEST
 */
object CreateMembershipOrPartnershipInvitesBodys : BaseTable<CreateMembershipOrPartnershipInvitesBody>("CreateMembershipOrPartnershipInvitesBody") {
    val businessRole = text("business_role").transform({ CreateMembershipOrPartnershipInvitesBody.BusinessRole.valueOf(it) }, { it.value }) /* The business access level to grant member/partner. Note, values are case-sensitive. - EMPLOYEE: Can only view and access assets you assign them to. They cannot see details about other employees, partners, or other assets. - BIZ_ADMIN: Have full control of roles and can add employees and partners as well as grant asset access. - PARTNER: Can only view and access assets you assign them to/or they assign to you. */
    val inviteType = long("invite_type")

    /**
     * Create an entity of type CreateMembershipOrPartnershipInvitesBody from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = CreateMembershipOrPartnershipInvitesBody(
        businessRole = row[businessRole] ?: CreateMembershipOrPartnershipInvitesBody.BusinessRole.valueOf("") /* kotlin.String */ /* The business access level to grant member/partner. Note, values are case-sensitive. - EMPLOYEE: Can only view and access assets you assign them to. They cannot see details about other employees, partners, or other assets. - BIZ_ADMIN: Have full control of roles and can add employees and partners as well as grant asset access. - PARTNER: Can only view and access assets you assign them to/or they assign to you. */,
        inviteType = InviteTypes.createEntity(row, withReferences) /* InviteType */,
        members = emptyList() /* kotlin.Array<kotlin.String>? */ /* A list of usernames, emails, or a mix of them. Should be used if invite_type is MEMBER_INVITE */,
        partners = emptyList() /* kotlin.Array<kotlin.String>? */ /* A list of partner_id. Should be used if invite_type is PARTNER_INVITE or PARTNER_REQUEST */
    )

    /**
    * Assign all the columns from the entity of type CreateMembershipOrPartnershipInvitesBody to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = CreateMembershipOrPartnershipInvitesBody()
    * database.update(CreateMembershipOrPartnershipInvitesBodys, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: CreateMembershipOrPartnershipInvitesBody) {
        this.apply {
            set(CreateMembershipOrPartnershipInvitesBodys.businessRole, entity.businessRole)
            set(CreateMembershipOrPartnershipInvitesBodys.inviteType, entity.inviteType)
        }
    }

}


object CreateMembershipOrPartnershipInvitesBodyMembers : BaseTable<Pair<kotlin.Long, kotlin.String>>("CreateMembershipOrPartnershipInvitesBodyMembers") {
    val createMembershipOrPartnershipInvitesBody = long("createMembershipOrPartnershipInvitesBody")
    val members = text("members")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.String> =
        Pair(row[createMembershipOrPartnershipInvitesBody] ?: 0, row[members] ?: "")

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.String>) {
        this.apply {
            set(CreateMembershipOrPartnershipInvitesBodyMembers.createMembershipOrPartnershipInvitesBody, entity.first)
            set(CreateMembershipOrPartnershipInvitesBodyMembers.members, entity.second)
        }
    }

}

object CreateMembershipOrPartnershipInvitesBodyPartners : BaseTable<Pair<kotlin.Long, kotlin.String>>("CreateMembershipOrPartnershipInvitesBodyPartners") {
    val createMembershipOrPartnershipInvitesBody = long("createMembershipOrPartnershipInvitesBody")
    val partners = text("partners")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.String> =
        Pair(row[createMembershipOrPartnershipInvitesBody] ?: 0, row[partners] ?: "")

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.String>) {
        this.apply {
            set(CreateMembershipOrPartnershipInvitesBodyPartners.createMembershipOrPartnershipInvitesBody, entity.first)
            set(CreateMembershipOrPartnershipInvitesBodyPartners.partners, entity.second)
        }
    }

}

