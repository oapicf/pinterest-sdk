/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * Object describing a hotel record
 * @param catalogType 
 * @param creativeAssetsId The catalog creative assets id in the merchant namespace
 * @param pins The pins mapped to the item
 * @param attributes 
 */
object CatalogsCreativeAssetsItemResponses : BaseTable<CatalogsCreativeAssetsItemResponse>("CatalogsCreativeAssetsItemResponse") {
    val catalogType = long("catalog_type")
    val creativeAssetsId = text("creative_assets_id") /* null */ /* The catalog creative assets id in the merchant namespace */
    val attributes = long("attributes") /* null */

    /**
     * Create an entity of type CatalogsCreativeAssetsItemResponse from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = CatalogsCreativeAssetsItemResponse(
        catalogType = CatalogsTypes.createEntity(row, withReferences) /* CatalogsType */,
        creativeAssetsId = row[creativeAssetsId]  /* kotlin.String? */ /* The catalog creative assets id in the merchant namespace */,
        pins = emptyList() /* kotlin.Array<Pin>? */ /* The pins mapped to the item */,
        attributes = CatalogsCreativeAssetsAttributess.createEntity(row, withReferences) /* CatalogsCreativeAssetsAttributes? */
    )

    /**
    * Assign all the columns from the entity of type CatalogsCreativeAssetsItemResponse to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = CatalogsCreativeAssetsItemResponse()
    * database.update(CatalogsCreativeAssetsItemResponses, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: CatalogsCreativeAssetsItemResponse) {
        this.apply {
            set(CatalogsCreativeAssetsItemResponses.catalogType, entity.catalogType)
            set(CatalogsCreativeAssetsItemResponses.creativeAssetsId, entity.creativeAssetsId)
            set(CatalogsCreativeAssetsItemResponses.attributes, entity.attributes)
        }
    }

}


object CatalogsCreativeAssetsItemResponsePin : BaseTable<Pair<kotlin.Long, kotlin.Long>>("CatalogsCreativeAssetsItemResponsePin") {
    val catalogsCreativeAssetsItemResponse = long("catalogsCreativeAssetsItemResponse")
    val pin = long("pin")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[catalogsCreativeAssetsItemResponse] ?: 0, row[pin] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(CatalogsCreativeAssetsItemResponsePin.catalogsCreativeAssetsItemResponse, entity.first)
            set(CatalogsCreativeAssetsItemResponsePin.pin, entity.second)
        }
    }

}

