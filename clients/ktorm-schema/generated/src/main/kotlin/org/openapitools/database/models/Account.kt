/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * 
 * @param accountType Type of account
 * @param id User account ID.
 * @param profileImage 
 * @param websiteUrl 
 * @param username 
 * @param about Profile about description.
 * @param businessName 
 * @param boardCount User account board count.<br/>**Note**: Board count on user account level may differ from counts found elsewhere due to attribution of collaborative Boards.
 * @param pinCount User account pin count. This includes both created and saved pins.
 * @param followerCount User account follower count.
 * @param followingCount User account following count.
 * @param monthlyViews User account monthly views.
 */
object Accounts : BaseTable<Account>("Account") {
    val accountType = text("account_type").transform({ Account.AccountType.valueOf(it ?: "PINNER") }, { it.value }) /* null */ /* Type of account */

    val id = text("id") /* null */ /* User account ID. */
    val profileImage = text("profile_image") /* null */
    val websiteUrl = text("website_url") /* null */
    val username = text("username") /* null */
    val about = text("about") /* null */ /* Profile about description. */
    val businessName = text("business_name") /* null */
    val boardCount = int("board_count") /* null */ /* User account board count.<br/>**Note**: Board count on user account level may differ from counts found elsewhere due to attribution of collaborative Boards. */
    val pinCount = int("pin_count") /* null */ /* User account pin count. This includes both created and saved pins. */
    val followerCount = int("follower_count") /* null */ /* User account follower count. */
    val followingCount = int("following_count") /* null */ /* User account following count. */
    val monthlyViews = int("monthly_views") /* null */ /* User account monthly views. */

    /**
     * Create an entity of type Account from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = Account(
        accountType = row[accountType]  /* kotlin.String? */ /* Type of account */,
        id = row[id]  /* kotlin.String? */ /* User account ID. */,
        profileImage = row[profileImage]  /* kotlin.String? */,
        websiteUrl = row[websiteUrl]  /* kotlin.String? */,
        username = row[username]  /* kotlin.String? */,
        about = row[about]  /* kotlin.String? */ /* Profile about description. */,
        businessName = row[businessName]  /* kotlin.String? */,
        boardCount = row[boardCount]  /* kotlin.Int? */ /* User account board count.<br/>**Note**: Board count on user account level may differ from counts found elsewhere due to attribution of collaborative Boards. */,
        pinCount = row[pinCount]  /* kotlin.Int? */ /* User account pin count. This includes both created and saved pins. */,
        followerCount = row[followerCount]  /* kotlin.Int? */ /* User account follower count. */,
        followingCount = row[followingCount]  /* kotlin.Int? */ /* User account following count. */,
        monthlyViews = row[monthlyViews]  /* kotlin.Int? */ /* User account monthly views. */
    )

    /**
    * Assign all the columns from the entity of type Account to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = Account()
    * database.update(Accounts, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: Account) {
        this.apply {
            set(Accounts.accountType, entity.accountType)
            set(Accounts.id, entity.id)
            set(Accounts.profileImage, entity.profileImage)
            set(Accounts.websiteUrl, entity.websiteUrl)
            set(Accounts.username, entity.username)
            set(Accounts.about, entity.about)
            set(Accounts.businessName, entity.businessName)
            set(Accounts.boardCount, entity.boardCount)
            set(Accounts.pinCount, entity.pinCount)
            set(Accounts.followerCount, entity.followerCount)
            set(Accounts.followingCount, entity.followingCount)
            set(Accounts.monthlyViews, entity.monthlyViews)
        }
    }

}


