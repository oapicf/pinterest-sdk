/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * 
 * @param display Address display
 * @param purpose Purpose for which the address is used, usually Billing or Businness
 * @param addressId Salesforce id for address
 * @param orderLegalEntity Legal entity for this insertion order
 */
object SSIOAccountAddresss : BaseTable<SSIOAccountAddress>("SSIOAccountAddress") {
    val display = text("display") /* null */ /* Address display */
    val purpose = text("purpose") /* null */ /* Purpose for which the address is used, usually Billing or Businness */
    val addressId = text("address_id") /* null */ /* Salesforce id for address */
    val orderLegalEntity = text("order_legal_entity") /* null */ /* Legal entity for this insertion order */

    /**
     * Create an entity of type SSIOAccountAddress from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = SSIOAccountAddress(
        display = row[display]  /* kotlin.String? */ /* Address display */,
        purpose = row[purpose]  /* kotlin.String? */ /* Purpose for which the address is used, usually Billing or Businness */,
        addressId = row[addressId]  /* kotlin.String? */ /* Salesforce id for address */,
        orderLegalEntity = row[orderLegalEntity]  /* kotlin.String? */ /* Legal entity for this insertion order */
    )

    /**
    * Assign all the columns from the entity of type SSIOAccountAddress to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = SSIOAccountAddress()
    * database.update(SSIOAccountAddresss, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: SSIOAccountAddress) {
        this.apply {
            set(SSIOAccountAddresss.display, entity.display)
            set(SSIOAccountAddresss.purpose, entity.purpose)
            set(SSIOAccountAddresss.addressId, entity.addressId)
            set(SSIOAccountAddresss.orderLegalEntity, entity.orderLegalEntity)
        }
    }

}


