/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * Request object for updating a retail product group.
 * @param catalogType Retail catalog based product group is available only for selected partners at the moment. If you are not eligible, please use feed based one.
 * @param name 
 * @param description 
 * @param filters 
 * @param country 
 * @param locale 
 */
object CatalogsRetailProductGroupUpdateRequests : BaseTable<CatalogsRetailProductGroupUpdateRequest>("CatalogsRetailProductGroupUpdateRequest") {
    val catalogType = text("catalog_type").transform({ CatalogsRetailProductGroupUpdateRequest.CatalogType.valueOf(it ?: "RETAIL") }, { it.value }) /* null */ /* Retail catalog based product group is available only for selected partners at the moment. If you are not eligible, please use feed based one. */

    val name = text("name") /* null */
    val description = text("description") /* null */
    val filters = long("filters") /* null */
    val country = long("country") /* null */
    val locale = long("locale") /* null */

    /**
     * Create an entity of type CatalogsRetailProductGroupUpdateRequest from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = CatalogsRetailProductGroupUpdateRequest(
        catalogType = row[catalogType]  /* kotlin.String? */ /* Retail catalog based product group is available only for selected partners at the moment. If you are not eligible, please use feed based one. */,
        name = row[name]  /* kotlin.String? */,
        description = row[description]  /* kotlin.String? */,
        filters = CatalogsProductGroupFiltersRequests.createEntity(row, withReferences) /* CatalogsProductGroupFiltersRequest? */,
        country = Countrys.createEntity(row, withReferences) /* Country? */,
        locale = CatalogsLocales.createEntity(row, withReferences) /* CatalogsLocale? */
    )

    /**
    * Assign all the columns from the entity of type CatalogsRetailProductGroupUpdateRequest to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = CatalogsRetailProductGroupUpdateRequest()
    * database.update(CatalogsRetailProductGroupUpdateRequests, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: CatalogsRetailProductGroupUpdateRequest) {
        this.apply {
            set(CatalogsRetailProductGroupUpdateRequests.catalogType, entity.catalogType)
            set(CatalogsRetailProductGroupUpdateRequests.name, entity.name)
            set(CatalogsRetailProductGroupUpdateRequests.description, entity.description)
            set(CatalogsRetailProductGroupUpdateRequests.filters, entity.filters)
            set(CatalogsRetailProductGroupUpdateRequests.country, entity.country)
            set(CatalogsRetailProductGroupUpdateRequests.locale, entity.locale)
        }
    }

}


