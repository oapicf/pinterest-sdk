/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * Request body used to delete asset groups
 * @param assetGroupsToDelete List of ids of asset groups to be deleted
 */
object DeleteAssetGroupBodys : BaseTable<DeleteAssetGroupBody>("DeleteAssetGroupBody") {

    /**
     * Create an entity of type DeleteAssetGroupBody from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = DeleteAssetGroupBody(
        assetGroupsToDelete = emptyList() /* kotlin.Array<kotlin.String> */ /* List of ids of asset groups to be deleted */
    )

    /**
    * Assign all the columns from the entity of type DeleteAssetGroupBody to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = DeleteAssetGroupBody()
    * database.update(DeleteAssetGroupBodys, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: DeleteAssetGroupBody) {
        this.apply {
        }
    }

}


object DeleteAssetGroupBodyAssetGroupsToDelete : BaseTable<Pair<kotlin.Long, kotlin.String>>("DeleteAssetGroupBodyAssetGroupsToDelete") {
    val deleteAssetGroupBody = long("deleteAssetGroupBody")
    val assetGroupsToDelete = text("assetGroupsToDelete")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.String> =
        Pair(row[deleteAssetGroupBody] ?: 0, row[assetGroupsToDelete] ?: "")

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.String>) {
        this.apply {
            set(DeleteAssetGroupBodyAssetGroupsToDelete.deleteAssetGroupBody, entity.first)
            set(DeleteAssetGroupBodyAssetGroupsToDelete.assetGroupsToDelete, entity.second)
        }
    }

}

