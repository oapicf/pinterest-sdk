/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * 
 * @param adAccountId Ad account ID.
 * @param id Audience ID.
 * @param name Audience name.
 * @param audienceType <a href=\"/docs/reference/glossary/#Audience Types\">Audience types</a>: ACTALIKE, ENGAGEMENT, CUSTOMER_LIST and VISITOR
 * @param description Audience description.
 * @param rule 
 * @param propertySize Audience size.
 * @param status Audience status. READY, INITIALIZING, TOO_SMALL - Each audience list needs to have at least 100 people with Pinterest accounts before you can start using it.
 * @param type Always \"audience\".
 * @param createdTimestamp Creation time. Unix timestamp in seconds.
 * @param updatedTimestamp Last update time. Unix timestamp in seconds.
 */
object Audiences : BaseTable<Audience>("Audience") {
    val adAccountId = text("ad_account_id") /* null */ /* Ad account ID. */
    val id = text("id") /* null */ /* Audience ID. */
    val name = text("name") /* null */ /* Audience name. */
    val audienceType = text("audience_type") /* null */ /* <a href=\"/docs/reference/glossary/#Audience Types\">Audience types</a>: ACTALIKE, ENGAGEMENT, CUSTOMER_LIST and VISITOR */
    val description = text("description") /* null */ /* Audience description. */
    val rule = long("rule") /* null */
    val propertySize = int("size") /* null */ /* Audience size. */
    val status = text("status") /* null */ /* Audience status. READY, INITIALIZING, TOO_SMALL - Each audience list needs to have at least 100 people with Pinterest accounts before you can start using it. */
    val type = text("type") /* null */ /* Always \"audience\". */
    val createdTimestamp = int("created_timestamp") /* null */ /* Creation time. Unix timestamp in seconds. */
    val updatedTimestamp = int("updated_timestamp") /* null */ /* Last update time. Unix timestamp in seconds. */

    /**
     * Create an entity of type Audience from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = Audience(
        adAccountId = row[adAccountId]  /* kotlin.String? */ /* Ad account ID. */,
        id = row[id]  /* kotlin.String? */ /* Audience ID. */,
        name = row[name]  /* kotlin.String? */ /* Audience name. */,
        audienceType = row[audienceType]  /* kotlin.String? */ /* <a href=\"/docs/reference/glossary/#Audience Types\">Audience types</a>: ACTALIKE, ENGAGEMENT, CUSTOMER_LIST and VISITOR */,
        description = row[description]  /* kotlin.String? */ /* Audience description. */,
        rule = AudienceRules.createEntity(row, withReferences) /* AudienceRule? */,
        propertySize = row[propertySize]  /* kotlin.Int? */ /* Audience size. */,
        status = row[status]  /* kotlin.String? */ /* Audience status. READY, INITIALIZING, TOO_SMALL - Each audience list needs to have at least 100 people with Pinterest accounts before you can start using it. */,
        type = row[type]  /* kotlin.String? */ /* Always \"audience\". */,
        createdTimestamp = row[createdTimestamp]  /* kotlin.Int? */ /* Creation time. Unix timestamp in seconds. */,
        updatedTimestamp = row[updatedTimestamp]  /* kotlin.Int? */ /* Last update time. Unix timestamp in seconds. */
    )

    /**
    * Assign all the columns from the entity of type Audience to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = Audience()
    * database.update(Audiences, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: Audience) {
        this.apply {
            set(Audiences.adAccountId, entity.adAccountId)
            set(Audiences.id, entity.id)
            set(Audiences.name, entity.name)
            set(Audiences.audienceType, entity.audienceType)
            set(Audiences.description, entity.description)
            set(Audiences.rule, entity.rule)
            set(Audiences.propertySize, entity.propertySize)
            set(Audiences.status, entity.status)
            set(Audiences.type, entity.type)
            set(Audiences.createdTimestamp, entity.createdTimestamp)
            set(Audiences.updatedTimestamp, entity.updatedTimestamp)
        }
    }

}


