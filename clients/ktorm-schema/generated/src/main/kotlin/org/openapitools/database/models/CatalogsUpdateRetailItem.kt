/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * An item to be updated
 * @param itemId The catalog item id in the merchant namespace
 * @param operation 
 * @param attributes 
 * @param updateMask The list of product attributes to be updated. Attributes specified in the update mask without a value specified in the body will be deleted from the product item.
 */
object CatalogsUpdateRetailItems : BaseTable<CatalogsUpdateRetailItem>("CatalogsUpdateRetailItem") {
    val itemId = text("item_id") /* The catalog item id in the merchant namespace */
    val operation = text("operation").transform({ CatalogsUpdateRetailItem.Operation.valueOf(it) }, { it.value })
    val attributes = long("attributes")

    /**
     * Create an entity of type CatalogsUpdateRetailItem from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = CatalogsUpdateRetailItem(
        itemId = row[itemId] ?: "" /* kotlin.String */ /* The catalog item id in the merchant namespace */,
        operation = row[operation] ?: CatalogsUpdateRetailItem.Operation.valueOf("") /* kotlin.String */,
        attributes = UpdatableItemAttributess.createEntity(row, withReferences) /* UpdatableItemAttributes */,
        updateMask = emptyList() /* kotlin.Array<UpdateMaskFieldType>? */ /* The list of product attributes to be updated. Attributes specified in the update mask without a value specified in the body will be deleted from the product item. */
    )

    /**
    * Assign all the columns from the entity of type CatalogsUpdateRetailItem to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = CatalogsUpdateRetailItem()
    * database.update(CatalogsUpdateRetailItems, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: CatalogsUpdateRetailItem) {
        this.apply {
            set(CatalogsUpdateRetailItems.itemId, entity.itemId)
            set(CatalogsUpdateRetailItems.operation, entity.operation)
            set(CatalogsUpdateRetailItems.attributes, entity.attributes)
        }
    }

}


object CatalogsUpdateRetailItemUpdateMaskFieldType : BaseTable<Pair<kotlin.Long, kotlin.Long>>("CatalogsUpdateRetailItemUpdateMaskFieldType") {
    val catalogsUpdateRetailItem = long("catalogsUpdateRetailItem")
    val updateMaskFieldType = long("updateMaskFieldType")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[catalogsUpdateRetailItem] ?: 0, row[updateMaskFieldType] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(CatalogsUpdateRetailItemUpdateMaskFieldType.catalogsUpdateRetailItem, entity.first)
            set(CatalogsUpdateRetailItemUpdateMaskFieldType.updateMaskFieldType, entity.second)
        }
    }

}

