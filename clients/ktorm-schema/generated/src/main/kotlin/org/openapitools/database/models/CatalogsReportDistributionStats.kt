/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * 
 * @param reportType 
 * @param catalogId ID of the catalog entity.
 * @param code The event code that a diagnostics aggregated number references
 * @param codeLabel A human-friendly label for the event code (e.g, 'SPAM')
 * @param message Title message describing the diagnostic issue
 * @param occurrences Number of occurrences of the issue
 * @param ineligibleForAds Indicates if issue makes items ineligible for ads distribution
 * @param ineligibleForOrganic Indicates if issue makes items ineligible for organic distribution
 */
object CatalogsReportDistributionStatss : BaseTable<CatalogsReportDistributionStats>("CatalogsReportDistributionStats") {
    val reportType = text("report_type").transform({ CatalogsReportDistributionStats.ReportType.valueOf(it ?: "DISTRIBUTION_ISSUES") }, { it.value }) /* null */

    val catalogId = text("catalog_id") /* null */ /* ID of the catalog entity. */
    val code = int("code") /* null */ /* The event code that a diagnostics aggregated number references */
    val codeLabel = text("code_label") /* null */ /* A human-friendly label for the event code (e.g, 'SPAM') */
    val message = text("message") /* null */ /* Title message describing the diagnostic issue */
    val occurrences = int("occurrences") /* null */ /* Number of occurrences of the issue */
    val ineligibleForAds = boolean("ineligible_for_ads") /* null */ /* Indicates if issue makes items ineligible for ads distribution */
    val ineligibleForOrganic = boolean("ineligible_for_organic") /* null */ /* Indicates if issue makes items ineligible for organic distribution */

    /**
     * Create an entity of type CatalogsReportDistributionStats from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = CatalogsReportDistributionStats(
        reportType = row[reportType]  /* kotlin.String? */,
        catalogId = row[catalogId]  /* kotlin.String? */ /* ID of the catalog entity. */,
        code = row[code]  /* kotlin.Int? */ /* The event code that a diagnostics aggregated number references */,
        codeLabel = row[codeLabel]  /* kotlin.String? */ /* A human-friendly label for the event code (e.g, 'SPAM') */,
        message = row[message]  /* kotlin.String? */ /* Title message describing the diagnostic issue */,
        occurrences = row[occurrences]  /* kotlin.Int? */ /* Number of occurrences of the issue */,
        ineligibleForAds = row[ineligibleForAds]  /* kotlin.Boolean? */ /* Indicates if issue makes items ineligible for ads distribution */,
        ineligibleForOrganic = row[ineligibleForOrganic]  /* kotlin.Boolean? */ /* Indicates if issue makes items ineligible for organic distribution */
    )

    /**
    * Assign all the columns from the entity of type CatalogsReportDistributionStats to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = CatalogsReportDistributionStats()
    * database.update(CatalogsReportDistributionStatss, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: CatalogsReportDistributionStats) {
        this.apply {
            set(CatalogsReportDistributionStatss.reportType, entity.reportType)
            set(CatalogsReportDistributionStatss.catalogId, entity.catalogId)
            set(CatalogsReportDistributionStatss.code, entity.code)
            set(CatalogsReportDistributionStatss.codeLabel, entity.codeLabel)
            set(CatalogsReportDistributionStatss.message, entity.message)
            set(CatalogsReportDistributionStatss.occurrences, entity.occurrences)
            set(CatalogsReportDistributionStatss.ineligibleForAds, entity.ineligibleForAds)
            set(CatalogsReportDistributionStatss.ineligibleForOrganic, entity.ineligibleForOrganic)
        }
    }

}


