/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * Integration record
 * @param id 
 * @param externalBusinessId 
 * @param connectedMerchantId 
 * @param connectedUserId 
 * @param connectedAdvertiserId 
 * @param connectedLbaId 
 * @param connectedTagId 
 * @param partnerAccessToken 
 * @param partnerRefreshToken 
 * @param partnerPrimaryEmail 
 * @param partnerAccessTokenExpiry 
 * @param partnerRefreshTokenExpiry 
 * @param scopes 
 * @param partnerMetadata 
 * @param additionalId1 
 * @param createdTime 
 * @param updatedTime 
 */
object IntegrationRecords : BaseTable<IntegrationRecord>("IntegrationRecord") {
    val id = text("id") /* null */
    val externalBusinessId = text("external_business_id") /* null */
    val connectedMerchantId = text("connected_merchant_id") /* null */
    val connectedUserId = text("connected_user_id") /* null */
    val connectedAdvertiserId = text("connected_advertiser_id") /* null */
    val connectedLbaId = text("connected_lba_id") /* null */
    val connectedTagId = text("connected_tag_id") /* null */
    val partnerAccessToken = text("partner_access_token") /* null */
    val partnerRefreshToken = text("partner_refresh_token") /* null */
    val partnerPrimaryEmail = text("partner_primary_email") /* null */
    val partnerAccessTokenExpiry = int("partner_access_token_expiry") /* null */
    val partnerRefreshTokenExpiry = int("partner_refresh_token_expiry") /* null */
    val scopes = text("scopes") /* null */
    val partnerMetadata = text("partner_metadata") /* null */
    val additionalId1 = text("additional_id_1") /* null */
    val createdTime = int("created_time") /* null */
    val updatedTime = int("updated_time") /* null */

    /**
     * Create an entity of type IntegrationRecord from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = IntegrationRecord(
        id = row[id]  /* kotlin.String? */,
        externalBusinessId = row[externalBusinessId]  /* kotlin.String? */,
        connectedMerchantId = row[connectedMerchantId]  /* kotlin.String? */,
        connectedUserId = row[connectedUserId]  /* kotlin.String? */,
        connectedAdvertiserId = row[connectedAdvertiserId]  /* kotlin.String? */,
        connectedLbaId = row[connectedLbaId]  /* kotlin.String? */,
        connectedTagId = row[connectedTagId]  /* kotlin.String? */,
        partnerAccessToken = row[partnerAccessToken]  /* kotlin.String? */,
        partnerRefreshToken = row[partnerRefreshToken]  /* kotlin.String? */,
        partnerPrimaryEmail = row[partnerPrimaryEmail]  /* kotlin.String? */,
        partnerAccessTokenExpiry = row[partnerAccessTokenExpiry]  /* kotlin.Int? */,
        partnerRefreshTokenExpiry = row[partnerRefreshTokenExpiry]  /* kotlin.Int? */,
        scopes = row[scopes]  /* kotlin.String? */,
        partnerMetadata = row[partnerMetadata]  /* kotlin.String? */,
        additionalId1 = row[additionalId1]  /* kotlin.String? */,
        createdTime = row[createdTime]  /* kotlin.Int? */,
        updatedTime = row[updatedTime]  /* kotlin.Int? */
    )

    /**
    * Assign all the columns from the entity of type IntegrationRecord to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = IntegrationRecord()
    * database.update(IntegrationRecords, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: IntegrationRecord) {
        this.apply {
            set(IntegrationRecords.id, entity.id)
            set(IntegrationRecords.externalBusinessId, entity.externalBusinessId)
            set(IntegrationRecords.connectedMerchantId, entity.connectedMerchantId)
            set(IntegrationRecords.connectedUserId, entity.connectedUserId)
            set(IntegrationRecords.connectedAdvertiserId, entity.connectedAdvertiserId)
            set(IntegrationRecords.connectedLbaId, entity.connectedLbaId)
            set(IntegrationRecords.connectedTagId, entity.connectedTagId)
            set(IntegrationRecords.partnerAccessToken, entity.partnerAccessToken)
            set(IntegrationRecords.partnerRefreshToken, entity.partnerRefreshToken)
            set(IntegrationRecords.partnerPrimaryEmail, entity.partnerPrimaryEmail)
            set(IntegrationRecords.partnerAccessTokenExpiry, entity.partnerAccessTokenExpiry)
            set(IntegrationRecords.partnerRefreshTokenExpiry, entity.partnerRefreshTokenExpiry)
            set(IntegrationRecords.scopes, entity.scopes)
            set(IntegrationRecords.partnerMetadata, entity.partnerMetadata)
            set(IntegrationRecords.additionalId1, entity.additionalId1)
            set(IntegrationRecords.createdTime, entity.createdTime)
            set(IntegrationRecords.updatedTime, entity.updatedTime)
        }
    }

}


