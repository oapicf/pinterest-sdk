/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * 
 * @param LINE_LEVEL_INTERNAL_ERROR We experienced a technical difficulty and were unable to ingest this some items. The next ingestion will happen in 24 hours.
 * @param LARGE_PRODUCT_COUNT_DECREASE The product count has decreased by more than 99% compared to the last successful ingestion.
 * @param ACCOUNT_FLAGGED We detected an issue with your account and are not currently ingesting your items. Please review our policies at policy.pinterest.com/community-guidelines#section-spam or contact us at help.pinterest.com/contact for more information.
 * @param IMAGE_LEVEL_INTERNAL_ERROR We experienced a technical difficulty and were unable to download some images. The next download attempt will happen in 24 hours.
 * @param IMAGE_FILE_NOT_ACCESSIBLE Image files are unreadable. Please upload new files to continue.
 * @param IMAGE_MALFORMED_URL Image files are unreadable. Please check your link and upload new files to continue.
 * @param IMAGE_FILE_NOT_FOUND Image files are unreadable. Please upload new files to continue.
 * @param IMAGE_INVALID_FILE Image files are unreadable. Please upload new files to continue.
 */
object CatalogsFeedIngestionErrorss : BaseTable<CatalogsFeedIngestionErrors>("CatalogsFeedIngestionErrors") {
    val LINE_LEVEL_INTERNAL_ERROR = int("LINE_LEVEL_INTERNAL_ERROR") /* null */ /* We experienced a technical difficulty and were unable to ingest this some items. The next ingestion will happen in 24 hours. */
    val LARGE_PRODUCT_COUNT_DECREASE = int("LARGE_PRODUCT_COUNT_DECREASE").transform({ CatalogsFeedIngestionErrors.LARGEPRODUCTCOUNTDECREASE.valueOf(it ?: 1) }, { it.value }) /* null */ /* The product count has decreased by more than 99% compared to the last successful ingestion. */

    val ACCOUNT_FLAGGED = int("ACCOUNT_FLAGGED") /* null */ /* We detected an issue with your account and are not currently ingesting your items. Please review our policies at policy.pinterest.com/community-guidelines#section-spam or contact us at help.pinterest.com/contact for more information. */
    val IMAGE_LEVEL_INTERNAL_ERROR = int("IMAGE_LEVEL_INTERNAL_ERROR") /* null */ /* We experienced a technical difficulty and were unable to download some images. The next download attempt will happen in 24 hours. */
    val IMAGE_FILE_NOT_ACCESSIBLE = int("IMAGE_FILE_NOT_ACCESSIBLE") /* null */ /* Image files are unreadable. Please upload new files to continue. */
    val IMAGE_MALFORMED_URL = int("IMAGE_MALFORMED_URL") /* null */ /* Image files are unreadable. Please check your link and upload new files to continue. */
    val IMAGE_FILE_NOT_FOUND = int("IMAGE_FILE_NOT_FOUND") /* null */ /* Image files are unreadable. Please upload new files to continue. */
    val IMAGE_INVALID_FILE = int("IMAGE_INVALID_FILE") /* null */ /* Image files are unreadable. Please upload new files to continue. */

    /**
     * Create an entity of type CatalogsFeedIngestionErrors from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = CatalogsFeedIngestionErrors(
        LINE_LEVEL_INTERNAL_ERROR = row[LINE_LEVEL_INTERNAL_ERROR]  /* kotlin.Int? */ /* We experienced a technical difficulty and were unable to ingest this some items. The next ingestion will happen in 24 hours. */,
        LARGE_PRODUCT_COUNT_DECREASE = row[LARGE_PRODUCT_COUNT_DECREASE]  /* kotlin.Int? */ /* The product count has decreased by more than 99% compared to the last successful ingestion. */,
        ACCOUNT_FLAGGED = row[ACCOUNT_FLAGGED]  /* kotlin.Int? */ /* We detected an issue with your account and are not currently ingesting your items. Please review our policies at policy.pinterest.com/community-guidelines#section-spam or contact us at help.pinterest.com/contact for more information. */,
        IMAGE_LEVEL_INTERNAL_ERROR = row[IMAGE_LEVEL_INTERNAL_ERROR]  /* kotlin.Int? */ /* We experienced a technical difficulty and were unable to download some images. The next download attempt will happen in 24 hours. */,
        IMAGE_FILE_NOT_ACCESSIBLE = row[IMAGE_FILE_NOT_ACCESSIBLE]  /* kotlin.Int? */ /* Image files are unreadable. Please upload new files to continue. */,
        IMAGE_MALFORMED_URL = row[IMAGE_MALFORMED_URL]  /* kotlin.Int? */ /* Image files are unreadable. Please check your link and upload new files to continue. */,
        IMAGE_FILE_NOT_FOUND = row[IMAGE_FILE_NOT_FOUND]  /* kotlin.Int? */ /* Image files are unreadable. Please upload new files to continue. */,
        IMAGE_INVALID_FILE = row[IMAGE_INVALID_FILE]  /* kotlin.Int? */ /* Image files are unreadable. Please upload new files to continue. */
    )

    /**
    * Assign all the columns from the entity of type CatalogsFeedIngestionErrors to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = CatalogsFeedIngestionErrors()
    * database.update(CatalogsFeedIngestionErrorss, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: CatalogsFeedIngestionErrors) {
        this.apply {
            set(CatalogsFeedIngestionErrorss.LINE_LEVEL_INTERNAL_ERROR, entity.LINE_LEVEL_INTERNAL_ERROR)
            set(CatalogsFeedIngestionErrorss.LARGE_PRODUCT_COUNT_DECREASE, entity.LARGE_PRODUCT_COUNT_DECREASE)
            set(CatalogsFeedIngestionErrorss.ACCOUNT_FLAGGED, entity.ACCOUNT_FLAGGED)
            set(CatalogsFeedIngestionErrorss.IMAGE_LEVEL_INTERNAL_ERROR, entity.IMAGE_LEVEL_INTERNAL_ERROR)
            set(CatalogsFeedIngestionErrorss.IMAGE_FILE_NOT_ACCESSIBLE, entity.IMAGE_FILE_NOT_ACCESSIBLE)
            set(CatalogsFeedIngestionErrorss.IMAGE_MALFORMED_URL, entity.IMAGE_MALFORMED_URL)
            set(CatalogsFeedIngestionErrorss.IMAGE_FILE_NOT_FOUND, entity.IMAGE_FILE_NOT_FOUND)
            set(CatalogsFeedIngestionErrorss.IMAGE_INVALID_FILE, entity.IMAGE_INVALID_FILE)
        }
    }

}


