/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * 
 * @param records Records list. Can be any combination of emails, MAIDs, or IDFAs. Emails must be lowercase and can be plain text or hashed using SHA1, SHA256, or MD5. MAIDs and IDFAs must be hashed with SHA1, SHA256, or MD5.
 * @param operationType 
 * @param exceptions 
 */
object CustomerListUpdateRequests : BaseTable<CustomerListUpdateRequest>("CustomerListUpdateRequest") {
    val records = text("records") /* Records list. Can be any combination of emails, MAIDs, or IDFAs. Emails must be lowercase and can be plain text or hashed using SHA1, SHA256, or MD5. MAIDs and IDFAs must be hashed with SHA1, SHA256, or MD5. */
    val operationType = long("operation_type")
    val exceptions = long("exceptions") /* null */

    /**
     * Create an entity of type CustomerListUpdateRequest from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = CustomerListUpdateRequest(
        records = row[records] ?: "" /* kotlin.String */ /* Records list. Can be any combination of emails, MAIDs, or IDFAs. Emails must be lowercase and can be plain text or hashed using SHA1, SHA256, or MD5. MAIDs and IDFAs must be hashed with SHA1, SHA256, or MD5. */,
        operationType = UserListOperationTypes.createEntity(row, withReferences) /* UserListOperationType */,
        exceptions = Exceptions.createEntity(row, withReferences) /* Exception? */
    )

    /**
    * Assign all the columns from the entity of type CustomerListUpdateRequest to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = CustomerListUpdateRequest()
    * database.update(CustomerListUpdateRequests, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: CustomerListUpdateRequest) {
        this.apply {
            set(CustomerListUpdateRequests.records, entity.records)
            set(CustomerListUpdateRequests.operationType, entity.operationType)
            set(CustomerListUpdateRequests.exceptions, entity.exceptions)
        }
    }

}


