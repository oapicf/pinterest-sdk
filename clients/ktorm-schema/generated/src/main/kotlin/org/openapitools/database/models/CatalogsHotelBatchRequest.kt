/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * Request object to update catalogs hotel items
 * @param catalogType 
 * @param country 
 * @param language 
 * @param items Array with catalogs item operations
 * @param catalogId Catalog id pertaining to the hotel item. If not provided, default to oldest hotel catalog
 */
object CatalogsHotelBatchRequests : BaseTable<CatalogsHotelBatchRequest>("CatalogsHotelBatchRequest") {
    val catalogType = text("catalog_type").transform({ CatalogsHotelBatchRequest.CatalogType.valueOf(it) }, { it.value })
    val country = long("country")
    val language = long("language")
    val catalogId = text("catalog_id") /* null */ /* Catalog id pertaining to the hotel item. If not provided, default to oldest hotel catalog */

    /**
     * Create an entity of type CatalogsHotelBatchRequest from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = CatalogsHotelBatchRequest(
        catalogType = row[catalogType] ?: CatalogsHotelBatchRequest.CatalogType.valueOf("") /* kotlin.String */,
        country = Countrys.createEntity(row, withReferences) /* Country */,
        language = CatalogsItemsRequestLanguages.createEntity(row, withReferences) /* CatalogsItemsRequestLanguage */,
        items = emptyList() /* kotlin.Array<CatalogsHotelBatchItem> */ /* Array with catalogs item operations */,
        catalogId = row[catalogId]  /* kotlin.String? */ /* Catalog id pertaining to the hotel item. If not provided, default to oldest hotel catalog */
    )

    /**
    * Assign all the columns from the entity of type CatalogsHotelBatchRequest to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = CatalogsHotelBatchRequest()
    * database.update(CatalogsHotelBatchRequests, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: CatalogsHotelBatchRequest) {
        this.apply {
            set(CatalogsHotelBatchRequests.catalogType, entity.catalogType)
            set(CatalogsHotelBatchRequests.country, entity.country)
            set(CatalogsHotelBatchRequests.language, entity.language)
            set(CatalogsHotelBatchRequests.catalogId, entity.catalogId)
        }
    }

}


object CatalogsHotelBatchRequestCatalogsHotelBatchItem : BaseTable<Pair<kotlin.Long, kotlin.Long>>("CatalogsHotelBatchRequestCatalogsHotelBatchItem") {
    val catalogsHotelBatchRequest = long("catalogsHotelBatchRequest")
    val catalogsHotelBatchItem = long("catalogsHotelBatchItem")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[catalogsHotelBatchRequest] ?: 0, row[catalogsHotelBatchItem] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(CatalogsHotelBatchRequestCatalogsHotelBatchItem.catalogsHotelBatchRequest, entity.first)
            set(CatalogsHotelBatchRequestCatalogsHotelBatchItem.catalogsHotelBatchItem, entity.second)
        }
    }

}

