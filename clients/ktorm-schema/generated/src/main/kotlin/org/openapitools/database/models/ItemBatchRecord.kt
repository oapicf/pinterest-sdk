/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * Object describing an item batch record
 * @param itemId The catalog item id in the merchant namespace
 * @param attributes 
 * @param updateMask The list of product attributes to be updated. Attributes specified in the update mask without a value specified in the body will be deleted from the product item.
 */
object ItemBatchRecords : BaseTable<ItemBatchRecord>("ItemBatchRecord") {
    val itemId = text("item_id") /* null */ /* The catalog item id in the merchant namespace */
    val attributes = long("attributes") /* null */

    /**
     * Create an entity of type ItemBatchRecord from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = ItemBatchRecord(
        itemId = row[itemId]  /* kotlin.String? */ /* The catalog item id in the merchant namespace */,
        attributes = ItemAttributesRequests.createEntity(row, withReferences) /* ItemAttributesRequest? */,
        updateMask = emptyList() /* kotlin.Array<UpdateMaskFieldType>? */ /* The list of product attributes to be updated. Attributes specified in the update mask without a value specified in the body will be deleted from the product item. */
    )

    /**
    * Assign all the columns from the entity of type ItemBatchRecord to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = ItemBatchRecord()
    * database.update(ItemBatchRecords, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: ItemBatchRecord) {
        this.apply {
            set(ItemBatchRecords.itemId, entity.itemId)
            set(ItemBatchRecords.attributes, entity.attributes)
        }
    }

}


object ItemBatchRecordUpdateMaskFieldType : BaseTable<Pair<kotlin.Long, kotlin.Long>>("ItemBatchRecordUpdateMaskFieldType") {
    val itemBatchRecord = long("itemBatchRecord")
    val updateMaskFieldType = long("updateMaskFieldType")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[itemBatchRecord] ?: 0, row[updateMaskFieldType] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(ItemBatchRecordUpdateMaskFieldType.itemBatchRecord, entity.first)
            set(ItemBatchRecordUpdateMaskFieldType.updateMaskFieldType, entity.second)
        }
    }

}

