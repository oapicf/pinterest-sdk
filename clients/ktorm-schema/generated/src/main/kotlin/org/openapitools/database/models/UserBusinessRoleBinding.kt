/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * 
 * @param assetsSummary 
 * @param businessRoles The access level a user has on the business. This can be EMPLOYEE, BIZ_ADMIN, or PARTNER.
 * @param createdByBusiness Metadata for the business that created the business relationship.
 * @param createdByUser Metadata for the user that created the business relationship.
 * @param createdTime The time the business relationship was created. Returned in milliseconds.
 * @param id Unique identifier of the business member/business partner/employer.
 * @param isSharedPartner This field is only relevant when business_role=\"PARTNER\". <br>If is_shared_partner=FALSE, the partner can access your business assets. If assets_summary is not empty, the assets listed are your business assets the partner has access to. <br>If is_shared_partner=TRUE, you can access the partner's business asset. If assets_summary is not empty, the assets listed are the partner's business assets you have access to.
 * @param user Metadata for the business member/business partner/employer.
 */
object UserBusinessRoleBindings : BaseTable<UserBusinessRoleBinding>("UserBusinessRoleBinding") {
    val assetsSummary = long("assets_summary") /* null */
    val createdByBusiness = long("created_by_business") /* null */ /* Metadata for the business that created the business relationship. */
    val createdByUser = long("created_by_user") /* null */ /* Metadata for the user that created the business relationship. */
    val createdTime = int("created_time") /* null */ /* The time the business relationship was created. Returned in milliseconds. */
    val id = text("id") /* null */ /* Unique identifier of the business member/business partner/employer. */
    val isSharedPartner = boolean("is_shared_partner") /* null */ /* This field is only relevant when business_role=\"PARTNER\". <br>If is_shared_partner=FALSE, the partner can access your business assets. If assets_summary is not empty, the assets listed are your business assets the partner has access to. <br>If is_shared_partner=TRUE, you can access the partner's business asset. If assets_summary is not empty, the assets listed are the partner's business assets you have access to. */
    val user = long("user") /* null */ /* Metadata for the business member/business partner/employer. */

    /**
     * Create an entity of type UserBusinessRoleBinding from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = UserBusinessRoleBinding(
        assetsSummary = BusinessMemberAssetsSummarys.createEntity(row, withReferences) /* BusinessMemberAssetsSummary? */,
        businessRoles = emptyList() /* kotlin.Array<kotlin.String>? */ /* The access level a user has on the business. This can be EMPLOYEE, BIZ_ADMIN, or PARTNER. */,
        createdByBusiness = BusinessAccessUserSummarys.createEntity(row, withReferences) /* BusinessAccessUserSummary? */ /* Metadata for the business that created the business relationship. */,
        createdByUser = BusinessAccessUserSummarys.createEntity(row, withReferences) /* BusinessAccessUserSummary? */ /* Metadata for the user that created the business relationship. */,
        createdTime = row[createdTime]  /* kotlin.Int? */ /* The time the business relationship was created. Returned in milliseconds. */,
        id = row[id]  /* kotlin.String? */ /* Unique identifier of the business member/business partner/employer. */,
        isSharedPartner = row[isSharedPartner]  /* kotlin.Boolean? */ /* This field is only relevant when business_role=\"PARTNER\". <br>If is_shared_partner=FALSE, the partner can access your business assets. If assets_summary is not empty, the assets listed are your business assets the partner has access to. <br>If is_shared_partner=TRUE, you can access the partner's business asset. If assets_summary is not empty, the assets listed are the partner's business assets you have access to. */,
        user = BusinessAccessUserSummarys.createEntity(row, withReferences) /* BusinessAccessUserSummary? */ /* Metadata for the business member/business partner/employer. */
    )

    /**
    * Assign all the columns from the entity of type UserBusinessRoleBinding to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = UserBusinessRoleBinding()
    * database.update(UserBusinessRoleBindings, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: UserBusinessRoleBinding) {
        this.apply {
            set(UserBusinessRoleBindings.assetsSummary, entity.assetsSummary)
            set(UserBusinessRoleBindings.createdByBusiness, entity.createdByBusiness)
            set(UserBusinessRoleBindings.createdByUser, entity.createdByUser)
            set(UserBusinessRoleBindings.createdTime, entity.createdTime)
            set(UserBusinessRoleBindings.id, entity.id)
            set(UserBusinessRoleBindings.isSharedPartner, entity.isSharedPartner)
            set(UserBusinessRoleBindings.user, entity.user)
        }
    }

}


object UserBusinessRoleBindingBusinessRoles : BaseTable<Pair<kotlin.Long, kotlin.String>>("UserBusinessRoleBindingBusinessRoles") {
    val userBusinessRoleBinding = long("userBusinessRoleBinding")
    val businessRoles = text("businessRoles")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.String> =
        Pair(row[userBusinessRoleBinding] ?: 0, row[businessRoles] ?: "")

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.String>) {
        this.apply {
            set(UserBusinessRoleBindingBusinessRoles.userBusinessRoleBinding, entity.first)
            set(UserBusinessRoleBindingBusinessRoles.businessRoles, entity.second)
        }
    }

}

