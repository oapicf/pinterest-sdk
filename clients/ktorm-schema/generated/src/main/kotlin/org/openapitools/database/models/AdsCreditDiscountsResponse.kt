/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * 
 * @param active True if the offer code is currently active.
 * @param advertiserId Advertiser ID the offer was applied to.
 * @param discountType The type of discount of this credit
 * @param discountInMicroCurrency The discount applied in the offer’s currency value.
 * @param discountCurrency Currency value for the discount.
 * @param title Human readable title of the offer code.
 * @param remainingDiscountInMicroCurrency The credits left to spend.
 */
object AdsCreditDiscountsResponses : BaseTable<AdsCreditDiscountsResponse>("AdsCreditDiscountsResponse") {
    val active = boolean("active") /* null */ /* True if the offer code is currently active. */
    val advertiserId = text("advertiser_id") /* null */ /* Advertiser ID the offer was applied to. */
    val discountType = text("discountType").transform({ AdsCreditDiscountsResponse.DiscountType.valueOf(it ?: "COUPON") }, { it.value }) /* null */ /* The type of discount of this credit */

    val discountInMicroCurrency = decimal("discountInMicroCurrency") /* null */ /* The discount applied in the offer’s currency value. */
    val discountCurrency = text("discountCurrency") /* null */ /* Currency value for the discount. */
    val title = text("title") /* null */ /* Human readable title of the offer code. */
    val remainingDiscountInMicroCurrency = decimal("remainingDiscountInMicroCurrency") /* null */ /* The credits left to spend. */

    /**
     * Create an entity of type AdsCreditDiscountsResponse from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = AdsCreditDiscountsResponse(
        active = row[active]  /* kotlin.Boolean? */ /* True if the offer code is currently active. */,
        advertiserId = row[advertiserId]  /* kotlin.String? */ /* Advertiser ID the offer was applied to. */,
        discountType = row[discountType]  /* kotlin.String? */ /* The type of discount of this credit */,
        discountInMicroCurrency = row[discountInMicroCurrency]  /* java.math.BigDecimal? */ /* The discount applied in the offer’s currency value. */,
        discountCurrency = row[discountCurrency]  /* kotlin.String? */ /* Currency value for the discount. */,
        title = row[title]  /* kotlin.String? */ /* Human readable title of the offer code. */,
        remainingDiscountInMicroCurrency = row[remainingDiscountInMicroCurrency]  /* java.math.BigDecimal? */ /* The credits left to spend. */
    )

    /**
    * Assign all the columns from the entity of type AdsCreditDiscountsResponse to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = AdsCreditDiscountsResponse()
    * database.update(AdsCreditDiscountsResponses, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: AdsCreditDiscountsResponse) {
        this.apply {
            set(AdsCreditDiscountsResponses.active, entity.active)
            set(AdsCreditDiscountsResponses.advertiserId, entity.advertiserId)
            set(AdsCreditDiscountsResponses.discountType, entity.discountType)
            set(AdsCreditDiscountsResponses.discountInMicroCurrency, entity.discountInMicroCurrency)
            set(AdsCreditDiscountsResponses.discountCurrency, entity.discountCurrency)
            set(AdsCreditDiscountsResponses.title, entity.title)
            set(AdsCreditDiscountsResponses.remainingDiscountInMicroCurrency, entity.remainingDiscountInMicroCurrency)
        }
    }

}


