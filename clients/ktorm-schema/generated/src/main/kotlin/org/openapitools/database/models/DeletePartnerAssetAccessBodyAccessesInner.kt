/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * 
 * @param partnerId Unique identifier of a business partner to update asset access to.
 * @param assetId Unique identifier of the business asset.
 * @param partnerType If partner_type=INTERNAL, the deleted asset access is for the access the partner has to your business asset.<br> If partner_type=EXTERNAL, the deleted asset access is for the access you have to the partner's business asset.
 */
object DeletePartnerAssetAccessBodyAccessesInners : BaseTable<DeletePartnerAssetAccessBodyAccessesInner>("DeletePartnerAssetAccessBody_accesses_inner") {
    val partnerId = text("partner_id") /* Unique identifier of a business partner to update asset access to. */
    val assetId = text("asset_id") /* Unique identifier of the business asset. */
    val partnerType = text("partner_type").transform({ DeletePartnerAssetAccessBodyAccessesInner.PartnerType.valueOf(it ?: "INTERNAL") }, { it.value }) /* null */ /* If partner_type=INTERNAL, the deleted asset access is for the access the partner has to your business asset.<br> If partner_type=EXTERNAL, the deleted asset access is for the access you have to the partner's business asset. */


    /**
     * Create an entity of type DeletePartnerAssetAccessBodyAccessesInner from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = DeletePartnerAssetAccessBodyAccessesInner(
        partnerId = row[partnerId] ?: "" /* kotlin.String */ /* Unique identifier of a business partner to update asset access to. */,
        assetId = row[assetId] ?: "" /* kotlin.String */ /* Unique identifier of the business asset. */,
        partnerType = row[partnerType] ?: PartnerType.INTERNAL /* kotlin.String? */ /* If partner_type=INTERNAL, the deleted asset access is for the access the partner has to your business asset.<br> If partner_type=EXTERNAL, the deleted asset access is for the access you have to the partner's business asset. */
    )

    /**
    * Assign all the columns from the entity of type DeletePartnerAssetAccessBodyAccessesInner to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = DeletePartnerAssetAccessBodyAccessesInner()
    * database.update(DeletePartnerAssetAccessBodyAccessesInners, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: DeletePartnerAssetAccessBodyAccessesInner) {
        this.apply {
            set(DeletePartnerAssetAccessBodyAccessesInners.partnerId, entity.partnerId)
            set(DeletePartnerAssetAccessBodyAccessesInners.assetId, entity.assetId)
            set(DeletePartnerAssetAccessBodyAccessesInners.partnerType, entity.partnerType)
        }
    }

}


