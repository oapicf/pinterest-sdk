/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * Pin
 * @param id 
 * @param createdAt 
 * @param link 
 * @param title 
 * @param description 
 * @param dominantColor Dominant pin color. Hex number, e.g. \\\"#6E7874\\\".
 * @param altText 
 * @param boardId The board to which this Pin belongs.
 * @param boardSectionId The board section to which this Pin belongs.
 * @param boardOwner 
 * @param media 
 * @param mediaSource 
 * @param parentPinId The source pin id if this pin was saved from another pin. <a href=\"https://help.pinterest.com/article/save-pins-on-pinterest\">Learn more</a>.
 * @param note Private note for this Pin. <a href=\"https://help.pinterest.com/en/article/add-notes-to-your-pins\">Learn more</a>.
 */
object PinCreates : BaseTable<PinCreate>("PinCreate") {
    val id = text("id") /* null */
    val createdAt = datetime("created_at") /* null */
    val link = text("link") /* null */
    val title = text("title") /* null */
    val description = text("description") /* null */
    val dominantColor = text("dominant_color") /* null */ /* Dominant pin color. Hex number, e.g. \\\"#6E7874\\\". */
    val altText = text("alt_text") /* null */
    val boardId = text("board_id") /* null */ /* The board to which this Pin belongs. */
    val boardSectionId = text("board_section_id") /* null */ /* The board section to which this Pin belongs. */
    val boardOwner = long("board_owner") /* null */
    val media = long("media") /* null */
    val mediaSource = long("media_source") /* null */
    val parentPinId = text("parent_pin_id") /* null */ /* The source pin id if this pin was saved from another pin. <a href=\"https://help.pinterest.com/article/save-pins-on-pinterest\">Learn more</a>. */
    val note = text("note") /* null */ /* Private note for this Pin. <a href=\"https://help.pinterest.com/en/article/add-notes-to-your-pins\">Learn more</a>. */

    /**
     * Create an entity of type PinCreate from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = PinCreate(
        id = row[id]  /* kotlin.String? */,
        createdAt = row[createdAt]  /* java.time.LocalDateTime? */,
        link = row[link]  /* kotlin.String? */,
        title = row[title]  /* kotlin.String? */,
        description = row[description]  /* kotlin.String? */,
        dominantColor = row[dominantColor]  /* kotlin.String? */ /* Dominant pin color. Hex number, e.g. \\\"#6E7874\\\". */,
        altText = row[altText]  /* kotlin.String? */,
        boardId = row[boardId]  /* kotlin.String? */ /* The board to which this Pin belongs. */,
        boardSectionId = row[boardSectionId]  /* kotlin.String? */ /* The board section to which this Pin belongs. */,
        boardOwner = BoardOwners.createEntity(row, withReferences) /* BoardOwner? */,
        media = PinMedias.createEntity(row, withReferences) /* PinMedia? */,
        mediaSource = PinMediaSources.createEntity(row, withReferences) /* PinMediaSource? */,
        parentPinId = row[parentPinId]  /* kotlin.String? */ /* The source pin id if this pin was saved from another pin. <a href=\"https://help.pinterest.com/article/save-pins-on-pinterest\">Learn more</a>. */,
        note = row[note]  /* kotlin.String? */ /* Private note for this Pin. <a href=\"https://help.pinterest.com/en/article/add-notes-to-your-pins\">Learn more</a>. */
    )

    /**
    * Assign all the columns from the entity of type PinCreate to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = PinCreate()
    * database.update(PinCreates, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: PinCreate) {
        this.apply {
            set(PinCreates.id, entity.id)
            set(PinCreates.createdAt, entity.createdAt)
            set(PinCreates.link, entity.link)
            set(PinCreates.title, entity.title)
            set(PinCreates.description, entity.description)
            set(PinCreates.dominantColor, entity.dominantColor)
            set(PinCreates.altText, entity.altText)
            set(PinCreates.boardId, entity.boardId)
            set(PinCreates.boardSectionId, entity.boardSectionId)
            set(PinCreates.boardOwner, entity.boardOwner)
            set(PinCreates.media, entity.media)
            set(PinCreates.mediaSource, entity.mediaSource)
            set(PinCreates.parentPinId, entity.parentPinId)
            set(PinCreates.note, entity.note)
        }
    }

}


