/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * Object describing an item processing record
 * @param creativeAssetsId The catalog creative assets id in the merchant namespace
 * @param errors Array with the validation errors for the item processing record. A non empty errors list causes the item processing to fail.
 * @param warnings Array with the validation warnings for the item processing record
 * @param status 
 */
object CreativeAssetsProcessingRecords : BaseTable<CreativeAssetsProcessingRecord>("CreativeAssetsProcessingRecord") {
    val creativeAssetsId = text("creative_assets_id") /* null */ /* The catalog creative assets id in the merchant namespace */
    val status = long("status") /* null */

    /**
     * Create an entity of type CreativeAssetsProcessingRecord from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = CreativeAssetsProcessingRecord(
        creativeAssetsId = row[creativeAssetsId]  /* kotlin.String? */ /* The catalog creative assets id in the merchant namespace */,
        errors = emptyList() /* kotlin.Array<ItemValidationEvent>? */ /* Array with the validation errors for the item processing record. A non empty errors list causes the item processing to fail. */,
        warnings = emptyList() /* kotlin.Array<ItemValidationEvent>? */ /* Array with the validation warnings for the item processing record */,
        status = ItemProcessingStatuss.createEntity(row, withReferences) /* ItemProcessingStatus? */
    )

    /**
    * Assign all the columns from the entity of type CreativeAssetsProcessingRecord to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = CreativeAssetsProcessingRecord()
    * database.update(CreativeAssetsProcessingRecords, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: CreativeAssetsProcessingRecord) {
        this.apply {
            set(CreativeAssetsProcessingRecords.creativeAssetsId, entity.creativeAssetsId)
            set(CreativeAssetsProcessingRecords.status, entity.status)
        }
    }

}


object CreativeAssetsProcessingRecordItemValidationEvent : BaseTable<Pair<kotlin.Long, kotlin.Long>>("CreativeAssetsProcessingRecordItemValidationEvent") {
    val creativeAssetsProcessingRecord = long("creativeAssetsProcessingRecord")
    val itemValidationEvent = long("itemValidationEvent")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[creativeAssetsProcessingRecord] ?: 0, row[itemValidationEvent] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(CreativeAssetsProcessingRecordItemValidationEvent.creativeAssetsProcessingRecord, entity.first)
            set(CreativeAssetsProcessingRecordItemValidationEvent.itemValidationEvent, entity.second)
        }
    }

}

object CreativeAssetsProcessingRecordItemValidationEvent : BaseTable<Pair<kotlin.Long, kotlin.Long>>("CreativeAssetsProcessingRecordItemValidationEvent") {
    val creativeAssetsProcessingRecord = long("creativeAssetsProcessingRecord")
    val itemValidationEvent = long("itemValidationEvent")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[creativeAssetsProcessingRecord] ?: 0, row[itemValidationEvent] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(CreativeAssetsProcessingRecordItemValidationEvent.creativeAssetsProcessingRecord, entity.first)
            set(CreativeAssetsProcessingRecordItemValidationEvent.itemValidationEvent, entity.second)
        }
    }

}

