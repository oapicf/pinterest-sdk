/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * A successful OAuth access token response for the refresh token flow, with an added everlasting refresh token.
 * @param refreshToken 
 * @param refreshTokenExpiresIn 
 * @param refreshTokenExpiresAt 
 */
object OauthAccessTokenResponseEverlastingRefreshs : BaseTable<OauthAccessTokenResponseEverlastingRefresh>("OauthAccessTokenResponseEverlastingRefresh") {
    val refreshToken = text("refresh_token")
    val refreshTokenExpiresIn = int("refresh_token_expires_in")
    val refreshTokenExpiresAt = int("refresh_token_expires_at")

    /**
     * Create an entity of type OauthAccessTokenResponseEverlastingRefresh from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = OauthAccessTokenResponseEverlastingRefresh(
        refreshToken = row[refreshToken] ?: "" /* kotlin.String */,
        refreshTokenExpiresIn = row[refreshTokenExpiresIn] ?: 0 /* kotlin.Int */,
        refreshTokenExpiresAt = row[refreshTokenExpiresAt] ?: 0 /* kotlin.Int */
    )

    /**
    * Assign all the columns from the entity of type OauthAccessTokenResponseEverlastingRefresh to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = OauthAccessTokenResponseEverlastingRefresh()
    * database.update(OauthAccessTokenResponseEverlastingRefreshs, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: OauthAccessTokenResponseEverlastingRefresh) {
        this.apply {
            set(OauthAccessTokenResponseEverlastingRefreshs.refreshToken, entity.refreshToken)
            set(OauthAccessTokenResponseEverlastingRefreshs.refreshTokenExpiresIn, entity.refreshTokenExpiresIn)
            set(OauthAccessTokenResponseEverlastingRefreshs.refreshTokenExpiresAt, entity.refreshTokenExpiresAt)
        }
    }

}


