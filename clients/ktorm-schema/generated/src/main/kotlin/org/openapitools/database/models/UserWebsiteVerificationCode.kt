/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * 
 * @param verificationCode Code to check against the user claiming the website
 * @param dnsTxtRecord DNS TXT record to check against for the website to be claimed
 * @param metatag Metatag the verification process searchs for the website to be claimed
 * @param filename File expected to find on the website being claimed
 * @param fileContent A full html file to upload to the website in order for it to be claimed
 */
object UserWebsiteVerificationCodes : BaseTable<UserWebsiteVerificationCode>("UserWebsiteVerificationCode") {
    val verificationCode = text("verification_code") /* null */ /* Code to check against the user claiming the website */
    val dnsTxtRecord = text("dns_txt_record") /* null */ /* DNS TXT record to check against for the website to be claimed */
    val metatag = text("metatag") /* null */ /* Metatag the verification process searchs for the website to be claimed */
    val filename = text("filename") /* null */ /* File expected to find on the website being claimed */
    val fileContent = text("file_content") /* null */ /* A full html file to upload to the website in order for it to be claimed */

    /**
     * Create an entity of type UserWebsiteVerificationCode from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = UserWebsiteVerificationCode(
        verificationCode = row[verificationCode]  /* kotlin.String? */ /* Code to check against the user claiming the website */,
        dnsTxtRecord = row[dnsTxtRecord]  /* kotlin.String? */ /* DNS TXT record to check against for the website to be claimed */,
        metatag = row[metatag]  /* kotlin.String? */ /* Metatag the verification process searchs for the website to be claimed */,
        filename = row[filename]  /* kotlin.String? */ /* File expected to find on the website being claimed */,
        fileContent = row[fileContent]  /* kotlin.String? */ /* A full html file to upload to the website in order for it to be claimed */
    )

    /**
    * Assign all the columns from the entity of type UserWebsiteVerificationCode to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = UserWebsiteVerificationCode()
    * database.update(UserWebsiteVerificationCodes, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: UserWebsiteVerificationCode) {
        this.apply {
            set(UserWebsiteVerificationCodes.verificationCode, entity.verificationCode)
            set(UserWebsiteVerificationCodes.dnsTxtRecord, entity.dnsTxtRecord)
            set(UserWebsiteVerificationCodes.metatag, entity.metatag)
            set(UserWebsiteVerificationCodes.filename, entity.filename)
            set(UserWebsiteVerificationCodes.fileContent, entity.fileContent)
        }
    }

}


