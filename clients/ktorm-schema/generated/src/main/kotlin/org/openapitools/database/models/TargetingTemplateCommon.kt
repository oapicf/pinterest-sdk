/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * 
 * @param name targeting template name
 * @param autoTargetingEnabled Enable auto-targeting for ad group. Also known as <a href=\"https://help.pinterest.com/en/business/article/expanded-targeting\" target=\"_blank\">\"expanded targeting\"</a>.
 * @param targetingAttributes 
 * @param placementGroup 
 * @param keywords 
 * @param trackingUrls 
 */
object TargetingTemplateCommons : BaseTable<TargetingTemplateCommon>("TargetingTemplateCommon") {
    val name = text("name") /* null */ /* targeting template name */
    val autoTargetingEnabled = boolean("auto_targeting_enabled") /* null */ /* Enable auto-targeting for ad group. Also known as <a href=\"https://help.pinterest.com/en/business/article/expanded-targeting\" target=\"_blank\">\"expanded targeting\"</a>. */
    val targetingAttributes = long("targeting_attributes") /* null */
    val placementGroup = long("placement_group") /* null */
    val trackingUrls = long("tracking_urls") /* null */

    /**
     * Create an entity of type TargetingTemplateCommon from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = TargetingTemplateCommon(
        name = row[name]  /* kotlin.String? */ /* targeting template name */,
        autoTargetingEnabled = row[autoTargetingEnabled] ?: true /* kotlin.Boolean? */ /* Enable auto-targeting for ad group. Also known as <a href=\"https://help.pinterest.com/en/business/article/expanded-targeting\" target=\"_blank\">\"expanded targeting\"</a>. */,
        targetingAttributes = TargetingSpecs.createEntity(row, withReferences) /* TargetingSpec? */,
        placementGroup = PlacementGroupTypes.createEntity(row, withReferences) /* PlacementGroupType? */,
        keywords = emptyList() /* kotlin.Array<TargetingTemplateKeyword>? */,
        trackingUrls = TrackingUrlss.createEntity(row, withReferences) /* TrackingUrls? */
    )

    /**
    * Assign all the columns from the entity of type TargetingTemplateCommon to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = TargetingTemplateCommon()
    * database.update(TargetingTemplateCommons, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: TargetingTemplateCommon) {
        this.apply {
            set(TargetingTemplateCommons.name, entity.name)
            set(TargetingTemplateCommons.autoTargetingEnabled, entity.autoTargetingEnabled)
            set(TargetingTemplateCommons.targetingAttributes, entity.targetingAttributes)
            set(TargetingTemplateCommons.placementGroup, entity.placementGroup)
            set(TargetingTemplateCommons.trackingUrls, entity.trackingUrls)
        }
    }

}


object TargetingTemplateCommonTargetingTemplateKeyword : BaseTable<Pair<kotlin.Long, kotlin.Long>>("TargetingTemplateCommonTargetingTemplateKeyword") {
    val targetingTemplateCommon = long("targetingTemplateCommon")
    val targetingTemplateKeyword = long("targetingTemplateKeyword")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[targetingTemplateCommon] ?: 0, row[targetingTemplateKeyword] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(TargetingTemplateCommonTargetingTemplateKeyword.targetingTemplateCommon, entity.first)
            set(TargetingTemplateCommonTargetingTemplateKeyword.targetingTemplateKeyword, entity.second)
        }
    }

}

