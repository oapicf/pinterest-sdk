/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * 
 * @param leadFormId Lead form ID.
 * @param webhookUrl Standard HTTPS webhook URL.
 * @param id Subscription ID.
 * @param userAccountId User account used to subscribe lead data.
 * @param adAccountId The Ad Account ID that this lead form belongs to.
 * @param apiVersion API version.
 * @param cryptographicKey Base64 encoded key for client to decrypt lead data.
 * @param cryptographicAlgorithm Lead data encryption algorithm.
 * @param createdTime Lead form creation time. Unix timestamp in milliseconds.
 */
object AdAccountGetSubscriptionResponses : BaseTable<AdAccountGetSubscriptionResponse>("AdAccountGetSubscriptionResponse") {
    val leadFormId = text("lead_form_id") /* null */ /* Lead form ID. */
    val webhookUrl = text("webhook_url") /* null */ /* Standard HTTPS webhook URL. */
    val id = text("id") /* null */ /* Subscription ID. */
    val userAccountId = text("user_account_id") /* null */ /* User account used to subscribe lead data. */
    val adAccountId = text("ad_account_id") /* null */ /* The Ad Account ID that this lead form belongs to. */
    val apiVersion = text("api_version") /* null */ /* API version. */
    val cryptographicKey = text("cryptographic_key") /* null */ /* Base64 encoded key for client to decrypt lead data. */
    val cryptographicAlgorithm = text("cryptographic_algorithm") /* null */ /* Lead data encryption algorithm. */
    val createdTime = int("created_time") /* null */ /* Lead form creation time. Unix timestamp in milliseconds. */

    /**
     * Create an entity of type AdAccountGetSubscriptionResponse from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = AdAccountGetSubscriptionResponse(
        leadFormId = row[leadFormId]  /* kotlin.String? */ /* Lead form ID. */,
        webhookUrl = row[webhookUrl]  /* kotlin.String? */ /* Standard HTTPS webhook URL. */,
        id = row[id]  /* kotlin.String? */ /* Subscription ID. */,
        userAccountId = row[userAccountId]  /* kotlin.String? */ /* User account used to subscribe lead data. */,
        adAccountId = row[adAccountId]  /* kotlin.String? */ /* The Ad Account ID that this lead form belongs to. */,
        apiVersion = row[apiVersion]  /* kotlin.String? */ /* API version. */,
        cryptographicKey = row[cryptographicKey]  /* kotlin.String? */ /* Base64 encoded key for client to decrypt lead data. */,
        cryptographicAlgorithm = row[cryptographicAlgorithm]  /* kotlin.String? */ /* Lead data encryption algorithm. */,
        createdTime = row[createdTime]  /* kotlin.Int? */ /* Lead form creation time. Unix timestamp in milliseconds. */
    )

    /**
    * Assign all the columns from the entity of type AdAccountGetSubscriptionResponse to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = AdAccountGetSubscriptionResponse()
    * database.update(AdAccountGetSubscriptionResponses, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: AdAccountGetSubscriptionResponse) {
        this.apply {
            set(AdAccountGetSubscriptionResponses.leadFormId, entity.leadFormId)
            set(AdAccountGetSubscriptionResponses.webhookUrl, entity.webhookUrl)
            set(AdAccountGetSubscriptionResponses.id, entity.id)
            set(AdAccountGetSubscriptionResponses.userAccountId, entity.userAccountId)
            set(AdAccountGetSubscriptionResponses.adAccountId, entity.adAccountId)
            set(AdAccountGetSubscriptionResponses.apiVersion, entity.apiVersion)
            set(AdAccountGetSubscriptionResponses.cryptographicKey, entity.cryptographicKey)
            set(AdAccountGetSubscriptionResponses.cryptographicAlgorithm, entity.cryptographicAlgorithm)
            set(AdAccountGetSubscriptionResponses.createdTime, entity.createdTime)
        }
    }

}


