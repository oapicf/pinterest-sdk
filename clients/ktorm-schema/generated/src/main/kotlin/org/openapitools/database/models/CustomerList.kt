/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * 
 * @param adAccountId Associated ad account ID.
 * @param createdTime Creation time. Unix timestamp in seconds.
 * @param id Customer list ID.
 * @param name Customer list name.
 * @param numBatches Total number of list updates.  List creation counts as one batch. Each <a href=\"/docs/redoc/#operation/ads_v3_customer_list_add_handler_PUT\">Append</a> or <a href=\"/docs/redoc/#operation/ads_v3_customer_list_remove_handler_PUT\">Remove API</a> call counts as another. List creation via the Ads Manager UI could result in more than one batch since the UI breaks up large lists.
 * @param numRemovedUserRecords Number of removed user records. In a <a href=\"/docs/redoc/#operation/ads_v3_customer_list_remove_handler_PUT\">Remove API</a> call, this counter increases even if the user is not found in the list.
 * @param numUploadedUserRecords Number of uploaded user records. In an <a href=\"/docs/redoc/#operation/ads_v3_customer_list_add_handler_PUT\">Append API</a> call, this counter increases even if the uploaded user is already in the list.
 * @param status Customer list status. TOO_SMALL - the list has less than 100 Pinterest users.
 * @param type Always \"customerlist\".
 * @param updatedTime Last update time. Unix timestamp in seconds.
 * @param exceptions Customer list errors
 */
object CustomerLists : BaseTable<CustomerList>("CustomerList") {
    val adAccountId = text("ad_account_id") /* null */ /* Associated ad account ID. */
    val createdTime = decimal("created_time") /* null */ /* Creation time. Unix timestamp in seconds. */
    val id = text("id") /* null */ /* Customer list ID. */
    val name = text("name") /* null */ /* Customer list name. */
    val numBatches = decimal("num_batches") /* null */ /* Total number of list updates.  List creation counts as one batch. Each <a href=\"/docs/redoc/#operation/ads_v3_customer_list_add_handler_PUT\">Append</a> or <a href=\"/docs/redoc/#operation/ads_v3_customer_list_remove_handler_PUT\">Remove API</a> call counts as another. List creation via the Ads Manager UI could result in more than one batch since the UI breaks up large lists. */
    val numRemovedUserRecords = decimal("num_removed_user_records") /* null */ /* Number of removed user records. In a <a href=\"/docs/redoc/#operation/ads_v3_customer_list_remove_handler_PUT\">Remove API</a> call, this counter increases even if the user is not found in the list. */
    val numUploadedUserRecords = decimal("num_uploaded_user_records") /* null */ /* Number of uploaded user records. In an <a href=\"/docs/redoc/#operation/ads_v3_customer_list_add_handler_PUT\">Append API</a> call, this counter increases even if the uploaded user is already in the list. */
    val status = text("status").transform({ CustomerList.Status.valueOf(it ?: "PROCESSING") }, { it.value }) /* null */ /* Customer list status. TOO_SMALL - the list has less than 100 Pinterest users. */

    val type = text("type") /* null */ /* Always \"customerlist\". */
    val updatedTime = decimal("updated_time") /* null */ /* Last update time. Unix timestamp in seconds. */
    val exceptions = blob("exceptions") /* null */ /* Customer list errors */

    /**
     * Create an entity of type CustomerList from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = CustomerList(
        adAccountId = row[adAccountId]  /* kotlin.String? */ /* Associated ad account ID. */,
        createdTime = row[createdTime]  /* java.math.BigDecimal? */ /* Creation time. Unix timestamp in seconds. */,
        id = row[id]  /* kotlin.String? */ /* Customer list ID. */,
        name = row[name]  /* kotlin.String? */ /* Customer list name. */,
        numBatches = row[numBatches]  /* java.math.BigDecimal? */ /* Total number of list updates.  List creation counts as one batch. Each <a href=\"/docs/redoc/#operation/ads_v3_customer_list_add_handler_PUT\">Append</a> or <a href=\"/docs/redoc/#operation/ads_v3_customer_list_remove_handler_PUT\">Remove API</a> call counts as another. List creation via the Ads Manager UI could result in more than one batch since the UI breaks up large lists. */,
        numRemovedUserRecords = row[numRemovedUserRecords]  /* java.math.BigDecimal? */ /* Number of removed user records. In a <a href=\"/docs/redoc/#operation/ads_v3_customer_list_remove_handler_PUT\">Remove API</a> call, this counter increases even if the user is not found in the list. */,
        numUploadedUserRecords = row[numUploadedUserRecords]  /* java.math.BigDecimal? */ /* Number of uploaded user records. In an <a href=\"/docs/redoc/#operation/ads_v3_customer_list_add_handler_PUT\">Append API</a> call, this counter increases even if the uploaded user is already in the list. */,
        status = row[status]  /* kotlin.String? */ /* Customer list status. TOO_SMALL - the list has less than 100 Pinterest users. */,
        type = row[type]  /* kotlin.String? */ /* Always \"customerlist\". */,
        updatedTime = row[updatedTime]  /* java.math.BigDecimal? */ /* Last update time. Unix timestamp in seconds. */,
        exceptions = row[exceptions]  /* kotlin.Any? */ /* Customer list errors */
    )

    /**
    * Assign all the columns from the entity of type CustomerList to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = CustomerList()
    * database.update(CustomerLists, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: CustomerList) {
        this.apply {
            set(CustomerLists.adAccountId, entity.adAccountId)
            set(CustomerLists.createdTime, entity.createdTime)
            set(CustomerLists.id, entity.id)
            set(CustomerLists.name, entity.name)
            set(CustomerLists.numBatches, entity.numBatches)
            set(CustomerLists.numRemovedUserRecords, entity.numRemovedUserRecords)
            set(CustomerLists.numUploadedUserRecords, entity.numUploadedUserRecords)
            set(CustomerLists.status, entity.status)
            set(CustomerLists.type, entity.type)
            set(CustomerLists.updatedTime, entity.updatedTime)
            set(CustomerLists.exceptions, entity.exceptions)
        }
    }

}


