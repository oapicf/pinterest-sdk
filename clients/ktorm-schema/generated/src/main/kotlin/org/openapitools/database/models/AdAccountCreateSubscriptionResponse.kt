/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * 
 * @param id Subscription ID.
 * @param cryptographicKey Base64 encoded key for client to decrypt lead data.
 * @param cryptographicAlgorithm Lead data encryption algorithm.
 * @param createdTime Subscription creation time. Unix timestamp in milliseconds.
 */
object AdAccountCreateSubscriptionResponses : BaseTable<AdAccountCreateSubscriptionResponse>("AdAccountCreateSubscriptionResponse") {
    val id = text("id") /* null */ /* Subscription ID. */
    val cryptographicKey = text("cryptographic_key") /* null */ /* Base64 encoded key for client to decrypt lead data. */
    val cryptographicAlgorithm = text("cryptographic_algorithm") /* null */ /* Lead data encryption algorithm. */
    val createdTime = int("created_time") /* null */ /* Subscription creation time. Unix timestamp in milliseconds. */

    /**
     * Create an entity of type AdAccountCreateSubscriptionResponse from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = AdAccountCreateSubscriptionResponse(
        id = row[id]  /* kotlin.String? */ /* Subscription ID. */,
        cryptographicKey = row[cryptographicKey]  /* kotlin.String? */ /* Base64 encoded key for client to decrypt lead data. */,
        cryptographicAlgorithm = row[cryptographicAlgorithm]  /* kotlin.String? */ /* Lead data encryption algorithm. */,
        createdTime = row[createdTime]  /* kotlin.Int? */ /* Subscription creation time. Unix timestamp in milliseconds. */
    )

    /**
    * Assign all the columns from the entity of type AdAccountCreateSubscriptionResponse to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = AdAccountCreateSubscriptionResponse()
    * database.update(AdAccountCreateSubscriptionResponses, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: AdAccountCreateSubscriptionResponse) {
        this.apply {
            set(AdAccountCreateSubscriptionResponses.id, entity.id)
            set(AdAccountCreateSubscriptionResponses.cryptographicKey, entity.cryptographicKey)
            set(AdAccountCreateSubscriptionResponses.cryptographicAlgorithm, entity.cryptographicAlgorithm)
            set(AdAccountCreateSubscriptionResponses.createdTime, entity.createdTime)
        }
    }

}


