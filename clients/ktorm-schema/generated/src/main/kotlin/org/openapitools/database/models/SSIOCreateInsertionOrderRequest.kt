/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * 
 * @param startDate Starting date of time period. Format: YYYY-MM-DD
 * @param poNumber The po number
 * @param billingContactFirstname The billing contact first name
 * @param billingContactLastname The billing contact last name
 * @param billingContactEmail The billing contact email
 * @param mediaContactFirstname The media contact first name
 * @param mediaContactLastname The media contact last name
 * @param mediaContactEmail The media contact email
 * @param pmpId The pmp id
 * @param orderName The order name
 * @param orderLineType Type can be Budget or Perpetual
 * @param acceptedTermsId The SFDC id for the terms
 * @param billtoCompanyId The bill-to company id
 * @param billtoBusinessAddressId The bill-to business address id
 * @param billtoBillingAddressId The bill-to billing address id
 * @param currencyInfo 
 * @param endDate End date of time period. Format: YYYY-MM-DD
 * @param budgetAmount If Budget order line, the budget amount.
 * @param agencyLink URL link for agency
 * @param userEmail The email of user submitting the insertion order
 * @param acceptedTermsTime The UTC timestamp (to the nearest sec) of when terms were accepted
 * @param estimatedMonthlySpend If Ongoing (perpetual) order line, the estimated monthly spend
 */
object SSIOCreateInsertionOrderRequests : BaseTable<SSIOCreateInsertionOrderRequest>("SSIOCreateInsertionOrderRequest") {
    val startDate = text("start_date") /* Starting date of time period. Format: YYYY-MM-DD */
    val poNumber = text("po_number") /* The po number */
    val billingContactFirstname = text("billing_contact_firstname") /* The billing contact first name */
    val billingContactLastname = text("billing_contact_lastname") /* The billing contact last name */
    val billingContactEmail = text("billing_contact_email") /* The billing contact email */
    val mediaContactFirstname = text("media_contact_firstname") /* The media contact first name */
    val mediaContactLastname = text("media_contact_lastname") /* The media contact last name */
    val mediaContactEmail = text("media_contact_email") /* The media contact email */
    val pmpId = text("pmp_id") /* The pmp id */
    val orderName = text("order_name") /* The order name */
    val orderLineType = text("order_line_type").transform({ SSIOCreateInsertionOrderRequest.OrderLineType.valueOf(it) }, { it.value }) /* Type can be Budget or Perpetual */
    val acceptedTermsId = text("accepted_terms_id") /* The SFDC id for the terms */
    val billtoCompanyId = text("billto_company_id") /* The bill-to company id */
    val billtoBusinessAddressId = text("billto_business_address_id") /* The bill-to business address id */
    val billtoBillingAddressId = text("billto_billing_address_id") /* The bill-to billing address id */
    val currencyInfo = long("currency_info")
    val endDate = text("end_date") /* null */ /* End date of time period. Format: YYYY-MM-DD */
    val budgetAmount = decimal("budget_amount") /* null */ /* If Budget order line, the budget amount. */
    val agencyLink = text("agency_link") /* null */ /* URL link for agency */
    val userEmail = text("user_email") /* null */ /* The email of user submitting the insertion order */
    val acceptedTermsTime = int("accepted_terms_time") /* null */ /* The UTC timestamp (to the nearest sec) of when terms were accepted */
    val estimatedMonthlySpend = decimal("estimated_monthly_spend") /* null */ /* If Ongoing (perpetual) order line, the estimated monthly spend */

    /**
     * Create an entity of type SSIOCreateInsertionOrderRequest from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = SSIOCreateInsertionOrderRequest(
        startDate = row[startDate] ?: "" /* kotlin.String */ /* Starting date of time period. Format: YYYY-MM-DD */,
        poNumber = row[poNumber] ?: "" /* kotlin.String */ /* The po number */,
        billingContactFirstname = row[billingContactFirstname] ?: "" /* kotlin.String */ /* The billing contact first name */,
        billingContactLastname = row[billingContactLastname] ?: "" /* kotlin.String */ /* The billing contact last name */,
        billingContactEmail = row[billingContactEmail] ?: "" /* kotlin.String */ /* The billing contact email */,
        mediaContactFirstname = row[mediaContactFirstname] ?: "" /* kotlin.String */ /* The media contact first name */,
        mediaContactLastname = row[mediaContactLastname] ?: "" /* kotlin.String */ /* The media contact last name */,
        mediaContactEmail = row[mediaContactEmail] ?: "" /* kotlin.String */ /* The media contact email */,
        pmpId = row[pmpId] ?: "" /* kotlin.String */ /* The pmp id */,
        orderName = row[orderName] ?: "" /* kotlin.String */ /* The order name */,
        orderLineType = row[orderLineType] ?: SSIOCreateInsertionOrderRequest.OrderLineType.valueOf("") /* kotlin.String */ /* Type can be Budget or Perpetual */,
        acceptedTermsId = row[acceptedTermsId] ?: "" /* kotlin.String */ /* The SFDC id for the terms */,
        billtoCompanyId = row[billtoCompanyId] ?: "" /* kotlin.String */ /* The bill-to company id */,
        billtoBusinessAddressId = row[billtoBusinessAddressId] ?: "" /* kotlin.String */ /* The bill-to business address id */,
        billtoBillingAddressId = row[billtoBillingAddressId] ?: "" /* kotlin.String */ /* The bill-to billing address id */,
        currencyInfo = Currencys.createEntity(row, withReferences) /* Currency */,
        endDate = row[endDate]  /* kotlin.String? */ /* End date of time period. Format: YYYY-MM-DD */,
        budgetAmount = row[budgetAmount]  /* java.math.BigDecimal? */ /* If Budget order line, the budget amount. */,
        agencyLink = row[agencyLink]  /* kotlin.String? */ /* URL link for agency */,
        userEmail = row[userEmail]  /* kotlin.String? */ /* The email of user submitting the insertion order */,
        acceptedTermsTime = row[acceptedTermsTime]  /* kotlin.Int? */ /* The UTC timestamp (to the nearest sec) of when terms were accepted */,
        estimatedMonthlySpend = row[estimatedMonthlySpend]  /* java.math.BigDecimal? */ /* If Ongoing (perpetual) order line, the estimated monthly spend */
    )

    /**
    * Assign all the columns from the entity of type SSIOCreateInsertionOrderRequest to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = SSIOCreateInsertionOrderRequest()
    * database.update(SSIOCreateInsertionOrderRequests, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: SSIOCreateInsertionOrderRequest) {
        this.apply {
            set(SSIOCreateInsertionOrderRequests.startDate, entity.startDate)
            set(SSIOCreateInsertionOrderRequests.poNumber, entity.poNumber)
            set(SSIOCreateInsertionOrderRequests.billingContactFirstname, entity.billingContactFirstname)
            set(SSIOCreateInsertionOrderRequests.billingContactLastname, entity.billingContactLastname)
            set(SSIOCreateInsertionOrderRequests.billingContactEmail, entity.billingContactEmail)
            set(SSIOCreateInsertionOrderRequests.mediaContactFirstname, entity.mediaContactFirstname)
            set(SSIOCreateInsertionOrderRequests.mediaContactLastname, entity.mediaContactLastname)
            set(SSIOCreateInsertionOrderRequests.mediaContactEmail, entity.mediaContactEmail)
            set(SSIOCreateInsertionOrderRequests.pmpId, entity.pmpId)
            set(SSIOCreateInsertionOrderRequests.orderName, entity.orderName)
            set(SSIOCreateInsertionOrderRequests.orderLineType, entity.orderLineType)
            set(SSIOCreateInsertionOrderRequests.acceptedTermsId, entity.acceptedTermsId)
            set(SSIOCreateInsertionOrderRequests.billtoCompanyId, entity.billtoCompanyId)
            set(SSIOCreateInsertionOrderRequests.billtoBusinessAddressId, entity.billtoBusinessAddressId)
            set(SSIOCreateInsertionOrderRequests.billtoBillingAddressId, entity.billtoBillingAddressId)
            set(SSIOCreateInsertionOrderRequests.currencyInfo, entity.currencyInfo)
            set(SSIOCreateInsertionOrderRequests.endDate, entity.endDate)
            set(SSIOCreateInsertionOrderRequests.budgetAmount, entity.budgetAmount)
            set(SSIOCreateInsertionOrderRequests.agencyLink, entity.agencyLink)
            set(SSIOCreateInsertionOrderRequests.userEmail, entity.userEmail)
            set(SSIOCreateInsertionOrderRequests.acceptedTermsTime, entity.acceptedTermsTime)
            set(SSIOCreateInsertionOrderRequests.estimatedMonthlySpend, entity.estimatedMonthlySpend)
        }
    }

}


