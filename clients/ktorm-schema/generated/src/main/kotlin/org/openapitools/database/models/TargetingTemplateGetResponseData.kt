/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * 
 * @param name targeting template name
 * @param autoTargetingEnabled Enable auto-targeting for ad group. Also known as <a href=\"https://help.pinterest.com/en/business/article/expanded-targeting\" target=\"_blank\">\"expanded targeting\"</a>.
 * @param targetingAttributes 
 * @param placementGroup 
 * @param keywords 
 * @param trackingUrls 
 * @param id Targeting template ID.
 * @param createdTime Targeting template created time. Unix timestamp in seconds.
 * @param updatedTime Targeting template updated time.Unix timestamp in seconds.
 * @param adAccountId The ID of the advertiser that this targeting template belongs to.
 * @param status Indicate targeting template is active or Deleted
 * @param sizing 
 * @param valid Inform if the targeting template is valid (ex. would be false if has revoked audience)
 */
object TargetingTemplateGetResponseDatas : BaseTable<TargetingTemplateGetResponseData>("TargetingTemplateGetResponseData") {
    val name = text("name") /* null */ /* targeting template name */
    val autoTargetingEnabled = boolean("auto_targeting_enabled") /* null */ /* Enable auto-targeting for ad group. Also known as <a href=\"https://help.pinterest.com/en/business/article/expanded-targeting\" target=\"_blank\">\"expanded targeting\"</a>. */
    val targetingAttributes = long("targeting_attributes") /* null */
    val placementGroup = long("placement_group") /* null */
    val trackingUrls = long("tracking_urls") /* null */
    val id = text("id") /* null */ /* Targeting template ID. */
    val createdTime = int("created_time") /* null */ /* Targeting template created time. Unix timestamp in seconds. */
    val updatedTime = int("updated_time") /* null */ /* Targeting template updated time.Unix timestamp in seconds. */
    val adAccountId = text("ad_account_id") /* null */ /* The ID of the advertiser that this targeting template belongs to. */
    val status = text("status").transform({ TargetingTemplateGetResponseData.Status.valueOf(it ?: "ACTIVE") }, { it.value }) /* null */ /* Indicate targeting template is active or Deleted */

    val sizing = long("sizing") /* null */
    val valid = boolean("valid") /* null */ /* Inform if the targeting template is valid (ex. would be false if has revoked audience) */

    /**
     * Create an entity of type TargetingTemplateGetResponseData from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = TargetingTemplateGetResponseData(
        name = row[name]  /* kotlin.String? */ /* targeting template name */,
        autoTargetingEnabled = row[autoTargetingEnabled] ?: true /* kotlin.Boolean? */ /* Enable auto-targeting for ad group. Also known as <a href=\"https://help.pinterest.com/en/business/article/expanded-targeting\" target=\"_blank\">\"expanded targeting\"</a>. */,
        targetingAttributes = TargetingSpecs.createEntity(row, withReferences) /* TargetingSpec? */,
        placementGroup = PlacementGroupTypes.createEntity(row, withReferences) /* PlacementGroupType? */,
        keywords = emptyList() /* kotlin.Array<TargetingTemplateKeyword>? */,
        trackingUrls = TrackingUrlss.createEntity(row, withReferences) /* TrackingUrls? */,
        id = row[id]  /* kotlin.String? */ /* Targeting template ID. */,
        createdTime = row[createdTime]  /* kotlin.Int? */ /* Targeting template created time. Unix timestamp in seconds. */,
        updatedTime = row[updatedTime]  /* kotlin.Int? */ /* Targeting template updated time.Unix timestamp in seconds. */,
        adAccountId = row[adAccountId]  /* kotlin.String? */ /* The ID of the advertiser that this targeting template belongs to. */,
        status = row[status] ?: Status.ACTIVE /* kotlin.String? */ /* Indicate targeting template is active or Deleted */,
        sizing = TargetingTemplateAudienceSizings.createEntity(row, withReferences) /* TargetingTemplateAudienceSizing? */,
        valid = row[valid]  /* kotlin.Boolean? */ /* Inform if the targeting template is valid (ex. would be false if has revoked audience) */
    )

    /**
    * Assign all the columns from the entity of type TargetingTemplateGetResponseData to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = TargetingTemplateGetResponseData()
    * database.update(TargetingTemplateGetResponseDatas, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: TargetingTemplateGetResponseData) {
        this.apply {
            set(TargetingTemplateGetResponseDatas.name, entity.name)
            set(TargetingTemplateGetResponseDatas.autoTargetingEnabled, entity.autoTargetingEnabled)
            set(TargetingTemplateGetResponseDatas.targetingAttributes, entity.targetingAttributes)
            set(TargetingTemplateGetResponseDatas.placementGroup, entity.placementGroup)
            set(TargetingTemplateGetResponseDatas.trackingUrls, entity.trackingUrls)
            set(TargetingTemplateGetResponseDatas.id, entity.id)
            set(TargetingTemplateGetResponseDatas.createdTime, entity.createdTime)
            set(TargetingTemplateGetResponseDatas.updatedTime, entity.updatedTime)
            set(TargetingTemplateGetResponseDatas.adAccountId, entity.adAccountId)
            set(TargetingTemplateGetResponseDatas.status, entity.status)
            set(TargetingTemplateGetResponseDatas.sizing, entity.sizing)
            set(TargetingTemplateGetResponseDatas.valid, entity.valid)
        }
    }

}


object TargetingTemplateGetResponseDataTargetingTemplateKeyword : BaseTable<Pair<kotlin.Long, kotlin.Long>>("TargetingTemplateGetResponseDataTargetingTemplateKeyword") {
    val targetingTemplateGetResponseData = long("targetingTemplateGetResponseData")
    val targetingTemplateKeyword = long("targetingTemplateKeyword")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[targetingTemplateGetResponseData] ?: 0, row[targetingTemplateKeyword] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(TargetingTemplateGetResponseDataTargetingTemplateKeyword.targetingTemplateGetResponseData, entity.first)
            set(TargetingTemplateGetResponseDataTargetingTemplateKeyword.targetingTemplateKeyword, entity.second)
        }
    }

}

