/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * 
 * @param name Ad group name.
 * @param status Ad group/entity status.
 * @param budgetInMicroCurrency Budget in micro currency. This field is **REQUIRED** for non-CBO (campaign budget optimization) campaigns.  A CBO campaign automatically generates ad group budgets from its campaign budget to maximize campaign outcome. A CBO campaign is limited to 70 or less ad groups.
 * @param bidInMicroCurrency Bid price in micro currency. This field is **REQUIRED** for the following campaign objective_type/billable_event combinations: AWARENESS/IMPRESSION, CONSIDERATION/CLICKTHROUGH, CATALOG_SALES/CLICKTHROUGH, VIDEO_VIEW/VIDEO_V_50_MRC.
 * @param optimizationGoalMetadata Optimization goals for objective-based performance campaigns. **REQUIRED** when campaign's `objective_type` is set to `\"WEB_CONVERSION\"`.
 * @param budgetType 
 * @param startTime Ad group start time. Unix timestamp in seconds. Defaults to current time.
 * @param endTime Ad group end time. Unix timestamp in seconds.
 * @param targetingSpec 
 * @param lifetimeFrequencyCap Set a limit to the number of times a promoted pin from this campaign can be impressed by a pinner within the past rolling 30 days. Only available for CPM (cost per mille (1000 impressions))  ad groups. A CPM ad group has an IMPRESSION <a href=\"/docs/redoc/#section/Billable-event\">billable_event</a> value. This field **REQUIRES** the `end_time` field.
 * @param trackingUrls Third-party tracking URLs.<br> JSON object with the format: {\"<a href=\"/docs/redoc/#section/Tracking-URL-event\">Tracking event enum</a>\":[URL string array],...}<br> For example: {\"impression\": [\"URL1\", \"URL2\"], \"click\": [\"URL1\", \"URL2\", \"URL3\"]}.<br>Up to three tracking URLs are supported for each event type. Tracking URLs set at the ad group or ad level can override those set at the campaign level. May be null. Pass in an empty object - {} - to remove tracking URLs.<br><br> For more information, see <a href=\"https://help.pinterest.com/en/business/article/third-party-and-dynamic-tracking\" target=\"_blank\">Third-party and dynamic tracking</a>.
 * @param autoTargetingEnabled Enable auto-targeting for ad group. Also known as <a href=\"https://help.pinterest.com/en/business/article/expanded-targeting\" target=\"_blank\">\"expanded targeting\"</a>.
 * @param placementGroup <a href=\"/docs/redoc/#section/Placement-group\">Placement group</a>.
 * @param pacingDeliveryType 
 * @param campaignId Campaign ID of the ad group.
 * @param billableEvent 
 * @param bidStrategyType Bid strategy type. For Campaigns with Video Completion objectives, the only supported bid strategy type is AUTOMATIC_BID.
 * @param targetingTemplateIds Targeting template IDs applied to the ad group. We currently only support 1 targeting template per ad group. To use targeting templates, do not set any other targeting fields: targeting_spec, tracking_urls, auto_targeting_enabled, placement_group. To clear all targeting template IDs, set this field to ['0'].
 */
object AdGroupCommons : BaseTable<AdGroupCommon>("AdGroupCommon") {
    val name = text("name") /* null */ /* Ad group name. */
    val status = long("status") /* null */ /* Ad group/entity status. */
    val budgetInMicroCurrency = int("budget_in_micro_currency") /* null */ /* Budget in micro currency. This field is **REQUIRED** for non-CBO (campaign budget optimization) campaigns.  A CBO campaign automatically generates ad group budgets from its campaign budget to maximize campaign outcome. A CBO campaign is limited to 70 or less ad groups. */
    val bidInMicroCurrency = int("bid_in_micro_currency") /* null */ /* Bid price in micro currency. This field is **REQUIRED** for the following campaign objective_type/billable_event combinations: AWARENESS/IMPRESSION, CONSIDERATION/CLICKTHROUGH, CATALOG_SALES/CLICKTHROUGH, VIDEO_VIEW/VIDEO_V_50_MRC. */
    val optimizationGoalMetadata = long("optimization_goal_metadata") /* null */ /* Optimization goals for objective-based performance campaigns. **REQUIRED** when campaign's `objective_type` is set to `\"WEB_CONVERSION\"`. */
    val budgetType = long("budget_type") /* null */
    val startTime = int("start_time") /* null */ /* Ad group start time. Unix timestamp in seconds. Defaults to current time. */
    val endTime = int("end_time") /* null */ /* Ad group end time. Unix timestamp in seconds. */
    val targetingSpec = long("targeting_spec") /* null */
    val lifetimeFrequencyCap = int("lifetime_frequency_cap") /* null */ /* Set a limit to the number of times a promoted pin from this campaign can be impressed by a pinner within the past rolling 30 days. Only available for CPM (cost per mille (1000 impressions))  ad groups. A CPM ad group has an IMPRESSION <a href=\"/docs/redoc/#section/Billable-event\">billable_event</a> value. This field **REQUIRES** the `end_time` field. */
    val trackingUrls = long("tracking_urls") /* null */ /* Third-party tracking URLs.<br> JSON object with the format: {\"<a href=\"/docs/redoc/#section/Tracking-URL-event\">Tracking event enum</a>\":[URL string array],...}<br> For example: {\"impression\": [\"URL1\", \"URL2\"], \"click\": [\"URL1\", \"URL2\", \"URL3\"]}.<br>Up to three tracking URLs are supported for each event type. Tracking URLs set at the ad group or ad level can override those set at the campaign level. May be null. Pass in an empty object - {} - to remove tracking URLs.<br><br> For more information, see <a href=\"https://help.pinterest.com/en/business/article/third-party-and-dynamic-tracking\" target=\"_blank\">Third-party and dynamic tracking</a>. */
    val autoTargetingEnabled = boolean("auto_targeting_enabled") /* null */ /* Enable auto-targeting for ad group. Also known as <a href=\"https://help.pinterest.com/en/business/article/expanded-targeting\" target=\"_blank\">\"expanded targeting\"</a>. */
    val placementGroup = long("placement_group") /* null */ /* <a href=\"/docs/redoc/#section/Placement-group\">Placement group</a>. */
    val pacingDeliveryType = long("pacing_delivery_type") /* null */
    val campaignId = text("campaign_id") /* null */ /* Campaign ID of the ad group. */
    val billableEvent = long("billable_event") /* null */
    val bidStrategyType = text("bid_strategy_type").transform({ AdGroupCommon.BidStrategyType.valueOf(it ?: "AUTOMATIC_BID") }, { it.value }) /* null */ /* Bid strategy type. For Campaigns with Video Completion objectives, the only supported bid strategy type is AUTOMATIC_BID. */


    /**
     * Create an entity of type AdGroupCommon from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = AdGroupCommon(
        name = row[name]  /* kotlin.String? */ /* Ad group name. */,
        status = EntityStatuss.createEntity(row, withReferences) /* EntityStatus? */ /* Ad group/entity status. */,
        budgetInMicroCurrency = row[budgetInMicroCurrency]  /* kotlin.Int? */ /* Budget in micro currency. This field is **REQUIRED** for non-CBO (campaign budget optimization) campaigns.  A CBO campaign automatically generates ad group budgets from its campaign budget to maximize campaign outcome. A CBO campaign is limited to 70 or less ad groups. */,
        bidInMicroCurrency = row[bidInMicroCurrency]  /* kotlin.Int? */ /* Bid price in micro currency. This field is **REQUIRED** for the following campaign objective_type/billable_event combinations: AWARENESS/IMPRESSION, CONSIDERATION/CLICKTHROUGH, CATALOG_SALES/CLICKTHROUGH, VIDEO_VIEW/VIDEO_V_50_MRC. */,
        optimizationGoalMetadata = OptimizationGoalMetadatas.createEntity(row, withReferences) /* OptimizationGoalMetadata? */ /* Optimization goals for objective-based performance campaigns. **REQUIRED** when campaign's `objective_type` is set to `\"WEB_CONVERSION\"`. */,
        budgetType = BudgetTypes.createEntity(row, withReferences) /* BudgetType? */,
        startTime = row[startTime]  /* kotlin.Int? */ /* Ad group start time. Unix timestamp in seconds. Defaults to current time. */,
        endTime = row[endTime]  /* kotlin.Int? */ /* Ad group end time. Unix timestamp in seconds. */,
        targetingSpec = TargetingSpecs.createEntity(row, withReferences) /* TargetingSpec? */,
        lifetimeFrequencyCap = row[lifetimeFrequencyCap]  /* kotlin.Int? */ /* Set a limit to the number of times a promoted pin from this campaign can be impressed by a pinner within the past rolling 30 days. Only available for CPM (cost per mille (1000 impressions))  ad groups. A CPM ad group has an IMPRESSION <a href=\"/docs/redoc/#section/Billable-event\">billable_event</a> value. This field **REQUIRES** the `end_time` field. */,
        trackingUrls = TrackingUrlss.createEntity(row, withReferences) /* TrackingUrls? */ /* Third-party tracking URLs.<br> JSON object with the format: {\"<a href=\"/docs/redoc/#section/Tracking-URL-event\">Tracking event enum</a>\":[URL string array],...}<br> For example: {\"impression\": [\"URL1\", \"URL2\"], \"click\": [\"URL1\", \"URL2\", \"URL3\"]}.<br>Up to three tracking URLs are supported for each event type. Tracking URLs set at the ad group or ad level can override those set at the campaign level. May be null. Pass in an empty object - {} - to remove tracking URLs.<br><br> For more information, see <a href=\"https://help.pinterest.com/en/business/article/third-party-and-dynamic-tracking\" target=\"_blank\">Third-party and dynamic tracking</a>. */,
        autoTargetingEnabled = row[autoTargetingEnabled]  /* kotlin.Boolean? */ /* Enable auto-targeting for ad group. Also known as <a href=\"https://help.pinterest.com/en/business/article/expanded-targeting\" target=\"_blank\">\"expanded targeting\"</a>. */,
        placementGroup = PlacementGroupTypes.createEntity(row, withReferences) /* PlacementGroupType? */ /* <a href=\"/docs/redoc/#section/Placement-group\">Placement group</a>. */,
        pacingDeliveryType = PacingDeliveryTypes.createEntity(row, withReferences) /* PacingDeliveryType? */,
        campaignId = row[campaignId]  /* kotlin.String? */ /* Campaign ID of the ad group. */,
        billableEvent = ActionTypes.createEntity(row, withReferences) /* ActionType? */,
        bidStrategyType = row[bidStrategyType]  /* kotlin.String? */ /* Bid strategy type. For Campaigns with Video Completion objectives, the only supported bid strategy type is AUTOMATIC_BID. */,
        targetingTemplateIds = emptyList() /* kotlin.Array<kotlin.String>? */ /* Targeting template IDs applied to the ad group. We currently only support 1 targeting template per ad group. To use targeting templates, do not set any other targeting fields: targeting_spec, tracking_urls, auto_targeting_enabled, placement_group. To clear all targeting template IDs, set this field to ['0']. */
    )

    /**
    * Assign all the columns from the entity of type AdGroupCommon to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = AdGroupCommon()
    * database.update(AdGroupCommons, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: AdGroupCommon) {
        this.apply {
            set(AdGroupCommons.name, entity.name)
            set(AdGroupCommons.status, entity.status)
            set(AdGroupCommons.budgetInMicroCurrency, entity.budgetInMicroCurrency)
            set(AdGroupCommons.bidInMicroCurrency, entity.bidInMicroCurrency)
            set(AdGroupCommons.optimizationGoalMetadata, entity.optimizationGoalMetadata)
            set(AdGroupCommons.budgetType, entity.budgetType)
            set(AdGroupCommons.startTime, entity.startTime)
            set(AdGroupCommons.endTime, entity.endTime)
            set(AdGroupCommons.targetingSpec, entity.targetingSpec)
            set(AdGroupCommons.lifetimeFrequencyCap, entity.lifetimeFrequencyCap)
            set(AdGroupCommons.trackingUrls, entity.trackingUrls)
            set(AdGroupCommons.autoTargetingEnabled, entity.autoTargetingEnabled)
            set(AdGroupCommons.placementGroup, entity.placementGroup)
            set(AdGroupCommons.pacingDeliveryType, entity.pacingDeliveryType)
            set(AdGroupCommons.campaignId, entity.campaignId)
            set(AdGroupCommons.billableEvent, entity.billableEvent)
            set(AdGroupCommons.bidStrategyType, entity.bidStrategyType)
        }
    }

}


object AdGroupCommonTargetingTemplateIds : BaseTable<Pair<kotlin.Long, kotlin.String>>("AdGroupCommonTargetingTemplateIds") {
    val adGroupCommon = long("adGroupCommon")
    val targetingTemplateIds = text("targetingTemplateIds")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.String> =
        Pair(row[adGroupCommon] ?: 0, row[targetingTemplateIds] ?: "")

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.String>) {
        this.apply {
            set(AdGroupCommonTargetingTemplateIds.adGroupCommon, entity.first)
            set(AdGroupCommonTargetingTemplateIds.targetingTemplateIds, entity.second)
        }
    }

}

