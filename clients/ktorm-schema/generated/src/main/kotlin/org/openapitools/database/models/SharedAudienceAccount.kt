/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * 
 * @param accountId Account ID (ad account or business ID).
 * @param accountName Account name.
 * @param accountType account type
 * @param sharedOnTimestamp Epoch timestamp in seconds for the shared audience event
 */
object SharedAudienceAccounts : BaseTable<SharedAudienceAccount>("SharedAudienceAccount") {
    val accountId = text("account_id") /* Account ID (ad account or business ID). */
    val accountName = text("account_name") /* Account name. */
    val accountType = text("account_type").transform({ SharedAudienceAccount.AccountType.valueOf(it) }, { it.value }) /* account type */
    val sharedOnTimestamp = int("shared_on_timestamp") /* Epoch timestamp in seconds for the shared audience event */

    /**
     * Create an entity of type SharedAudienceAccount from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = SharedAudienceAccount(
        accountId = row[accountId] ?: "" /* kotlin.String */ /* Account ID (ad account or business ID). */,
        accountName = row[accountName] ?: "" /* kotlin.String */ /* Account name. */,
        accountType = row[accountType] ?: SharedAudienceAccount.AccountType.valueOf("") /* kotlin.String */ /* account type */,
        sharedOnTimestamp = row[sharedOnTimestamp] ?: 0 /* kotlin.Int */ /* Epoch timestamp in seconds for the shared audience event */
    )

    /**
    * Assign all the columns from the entity of type SharedAudienceAccount to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = SharedAudienceAccount()
    * database.update(SharedAudienceAccounts, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: SharedAudienceAccount) {
        this.apply {
            set(SharedAudienceAccounts.accountId, entity.accountId)
            set(SharedAudienceAccounts.accountName, entity.accountName)
            set(SharedAudienceAccounts.accountType, entity.accountType)
            set(SharedAudienceAccounts.sharedOnTimestamp, entity.sharedOnTimestamp)
        }
    }

}


