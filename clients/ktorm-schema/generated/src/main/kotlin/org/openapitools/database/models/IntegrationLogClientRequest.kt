/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * HTTP request details included in the log sent by the client.
 * @param method 
 * @param host HTTP request host from host header.
 * @param path HTTP request path.
 * @param requestHeaders HTTP request headers as key-value pairs.
 * @param responseHeaders HTTP response headers as key-value pairs.
 * @param responseStatusCode 
 */
object IntegrationLogClientRequests : BaseTable<IntegrationLogClientRequest>("IntegrationLogClientRequest") {
    val method = text("method").transform({ IntegrationLogClientRequest.Method.valueOf(it) }, { it.value })
    val host = text("host") /* HTTP request host from host header. */
    val path = text("path") /* HTTP request path. */
    val requestHeaders = blob("request_headers") /* null */ /* HTTP request headers as key-value pairs. */
    val responseHeaders = blob("response_headers") /* null */ /* HTTP response headers as key-value pairs. */
    val responseStatusCode = int("response_status_code") /* null */

    /**
     * Create an entity of type IntegrationLogClientRequest from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = IntegrationLogClientRequest(
        method = row[method] ?: IntegrationLogClientRequest.Method.valueOf("") /* kotlin.String */,
        host = row[host] ?: "" /* kotlin.String */ /* HTTP request host from host header. */,
        path = row[path] ?: "" /* kotlin.String */ /* HTTP request path. */,
        requestHeaders = row[requestHeaders]  /* kotlin.collections.Map<kotlin.String, kotlin.String>? */ /* HTTP request headers as key-value pairs. */,
        responseHeaders = row[responseHeaders]  /* kotlin.collections.Map<kotlin.String, kotlin.String>? */ /* HTTP response headers as key-value pairs. */,
        responseStatusCode = row[responseStatusCode]  /* kotlin.Int? */
    )

    /**
    * Assign all the columns from the entity of type IntegrationLogClientRequest to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = IntegrationLogClientRequest()
    * database.update(IntegrationLogClientRequests, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: IntegrationLogClientRequest) {
        this.apply {
            set(IntegrationLogClientRequests.method, entity.method)
            set(IntegrationLogClientRequests.host, entity.host)
            set(IntegrationLogClientRequests.path, entity.path)
            set(IntegrationLogClientRequests.requestHeaders, entity.requestHeaders)
            set(IntegrationLogClientRequests.responseHeaders, entity.responseHeaders)
            set(IntegrationLogClientRequests.responseStatusCode, entity.responseStatusCode)
        }
    }

}


