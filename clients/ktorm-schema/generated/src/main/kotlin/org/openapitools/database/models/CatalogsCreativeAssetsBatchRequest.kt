/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * Request object to update catalogs creative assets items
 * @param catalogType 
 * @param country 
 * @param language 
 * @param items Array with creative assets item operations
 * @param catalogId Catalog id pertaining to the creative assets item. If not provided, default to oldest creative assets catalog
 */
object CatalogsCreativeAssetsBatchRequests : BaseTable<CatalogsCreativeAssetsBatchRequest>("CatalogsCreativeAssetsBatchRequest") {
    val catalogType = text("catalog_type").transform({ CatalogsCreativeAssetsBatchRequest.CatalogType.valueOf(it) }, { it.value })
    val country = long("country")
    val language = long("language")
    val catalogId = text("catalog_id") /* null */ /* Catalog id pertaining to the creative assets item. If not provided, default to oldest creative assets catalog */

    /**
     * Create an entity of type CatalogsCreativeAssetsBatchRequest from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = CatalogsCreativeAssetsBatchRequest(
        catalogType = row[catalogType] ?: CatalogsCreativeAssetsBatchRequest.CatalogType.valueOf("") /* kotlin.String */,
        country = Countrys.createEntity(row, withReferences) /* Country */,
        language = CatalogsItemsRequestLanguages.createEntity(row, withReferences) /* CatalogsItemsRequestLanguage */,
        items = emptyList() /* kotlin.Array<CatalogsCreativeAssetsBatchItem> */ /* Array with creative assets item operations */,
        catalogId = row[catalogId]  /* kotlin.String? */ /* Catalog id pertaining to the creative assets item. If not provided, default to oldest creative assets catalog */
    )

    /**
    * Assign all the columns from the entity of type CatalogsCreativeAssetsBatchRequest to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = CatalogsCreativeAssetsBatchRequest()
    * database.update(CatalogsCreativeAssetsBatchRequests, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: CatalogsCreativeAssetsBatchRequest) {
        this.apply {
            set(CatalogsCreativeAssetsBatchRequests.catalogType, entity.catalogType)
            set(CatalogsCreativeAssetsBatchRequests.country, entity.country)
            set(CatalogsCreativeAssetsBatchRequests.language, entity.language)
            set(CatalogsCreativeAssetsBatchRequests.catalogId, entity.catalogId)
        }
    }

}


object CatalogsCreativeAssetsBatchRequestCatalogsCreativeAssetsBatchItem : BaseTable<Pair<kotlin.Long, kotlin.Long>>("CatalogsCreativeAssetsBatchRequestCatalogsCreativeAssetsBatchItem") {
    val catalogsCreativeAssetsBatchRequest = long("catalogsCreativeAssetsBatchRequest")
    val catalogsCreativeAssetsBatchItem = long("catalogsCreativeAssetsBatchItem")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[catalogsCreativeAssetsBatchRequest] ?: 0, row[catalogsCreativeAssetsBatchItem] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(CatalogsCreativeAssetsBatchRequestCatalogsCreativeAssetsBatchItem.catalogsCreativeAssetsBatchRequest, entity.first)
            set(CatalogsCreativeAssetsBatchRequestCatalogsCreativeAssetsBatchItem.catalogsCreativeAssetsBatchItem, entity.second)
        }
    }

}

