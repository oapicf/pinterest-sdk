/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * Catalogs Creative Asset Feed object
 * @param createdAt 
 * @param id 
 * @param updatedAt 
 * @param name A human-friendly name associated to a given feed. This value is currently nullable due to historical reasons. It is expected to become non-nullable in the future.
 * @param format 
 * @param catalogType 
 * @param credentials 
 * @param location The URL where a feed is available for download. This URL is what Pinterest will use to download a feed for processing.
 * @param preferredProcessingSchedule 
 * @param status 
 * @param defaultCurrency 
 * @param defaultLocale The locale used within a feed for product descriptions.
 * @param defaultCountry 
 * @param catalogId Catalog id pertaining to the feed. If not provided, feed will use a default catalog based on type.
 */
object CatalogsCreativeAssetsFeeds : BaseTable<CatalogsCreativeAssetsFeed>("CatalogsCreativeAssetsFeed") {
    val createdAt = datetime("created_at")
    val id = text("id")
    val updatedAt = datetime("updated_at")
    val name = text("name") /* A human-friendly name associated to a given feed. This value is currently nullable due to historical reasons. It is expected to become non-nullable in the future. */
    val format = long("format")
    val catalogType = long("catalog_type")
    val credentials = long("credentials")
    val location = text("location") /* The URL where a feed is available for download. This URL is what Pinterest will use to download a feed for processing. */
    val preferredProcessingSchedule = long("preferred_processing_schedule")
    val status = long("status")
    val defaultCurrency = long("default_currency")
    val defaultLocale = text("default_locale") /* The locale used within a feed for product descriptions. */
    val defaultCountry = long("default_country")
    val catalogId = text("catalog_id") /* Catalog id pertaining to the feed. If not provided, feed will use a default catalog based on type. */

    /**
     * Create an entity of type CatalogsCreativeAssetsFeed from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = CatalogsCreativeAssetsFeed(
        createdAt = row[createdAt] /* java.time.LocalDateTime */,
        id = row[id] ?: "" /* kotlin.String */,
        updatedAt = row[updatedAt] /* java.time.LocalDateTime */,
        name = row[name] ?: "" /* kotlin.String */ /* A human-friendly name associated to a given feed. This value is currently nullable due to historical reasons. It is expected to become non-nullable in the future. */,
        format = CatalogsFormats.createEntity(row, withReferences) /* CatalogsFormat */,
        catalogType = CatalogsTypes.createEntity(row, withReferences) /* CatalogsType */,
        credentials = CatalogsFeedCredentialss.createEntity(row, withReferences) /* CatalogsFeedCredentials */,
        location = row[location] ?: "" /* kotlin.String */ /* The URL where a feed is available for download. This URL is what Pinterest will use to download a feed for processing. */,
        preferredProcessingSchedule = CatalogsFeedProcessingSchedules.createEntity(row, withReferences) /* CatalogsFeedProcessingSchedule */,
        status = CatalogsStatuss.createEntity(row, withReferences) /* CatalogsStatus */,
        defaultCurrency = NullableCurrencys.createEntity(row, withReferences) /* NullableCurrency */,
        defaultLocale = row[defaultLocale] ?: "" /* kotlin.String */ /* The locale used within a feed for product descriptions. */,
        defaultCountry = Countrys.createEntity(row, withReferences) /* Country */,
        catalogId = row[catalogId] ?: "" /* kotlin.String */ /* Catalog id pertaining to the feed. If not provided, feed will use a default catalog based on type. */
    )

    /**
    * Assign all the columns from the entity of type CatalogsCreativeAssetsFeed to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = CatalogsCreativeAssetsFeed()
    * database.update(CatalogsCreativeAssetsFeeds, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: CatalogsCreativeAssetsFeed) {
        this.apply {
            set(CatalogsCreativeAssetsFeeds.createdAt, entity.createdAt)
            set(CatalogsCreativeAssetsFeeds.id, entity.id)
            set(CatalogsCreativeAssetsFeeds.updatedAt, entity.updatedAt)
            set(CatalogsCreativeAssetsFeeds.name, entity.name)
            set(CatalogsCreativeAssetsFeeds.format, entity.format)
            set(CatalogsCreativeAssetsFeeds.catalogType, entity.catalogType)
            set(CatalogsCreativeAssetsFeeds.credentials, entity.credentials)
            set(CatalogsCreativeAssetsFeeds.location, entity.location)
            set(CatalogsCreativeAssetsFeeds.preferredProcessingSchedule, entity.preferredProcessingSchedule)
            set(CatalogsCreativeAssetsFeeds.status, entity.status)
            set(CatalogsCreativeAssetsFeeds.defaultCurrency, entity.defaultCurrency)
            set(CatalogsCreativeAssetsFeeds.defaultLocale, entity.defaultLocale)
            set(CatalogsCreativeAssetsFeeds.defaultCountry, entity.defaultCountry)
            set(CatalogsCreativeAssetsFeeds.catalogId, entity.catalogId)
        }
    }

}


