/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * Request object to list products for a given creative assets catalog_id and product group filter.
 * @param catalogType 
 * @param catalogId Catalog id pertaining to the creative assets product group.
 * @param filters 
 */
object CatalogsCreativeAssetsListProductsByCatalogBasedFilterRequests : BaseTable<CatalogsCreativeAssetsListProductsByCatalogBasedFilterRequest>("CatalogsCreativeAssetsListProductsByCatalogBasedFilterRequest") {
    val catalogType = text("catalog_type").transform({ CatalogsCreativeAssetsListProductsByCatalogBasedFilterRequest.CatalogType.valueOf(it) }, { it.value })
    val catalogId = text("catalog_id") /* Catalog id pertaining to the creative assets product group. */
    val filters = long("filters")

    /**
     * Create an entity of type CatalogsCreativeAssetsListProductsByCatalogBasedFilterRequest from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = CatalogsCreativeAssetsListProductsByCatalogBasedFilterRequest(
        catalogType = row[catalogType] ?: CatalogsCreativeAssetsListProductsByCatalogBasedFilterRequest.CatalogType.valueOf("") /* kotlin.String */,
        catalogId = row[catalogId] ?: "" /* kotlin.String */ /* Catalog id pertaining to the creative assets product group. */,
        filters = CatalogsCreativeAssetsProductGroupFilterss.createEntity(row, withReferences) /* CatalogsCreativeAssetsProductGroupFilters */
    )

    /**
    * Assign all the columns from the entity of type CatalogsCreativeAssetsListProductsByCatalogBasedFilterRequest to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = CatalogsCreativeAssetsListProductsByCatalogBasedFilterRequest()
    * database.update(CatalogsCreativeAssetsListProductsByCatalogBasedFilterRequests, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: CatalogsCreativeAssetsListProductsByCatalogBasedFilterRequest) {
        this.apply {
            set(CatalogsCreativeAssetsListProductsByCatalogBasedFilterRequests.catalogType, entity.catalogType)
            set(CatalogsCreativeAssetsListProductsByCatalogBasedFilterRequests.catalogId, entity.catalogId)
            set(CatalogsCreativeAssetsListProductsByCatalogBasedFilterRequests.filters, entity.filters)
        }
    }

}


