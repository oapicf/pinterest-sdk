/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * 
 * @param partnerIds 
 * @param partnerType 
 */
object DeletePartnersRequests : BaseTable<DeletePartnersRequest>("DeletePartnersRequest") {
    val partnerType = text("partner_type") /* null */

    /**
     * Create an entity of type DeletePartnersRequest from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = DeletePartnersRequest(
        partnerIds = emptyList() /* kotlin.Array<kotlin.String> */,
        partnerType = row[partnerType]  /* kotlin.String? */
    )

    /**
    * Assign all the columns from the entity of type DeletePartnersRequest to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = DeletePartnersRequest()
    * database.update(DeletePartnersRequests, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: DeletePartnersRequest) {
        this.apply {
            set(DeletePartnersRequests.partnerType, entity.partnerType)
        }
    }

}


object DeletePartnersRequestPartnerIds : BaseTable<Pair<kotlin.Long, kotlin.String>>("DeletePartnersRequestPartnerIds") {
    val deletePartnersRequest = long("deletePartnersRequest")
    val partnerIds = text("partnerIds")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.String> =
        Pair(row[deletePartnersRequest] ?: 0, row[partnerIds] ?: "")

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.String>) {
        this.apply {
            set(DeletePartnersRequestPartnerIds.deletePartnersRequest, entity.first)
            set(DeletePartnersRequestPartnerIds.partnerIds, entity.second)
        }
    }

}

