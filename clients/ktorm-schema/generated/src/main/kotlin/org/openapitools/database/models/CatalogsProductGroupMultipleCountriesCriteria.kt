/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * 
 * @param propertyValues 
 * @param negated 
 */
object CatalogsProductGroupMultipleCountriesCriterias : BaseTable<CatalogsProductGroupMultipleCountriesCriteria>("CatalogsProductGroupMultipleCountriesCriteria") {
    val negated = boolean("negated") /* null */

    /**
     * Create an entity of type CatalogsProductGroupMultipleCountriesCriteria from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = CatalogsProductGroupMultipleCountriesCriteria(
        propertyValues = emptyList() /* kotlin.Array<Country> */,
        negated = row[negated] ?: false /* kotlin.Boolean? */
    )

    /**
    * Assign all the columns from the entity of type CatalogsProductGroupMultipleCountriesCriteria to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = CatalogsProductGroupMultipleCountriesCriteria()
    * database.update(CatalogsProductGroupMultipleCountriesCriterias, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: CatalogsProductGroupMultipleCountriesCriteria) {
        this.apply {
            set(CatalogsProductGroupMultipleCountriesCriterias.negated, entity.negated)
        }
    }

}


object CatalogsProductGroupMultipleCountriesCriteriaCountry : BaseTable<Pair<kotlin.Long, kotlin.Long>>("CatalogsProductGroupMultipleCountriesCriteriaCountry") {
    val catalogsProductGroupMultipleCountriesCriteria = long("catalogsProductGroupMultipleCountriesCriteria")
    val country = long("country")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[catalogsProductGroupMultipleCountriesCriteria] ?: 0, row[country] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(CatalogsProductGroupMultipleCountriesCriteriaCountry.catalogsProductGroupMultipleCountriesCriteria, entity.first)
            set(CatalogsProductGroupMultipleCountriesCriteriaCountry.country, entity.second)
        }
    }

}

