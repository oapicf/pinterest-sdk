/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * 
 * @param name Customer list name.
 * @param records Records list. Can be any combination of emails, MAIDs, or IDFAs. Emails must be lowercase and can be plain text or hashed using SHA1, SHA256, or MD5. MAIDs and IDFAs must be hashed with SHA1, SHA256, or MD5.
 * @param listType 
 * @param exceptions Customer list errors.
 */
object CustomerListRequests : BaseTable<CustomerListRequest>("CustomerListRequest") {
    val name = text("name") /* Customer list name. */
    val records = text("records") /* Records list. Can be any combination of emails, MAIDs, or IDFAs. Emails must be lowercase and can be plain text or hashed using SHA1, SHA256, or MD5. MAIDs and IDFAs must be hashed with SHA1, SHA256, or MD5. */
    val listType = long("list_type") /* null */
    val exceptions = blob("exceptions") /* null */ /* Customer list errors. */

    /**
     * Create an entity of type CustomerListRequest from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = CustomerListRequest(
        name = row[name] ?: "" /* kotlin.String */ /* Customer list name. */,
        records = row[records] ?: "" /* kotlin.String */ /* Records list. Can be any combination of emails, MAIDs, or IDFAs. Emails must be lowercase and can be plain text or hashed using SHA1, SHA256, or MD5. MAIDs and IDFAs must be hashed with SHA1, SHA256, or MD5. */,
        listType = UserListTypes.createEntity(row, withReferences) /* UserListType? */,
        exceptions = row[exceptions]  /* kotlin.Any? */ /* Customer list errors. */
    )

    /**
    * Assign all the columns from the entity of type CustomerListRequest to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = CustomerListRequest()
    * database.update(CustomerListRequests, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: CustomerListRequest) {
        this.apply {
            set(CustomerListRequests.name, entity.name)
            set(CustomerListRequests.records, entity.records)
            set(CustomerListRequests.listType, entity.listType)
            set(CustomerListRequests.exceptions, entity.exceptions)
        }
    }

}


