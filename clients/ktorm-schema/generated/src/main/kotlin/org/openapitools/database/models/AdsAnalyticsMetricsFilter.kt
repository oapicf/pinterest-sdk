/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * 
 * @param field 
 * @param operator 
 * @param propertyValues List of values for filtering
 */
object AdsAnalyticsMetricsFilters : BaseTable<AdsAnalyticsMetricsFilter>("AdsAnalyticsMetricsFilter") {
    val field = long("field")
    val operator = long("operator")

    /**
     * Create an entity of type AdsAnalyticsMetricsFilter from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = AdsAnalyticsMetricsFilter(
        field = AdsAnalyticsFilterColumns.createEntity(row, withReferences) /* AdsAnalyticsFilterColumn */,
        operator = AdsAnalyticsFilterOperators.createEntity(row, withReferences) /* AdsAnalyticsFilterOperator */,
        propertyValues = emptyList() /* kotlin.Array<java.math.BigDecimal> */ /* List of values for filtering */
    )

    /**
    * Assign all the columns from the entity of type AdsAnalyticsMetricsFilter to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = AdsAnalyticsMetricsFilter()
    * database.update(AdsAnalyticsMetricsFilters, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: AdsAnalyticsMetricsFilter) {
        this.apply {
            set(AdsAnalyticsMetricsFilters.field, entity.field)
            set(AdsAnalyticsMetricsFilters.operator, entity.operator)
        }
    }

}


object AdsAnalyticsMetricsFilterPropertyValues : BaseTable<Pair<kotlin.Long, java.math.BigDecimal>>("AdsAnalyticsMetricsFilterPropertyValues") {
    val adsAnalyticsMetricsFilter = long("adsAnalyticsMetricsFilter")
    val propertyValues = decimal("propertyValues")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, java.math.BigDecimal> =
        Pair(row[adsAnalyticsMetricsFilter] ?: 0, row[propertyValues] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, java.math.BigDecimal>) {
        this.apply {
            set(AdsAnalyticsMetricsFilterPropertyValues.adsAnalyticsMetricsFilter, entity.first)
            set(AdsAnalyticsMetricsFilterPropertyValues.propertyValues, entity.second)
        }
    }

}

