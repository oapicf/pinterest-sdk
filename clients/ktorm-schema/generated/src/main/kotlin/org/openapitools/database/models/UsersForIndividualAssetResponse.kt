/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * An object containing the permissions a business member has on the asset.
 * @param assetId Unique identifier of a business asset.
 * @param memberId Unique identifier of the business member with asset access.
 * @param permissions Permission levels member or partner has on an asset.
 */
object UsersForIndividualAssetResponses : BaseTable<UsersForIndividualAssetResponse>("UsersForIndividualAssetResponse") {
    val assetId = text("asset_id") /* null */ /* Unique identifier of a business asset. */
    val memberId = text("member_id") /* null */ /* Unique identifier of the business member with asset access. */

    /**
     * Create an entity of type UsersForIndividualAssetResponse from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = UsersForIndividualAssetResponse(
        assetId = row[assetId]  /* kotlin.String? */ /* Unique identifier of a business asset. */,
        memberId = row[memberId]  /* kotlin.String? */ /* Unique identifier of the business member with asset access. */,
        permissions = emptyList() /* kotlin.Array<kotlin.String>? */ /* Permission levels member or partner has on an asset. */
    )

    /**
    * Assign all the columns from the entity of type UsersForIndividualAssetResponse to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = UsersForIndividualAssetResponse()
    * database.update(UsersForIndividualAssetResponses, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: UsersForIndividualAssetResponse) {
        this.apply {
            set(UsersForIndividualAssetResponses.assetId, entity.assetId)
            set(UsersForIndividualAssetResponses.memberId, entity.memberId)
        }
    }

}


object UsersForIndividualAssetResponsePermissions : BaseTable<Pair<kotlin.Long, kotlin.String>>("UsersForIndividualAssetResponsePermissions") {
    val usersForIndividualAssetResponse = long("usersForIndividualAssetResponse")
    val permissions = text("permissions")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.String> =
        Pair(row[usersForIndividualAssetResponse] ?: 0, row[permissions] ?: "")

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.String>) {
        this.apply {
            set(UsersForIndividualAssetResponsePermissions.usersForIndividualAssetResponse, entity.first)
            set(UsersForIndividualAssetResponsePermissions.permissions, entity.second)
        }
    }

}

