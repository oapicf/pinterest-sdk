/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * 
 * @param catalogType 
 * @param itemIds 
 * @param catalogId Catalog id pertaining to the retail item. If not provided, default to oldest retail catalog
 */
object CatalogsRetailItemsFilters : BaseTable<CatalogsRetailItemsFilter>("CatalogsRetailItemsFilter") {
    val catalogType = text("catalog_type").transform({ CatalogsRetailItemsFilter.CatalogType.valueOf(it) }, { it.value })
    val catalogId = text("catalog_id") /* null */ /* Catalog id pertaining to the retail item. If not provided, default to oldest retail catalog */

    /**
     * Create an entity of type CatalogsRetailItemsFilter from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = CatalogsRetailItemsFilter(
        catalogType = row[catalogType] ?: CatalogsRetailItemsFilter.CatalogType.valueOf("") /* kotlin.String */,
        itemIds = emptyList() /* kotlin.Array<kotlin.String> */,
        catalogId = row[catalogId]  /* kotlin.String? */ /* Catalog id pertaining to the retail item. If not provided, default to oldest retail catalog */
    )

    /**
    * Assign all the columns from the entity of type CatalogsRetailItemsFilter to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = CatalogsRetailItemsFilter()
    * database.update(CatalogsRetailItemsFilters, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: CatalogsRetailItemsFilter) {
        this.apply {
            set(CatalogsRetailItemsFilters.catalogType, entity.catalogType)
            set(CatalogsRetailItemsFilters.catalogId, entity.catalogId)
        }
    }

}


object CatalogsRetailItemsFilterItemIds : BaseTable<Pair<kotlin.Long, kotlin.String>>("CatalogsRetailItemsFilterItemIds") {
    val catalogsRetailItemsFilter = long("catalogsRetailItemsFilter")
    val itemIds = text("itemIds")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.String> =
        Pair(row[catalogsRetailItemsFilter] ?: 0, row[itemIds] ?: "")

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.String>) {
        this.apply {
            set(CatalogsRetailItemsFilterItemIds.catalogsRetailItemsFilter, entity.first)
            set(CatalogsRetailItemsFilterItemIds.itemIds, entity.second)
        }
    }

}

