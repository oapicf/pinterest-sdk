/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * 
 * @param productBrand Product brand. For example, \"Parker\".
 * @param productCategory Product category. For example, \"Shoes\".
 * @param productId Product ID. For example, 1414.
 * @param productName Product name. For example, \"Parker Boots\".
 * @param productPrice Product price. For example, \"99.99\".
 * @param productQuantity Product quantity. For example, 2.
 * @param productVariant Product variant. For example, \"Red\".
 * @param productVariantId Product variant ID. For example, \"1414-34832\".
 */
object LineItems : BaseTable<LineItem>("LineItem") {
    val productBrand = text("product_brand") /* null */ /* Product brand. For example, \"Parker\". */
    val productCategory = text("product_category") /* null */ /* Product category. For example, \"Shoes\". */
    val productId = int("product_id") /* null */ /* Product ID. For example, 1414. */
    val productName = text("product_name") /* null */ /* Product name. For example, \"Parker Boots\". */
    val productPrice = text("product_price") /* null */ /* Product price. For example, \"99.99\". */
    val productQuantity = int("product_quantity") /* null */ /* Product quantity. For example, 2. */
    val productVariant = text("product_variant") /* null */ /* Product variant. For example, \"Red\". */
    val productVariantId = text("product_variant_id") /* null */ /* Product variant ID. For example, \"1414-34832\". */

    /**
     * Create an entity of type LineItem from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = LineItem(
        productBrand = row[productBrand]  /* kotlin.String? */ /* Product brand. For example, \"Parker\". */,
        productCategory = row[productCategory]  /* kotlin.String? */ /* Product category. For example, \"Shoes\". */,
        productId = row[productId]  /* kotlin.Int? */ /* Product ID. For example, 1414. */,
        productName = row[productName]  /* kotlin.String? */ /* Product name. For example, \"Parker Boots\". */,
        productPrice = row[productPrice]  /* kotlin.String? */ /* Product price. For example, \"99.99\". */,
        productQuantity = row[productQuantity]  /* kotlin.Int? */ /* Product quantity. For example, 2. */,
        productVariant = row[productVariant]  /* kotlin.String? */ /* Product variant. For example, \"Red\". */,
        productVariantId = row[productVariantId]  /* kotlin.String? */ /* Product variant ID. For example, \"1414-34832\". */
    )

    /**
    * Assign all the columns from the entity of type LineItem to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = LineItem()
    * database.update(LineItems, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: LineItem) {
        this.apply {
            set(LineItems.productBrand, entity.productBrand)
            set(LineItems.productCategory, entity.productCategory)
            set(LineItems.productId, entity.productId)
            set(LineItems.productName, entity.productName)
            set(LineItems.productPrice, entity.productPrice)
            set(LineItems.productQuantity, entity.productQuantity)
            set(LineItems.productVariant, entity.productVariant)
            set(LineItems.productVariantId, entity.productVariantId)
        }
    }

}


