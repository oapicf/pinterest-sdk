/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * 
 * @param id The ID of this ad.
 * @param adGroupId ID of the ad group that contains the ad.
 * @param androidDeepLink Deep link URL for Android devices.
 * @param carouselAndroidDeepLinks Comma-separated deep links for the carousel pin on Android.
 * @param carouselDestinationUrls Comma-separated destination URLs for the carousel pin to promote.
 * @param carouselIosDeepLinks Comma-separated deep links for the carousel pin on iOS.
 * @param clickTrackingUrl Tracking url for the ad clicks.
 * @param creativeType 
 * @param destinationUrl Destination URL.
 * @param iosDeepLink Deep link URL for iOS devices.
 * @param isPinDeleted Is original pin deleted?
 * @param isRemovable Is pin repinnable?
 * @param name Name of the ad - 255 chars max.
 * @param status 
 * @param trackingUrls 
 * @param viewTrackingUrl Tracking URL for ad impressions.
 * @param leadFormId Lead form ID for lead ad generation.
 * @param gridClickType 
 * @param customizableCtaType Select a call to action (CTA) to display below your ad. Available only for ads with direct links enabled. CTA options for consideration and conversion campaigns are LEARN_MORE, SHOP_NOW, BOOK_NOW, SIGN_UP, VISIT_SITE, BUY_NOW, GET_OFFER, ORDER_NOW, ADD_TO_CART (for conversion campaigns with add to cart conversion events only)
 * @param quizPinData Before creating a quiz ad, you must create an organic Pin using POST/Create Pin for each result in the quiz. Quiz ads cannot be saved by a Pinner. Quiz ad results can be saved.
 * @param pinId Pin ID. This field may only be updated for draft ads.
 */
object AdUpdateRequests : BaseTable<AdUpdateRequest>("AdUpdateRequest") {
    val id = text("id") /* The ID of this ad. */
    val adGroupId = text("ad_group_id") /* null */ /* ID of the ad group that contains the ad. */
    val androidDeepLink = text("android_deep_link") /* null */ /* Deep link URL for Android devices. */
    val clickTrackingUrl = text("click_tracking_url") /* null */ /* Tracking url for the ad clicks. */
    val creativeType = long("creative_type") /* null */
    val destinationUrl = text("destination_url") /* null */ /* Destination URL. */
    val iosDeepLink = text("ios_deep_link") /* null */ /* Deep link URL for iOS devices. */
    val isPinDeleted = boolean("is_pin_deleted") /* null */ /* Is original pin deleted? */
    val isRemovable = boolean("is_removable") /* null */ /* Is pin repinnable? */
    val name = text("name") /* null */ /* Name of the ad - 255 chars max. */
    val status = long("status") /* null */
    val trackingUrls = long("tracking_urls") /* null */
    val viewTrackingUrl = text("view_tracking_url") /* null */ /* Tracking URL for ad impressions. */
    val leadFormId = text("lead_form_id") /* null */ /* Lead form ID for lead ad generation. */
    val gridClickType = long("grid_click_type") /* null */
    val customizableCtaType = text("customizable_cta_type").transform({ AdUpdateRequest.CustomizableCtaType.valueOf(it ?: "GET_OFFER") }, { it.value }) /* null */ /* Select a call to action (CTA) to display below your ad. Available only for ads with direct links enabled. CTA options for consideration and conversion campaigns are LEARN_MORE, SHOP_NOW, BOOK_NOW, SIGN_UP, VISIT_SITE, BUY_NOW, GET_OFFER, ORDER_NOW, ADD_TO_CART (for conversion campaigns with add to cart conversion events only) */

    val quizPinData = long("quiz_pin_data") /* null */ /* Before creating a quiz ad, you must create an organic Pin using POST/Create Pin for each result in the quiz. Quiz ads cannot be saved by a Pinner. Quiz ad results can be saved. */
    val pinId = text("pin_id") /* null */ /* Pin ID. This field may only be updated for draft ads. */

    /**
     * Create an entity of type AdUpdateRequest from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = AdUpdateRequest(
        id = row[id] ?: "" /* kotlin.String */ /* The ID of this ad. */,
        adGroupId = row[adGroupId]  /* kotlin.String? */ /* ID of the ad group that contains the ad. */,
        androidDeepLink = row[androidDeepLink]  /* kotlin.String? */ /* Deep link URL for Android devices. */,
        carouselAndroidDeepLinks = emptyList() /* kotlin.Array<kotlin.String>? */ /* Comma-separated deep links for the carousel pin on Android. */,
        carouselDestinationUrls = emptyList() /* kotlin.Array<kotlin.String>? */ /* Comma-separated destination URLs for the carousel pin to promote. */,
        carouselIosDeepLinks = emptyList() /* kotlin.Array<kotlin.String>? */ /* Comma-separated deep links for the carousel pin on iOS. */,
        clickTrackingUrl = row[clickTrackingUrl]  /* kotlin.String? */ /* Tracking url for the ad clicks. */,
        creativeType = CreativeTypes.createEntity(row, withReferences) /* CreativeType? */,
        destinationUrl = row[destinationUrl]  /* kotlin.String? */ /* Destination URL. */,
        iosDeepLink = row[iosDeepLink]  /* kotlin.String? */ /* Deep link URL for iOS devices. */,
        isPinDeleted = row[isPinDeleted]  /* kotlin.Boolean? */ /* Is original pin deleted? */,
        isRemovable = row[isRemovable]  /* kotlin.Boolean? */ /* Is pin repinnable? */,
        name = row[name]  /* kotlin.String? */ /* Name of the ad - 255 chars max. */,
        status = EntityStatuss.createEntity(row, withReferences) /* EntityStatus? */,
        trackingUrls = TrackingUrlss.createEntity(row, withReferences) /* TrackingUrls? */,
        viewTrackingUrl = row[viewTrackingUrl]  /* kotlin.String? */ /* Tracking URL for ad impressions. */,
        leadFormId = row[leadFormId]  /* kotlin.String? */ /* Lead form ID for lead ad generation. */,
        gridClickType = GridClickTypes.createEntity(row, withReferences) /* GridClickType? */,
        customizableCtaType = row[customizableCtaType]  /* kotlin.String? */ /* Select a call to action (CTA) to display below your ad. Available only for ads with direct links enabled. CTA options for consideration and conversion campaigns are LEARN_MORE, SHOP_NOW, BOOK_NOW, SIGN_UP, VISIT_SITE, BUY_NOW, GET_OFFER, ORDER_NOW, ADD_TO_CART (for conversion campaigns with add to cart conversion events only) */,
        quizPinData = QuizPinDatas.createEntity(row, withReferences) /* QuizPinData? */ /* Before creating a quiz ad, you must create an organic Pin using POST/Create Pin for each result in the quiz. Quiz ads cannot be saved by a Pinner. Quiz ad results can be saved. */,
        pinId = row[pinId]  /* kotlin.String? */ /* Pin ID. This field may only be updated for draft ads. */
    )

    /**
    * Assign all the columns from the entity of type AdUpdateRequest to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = AdUpdateRequest()
    * database.update(AdUpdateRequests, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: AdUpdateRequest) {
        this.apply {
            set(AdUpdateRequests.id, entity.id)
            set(AdUpdateRequests.adGroupId, entity.adGroupId)
            set(AdUpdateRequests.androidDeepLink, entity.androidDeepLink)
            set(AdUpdateRequests.clickTrackingUrl, entity.clickTrackingUrl)
            set(AdUpdateRequests.creativeType, entity.creativeType)
            set(AdUpdateRequests.destinationUrl, entity.destinationUrl)
            set(AdUpdateRequests.iosDeepLink, entity.iosDeepLink)
            set(AdUpdateRequests.isPinDeleted, entity.isPinDeleted)
            set(AdUpdateRequests.isRemovable, entity.isRemovable)
            set(AdUpdateRequests.name, entity.name)
            set(AdUpdateRequests.status, entity.status)
            set(AdUpdateRequests.trackingUrls, entity.trackingUrls)
            set(AdUpdateRequests.viewTrackingUrl, entity.viewTrackingUrl)
            set(AdUpdateRequests.leadFormId, entity.leadFormId)
            set(AdUpdateRequests.gridClickType, entity.gridClickType)
            set(AdUpdateRequests.customizableCtaType, entity.customizableCtaType)
            set(AdUpdateRequests.quizPinData, entity.quizPinData)
            set(AdUpdateRequests.pinId, entity.pinId)
        }
    }

}


object AdUpdateRequestCarouselAndroidDeepLinks : BaseTable<Pair<kotlin.Long, kotlin.String>>("AdUpdateRequestCarouselAndroidDeepLinks") {
    val adUpdateRequest = long("adUpdateRequest")
    val carouselAndroidDeepLinks = text("carouselAndroidDeepLinks")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.String> =
        Pair(row[adUpdateRequest] ?: 0, row[carouselAndroidDeepLinks] ?: "")

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.String>) {
        this.apply {
            set(AdUpdateRequestCarouselAndroidDeepLinks.adUpdateRequest, entity.first)
            set(AdUpdateRequestCarouselAndroidDeepLinks.carouselAndroidDeepLinks, entity.second)
        }
    }

}

object AdUpdateRequestCarouselDestinationUrls : BaseTable<Pair<kotlin.Long, kotlin.String>>("AdUpdateRequestCarouselDestinationUrls") {
    val adUpdateRequest = long("adUpdateRequest")
    val carouselDestinationUrls = text("carouselDestinationUrls")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.String> =
        Pair(row[adUpdateRequest] ?: 0, row[carouselDestinationUrls] ?: "")

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.String>) {
        this.apply {
            set(AdUpdateRequestCarouselDestinationUrls.adUpdateRequest, entity.first)
            set(AdUpdateRequestCarouselDestinationUrls.carouselDestinationUrls, entity.second)
        }
    }

}

object AdUpdateRequestCarouselIosDeepLinks : BaseTable<Pair<kotlin.Long, kotlin.String>>("AdUpdateRequestCarouselIosDeepLinks") {
    val adUpdateRequest = long("adUpdateRequest")
    val carouselIosDeepLinks = text("carouselIosDeepLinks")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.String> =
        Pair(row[adUpdateRequest] ?: 0, row[carouselIosDeepLinks] ?: "")

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.String>) {
        this.apply {
            set(AdUpdateRequestCarouselIosDeepLinks.adUpdateRequest, entity.first)
            set(AdUpdateRequestCarouselIosDeepLinks.carouselIosDeepLinks, entity.second)
        }
    }

}

