/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * 
 * @param catalogType 
 * @param id ID of the catalog product group.
 * @param filters 
 * @param catalogId Catalog id pertaining to the retail product group.
 * @param feedId id of the catalogs feed belonging to this catalog product group
 * @param name Name of catalog product group
 * @param description 
 * @param isFeatured boolean indicator of whether the product group is being featured or not
 * @param type 
 * @param status 
 * @param createdAt Unix timestamp in seconds of when catalog product group was created.
 * @param updatedAt Unix timestamp in seconds of last time catalog product group was updated.
 * @param country 
 * @param locale 
 */
object CatalogsRetailProductGroups : BaseTable<CatalogsRetailProductGroup>("CatalogsRetailProductGroup") {
    val catalogType = text("catalog_type").transform({ CatalogsRetailProductGroup.CatalogType.valueOf(it) }, { it.value })
    val id = text("id") /* ID of the catalog product group. */
    val filters = long("filters")
    val catalogId = text("catalog_id") /* Catalog id pertaining to the retail product group. */
    val feedId = text("feed_id") /* id of the catalogs feed belonging to this catalog product group */
    val name = text("name") /* null */ /* Name of catalog product group */
    val description = text("description") /* null */
    @Deprecated(message = "This property is deprecated.")
    val isFeatured = boolean("is_featured") /* null */ /* boolean indicator of whether the product group is being featured or not */
    val type = long("type") /* null */
    val status = long("status") /* null */
    val createdAt = int("created_at") /* null */ /* Unix timestamp in seconds of when catalog product group was created. */
    val updatedAt = int("updated_at") /* null */ /* Unix timestamp in seconds of last time catalog product group was updated. */
    val country = text("country") /* null */
    val locale = text("locale") /* null */

    /**
     * Create an entity of type CatalogsRetailProductGroup from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = CatalogsRetailProductGroup(
        catalogType = row[catalogType] ?: CatalogsRetailProductGroup.CatalogType.valueOf("") /* kotlin.String */,
        id = row[id] ?: "" /* kotlin.String */ /* ID of the catalog product group. */,
        filters = CatalogsProductGroupFilterss.createEntity(row, withReferences) /* CatalogsProductGroupFilters */,
        catalogId = row[catalogId] ?: "" /* kotlin.String */ /* Catalog id pertaining to the retail product group. */,
        feedId = row[feedId] ?: "" /* kotlin.String */ /* id of the catalogs feed belonging to this catalog product group */,
        name = row[name]  /* kotlin.String? */ /* Name of catalog product group */,
        description = row[description]  /* kotlin.String? */,
        isFeatured = row[isFeatured]  /* kotlin.Boolean? */ /* boolean indicator of whether the product group is being featured or not */,
        type = CatalogsProductGroupTypes.createEntity(row, withReferences) /* CatalogsProductGroupType? */,
        status = CatalogsProductGroupStatuss.createEntity(row, withReferences) /* CatalogsProductGroupStatus? */,
        createdAt = row[createdAt]  /* kotlin.Int? */ /* Unix timestamp in seconds of when catalog product group was created. */,
        updatedAt = row[updatedAt]  /* kotlin.Int? */ /* Unix timestamp in seconds of last time catalog product group was updated. */,
        country = row[country]  /* kotlin.String? */,
        locale = row[locale]  /* kotlin.String? */
    )

    /**
    * Assign all the columns from the entity of type CatalogsRetailProductGroup to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = CatalogsRetailProductGroup()
    * database.update(CatalogsRetailProductGroups, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: CatalogsRetailProductGroup) {
        this.apply {
            set(CatalogsRetailProductGroups.catalogType, entity.catalogType)
            set(CatalogsRetailProductGroups.id, entity.id)
            set(CatalogsRetailProductGroups.filters, entity.filters)
            set(CatalogsRetailProductGroups.catalogId, entity.catalogId)
            set(CatalogsRetailProductGroups.feedId, entity.feedId)
            set(CatalogsRetailProductGroups.name, entity.name)
            set(CatalogsRetailProductGroups.description, entity.description)
            set(CatalogsRetailProductGroups.isFeatured, entity.isFeatured)
            set(CatalogsRetailProductGroups.type, entity.type)
            set(CatalogsRetailProductGroups.status, entity.status)
            set(CatalogsRetailProductGroups.createdAt, entity.createdAt)
            set(CatalogsRetailProductGroups.updatedAt, entity.updatedAt)
            set(CatalogsRetailProductGroups.country, entity.country)
            set(CatalogsRetailProductGroups.locale, entity.locale)
        }
    }

}


