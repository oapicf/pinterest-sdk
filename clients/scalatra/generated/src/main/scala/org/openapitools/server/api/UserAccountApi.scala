/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 */


package org.openapitools.server.api

import org.openapitools.server.model.Account
import org.openapitools.server.model.AnalyticsMetricsResponse
import org.openapitools.server.model.BoardsUserFollowsList200Response
import org.openapitools.server.model.Error
import org.openapitools.server.model.FollowUserRequest
import org.openapitools.server.model.FollowersList200Response
import org.openapitools.server.model.LinkedBusiness
import java.time.LocalDate
import org.openapitools.server.model.TopPinsAnalyticsResponse
import org.openapitools.server.model.TopVideoPinsAnalyticsResponse
import org.openapitools.server.model.UserAccountFollowedInterests200Response
import org.openapitools.server.model.UserFollowingFeedType
import org.openapitools.server.model.UserFollowingGet200Response
import org.openapitools.server.model.UserSummary
import org.openapitools.server.model.UserWebsiteSummary
import org.openapitools.server.model.UserWebsiteVerificationCode
import org.openapitools.server.model.UserWebsiteVerifyRequest
import org.openapitools.server.model.UserWebsitesGet200Response

import java.io.File

import org.scalatra.ScalatraServlet
import org.scalatra.swagger._
import org.json4s._
import org.json4s.JsonDSL._
import org.scalatra.json.{ JValueResult, JacksonJsonSupport }
import org.scalatra.servlet.{ FileUploadSupport, MultipartConfig, SizeConstraintExceededException }

import scala.collection.JavaConverters._

class UserAccountApi(implicit val swagger: Swagger) extends ScalatraServlet
  with FileUploadSupport
  with JacksonJsonSupport
  with SwaggerSupport {
  protected implicit val jsonFormats: Formats = DefaultFormats

  protected val applicationDescription: String = "UserAccountApi"

  before() {
    contentType = formats("json")
    response.headers += ("Access-Control-Allow-Origin" -> "*")
  }
  

  val boardsUserFollowsListOperation = (apiOperation[BoardsUserFollowsList200Response]("boardsUserFollowsList")
    summary "List following boards"
    parameters(queryParam[String]("bookmark").description("").optional, queryParam[Int]("pageSize").description("").optional.defaultValue(25), queryParam[Boolean]("explicitFollowing").description("").optional.defaultValue(false), queryParam[String]("adAccountId").description("").optional)
  )

  get("/user_account/following/boards", operation(boardsUserFollowsListOperation)) {
            val bookmark = params.getAs[String]("bookmark")

    //println("bookmark: " + bookmark)
            val pageSize = params.getAs[Int]("pageSize")

    //println("pageSize: " + pageSize)
            val explicitFollowing = params.getAs[Boolean]("explicitFollowing")

    //println("explicitFollowing: " + explicitFollowing)
            val adAccountId = params.getAs[String]("adAccountId")

    //println("adAccountId: " + adAccountId)
  }

  

  val followUserUpdateOperation = (apiOperation[UserSummary]("followUserUpdate")
    summary "Follow user"
    parameters(pathParam[String]("username").description(""), bodyParam[FollowUserRequest]("followUserRequest").description(""))
  )

  post("/user_account/following/:username", operation(followUserUpdateOperation)) {
    val username = params.getOrElse("username", halt(400))
    //println("username: " + username)
    //println("followUserRequest: " + followUserRequest)
  }

  

  val followersListOperation = (apiOperation[FollowersList200Response]("followersList")
    summary "List followers"
    parameters(queryParam[String]("bookmark").description("").optional, queryParam[Int]("pageSize").description("").optional.defaultValue(25))
  )

  get("/user_account/followers", operation(followersListOperation)) {
            val bookmark = params.getAs[String]("bookmark")

    //println("bookmark: " + bookmark)
            val pageSize = params.getAs[Int]("pageSize")

    //println("pageSize: " + pageSize)
  }

  

  val linkedBusinessAccountsGetOperation = (apiOperation[List[LinkedBusiness]]("linkedBusinessAccountsGet")
    summary "List linked businesses"
    parameters()
  )

  get("/user_account/businesses", operation(linkedBusinessAccountsGetOperation)) {
  }

  

  val unverifyWebsiteDeleteOperation = (apiOperation[Unit]("unverifyWebsiteDelete")
    summary "Unverify website"
    parameters(queryParam[String]("website").description(""))
  )

  delete("/user_account/websites", operation(unverifyWebsiteDeleteOperation)) {
            val website = params.getAs[String]("website")

    //println("website: " + website)
  }

  

  val userAccountAnalyticsOperation = (apiOperation[Map[String, AnalyticsMetricsResponse]]("userAccountAnalytics")
    summary "Get user account analytics"
    parameters(queryParam[LocalDate]("startDate").description(""), queryParam[LocalDate]("endDate").description(""), queryParam[String]("fromClaimedContent").description("").optional.defaultValue(BOTH), queryParam[String]("pinFormat").description("").optional.defaultValue(ALL), queryParam[String]("appTypes").description("").optional.defaultValue(ALL), queryParam[String]("contentType").description("").optional.defaultValue(ALL), queryParam[String]("source").description("").optional.defaultValue(ALL), queryParam[List[String]]("metricTypes").description("").optional.defaultValue(List.empty[String] ), queryParam[String]("splitField").description("").optional.defaultValue(NO_SPLIT), queryParam[String]("adAccountId").description("").optional)
  )

  get("/user_account/analytics", operation(userAccountAnalyticsOperation)) {
            val startDate = params.getAs[LocalDate]("startDate")

    //println("startDate: " + startDate)
            val endDate = params.getAs[LocalDate]("endDate")

    //println("endDate: " + endDate)
            val fromClaimedContent = params.getAs[String]("fromClaimedContent")

    //println("fromClaimedContent: " + fromClaimedContent)
            val pinFormat = params.getAs[String]("pinFormat")

    //println("pinFormat: " + pinFormat)
            val appTypes = params.getAs[String]("appTypes")

    //println("appTypes: " + appTypes)
            val contentType = params.getAs[String]("contentType")

    //println("contentType: " + contentType)
            val source = params.getAs[String]("source")

    //println("source: " + source)
        val metricTypesString = params.getAs[String]("metricTypes")
    val metricTypes = if("csv" == "default" || "csv" == "csv") {
      metricTypesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("metricTypes: " + metricTypes)
            val splitField = params.getAs[String]("splitField")

    //println("splitField: " + splitField)
            val adAccountId = params.getAs[String]("adAccountId")

    //println("adAccountId: " + adAccountId)
  }

  

  val userAccountAnalyticsTopPinsOperation = (apiOperation[TopPinsAnalyticsResponse]("userAccountAnalyticsTopPins")
    summary "Get user account top pins analytics"
    parameters(queryParam[LocalDate]("startDate").description(""), queryParam[LocalDate]("endDate").description(""), queryParam[String]("sortBy").description(""), queryParam[String]("fromClaimedContent").description("").optional.defaultValue(BOTH), queryParam[String]("pinFormat").description("").optional.defaultValue(ALL), queryParam[String]("appTypes").description("").optional.defaultValue(ALL), queryParam[String]("contentType").description("").optional.defaultValue(ALL), queryParam[String]("source").description("").optional.defaultValue(ALL), queryParam[List[String]]("metricTypes").description("").optional.defaultValue(List.empty[String] ), queryParam[Int]("numOfPins").description("").optional.defaultValue(10), queryParam[Int]("createdInLastNDays").description("").optional, queryParam[String]("adAccountId").description("").optional)
  )

  get("/user_account/analytics/top_pins", operation(userAccountAnalyticsTopPinsOperation)) {
            val startDate = params.getAs[LocalDate]("startDate")

    //println("startDate: " + startDate)
            val endDate = params.getAs[LocalDate]("endDate")

    //println("endDate: " + endDate)
            val sortBy = params.getAs[String]("sortBy")

    //println("sortBy: " + sortBy)
            val fromClaimedContent = params.getAs[String]("fromClaimedContent")

    //println("fromClaimedContent: " + fromClaimedContent)
            val pinFormat = params.getAs[String]("pinFormat")

    //println("pinFormat: " + pinFormat)
            val appTypes = params.getAs[String]("appTypes")

    //println("appTypes: " + appTypes)
            val contentType = params.getAs[String]("contentType")

    //println("contentType: " + contentType)
            val source = params.getAs[String]("source")

    //println("source: " + source)
        val metricTypesString = params.getAs[String]("metricTypes")
    val metricTypes = if("csv" == "default" || "csv" == "csv") {
      metricTypesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("metricTypes: " + metricTypes)
            val numOfPins = params.getAs[Int]("numOfPins")

    //println("numOfPins: " + numOfPins)
            val createdInLastNDays = params.getAs[Int]("createdInLastNDays")

    //println("createdInLastNDays: " + createdInLastNDays)
            val adAccountId = params.getAs[String]("adAccountId")

    //println("adAccountId: " + adAccountId)
  }

  

  val userAccountAnalyticsTopVideoPinsOperation = (apiOperation[TopVideoPinsAnalyticsResponse]("userAccountAnalyticsTopVideoPins")
    summary "Get user account top video pins analytics"
    parameters(queryParam[LocalDate]("startDate").description(""), queryParam[LocalDate]("endDate").description(""), queryParam[String]("sortBy").description(""), queryParam[String]("fromClaimedContent").description("").optional.defaultValue(BOTH), queryParam[String]("pinFormat").description("").optional.defaultValue(ALL), queryParam[String]("appTypes").description("").optional.defaultValue(ALL), queryParam[String]("contentType").description("").optional.defaultValue(ALL), queryParam[String]("source").description("").optional.defaultValue(ALL), queryParam[List[String]]("metricTypes").description("").optional.defaultValue(List.empty[String] ), queryParam[Int]("numOfPins").description("").optional.defaultValue(10), queryParam[Int]("createdInLastNDays").description("").optional, queryParam[String]("adAccountId").description("").optional)
  )

  get("/user_account/analytics/top_video_pins", operation(userAccountAnalyticsTopVideoPinsOperation)) {
            val startDate = params.getAs[LocalDate]("startDate")

    //println("startDate: " + startDate)
            val endDate = params.getAs[LocalDate]("endDate")

    //println("endDate: " + endDate)
            val sortBy = params.getAs[String]("sortBy")

    //println("sortBy: " + sortBy)
            val fromClaimedContent = params.getAs[String]("fromClaimedContent")

    //println("fromClaimedContent: " + fromClaimedContent)
            val pinFormat = params.getAs[String]("pinFormat")

    //println("pinFormat: " + pinFormat)
            val appTypes = params.getAs[String]("appTypes")

    //println("appTypes: " + appTypes)
            val contentType = params.getAs[String]("contentType")

    //println("contentType: " + contentType)
            val source = params.getAs[String]("source")

    //println("source: " + source)
        val metricTypesString = params.getAs[String]("metricTypes")
    val metricTypes = if("csv" == "default" || "csv" == "csv") {
      metricTypesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("metricTypes: " + metricTypes)
            val numOfPins = params.getAs[Int]("numOfPins")

    //println("numOfPins: " + numOfPins)
            val createdInLastNDays = params.getAs[Int]("createdInLastNDays")

    //println("createdInLastNDays: " + createdInLastNDays)
            val adAccountId = params.getAs[String]("adAccountId")

    //println("adAccountId: " + adAccountId)
  }

  

  val userAccountFollowedInterestsOperation = (apiOperation[UserAccountFollowedInterests200Response]("userAccountFollowedInterests")
    summary "List following interests"
    parameters(pathParam[String]("username").description(""), queryParam[String]("bookmark").description("").optional, queryParam[Int]("pageSize").description("").optional.defaultValue(25))
  )

  get("/users/:username/interests/follow", operation(userAccountFollowedInterestsOperation)) {
    val username = params.getOrElse("username", halt(400))
    //println("username: " + username)
            val bookmark = params.getAs[String]("bookmark")

    //println("bookmark: " + bookmark)
            val pageSize = params.getAs[Int]("pageSize")

    //println("pageSize: " + pageSize)
  }

  

  val userAccountGetOperation = (apiOperation[Account]("userAccountGet")
    summary "Get user account"
    parameters(queryParam[String]("adAccountId").description("").optional)
  )

  get("/user_account", operation(userAccountGetOperation)) {
            val adAccountId = params.getAs[String]("adAccountId")

    //println("adAccountId: " + adAccountId)
  }

  

  val userFollowingGetOperation = (apiOperation[UserFollowingGet200Response]("userFollowingGet")
    summary "List following"
    parameters(queryParam[String]("bookmark").description("").optional, queryParam[Int]("pageSize").description("").optional.defaultValue(25), queryParam[UserFollowingFeedType]("feedType").description("").optional, queryParam[Boolean]("explicitFollowing").description("").optional.defaultValue(false), queryParam[String]("adAccountId").description("").optional)
  )

  get("/user_account/following", operation(userFollowingGetOperation)) {
            val bookmark = params.getAs[String]("bookmark")

    //println("bookmark: " + bookmark)
            val pageSize = params.getAs[Int]("pageSize")

    //println("pageSize: " + pageSize)
            val feedType = params.getAs[UserFollowingFeedType]("feedType")

    //println("feedType: " + feedType)
            val explicitFollowing = params.getAs[Boolean]("explicitFollowing")

    //println("explicitFollowing: " + explicitFollowing)
            val adAccountId = params.getAs[String]("adAccountId")

    //println("adAccountId: " + adAccountId)
  }

  

  val userWebsitesGetOperation = (apiOperation[UserWebsitesGet200Response]("userWebsitesGet")
    summary "Get user websites"
    parameters(queryParam[String]("bookmark").description("").optional, queryParam[Int]("pageSize").description("").optional.defaultValue(25))
  )

  get("/user_account/websites", operation(userWebsitesGetOperation)) {
            val bookmark = params.getAs[String]("bookmark")

    //println("bookmark: " + bookmark)
            val pageSize = params.getAs[Int]("pageSize")

    //println("pageSize: " + pageSize)
  }

  

  val verifyWebsiteUpdateOperation = (apiOperation[UserWebsiteSummary]("verifyWebsiteUpdate")
    summary "Verify website"
    parameters(bodyParam[UserWebsiteVerifyRequest]("userWebsiteVerifyRequest").description(""), queryParam[String]("adAccountId").description("").optional)
  )

  post("/user_account/websites", operation(verifyWebsiteUpdateOperation)) {
    //println("userWebsiteVerifyRequest: " + userWebsiteVerifyRequest)
            val adAccountId = params.getAs[String]("adAccountId")

    //println("adAccountId: " + adAccountId)
  }

  

  val websiteVerificationGetOperation = (apiOperation[UserWebsiteVerificationCode]("websiteVerificationGet")
    summary "Get user verification code for website claiming"
    parameters(queryParam[String]("adAccountId").description("").optional)
  )

  get("/user_account/websites/verification", operation(websiteVerificationGetOperation)) {
            val adAccountId = params.getAs[String]("adAccountId")

    //println("adAccountId: " + adAccountId)
  }

}
