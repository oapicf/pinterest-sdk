/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 */


package org.openapitools.server.api

import org.openapitools.server.model.Catalog
import org.openapitools.server.model.CatalogsCreateReportResponse
import org.openapitools.server.model.CatalogsCreateRequest
import org.openapitools.server.model.CatalogsFeed
import org.openapitools.server.model.CatalogsFeedIngestion
import org.openapitools.server.model.CatalogsItemValidationIssue
import org.openapitools.server.model.CatalogsItems
import org.openapitools.server.model.CatalogsItemsBatch
import org.openapitools.server.model.CatalogsItemsFilters
import org.openapitools.server.model.CatalogsItemsRequest
import org.openapitools.server.model.CatalogsList200Response
import org.openapitools.server.model.CatalogsListProductsByFilterRequest
import org.openapitools.server.model.CatalogsProductGroupPinsList200Response
import org.openapitools.server.model.CatalogsProductGroupProductCountsVertical
import org.openapitools.server.model.CatalogsProductGroupsList200Response
import org.openapitools.server.model.CatalogsProductGroupsUpdateRequest
import org.openapitools.server.model.CatalogsReport
import org.openapitools.server.model.CatalogsReportParameters
import org.openapitools.server.model.CatalogsVerticalProductGroup
import org.openapitools.server.model.Error
import org.openapitools.server.model.FeedProcessingResultsList200Response
import org.openapitools.server.model.FeedsCreateRequest
import org.openapitools.server.model.FeedsList200Response
import org.openapitools.server.model.FeedsUpdateRequest
import org.openapitools.server.model.ItemsBatchPostRequest
import org.openapitools.server.model.ItemsIssuesList200Response
import org.openapitools.server.model.MultipleProductGroupsInner
import org.openapitools.server.model.ReportsStats200Response

import java.io.File

import org.scalatra.ScalatraServlet
import org.scalatra.swagger._
import org.json4s._
import org.json4s.JsonDSL._
import org.scalatra.json.{ JValueResult, JacksonJsonSupport }
import org.scalatra.servlet.{ FileUploadSupport, MultipartConfig, SizeConstraintExceededException }

import scala.collection.JavaConverters._

class CatalogsApi(implicit val swagger: Swagger) extends ScalatraServlet
  with FileUploadSupport
  with JacksonJsonSupport
  with SwaggerSupport {
  protected implicit val jsonFormats: Formats = DefaultFormats

  protected val applicationDescription: String = "CatalogsApi"

  before() {
    contentType = formats("json")
    response.headers += ("Access-Control-Allow-Origin" -> "*")
  }
  

  val catalogsCreateOperation = (apiOperation[Catalog]("catalogsCreate")
    summary "Create catalog"
    parameters(bodyParam[CatalogsCreateRequest]("catalogsCreateRequest").description(""), queryParam[String]("adAccountId").description("").optional)
  )

  post("/catalogs", operation(catalogsCreateOperation)) {
    //println("catalogsCreateRequest: " + catalogsCreateRequest)
            val adAccountId = params.getAs[String]("adAccountId")

    //println("adAccountId: " + adAccountId)
  }

  

  val catalogsListOperation = (apiOperation[CatalogsList200Response]("catalogsList")
    summary "List catalogs"
    parameters(queryParam[String]("bookmark").description("").optional, queryParam[Int]("pageSize").description("").optional.defaultValue(25), queryParam[String]("adAccountId").description("").optional)
  )

  get("/catalogs", operation(catalogsListOperation)) {
            val bookmark = params.getAs[String]("bookmark")

    //println("bookmark: " + bookmark)
            val pageSize = params.getAs[Int]("pageSize")

    //println("pageSize: " + pageSize)
            val adAccountId = params.getAs[String]("adAccountId")

    //println("adAccountId: " + adAccountId)
  }

  

  val catalogsProductGroupPinsListOperation = (apiOperation[CatalogsProductGroupPinsList200Response]("catalogsProductGroupPinsList")
    summary "List products by product group"
    parameters(pathParam[String]("productGroupId").description(""), queryParam[String]("bookmark").description("").optional, queryParam[Int]("pageSize").description("").optional.defaultValue(25), queryParam[String]("adAccountId").description("").optional, queryParam[Boolean]("pinMetrics").description("").optional.defaultValue(false))
  )

  get("/catalogs/product_groups/:product_group_id/products", operation(catalogsProductGroupPinsListOperation)) {
    val productGroupId = params.getOrElse("productGroupId", halt(400))
    //println("productGroupId: " + productGroupId)
            val bookmark = params.getAs[String]("bookmark")

    //println("bookmark: " + bookmark)
            val pageSize = params.getAs[Int]("pageSize")

    //println("pageSize: " + pageSize)
            val adAccountId = params.getAs[String]("adAccountId")

    //println("adAccountId: " + adAccountId)
            val pinMetrics = params.getAs[Boolean]("pinMetrics")

    //println("pinMetrics: " + pinMetrics)
  }

  

  val catalogsProductGroupsCreateOperation = (apiOperation[CatalogsVerticalProductGroup]("catalogsProductGroupsCreate")
    summary "Create product group"
    parameters(bodyParam[MultipleProductGroupsInner]("multipleProductGroupsInner").description(""), queryParam[String]("adAccountId").description("").optional)
  )

  post("/catalogs/product_groups", operation(catalogsProductGroupsCreateOperation)) {
    //println("multipleProductGroupsInner: " + multipleProductGroupsInner)
            val adAccountId = params.getAs[String]("adAccountId")

    //println("adAccountId: " + adAccountId)
  }

  

  val catalogsProductGroupsCreateManyOperation = (apiOperation[List[String]]("catalogsProductGroupsCreateMany")
    summary "Create product groups"
    parameters(bodyParam[List[MultipleProductGroupsInner]]("multipleProductGroupsInner").description(""), queryParam[String]("adAccountId").description("").optional)
  )

  post("/catalogs/product_groups/multiple", operation(catalogsProductGroupsCreateManyOperation)) {
    //println("multipleProductGroupsInner: " + multipleProductGroupsInner)
            val adAccountId = params.getAs[String]("adAccountId")

    //println("adAccountId: " + adAccountId)
  }

  

  val catalogsProductGroupsDeleteOperation = (apiOperation[Unit]("catalogsProductGroupsDelete")
    summary "Delete product group"
    parameters(pathParam[String]("productGroupId").description(""), queryParam[String]("adAccountId").description("").optional)
  )

  delete("/catalogs/product_groups/:product_group_id", operation(catalogsProductGroupsDeleteOperation)) {
    val productGroupId = params.getOrElse("productGroupId", halt(400))
    //println("productGroupId: " + productGroupId)
            val adAccountId = params.getAs[String]("adAccountId")

    //println("adAccountId: " + adAccountId)
  }

  

  val catalogsProductGroupsDeleteManyOperation = (apiOperation[Unit]("catalogsProductGroupsDeleteMany")
    summary "Delete product groups"
    parameters(queryParam[List[Int]]("id").description("").defaultValue(List.empty[Int] ), queryParam[String]("adAccountId").description("").optional)
  )

  delete("/catalogs/product_groups/multiple", operation(catalogsProductGroupsDeleteManyOperation)) {
        val idString = params.getAs[String]("id")
    val id = if("csv" == "default" || "csv" == "csv") {
      idString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("id: " + id)
            val adAccountId = params.getAs[String]("adAccountId")

    //println("adAccountId: " + adAccountId)
  }

  

  val catalogsProductGroupsGetOperation = (apiOperation[CatalogsVerticalProductGroup]("catalogsProductGroupsGet")
    summary "Get product group"
    parameters(pathParam[String]("productGroupId").description(""), queryParam[String]("adAccountId").description("").optional)
  )

  get("/catalogs/product_groups/:product_group_id", operation(catalogsProductGroupsGetOperation)) {
    val productGroupId = params.getOrElse("productGroupId", halt(400))
    //println("productGroupId: " + productGroupId)
            val adAccountId = params.getAs[String]("adAccountId")

    //println("adAccountId: " + adAccountId)
  }

  

  val catalogsProductGroupsListOperation = (apiOperation[CatalogsProductGroupsList200Response]("catalogsProductGroupsList")
    summary "List product groups"
    parameters(queryParam[List[Int]]("id").description("").optional.defaultValue(List.empty[Int] ), queryParam[String]("feedId").description("").optional, queryParam[String]("catalogId").description("").optional, queryParam[String]("bookmark").description("").optional, queryParam[Int]("pageSize").description("").optional.defaultValue(25), queryParam[String]("adAccountId").description("").optional)
  )

  get("/catalogs/product_groups", operation(catalogsProductGroupsListOperation)) {
        val idString = params.getAs[String]("id")
    val id = if("csv" == "default" || "csv" == "csv") {
      idString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("id: " + id)
            val feedId = params.getAs[String]("feedId")

    //println("feedId: " + feedId)
            val catalogId = params.getAs[String]("catalogId")

    //println("catalogId: " + catalogId)
            val bookmark = params.getAs[String]("bookmark")

    //println("bookmark: " + bookmark)
            val pageSize = params.getAs[Int]("pageSize")

    //println("pageSize: " + pageSize)
            val adAccountId = params.getAs[String]("adAccountId")

    //println("adAccountId: " + adAccountId)
  }

  

  val catalogsProductGroupsProductCountsGetOperation = (apiOperation[CatalogsProductGroupProductCountsVertical]("catalogsProductGroupsProductCountsGet")
    summary "Get product counts"
    parameters(pathParam[String]("productGroupId").description(""), queryParam[String]("adAccountId").description("").optional)
  )

  get("/catalogs/product_groups/:product_group_id/product_counts", operation(catalogsProductGroupsProductCountsGetOperation)) {
    val productGroupId = params.getOrElse("productGroupId", halt(400))
    //println("productGroupId: " + productGroupId)
            val adAccountId = params.getAs[String]("adAccountId")

    //println("adAccountId: " + adAccountId)
  }

  

  val catalogsProductGroupsUpdateOperation = (apiOperation[CatalogsVerticalProductGroup]("catalogsProductGroupsUpdate")
    summary "Update single product group"
    parameters(pathParam[String]("productGroupId").description(""), bodyParam[CatalogsProductGroupsUpdateRequest]("catalogsProductGroupsUpdateRequest").description(""), queryParam[String]("adAccountId").description("").optional)
  )

  patch("/catalogs/product_groups/:product_group_id", operation(catalogsProductGroupsUpdateOperation)) {
    val productGroupId = params.getOrElse("productGroupId", halt(400))
    //println("productGroupId: " + productGroupId)
    //println("catalogsProductGroupsUpdateRequest: " + catalogsProductGroupsUpdateRequest)
            val adAccountId = params.getAs[String]("adAccountId")

    //println("adAccountId: " + adAccountId)
  }

  

  val feedProcessingResultsListOperation = (apiOperation[FeedProcessingResultsList200Response]("feedProcessingResultsList")
    summary "List feed processing results"
    parameters(pathParam[String]("feedId").description(""), queryParam[String]("bookmark").description("").optional, queryParam[Int]("pageSize").description("").optional.defaultValue(25), queryParam[String]("adAccountId").description("").optional)
  )

  get("/catalogs/feeds/:feed_id/processing_results", operation(feedProcessingResultsListOperation)) {
    val feedId = params.getOrElse("feedId", halt(400))
    //println("feedId: " + feedId)
            val bookmark = params.getAs[String]("bookmark")

    //println("bookmark: " + bookmark)
            val pageSize = params.getAs[Int]("pageSize")

    //println("pageSize: " + pageSize)
            val adAccountId = params.getAs[String]("adAccountId")

    //println("adAccountId: " + adAccountId)
  }

  

  val feedsCreateOperation = (apiOperation[CatalogsFeed]("feedsCreate")
    summary "Create feed"
    parameters(bodyParam[FeedsCreateRequest]("feedsCreateRequest").description(""), queryParam[String]("adAccountId").description("").optional)
  )

  post("/catalogs/feeds", operation(feedsCreateOperation)) {
    //println("feedsCreateRequest: " + feedsCreateRequest)
            val adAccountId = params.getAs[String]("adAccountId")

    //println("adAccountId: " + adAccountId)
  }

  

  val feedsDeleteOperation = (apiOperation[Unit]("feedsDelete")
    summary "Delete feed"
    parameters(pathParam[String]("feedId").description(""), queryParam[String]("adAccountId").description("").optional)
  )

  delete("/catalogs/feeds/:feed_id", operation(feedsDeleteOperation)) {
    val feedId = params.getOrElse("feedId", halt(400))
    //println("feedId: " + feedId)
            val adAccountId = params.getAs[String]("adAccountId")

    //println("adAccountId: " + adAccountId)
  }

  

  val feedsGetOperation = (apiOperation[CatalogsFeed]("feedsGet")
    summary "Get feed"
    parameters(pathParam[String]("feedId").description(""), queryParam[String]("adAccountId").description("").optional)
  )

  get("/catalogs/feeds/:feed_id", operation(feedsGetOperation)) {
    val feedId = params.getOrElse("feedId", halt(400))
    //println("feedId: " + feedId)
            val adAccountId = params.getAs[String]("adAccountId")

    //println("adAccountId: " + adAccountId)
  }

  

  val feedsIngestOperation = (apiOperation[CatalogsFeedIngestion]("feedsIngest")
    summary "Ingest feed items"
    parameters(pathParam[String]("feedId").description(""), queryParam[String]("adAccountId").description("").optional)
  )

  post("/catalogs/feeds/:feed_id/ingest", operation(feedsIngestOperation)) {
    val feedId = params.getOrElse("feedId", halt(400))
    //println("feedId: " + feedId)
            val adAccountId = params.getAs[String]("adAccountId")

    //println("adAccountId: " + adAccountId)
  }

  

  val feedsListOperation = (apiOperation[FeedsList200Response]("feedsList")
    summary "List feeds"
    parameters(queryParam[String]("bookmark").description("").optional, queryParam[Int]("pageSize").description("").optional.defaultValue(25), queryParam[String]("catalogId").description("").optional, queryParam[String]("adAccountId").description("").optional)
  )

  get("/catalogs/feeds", operation(feedsListOperation)) {
            val bookmark = params.getAs[String]("bookmark")

    //println("bookmark: " + bookmark)
            val pageSize = params.getAs[Int]("pageSize")

    //println("pageSize: " + pageSize)
            val catalogId = params.getAs[String]("catalogId")

    //println("catalogId: " + catalogId)
            val adAccountId = params.getAs[String]("adAccountId")

    //println("adAccountId: " + adAccountId)
  }

  

  val feedsUpdateOperation = (apiOperation[CatalogsFeed]("feedsUpdate")
    summary "Update feed"
    parameters(pathParam[String]("feedId").description(""), bodyParam[FeedsUpdateRequest]("feedsUpdateRequest").description(""), queryParam[String]("adAccountId").description("").optional)
  )

  patch("/catalogs/feeds/:feed_id", operation(feedsUpdateOperation)) {
    val feedId = params.getOrElse("feedId", halt(400))
    //println("feedId: " + feedId)
    //println("feedsUpdateRequest: " + feedsUpdateRequest)
            val adAccountId = params.getAs[String]("adAccountId")

    //println("adAccountId: " + adAccountId)
  }

  

  val itemsBatchGetOperation = (apiOperation[CatalogsItemsBatch]("itemsBatchGet")
    summary "Get item batch status"
    parameters(pathParam[String]("batchId").description(""), queryParam[String]("adAccountId").description("").optional)
  )

  get("/catalogs/items/batch/:batch_id", operation(itemsBatchGetOperation)) {
    val batchId = params.getOrElse("batchId", halt(400))
    //println("batchId: " + batchId)
            val adAccountId = params.getAs[String]("adAccountId")

    //println("adAccountId: " + adAccountId)
  }

  

  val itemsBatchPostOperation = (apiOperation[CatalogsItemsBatch]("itemsBatchPost")
    summary "Operate on item batch"
    parameters(bodyParam[ItemsBatchPostRequest]("itemsBatchPostRequest").description(""), queryParam[String]("adAccountId").description("").optional)
  )

  post("/catalogs/items/batch", operation(itemsBatchPostOperation)) {
    //println("itemsBatchPostRequest: " + itemsBatchPostRequest)
            val adAccountId = params.getAs[String]("adAccountId")

    //println("adAccountId: " + adAccountId)
  }

  

  val itemsGetOperation = (apiOperation[CatalogsItems]("itemsGet")
    summary "Get catalogs items"
    parameters(queryParam[String]("country").description(""), queryParam[String]("language").description(""), queryParam[String]("adAccountId").description("").optional, queryParam[List[String]]("itemIds").description("").optional.defaultValue(List.empty[String] ), queryParam[CatalogsItemsFilters]("filters").description("").optional)
  )

  get("/catalogs/items", operation(itemsGetOperation)) {
            val country = params.getAs[String]("country")

    //println("country: " + country)
            val language = params.getAs[String]("language")

    //println("language: " + language)
            val adAccountId = params.getAs[String]("adAccountId")

    //println("adAccountId: " + adAccountId)
        val itemIdsString = params.getAs[String]("itemIds")
    val itemIds = if("multi" == "default" || "multi" == "csv") {
      itemIdsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("itemIds: " + itemIds)
            val filters = params.getAs[CatalogsItemsFilters]("filters")

    //println("filters: " + filters)
  }

  

  val itemsIssuesListOperation = (apiOperation[ItemsIssuesList200Response]("itemsIssuesList")
    summary "List item issues"
    parameters(pathParam[String]("processingResultId").description(""), queryParam[String]("bookmark").description("").optional, queryParam[Int]("pageSize").description("").optional.defaultValue(25), queryParam[List[Int]]("itemNumbers").description("").optional.defaultValue(List.empty[Int] ), queryParam[CatalogsItemValidationIssue]("itemValidationIssue").description("").optional, queryParam[String]("adAccountId").description("").optional)
  )

  get("/catalogs/processing_results/:processing_result_id/item_issues", operation(itemsIssuesListOperation)) {
    val processingResultId = params.getOrElse("processingResultId", halt(400))
    //println("processingResultId: " + processingResultId)
            val bookmark = params.getAs[String]("bookmark")

    //println("bookmark: " + bookmark)
            val pageSize = params.getAs[Int]("pageSize")

    //println("pageSize: " + pageSize)
        val itemNumbersString = params.getAs[String]("itemNumbers")
    val itemNumbers = if("multi" == "default" || "multi" == "csv") {
      itemNumbersString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("itemNumbers: " + itemNumbers)
            val itemValidationIssue = params.getAs[CatalogsItemValidationIssue]("itemValidationIssue")

    //println("itemValidationIssue: " + itemValidationIssue)
            val adAccountId = params.getAs[String]("adAccountId")

    //println("adAccountId: " + adAccountId)
  }

  

  val itemsPostOperation = (apiOperation[CatalogsItems]("itemsPost")
    summary "Get catalogs items (POST)"
    parameters(bodyParam[CatalogsItemsRequest]("catalogsItemsRequest").description(""), queryParam[String]("adAccountId").description("").optional)
  )

  post("/catalogs/items", operation(itemsPostOperation)) {
    //println("catalogsItemsRequest: " + catalogsItemsRequest)
            val adAccountId = params.getAs[String]("adAccountId")

    //println("adAccountId: " + adAccountId)
  }

  

  val productsByProductGroupFilterListOperation = (apiOperation[CatalogsProductGroupPinsList200Response]("productsByProductGroupFilterList")
    summary "List products by filter"
    parameters(bodyParam[CatalogsListProductsByFilterRequest]("catalogsListProductsByFilterRequest").description(""), queryParam[String]("bookmark").description("").optional, queryParam[Int]("pageSize").description("").optional.defaultValue(25), queryParam[String]("adAccountId").description("").optional, queryParam[Boolean]("pinMetrics").description("").optional.defaultValue(false))
  )

  post("/catalogs/products/get_by_product_group_filters", operation(productsByProductGroupFilterListOperation)) {
    //println("catalogsListProductsByFilterRequest: " + catalogsListProductsByFilterRequest)
            val bookmark = params.getAs[String]("bookmark")

    //println("bookmark: " + bookmark)
            val pageSize = params.getAs[Int]("pageSize")

    //println("pageSize: " + pageSize)
            val adAccountId = params.getAs[String]("adAccountId")

    //println("adAccountId: " + adAccountId)
            val pinMetrics = params.getAs[Boolean]("pinMetrics")

    //println("pinMetrics: " + pinMetrics)
  }

  

  val reportsCreateOperation = (apiOperation[CatalogsCreateReportResponse]("reportsCreate")
    summary "Build catalogs report"
    parameters(bodyParam[CatalogsReportParameters]("catalogsReportParameters").description(""), queryParam[String]("adAccountId").description("").optional)
  )

  post("/catalogs/reports", operation(reportsCreateOperation)) {
    //println("catalogsReportParameters: " + catalogsReportParameters)
            val adAccountId = params.getAs[String]("adAccountId")

    //println("adAccountId: " + adAccountId)
  }

  

  val reportsGetOperation = (apiOperation[CatalogsReport]("reportsGet")
    summary "Get catalogs report"
    parameters(queryParam[String]("token").description(""), queryParam[String]("adAccountId").description("").optional)
  )

  get("/catalogs/reports", operation(reportsGetOperation)) {
            val token = params.getAs[String]("token")

    //println("token: " + token)
            val adAccountId = params.getAs[String]("adAccountId")

    //println("adAccountId: " + adAccountId)
  }

  

  val reportsStatsOperation = (apiOperation[ReportsStats200Response]("reportsStats")
    summary "List report stats"
    parameters(queryParam[CatalogsReportParameters]("parameters").description(""), queryParam[String]("adAccountId").description("").optional, queryParam[Int]("pageSize").description("").optional.defaultValue(25), queryParam[String]("bookmark").description("").optional)
  )

  get("/catalogs/reports/stats", operation(reportsStatsOperation)) {
            val parameters = params.getAs[CatalogsReportParameters]("parameters")

    //println("parameters: " + parameters)
            val adAccountId = params.getAs[String]("adAccountId")

    //println("adAccountId: " + adAccountId)
            val pageSize = params.getAs[Int]("pageSize")

    //println("pageSize: " + pageSize)
            val bookmark = params.getAs[String]("bookmark")

    //println("bookmark: " + bookmark)
  }

}
