/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 */


package org.openapitools.server.api

import org.openapitools.server.model.Error
import org.openapitools.server.model.TargetingTemplateCreate
import org.openapitools.server.model.TargetingTemplateGetResponseData
import org.openapitools.server.model.TargetingTemplateList200Response
import org.openapitools.server.model.TargetingTemplateUpdateRequest

import java.io.File

import org.scalatra.ScalatraServlet
import org.scalatra.swagger._
import org.json4s._
import org.json4s.JsonDSL._
import org.scalatra.json.{ JValueResult, JacksonJsonSupport }
import org.scalatra.servlet.{ FileUploadSupport, MultipartConfig, SizeConstraintExceededException }

import scala.collection.JavaConverters._

class TargetingTemplateApi(implicit val swagger: Swagger) extends ScalatraServlet
  with FileUploadSupport
  with JacksonJsonSupport
  with SwaggerSupport {
  protected implicit val jsonFormats: Formats = DefaultFormats

  protected val applicationDescription: String = "TargetingTemplateApi"

  before() {
    contentType = formats("json")
    response.headers += ("Access-Control-Allow-Origin" -> "*")
  }
  

  val targetingTemplateCreateOperation = (apiOperation[TargetingTemplateGetResponseData]("targetingTemplateCreate")
    summary "Create targeting templates"
    parameters(pathParam[String]("adAccountId").description(""), bodyParam[TargetingTemplateCreate]("targetingTemplateCreate").description(""))
  )

  post("/ad_accounts/:ad_account_id/targeting_templates", operation(targetingTemplateCreateOperation)) {
    val adAccountId = params.getOrElse("adAccountId", halt(400))
    //println("adAccountId: " + adAccountId)
    //println("targetingTemplateCreate: " + targetingTemplateCreate)
  }

  

  val targetingTemplateListOperation = (apiOperation[TargetingTemplateList200Response]("targetingTemplateList")
    summary "List targeting templates"
    parameters(pathParam[String]("adAccountId").description(""), queryParam[String]("order").description("").optional, queryParam[Boolean]("includeSizing").description("").optional.defaultValue(false), queryParam[String]("searchQuery").description("").optional, queryParam[Int]("pageSize").description("").optional.defaultValue(25), queryParam[String]("bookmark").description("").optional)
  )

  get("/ad_accounts/:ad_account_id/targeting_templates", operation(targetingTemplateListOperation)) {
    val adAccountId = params.getOrElse("adAccountId", halt(400))
    //println("adAccountId: " + adAccountId)
            val order = params.getAs[String]("order")

    //println("order: " + order)
            val includeSizing = params.getAs[Boolean]("includeSizing")

    //println("includeSizing: " + includeSizing)
            val searchQuery = params.getAs[String]("searchQuery")

    //println("searchQuery: " + searchQuery)
            val pageSize = params.getAs[Int]("pageSize")

    //println("pageSize: " + pageSize)
            val bookmark = params.getAs[String]("bookmark")

    //println("bookmark: " + bookmark)
  }

  

  val targetingTemplateUpdateOperation = (apiOperation[Unit]("targetingTemplateUpdate")
    summary "Update targeting templates"
    parameters(pathParam[String]("adAccountId").description(""), bodyParam[TargetingTemplateUpdateRequest]("targetingTemplateUpdateRequest").description(""))
  )

  patch("/ad_accounts/:ad_account_id/targeting_templates", operation(targetingTemplateUpdateOperation)) {
    val adAccountId = params.getOrElse("adAccountId", halt(400))
    //println("adAccountId: " + adAccountId)
    //println("targetingTemplateUpdateRequest: " + targetingTemplateUpdateRequest)
  }

}
