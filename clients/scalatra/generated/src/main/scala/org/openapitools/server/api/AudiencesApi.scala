/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 */


package org.openapitools.server.api

import org.openapitools.server.model.Audience
import org.openapitools.server.model.AudienceCreateCustomRequest
import org.openapitools.server.model.AudienceCreateRequest
import org.openapitools.server.model.AudienceUpdateRequest
import org.openapitools.server.model.AudiencesList200Response
import org.openapitools.server.model.Error

import java.io.File

import org.scalatra.ScalatraServlet
import org.scalatra.swagger._
import org.json4s._
import org.json4s.JsonDSL._
import org.scalatra.json.{ JValueResult, JacksonJsonSupport }
import org.scalatra.servlet.{ FileUploadSupport, MultipartConfig, SizeConstraintExceededException }

import scala.collection.JavaConverters._

class AudiencesApi(implicit val swagger: Swagger) extends ScalatraServlet
  with FileUploadSupport
  with JacksonJsonSupport
  with SwaggerSupport {
  protected implicit val jsonFormats: Formats = DefaultFormats

  protected val applicationDescription: String = "AudiencesApi"

  before() {
    contentType = formats("json")
    response.headers += ("Access-Control-Allow-Origin" -> "*")
  }
  

  val audiencesCreateOperation = (apiOperation[Audience]("audiencesCreate")
    summary "Create audience"
    parameters(pathParam[String]("adAccountId").description(""), bodyParam[AudienceCreateRequest]("audienceCreateRequest").description(""))
  )

  post("/ad_accounts/:ad_account_id/audiences", operation(audiencesCreateOperation)) {
    val adAccountId = params.getOrElse("adAccountId", halt(400))
    //println("adAccountId: " + adAccountId)
    //println("audienceCreateRequest: " + audienceCreateRequest)
  }

  

  val audiencesCreateCustomOperation = (apiOperation[Audience]("audiencesCreateCustom")
    summary "Create custom audience"
    parameters(pathParam[String]("adAccountId").description(""), bodyParam[AudienceCreateCustomRequest]("audienceCreateCustomRequest").description(""))
  )

  post("/ad_accounts/:ad_account_id/audiences/custom", operation(audiencesCreateCustomOperation)) {
    val adAccountId = params.getOrElse("adAccountId", halt(400))
    //println("adAccountId: " + adAccountId)
    //println("audienceCreateCustomRequest: " + audienceCreateCustomRequest)
  }

  

  val audiencesGetOperation = (apiOperation[Audience]("audiencesGet")
    summary "Get audience"
    parameters(pathParam[String]("adAccountId").description(""), pathParam[String]("audienceId").description(""))
  )

  get("/ad_accounts/:ad_account_id/audiences/:audience_id", operation(audiencesGetOperation)) {
    val adAccountId = params.getOrElse("adAccountId", halt(400))
    //println("adAccountId: " + adAccountId)
    val audienceId = params.getOrElse("audienceId", halt(400))
    //println("audienceId: " + audienceId)
  }

  

  val audiencesListOperation = (apiOperation[AudiencesList200Response]("audiencesList")
    summary "List audiences"
    parameters(pathParam[String]("adAccountId").description(""), queryParam[String]("bookmark").description("").optional, queryParam[String]("order").description("").optional, queryParam[Int]("pageSize").description("").optional.defaultValue(25), queryParam[String]("ownershipType").description("").optional.defaultValue(OWNED))
  )

  get("/ad_accounts/:ad_account_id/audiences", operation(audiencesListOperation)) {
    val adAccountId = params.getOrElse("adAccountId", halt(400))
    //println("adAccountId: " + adAccountId)
            val bookmark = params.getAs[String]("bookmark")

    //println("bookmark: " + bookmark)
            val order = params.getAs[String]("order")

    //println("order: " + order)
            val pageSize = params.getAs[Int]("pageSize")

    //println("pageSize: " + pageSize)
            val ownershipType = params.getAs[String]("ownershipType")

    //println("ownershipType: " + ownershipType)
  }

  

  val audiencesUpdateOperation = (apiOperation[Audience]("audiencesUpdate")
    summary "Update audience"
    parameters(pathParam[String]("adAccountId").description(""), pathParam[String]("audienceId").description(""), bodyParam[AudienceUpdateRequest]("audienceUpdateRequest").description("").optional)
  )

  patch("/ad_accounts/:ad_account_id/audiences/:audience_id", operation(audiencesUpdateOperation)) {
    val adAccountId = params.getOrElse("adAccountId", halt(400))
    //println("adAccountId: " + adAccountId)
    val audienceId = params.getOrElse("audienceId", halt(400))
    //println("audienceId: " + audienceId)
    //println("audienceUpdateRequest: " + audienceUpdateRequest)
  }

}
