/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 */


package org.openapitools.server.api

import org.openapitools.server.model.Error
import org.openapitools.server.model.MediaList200Response
import org.openapitools.server.model.MediaUpload
import org.openapitools.server.model.MediaUploadDetails
import org.openapitools.server.model.MediaUploadRequest

import java.io.File

import org.scalatra.ScalatraServlet
import org.scalatra.swagger._
import org.json4s._
import org.json4s.JsonDSL._
import org.scalatra.json.{ JValueResult, JacksonJsonSupport }
import org.scalatra.servlet.{ FileUploadSupport, MultipartConfig, SizeConstraintExceededException }

import scala.collection.JavaConverters._

class MediaApi(implicit val swagger: Swagger) extends ScalatraServlet
  with FileUploadSupport
  with JacksonJsonSupport
  with SwaggerSupport {
  protected implicit val jsonFormats: Formats = DefaultFormats

  protected val applicationDescription: String = "MediaApi"

  before() {
    contentType = formats("json")
    response.headers += ("Access-Control-Allow-Origin" -> "*")
  }
  

  val mediaCreateOperation = (apiOperation[MediaUpload]("mediaCreate")
    summary "Register media upload"
    parameters(bodyParam[MediaUploadRequest]("mediaUploadRequest").description(""))
  )

  post("/media", operation(mediaCreateOperation)) {
    //println("mediaUploadRequest: " + mediaUploadRequest)
  }

  

  val mediaGetOperation = (apiOperation[MediaUploadDetails]("mediaGet")
    summary "Get media upload details"
    parameters(pathParam[String]("mediaId").description(""))
  )

  get("/media/:media_id", operation(mediaGetOperation)) {
    val mediaId = params.getOrElse("mediaId", halt(400))
    //println("mediaId: " + mediaId)
  }

  

  val mediaListOperation = (apiOperation[MediaList200Response]("mediaList")
    summary "List media uploads"
    parameters(queryParam[String]("bookmark").description("").optional, queryParam[Int]("pageSize").description("").optional.defaultValue(25))
  )

  get("/media", operation(mediaListOperation)) {
            val bookmark = params.getAs[String]("bookmark")

    //println("bookmark: " + bookmark)
            val pageSize = params.getAs[Int]("pageSize")

    //println("pageSize: " + pageSize)
  }

}
