/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 */


package org.openapitools.server.api

import org.openapitools.server.model.AuthRespondInvitesBody
import org.openapitools.server.model.CancelInvitesBody
import org.openapitools.server.model.CreateAssetAccessRequestBody
import org.openapitools.server.model.CreateAssetAccessRequestResponse
import org.openapitools.server.model.CreateAssetInvitesRequest
import org.openapitools.server.model.CreateInvitesResultsResponseArray
import org.openapitools.server.model.CreateMembershipOrPartnershipInvitesBody
import org.openapitools.server.model.DeleteInvitesResultsResponseArray
import org.openapitools.server.model.Error
import org.openapitools.server.model.GetInvites200Response
import org.openapitools.server.model.InviteType
import org.openapitools.server.model.RespondToInvitesResponseArray
import org.openapitools.server.model.UpdateInvitesResultsResponseArray

import java.io.File

import org.scalatra.ScalatraServlet
import org.scalatra.swagger._
import org.json4s._
import org.json4s.JsonDSL._
import org.scalatra.json.{ JValueResult, JacksonJsonSupport }
import org.scalatra.servlet.{ FileUploadSupport, MultipartConfig, SizeConstraintExceededException }

import scala.collection.JavaConverters._

class BusinessAccessInviteApi(implicit val swagger: Swagger) extends ScalatraServlet
  with FileUploadSupport
  with JacksonJsonSupport
  with SwaggerSupport {
  protected implicit val jsonFormats: Formats = DefaultFormats

  protected val applicationDescription: String = "BusinessAccessInviteApi"

  before() {
    contentType = formats("json")
    response.headers += ("Access-Control-Allow-Origin" -> "*")
  }
  

  val assetAccessRequestsCreateOperation = (apiOperation[CreateAssetAccessRequestResponse]("assetAccessRequestsCreate")
    summary "Create a request to access an existing partner's assets."
    parameters(pathParam[String]("businessId").description(""), bodyParam[CreateAssetAccessRequestBody]("createAssetAccessRequestBody").description(""))
  )

  post("/businesses/:business_id/requests/assets/access", operation(assetAccessRequestsCreateOperation)) {
    val businessId = params.getOrElse("businessId", halt(400))
    //println("businessId: " + businessId)
    //println("createAssetAccessRequestBody: " + createAssetAccessRequestBody)
  }

  

  val cancelInvitesOrRequestsOperation = (apiOperation[DeleteInvitesResultsResponseArray]("cancelInvitesOrRequests")
    summary "Cancel invites/requests"
    parameters(pathParam[String]("businessId").description(""), bodyParam[CancelInvitesBody]("cancelInvitesBody").description(""))
  )

  delete("/businesses/:business_id/invites", operation(cancelInvitesOrRequestsOperation)) {
    val businessId = params.getOrElse("businessId", halt(400))
    //println("businessId: " + businessId)
    //println("cancelInvitesBody: " + cancelInvitesBody)
  }

  

  val createAssetInvitesOperation = (apiOperation[UpdateInvitesResultsResponseArray]("createAssetInvites")
    summary "Update invite/request with an asset permission"
    parameters(pathParam[String]("businessId").description(""), bodyParam[CreateAssetInvitesRequest]("createAssetInvitesRequest").description(""))
  )

  post("/businesses/:business_id/invites/assets/access", operation(createAssetInvitesOperation)) {
    val businessId = params.getOrElse("businessId", halt(400))
    //println("businessId: " + businessId)
    //println("createAssetInvitesRequest: " + createAssetInvitesRequest)
  }

  

  val createMembershipOrPartnershipInvitesOperation = (apiOperation[CreateInvitesResultsResponseArray]("createMembershipOrPartnershipInvites")
    summary "Create invites or requests"
    parameters(pathParam[String]("businessId").description(""), bodyParam[CreateMembershipOrPartnershipInvitesBody]("createMembershipOrPartnershipInvitesBody").description(""))
  )

  post("/businesses/:business_id/invites", operation(createMembershipOrPartnershipInvitesOperation)) {
    val businessId = params.getOrElse("businessId", halt(400))
    //println("businessId: " + businessId)
    //println("createMembershipOrPartnershipInvitesBody: " + createMembershipOrPartnershipInvitesBody)
  }

  

  val getInvitesOperation = (apiOperation[GetInvites200Response]("getInvites")
    summary "Get invites/requests"
    parameters(pathParam[String]("businessId").description(""), queryParam[Boolean]("isMember").description("").optional.defaultValue(true), queryParam[List[String]]("inviteStatus").description("").optional.defaultValue(List.empty[String] ), queryParam[InviteType]("inviteType").description("").optional, queryParam[String]("bookmark").description("").optional, queryParam[Int]("pageSize").description("").optional.defaultValue(25))
  )

  get("/businesses/:business_id/invites", operation(getInvitesOperation)) {
    val businessId = params.getOrElse("businessId", halt(400))
    //println("businessId: " + businessId)
            val isMember = params.getAs[Boolean]("isMember")

    //println("isMember: " + isMember)
        val inviteStatusString = params.getAs[String]("inviteStatus")
    val inviteStatus = if("multi" == "default" || "multi" == "csv") {
      inviteStatusString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("inviteStatus: " + inviteStatus)
            val inviteType = params.getAs[InviteType]("inviteType")

    //println("inviteType: " + inviteType)
            val bookmark = params.getAs[String]("bookmark")

    //println("bookmark: " + bookmark)
            val pageSize = params.getAs[Int]("pageSize")

    //println("pageSize: " + pageSize)
  }

  

  val respondBusinessAccessInvitesOperation = (apiOperation[RespondToInvitesResponseArray]("respondBusinessAccessInvites")
    summary "Accept or decline an invite/request"
    parameters(bodyParam[AuthRespondInvitesBody]("authRespondInvitesBody").description(""))
  )

  patch("/businesses/invites", operation(respondBusinessAccessInvitesOperation)) {
    //println("authRespondInvitesBody: " + authRespondInvitesBody)
  }

}
