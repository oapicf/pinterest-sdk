/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 */


package org.openapitools.server.api

import org.openapitools.server.model.AdAccountsAudiencesSharedAccountsList200Response
import org.openapitools.server.model.AudienceAccountType
import org.openapitools.server.model.AudiencesList200Response
import org.openapitools.server.model.BusinessSharedAudience
import org.openapitools.server.model.BusinessSharedAudienceResponse
import org.openapitools.server.model.Error
import org.openapitools.server.model.SharedAudience
import org.openapitools.server.model.SharedAudienceResponse

import java.io.File

import org.scalatra.ScalatraServlet
import org.scalatra.swagger._
import org.json4s._
import org.json4s.JsonDSL._
import org.scalatra.json.{ JValueResult, JacksonJsonSupport }
import org.scalatra.servlet.{ FileUploadSupport, MultipartConfig, SizeConstraintExceededException }

import scala.collection.JavaConverters._

class AudienceSharingApi(implicit val swagger: Swagger) extends ScalatraServlet
  with FileUploadSupport
  with JacksonJsonSupport
  with SwaggerSupport {
  protected implicit val jsonFormats: Formats = DefaultFormats

  protected val applicationDescription: String = "AudienceSharingApi"

  before() {
    contentType = formats("json")
    response.headers += ("Access-Control-Allow-Origin" -> "*")
  }
  

  val adAccountsAudiencesSharedAccountsListOperation = (apiOperation[AdAccountsAudiencesSharedAccountsList200Response]("adAccountsAudiencesSharedAccountsList")
    summary "List accounts with access to an audience owned by an ad account"
    parameters(pathParam[String]("adAccountId").description(""), queryParam[String]("audienceId").description(""), queryParam[AudienceAccountType]("accountType").description(""), queryParam[Int]("pageSize").description("").optional.defaultValue(25), queryParam[String]("bookmark").description("").optional)
  )

  get("/ad_accounts/:ad_account_id/audiences/shared/accounts", operation(adAccountsAudiencesSharedAccountsListOperation)) {
    val adAccountId = params.getOrElse("adAccountId", halt(400))
    //println("adAccountId: " + adAccountId)
            val audienceId = params.getAs[String]("audienceId")

    //println("audienceId: " + audienceId)
            val accountType = params.getAs[AudienceAccountType]("accountType")

    //println("accountType: " + accountType)
            val pageSize = params.getAs[Int]("pageSize")

    //println("pageSize: " + pageSize)
            val bookmark = params.getAs[String]("bookmark")

    //println("bookmark: " + bookmark)
  }

  

  val businessAccountAudiencesSharedAccountsListOperation = (apiOperation[AdAccountsAudiencesSharedAccountsList200Response]("businessAccountAudiencesSharedAccountsList")
    summary "List accounts with access to an audience owned by a business"
    parameters(pathParam[String]("businessId").description(""), queryParam[String]("audienceId").description(""), queryParam[AudienceAccountType]("accountType").description(""), queryParam[Int]("pageSize").description("").optional.defaultValue(25), queryParam[String]("bookmark").description("").optional)
  )

  get("/businesses/:business_id/audiences/shared/accounts", operation(businessAccountAudiencesSharedAccountsListOperation)) {
    val businessId = params.getOrElse("businessId", halt(400))
    //println("businessId: " + businessId)
            val audienceId = params.getAs[String]("audienceId")

    //println("audienceId: " + audienceId)
            val accountType = params.getAs[AudienceAccountType]("accountType")

    //println("accountType: " + accountType)
            val pageSize = params.getAs[Int]("pageSize")

    //println("pageSize: " + pageSize)
            val bookmark = params.getAs[String]("bookmark")

    //println("bookmark: " + bookmark)
  }

  

  val sharedAudiencesForBusinessListOperation = (apiOperation[AudiencesList200Response]("sharedAudiencesForBusinessList")
    summary "List received audiences for a business"
    parameters(pathParam[String]("businessId").description(""), queryParam[String]("bookmark").description("").optional, queryParam[String]("order").description("").optional, queryParam[Int]("pageSize").description("").optional.defaultValue(25))
  )

  get("/businesses/:business_id/audiences", operation(sharedAudiencesForBusinessListOperation)) {
    val businessId = params.getOrElse("businessId", halt(400))
    //println("businessId: " + businessId)
            val bookmark = params.getAs[String]("bookmark")

    //println("bookmark: " + bookmark)
            val order = params.getAs[String]("order")

    //println("order: " + order)
            val pageSize = params.getAs[Int]("pageSize")

    //println("pageSize: " + pageSize)
  }

  

  val updateAdAccountToAdAccountSharedAudienceOperation = (apiOperation[SharedAudienceResponse]("updateAdAccountToAdAccountSharedAudience")
    summary "Update audience sharing between ad accounts"
    parameters(pathParam[String]("adAccountId").description(""), bodyParam[SharedAudience]("sharedAudience").description(""))
  )

  patch("/ad_accounts/:ad_account_id/audiences/ad_accounts/shared", operation(updateAdAccountToAdAccountSharedAudienceOperation)) {
    val adAccountId = params.getOrElse("adAccountId", halt(400))
    //println("adAccountId: " + adAccountId)
    //println("sharedAudience: " + sharedAudience)
  }

  

  val updateAdAccountToBusinessSharedAudienceOperation = (apiOperation[BusinessSharedAudienceResponse]("updateAdAccountToBusinessSharedAudience")
    summary "Update audience sharing from an ad account to businesses"
    parameters(pathParam[String]("adAccountId").description(""), bodyParam[BusinessSharedAudience]("businessSharedAudience").description(""))
  )

  patch("/ad_accounts/:ad_account_id/audiences/businesses/shared", operation(updateAdAccountToBusinessSharedAudienceOperation)) {
    val adAccountId = params.getOrElse("adAccountId", halt(400))
    //println("adAccountId: " + adAccountId)
    //println("businessSharedAudience: " + businessSharedAudience)
  }

  

  val updateBusinessToAdAccountSharedAudienceOperation = (apiOperation[SharedAudienceResponse]("updateBusinessToAdAccountSharedAudience")
    summary "Update audience sharing from a business to ad accounts"
    parameters(pathParam[String]("businessId").description(""), bodyParam[SharedAudience]("sharedAudience").description(""))
  )

  patch("/businesses/:business_id/audiences/ad_accounts/shared", operation(updateBusinessToAdAccountSharedAudienceOperation)) {
    val businessId = params.getOrElse("businessId", halt(400))
    //println("businessId: " + businessId)
    //println("sharedAudience: " + sharedAudience)
  }

  

  val updateBusinessToBusinessSharedAudienceOperation = (apiOperation[BusinessSharedAudienceResponse]("updateBusinessToBusinessSharedAudience")
    summary "Update audience sharing between businesses"
    parameters(pathParam[String]("businessId").description(""), bodyParam[BusinessSharedAudience]("businessSharedAudience").description(""))
  )

  patch("/businesses/:business_id/audiences/businesses/shared", operation(updateBusinessToBusinessSharedAudienceOperation)) {
    val businessId = params.getOrElse("businessId", halt(400))
    //println("businessId: " + businessId)
    //println("businessSharedAudience: " + businessSharedAudience)
  }

}
