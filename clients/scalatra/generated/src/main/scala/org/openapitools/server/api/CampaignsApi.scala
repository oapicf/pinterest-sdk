/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 */


package org.openapitools.server.api

import org.openapitools.server.model.AdsAnalyticsCampaignTargetingType
import org.openapitools.server.model.CampaignCreateRequest
import org.openapitools.server.model.CampaignCreateResponse
import org.openapitools.server.model.CampaignResponse
import org.openapitools.server.model.CampaignUpdateRequest
import org.openapitools.server.model.CampaignUpdateResponse
import org.openapitools.server.model.CampaignsAnalyticsResponseInner
import org.openapitools.server.model.CampaignsList200Response
import org.openapitools.server.model.ConversionReportAttributionType
import org.openapitools.server.model.Error
import org.openapitools.server.model.Granularity
import java.time.LocalDate
import org.openapitools.server.model.MetricsResponse

import java.io.File

import org.scalatra.ScalatraServlet
import org.scalatra.swagger._
import org.json4s._
import org.json4s.JsonDSL._
import org.scalatra.json.{ JValueResult, JacksonJsonSupport }
import org.scalatra.servlet.{ FileUploadSupport, MultipartConfig, SizeConstraintExceededException }

import scala.collection.JavaConverters._

class CampaignsApi(implicit val swagger: Swagger) extends ScalatraServlet
  with FileUploadSupport
  with JacksonJsonSupport
  with SwaggerSupport {
  protected implicit val jsonFormats: Formats = DefaultFormats

  protected val applicationDescription: String = "CampaignsApi"

  before() {
    contentType = formats("json")
    response.headers += ("Access-Control-Allow-Origin" -> "*")
  }
  

  val campaignTargetingAnalyticsGetOperation = (apiOperation[MetricsResponse]("campaignTargetingAnalyticsGet")
    summary "Get targeting analytics for campaigns"
    parameters(pathParam[String]("adAccountId").description(""), queryParam[List[String]]("campaignIds").description("").defaultValue(List.empty[String] ), queryParam[LocalDate]("startDate").description(""), queryParam[LocalDate]("endDate").description(""), queryParam[List[AdsAnalyticsCampaignTargetingType]]("targetingTypes").description("").defaultValue(List.empty[AdsAnalyticsCampaignTargetingType] ), queryParam[List[String]]("columns").description("").defaultValue(List.empty[String] ), queryParam[Granularity]("granularity").description(""), queryParam[Int]("clickWindowDays").description("").optional.defaultValue(30), queryParam[Int]("engagementWindowDays").description("").optional.defaultValue(30), queryParam[Int]("viewWindowDays").description("").optional.defaultValue(1), queryParam[String]("conversionReportTime").description("").optional.defaultValue(TIME_OF_AD_ACTION), queryParam[ConversionReportAttributionType]("attributionTypes").description("").optional)
  )

  get("/ad_accounts/:ad_account_id/campaigns/targeting_analytics", operation(campaignTargetingAnalyticsGetOperation)) {
    val adAccountId = params.getOrElse("adAccountId", halt(400))
    //println("adAccountId: " + adAccountId)
        val campaignIdsString = params.getAs[String]("campaignIds")
    val campaignIds = if("multi" == "default" || "multi" == "csv") {
      campaignIdsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("campaignIds: " + campaignIds)
            val startDate = params.getAs[LocalDate]("startDate")

    //println("startDate: " + startDate)
            val endDate = params.getAs[LocalDate]("endDate")

    //println("endDate: " + endDate)
        val targetingTypesString = params.getAs[String]("targetingTypes")
    val targetingTypes = if("csv" == "default" || "csv" == "csv") {
      targetingTypesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("targetingTypes: " + targetingTypes)
        val columnsString = params.getAs[String]("columns")
    val columns = if("csv" == "default" || "csv" == "csv") {
      columnsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("columns: " + columns)
            val granularity = params.getAs[Granularity]("granularity")

    //println("granularity: " + granularity)
            val clickWindowDays = params.getAs[Int]("clickWindowDays")

    //println("clickWindowDays: " + clickWindowDays)
            val engagementWindowDays = params.getAs[Int]("engagementWindowDays")

    //println("engagementWindowDays: " + engagementWindowDays)
            val viewWindowDays = params.getAs[Int]("viewWindowDays")

    //println("viewWindowDays: " + viewWindowDays)
            val conversionReportTime = params.getAs[String]("conversionReportTime")

    //println("conversionReportTime: " + conversionReportTime)
            val attributionTypes = params.getAs[ConversionReportAttributionType]("attributionTypes")

    //println("attributionTypes: " + attributionTypes)
  }

  

  val campaignsAnalyticsOperation = (apiOperation[List[CampaignsAnalyticsResponseInner]]("campaignsAnalytics")
    summary "Get campaign analytics"
    parameters(pathParam[String]("adAccountId").description(""), queryParam[LocalDate]("startDate").description(""), queryParam[LocalDate]("endDate").description(""), queryParam[List[String]]("campaignIds").description("").defaultValue(List.empty[String] ), queryParam[List[String]]("columns").description("").defaultValue(List.empty[String] ), queryParam[Granularity]("granularity").description(""), queryParam[Int]("clickWindowDays").description("").optional.defaultValue(30), queryParam[Int]("engagementWindowDays").description("").optional.defaultValue(30), queryParam[Int]("viewWindowDays").description("").optional.defaultValue(1), queryParam[String]("conversionReportTime").description("").optional.defaultValue(TIME_OF_AD_ACTION))
  )

  get("/ad_accounts/:ad_account_id/campaigns/analytics", operation(campaignsAnalyticsOperation)) {
    val adAccountId = params.getOrElse("adAccountId", halt(400))
    //println("adAccountId: " + adAccountId)
            val startDate = params.getAs[LocalDate]("startDate")

    //println("startDate: " + startDate)
            val endDate = params.getAs[LocalDate]("endDate")

    //println("endDate: " + endDate)
        val campaignIdsString = params.getAs[String]("campaignIds")
    val campaignIds = if("multi" == "default" || "multi" == "csv") {
      campaignIdsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("campaignIds: " + campaignIds)
        val columnsString = params.getAs[String]("columns")
    val columns = if("csv" == "default" || "csv" == "csv") {
      columnsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("columns: " + columns)
            val granularity = params.getAs[Granularity]("granularity")

    //println("granularity: " + granularity)
            val clickWindowDays = params.getAs[Int]("clickWindowDays")

    //println("clickWindowDays: " + clickWindowDays)
            val engagementWindowDays = params.getAs[Int]("engagementWindowDays")

    //println("engagementWindowDays: " + engagementWindowDays)
            val viewWindowDays = params.getAs[Int]("viewWindowDays")

    //println("viewWindowDays: " + viewWindowDays)
            val conversionReportTime = params.getAs[String]("conversionReportTime")

    //println("conversionReportTime: " + conversionReportTime)
  }

  

  val campaignsCreateOperation = (apiOperation[CampaignCreateResponse]("campaignsCreate")
    summary "Create campaigns"
    parameters(pathParam[String]("adAccountId").description(""), bodyParam[List[CampaignCreateRequest]]("campaignCreateRequest").description(""))
  )

  post("/ad_accounts/:ad_account_id/campaigns", operation(campaignsCreateOperation)) {
    val adAccountId = params.getOrElse("adAccountId", halt(400))
    //println("adAccountId: " + adAccountId)
    //println("campaignCreateRequest: " + campaignCreateRequest)
  }

  

  val campaignsGetOperation = (apiOperation[CampaignResponse]("campaignsGet")
    summary "Get campaign"
    parameters(pathParam[String]("adAccountId").description(""), pathParam[String]("campaignId").description(""))
  )

  get("/ad_accounts/:ad_account_id/campaigns/:campaign_id", operation(campaignsGetOperation)) {
    val adAccountId = params.getOrElse("adAccountId", halt(400))
    //println("adAccountId: " + adAccountId)
    val campaignId = params.getOrElse("campaignId", halt(400))
    //println("campaignId: " + campaignId)
  }

  

  val campaignsListOperation = (apiOperation[CampaignsList200Response]("campaignsList")
    summary "List campaigns"
    parameters(pathParam[String]("adAccountId").description(""), queryParam[List[String]]("campaignIds").description("").optional.defaultValue(List.empty[String] ), queryParam[List[String]]("entityStatuses").description("").optional.defaultValue(["ACTIVE","PAUSED"]), queryParam[Int]("pageSize").description("").optional.defaultValue(25), queryParam[String]("order").description("").optional, queryParam[String]("bookmark").description("").optional)
  )

  get("/ad_accounts/:ad_account_id/campaigns", operation(campaignsListOperation)) {
    val adAccountId = params.getOrElse("adAccountId", halt(400))
    //println("adAccountId: " + adAccountId)
        val campaignIdsString = params.getAs[String]("campaignIds")
    val campaignIds = if("multi" == "default" || "multi" == "csv") {
      campaignIdsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("campaignIds: " + campaignIds)
        val entityStatusesString = params.getAs[String]("entityStatuses")
    val entityStatuses = if("multi" == "default" || "multi" == "csv") {
      entityStatusesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("entityStatuses: " + entityStatuses)
            val pageSize = params.getAs[Int]("pageSize")

    //println("pageSize: " + pageSize)
            val order = params.getAs[String]("order")

    //println("order: " + order)
            val bookmark = params.getAs[String]("bookmark")

    //println("bookmark: " + bookmark)
  }

  

  val campaignsUpdateOperation = (apiOperation[CampaignUpdateResponse]("campaignsUpdate")
    summary "Update campaigns"
    parameters(pathParam[String]("adAccountId").description(""), bodyParam[List[CampaignUpdateRequest]]("campaignUpdateRequest").description(""))
  )

  patch("/ad_accounts/:ad_account_id/campaigns", operation(campaignsUpdateOperation)) {
    val adAccountId = params.getOrElse("adAccountId", halt(400))
    //println("adAccountId: " + adAccountId)
    //println("campaignUpdateRequest: " + campaignUpdateRequest)
  }

}
