/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 */


package org.openapitools.server.api

import org.openapitools.server.model.Error
import org.openapitools.server.model.Granularity
import java.time.LocalDate
import org.openapitools.server.model.ProductGroupAnalyticsResponseInner
import org.openapitools.server.model.ProductGroupPromotionCreateRequest
import org.openapitools.server.model.ProductGroupPromotionResponse
import org.openapitools.server.model.ProductGroupPromotionUpdateRequest
import org.openapitools.server.model.ProductGroupPromotionsList200Response

import java.io.File

import org.scalatra.ScalatraServlet
import org.scalatra.swagger._
import org.json4s._
import org.json4s.JsonDSL._
import org.scalatra.json.{ JValueResult, JacksonJsonSupport }
import org.scalatra.servlet.{ FileUploadSupport, MultipartConfig, SizeConstraintExceededException }

import scala.collection.JavaConverters._

class ProductGroupPromotionsApi(implicit val swagger: Swagger) extends ScalatraServlet
  with FileUploadSupport
  with JacksonJsonSupport
  with SwaggerSupport {
  protected implicit val jsonFormats: Formats = DefaultFormats

  protected val applicationDescription: String = "ProductGroupPromotionsApi"

  before() {
    contentType = formats("json")
    response.headers += ("Access-Control-Allow-Origin" -> "*")
  }
  

  val productGroupPromotionsCreateOperation = (apiOperation[ProductGroupPromotionResponse]("productGroupPromotionsCreate")
    summary "Create product group promotions"
    parameters(pathParam[String]("adAccountId").description(""), bodyParam[ProductGroupPromotionCreateRequest]("productGroupPromotionCreateRequest").description(""))
  )

  post("/ad_accounts/:ad_account_id/product_group_promotions", operation(productGroupPromotionsCreateOperation)) {
    val adAccountId = params.getOrElse("adAccountId", halt(400))
    //println("adAccountId: " + adAccountId)
    //println("productGroupPromotionCreateRequest: " + productGroupPromotionCreateRequest)
  }

  

  val productGroupPromotionsGetOperation = (apiOperation[ProductGroupPromotionResponse]("productGroupPromotionsGet")
    summary "Get a product group promotion by id"
    parameters(pathParam[String]("adAccountId").description(""), pathParam[String]("productGroupPromotionId").description(""))
  )

  get("/ad_accounts/:ad_account_id/product_group_promotions/:product_group_promotion_id", operation(productGroupPromotionsGetOperation)) {
    val adAccountId = params.getOrElse("adAccountId", halt(400))
    //println("adAccountId: " + adAccountId)
    val productGroupPromotionId = params.getOrElse("productGroupPromotionId", halt(400))
    //println("productGroupPromotionId: " + productGroupPromotionId)
  }

  

  val productGroupPromotionsListOperation = (apiOperation[ProductGroupPromotionsList200Response]("productGroupPromotionsList")
    summary "Get product group promotions"
    parameters(pathParam[String]("adAccountId").description(""), queryParam[List[String]]("productGroupPromotionIds").description("").optional.defaultValue(List.empty[String] ), queryParam[List[String]]("entityStatuses").description("").optional.defaultValue(["ACTIVE","PAUSED"]), queryParam[String]("adGroupId").description("").optional, queryParam[Int]("pageSize").description("").optional.defaultValue(25), queryParam[String]("order").description("").optional, queryParam[String]("bookmark").description("").optional)
  )

  get("/ad_accounts/:ad_account_id/product_group_promotions", operation(productGroupPromotionsListOperation)) {
    val adAccountId = params.getOrElse("adAccountId", halt(400))
    //println("adAccountId: " + adAccountId)
        val productGroupPromotionIdsString = params.getAs[String]("productGroupPromotionIds")
    val productGroupPromotionIds = if("multi" == "default" || "multi" == "csv") {
      productGroupPromotionIdsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("productGroupPromotionIds: " + productGroupPromotionIds)
        val entityStatusesString = params.getAs[String]("entityStatuses")
    val entityStatuses = if("multi" == "default" || "multi" == "csv") {
      entityStatusesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("entityStatuses: " + entityStatuses)
            val adGroupId = params.getAs[String]("adGroupId")

    //println("adGroupId: " + adGroupId)
            val pageSize = params.getAs[Int]("pageSize")

    //println("pageSize: " + pageSize)
            val order = params.getAs[String]("order")

    //println("order: " + order)
            val bookmark = params.getAs[String]("bookmark")

    //println("bookmark: " + bookmark)
  }

  

  val productGroupPromotionsUpdateOperation = (apiOperation[ProductGroupPromotionResponse]("productGroupPromotionsUpdate")
    summary "Update product group promotions"
    parameters(pathParam[String]("adAccountId").description(""), bodyParam[ProductGroupPromotionUpdateRequest]("productGroupPromotionUpdateRequest").description(""))
  )

  patch("/ad_accounts/:ad_account_id/product_group_promotions", operation(productGroupPromotionsUpdateOperation)) {
    val adAccountId = params.getOrElse("adAccountId", halt(400))
    //println("adAccountId: " + adAccountId)
    //println("productGroupPromotionUpdateRequest: " + productGroupPromotionUpdateRequest)
  }

  

  val productGroupsAnalyticsOperation = (apiOperation[List[ProductGroupAnalyticsResponseInner]]("productGroupsAnalytics")
    summary "Get product group analytics"
    parameters(pathParam[String]("adAccountId").description(""), queryParam[LocalDate]("startDate").description(""), queryParam[LocalDate]("endDate").description(""), queryParam[List[String]]("productGroupIds").description("").defaultValue(List.empty[String] ), queryParam[List[String]]("columns").description("").defaultValue(List.empty[String] ), queryParam[Granularity]("granularity").description(""), queryParam[Int]("clickWindowDays").description("").optional.defaultValue(30), queryParam[Int]("engagementWindowDays").description("").optional.defaultValue(30), queryParam[Int]("viewWindowDays").description("").optional.defaultValue(1), queryParam[String]("conversionReportTime").description("").optional.defaultValue(TIME_OF_AD_ACTION))
  )

  get("/ad_accounts/:ad_account_id/product_groups/analytics", operation(productGroupsAnalyticsOperation)) {
    val adAccountId = params.getOrElse("adAccountId", halt(400))
    //println("adAccountId: " + adAccountId)
            val startDate = params.getAs[LocalDate]("startDate")

    //println("startDate: " + startDate)
            val endDate = params.getAs[LocalDate]("endDate")

    //println("endDate: " + endDate)
        val productGroupIdsString = params.getAs[String]("productGroupIds")
    val productGroupIds = if("multi" == "default" || "multi" == "csv") {
      productGroupIdsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("productGroupIds: " + productGroupIds)
        val columnsString = params.getAs[String]("columns")
    val columns = if("csv" == "default" || "csv" == "csv") {
      columnsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("columns: " + columns)
            val granularity = params.getAs[Granularity]("granularity")

    //println("granularity: " + granularity)
            val clickWindowDays = params.getAs[Int]("clickWindowDays")

    //println("clickWindowDays: " + clickWindowDays)
            val engagementWindowDays = params.getAs[Int]("engagementWindowDays")

    //println("engagementWindowDays: " + engagementWindowDays)
            val viewWindowDays = params.getAs[Int]("viewWindowDays")

    //println("viewWindowDays: " + viewWindowDays)
            val conversionReportTime = params.getAs[String]("conversionReportTime")

    //println("conversionReportTime: " + conversionReportTime)
  }

}
