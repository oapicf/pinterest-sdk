/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 */


package org.openapitools.server.api

import org.openapitools.server.model.Error
import org.openapitools.server.model.RelatedTerms

import java.io.File

import org.scalatra.ScalatraServlet
import org.scalatra.swagger._
import org.json4s._
import org.json4s.JsonDSL._
import org.scalatra.json.{ JValueResult, JacksonJsonSupport }
import org.scalatra.servlet.{ FileUploadSupport, MultipartConfig, SizeConstraintExceededException }

import scala.collection.JavaConverters._

class TermsApi(implicit val swagger: Swagger) extends ScalatraServlet
  with FileUploadSupport
  with JacksonJsonSupport
  with SwaggerSupport {
  protected implicit val jsonFormats: Formats = DefaultFormats

  protected val applicationDescription: String = "TermsApi"

  before() {
    contentType = formats("json")
    response.headers += ("Access-Control-Allow-Origin" -> "*")
  }
  

  val termsRelatedListOperation = (apiOperation[RelatedTerms]("termsRelatedList")
    summary "List related terms"
    parameters(queryParam[List[String]]("terms").description("").defaultValue(List.empty[String] ))
  )

  get("/terms/related", operation(termsRelatedListOperation)) {
        val termsString = params.getAs[String]("terms")
    val terms = if("multi" == "default" || "multi" == "csv") {
      termsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("terms: " + terms)
  }

  

  val termsSuggestedListOperation = (apiOperation[List[String]]("termsSuggestedList")
    summary "List suggested terms"
    parameters(queryParam[String]("term").description(""), queryParam[Int]("limit").description("").optional.defaultValue(4))
  )

  get("/terms/suggested", operation(termsSuggestedListOperation)) {
            val term = params.getAs[String]("term")

    //println("term: " + term)
            val limit = params.getAs[Int]("limit")

    //println("limit: " + limit)
  }

}
