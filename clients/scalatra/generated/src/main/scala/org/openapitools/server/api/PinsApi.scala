/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 */


package org.openapitools.server.api

import org.openapitools.server.model.Error
import java.time.LocalDate
import org.openapitools.server.model.Pin
import org.openapitools.server.model.PinAnalyticsMetricsResponse
import org.openapitools.server.model.PinCreate
import org.openapitools.server.model.PinUpdate
import org.openapitools.server.model.PinsAnalyticsMetricTypesParameterInner
import org.openapitools.server.model.PinsList200Response
import org.openapitools.server.model.PinsSaveRequest

import java.io.File

import org.scalatra.ScalatraServlet
import org.scalatra.swagger._
import org.json4s._
import org.json4s.JsonDSL._
import org.scalatra.json.{ JValueResult, JacksonJsonSupport }
import org.scalatra.servlet.{ FileUploadSupport, MultipartConfig, SizeConstraintExceededException }

import scala.collection.JavaConverters._

class PinsApi(implicit val swagger: Swagger) extends ScalatraServlet
  with FileUploadSupport
  with JacksonJsonSupport
  with SwaggerSupport {
  protected implicit val jsonFormats: Formats = DefaultFormats

  protected val applicationDescription: String = "PinsApi"

  before() {
    contentType = formats("json")
    response.headers += ("Access-Control-Allow-Origin" -> "*")
  }
  

  val multiPinsAnalyticsOperation = (apiOperation[Map[String, Map[String, PinAnalyticsMetricsResponse]]]("multiPinsAnalytics")
    summary "Get multiple Pin analytics"
    parameters(queryParam[List[String]]("pinIds").description("").defaultValue(List.empty[String] ), queryParam[LocalDate]("startDate").description(""), queryParam[LocalDate]("endDate").description(""), queryParam[List[PinsAnalyticsMetricTypesParameterInner]]("metricTypes").description("").defaultValue(List.empty[PinsAnalyticsMetricTypesParameterInner] ), queryParam[String]("appTypes").description("").optional.defaultValue(ALL), queryParam[String]("adAccountId").description("").optional)
  )

  get("/pins/analytics", operation(multiPinsAnalyticsOperation)) {
        val pinIdsString = params.getAs[String]("pinIds")
    val pinIds = if("multi" == "default" || "multi" == "csv") {
      pinIdsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("pinIds: " + pinIds)
            val startDate = params.getAs[LocalDate]("startDate")

    //println("startDate: " + startDate)
            val endDate = params.getAs[LocalDate]("endDate")

    //println("endDate: " + endDate)
        val metricTypesString = params.getAs[String]("metricTypes")
    val metricTypes = if("csv" == "default" || "csv" == "csv") {
      metricTypesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("metricTypes: " + metricTypes)
            val appTypes = params.getAs[String]("appTypes")

    //println("appTypes: " + appTypes)
            val adAccountId = params.getAs[String]("adAccountId")

    //println("adAccountId: " + adAccountId)
  }

  

  val pinsAnalyticsOperation = (apiOperation[Map[String, PinAnalyticsMetricsResponse]]("pinsAnalytics")
    summary "Get Pin analytics"
    parameters(pathParam[String]("pinId").description(""), queryParam[LocalDate]("startDate").description(""), queryParam[LocalDate]("endDate").description(""), queryParam[List[PinsAnalyticsMetricTypesParameterInner]]("metricTypes").description("").defaultValue(List.empty[PinsAnalyticsMetricTypesParameterInner] ), queryParam[String]("appTypes").description("").optional.defaultValue(ALL), queryParam[String]("splitField").description("").optional.defaultValue(NO_SPLIT), queryParam[String]("adAccountId").description("").optional)
  )

  get("/pins/:pin_id/analytics", operation(pinsAnalyticsOperation)) {
    val pinId = params.getOrElse("pinId", halt(400))
    //println("pinId: " + pinId)
            val startDate = params.getAs[LocalDate]("startDate")

    //println("startDate: " + startDate)
            val endDate = params.getAs[LocalDate]("endDate")

    //println("endDate: " + endDate)
        val metricTypesString = params.getAs[String]("metricTypes")
    val metricTypes = if("csv" == "default" || "csv" == "csv") {
      metricTypesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("metricTypes: " + metricTypes)
            val appTypes = params.getAs[String]("appTypes")

    //println("appTypes: " + appTypes)
            val splitField = params.getAs[String]("splitField")

    //println("splitField: " + splitField)
            val adAccountId = params.getAs[String]("adAccountId")

    //println("adAccountId: " + adAccountId)
  }

  

  val pinsCreateOperation = (apiOperation[Pin]("pinsCreate")
    summary "Create Pin"
    parameters(bodyParam[PinCreate]("pinCreate").description(""), queryParam[String]("adAccountId").description("").optional)
  )

  post("/pins", operation(pinsCreateOperation)) {
    //println("pinCreate: " + pinCreate)
            val adAccountId = params.getAs[String]("adAccountId")

    //println("adAccountId: " + adAccountId)
  }

  

  val pinsDeleteOperation = (apiOperation[Unit]("pinsDelete")
    summary "Delete Pin"
    parameters(pathParam[String]("pinId").description(""), queryParam[String]("adAccountId").description("").optional)
  )

  delete("/pins/:pin_id", operation(pinsDeleteOperation)) {
    val pinId = params.getOrElse("pinId", halt(400))
    //println("pinId: " + pinId)
            val adAccountId = params.getAs[String]("adAccountId")

    //println("adAccountId: " + adAccountId)
  }

  

  val pinsGetOperation = (apiOperation[Pin]("pinsGet")
    summary "Get Pin"
    parameters(pathParam[String]("pinId").description(""), queryParam[Boolean]("pinMetrics").description("").optional.defaultValue(false), queryParam[String]("adAccountId").description("").optional)
  )

  get("/pins/:pin_id", operation(pinsGetOperation)) {
    val pinId = params.getOrElse("pinId", halt(400))
    //println("pinId: " + pinId)
            val pinMetrics = params.getAs[Boolean]("pinMetrics")

    //println("pinMetrics: " + pinMetrics)
            val adAccountId = params.getAs[String]("adAccountId")

    //println("adAccountId: " + adAccountId)
  }

  

  val pinsListOperation = (apiOperation[PinsList200Response]("pinsList")
    summary "List Pins"
    parameters(queryParam[String]("bookmark").description("").optional, queryParam[Int]("pageSize").description("").optional.defaultValue(25), queryParam[String]("pinFilter").description("").optional, queryParam[Boolean]("includeProtectedPins").description("").optional.defaultValue(false), queryParam[String]("pinType").description("").optional, queryParam[List[String]]("creativeTypes").description("").optional.defaultValue(List.empty[String] ), queryParam[String]("adAccountId").description("").optional, queryParam[Boolean]("pinMetrics").description("").optional.defaultValue(false))
  )

  get("/pins", operation(pinsListOperation)) {
            val bookmark = params.getAs[String]("bookmark")

    //println("bookmark: " + bookmark)
            val pageSize = params.getAs[Int]("pageSize")

    //println("pageSize: " + pageSize)
            val pinFilter = params.getAs[String]("pinFilter")

    //println("pinFilter: " + pinFilter)
            val includeProtectedPins = params.getAs[Boolean]("includeProtectedPins")

    //println("includeProtectedPins: " + includeProtectedPins)
            val pinType = params.getAs[String]("pinType")

    //println("pinType: " + pinType)
        val creativeTypesString = params.getAs[String]("creativeTypes")
    val creativeTypes = if("multi" == "default" || "multi" == "csv") {
      creativeTypesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("creativeTypes: " + creativeTypes)
            val adAccountId = params.getAs[String]("adAccountId")

    //println("adAccountId: " + adAccountId)
            val pinMetrics = params.getAs[Boolean]("pinMetrics")

    //println("pinMetrics: " + pinMetrics)
  }

  

  val pinsSaveOperation = (apiOperation[Pin]("pinsSave")
    summary "Save Pin"
    parameters(pathParam[String]("pinId").description(""), bodyParam[PinsSaveRequest]("pinsSaveRequest").description(""), queryParam[String]("adAccountId").description("").optional)
  )

  post("/pins/:pin_id/save", operation(pinsSaveOperation)) {
    val pinId = params.getOrElse("pinId", halt(400))
    //println("pinId: " + pinId)
    //println("pinsSaveRequest: " + pinsSaveRequest)
            val adAccountId = params.getAs[String]("adAccountId")

    //println("adAccountId: " + adAccountId)
  }

  

  val pinsUpdateOperation = (apiOperation[Pin]("pinsUpdate")
    summary "Update Pin"
    parameters(pathParam[String]("pinId").description(""), bodyParam[PinUpdate]("pinUpdate").description(""), queryParam[String]("adAccountId").description("").optional)
  )

  patch("/pins/:pin_id", operation(pinsUpdateOperation)) {
    val pinId = params.getOrElse("pinId", halt(400))
    //println("pinId: " + pinId)
    //println("pinUpdate: " + pinUpdate)
            val adAccountId = params.getAs[String]("adAccountId")

    //println("adAccountId: " + adAccountId)
  }

}
