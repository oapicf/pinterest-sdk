/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 */


package org.openapitools.server.api

import org.openapitools.server.model.BusinessAssetMembersGet200Response
import org.openapitools.server.model.BusinessAssetPartnersGet200Response
import org.openapitools.server.model.BusinessAssetsGet200Response
import org.openapitools.server.model.BusinessMemberAssetsGet200Response
import org.openapitools.server.model.BusinessMembersAssetAccessDeleteRequest
import org.openapitools.server.model.BusinessPartnerAssetAccessGet200Response
import org.openapitools.server.model.CreateAssetGroupBody
import org.openapitools.server.model.CreateAssetGroupResponse
import org.openapitools.server.model.DeleteAssetGroupBody
import org.openapitools.server.model.DeleteAssetGroupResponse
import org.openapitools.server.model.DeleteMemberAccessResultsResponseArray
import org.openapitools.server.model.DeletePartnerAssetAccessBody
import org.openapitools.server.model.DeletePartnerAssetsResultsResponseArray
import org.openapitools.server.model.Error
import org.openapitools.server.model.PartnerType
import org.openapitools.server.model.PermissionsWithOwner
import org.openapitools.server.model.UpdateAssetGroupBody
import org.openapitools.server.model.UpdateAssetGroupResponse
import org.openapitools.server.model.UpdateMemberAssetAccessBody
import org.openapitools.server.model.UpdateMemberAssetsResultsResponseArray
import org.openapitools.server.model.UpdatePartnerAssetAccessBody
import org.openapitools.server.model.UpdatePartnerAssetsResultsResponseArray

import java.io.File

import org.scalatra.ScalatraServlet
import org.scalatra.swagger._
import org.json4s._
import org.json4s.JsonDSL._
import org.scalatra.json.{ JValueResult, JacksonJsonSupport }
import org.scalatra.servlet.{ FileUploadSupport, MultipartConfig, SizeConstraintExceededException }

import scala.collection.JavaConverters._

class BusinessAccessAssetsApi(implicit val swagger: Swagger) extends ScalatraServlet
  with FileUploadSupport
  with JacksonJsonSupport
  with SwaggerSupport {
  protected implicit val jsonFormats: Formats = DefaultFormats

  protected val applicationDescription: String = "BusinessAccessAssetsApi"

  before() {
    contentType = formats("json")
    response.headers += ("Access-Control-Allow-Origin" -> "*")
  }
  

  val assetGroupCreateOperation = (apiOperation[CreateAssetGroupResponse]("assetGroupCreate")
    summary "Create a new asset group."
    parameters(pathParam[String]("businessId").description(""), bodyParam[CreateAssetGroupBody]("createAssetGroupBody").description(""))
  )

  post("/businesses/:business_id/asset_groups", operation(assetGroupCreateOperation)) {
    val businessId = params.getOrElse("businessId", halt(400))
    //println("businessId: " + businessId)
    //println("createAssetGroupBody: " + createAssetGroupBody)
  }

  

  val assetGroupDeleteOperation = (apiOperation[DeleteAssetGroupResponse]("assetGroupDelete")
    summary "Delete asset groups."
    parameters(pathParam[String]("businessId").description(""), bodyParam[DeleteAssetGroupBody]("deleteAssetGroupBody").description(""))
  )

  delete("/businesses/:business_id/asset_groups", operation(assetGroupDeleteOperation)) {
    val businessId = params.getOrElse("businessId", halt(400))
    //println("businessId: " + businessId)
    //println("deleteAssetGroupBody: " + deleteAssetGroupBody)
  }

  

  val assetGroupUpdateOperation = (apiOperation[UpdateAssetGroupResponse]("assetGroupUpdate")
    summary "Update asset groups."
    parameters(pathParam[String]("businessId").description(""), bodyParam[UpdateAssetGroupBody]("updateAssetGroupBody").description(""))
  )

  patch("/businesses/:business_id/asset_groups", operation(assetGroupUpdateOperation)) {
    val businessId = params.getOrElse("businessId", halt(400))
    //println("businessId: " + businessId)
    //println("updateAssetGroupBody: " + updateAssetGroupBody)
  }

  

  val businessAssetMembersGetOperation = (apiOperation[BusinessAssetMembersGet200Response]("businessAssetMembersGet")
    summary "Get members with access to asset"
    parameters(pathParam[String]("businessId").description(""), pathParam[String]("assetId").description(""), queryParam[String]("bookmark").description("").optional, queryParam[Int]("pageSize").description("").optional.defaultValue(25), queryParam[Int]("startIndex").description("").optional.defaultValue(0))
  )

  get("/businesses/:business_id/assets/:asset_id/members", operation(businessAssetMembersGetOperation)) {
    val businessId = params.getOrElse("businessId", halt(400))
    //println("businessId: " + businessId)
    val assetId = params.getOrElse("assetId", halt(400))
    //println("assetId: " + assetId)
            val bookmark = params.getAs[String]("bookmark")

    //println("bookmark: " + bookmark)
            val pageSize = params.getAs[Int]("pageSize")

    //println("pageSize: " + pageSize)
            val startIndex = params.getAs[Int]("startIndex")

    //println("startIndex: " + startIndex)
  }

  

  val businessAssetPartnersGetOperation = (apiOperation[BusinessAssetPartnersGet200Response]("businessAssetPartnersGet")
    summary "Get partners with access to asset"
    parameters(pathParam[String]("businessId").description(""), pathParam[String]("assetId").description(""), queryParam[Int]("startIndex").description("").optional.defaultValue(0), queryParam[String]("bookmark").description("").optional, queryParam[Int]("pageSize").description("").optional.defaultValue(25))
  )

  get("/businesses/:business_id/assets/:asset_id/partners", operation(businessAssetPartnersGetOperation)) {
    val businessId = params.getOrElse("businessId", halt(400))
    //println("businessId: " + businessId)
    val assetId = params.getOrElse("assetId", halt(400))
    //println("assetId: " + assetId)
            val startIndex = params.getAs[Int]("startIndex")

    //println("startIndex: " + startIndex)
            val bookmark = params.getAs[String]("bookmark")

    //println("bookmark: " + bookmark)
            val pageSize = params.getAs[Int]("pageSize")

    //println("pageSize: " + pageSize)
  }

  

  val businessAssetsGetOperation = (apiOperation[BusinessAssetsGet200Response]("businessAssetsGet")
    summary "List business assets"
    parameters(pathParam[String]("businessId").description(""), queryParam[List[PermissionsWithOwner]]("permissions").description("").optional.defaultValue(List.empty[PermissionsWithOwner] ), queryParam[String]("childAssetId").description("").optional, queryParam[String]("assetGroupId").description("").optional, queryParam[String]("assetType").description("").optional.defaultValue(AD_ACCOUNT), queryParam[Int]("startIndex").description("").optional.defaultValue(0), queryParam[String]("bookmark").description("").optional, queryParam[Int]("pageSize").description("").optional.defaultValue(25))
  )

  get("/businesses/:business_id/assets", operation(businessAssetsGetOperation)) {
    val businessId = params.getOrElse("businessId", halt(400))
    //println("businessId: " + businessId)
        val permissionsString = params.getAs[String]("permissions")
    val permissions = if("multi" == "default" || "multi" == "csv") {
      permissionsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("permissions: " + permissions)
            val childAssetId = params.getAs[String]("childAssetId")

    //println("childAssetId: " + childAssetId)
            val assetGroupId = params.getAs[String]("assetGroupId")

    //println("assetGroupId: " + assetGroupId)
            val assetType = params.getAs[String]("assetType")

    //println("assetType: " + assetType)
            val startIndex = params.getAs[Int]("startIndex")

    //println("startIndex: " + startIndex)
            val bookmark = params.getAs[String]("bookmark")

    //println("bookmark: " + bookmark)
            val pageSize = params.getAs[Int]("pageSize")

    //println("pageSize: " + pageSize)
  }

  

  val businessMemberAssetsGetOperation = (apiOperation[BusinessMemberAssetsGet200Response]("businessMemberAssetsGet")
    summary "Get assets assigned to a member"
    parameters(pathParam[String]("businessId").description(""), pathParam[String]("memberId").description(""), queryParam[String]("assetType").description("").optional.defaultValue(AD_ACCOUNT), queryParam[Int]("startIndex").description("").optional.defaultValue(0), queryParam[String]("bookmark").description("").optional, queryParam[Int]("pageSize").description("").optional.defaultValue(25))
  )

  get("/businesses/:business_id/members/:member_id/assets", operation(businessMemberAssetsGetOperation)) {
    val businessId = params.getOrElse("businessId", halt(400))
    //println("businessId: " + businessId)
    val memberId = params.getOrElse("memberId", halt(400))
    //println("memberId: " + memberId)
            val assetType = params.getAs[String]("assetType")

    //println("assetType: " + assetType)
            val startIndex = params.getAs[Int]("startIndex")

    //println("startIndex: " + startIndex)
            val bookmark = params.getAs[String]("bookmark")

    //println("bookmark: " + bookmark)
            val pageSize = params.getAs[Int]("pageSize")

    //println("pageSize: " + pageSize)
  }

  

  val businessMembersAssetAccessDeleteOperation = (apiOperation[DeleteMemberAccessResultsResponseArray]("businessMembersAssetAccessDelete")
    summary "Delete member access to asset"
    parameters(pathParam[String]("businessId").description(""), bodyParam[BusinessMembersAssetAccessDeleteRequest]("businessMembersAssetAccessDeleteRequest").description(""))
  )

  delete("/businesses/:business_id/members/assets/access", operation(businessMembersAssetAccessDeleteOperation)) {
    val businessId = params.getOrElse("businessId", halt(400))
    //println("businessId: " + businessId)
    //println("businessMembersAssetAccessDeleteRequest: " + businessMembersAssetAccessDeleteRequest)
  }

  

  val businessMembersAssetAccessUpdateOperation = (apiOperation[UpdateMemberAssetsResultsResponseArray]("businessMembersAssetAccessUpdate")
    summary "Assign/Update member asset permissions"
    parameters(pathParam[String]("businessId").description(""), bodyParam[UpdateMemberAssetAccessBody]("updateMemberAssetAccessBody").description(""))
  )

  patch("/businesses/:business_id/members/assets/access", operation(businessMembersAssetAccessUpdateOperation)) {
    val businessId = params.getOrElse("businessId", halt(400))
    //println("businessId: " + businessId)
    //println("updateMemberAssetAccessBody: " + updateMemberAssetAccessBody)
  }

  

  val businessPartnerAssetAccessGetOperation = (apiOperation[BusinessPartnerAssetAccessGet200Response]("businessPartnerAssetAccessGet")
    summary "Get assets assigned to a partner or assets assigned by a partner"
    parameters(pathParam[String]("businessId").description(""), pathParam[String]("partnerId").description(""), queryParam[PartnerType]("partnerType").description("").optional, queryParam[String]("assetType").description("").optional.defaultValue(AD_ACCOUNT), queryParam[Int]("startIndex").description("").optional.defaultValue(0), queryParam[Int]("pageSize").description("").optional.defaultValue(25), queryParam[String]("bookmark").description("").optional)
  )

  get("/businesses/:business_id/partners/:partner_id/assets", operation(businessPartnerAssetAccessGetOperation)) {
    val businessId = params.getOrElse("businessId", halt(400))
    //println("businessId: " + businessId)
    val partnerId = params.getOrElse("partnerId", halt(400))
    //println("partnerId: " + partnerId)
            val partnerType = params.getAs[PartnerType]("partnerType")

    //println("partnerType: " + partnerType)
            val assetType = params.getAs[String]("assetType")

    //println("assetType: " + assetType)
            val startIndex = params.getAs[Int]("startIndex")

    //println("startIndex: " + startIndex)
            val pageSize = params.getAs[Int]("pageSize")

    //println("pageSize: " + pageSize)
            val bookmark = params.getAs[String]("bookmark")

    //println("bookmark: " + bookmark)
  }

  

  val deletePartnerAssetAccessHandlerImplOperation = (apiOperation[DeletePartnerAssetsResultsResponseArray]("deletePartnerAssetAccessHandlerImpl")
    summary "Delete partner access to asset"
    parameters(pathParam[String]("businessId").description(""), bodyParam[DeletePartnerAssetAccessBody]("deletePartnerAssetAccessBody").description(""))
  )

  delete("/businesses/:business_id/partners/assets", operation(deletePartnerAssetAccessHandlerImplOperation)) {
    val businessId = params.getOrElse("businessId", halt(400))
    //println("businessId: " + businessId)
    //println("deletePartnerAssetAccessBody: " + deletePartnerAssetAccessBody)
  }

  

  val updatePartnerAssetAccessHandlerImplOperation = (apiOperation[UpdatePartnerAssetsResultsResponseArray]("updatePartnerAssetAccessHandlerImpl")
    summary "Assign/Update partner asset permissions"
    parameters(pathParam[String]("businessId").description(""), bodyParam[UpdatePartnerAssetAccessBody]("updatePartnerAssetAccessBody").description(""))
  )

  patch("/businesses/:business_id/partners/assets", operation(updatePartnerAssetAccessHandlerImplOperation)) {
    val businessId = params.getOrElse("businessId", halt(400))
    //println("businessId: " + businessId)
    //println("updatePartnerAssetAccessBody: " + updatePartnerAssetAccessBody)
  }

}
