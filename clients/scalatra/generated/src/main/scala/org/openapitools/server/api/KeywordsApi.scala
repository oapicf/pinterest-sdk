/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 */


package org.openapitools.server.api

import org.openapitools.server.model.Error
import org.openapitools.server.model.KeywordUpdateBody
import org.openapitools.server.model.KeywordsGet200Response
import org.openapitools.server.model.KeywordsMetricsArrayResponse
import org.openapitools.server.model.KeywordsRequest
import org.openapitools.server.model.KeywordsResponse
import org.openapitools.server.model.MatchType
import org.openapitools.server.model.TrendType
import org.openapitools.server.model.TrendingKeywordsResponse
import org.openapitools.server.model.TrendsSupportedRegion

import java.io.File

import org.scalatra.ScalatraServlet
import org.scalatra.swagger._
import org.json4s._
import org.json4s.JsonDSL._
import org.scalatra.json.{ JValueResult, JacksonJsonSupport }
import org.scalatra.servlet.{ FileUploadSupport, MultipartConfig, SizeConstraintExceededException }

import scala.collection.JavaConverters._

class KeywordsApi(implicit val swagger: Swagger) extends ScalatraServlet
  with FileUploadSupport
  with JacksonJsonSupport
  with SwaggerSupport {
  protected implicit val jsonFormats: Formats = DefaultFormats

  protected val applicationDescription: String = "KeywordsApi"

  before() {
    contentType = formats("json")
    response.headers += ("Access-Control-Allow-Origin" -> "*")
  }
  

  val countryKeywordsMetricsGetOperation = (apiOperation[KeywordsMetricsArrayResponse]("countryKeywordsMetricsGet")
    summary "Get country's keyword metrics"
    parameters(pathParam[String]("adAccountId").description(""), queryParam[String]("countryCode").description(""), queryParam[List[String]]("keywords").description("").defaultValue(List.empty[String] ))
  )

  get("/ad_accounts/:ad_account_id/keywords/metrics", operation(countryKeywordsMetricsGetOperation)) {
    val adAccountId = params.getOrElse("adAccountId", halt(400))
    //println("adAccountId: " + adAccountId)
            val countryCode = params.getAs[String]("countryCode")

    //println("countryCode: " + countryCode)
        val keywordsString = params.getAs[String]("keywords")
    val keywords = if("csv" == "default" || "csv" == "csv") {
      keywordsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("keywords: " + keywords)
  }

  

  val keywordsCreateOperation = (apiOperation[KeywordsResponse]("keywordsCreate")
    summary "Create keywords"
    parameters(pathParam[String]("adAccountId").description(""), bodyParam[KeywordsRequest]("keywordsRequest").description(""))
  )

  post("/ad_accounts/:ad_account_id/keywords", operation(keywordsCreateOperation)) {
    val adAccountId = params.getOrElse("adAccountId", halt(400))
    //println("adAccountId: " + adAccountId)
    //println("keywordsRequest: " + keywordsRequest)
  }

  

  val keywordsGetOperation = (apiOperation[KeywordsGet200Response]("keywordsGet")
    summary "Get keywords"
    parameters(pathParam[String]("adAccountId").description(""), queryParam[String]("campaignId").description("").optional, queryParam[String]("adGroupId").description("").optional, queryParam[List[MatchType]]("matchTypes").description("").optional.defaultValue(List.empty[MatchType] ), queryParam[Int]("pageSize").description("").optional.defaultValue(25), queryParam[String]("bookmark").description("").optional)
  )

  get("/ad_accounts/:ad_account_id/keywords", operation(keywordsGetOperation)) {
    val adAccountId = params.getOrElse("adAccountId", halt(400))
    //println("adAccountId: " + adAccountId)
            val campaignId = params.getAs[String]("campaignId")

    //println("campaignId: " + campaignId)
            val adGroupId = params.getAs[String]("adGroupId")

    //println("adGroupId: " + adGroupId)
        val matchTypesString = params.getAs[String]("matchTypes")
    val matchTypes = if("multi" == "default" || "multi" == "csv") {
      matchTypesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("matchTypes: " + matchTypes)
            val pageSize = params.getAs[Int]("pageSize")

    //println("pageSize: " + pageSize)
            val bookmark = params.getAs[String]("bookmark")

    //println("bookmark: " + bookmark)
  }

  

  val keywordsUpdateOperation = (apiOperation[KeywordsResponse]("keywordsUpdate")
    summary "Update keywords"
    parameters(pathParam[String]("adAccountId").description(""), bodyParam[KeywordUpdateBody]("keywordUpdateBody").description(""))
  )

  patch("/ad_accounts/:ad_account_id/keywords", operation(keywordsUpdateOperation)) {
    val adAccountId = params.getOrElse("adAccountId", halt(400))
    //println("adAccountId: " + adAccountId)
    //println("keywordUpdateBody: " + keywordUpdateBody)
  }

  

  val trendingKeywordsListOperation = (apiOperation[TrendingKeywordsResponse]("trendingKeywordsList")
    summary "List trending keywords"
    parameters(pathParam[TrendsSupportedRegion]("region").description(""), pathParam[TrendType]("trendType").description(""), queryParam[List[String]]("interests").description("").optional.defaultValue(List.empty[String] ), queryParam[List[String]]("genders").description("").optional.defaultValue(List.empty[String] ), queryParam[List[String]]("ages").description("").optional.defaultValue(List.empty[String] ), queryParam[List[String]]("includeKeywords").description("").optional.defaultValue(List.empty[String] ), queryParam[Boolean]("normalizeAgainstGroup").description("").optional.defaultValue(false), queryParam[Int]("limit").description("").optional.defaultValue(50))
  )

  get("/trends/keywords/:region/top/:trend_type", operation(trendingKeywordsListOperation)) {
    val region = params.getOrElse("region", halt(400))
    //println("region: " + region)
    val trendType = params.getOrElse("trendType", halt(400))
    //println("trendType: " + trendType)
        val interestsString = params.getAs[String]("interests")
    val interests = if("multi" == "default" || "multi" == "csv") {
      interestsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("interests: " + interests)
        val gendersString = params.getAs[String]("genders")
    val genders = if("multi" == "default" || "multi" == "csv") {
      gendersString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("genders: " + genders)
        val agesString = params.getAs[String]("ages")
    val ages = if("multi" == "default" || "multi" == "csv") {
      agesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("ages: " + ages)
        val includeKeywordsString = params.getAs[String]("includeKeywords")
    val includeKeywords = if("multi" == "default" || "multi" == "csv") {
      includeKeywordsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("includeKeywords: " + includeKeywords)
            val normalizeAgainstGroup = params.getAs[Boolean]("normalizeAgainstGroup")

    //println("normalizeAgainstGroup: " + normalizeAgainstGroup)
            val limit = params.getAs[Int]("limit")

    //println("limit: " + limit)
  }

}
