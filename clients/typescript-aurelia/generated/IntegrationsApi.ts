/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { autoinject } from 'aurelia-framework';
import { HttpClient } from 'aurelia-http-client';
import { Api } from './Api';
import { AuthStorage } from './AuthStorage';
import {
  IntegrationRequest,
  IntegrationsGetList200Response,
  IntegrationLogsSuccessResponse,
  IntegrationMetadata,
  IntegrationRequestPatch,
  IntegrationRecord,
  IntegrationLogsRequest,
} from './models';

/**
 * integrationsCommerceDel - parameters interface
 */
export interface IIntegrationsCommerceDelParams {
  externalBusinessId: string;
}

/**
 * integrationsCommerceGet - parameters interface
 */
export interface IIntegrationsCommerceGetParams {
  externalBusinessId: string;
}

/**
 * integrationsCommercePatch - parameters interface
 */
export interface IIntegrationsCommercePatchParams {
  externalBusinessId: string;
  integrationRequestPatch?: IntegrationRequestPatch;
}

/**
 * integrationsCommercePost - parameters interface
 */
export interface IIntegrationsCommercePostParams {
  integrationRequest?: IntegrationRequest;
}

/**
 * integrationsGetById - parameters interface
 */
export interface IIntegrationsGetByIdParams {
  id: string;
}

/**
 * integrationsGetList - parameters interface
 */
export interface IIntegrationsGetListParams {
  bookmark?: string;
  pageSize?: number;
}

/**
 * integrationsLogsPost - parameters interface
 */
export interface IIntegrationsLogsPostParams {
  integrationLogsRequest: IntegrationLogsRequest;
}

/**
 * IntegrationsApi - API class
 */
@autoinject()
export class IntegrationsApi extends Api {

  /**
   * Creates a new IntegrationsApi class.
   *
   * @param httpClient The Aurelia HTTP client to be injected.
   * @param authStorage A storage for authentication data.
   */
  constructor(httpClient: HttpClient, authStorage: AuthStorage) {
    super(httpClient, authStorage);
  }

  /**
   * Delete commerce integration
   * Delete commerce integration metadata for the given external business ID. Note: If you\&#39;re interested in joining the beta, please reach out to your Pinterest account manager.
   * @param params.externalBusinessId External business ID for the integration.
   */
  async integrationsCommerceDel(params: IIntegrationsCommerceDelParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('integrationsCommerceDel', params, 'externalBusinessId');

    // Create URL to call
    const url = `${this.basePath}/integrations/commerce/{external_business_id}`
      .replace(`{${'external_business_id'}}`, encodeURIComponent(`${params['externalBusinessId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asDelete()

      // Authentication 'pinterest_oauth2' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get commerce integration
   * Get commerce integration metadata associated with the given external business ID. Note: If you\&#39;re interested in joining the beta, please reach out to your Pinterest account manager.
   * @param params.externalBusinessId External business ID for the integration.
   */
  async integrationsCommerceGet(params: IIntegrationsCommerceGetParams): Promise<IntegrationMetadata> {
    // Verify required parameters are set
    this.ensureParamIsSet('integrationsCommerceGet', params, 'externalBusinessId');

    // Create URL to call
    const url = `${this.basePath}/integrations/commerce/{external_business_id}`
      .replace(`{${'external_business_id'}}`, encodeURIComponent(`${params['externalBusinessId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'pinterest_oauth2' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Update commerce integration
   * Update commerce integration metadata for the given external business ID. Note: If you\&#39;re interested in joining the beta, please reach out to your Pinterest account manager.
   * @param params.externalBusinessId External business ID for the integration.
   * @param params.integrationRequestPatch Parameters to get create/update the Integration Metadata
   */
  async integrationsCommercePatch(params: IIntegrationsCommercePatchParams): Promise<IntegrationMetadata> {
    // Verify required parameters are set
    this.ensureParamIsSet('integrationsCommercePatch', params, 'externalBusinessId');

    // Create URL to call
    const url = `${this.basePath}/integrations/commerce/{external_business_id}`
      .replace(`{${'external_business_id'}}`, encodeURIComponent(`${params['externalBusinessId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPatch()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['integrationRequestPatch'] || {}))

      // Authentication 'pinterest_oauth2' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Create commerce integration
   * Create commerce integration metadata to link an external business ID with a Pinterest merchant &amp; ad account. Note: If you\&#39;re interested in joining the beta, please reach out to your Pinterest account manager.
   * @param params.integrationRequest Parameters to get create/update the Integration Metadata
   */
  async integrationsCommercePost(params: IIntegrationsCommercePostParams): Promise<IntegrationMetadata> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/integrations/commerce`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['integrationRequest'] || {}))

      // Authentication 'pinterest_oauth2' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get integration metadata
   * Get integration metadata by ID. Note: If you\&#39;re interested in joining the beta, please reach out to your Pinterest account manager.
   * @param params.id Integration ID.
   */
  async integrationsGetById(params: IIntegrationsGetByIdParams): Promise<IntegrationRecord> {
    // Verify required parameters are set
    this.ensureParamIsSet('integrationsGetById', params, 'id');

    // Create URL to call
    const url = `${this.basePath}/integrations/{id}`
      .replace(`{${'id'}}`, encodeURIComponent(`${params['id']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'pinterest_oauth2' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get integration metadata list
   * Get integration metadata list. Note: If you\&#39;re interested in joining the beta, please reach out to your Pinterest account manager.
   * @param params.bookmark Cursor used to fetch the next page of items
   * @param params.pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;\&#39;/docs/reference/pagination/\&#39;&gt;Pagination&lt;/a&gt; for more information.
   */
  async integrationsGetList(params: IIntegrationsGetListParams): Promise<IntegrationsGetList200Response> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/integrations`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'bookmark': params['bookmark'],
        'page_size': params['pageSize'],
      })

      // Authentication 'pinterest_oauth2' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Receives batched logs from integration applications.
   * This endpoint receives batched logs from integration applications on partner platforms. Note: If you\&#39;re interested in joining the beta, please reach out to your Pinterest account manager.
   * @param params.integrationLogsRequest Ingest log information from external integration application.
   */
  async integrationsLogsPost(params: IIntegrationsLogsPostParams): Promise<IntegrationLogsSuccessResponse> {
    // Verify required parameters are set
    this.ensureParamIsSet('integrationsLogsPost', params, 'integrationLogsRequest');

    // Create URL to call
    const url = `${this.basePath}/integrations/logs`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['integrationLogsRequest'] || {}))

      // Authentication 'pinterest_oauth2' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

}

