/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { autoinject } from 'aurelia-framework';
import { HttpClient } from 'aurelia-http-client';
import { Api } from './Api';
import { AuthStorage } from './AuthStorage';
import {
  RelatedTerms,
} from './models';

/**
 * termsRelatedList - parameters interface
 */
export interface ITermsRelatedListParams {
  terms: Array<string>;
}

/**
 * termsSuggestedList - parameters interface
 */
export interface ITermsSuggestedListParams {
  term: string;
  limit?: number;
}

/**
 * TermsApi - API class
 */
@autoinject()
export class TermsApi extends Api {

  /**
   * Creates a new TermsApi class.
   *
   * @param httpClient The Aurelia HTTP client to be injected.
   * @param authStorage A storage for authentication data.
   */
  constructor(httpClient: HttpClient, authStorage: AuthStorage) {
    super(httpClient, authStorage);
  }

  /**
   * List related terms
   * Get a list of terms logically related to each input term. &lt;p/&gt; Example: the term \&#39;workout\&#39; would list related terms like \&#39;one song workout\&#39;, \&#39;yoga workout\&#39;, \&#39;workout motivation\&#39;, etc.
   * @param params.terms List of input terms.
   */
  async termsRelatedList(params: ITermsRelatedListParams): Promise<RelatedTerms> {
    // Verify required parameters are set
    this.ensureParamIsSet('termsRelatedList', params, 'terms');

    // Create URL to call
    const url = `${this.basePath}/terms/related`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'terms': params['terms'],
      })

      // Authentication 'pinterest_oauth2' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * List suggested terms
   * Get popular search terms that begin with your input term. &lt;p/&gt; Example: \&#39;sport\&#39; would return popular terms like \&#39;sports bar\&#39; and \&#39;sportswear\&#39;, but not \&#39;motor sports\&#39; since the phrase does not begin with the given term.
   * @param params.term Input term.
   * @param params.limit Max suggested terms to return.
   */
  async termsSuggestedList(params: ITermsSuggestedListParams): Promise<Array<string>> {
    // Verify required parameters are set
    this.ensureParamIsSet('termsSuggestedList', params, 'term');

    // Create URL to call
    const url = `${this.basePath}/terms/suggested`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'term': params['term'],
        'limit': params['limit'],
      })

      // Authentication 'pinterest_oauth2' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

}

