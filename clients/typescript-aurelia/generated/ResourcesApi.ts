/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { autoinject } from 'aurelia-framework';
import { HttpClient } from 'aurelia-http-client';
import { Api } from './Api';
import { AuthStorage } from './AuthStorage';
import {
  AdAccountsCountryResponse,
  BookClosedResponse,
  DeliveryMetricsResponse,
  SingleInterestTargetingOptionResponse,
} from './models';

/**
 * adAccountCountriesGet - parameters interface
 */
export interface IAdAccountCountriesGetParams {
}

/**
 * deliveryMetricsGet - parameters interface
 */
export interface IDeliveryMetricsGetParams {
  reportType?: 'SYNC' | 'ASYNC';
}

/**
 * interestTargetingOptionsGet - parameters interface
 */
export interface IInterestTargetingOptionsGetParams {
  interestId: string;
}

/**
 * leadFormQuestionsGet - parameters interface
 */
export interface ILeadFormQuestionsGetParams {
}

/**
 * metricsReadyStateGet - parameters interface
 */
export interface IMetricsReadyStateGetParams {
  date: string;
}

/**
 * targetingOptionsGet - parameters interface
 */
export interface ITargetingOptionsGetParams {
  targetingType: 'APPTYPE' | 'GENDER' | 'LOCALE' | 'AGE_BUCKET' | 'LOCATION' | 'GEO' | 'INTEREST' | 'KEYWORD' | 'AUDIENCE_INCLUDE' | 'AUDIENCE_EXCLUDE';
  clientId?: string;
  oauthSignature?: string;
  timestamp?: string;
  adAccountId?: string;
}

/**
 * ResourcesApi - API class
 */
@autoinject()
export class ResourcesApi extends Api {

  /**
   * Creates a new ResourcesApi class.
   *
   * @param httpClient The Aurelia HTTP client to be injected.
   * @param authStorage A storage for authentication data.
   */
  constructor(httpClient: HttpClient, authStorage: AuthStorage) {
    super(httpClient, authStorage);
  }

  /**
   * Get ad accounts countries
   * Get Ad Accounts countries
   */
  async adAccountCountriesGet(): Promise<AdAccountsCountryResponse> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/resources/ad_account_countries`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'pinterest_oauth2' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get available metrics\&#39; definitions
   * Get the definitions for ads and organic metrics available across both synchronous and asynchronous report endpoints. The &#x60;display_name&#x60; attribute will match how the metric is named in our native tools like Ads Manager. See &lt;a href&#x3D;\&#39;/docs/api-features/analytics-overview/\&#39;&gt;Organic Analytics&lt;/a&gt; and &lt;a href&#x3D;\&#39;/docs/api-features/ads-reporting/\&#39;&gt;Ads Analytics&lt;/a&gt; for more information.
   * @param params.reportType Report type.
   */
  async deliveryMetricsGet(params: IDeliveryMetricsGetParams): Promise<DeliveryMetricsResponse> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/resources/delivery_metrics`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'report_type': params['reportType'],
      })

      // Authentication 'pinterest_oauth2' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get interest details
   * &lt;p&gt;Get details of a specific interest given interest ID.&lt;/p&gt; &lt;p&gt;Click &lt;a href&#x3D;\&quot;https://docs.google.com/spreadsheets/d/1HxL-0Z3p2fgxis9YBP2HWC3tvPrs1hAuHDRtH-NJTIM/edit#gid&#x3D;118370875\&quot; target&#x3D;\&quot;_blank\&quot;&gt;here&lt;/a&gt; for a spreadsheet listing interests and their IDs.&lt;/p&gt;
   * @param params.interestId Unique identifier of an interest.
   */
  async interestTargetingOptionsGet(params: IInterestTargetingOptionsGetParams): Promise<SingleInterestTargetingOptionResponse> {
    // Verify required parameters are set
    this.ensureParamIsSet('interestTargetingOptionsGet', params, 'interestId');

    // Create URL to call
    const url = `${this.basePath}/resources/targeting/interests/{interest_id}`
      .replace(`{${'interest_id'}}`, encodeURIComponent(`${params['interestId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'pinterest_oauth2' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get lead form questions
   * Get a list of all lead form question type names. Some questions might not be used.  &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;\&#39;/docs/getting-started/beta-and-advanced-access/\&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;
   */
  async leadFormQuestionsGet(): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/resources/lead_form_questions`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'pinterest_oauth2' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get metrics ready state
   * Learn whether conversion or non-conversion metrics are finalized and ready to query.
   * @param params.date Analytics reports request date (UTC). Format: YYYY-MM-DD
   */
  async metricsReadyStateGet(params: IMetricsReadyStateGetParams): Promise<BookClosedResponse> {
    // Verify required parameters are set
    this.ensureParamIsSet('metricsReadyStateGet', params, 'date');

    // Create URL to call
    const url = `${this.basePath}/resources/metrics_ready_state`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'date': params['date'],
      })

      // Authentication 'pinterest_oauth2' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get targeting options
   * &lt;p&gt;You can use targeting values in ads placement to define your intended audience. &lt;/p&gt; &lt;p&gt;Targeting metrics are organized around targeting specifications.&lt;/p&gt; &lt;p&gt;For more information on ads targeting, see &lt;a class&#x3D;\&quot;reference external\&quot; href&#x3D;\&quot;https://help.pinterest.com/en/business/article/audience-targeting\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Audience targeting&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;b&gt;Sample return:&lt;/b&gt;&lt;/p&gt; &lt;pre class&#x3D;\&quot;literal-block\&quot;&gt; [{&amp;quot;36313&amp;quot;: &amp;quot;Australia: Moreton Bay - North&amp;quot;, &amp;quot;124735&amp;quot;: &amp;quot;Canada: North Battleford&amp;quot;, &amp;quot;36109&amp;quot;: &amp;quot;Australia: Murray&amp;quot;, &amp;quot;36108&amp;quot;: &amp;quot;Australia: Mid North Coast&amp;quot;, &amp;quot;36101&amp;quot;: &amp;quot;Australia: Capital Region&amp;quot;, &amp;quot;811&amp;quot;: &amp;quot;U.S.: Reno&amp;quot;, &amp;quot;36103&amp;quot;: &amp;quot;Australia: Central West&amp;quot;, &amp;quot;36102&amp;quot;: &amp;quot;Australia: Central Coast&amp;quot;, &amp;quot;36105&amp;quot;: &amp;quot;Australia: Far West and Orana&amp;quot;, &amp;quot;36104&amp;quot;: &amp;quot;Australia: Coffs Harbour - Grafton&amp;quot;, &amp;quot;36107&amp;quot;: &amp;quot;Australia: Illawarra&amp;quot;, &amp;quot;36106&amp;quot;: &amp;quot;Australia: Hunter Valley Exc Newcastle&amp;quot;, &amp;quot;554017&amp;quot;: &amp;quot;New Zealand: Wanganui&amp;quot;, &amp;quot;554016&amp;quot;: &amp;quot;New Zealand: Marlborough&amp;quot;, &amp;quot;554015&amp;quot;: &amp;quot;New Zealand: Gisborne&amp;quot;, &amp;quot;554014&amp;quot;: &amp;quot;New Zealand: Tararua&amp;quot;, &amp;quot;554013&amp;quot;: &amp;quot;New Zealand: Invercargill&amp;quot;, &amp;quot;GR&amp;quot;: &amp;quot;Greece&amp;quot;, &amp;quot;554011&amp;quot;: &amp;quot;New Zealand: Whangarei&amp;quot;, &amp;quot;554010&amp;quot;: &amp;quot;New Zealand: Far North&amp;quot;, &amp;quot;717&amp;quot;: &amp;quot;U.S.: Quincy-Hannibal-Keokuk&amp;quot;, &amp;quot;716&amp;quot;: &amp;quot;U.S.: Baton Rouge&amp;quot;,...}] &lt;/pre&gt;
   * @param params.targetingType Public targeting type.
   * @param params.clientId Client ID.
   * @param params.oauthSignature Oauth signature
   * @param params.timestamp Timestamp
   * @param params.adAccountId Unique identifier of an ad account.
   */
  async targetingOptionsGet(params: ITargetingOptionsGetParams): Promise<Array<object>> {
    // Verify required parameters are set
    this.ensureParamIsSet('targetingOptionsGet', params, 'targetingType');

    // Create URL to call
    const url = `${this.basePath}/resources/targeting/{targeting_type}`
      .replace(`{${'targeting_type'}}`, encodeURIComponent(`${params['targetingType']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'client_id': params['clientId'],
        'oauth_signature': params['oauthSignature'],
        'timestamp': params['timestamp'],
        'ad_account_id': params['adAccountId'],
      })

      // Authentication 'pinterest_oauth2' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

}

