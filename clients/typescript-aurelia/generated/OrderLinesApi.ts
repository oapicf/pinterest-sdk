/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { autoinject } from 'aurelia-framework';
import { HttpClient } from 'aurelia-http-client';
import { Api } from './Api';
import { AuthStorage } from './AuthStorage';
import {
  OrderLine,
  OrderLinesList200Response,
} from './models';

/**
 * orderLinesGet - parameters interface
 */
export interface IOrderLinesGetParams {
  adAccountId: string;
  orderLineId: string;
}

/**
 * orderLinesList - parameters interface
 */
export interface IOrderLinesListParams {
  adAccountId: string;
  pageSize?: number;
  order?: 'ASCENDING' | 'DESCENDING';
  bookmark?: string;
}

/**
 * OrderLinesApi - API class
 */
@autoinject()
export class OrderLinesApi extends Api {

  /**
   * Creates a new OrderLinesApi class.
   *
   * @param httpClient The Aurelia HTTP client to be injected.
   * @param authStorage A storage for authentication data.
   */
  constructor(httpClient: HttpClient, authStorage: AuthStorage) {
    super(httpClient, authStorage);
  }

  /**
   * Get order line
   * Get a specific existing order line associated with an ad account.
   * @param params.adAccountId Unique identifier of an ad account.
   * @param params.orderLineId Unique identifier of an order line.
   */
  async orderLinesGet(params: IOrderLinesGetParams): Promise<OrderLine> {
    // Verify required parameters are set
    this.ensureParamIsSet('orderLinesGet', params, 'adAccountId');
    this.ensureParamIsSet('orderLinesGet', params, 'orderLineId');

    // Create URL to call
    const url = `${this.basePath}/ad_accounts/{ad_account_id}/order_lines/{order_line_id}`
      .replace(`{${'ad_account_id'}}`, encodeURIComponent(`${params['adAccountId']}`))
      .replace(`{${'order_line_id'}}`, encodeURIComponent(`${params['orderLineId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'pinterest_oauth2' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get order lines
   * List existing order lines associated with an ad account.
   * @param params.adAccountId Unique identifier of an ad account.
   * @param params.pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;\&#39;/docs/reference/pagination/\&#39;&gt;Pagination&lt;/a&gt; for more information.
   * @param params.order The order in which to sort the items returned: “ASCENDING” or “DESCENDING” by ID. Note that higher-value IDs are associated with more-recently added items.
   * @param params.bookmark Cursor used to fetch the next page of items
   */
  async orderLinesList(params: IOrderLinesListParams): Promise<OrderLinesList200Response> {
    // Verify required parameters are set
    this.ensureParamIsSet('orderLinesList', params, 'adAccountId');

    // Create URL to call
    const url = `${this.basePath}/ad_accounts/{ad_account_id}/order_lines`
      .replace(`{${'ad_account_id'}}`, encodeURIComponent(`${params['adAccountId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'page_size': params['pageSize'],
        'order': params['order'],
        'bookmark': params['bookmark'],
      })

      // Authentication 'pinterest_oauth2' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

}

