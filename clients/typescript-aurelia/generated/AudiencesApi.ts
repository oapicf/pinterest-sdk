/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { autoinject } from 'aurelia-framework';
import { HttpClient } from 'aurelia-http-client';
import { Api } from './Api';
import { AuthStorage } from './AuthStorage';
import {
  AudienceUpdateRequest,
  Audience,
  AudienceCreateCustomRequest,
  AudienceCreateRequest,
  AudiencesList200Response,
} from './models';

/**
 * audiencesCreate - parameters interface
 */
export interface IAudiencesCreateParams {
  adAccountId: string;
  audienceCreateRequest: AudienceCreateRequest;
}

/**
 * audiencesCreateCustom - parameters interface
 */
export interface IAudiencesCreateCustomParams {
  adAccountId: string;
  audienceCreateCustomRequest: AudienceCreateCustomRequest;
}

/**
 * audiencesGet - parameters interface
 */
export interface IAudiencesGetParams {
  adAccountId: string;
  audienceId: string;
}

/**
 * audiencesList - parameters interface
 */
export interface IAudiencesListParams {
  adAccountId: string;
  bookmark?: string;
  order?: 'ASCENDING' | 'DESCENDING';
  pageSize?: number;
  ownershipType?: 'OWNED' | 'RECEIVED';
}

/**
 * audiencesUpdate - parameters interface
 */
export interface IAudiencesUpdateParams {
  adAccountId: string;
  audienceId: string;
  audienceUpdateRequest?: AudienceUpdateRequest;
}

/**
 * AudiencesApi - API class
 */
@autoinject()
export class AudiencesApi extends Api {

  /**
   * Creates a new AudiencesApi class.
   *
   * @param httpClient The Aurelia HTTP client to be injected.
   * @param authStorage A storage for authentication data.
   */
  constructor(httpClient: HttpClient, authStorage: AuthStorage) {
    super(httpClient, authStorage);
  }

  /**
   * Create audience
   * Create an audience you can use in targeting for specific ad groups. Targeting combines customer information with the ways users interact with Pinterest to help you reach specific groups of users; you can include or exclude specific audience_ids when you create an ad group. &lt;p/&gt; For more, see &lt;a class&#x3D;\&quot;reference external\&quot; href&#x3D;\&quot;https://help.pinterest.com/en/business/article/audience-targeting\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Audience targeting&lt;/a&gt;.
   * @param params.adAccountId Unique identifier of an ad account.
   * @param params.audienceCreateRequest List of ads to create, size limit [1, 30]
   */
  async audiencesCreate(params: IAudiencesCreateParams): Promise<Audience> {
    // Verify required parameters are set
    this.ensureParamIsSet('audiencesCreate', params, 'adAccountId');
    this.ensureParamIsSet('audiencesCreate', params, 'audienceCreateRequest');

    // Create URL to call
    const url = `${this.basePath}/ad_accounts/{ad_account_id}/audiences`
      .replace(`{${'ad_account_id'}}`, encodeURIComponent(`${params['adAccountId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['audienceCreateRequest'] || {}))

      // Authentication 'pinterest_oauth2' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Create custom audience
   * Create a custom audience and find the audiences you want your ads to reach.
   * @param params.adAccountId Unique identifier of an ad account.
   * @param params.audienceCreateCustomRequest Custom audience to create.
   */
  async audiencesCreateCustom(params: IAudiencesCreateCustomParams): Promise<Audience> {
    // Verify required parameters are set
    this.ensureParamIsSet('audiencesCreateCustom', params, 'adAccountId');
    this.ensureParamIsSet('audiencesCreateCustom', params, 'audienceCreateCustomRequest');

    // Create URL to call
    const url = `${this.basePath}/ad_accounts/{ad_account_id}/audiences/custom`
      .replace(`{${'ad_account_id'}}`, encodeURIComponent(`${params['adAccountId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['audienceCreateCustomRequest'] || {}))

      // Authentication 'pinterest_oauth2' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get audience
   * Get a specific audience given the audience ID.
   * @param params.adAccountId Unique identifier of an ad account.
   * @param params.audienceId Unique identifier of an audience
   */
  async audiencesGet(params: IAudiencesGetParams): Promise<Audience> {
    // Verify required parameters are set
    this.ensureParamIsSet('audiencesGet', params, 'adAccountId');
    this.ensureParamIsSet('audiencesGet', params, 'audienceId');

    // Create URL to call
    const url = `${this.basePath}/ad_accounts/{ad_account_id}/audiences/{audience_id}`
      .replace(`{${'ad_account_id'}}`, encodeURIComponent(`${params['adAccountId']}`))
      .replace(`{${'audience_id'}}`, encodeURIComponent(`${params['audienceId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'pinterest_oauth2' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * List audiences
   * Get list of audiences for the ad account.
   * @param params.adAccountId Unique identifier of an ad account.
   * @param params.bookmark Cursor used to fetch the next page of items
   * @param params.order The order in which to sort the items returned: “ASCENDING” or “DESCENDING” by ID. For received audiences, it is sorted by sharing event time. Note that higher-value IDs are associated with more-recently added items.
   * @param params.pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;\&#39;/docs/reference/pagination/\&#39;&gt;Pagination&lt;/a&gt; for more information.
   * @param params.ownershipType Filter audiences by ownership type.
   */
  async audiencesList(params: IAudiencesListParams): Promise<AudiencesList200Response> {
    // Verify required parameters are set
    this.ensureParamIsSet('audiencesList', params, 'adAccountId');

    // Create URL to call
    const url = `${this.basePath}/ad_accounts/{ad_account_id}/audiences`
      .replace(`{${'ad_account_id'}}`, encodeURIComponent(`${params['adAccountId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'bookmark': params['bookmark'],
        'order': params['order'],
        'page_size': params['pageSize'],
        'ownership_type': params['ownershipType'],
      })

      // Authentication 'pinterest_oauth2' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Update audience
   * Update (edit or remove) an existing targeting audience.
   * @param params.adAccountId Unique identifier of an ad account.
   * @param params.audienceId Unique identifier of an audience
   * @param params.audienceUpdateRequest The audience to be updated.
   */
  async audiencesUpdate(params: IAudiencesUpdateParams): Promise<Audience> {
    // Verify required parameters are set
    this.ensureParamIsSet('audiencesUpdate', params, 'adAccountId');
    this.ensureParamIsSet('audiencesUpdate', params, 'audienceId');

    // Create URL to call
    const url = `${this.basePath}/ad_accounts/{ad_account_id}/audiences/{audience_id}`
      .replace(`{${'ad_account_id'}}`, encodeURIComponent(`${params['adAccountId']}`))
      .replace(`{${'audience_id'}}`, encodeURIComponent(`${params['audienceId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPatch()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['audienceUpdateRequest'] || {}))

      // Authentication 'pinterest_oauth2' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

}

