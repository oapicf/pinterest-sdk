/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { autoinject } from 'aurelia-framework';
import { HttpClient } from 'aurelia-http-client';
import { Api } from './Api';
import { AuthStorage } from './AuthStorage';
import {
  AdvancedAuctionProcessedItems,
  AdvancedAuctionItemsGetRequest,
  AdvancedAuctionItemsSubmitRequest,
  AdvancedAuctionItems,
} from './models';

/**
 * advancedAuctionItemsGetPost - parameters interface
 */
export interface IAdvancedAuctionItemsGetPostParams {
  advancedAuctionItemsGetRequest: AdvancedAuctionItemsGetRequest;
  adAccountId?: string;
}

/**
 * advancedAuctionItemsSubmitPost - parameters interface
 */
export interface IAdvancedAuctionItemsSubmitPostParams {
  advancedAuctionItemsSubmitRequest: AdvancedAuctionItemsSubmitRequest;
  adAccountId?: string;
}

/**
 * AdvancedAuctionApi - API class
 */
@autoinject()
export class AdvancedAuctionApi extends Api {

  /**
   * Creates a new AdvancedAuctionApi class.
   *
   * @param httpClient The Aurelia HTTP client to be injected.
   * @param authStorage A storage for authentication data.
   */
  constructor(httpClient: HttpClient, authStorage: AuthStorage) {
    super(httpClient, authStorage);
  }

  /**
   * Get item bid options (POST)
   * Get the bid options for a batch of retail catalog items.  The catalog must be owned by the \&quot;operation user_account\&quot;. &lt;a href&#x3D;\&quot;/docs/api-features/shopping-overview/#Update%20items%20in%20batch\&quot; target&#x3D;\&quot;_blank\&quot;&gt;See detailed documentation here.&lt;/a&gt; By default, the \&quot;operation user_account\&quot; is the token user_account.  Optional: Business Access: Specify an &lt;code&gt;ad_account_id&lt;/code&gt; (obtained via &lt;a href&#x3D;\&#39;/docs/api/v5/#operation/ad_accounts/list\&#39;&gt;List ad accounts&lt;/a&gt;) to use the owner of that ad_account as the \&quot;operation user_account\&quot;. In order to do this, the token user_account must have one of the following &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt; roles on the ad_account: &#x60;Owner&#x60;, &#x60;Admin&#x60;.  This endpoint is not available to all users.
   * @param params.advancedAuctionItemsGetRequest Request object used to get bid options values for a batch of retail catalog items
   * @param params.adAccountId Unique identifier of an ad account.
   */
  async advancedAuctionItemsGetPost(params: IAdvancedAuctionItemsGetPostParams): Promise<AdvancedAuctionItems> {
    // Verify required parameters are set
    this.ensureParamIsSet('advancedAuctionItemsGetPost', params, 'advancedAuctionItemsGetRequest');

    // Create URL to call
    const url = `${this.basePath}/advanced_auction/items/get`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Set query parameters
      .withParams({ 
        'ad_account_id': params['adAccountId'],
      })
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['advancedAuctionItemsGetRequest'] || {}))

      // Authentication 'pinterest_oauth2' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Operate on item level bid options
   * This endpoint supports multiple operations on a set of one or more bid options (bid price and bid adjustments for targeting categories) for retail catalog items. These advanced auction settings are applied in campaigns using objective_type &#x60;CATALOG_SALES&#x60; and ad groups using bid_strategy_type &#x60;MAX_BID&#x60;.  The catalog must be owned by the \&quot;operation user_account\&quot;. &lt;a href&#x3D;\&quot;/docs/api-features/modify-items-in-batch/\&quot; target&#x3D;\&quot;_blank\&quot;&gt;See detailed documentation here.&lt;/a&gt; By default, the \&quot;operation user_account\&quot; is the token user_account.  Optional: Business Access: Specify an &lt;code&gt;ad_account_id&lt;/code&gt; (obtained via &lt;a href&#x3D;\&#39;/docs/api/v5/#operation/ad_accounts/list\&#39;&gt;List ad accounts&lt;/a&gt;) to use the owner of that ad_account as the \&quot;operation user_account\&quot;. In order to do this, the token user_account must have one of the following &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt; roles on the ad_account: &#x60;Owner&#x60;, &#x60;Admin&#x60;.  This endpoint is not available to all users.
   * @param params.advancedAuctionItemsSubmitRequest Request object used to upsert or delete bid options for a batch of retail catalog items
   * @param params.adAccountId Unique identifier of an ad account.
   */
  async advancedAuctionItemsSubmitPost(params: IAdvancedAuctionItemsSubmitPostParams): Promise<AdvancedAuctionProcessedItems> {
    // Verify required parameters are set
    this.ensureParamIsSet('advancedAuctionItemsSubmitPost', params, 'advancedAuctionItemsSubmitRequest');

    // Create URL to call
    const url = `${this.basePath}/advanced_auction/items/submit`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Set query parameters
      .withParams({ 
        'ad_account_id': params['adAccountId'],
      })
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['advancedAuctionItemsSubmitRequest'] || {}))

      // Authentication 'pinterest_oauth2' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

}

