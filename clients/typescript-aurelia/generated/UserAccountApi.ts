/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { autoinject } from 'aurelia-framework';
import { HttpClient } from 'aurelia-http-client';
import { Api } from './Api';
import { AuthStorage } from './AuthStorage';
import {
  Account,
  FollowUserRequest,
  UserFollowingGet200Response,
  FollowersList200Response,
  UserSummary,
  TopVideoPinsAnalyticsResponse,
  LinkedBusiness,
  UserWebsitesGet200Response,
  UserWebsiteVerificationCode,
  UserWebsiteSummary,
  TopPinsAnalyticsResponse,
  AnalyticsMetricsResponse,
  UserAccountFollowedInterests200Response,
  BoardsUserFollowsList200Response,
  UserWebsiteVerifyRequest,
} from './models';

/**
 * boardsUserFollowsList - parameters interface
 */
export interface IBoardsUserFollowsListParams {
  bookmark?: string;
  pageSize?: number;
  explicitFollowing?: boolean;
  adAccountId?: string;
}

/**
 * followUserUpdate - parameters interface
 */
export interface IFollowUserUpdateParams {
  username: string;
  followUserRequest: FollowUserRequest;
}

/**
 * followersList - parameters interface
 */
export interface IFollowersListParams {
  bookmark?: string;
  pageSize?: number;
}

/**
 * linkedBusinessAccountsGet - parameters interface
 */
export interface ILinkedBusinessAccountsGetParams {
}

/**
 * unverifyWebsiteDelete - parameters interface
 */
export interface IUnverifyWebsiteDeleteParams {
  website: string;
}

/**
 * userAccountAnalytics - parameters interface
 */
export interface IUserAccountAnalyticsParams {
  startDate: string;
  endDate: string;
  fromClaimedContent?: 'OTHER' | 'CLAIMED' | 'BOTH';
  pinFormat?: 'ALL' | 'ORGANIC_IMAGE' | 'ORGANIC_PRODUCT' | 'ORGANIC_VIDEO' | 'ADS_STANDARD' | 'ADS_PRODUCT' | 'ADS_VIDEO' | 'ADS_IDEA';
  appTypes?: 'ALL' | 'MOBILE' | 'TABLET' | 'WEB';
  contentType?: 'ALL' | 'PAID' | 'ORGANIC';
  source?: 'ALL' | 'YOUR_PINS' | 'OTHER_PINS';
  metricTypes?: Array<'ENGAGEMENT' | 'ENGAGEMENT_RATE' | 'IMPRESSION' | 'OUTBOUND_CLICK' | 'OUTBOUND_CLICK_RATE' | 'PIN_CLICK' | 'PIN_CLICK_RATE' | 'SAVE' | 'SAVE_RATE'>;
  splitField?: 'NO_SPLIT' | 'APP_TYPE' | 'OWNED_CONTENT' | 'SOURCE' | 'PIN_FORMAT';
  adAccountId?: string;
}

/**
 * userAccountAnalyticsTopPins - parameters interface
 */
export interface IUserAccountAnalyticsTopPinsParams {
  startDate: string;
  endDate: string;
  sortBy: 'ENGAGEMENT' | 'IMPRESSION' | 'OUTBOUND_CLICK' | 'PIN_CLICK' | 'SAVE';
  fromClaimedContent?: 'OTHER' | 'CLAIMED' | 'BOTH';
  pinFormat?: 'ALL' | 'ORGANIC_IMAGE' | 'ORGANIC_PRODUCT' | 'ORGANIC_VIDEO' | 'ADS_STANDARD' | 'ADS_PRODUCT' | 'ADS_VIDEO' | 'ADS_IDEA';
  appTypes?: 'ALL' | 'MOBILE' | 'TABLET' | 'WEB';
  contentType?: 'ALL' | 'PAID' | 'ORGANIC';
  source?: 'ALL' | 'YOUR_PINS' | 'OTHER_PINS';
  metricTypes?: Array<'ENGAGEMENT' | 'ENGAGEMENT_RATE' | 'IMPRESSION' | 'OUTBOUND_CLICK' | 'OUTBOUND_CLICK_RATE' | 'PIN_CLICK' | 'PIN_CLICK_RATE' | 'SAVE' | 'SAVE_RATE'>;
  numOfPins?: number;
  createdInLastNDays?: 30;
  adAccountId?: string;
}

/**
 * userAccountAnalyticsTopVideoPins - parameters interface
 */
export interface IUserAccountAnalyticsTopVideoPinsParams {
  startDate: string;
  endDate: string;
  sortBy: 'IMPRESSION' | 'SAVE' | 'OUTBOUND_CLICK' | 'VIDEO_MRC_VIEW' | 'VIDEO_AVG_WATCH_TIME' | 'VIDEO_V50_WATCH_TIME' | 'QUARTILE_95_PERCENT_VIEW' | 'VIDEO_10S_VIEW' | 'VIDEO_START';
  fromClaimedContent?: 'OTHER' | 'CLAIMED' | 'BOTH';
  pinFormat?: 'ALL' | 'ORGANIC_IMAGE' | 'ORGANIC_PRODUCT' | 'ORGANIC_VIDEO' | 'ADS_STANDARD' | 'ADS_PRODUCT' | 'ADS_VIDEO' | 'ADS_IDEA';
  appTypes?: 'ALL' | 'MOBILE' | 'TABLET' | 'WEB';
  contentType?: 'ALL' | 'PAID' | 'ORGANIC';
  source?: 'ALL' | 'YOUR_PINS' | 'OTHER_PINS';
  metricTypes?: Array<'IMPRESSION' | 'SAVE' | 'VIDEO_MRC_VIEW' | 'VIDEO_AVG_WATCH_TIME' | 'VIDEO_V50_WATCH_TIME' | 'QUARTILE_95_PERCENT_VIEW' | 'VIDEO_10S_VIEW' | 'VIDEO_START' | 'OUTBOUND_CLICK'>;
  numOfPins?: number;
  createdInLastNDays?: 30;
  adAccountId?: string;
}

/**
 * userAccountFollowedInterests - parameters interface
 */
export interface IUserAccountFollowedInterestsParams {
  username: string;
  bookmark?: string;
  pageSize?: number;
}

/**
 * userAccountGet - parameters interface
 */
export interface IUserAccountGetParams {
  adAccountId?: string;
}

/**
 * userFollowingGet - parameters interface
 */
export interface IUserFollowingGetParams {
  bookmark?: string;
  pageSize?: number;
  feedType?: UserFollowingFeedType;
  explicitFollowing?: boolean;
  adAccountId?: string;
}

/**
 * userWebsitesGet - parameters interface
 */
export interface IUserWebsitesGetParams {
  bookmark?: string;
  pageSize?: number;
}

/**
 * verifyWebsiteUpdate - parameters interface
 */
export interface IVerifyWebsiteUpdateParams {
  userWebsiteVerifyRequest: UserWebsiteVerifyRequest;
  adAccountId?: string;
}

/**
 * websiteVerificationGet - parameters interface
 */
export interface IWebsiteVerificationGetParams {
  adAccountId?: string;
}

/**
 * UserAccountApi - API class
 */
@autoinject()
export class UserAccountApi extends Api {

  /**
   * Creates a new UserAccountApi class.
   *
   * @param httpClient The Aurelia HTTP client to be injected.
   * @param authStorage A storage for authentication data.
   */
  constructor(httpClient: HttpClient, authStorage: AuthStorage) {
    super(httpClient, authStorage);
  }

  /**
   * List following boards
   * Get a list of the boards a user follows. The request returns a board summary object array.
   * @param params.bookmark Cursor used to fetch the next page of items
   * @param params.pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;\&#39;/docs/reference/pagination/\&#39;&gt;Pagination&lt;/a&gt; for more information.
   * @param params.explicitFollowing Whether or not to include implicit user follows, which means followees with board follows. When explicit_following is True, it means we only want explicit user follows.
   * @param params.adAccountId Unique identifier of an ad account.
   */
  async boardsUserFollowsList(params: IBoardsUserFollowsListParams): Promise<BoardsUserFollowsList200Response> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/user_account/following/boards`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'bookmark': params['bookmark'],
        'page_size': params['pageSize'],
        'explicit_following': params['explicitFollowing'],
        'ad_account_id': params['adAccountId'],
      })

      // Authentication 'pinterest_oauth2' required
      // Authentication 'client_credentials' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Follow user
   * &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;\&#39;/docs/getting-started/beta-and-advanced-access/\&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Use this request, as a signed-in user, to follow another user.
   * @param params.username A valid username
   * @param params.followUserRequest Follow a user.
   */
  async followUserUpdate(params: IFollowUserUpdateParams): Promise<UserSummary> {
    // Verify required parameters are set
    this.ensureParamIsSet('followUserUpdate', params, 'username');
    this.ensureParamIsSet('followUserUpdate', params, 'followUserRequest');

    // Create URL to call
    const url = `${this.basePath}/user_account/following/{username}`
      .replace(`{${'username'}}`, encodeURIComponent(`${params['username']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['followUserRequest'] || {}))

      // Authentication 'pinterest_oauth2' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * List followers
   * Get a list of your followers.
   * @param params.bookmark Cursor used to fetch the next page of items
   * @param params.pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;\&#39;/docs/reference/pagination/\&#39;&gt;Pagination&lt;/a&gt; for more information.
   */
  async followersList(params: IFollowersListParams): Promise<FollowersList200Response> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/user_account/followers`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'bookmark': params['bookmark'],
        'page_size': params['pageSize'],
      })

      // Authentication 'pinterest_oauth2' required
      // Authentication 'client_credentials' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * List linked businesses
   * Get a list of your linked business accounts.
   */
  async linkedBusinessAccountsGet(): Promise<Array<LinkedBusiness>> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/user_account/businesses`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'pinterest_oauth2' required
      // Authentication 'client_credentials' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Unverify website
   * Unverifu a website verified by the signed-in user.
   * @param params.website Website with path or domain only
   */
  async unverifyWebsiteDelete(params: IUnverifyWebsiteDeleteParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('unverifyWebsiteDelete', params, 'website');

    // Create URL to call
    const url = `${this.basePath}/user_account/websites`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asDelete()
      // Set query parameters
      .withParams({ 
        'website': params['website'],
      })

      // Authentication 'pinterest_oauth2' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get user account analytics
   * Get analytics for the \&quot;operation user_account\&quot; - By default, the \&quot;operation user_account\&quot; is the token user_account.  Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;.
   * @param params.startDate Metric report start date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days back from today.
   * @param params.endDate Metric report end date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days past start_date.
   * @param params.fromClaimedContent Filter on Pins that match your claimed domain.
   * @param params.pinFormat Pin formats to get data for, default is all.
   * @param params.appTypes Apps or devices to get data for, default is all.
   * @param params.contentType Filter to paid or organic data. Default is all.
   * @param params.source Filter to activity from Pins created and saved by your, or activity created and saved by others from your claimed accounts
   * @param params.metricTypes Metric types to get data for, default is all. 
   * @param params.splitField How to split the data into groups. Not including this param means data won\&#39;t be split.
   * @param params.adAccountId Unique identifier of an ad account.
   */
  async userAccountAnalytics(params: IUserAccountAnalyticsParams): Promise<{ [key: string]: AnalyticsMetricsResponse; }> {
    // Verify required parameters are set
    this.ensureParamIsSet('userAccountAnalytics', params, 'startDate');
    this.ensureParamIsSet('userAccountAnalytics', params, 'endDate');

    // Create URL to call
    const url = `${this.basePath}/user_account/analytics`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'start_date': params['startDate'],
        'end_date': params['endDate'],
        'from_claimed_content': params['fromClaimedContent'],
        'pin_format': params['pinFormat'],
        'app_types': params['appTypes'],
        'content_type': params['contentType'],
        'source': params['source'],
        'metric_types': params['metricTypes'],
        'split_field': params['splitField'],
        'ad_account_id': params['adAccountId'],
      })

      // Authentication 'pinterest_oauth2' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get user account top pins analytics
   * Gets analytics data about a user\&#39;s top pins (limited to the top 50). - By default, the \&quot;operation user_account\&quot; is the token user_account.  Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;.
   * @param params.startDate Metric report start date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days back from today.
   * @param params.endDate Metric report end date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days past start_date.
   * @param params.sortBy Specify sorting order for metrics
   * @param params.fromClaimedContent Filter on Pins that match your claimed domain.
   * @param params.pinFormat Pin formats to get data for, default is all.
   * @param params.appTypes Apps or devices to get data for, default is all.
   * @param params.contentType Filter to paid or organic data. Default is all.
   * @param params.source Filter to activity from Pins created and saved by your, or activity created and saved by others from your claimed accounts
   * @param params.metricTypes Metric types to get data for, default is all. 
   * @param params.numOfPins Number of pins to include, default is 10. Max is 50.
   * @param params.createdInLastNDays Get metrics for pins created in the last \&quot;n\&quot; days.
   * @param params.adAccountId Unique identifier of an ad account.
   */
  async userAccountAnalyticsTopPins(params: IUserAccountAnalyticsTopPinsParams): Promise<TopPinsAnalyticsResponse> {
    // Verify required parameters are set
    this.ensureParamIsSet('userAccountAnalyticsTopPins', params, 'startDate');
    this.ensureParamIsSet('userAccountAnalyticsTopPins', params, 'endDate');
    this.ensureParamIsSet('userAccountAnalyticsTopPins', params, 'sortBy');

    // Create URL to call
    const url = `${this.basePath}/user_account/analytics/top_pins`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'start_date': params['startDate'],
        'end_date': params['endDate'],
        'sort_by': params['sortBy'],
        'from_claimed_content': params['fromClaimedContent'],
        'pin_format': params['pinFormat'],
        'app_types': params['appTypes'],
        'content_type': params['contentType'],
        'source': params['source'],
        'metric_types': params['metricTypes'],
        'num_of_pins': params['numOfPins'],
        'created_in_last_n_days': params['createdInLastNDays'],
        'ad_account_id': params['adAccountId'],
      })

      // Authentication 'pinterest_oauth2' required
      // Authentication 'client_credentials' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get user account top video pins analytics
   * Gets analytics data about a user\&#39;s top video pins (limited to the top 50). - By default, the \&quot;operation user_account\&quot; is the token user_account.  Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;.
   * @param params.startDate Metric report start date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days back from today.
   * @param params.endDate Metric report end date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days past start_date.
   * @param params.sortBy Specify sorting order for video metrics
   * @param params.fromClaimedContent Filter on Pins that match your claimed domain.
   * @param params.pinFormat Pin formats to get data for, default is all.
   * @param params.appTypes Apps or devices to get data for, default is all.
   * @param params.contentType Filter to paid or organic data. Default is all.
   * @param params.source Filter to activity from Pins created and saved by your, or activity created and saved by others from your claimed accounts
   * @param params.metricTypes Metric types to get video data for, default is all. 
   * @param params.numOfPins Number of pins to include, default is 10. Max is 50.
   * @param params.createdInLastNDays Get metrics for pins created in the last \&quot;n\&quot; days.
   * @param params.adAccountId Unique identifier of an ad account.
   */
  async userAccountAnalyticsTopVideoPins(params: IUserAccountAnalyticsTopVideoPinsParams): Promise<TopVideoPinsAnalyticsResponse> {
    // Verify required parameters are set
    this.ensureParamIsSet('userAccountAnalyticsTopVideoPins', params, 'startDate');
    this.ensureParamIsSet('userAccountAnalyticsTopVideoPins', params, 'endDate');
    this.ensureParamIsSet('userAccountAnalyticsTopVideoPins', params, 'sortBy');

    // Create URL to call
    const url = `${this.basePath}/user_account/analytics/top_video_pins`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'start_date': params['startDate'],
        'end_date': params['endDate'],
        'sort_by': params['sortBy'],
        'from_claimed_content': params['fromClaimedContent'],
        'pin_format': params['pinFormat'],
        'app_types': params['appTypes'],
        'content_type': params['contentType'],
        'source': params['source'],
        'metric_types': params['metricTypes'],
        'num_of_pins': params['numOfPins'],
        'created_in_last_n_days': params['createdInLastNDays'],
        'ad_account_id': params['adAccountId'],
      })

      // Authentication 'pinterest_oauth2' required
      // Authentication 'client_credentials' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * List following interests
   * Get a list of a user\&#39;s following interests in one place.
   * @param params.username A valid username
   * @param params.bookmark Cursor used to fetch the next page of items
   * @param params.pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;\&#39;/docs/reference/pagination/\&#39;&gt;Pagination&lt;/a&gt; for more information.
   */
  async userAccountFollowedInterests(params: IUserAccountFollowedInterestsParams): Promise<UserAccountFollowedInterests200Response> {
    // Verify required parameters are set
    this.ensureParamIsSet('userAccountFollowedInterests', params, 'username');

    // Create URL to call
    const url = `${this.basePath}/users/{username}/interests/follow`
      .replace(`{${'username'}}`, encodeURIComponent(`${params['username']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'bookmark': params['bookmark'],
        'page_size': params['pageSize'],
      })

      // Authentication 'pinterest_oauth2' required
      // Authentication 'client_credentials' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get user account
   * Get account information for the \&quot;operation user_account\&quot; - By default, the \&quot;operation user_account\&quot; is the token user_account.  If using Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. See &lt;a href&#x3D;\&#39;/docs/getting-started/using-business-access/\&#39;&gt;Understanding Business Access&lt;/a&gt; for more information.
   * @param params.adAccountId Unique identifier of an ad account.
   */
  async userAccountGet(params: IUserAccountGetParams): Promise<Account> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/user_account`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'ad_account_id': params['adAccountId'],
      })

      // Authentication 'pinterest_oauth2' required
      // Authentication 'client_credentials' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * List following
   * Get a list of who a certain user follows.
   * @param params.bookmark Cursor used to fetch the next page of items
   * @param params.pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;\&#39;/docs/reference/pagination/\&#39;&gt;Pagination&lt;/a&gt; for more information.
   * @param params.feedType Thrift param specifying what type of followees will be kept. Default to include all followees.
   * @param params.explicitFollowing Whether or not to include implicit user follows, which means followees with board follows. When explicit_following is True, it means we only want explicit user follows.
   * @param params.adAccountId Unique identifier of an ad account.
   */
  async userFollowingGet(params: IUserFollowingGetParams): Promise<UserFollowingGet200Response> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/user_account/following`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'bookmark': params['bookmark'],
        'page_size': params['pageSize'],
        'feed_type': params['feedType'],
        'explicit_following': params['explicitFollowing'],
        'ad_account_id': params['adAccountId'],
      })

      // Authentication 'pinterest_oauth2' required
      // Authentication 'client_credentials' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get user websites
   * Get user websites, claimed or not
   * @param params.bookmark Cursor used to fetch the next page of items
   * @param params.pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;\&#39;/docs/reference/pagination/\&#39;&gt;Pagination&lt;/a&gt; for more information.
   */
  async userWebsitesGet(params: IUserWebsitesGetParams): Promise<UserWebsitesGet200Response> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/user_account/websites`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'bookmark': params['bookmark'],
        'page_size': params['pageSize'],
      })

      // Authentication 'pinterest_oauth2' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Verify website
   * Verify a website as a signed-in user.
   * @param params.userWebsiteVerifyRequest Verify a website.
   * @param params.adAccountId Unique identifier of an ad account.
   */
  async verifyWebsiteUpdate(params: IVerifyWebsiteUpdateParams): Promise<UserWebsiteSummary> {
    // Verify required parameters are set
    this.ensureParamIsSet('verifyWebsiteUpdate', params, 'userWebsiteVerifyRequest');

    // Create URL to call
    const url = `${this.basePath}/user_account/websites`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Set query parameters
      .withParams({ 
        'ad_account_id': params['adAccountId'],
      })
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['userWebsiteVerifyRequest'] || {}))

      // Authentication 'pinterest_oauth2' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get user verification code for website claiming
   * Get verification code for user to install on the website to claim it.
   * @param params.adAccountId Unique identifier of an ad account.
   */
  async websiteVerificationGet(params: IWebsiteVerificationGetParams): Promise<UserWebsiteVerificationCode> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/user_account/websites/verification`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'ad_account_id': params['adAccountId'],
      })

      // Authentication 'pinterest_oauth2' required
      // Authentication 'client_credentials' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

}

