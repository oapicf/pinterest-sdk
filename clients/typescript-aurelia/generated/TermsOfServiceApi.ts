/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { autoinject } from 'aurelia-framework';
import { HttpClient } from 'aurelia-http-client';
import { Api } from './Api';
import { AuthStorage } from './AuthStorage';
import {
  TermsOfService,
} from './models';

/**
 * termsOfServiceGet - parameters interface
 */
export interface ITermsOfServiceGetParams {
  adAccountId: string;
  includeHtml?: boolean;
  tosType?: string;
}

/**
 * TermsOfServiceApi - API class
 */
@autoinject()
export class TermsOfServiceApi extends Api {

  /**
   * Creates a new TermsOfServiceApi class.
   *
   * @param httpClient The Aurelia HTTP client to be injected.
   * @param authStorage A storage for authentication data.
   */
  constructor(httpClient: HttpClient, authStorage: AuthStorage) {
    super(httpClient, authStorage);
  }

  /**
   * Get terms of service
   * Get the text of the terms of service and see whether the advertiser has accepted the terms of service.
   * @param params.adAccountId Unique identifier of an ad account.
   * @param params.includeHtml Return HTML in TOS text.
   * @param params.tosType Request type.
   */
  async termsOfServiceGet(params: ITermsOfServiceGetParams): Promise<TermsOfService> {
    // Verify required parameters are set
    this.ensureParamIsSet('termsOfServiceGet', params, 'adAccountId');

    // Create URL to call
    const url = `${this.basePath}/ad_accounts/{ad_account_id}/terms_of_service`
      .replace(`{${'ad_account_id'}}`, encodeURIComponent(`${params['adAccountId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'include_html': params['includeHtml'],
        'tos_type': params['tosType'],
      })

      // Authentication 'pinterest_oauth2' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

}

