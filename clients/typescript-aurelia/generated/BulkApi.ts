/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { autoinject } from 'aurelia-framework';
import { HttpClient } from 'aurelia-http-client';
import { Api } from './Api';
import { AuthStorage } from './AuthStorage';
import {
  BulkUpsertResponse,
  BulkDownloadRequest,
  BulkUpsertStatusResponse,
  BulkUpsertRequest,
  BulkDownloadResponse,
} from './models';

/**
 * bulkDownloadCreate - parameters interface
 */
export interface IBulkDownloadCreateParams {
  adAccountId: string;
  bulkDownloadRequest: BulkDownloadRequest;
}

/**
 * bulkRequestGet - parameters interface
 */
export interface IBulkRequestGetParams {
  adAccountId: string;
  bulkRequestId: string;
  includeDetails?: boolean;
}

/**
 * bulkUpsertCreate - parameters interface
 */
export interface IBulkUpsertCreateParams {
  adAccountId: string;
  bulkUpsertRequest: BulkUpsertRequest;
}

/**
 * BulkApi - API class
 */
@autoinject()
export class BulkApi extends Api {

  /**
   * Creates a new BulkApi class.
   *
   * @param httpClient The Aurelia HTTP client to be injected.
   * @param authStorage A storage for authentication data.
   */
  constructor(httpClient: HttpClient, authStorage: AuthStorage) {
    super(httpClient, authStorage);
  }

  /**
   * Get advertiser entities in bulk
   * Create an asynchronous report that may include information on campaigns, ad groups, product groups, ads, and/or keywords; can filter by campaigns. Though the entities may be active, archived, or paused, only active entities will return data.
   * @param params.adAccountId Unique identifier of an ad account.
   * @param params.bulkDownloadRequest Parameters to get ad entities in bulk
   */
  async bulkDownloadCreate(params: IBulkDownloadCreateParams): Promise<BulkDownloadResponse> {
    // Verify required parameters are set
    this.ensureParamIsSet('bulkDownloadCreate', params, 'adAccountId');
    this.ensureParamIsSet('bulkDownloadCreate', params, 'bulkDownloadRequest');

    // Create URL to call
    const url = `${this.basePath}/ad_accounts/{ad_account_id}/bulk/download`
      .replace(`{${'ad_account_id'}}`, encodeURIComponent(`${params['adAccountId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['bulkDownloadRequest'] || {}))

      // Authentication 'pinterest_oauth2' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Download advertiser entities in bulk
   * Get the status of a bulk request by &lt;code&gt;request_id&lt;/code&gt;, along with a download URL that will allow you to download the new or updated entity data (campaigns, ad groups, product groups, ads, or keywords).
   * @param params.adAccountId Unique identifier of an ad account.
   * @param params.bulkRequestId Unique identifier of a bulk upsert request.
   * @param params.includeDetails if set to True then attach the errors/details to all the requests
   */
  async bulkRequestGet(params: IBulkRequestGetParams): Promise<BulkUpsertStatusResponse> {
    // Verify required parameters are set
    this.ensureParamIsSet('bulkRequestGet', params, 'adAccountId');
    this.ensureParamIsSet('bulkRequestGet', params, 'bulkRequestId');

    // Create URL to call
    const url = `${this.basePath}/ad_accounts/{ad_account_id}/bulk/{bulk_request_id}`
      .replace(`{${'ad_account_id'}}`, encodeURIComponent(`${params['adAccountId']}`))
      .replace(`{${'bulk_request_id'}}`, encodeURIComponent(`${params['bulkRequestId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'include_details': params['includeDetails'],
      })

      // Authentication 'pinterest_oauth2' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Create/update ad entities in bulk
   * Either create or update any combination of campaigns, ad groups, product groups, ads, or keywords. Note that this request will be processed asynchronously; the response will include a &lt;code&gt;request_id&lt;/code&gt; that can be used to obtain the status of the request.
   * @param params.adAccountId Unique identifier of an ad account.
   * @param params.bulkUpsertRequest Parameters to get create/update ad entities in bulk
   */
  async bulkUpsertCreate(params: IBulkUpsertCreateParams): Promise<BulkUpsertResponse> {
    // Verify required parameters are set
    this.ensureParamIsSet('bulkUpsertCreate', params, 'adAccountId');
    this.ensureParamIsSet('bulkUpsertCreate', params, 'bulkUpsertRequest');

    // Create URL to call
    const url = `${this.basePath}/ad_accounts/{ad_account_id}/bulk/upsert`
      .replace(`{${'ad_account_id'}}`, encodeURIComponent(`${params['adAccountId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['bulkUpsertRequest'] || {}))

      // Authentication 'pinterest_oauth2' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

}

