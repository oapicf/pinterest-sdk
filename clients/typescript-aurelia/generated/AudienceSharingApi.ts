/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { autoinject } from 'aurelia-framework';
import { HttpClient } from 'aurelia-http-client';
import { Api } from './Api';
import { AuthStorage } from './AuthStorage';
import {
  AudienceAccountType,
  SharedAudienceResponse,
  SharedAudience,
  BusinessSharedAudience,
  AdAccountsAudiencesSharedAccountsList200Response,
  AudiencesList200Response,
  BusinessSharedAudienceResponse,
} from './models';

/**
 * adAccountsAudiencesSharedAccountsList - parameters interface
 */
export interface IAdAccountsAudiencesSharedAccountsListParams {
  adAccountId: string;
  audienceId: string;
  accountType: AudienceAccountType;
  pageSize?: number;
  bookmark?: string;
}

/**
 * businessAccountAudiencesSharedAccountsList - parameters interface
 */
export interface IBusinessAccountAudiencesSharedAccountsListParams {
  businessId: string;
  audienceId: string;
  accountType: AudienceAccountType;
  pageSize?: number;
  bookmark?: string;
}

/**
 * sharedAudiencesForBusinessList - parameters interface
 */
export interface ISharedAudiencesForBusinessListParams {
  businessId: string;
  bookmark?: string;
  order?: 'ASCENDING' | 'DESCENDING';
  pageSize?: number;
}

/**
 * updateAdAccountToAdAccountSharedAudience - parameters interface
 */
export interface IUpdateAdAccountToAdAccountSharedAudienceParams {
  adAccountId: string;
  sharedAudience: SharedAudience;
}

/**
 * updateAdAccountToBusinessSharedAudience - parameters interface
 */
export interface IUpdateAdAccountToBusinessSharedAudienceParams {
  adAccountId: string;
  businessSharedAudience: BusinessSharedAudience;
}

/**
 * updateBusinessToAdAccountSharedAudience - parameters interface
 */
export interface IUpdateBusinessToAdAccountSharedAudienceParams {
  businessId: string;
  sharedAudience: SharedAudience;
}

/**
 * updateBusinessToBusinessSharedAudience - parameters interface
 */
export interface IUpdateBusinessToBusinessSharedAudienceParams {
  businessId: string;
  businessSharedAudience: BusinessSharedAudience;
}

/**
 * AudienceSharingApi - API class
 */
@autoinject()
export class AudienceSharingApi extends Api {

  /**
   * Creates a new AudienceSharingApi class.
   *
   * @param httpClient The Aurelia HTTP client to be injected.
   * @param authStorage A storage for authentication data.
   */
  constructor(httpClient: HttpClient, authStorage: AuthStorage) {
    super(httpClient, authStorage);
  }

  /**
   * List accounts with access to an audience owned by an ad account
   * List all ad accounts and/or businesses that have access to a specific audience. The audience must be owned by the requesting ad account.
   * @param params.adAccountId Unique identifier of an ad account.
   * @param params.audienceId Unique identifier of the audience to use to filter the results.
   * @param params.accountType Filter accounts by account type.
   * @param params.pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;\&#39;/docs/reference/pagination/\&#39;&gt;Pagination&lt;/a&gt; for more information.
   * @param params.bookmark Cursor used to fetch the next page of items
   */
  async adAccountsAudiencesSharedAccountsList(params: IAdAccountsAudiencesSharedAccountsListParams): Promise<AdAccountsAudiencesSharedAccountsList200Response> {
    // Verify required parameters are set
    this.ensureParamIsSet('adAccountsAudiencesSharedAccountsList', params, 'adAccountId');
    this.ensureParamIsSet('adAccountsAudiencesSharedAccountsList', params, 'audienceId');
    this.ensureParamIsSet('adAccountsAudiencesSharedAccountsList', params, 'accountType');

    // Create URL to call
    const url = `${this.basePath}/ad_accounts/{ad_account_id}/audiences/shared/accounts`
      .replace(`{${'ad_account_id'}}`, encodeURIComponent(`${params['adAccountId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'audience_id': params['audienceId'],
        'account_type': params['accountType'],
        'page_size': params['pageSize'],
        'bookmark': params['bookmark'],
      })

      // Authentication 'pinterest_oauth2' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * List accounts with access to an audience owned by a business
   * List all ad accounts and/or businesses that have access to a specific audience. The audience must either be owned by an ad account in the requesting business, or it must have been shared with the requesting business. If the requesting business is not the owner of the audience, only ad accounts owned by the requesting business will be returned.
   * @param params.businessId Unique identifier of the requesting business.
   * @param params.audienceId Unique identifier of the audience to use to filter the results.
   * @param params.accountType Filter accounts by account type.
   * @param params.pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;\&#39;/docs/reference/pagination/\&#39;&gt;Pagination&lt;/a&gt; for more information.
   * @param params.bookmark Cursor used to fetch the next page of items
   */
  async businessAccountAudiencesSharedAccountsList(params: IBusinessAccountAudiencesSharedAccountsListParams): Promise<AdAccountsAudiencesSharedAccountsList200Response> {
    // Verify required parameters are set
    this.ensureParamIsSet('businessAccountAudiencesSharedAccountsList', params, 'businessId');
    this.ensureParamIsSet('businessAccountAudiencesSharedAccountsList', params, 'audienceId');
    this.ensureParamIsSet('businessAccountAudiencesSharedAccountsList', params, 'accountType');

    // Create URL to call
    const url = `${this.basePath}/businesses/{business_id}/audiences/shared/accounts`
      .replace(`{${'business_id'}}`, encodeURIComponent(`${params['businessId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'audience_id': params['audienceId'],
        'account_type': params['accountType'],
        'page_size': params['pageSize'],
        'bookmark': params['bookmark'],
      })

      // Authentication 'pinterest_oauth2' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * List received audiences for a business
   * Get a list of received audiences for the given business.
   * @param params.businessId Unique identifier of the requesting business.
   * @param params.bookmark Cursor used to fetch the next page of items
   * @param params.order The order in which to sort the items returned: “ASCENDING” or “DESCENDING” by ID. Note that higher-value IDs are associated with more-recently added items.
   * @param params.pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;\&#39;/docs/reference/pagination/\&#39;&gt;Pagination&lt;/a&gt; for more information.
   */
  async sharedAudiencesForBusinessList(params: ISharedAudiencesForBusinessListParams): Promise<AudiencesList200Response> {
    // Verify required parameters are set
    this.ensureParamIsSet('sharedAudiencesForBusinessList', params, 'businessId');

    // Create URL to call
    const url = `${this.basePath}/businesses/{business_id}/audiences`
      .replace(`{${'business_id'}}`, encodeURIComponent(`${params['businessId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'bookmark': params['bookmark'],
        'order': params['order'],
        'page_size': params['pageSize'],
      })

      // Authentication 'pinterest_oauth2' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Update audience sharing between ad accounts
   * From an ad account, share a specific audience with another ad account, or revoke access to a previously shared audience. Only the audience owner account can share the audience. The recipient ad account(s) must be in the same &lt;a href&#x3D;\&#39;https://help.pinterest.com/en/business/article/create-and-manage-accounts\&#39;&gt;Pinterest Business Hierarchy&lt;/a&gt; as the business owner of the ad account.&lt;br&gt; This endpoint is not available to all apps.&lt;a href&#x3D;\&#39;/docs/getting-started/beta-and-advanced-access/\&#39;&gt;Learn more&lt;/a&gt;.
   * @param params.adAccountId Unique identifier of an ad account.
   * @param params.sharedAudience 
   */
  async updateAdAccountToAdAccountSharedAudience(params: IUpdateAdAccountToAdAccountSharedAudienceParams): Promise<SharedAudienceResponse> {
    // Verify required parameters are set
    this.ensureParamIsSet('updateAdAccountToAdAccountSharedAudience', params, 'adAccountId');
    this.ensureParamIsSet('updateAdAccountToAdAccountSharedAudience', params, 'sharedAudience');

    // Create URL to call
    const url = `${this.basePath}/ad_accounts/{ad_account_id}/audiences/ad_accounts/shared`
      .replace(`{${'ad_account_id'}}`, encodeURIComponent(`${params['adAccountId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPatch()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['sharedAudience'] || {}))

      // Authentication 'pinterest_oauth2' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Update audience sharing from an ad account to businesses
   * From an ad account, share a specific audience with a business account, or revoke access to a previously shared audience. Only the audience owner account can share the audience. The recipient business account must be in the same business hierarchy as the business owner of the ad account.&lt;br&gt; This endpoint is not available to all apps.&lt;a href&#x3D;\&#39;/docs/getting-started/beta-and-advanced-access/\&#39;&gt;Learn more&lt;/a&gt;.
   * @param params.adAccountId Unique identifier of an ad account.
   * @param params.businessSharedAudience 
   */
  async updateAdAccountToBusinessSharedAudience(params: IUpdateAdAccountToBusinessSharedAudienceParams): Promise<BusinessSharedAudienceResponse> {
    // Verify required parameters are set
    this.ensureParamIsSet('updateAdAccountToBusinessSharedAudience', params, 'adAccountId');
    this.ensureParamIsSet('updateAdAccountToBusinessSharedAudience', params, 'businessSharedAudience');

    // Create URL to call
    const url = `${this.basePath}/ad_accounts/{ad_account_id}/audiences/businesses/shared`
      .replace(`{${'ad_account_id'}}`, encodeURIComponent(`${params['adAccountId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPatch()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['businessSharedAudience'] || {}))

      // Authentication 'pinterest_oauth2' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Update audience sharing from a business to ad accounts
   * From a business, share a specific audience with other ad account(s), or revoke access to a previously shared audience. &lt;ul&gt; &lt;li&gt;If the business is the owner of the audience, it can share with any ad account within the same business hierarchy.&lt;/li&gt; &lt;li&gt;If the business is the recipient of the audience, it can share with any of its owned ad accounts.&lt;/li&gt; &lt;/ul&gt; This endpoint is not available to all apps.&lt;a href&#x3D;\&#39;/docs/getting-started/beta-and-advanced-access/\&#39;&gt;Learn more&lt;/a&gt;.
   * @param params.businessId Unique identifier of the requesting business.
   * @param params.sharedAudience 
   */
  async updateBusinessToAdAccountSharedAudience(params: IUpdateBusinessToAdAccountSharedAudienceParams): Promise<SharedAudienceResponse> {
    // Verify required parameters are set
    this.ensureParamIsSet('updateBusinessToAdAccountSharedAudience', params, 'businessId');
    this.ensureParamIsSet('updateBusinessToAdAccountSharedAudience', params, 'sharedAudience');

    // Create URL to call
    const url = `${this.basePath}/businesses/{business_id}/audiences/ad_accounts/shared`
      .replace(`{${'business_id'}}`, encodeURIComponent(`${params['businessId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPatch()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['sharedAudience'] || {}))

      // Authentication 'pinterest_oauth2' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Update audience sharing between businesses
   * From a business, share a specific audience with another business account, or revoke access to a previously shared audience. Only the audience owner can share the audience with other businesses, and the recipient business must be within the same business hierarchy.&lt;br&gt; This endpoint is not available to all apps.&lt;a href&#x3D;\&#39;/docs/getting-started/beta-and-advanced-access/\&#39;&gt;Learn more&lt;/a&gt;.
   * @param params.businessId Unique identifier of the requesting business.
   * @param params.businessSharedAudience 
   */
  async updateBusinessToBusinessSharedAudience(params: IUpdateBusinessToBusinessSharedAudienceParams): Promise<BusinessSharedAudienceResponse> {
    // Verify required parameters are set
    this.ensureParamIsSet('updateBusinessToBusinessSharedAudience', params, 'businessId');
    this.ensureParamIsSet('updateBusinessToBusinessSharedAudience', params, 'businessSharedAudience');

    // Create URL to call
    const url = `${this.basePath}/businesses/{business_id}/audiences/businesses/shared`
      .replace(`{${'business_id'}}`, encodeURIComponent(`${params['businessId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPatch()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['businessSharedAudience'] || {}))

      // Authentication 'pinterest_oauth2' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

}

