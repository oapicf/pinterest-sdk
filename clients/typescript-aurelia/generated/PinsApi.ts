/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { autoinject } from 'aurelia-framework';
import { HttpClient } from 'aurelia-http-client';
import { Api } from './Api';
import { AuthStorage } from './AuthStorage';
import {
  PinsSaveRequest,
  PinsList200Response,
  Pin,
  PinCreate,
  PinAnalyticsMetricsResponse,
  PinUpdate,
} from './models';

/**
 * multiPinsAnalytics - parameters interface
 */
export interface IMultiPinsAnalyticsParams {
  pinIds: Array<string>;
  startDate: string;
  endDate: string;
  metricTypes: Array<PinsAnalyticsMetricTypesParameterInner>;
  appTypes?: 'ALL' | 'MOBILE' | 'TABLET' | 'WEB';
  adAccountId?: string;
}

/**
 * pinsAnalytics - parameters interface
 */
export interface IPinsAnalyticsParams {
  pinId: string;
  startDate: string;
  endDate: string;
  metricTypes: Array<PinsAnalyticsMetricTypesParameterInner>;
  appTypes?: 'ALL' | 'MOBILE' | 'TABLET' | 'WEB';
  splitField?: 'NO_SPLIT' | 'APP_TYPE';
  adAccountId?: string;
}

/**
 * pinsCreate - parameters interface
 */
export interface IPinsCreateParams {
  pinCreate: PinCreate;
  adAccountId?: string;
}

/**
 * pinsDelete - parameters interface
 */
export interface IPinsDeleteParams {
  pinId: string;
  adAccountId?: string;
}

/**
 * pinsGet - parameters interface
 */
export interface IPinsGetParams {
  pinId: string;
  pinMetrics?: boolean;
  adAccountId?: string;
}

/**
 * pinsList - parameters interface
 */
export interface IPinsListParams {
  bookmark?: string;
  pageSize?: number;
  pinFilter?: 'exclude_native' | 'exclude_repins' | 'has_been_promoted';
  includeProtectedPins?: boolean;
  pinType?: 'PRIVATE';
  creativeTypes?: Array<'REGULAR' | 'VIDEO' | 'SHOPPING' | 'CAROUSEL' | 'MAX_VIDEO' | 'SHOP_THE_PIN' | 'COLLECTION' | 'IDEA'>;
  adAccountId?: string;
  pinMetrics?: boolean;
}

/**
 * pinsSave - parameters interface
 */
export interface IPinsSaveParams {
  pinId: string;
  pinsSaveRequest: PinsSaveRequest;
  adAccountId?: string;
}

/**
 * pinsUpdate - parameters interface
 */
export interface IPinsUpdateParams {
  pinId: string;
  pinUpdate: PinUpdate;
  adAccountId?: string;
}

/**
 * PinsApi - API class
 */
@autoinject()
export class PinsApi extends Api {

  /**
   * Creates a new PinsApi class.
   *
   * @param httpClient The Aurelia HTTP client to be injected.
   * @param authStorage A storage for authentication data.
   */
  constructor(httpClient: HttpClient, authStorage: AuthStorage) {
    super(httpClient, authStorage);
  }

  /**
   * Get multiple Pin analytics
   * &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;\&#39;/docs/getting-started/beta-and-advanced-access/\&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Get analytics for multiple pins owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. - The maximum number of pins supported in a single request is 100. - By default, the \&quot;operation user_account\&quot; is the token user_account.  Optional: Business Access: Specify an &lt;code&gt;ad_account_id&lt;/code&gt; (obtained via &lt;a href&#x3D;\&quot;/docs/api/v5/#operation/ad_accounts/list\&quot;&gt;List ad accounts&lt;/a&gt;) to use the owner of that ad_account as the \&quot;operation user_account\&quot;. In order to do this, the token user_account must have one of the following &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt; roles on the ad_account:  - For Pins on public or protected boards: Admin, Analyst. - For Pins on secret boards: Admin.  If Pin was created before &lt;code&gt;2023-03-20&lt;/code&gt; lifetime metrics will only be available for Video and Idea Pin formats. Lifetime metrics are available for all Pin formats since then.
   * @param params.pinIds List of Pin IDs.
   * @param params.startDate Metric report start date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days back from today.
   * @param params.endDate Metric report end date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days past start_date.
   * @param params.metricTypes Pin metric types to get data for.
   * @param params.appTypes Apps or devices to get data for, default is all.
   * @param params.adAccountId Unique identifier of an ad account.
   */
  async multiPinsAnalytics(params: IMultiPinsAnalyticsParams): Promise<{ [key: string]: { [key: string]: PinAnalyticsMetricsResponse; }; }> {
    // Verify required parameters are set
    this.ensureParamIsSet('multiPinsAnalytics', params, 'pinIds');
    this.ensureParamIsSet('multiPinsAnalytics', params, 'startDate');
    this.ensureParamIsSet('multiPinsAnalytics', params, 'endDate');
    this.ensureParamIsSet('multiPinsAnalytics', params, 'metricTypes');

    // Create URL to call
    const url = `${this.basePath}/pins/analytics`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'pin_ids': params['pinIds'],
        'start_date': params['startDate'],
        'end_date': params['endDate'],
        'app_types': params['appTypes'],
        'metric_types': params['metricTypes'],
        'ad_account_id': params['adAccountId'],
      })

      // Authentication 'pinterest_oauth2' required
      // Authentication 'client_credentials' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get Pin analytics
   * Get analytics for a Pin owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.  Optional: Business Access: Specify an &lt;code&gt;ad_account_id&lt;/code&gt; (obtained via &lt;a href&#x3D;\&quot;/docs/api/v5/#operation/ad_accounts/list\&quot;&gt;List ad accounts&lt;/a&gt;) to use the owner of that ad_account as the \&quot;operation user_account\&quot;. In order to do this, the token user_account must have one of the following &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt; roles on the ad_account:  - For Pins on public or protected boards: Admin, Analyst. - For Pins on secret boards: Admin.  If Pin was created before &lt;code&gt;2023-03-20&lt;/code&gt; lifetime metrics will only be available for Video and Idea Pin formats. Lifetime metrics are available for all Pin formats since then.
   * @param params.pinId Unique identifier of a Pin.
   * @param params.startDate Metric report start date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days back from today.
   * @param params.endDate Metric report end date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days past start_date.
   * @param params.metricTypes Pin metric types to get data for. VIDEO_MRC_VIEW are Video views, VIDEO_V50_WATCH_TIME is Total play time. If Pin was created before &lt;code&gt;2023-03-20&lt;/code&gt;, Profile visits and Follows will only be available for Idea Pins. These metrics are available for all Pin formats since then. Keep in mind this cannot have ALL if split_field is set to any value other than &lt;code&gt;NO_SPLIT&lt;/code&gt;.
   * @param params.appTypes Apps or devices to get data for, default is all.
   * @param params.splitField How to split the data into groups. Not including this param means data won\&#39;t be split.
   * @param params.adAccountId Unique identifier of an ad account.
   */
  async pinsAnalytics(params: IPinsAnalyticsParams): Promise<{ [key: string]: PinAnalyticsMetricsResponse; }> {
    // Verify required parameters are set
    this.ensureParamIsSet('pinsAnalytics', params, 'pinId');
    this.ensureParamIsSet('pinsAnalytics', params, 'startDate');
    this.ensureParamIsSet('pinsAnalytics', params, 'endDate');
    this.ensureParamIsSet('pinsAnalytics', params, 'metricTypes');

    // Create URL to call
    const url = `${this.basePath}/pins/{pin_id}/analytics`
      .replace(`{${'pin_id'}}`, encodeURIComponent(`${params['pinId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'start_date': params['startDate'],
        'end_date': params['endDate'],
        'app_types': params['appTypes'],
        'metric_types': params['metricTypes'],
        'split_field': params['splitField'],
        'ad_account_id': params['adAccountId'],
      })

      // Authentication 'pinterest_oauth2' required
      // Authentication 'client_credentials' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Create Pin
   * Create a Pin on a board or board section owned by the \&quot;operation user_account\&quot;.  Note: If the current \&quot;operation user_account\&quot; (defined by the access token) has access to another user\&#39;s Ad Accounts via Pinterest Business Access, you can modify your request to make use of the current operation_user_account\&#39;s permissions to those Ad Accounts by including the ad_account_id in the path parameters for the request (e.g. .../?ad_account_id&#x3D;12345&amp;...).  - This function is intended solely for publishing new content created by the user. If you are interested in saving content created by others to your Pinterest boards, sometimes called \&#39;curated content\&#39;, please use our &lt;a href&#x3D;\&#39;/docs/web-features/add-ons-overview/\&#39;&gt;Save button&lt;/a&gt; instead. For more tips on creating fresh content for Pinterest, review our &lt;a href&#x3D;\&#39;/docs/api-features/content-overview/\&#39;&gt;Content App Solutions Guide&lt;/a&gt;.  &lt;strong&gt;&lt;a href&#x3D;\&#39;/docs/api-features/creating-boards-and-pins/#creating-video-pins\&#39;&gt;Learn more&lt;/a&gt;&lt;/strong&gt; about video Pin creation.
   * @param params.pinCreate Create a new Pin.
   * @param params.adAccountId Unique identifier of an ad account.
   */
  async pinsCreate(params: IPinsCreateParams): Promise<Pin> {
    // Verify required parameters are set
    this.ensureParamIsSet('pinsCreate', params, 'pinCreate');

    // Create URL to call
    const url = `${this.basePath}/pins`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Set query parameters
      .withParams({ 
        'ad_account_id': params['adAccountId'],
      })
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['pinCreate'] || {}))

      // Authentication 'pinterest_oauth2' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Delete Pin
   * Delete a Pins owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.  Optional: Business Access: Specify an &lt;code&gt;ad_account_id&lt;/code&gt; (obtained via &lt;a href&#x3D;\&#39;/docs/api/v5/#operation/ad_accounts/list\&#39;&gt;List ad accounts&lt;/a&gt;) to use the owner of that ad_account as the \&quot;operation user_account\&quot;. In order to do this, the token user_account must have one of the following &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt; roles on the ad_account:  - For Pins on public or protected boards: Owner, Admin, Analyst, Campaign Manager. - For Pins on secret boards: Owner, Admin.
   * @param params.pinId Unique identifier of a Pin.
   * @param params.adAccountId Unique identifier of an ad account.
   */
  async pinsDelete(params: IPinsDeleteParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('pinsDelete', params, 'pinId');

    // Create URL to call
    const url = `${this.basePath}/pins/{pin_id}`
      .replace(`{${'pin_id'}}`, encodeURIComponent(`${params['pinId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asDelete()
      // Set query parameters
      .withParams({ 
        'ad_account_id': params['adAccountId'],
      })

      // Authentication 'pinterest_oauth2' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get Pin
   * Get a Pin owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.  Optional: Business Access: Specify an &lt;code&gt;ad_account_id&lt;/code&gt; (obtained via &lt;a href&#x3D;\&#39;/docs/api/v5/#operation/ad_accounts/list\&#39;&gt;List ad accounts&lt;/a&gt;) to use the owner of that ad_account as the \&quot;operation user_account\&quot;. In order to do this, the token user_account must have one of the following &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt; roles on the ad_account:  - For Pins on public or protected boards: Owner, Admin, Analyst, Campaign Manager. - For Pins on secret boards: Owner, Admin.
   * @param params.pinId Unique identifier of a Pin.
   * @param params.pinMetrics Specify whether to return 90d and lifetime Pin metrics. Total comments and total reactions are only available with lifetime Pin metrics. If Pin was created before &lt;code&gt;2023-03-20&lt;/code&gt; lifetime metrics will only be available for Video and Idea Pin formats. Lifetime metrics are available for all Pin formats since then.
   * @param params.adAccountId Unique identifier of an ad account.
   */
  async pinsGet(params: IPinsGetParams): Promise<Pin> {
    // Verify required parameters are set
    this.ensureParamIsSet('pinsGet', params, 'pinId');

    // Create URL to call
    const url = `${this.basePath}/pins/{pin_id}`
      .replace(`{${'pin_id'}}`, encodeURIComponent(`${params['pinId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'pin_metrics': params['pinMetrics'],
        'ad_account_id': params['adAccountId'],
      })

      // Authentication 'pinterest_oauth2' required
      // Authentication 'client_credentials' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * List Pins
   * Get a list of the Pins owned by the \&quot;operation user_account\&quot;.   - By default, the \&quot;operation user_account\&quot; is the token user_account.   - All Pins owned by the \&quot;operation user_account\&quot; are included, regardless of who owns the board they are on. Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;.  Disclaimer: there are known performance issues when filtering by field &lt;code&gt;creative_type&lt;/code&gt; and including protected pins. If your request is timing out in this scenario we encourage you to use &lt;a href&#x3D;\&#39;/docs/api/v5/#operation/boards/list_pins\&#39;&gt;GET List Pins on Board&lt;/a&gt;.
   * @param params.bookmark Cursor used to fetch the next page of items
   * @param params.pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;\&#39;/docs/reference/pagination/\&#39;&gt;Pagination&lt;/a&gt; for more information.
   * @param params.pinFilter Pin filter.
   * @param params.includeProtectedPins Specify if return pins from protected boards
   * @param params.pinType The type of pins to return, currently only enabled for private pins
   * @param params.creativeTypes Pin creative types filter. &lt;/p&gt;&lt;strong&gt;Note:&lt;/strong&gt; SHOP_THE_PIN has been deprecated. Please use COLLECTION instead.
   * @param params.adAccountId Unique identifier of an ad account.
   * @param params.pinMetrics Specify whether to return 90d and lifetime Pin metrics. Total comments and total reactions are only available with lifetime Pin metrics. If Pin was created before &lt;code&gt;2023-03-20&lt;/code&gt; lifetime metrics will only be available for Video and Idea Pin formats. Lifetime metrics are available for all Pin formats since then.
   */
  async pinsList(params: IPinsListParams): Promise<PinsList200Response> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/pins`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'bookmark': params['bookmark'],
        'page_size': params['pageSize'],
        'pin_filter': params['pinFilter'],
        'include_protected_pins': params['includeProtectedPins'],
        'pin_type': params['pinType'],
        'creative_types': params['creativeTypes'],
        'ad_account_id': params['adAccountId'],
        'pin_metrics': params['pinMetrics'],
      })

      // Authentication 'pinterest_oauth2' required
      // Authentication 'client_credentials' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Save Pin
   * Save a Pin on a board or board section owned by the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account. Optional: Business Access: Specify an &lt;code&gt;ad_account_id&lt;/code&gt; (obtained via &lt;a href&#x3D;\&#39;/docs/api/v5/#operation/ad_accounts/list\&#39;&gt;List ad accounts&lt;/a&gt;) to use the owner of that ad_account as the \&quot;operation user_account\&quot;. In order to do this, the token user_account must have one of the following &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt; roles on the ad_account:  - For Pins on public or protected boards: Owner, Admin, Analyst, Campaign Manager. - For Pins on secret boards: Owner, Admin.  - Any Pin type can be saved: image Pin, video Pin, Idea Pin, product Pin, etc. - Any public Pin can be saved given a pin ID.
   * @param params.pinId Unique identifier of a Pin.
   * @param params.pinsSaveRequest Request object used to save an existing pin
   * @param params.adAccountId Unique identifier of an ad account.
   */
  async pinsSave(params: IPinsSaveParams): Promise<Pin> {
    // Verify required parameters are set
    this.ensureParamIsSet('pinsSave', params, 'pinId');
    this.ensureParamIsSet('pinsSave', params, 'pinsSaveRequest');

    // Create URL to call
    const url = `${this.basePath}/pins/{pin_id}/save`
      .replace(`{${'pin_id'}}`, encodeURIComponent(`${params['pinId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Set query parameters
      .withParams({ 
        'ad_account_id': params['adAccountId'],
      })
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['pinsSaveRequest'] || {}))

      // Authentication 'pinterest_oauth2' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Update Pin
   * Update a pin owned by the \&quot;operating user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.  Optional: Business Access: Specify an &lt;code&gt;ad_account_id&lt;/code&gt; (obtained via &lt;a href&#x3D;\&#39;/docs/api/v5/#operation/ad_accounts/list\&#39;&gt;List ad accounts&lt;/a&gt;) to use the owner of that ad_account as the \&quot;operation user_account\&quot;. In order to do this, the token user_account must have one of the following &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt; roles on the ad_account:  - For Pins on public or protected boards: Owner, Admin, Analyst, Campaign Manager. - For Pins on secret boards: Owner, Admin.  &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;\&#39;/docs/getting-started/beta-and-advanced-access/\&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;
   * @param params.pinId Unique identifier of a Pin.
   * @param params.pinUpdate 
   * @param params.adAccountId Unique identifier of an ad account.
   */
  async pinsUpdate(params: IPinsUpdateParams): Promise<Pin> {
    // Verify required parameters are set
    this.ensureParamIsSet('pinsUpdate', params, 'pinId');
    this.ensureParamIsSet('pinsUpdate', params, 'pinUpdate');

    // Create URL to call
    const url = `${this.basePath}/pins/{pin_id}`
      .replace(`{${'pin_id'}}`, encodeURIComponent(`${params['pinId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPatch()
      // Set query parameters
      .withParams({ 
        'ad_account_id': params['adAccountId'],
      })
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['pinUpdate'] || {}))

      // Authentication 'pinterest_oauth2' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

}

