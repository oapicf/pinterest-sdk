/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { autoinject } from 'aurelia-framework';
import { HttpClient } from 'aurelia-http-client';
import { Api } from './Api';
import { AuthStorage } from './AuthStorage';
import {
  DeleteMemberAccessResultsResponseArray,
  PartnerType,
  UpdatePartnerAssetsResultsResponseArray,
  DeletePartnerAssetsResultsResponseArray,
  BusinessAssetPartnersGet200Response,
  BusinessAssetsGet200Response,
  UpdateAssetGroupResponse,
  UpdateMemberAssetsResultsResponseArray,
  DeletePartnerAssetAccessBody,
  CreateAssetGroupResponse,
  BusinessPartnerAssetAccessGet200Response,
  BusinessAssetMembersGet200Response,
  DeleteAssetGroupResponse,
  UpdateAssetGroupBody,
  UpdatePartnerAssetAccessBody,
  BusinessMembersAssetAccessDeleteRequest,
  DeleteAssetGroupBody,
  BusinessMemberAssetsGet200Response,
  UpdateMemberAssetAccessBody,
  CreateAssetGroupBody,
} from './models';

/**
 * assetGroupCreate - parameters interface
 */
export interface IAssetGroupCreateParams {
  businessId: string;
  createAssetGroupBody: CreateAssetGroupBody;
}

/**
 * assetGroupDelete - parameters interface
 */
export interface IAssetGroupDeleteParams {
  businessId: string;
  deleteAssetGroupBody: DeleteAssetGroupBody;
}

/**
 * assetGroupUpdate - parameters interface
 */
export interface IAssetGroupUpdateParams {
  businessId: string;
  updateAssetGroupBody: UpdateAssetGroupBody;
}

/**
 * businessAssetMembersGet - parameters interface
 */
export interface IBusinessAssetMembersGetParams {
  businessId: string;
  assetId: string;
  bookmark?: string;
  pageSize?: number;
  startIndex?: number;
}

/**
 * businessAssetPartnersGet - parameters interface
 */
export interface IBusinessAssetPartnersGetParams {
  businessId: string;
  assetId: string;
  startIndex?: number;
  bookmark?: string;
  pageSize?: number;
}

/**
 * businessAssetsGet - parameters interface
 */
export interface IBusinessAssetsGetParams {
  businessId: string;
  permissions?: Array<PermissionsWithOwner>;
  childAssetId?: string;
  assetGroupId?: string;
  assetType?: 'AD_ACCOUNT' | 'PROFILE' | 'ASSET_GROUP';
  startIndex?: number;
  bookmark?: string;
  pageSize?: number;
}

/**
 * businessMemberAssetsGet - parameters interface
 */
export interface IBusinessMemberAssetsGetParams {
  businessId: string;
  memberId: string;
  assetType?: 'AD_ACCOUNT' | 'PROFILE' | 'ASSET_GROUP';
  startIndex?: number;
  bookmark?: string;
  pageSize?: number;
}

/**
 * businessMembersAssetAccessDelete - parameters interface
 */
export interface IBusinessMembersAssetAccessDeleteParams {
  businessId: string;
  businessMembersAssetAccessDeleteRequest: BusinessMembersAssetAccessDeleteRequest;
}

/**
 * businessMembersAssetAccessUpdate - parameters interface
 */
export interface IBusinessMembersAssetAccessUpdateParams {
  businessId: string;
  updateMemberAssetAccessBody: UpdateMemberAssetAccessBody;
}

/**
 * businessPartnerAssetAccessGet - parameters interface
 */
export interface IBusinessPartnerAssetAccessGetParams {
  businessId: string;
  partnerId: string;
  partnerType?: PartnerType;
  assetType?: 'AD_ACCOUNT' | 'PROFILE' | 'ASSET_GROUP';
  startIndex?: number;
  pageSize?: number;
  bookmark?: string;
}

/**
 * deletePartnerAssetAccessHandlerImpl - parameters interface
 */
export interface IDeletePartnerAssetAccessHandlerImplParams {
  businessId: string;
  deletePartnerAssetAccessBody: DeletePartnerAssetAccessBody;
}

/**
 * updatePartnerAssetAccessHandlerImpl - parameters interface
 */
export interface IUpdatePartnerAssetAccessHandlerImplParams {
  businessId: string;
  updatePartnerAssetAccessBody: UpdatePartnerAssetAccessBody;
}

/**
 * BusinessAccessAssetsApi - API class
 */
@autoinject()
export class BusinessAccessAssetsApi extends Api {

  /**
   * Creates a new BusinessAccessAssetsApi class.
   *
   * @param httpClient The Aurelia HTTP client to be injected.
   * @param authStorage A storage for authentication data.
   */
  constructor(httpClient: HttpClient, authStorage: AuthStorage) {
    super(httpClient, authStorage);
  }

  /**
   * Create a new asset group.
   * Create a new asset group with the specified parameters. - An &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/asset-groups\&quot;&gt;asset group&lt;/a&gt; is a custom group of assets based on how youâ€™d like to manage your accounts.
   * @param params.businessId Unique identifier of the requesting business.
   * @param params.createAssetGroupBody 
   */
  async assetGroupCreate(params: IAssetGroupCreateParams): Promise<CreateAssetGroupResponse> {
    // Verify required parameters are set
    this.ensureParamIsSet('assetGroupCreate', params, 'businessId');
    this.ensureParamIsSet('assetGroupCreate', params, 'createAssetGroupBody');

    // Create URL to call
    const url = `${this.basePath}/businesses/{business_id}/asset_groups`
      .replace(`{${'business_id'}}`, encodeURIComponent(`${params['businessId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['createAssetGroupBody'] || {}))

      // Authentication 'pinterest_oauth2' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Delete asset groups.
   * Delete a batch of asset groups.
   * @param params.businessId Unique identifier of the requesting business.
   * @param params.deleteAssetGroupBody 
   */
  async assetGroupDelete(params: IAssetGroupDeleteParams): Promise<DeleteAssetGroupResponse> {
    // Verify required parameters are set
    this.ensureParamIsSet('assetGroupDelete', params, 'businessId');
    this.ensureParamIsSet('assetGroupDelete', params, 'deleteAssetGroupBody');

    // Create URL to call
    const url = `${this.basePath}/businesses/{business_id}/asset_groups`
      .replace(`{${'business_id'}}`, encodeURIComponent(`${params['businessId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asDelete()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['deleteAssetGroupBody'] || {}))

      // Authentication 'pinterest_oauth2' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Update asset groups.
   * Update a batch of asset groups with the specified parameters.
   * @param params.businessId Unique identifier of the requesting business.
   * @param params.updateAssetGroupBody 
   */
  async assetGroupUpdate(params: IAssetGroupUpdateParams): Promise<UpdateAssetGroupResponse> {
    // Verify required parameters are set
    this.ensureParamIsSet('assetGroupUpdate', params, 'businessId');
    this.ensureParamIsSet('assetGroupUpdate', params, 'updateAssetGroupBody');

    // Create URL to call
    const url = `${this.basePath}/businesses/{business_id}/asset_groups`
      .replace(`{${'business_id'}}`, encodeURIComponent(`${params['businessId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPatch()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['updateAssetGroupBody'] || {}))

      // Authentication 'pinterest_oauth2' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get members with access to asset
   * Get all the members the requesting business has granted access to on the given asset.
   * @param params.businessId Unique identifier of the requesting business.
   * @param params.assetId Unique identifier of a business asset.
   * @param params.bookmark Cursor used to fetch the next page of items
   * @param params.pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;\&#39;/docs/reference/pagination/\&#39;&gt;Pagination&lt;/a&gt; for more information.
   * @param params.startIndex An index to start fetching the results from. Only the results starting from this index will be returned.
   */
  async businessAssetMembersGet(params: IBusinessAssetMembersGetParams): Promise<BusinessAssetMembersGet200Response> {
    // Verify required parameters are set
    this.ensureParamIsSet('businessAssetMembersGet', params, 'businessId');
    this.ensureParamIsSet('businessAssetMembersGet', params, 'assetId');

    // Create URL to call
    const url = `${this.basePath}/businesses/{business_id}/assets/{asset_id}/members`
      .replace(`{${'business_id'}}`, encodeURIComponent(`${params['businessId']}`))
      .replace(`{${'asset_id'}}`, encodeURIComponent(`${params['assetId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'bookmark': params['bookmark'],
        'page_size': params['pageSize'],
        'start_index': params['startIndex'],
      })

      // Authentication 'pinterest_oauth2' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get partners with access to asset
   * Get all the partners the requesting business has granted access to on the given asset. Note: If the asset has been shared with you, an empty array will be returned. This is because an asset shared with you cannot be shared with a different partner.
   * @param params.businessId Unique identifier of the requesting business.
   * @param params.assetId Unique identifier of a business asset.
   * @param params.startIndex An index to start fetching the results from. Only the results starting from this index will be returned.
   * @param params.bookmark Cursor used to fetch the next page of items
   * @param params.pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;\&#39;/docs/reference/pagination/\&#39;&gt;Pagination&lt;/a&gt; for more information.
   */
  async businessAssetPartnersGet(params: IBusinessAssetPartnersGetParams): Promise<BusinessAssetPartnersGet200Response> {
    // Verify required parameters are set
    this.ensureParamIsSet('businessAssetPartnersGet', params, 'businessId');
    this.ensureParamIsSet('businessAssetPartnersGet', params, 'assetId');

    // Create URL to call
    const url = `${this.basePath}/businesses/{business_id}/assets/{asset_id}/partners`
      .replace(`{${'business_id'}}`, encodeURIComponent(`${params['businessId']}`))
      .replace(`{${'asset_id'}}`, encodeURIComponent(`${params['assetId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'start_index': params['startIndex'],
        'bookmark': params['bookmark'],
        'page_size': params['pageSize'],
      })

      // Authentication 'pinterest_oauth2' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * List business assets
   * Get all the assets the requesting business has access to. This includes assets the business owns and assets the business has access to through partnerships.
   * @param params.businessId Unique identifier of the requesting business.
   * @param params.permissions A list of asset permissions used to filter the assets. Only assets where the requesting business has at least one of the specified permissions will be returned.
   * @param params.childAssetId A child asset unique identifier. Used to fetch asset groups that contain the asset id as a child.
   * @param params.assetGroupId An asset group unique identifier. Used to fetch assets contained within the specified asset group.
   * @param params.assetType A resource type to filter the assets by. Only assets of the specified type will be returned.
   * @param params.startIndex An index to start fetching the results from. Only the results starting from this index will be returned.
   * @param params.bookmark Cursor used to fetch the next page of items
   * @param params.pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;\&#39;/docs/reference/pagination/\&#39;&gt;Pagination&lt;/a&gt; for more information.
   */
  async businessAssetsGet(params: IBusinessAssetsGetParams): Promise<BusinessAssetsGet200Response> {
    // Verify required parameters are set
    this.ensureParamIsSet('businessAssetsGet', params, 'businessId');

    // Create URL to call
    const url = `${this.basePath}/businesses/{business_id}/assets`
      .replace(`{${'business_id'}}`, encodeURIComponent(`${params['businessId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'permissions': params['permissions'],
        'child_asset_id': params['childAssetId'],
        'asset_group_id': params['assetGroupId'],
        'asset_type': params['assetType'],
        'start_index': params['startIndex'],
        'bookmark': params['bookmark'],
        'page_size': params['pageSize'],
      })

      // Authentication 'pinterest_oauth2' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get assets assigned to a member
   * Get assets on which you assigned asset permissions to the given member. Can be used to: - get all assets, regardless of asset type or - get assets of one asset type by using the asset_type query. The return response will include the permissions the member has to that asset and the asset type.
   * @param params.businessId Unique identifier of the requesting business.
   * @param params.memberId The member id to fetch assets for.
   * @param params.assetType A resource type to filter the assets by. Only assets of the specified type will be returned.
   * @param params.startIndex An index to start fetching the results from. Only the results starting from this index will be returned.
   * @param params.bookmark Cursor used to fetch the next page of items
   * @param params.pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;\&#39;/docs/reference/pagination/\&#39;&gt;Pagination&lt;/a&gt; for more information.
   */
  async businessMemberAssetsGet(params: IBusinessMemberAssetsGetParams): Promise<BusinessMemberAssetsGet200Response> {
    // Verify required parameters are set
    this.ensureParamIsSet('businessMemberAssetsGet', params, 'businessId');
    this.ensureParamIsSet('businessMemberAssetsGet', params, 'memberId');

    // Create URL to call
    const url = `${this.basePath}/businesses/{business_id}/members/{member_id}/assets`
      .replace(`{${'business_id'}}`, encodeURIComponent(`${params['businessId']}`))
      .replace(`{${'member_id'}}`, encodeURIComponent(`${params['memberId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'asset_type': params['assetType'],
        'start_index': params['startIndex'],
        'bookmark': params['bookmark'],
        'page_size': params['pageSize'],
      })

      // Authentication 'pinterest_oauth2' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Delete member access to asset
   * Terminate multiple members\&#39; access to an asset.
   * @param params.businessId Unique identifier of the requesting business.
   * @param params.businessMembersAssetAccessDeleteRequest List member assset permissions to delete.
   */
  async businessMembersAssetAccessDelete(params: IBusinessMembersAssetAccessDeleteParams): Promise<DeleteMemberAccessResultsResponseArray> {
    // Verify required parameters are set
    this.ensureParamIsSet('businessMembersAssetAccessDelete', params, 'businessId');
    this.ensureParamIsSet('businessMembersAssetAccessDelete', params, 'businessMembersAssetAccessDeleteRequest');

    // Create URL to call
    const url = `${this.basePath}/businesses/{business_id}/members/assets/access`
      .replace(`{${'business_id'}}`, encodeURIComponent(`${params['businessId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asDelete()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['businessMembersAssetAccessDeleteRequest'] || {}))

      // Authentication 'pinterest_oauth2' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Assign/Update member asset permissions
   * Grant multiple members access to assets and/or update multiple member\&#39;s exisiting permissions to an asset. Note: Not all listed permissions are applicable to each asset type. For example, PROFILE_PUBLISHER would not be applicable to an asset of type AD_ACCOUNT. The permission level PROFILE_PUBLISHER is only available to an asset of the type PROFILE. 
   * @param params.businessId Unique identifier of the requesting business.
   * @param params.updateMemberAssetAccessBody List of member asset permissions to create or update.
   */
  async businessMembersAssetAccessUpdate(params: IBusinessMembersAssetAccessUpdateParams): Promise<UpdateMemberAssetsResultsResponseArray> {
    // Verify required parameters are set
    this.ensureParamIsSet('businessMembersAssetAccessUpdate', params, 'businessId');
    this.ensureParamIsSet('businessMembersAssetAccessUpdate', params, 'updateMemberAssetAccessBody');

    // Create URL to call
    const url = `${this.basePath}/businesses/{business_id}/members/assets/access`
      .replace(`{${'business_id'}}`, encodeURIComponent(`${params['businessId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPatch()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['updateMemberAssetAccessBody'] || {}))

      // Authentication 'pinterest_oauth2' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get assets assigned to a partner or assets assigned by a partner
   * Can be used to get the business assets your partner has granted you access to or the business assets you have granted your partner access to. If you specify: - partner_type&#x3D;INTERNAL, you will retrieve your business assets that the partner has access to. - partner_type&#x3D;EXTERNAL, you will retrieve the partner\&#39;s business assets that the partner has granted you access to.
   * @param params.businessId Unique identifier of the requesting business.
   * @param params.partnerId The partner id to be bound to the Business
   * @param params.partnerType Specifies whether to fetch internal or external (shared) partners. If partner_type&#x3D;INTERNAL, the asset being queried is for accesses the partner has to your business assets.&lt;br&gt; If partner_type&#x3D;EXTERNAL, the asset being queried is for the accesses you have to the partner\&#39;s business asset.
   * @param params.assetType A resource type to filter the assets by. Only assets of the specified type will be returned.
   * @param params.startIndex An index to start fetching the results from. Only the results starting from this index will be returned.
   * @param params.pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;\&#39;/docs/reference/pagination/\&#39;&gt;Pagination&lt;/a&gt; for more information.
   * @param params.bookmark Cursor used to fetch the next page of items
   */
  async businessPartnerAssetAccessGet(params: IBusinessPartnerAssetAccessGetParams): Promise<BusinessPartnerAssetAccessGet200Response> {
    // Verify required parameters are set
    this.ensureParamIsSet('businessPartnerAssetAccessGet', params, 'businessId');
    this.ensureParamIsSet('businessPartnerAssetAccessGet', params, 'partnerId');

    // Create URL to call
    const url = `${this.basePath}/businesses/{business_id}/partners/{partner_id}/assets`
      .replace(`{${'business_id'}}`, encodeURIComponent(`${params['businessId']}`))
      .replace(`{${'partner_id'}}`, encodeURIComponent(`${params['partnerId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'partner_type': params['partnerType'],
        'asset_type': params['assetType'],
        'start_index': params['startIndex'],
        'page_size': params['pageSize'],
        'bookmark': params['bookmark'],
      })

      // Authentication 'pinterest_oauth2' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Delete partner access to asset
   * Terminate multiple partners\&#39; access to an asset. If - partner_type&#x3D;INTERNAL: You will terminate a partner\&#39;s asset access to your business assets. - partner_type&#x3D;EXTERNAL: You will terminate your own access to your partner\&#39;s business assets.
   * @param params.businessId Unique identifier of the requesting business.
   * @param params.deletePartnerAssetAccessBody 
   */
  async deletePartnerAssetAccessHandlerImpl(params: IDeletePartnerAssetAccessHandlerImplParams): Promise<DeletePartnerAssetsResultsResponseArray> {
    // Verify required parameters are set
    this.ensureParamIsSet('deletePartnerAssetAccessHandlerImpl', params, 'businessId');
    this.ensureParamIsSet('deletePartnerAssetAccessHandlerImpl', params, 'deletePartnerAssetAccessBody');

    // Create URL to call
    const url = `${this.basePath}/businesses/{business_id}/partners/assets`
      .replace(`{${'business_id'}}`, encodeURIComponent(`${params['businessId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asDelete()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['deletePartnerAssetAccessBody'] || {}))

      // Authentication 'pinterest_oauth2' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Assign/Update partner asset permissions
   * Grant multiple partners access to assets and/or update multiple partner\&#39;s exisiting permissions to an asset. If your partner already had permissions on the asset, they will be overriden with the new permissions you assign to them. To learn more about permission levels, visit https://help.pinterest.com/en/business/article/business-manager-overview  Note: Not all listed permissions are applicable to each asset type. For example, PROFILE_PUBLISHER would not be applicable to an asset of type AD_ACCOUNT. The permission level PROFILE_PUBLISHER is only available to an asset of the type PROFILE.
   * @param params.businessId Unique identifier of the requesting business.
   * @param params.updatePartnerAssetAccessBody A list of assets and permissions to assign to your partners.
   */
  async updatePartnerAssetAccessHandlerImpl(params: IUpdatePartnerAssetAccessHandlerImplParams): Promise<UpdatePartnerAssetsResultsResponseArray> {
    // Verify required parameters are set
    this.ensureParamIsSet('updatePartnerAssetAccessHandlerImpl', params, 'businessId');
    this.ensureParamIsSet('updatePartnerAssetAccessHandlerImpl', params, 'updatePartnerAssetAccessBody');

    // Create URL to call
    const url = `${this.basePath}/businesses/{business_id}/partners/assets`
      .replace(`{${'business_id'}}`, encodeURIComponent(`${params['businessId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPatch()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['updatePartnerAssetAccessBody'] || {}))

      // Authentication 'pinterest_oauth2' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

}

