/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { autoinject } from 'aurelia-framework';
import { HttpClient } from 'aurelia-http-client';
import { Api } from './Api';
import { AuthStorage } from './AuthStorage';
import {
  SSIOEditInsertionOrderResponse,
  SsioOrderLinesGetByAdAccount200Response,
  BillingProfilesGet200Response,
  AdsCreditRedeemRequest,
  SSIOCreateInsertionOrderResponse,
  AdsCreditsDiscountsGet200Response,
  SSIOCreateInsertionOrderRequest,
  SSIOEditInsertionOrderRequest,
  SSIOInsertionOrderStatusResponse,
  SsioInsertionOrdersStatusGetByAdAccount200Response,
  SSIOAccountResponse,
  AdsCreditRedeemResponse,
} from './models';

/**
 * adsCreditRedeem - parameters interface
 */
export interface IAdsCreditRedeemParams {
  adAccountId: string;
  adsCreditRedeemRequest: AdsCreditRedeemRequest;
}

/**
 * adsCreditsDiscountsGet - parameters interface
 */
export interface IAdsCreditsDiscountsGetParams {
  adAccountId: string;
  bookmark?: string;
  pageSize?: number;
}

/**
 * billingProfilesGet - parameters interface
 */
export interface IBillingProfilesGetParams {
  adAccountId: string;
  isActive: boolean;
  bookmark?: string;
  pageSize?: number;
}

/**
 * ssioAccountsGet - parameters interface
 */
export interface ISsioAccountsGetParams {
  adAccountId: string;
}

/**
 * ssioInsertionOrderCreate - parameters interface
 */
export interface ISsioInsertionOrderCreateParams {
  adAccountId: string;
  sSIOCreateInsertionOrderRequest: SSIOCreateInsertionOrderRequest;
}

/**
 * ssioInsertionOrderEdit - parameters interface
 */
export interface ISsioInsertionOrderEditParams {
  adAccountId: string;
  sSIOEditInsertionOrderRequest: SSIOEditInsertionOrderRequest;
}

/**
 * ssioInsertionOrdersStatusGetByAdAccount - parameters interface
 */
export interface ISsioInsertionOrdersStatusGetByAdAccountParams {
  adAccountId: string;
  bookmark?: string;
  pageSize?: number;
}

/**
 * ssioInsertionOrdersStatusGetByPinOrderId - parameters interface
 */
export interface ISsioInsertionOrdersStatusGetByPinOrderIdParams {
  adAccountId: string;
  pinOrderId: string;
}

/**
 * ssioOrderLinesGetByAdAccount - parameters interface
 */
export interface ISsioOrderLinesGetByAdAccountParams {
  adAccountId: string;
  bookmark?: string;
  pageSize?: number;
  pinOrderId?: string;
}

/**
 * BillingApi - API class
 */
@autoinject()
export class BillingApi extends Api {

  /**
   * Creates a new BillingApi class.
   *
   * @param httpClient The Aurelia HTTP client to be injected.
   * @param authStorage A storage for authentication data.
   */
  constructor(httpClient: HttpClient, authStorage: AuthStorage) {
    super(httpClient, authStorage);
  }

  /**
   * Redeem ad credits
   * Redeem ads credit on behalf of the ad account id and apply it towards billing.  &lt;strong&gt;This endpoint might not be available to all apps. &lt;a href&#x3D;\&#39;/docs/getting-started/beta-and-advanced-access/\&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;
   * @param params.adAccountId Unique identifier of an ad account.
   * @param params.adsCreditRedeemRequest Redeem ad credits request.
   */
  async adsCreditRedeem(params: IAdsCreditRedeemParams): Promise<AdsCreditRedeemResponse> {
    // Verify required parameters are set
    this.ensureParamIsSet('adsCreditRedeem', params, 'adAccountId');
    this.ensureParamIsSet('adsCreditRedeem', params, 'adsCreditRedeemRequest');

    // Create URL to call
    const url = `${this.basePath}/ad_accounts/{ad_account_id}/ads_credit/redeem`
      .replace(`{${'ad_account_id'}}`, encodeURIComponent(`${params['adAccountId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['adsCreditRedeemRequest'] || {}))

      // Authentication 'pinterest_oauth2' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get ads credit discounts
   * Returns the list of discounts applied to the account.  &lt;strong&gt;This endpoint might not be available to all apps. &lt;a href&#x3D;\&#39;/docs/getting-started/beta-and-advanced-access/\&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;
   * @param params.adAccountId Unique identifier of an ad account.
   * @param params.bookmark Cursor used to fetch the next page of items
   * @param params.pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;\&#39;/docs/reference/pagination/\&#39;&gt;Pagination&lt;/a&gt; for more information.
   */
  async adsCreditsDiscountsGet(params: IAdsCreditsDiscountsGetParams): Promise<AdsCreditsDiscountsGet200Response> {
    // Verify required parameters are set
    this.ensureParamIsSet('adsCreditsDiscountsGet', params, 'adAccountId');

    // Create URL to call
    const url = `${this.basePath}/ad_accounts/{ad_account_id}/ads_credit/discounts`
      .replace(`{${'ad_account_id'}}`, encodeURIComponent(`${params['adAccountId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'bookmark': params['bookmark'],
        'page_size': params['pageSize'],
      })

      // Authentication 'pinterest_oauth2' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get billing profiles
   * Get billing profiles in the advertiser account.  &lt;strong&gt;This endpoint might not be available to all apps. &lt;a href&#x3D;\&#39;/docs/getting-started/beta-and-advanced-access/\&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;
   * @param params.adAccountId Unique identifier of an ad account.
   * @param params.isActive Return active billing profiles, if false return all billing profiles.
   * @param params.bookmark Cursor used to fetch the next page of items
   * @param params.pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;\&#39;/docs/reference/pagination/\&#39;&gt;Pagination&lt;/a&gt; for more information.
   */
  async billingProfilesGet(params: IBillingProfilesGetParams): Promise<BillingProfilesGet200Response> {
    // Verify required parameters are set
    this.ensureParamIsSet('billingProfilesGet', params, 'adAccountId');
    this.ensureParamIsSet('billingProfilesGet', params, 'isActive');

    // Create URL to call
    const url = `${this.basePath}/ad_accounts/{ad_account_id}/billing_profiles`
      .replace(`{${'ad_account_id'}}`, encodeURIComponent(`${params['adAccountId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'is_active': params['isActive'],
        'bookmark': params['bookmark'],
        'page_size': params['pageSize'],
      })

      // Authentication 'pinterest_oauth2' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get Salesforce account details including bill-to information.
   * Get Salesforce account details including bill-to information to be used in insertion orders process for &lt;code&gt;ad_account_id&lt;/code&gt;. - The token\&#39;s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt;: Admin, Finance, Campaign.
   * @param params.adAccountId Unique identifier of an ad account.
   */
  async ssioAccountsGet(params: ISsioAccountsGetParams): Promise<SSIOAccountResponse> {
    // Verify required parameters are set
    this.ensureParamIsSet('ssioAccountsGet', params, 'adAccountId');

    // Create URL to call
    const url = `${this.basePath}/ad_accounts/{ad_account_id}/ssio/accounts`
      .replace(`{${'ad_account_id'}}`, encodeURIComponent(`${params['adAccountId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'pinterest_oauth2' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Create insertion order through SSIO.
   * Create insertion order through SSIO for &lt;code&gt;ad_account_id&lt;/code&gt;. - The token\&#39;s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt;: Admin, Finance, Campaign.
   * @param params.adAccountId Unique identifier of an ad account.
   * @param params.sSIOCreateInsertionOrderRequest Order line to create.
   */
  async ssioInsertionOrderCreate(params: ISsioInsertionOrderCreateParams): Promise<SSIOCreateInsertionOrderResponse> {
    // Verify required parameters are set
    this.ensureParamIsSet('ssioInsertionOrderCreate', params, 'adAccountId');
    this.ensureParamIsSet('ssioInsertionOrderCreate', params, 'sSIOCreateInsertionOrderRequest');

    // Create URL to call
    const url = `${this.basePath}/ad_accounts/{ad_account_id}/ssio/insertion_orders`
      .replace(`{${'ad_account_id'}}`, encodeURIComponent(`${params['adAccountId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['sSIOCreateInsertionOrderRequest'] || {}))

      // Authentication 'pinterest_oauth2' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Edit insertion order through SSIO.
   * Edit insertion order through SSIO for &lt;code&gt;ad_account_id&lt;/code&gt;. - The token\&#39;s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt;: Admin, Finance, Campaign.
   * @param params.adAccountId Unique identifier of an ad account.
   * @param params.sSIOEditInsertionOrderRequest Order line to create.
   */
  async ssioInsertionOrderEdit(params: ISsioInsertionOrderEditParams): Promise<SSIOEditInsertionOrderResponse> {
    // Verify required parameters are set
    this.ensureParamIsSet('ssioInsertionOrderEdit', params, 'adAccountId');
    this.ensureParamIsSet('ssioInsertionOrderEdit', params, 'sSIOEditInsertionOrderRequest');

    // Create URL to call
    const url = `${this.basePath}/ad_accounts/{ad_account_id}/ssio/insertion_orders`
      .replace(`{${'ad_account_id'}}`, encodeURIComponent(`${params['adAccountId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPatch()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['sSIOEditInsertionOrderRequest'] || {}))

      // Authentication 'pinterest_oauth2' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get insertion order status by ad account id.
   * Get insertion order status for account id &lt;code&gt;ad_account_id&lt;/code&gt;. - The token\&#39;s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt;: Admin, Finance, Campaign.
   * @param params.adAccountId Unique identifier of an ad account.
   * @param params.bookmark Cursor used to fetch the next page of items
   * @param params.pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;\&#39;/docs/reference/pagination/\&#39;&gt;Pagination&lt;/a&gt; for more information.
   */
  async ssioInsertionOrdersStatusGetByAdAccount(params: ISsioInsertionOrdersStatusGetByAdAccountParams): Promise<SsioInsertionOrdersStatusGetByAdAccount200Response> {
    // Verify required parameters are set
    this.ensureParamIsSet('ssioInsertionOrdersStatusGetByAdAccount', params, 'adAccountId');

    // Create URL to call
    const url = `${this.basePath}/ad_accounts/{ad_account_id}/ssio/insertion_orders/status`
      .replace(`{${'ad_account_id'}}`, encodeURIComponent(`${params['adAccountId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'bookmark': params['bookmark'],
        'page_size': params['pageSize'],
      })

      // Authentication 'pinterest_oauth2' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get insertion order status by pin order id.
   * Get insertion order status for pin order id &lt;code&gt;pin_order_id&lt;/code&gt;. - The token\&#39;s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt;: Admin, Finance, Campaign.
   * @param params.adAccountId Unique identifier of an ad account.
   * @param params.pinOrderId The pin order id associated with the ssio insertion order
   */
  async ssioInsertionOrdersStatusGetByPinOrderId(params: ISsioInsertionOrdersStatusGetByPinOrderIdParams): Promise<SSIOInsertionOrderStatusResponse> {
    // Verify required parameters are set
    this.ensureParamIsSet('ssioInsertionOrdersStatusGetByPinOrderId', params, 'adAccountId');
    this.ensureParamIsSet('ssioInsertionOrdersStatusGetByPinOrderId', params, 'pinOrderId');

    // Create URL to call
    const url = `${this.basePath}/ad_accounts/{ad_account_id}/ssio/insertion_orders/{pin_order_id}/status`
      .replace(`{${'ad_account_id'}}`, encodeURIComponent(`${params['adAccountId']}`))
      .replace(`{${'pin_order_id'}}`, encodeURIComponent(`${params['pinOrderId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'pinterest_oauth2' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get Salesforce order lines by ad account id.
   * Get Salesforce order lines for account id &lt;code&gt;ad_account_id&lt;/code&gt;. - The token\&#39;s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt;: Admin, Finance, Campaign.
   * @param params.adAccountId Unique identifier of an ad account.
   * @param params.bookmark Cursor used to fetch the next page of items
   * @param params.pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;\&#39;/docs/reference/pagination/\&#39;&gt;Pagination&lt;/a&gt; for more information.
   * @param params.pinOrderId The pin order id associated with the ssio insertino order
   */
  async ssioOrderLinesGetByAdAccount(params: ISsioOrderLinesGetByAdAccountParams): Promise<SsioOrderLinesGetByAdAccount200Response> {
    // Verify required parameters are set
    this.ensureParamIsSet('ssioOrderLinesGetByAdAccount', params, 'adAccountId');

    // Create URL to call
    const url = `${this.basePath}/ad_accounts/{ad_account_id}/ssio/order_lines`
      .replace(`{${'ad_account_id'}}`, encodeURIComponent(`${params['adAccountId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'bookmark': params['bookmark'],
        'page_size': params['pageSize'],
        'pin_order_id': params['pinOrderId'],
      })

      // Authentication 'pinterest_oauth2' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

}

