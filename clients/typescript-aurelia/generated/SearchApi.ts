/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { autoinject } from 'aurelia-framework';
import { HttpClient } from 'aurelia-http-client';
import { Api } from './Api';
import { AuthStorage } from './AuthStorage';
import {
  SearchUserBoardsGet200Response,
  PinsList200Response,
  SearchPartnerPins200Response,
} from './models';

/**
 * searchPartnerPins - parameters interface
 */
export interface ISearchPartnerPinsParams {
  term: string;
  countryCode: string;
  bookmark?: string;
  locale?: string;
  limit?: number;
}

/**
 * searchUserBoardsGet - parameters interface
 */
export interface ISearchUserBoardsGetParams {
  adAccountId?: string;
  bookmark?: string;
  pageSize?: number;
  query?: string;
}

/**
 * searchUserPinsList - parameters interface
 */
export interface ISearchUserPinsListParams {
  query: string;
  adAccountId?: string;
  bookmark?: string;
}

/**
 * SearchApi - API class
 */
@autoinject()
export class SearchApi extends Api {

  /**
   * Creates a new SearchApi class.
   *
   * @param httpClient The Aurelia HTTP client to be injected.
   * @param authStorage A storage for authentication data.
   */
  constructor(httpClient: HttpClient, authStorage: AuthStorage) {
    super(httpClient, authStorage);
  }

  /**
   * Search pins by a given search term
   * &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;\&#39;/docs/getting-started/beta-and-advanced-access/\&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Get the top 10 Pins by a given search term.
   * @param params.term Search term to look up pins.
   * @param params.countryCode Two letter country code (ISO 3166-1 alpha-2)
   * @param params.bookmark Cursor used to fetch the next page of items
   * @param params.locale Search locale.
   * @param params.limit Max search result size
   */
  async searchPartnerPins(params: ISearchPartnerPinsParams): Promise<SearchPartnerPins200Response> {
    // Verify required parameters are set
    this.ensureParamIsSet('searchPartnerPins', params, 'term');
    this.ensureParamIsSet('searchPartnerPins', params, 'countryCode');

    // Create URL to call
    const url = `${this.basePath}/search/partner/pins`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'term': params['term'],
        'country_code': params['countryCode'],
        'bookmark': params['bookmark'],
        'locale': params['locale'],
        'limit': params['limit'],
      })

      // Authentication 'pinterest_oauth2' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Search user\&#39;s boards
   * Search for boards for the \&quot;operation user_account\&quot;. This includes boards of all board types. - By default, the \&quot;operation user_account\&quot; is the token user_account.  If using Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. See &lt;a href&#x3D;\&#39;/docs/getting-started/using-business-access/\&#39;&gt;Understanding Business Access&lt;/a&gt; for more information.
   * @param params.adAccountId Unique identifier of an ad account.
   * @param params.bookmark Cursor used to fetch the next page of items
   * @param params.pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;\&#39;/docs/reference/pagination/\&#39;&gt;Pagination&lt;/a&gt; for more information.
   * @param params.query Search query. Can contain pin description keywords or comma-separated pin IDs.
   */
  async searchUserBoardsGet(params: ISearchUserBoardsGetParams): Promise<SearchUserBoardsGet200Response> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/search/boards`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'ad_account_id': params['adAccountId'],
        'bookmark': params['bookmark'],
        'page_size': params['pageSize'],
        'query': params['query'],
      })

      // Authentication 'pinterest_oauth2' required
      // Authentication 'client_credentials' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Search user\&#39;s Pins
   * Search for pins for the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.  If using Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. See &lt;a href&#x3D;\&#39;/docs/getting-started/using-business-access/\&#39;&gt;Understanding Business Access&lt;/a&gt; for more information.
   * @param params.query Search query. Can contain pin description keywords or comma-separated pin IDs.
   * @param params.adAccountId Unique identifier of an ad account.
   * @param params.bookmark Cursor used to fetch the next page of items
   */
  async searchUserPinsList(params: ISearchUserPinsListParams): Promise<PinsList200Response> {
    // Verify required parameters are set
    this.ensureParamIsSet('searchUserPinsList', params, 'query');

    // Create URL to call
    const url = `${this.basePath}/search/pins`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'ad_account_id': params['adAccountId'],
        'query': params['query'],
        'bookmark': params['bookmark'],
      })

      // Authentication 'pinterest_oauth2' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

}

