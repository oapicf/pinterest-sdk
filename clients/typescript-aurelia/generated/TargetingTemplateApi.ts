/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { autoinject } from 'aurelia-framework';
import { HttpClient } from 'aurelia-http-client';
import { Api } from './Api';
import { AuthStorage } from './AuthStorage';
import {
  TargetingTemplateList200Response,
  TargetingTemplateUpdateRequest,
  TargetingTemplateGetResponseData,
  TargetingTemplateCreate,
} from './models';

/**
 * targetingTemplateCreate - parameters interface
 */
export interface ITargetingTemplateCreateParams {
  adAccountId: string;
  targetingTemplateCreate: TargetingTemplateCreate;
}

/**
 * targetingTemplateList - parameters interface
 */
export interface ITargetingTemplateListParams {
  adAccountId: string;
  order?: 'ASCENDING' | 'DESCENDING';
  includeSizing?: boolean;
  searchQuery?: string;
  pageSize?: number;
  bookmark?: string;
}

/**
 * targetingTemplateUpdate - parameters interface
 */
export interface ITargetingTemplateUpdateParams {
  adAccountId: string;
  targetingTemplateUpdateRequest: TargetingTemplateUpdateRequest;
}

/**
 * TargetingTemplateApi - API class
 */
@autoinject()
export class TargetingTemplateApi extends Api {

  /**
   * Creates a new TargetingTemplateApi class.
   *
   * @param httpClient The Aurelia HTTP client to be injected.
   * @param authStorage A storage for authentication data.
   */
  constructor(httpClient: HttpClient, authStorage: AuthStorage) {
    super(httpClient, authStorage);
  }

  /**
   * Create targeting templates
   * &lt;p&gt;Targeting templates allow advertisers to save a set of targeting details including audience lists,  keywords &amp; interest, demographics, and placements to use more than once during the campaign creation process.&lt;/p&gt;  &lt;p&gt;Templates can be used to build out basic targeting criteria that you plan to use across campaigns and to reuse   performance targeting from prior campaigns for new campaigns.&lt;/p&gt;
   * @param params.adAccountId Unique identifier of an ad account.
   * @param params.targetingTemplateCreate targeting template creation entity
   */
  async targetingTemplateCreate(params: ITargetingTemplateCreateParams): Promise<TargetingTemplateGetResponseData> {
    // Verify required parameters are set
    this.ensureParamIsSet('targetingTemplateCreate', params, 'adAccountId');
    this.ensureParamIsSet('targetingTemplateCreate', params, 'targetingTemplateCreate');

    // Create URL to call
    const url = `${this.basePath}/ad_accounts/{ad_account_id}/targeting_templates`
      .replace(`{${'ad_account_id'}}`, encodeURIComponent(`${params['adAccountId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['targetingTemplateCreate'] || {}))

      // Authentication 'pinterest_oauth2' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * List targeting templates
   * Get a list of the targeting templates in the specified &lt;code&gt;ad_account_id&lt;/code&gt;
   * @param params.adAccountId Unique identifier of an ad account.
   * @param params.order The order in which to sort the items returned: “ASCENDING” or “DESCENDING” by ID. Note that higher-value IDs are associated with more-recently added items.
   * @param params.includeSizing Include audience sizing in result or not
   * @param params.searchQuery Search keyword for targeting templates
   * @param params.pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;\&#39;/docs/reference/pagination/\&#39;&gt;Pagination&lt;/a&gt; for more information.
   * @param params.bookmark Cursor used to fetch the next page of items
   */
  async targetingTemplateList(params: ITargetingTemplateListParams): Promise<TargetingTemplateList200Response> {
    // Verify required parameters are set
    this.ensureParamIsSet('targetingTemplateList', params, 'adAccountId');

    // Create URL to call
    const url = `${this.basePath}/ad_accounts/{ad_account_id}/targeting_templates`
      .replace(`{${'ad_account_id'}}`, encodeURIComponent(`${params['adAccountId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'order': params['order'],
        'include_sizing': params['includeSizing'],
        'search_query': params['searchQuery'],
        'page_size': params['pageSize'],
        'bookmark': params['bookmark'],
      })

      // Authentication 'pinterest_oauth2' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Update targeting templates
   * &lt;p&gt;Update the targeting template given advertiser ID and targeting template ID&lt;/p&gt;
   * @param params.adAccountId Unique identifier of an ad account.
   * @param params.targetingTemplateUpdateRequest Operation type and targeting template ID
   */
  async targetingTemplateUpdate(params: ITargetingTemplateUpdateParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('targetingTemplateUpdate', params, 'adAccountId');
    this.ensureParamIsSet('targetingTemplateUpdate', params, 'targetingTemplateUpdateRequest');

    // Create URL to call
    const url = `${this.basePath}/ad_accounts/{ad_account_id}/targeting_templates`
      .replace(`{${'ad_account_id'}}`, encodeURIComponent(`${params['adAccountId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPatch()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['targetingTemplateUpdateRequest'] || {}))

      // Authentication 'pinterest_oauth2' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

}

