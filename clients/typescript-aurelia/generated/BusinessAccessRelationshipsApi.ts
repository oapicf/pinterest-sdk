/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { autoinject } from 'aurelia-framework';
import { HttpClient } from 'aurelia-http-client';
import { Api } from './Api';
import { AuthStorage } from './AuthStorage';
import {
  GetBusinessEmployers200Response,
  PartnerType,
  UpdateMemberResultsResponseArray,
  DeletePartnersRequest,
  GetBusinessPartners200Response,
  MembersToDeleteBody,
  GetBusinessMembers200Response,
  DeletePartnersResponse,
  DeletedMembersResponse,
} from './models';

/**
 * deleteBusinessMembership - parameters interface
 */
export interface IDeleteBusinessMembershipParams {
  businessId: string;
  membersToDeleteBody: MembersToDeleteBody;
}

/**
 * deleteBusinessPartners - parameters interface
 */
export interface IDeleteBusinessPartnersParams {
  businessId: string;
  deletePartnersRequest: DeletePartnersRequest;
}

/**
 * getBusinessEmployers - parameters interface
 */
export interface IGetBusinessEmployersParams {
  pageSize?: number;
  bookmark?: string;
}

/**
 * getBusinessMembers - parameters interface
 */
export interface IGetBusinessMembersParams {
  businessId: string;
  assetsSummary?: boolean;
  businessRoles?: Array<MemberBusinessRole>;
  memberIds?: string;
  startIndex?: number;
  bookmark?: string;
  pageSize?: number;
}

/**
 * getBusinessPartners - parameters interface
 */
export interface IGetBusinessPartnersParams {
  businessId: string;
  assetsSummary?: boolean;
  partnerType?: PartnerType;
  partnerIds?: string;
  startIndex?: number;
  pageSize?: number;
  bookmark?: string;
}

/**
 * updateBusinessMemberships - parameters interface
 */
export interface IUpdateBusinessMembershipsParams {
  businessId: string;
  updateMemberBusinessRoleBody: Array<UpdateMemberBusinessRoleBody>;
}

/**
 * BusinessAccessRelationshipsApi - API class
 */
@autoinject()
export class BusinessAccessRelationshipsApi extends Api {

  /**
   * Creates a new BusinessAccessRelationshipsApi class.
   *
   * @param httpClient The Aurelia HTTP client to be injected.
   * @param authStorage A storage for authentication data.
   */
  constructor(httpClient: HttpClient, authStorage: AuthStorage) {
    super(httpClient, authStorage);
  }

  /**
   * Terminate business memberships
   * Terminate memberships between the specified members and your business.
   * @param params.businessId Business id
   * @param params.membersToDeleteBody List of members with role to delete.
   */
  async deleteBusinessMembership(params: IDeleteBusinessMembershipParams): Promise<DeletedMembersResponse> {
    // Verify required parameters are set
    this.ensureParamIsSet('deleteBusinessMembership', params, 'businessId');
    this.ensureParamIsSet('deleteBusinessMembership', params, 'membersToDeleteBody');

    // Create URL to call
    const url = `${this.basePath}/businesses/{business_id}/members`
      .replace(`{${'business_id'}}`, encodeURIComponent(`${params['businessId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asDelete()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['membersToDeleteBody'] || {}))

      // Authentication 'pinterest_oauth2' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Terminate business partnerships
   * Terminate partnerships between the specified partners and your business. Note: You may only batch terminate partners of the same partner type.
   * @param params.businessId Unique identifier of the requesting business.
   * @param params.deletePartnersRequest An object containing a \&quot;partner_ids\&quot; property composed of a list of partner IDs and a \&quot;partners_type\&quot; property specifying the type of partners to delete. 
   */
  async deleteBusinessPartners(params: IDeleteBusinessPartnersParams): Promise<DeletePartnersResponse> {
    // Verify required parameters are set
    this.ensureParamIsSet('deleteBusinessPartners', params, 'businessId');
    this.ensureParamIsSet('deleteBusinessPartners', params, 'deletePartnersRequest');

    // Create URL to call
    const url = `${this.basePath}/businesses/{business_id}/partners`
      .replace(`{${'business_id'}}`, encodeURIComponent(`${params['businessId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asDelete()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['deletePartnersRequest'] || {}))

      // Authentication 'pinterest_oauth2' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * List business employers for user
   * Get all of the viewing user\&#39;s business employers.
   * @param params.pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;\&#39;/docs/reference/pagination/\&#39;&gt;Pagination&lt;/a&gt; for more information.
   * @param params.bookmark Cursor used to fetch the next page of items
   */
  async getBusinessEmployers(params: IGetBusinessEmployersParams): Promise<GetBusinessEmployers200Response> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/businesses/employers`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'page_size': params['pageSize'],
        'bookmark': params['bookmark'],
      })

      // Authentication 'pinterest_oauth2' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get business members
   * Get all members of the specified business. The return response will include the member\&#39;s business_role and assets they have access to if assets_summary&#x3D;TRUE
   * @param params.businessId Unique identifier of the requesting business.
   * @param params.assetsSummary Include assets summary in the response if this is true.  The assets summary returns a dictionary representing a summary of the assets for the business user ID, with information like the ad accounts and profiles the user has permissions for and what those permissions are
   * @param params.businessRoles A list of business roles to filter the members by. Only members whose roles are in the specified roles will be returned.
   * @param params.memberIds A list of business members ids separated by comma.
   * @param params.startIndex An index to start fetching the results from. Only the results starting from this index will be returned.
   * @param params.bookmark Cursor used to fetch the next page of items
   * @param params.pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;\&#39;/docs/reference/pagination/\&#39;&gt;Pagination&lt;/a&gt; for more information.
   */
  async getBusinessMembers(params: IGetBusinessMembersParams): Promise<GetBusinessMembers200Response> {
    // Verify required parameters are set
    this.ensureParamIsSet('getBusinessMembers', params, 'businessId');

    // Create URL to call
    const url = `${this.basePath}/businesses/{business_id}/members`
      .replace(`{${'business_id'}}`, encodeURIComponent(`${params['businessId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'assets_summary': params['assetsSummary'],
        'business_roles': params['businessRoles'],
        'member_ids': params['memberIds'],
        'start_index': params['startIndex'],
        'bookmark': params['bookmark'],
        'page_size': params['pageSize'],
      })

      // Authentication 'pinterest_oauth2' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get business partners
   * Get all partners of the specified business.  If the assets_summary&#x3D;TRUE and: - partner_type&#x3D;INTERNAL, the business assets returned are your business assets the partner has access to. - partner_type&#x3D;EXTERNAL, the business assets returned are your partner\&#39;s business assets the partner has granted you   access to.
   * @param params.businessId Unique identifier of the requesting business.
   * @param params.assetsSummary Include assets summary in the response if this is true.  The assets summary returns a dictionary representing a summary of the assets for the business user ID, with information like the ad accounts and profiles the user has permissions for and what those permissions are
   * @param params.partnerType Specifies whether to fetch internal or external (shared) partners. If partner_type&#x3D;INTERNAL, the asset being queried is for accesses the partner has to your business assets.&lt;br&gt; If partner_type&#x3D;EXTERNAL, the asset being queried is for the accesses you have to the partner\&#39;s business asset.
   * @param params.partnerIds A list of business partner ids separated by commas used to filter the results. Only partners with the specified ids will be returned.
   * @param params.startIndex An index to start fetching the results from. Only the results starting from this index will be returned.
   * @param params.pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;\&#39;/docs/reference/pagination/\&#39;&gt;Pagination&lt;/a&gt; for more information.
   * @param params.bookmark Cursor used to fetch the next page of items
   */
  async getBusinessPartners(params: IGetBusinessPartnersParams): Promise<GetBusinessPartners200Response> {
    // Verify required parameters are set
    this.ensureParamIsSet('getBusinessPartners', params, 'businessId');

    // Create URL to call
    const url = `${this.basePath}/businesses/{business_id}/partners`
      .replace(`{${'business_id'}}`, encodeURIComponent(`${params['businessId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'assets_summary': params['assetsSummary'],
        'partner_type': params['partnerType'],
        'partner_ids': params['partnerIds'],
        'start_index': params['startIndex'],
        'page_size': params['pageSize'],
        'bookmark': params['bookmark'],
      })

      // Authentication 'pinterest_oauth2' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Update member\&#39;s business role
   * Update a member\&#39;s business role within the business.
   * @param params.businessId Business id
   * @param params.updateMemberBusinessRoleBody List of objects with the member id and the business_role.
   */
  async updateBusinessMemberships(params: IUpdateBusinessMembershipsParams): Promise<UpdateMemberResultsResponseArray> {
    // Verify required parameters are set
    this.ensureParamIsSet('updateBusinessMemberships', params, 'businessId');
    this.ensureParamIsSet('updateBusinessMemberships', params, 'updateMemberBusinessRoleBody');

    // Create URL to call
    const url = `${this.basePath}/businesses/{business_id}/members`
      .replace(`{${'business_id'}}`, encodeURIComponent(`${params['businessId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPatch()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['updateMemberBusinessRoleBody'] || {}))

      // Authentication 'pinterest_oauth2' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

}

