/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
// uncomment below to import models
//using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing AdAccountsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class AdAccountsApiTests : IDisposable
    {
        private AdAccountsApi instance;

        public AdAccountsApiTests()
        {
            instance = new AdAccountsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of AdAccountsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' AdAccountsApi
            //Assert.IsType<AdAccountsApi>(instance);
        }

        /// <summary>
        /// Test AdAccountAnalytics
        /// </summary>
        [Fact]
        public void AdAccountAnalyticsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string adAccountId = null;
            //DateOnly startDate = null;
            //DateOnly endDate = null;
            //List<string> columns = null;
            //Granularity granularity = null;
            //int? clickWindowDays = null;
            //int? engagementWindowDays = null;
            //int? viewWindowDays = null;
            //string? conversionReportTime = null;
            //var response = instance.AdAccountAnalytics(adAccountId, startDate, endDate, columns, granularity, clickWindowDays, engagementWindowDays, viewWindowDays, conversionReportTime);
            //Assert.IsType<List<AdAccountAnalyticsResponseInner>>(response);
        }

        /// <summary>
        /// Test AdAccountTargetingAnalyticsGet
        /// </summary>
        [Fact]
        public void AdAccountTargetingAnalyticsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string adAccountId = null;
            //DateOnly startDate = null;
            //DateOnly endDate = null;
            //List<AdsAnalyticsTargetingType> targetingTypes = null;
            //List<string> columns = null;
            //Granularity granularity = null;
            //int? clickWindowDays = null;
            //int? engagementWindowDays = null;
            //int? viewWindowDays = null;
            //string? conversionReportTime = null;
            //ConversionReportAttributionType? attributionTypes = null;
            //var response = instance.AdAccountTargetingAnalyticsGet(adAccountId, startDate, endDate, targetingTypes, columns, granularity, clickWindowDays, engagementWindowDays, viewWindowDays, conversionReportTime, attributionTypes);
            //Assert.IsType<MetricsResponse>(response);
        }

        /// <summary>
        /// Test AdAccountsCreate
        /// </summary>
        [Fact]
        public void AdAccountsCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AdAccountCreateRequest adAccountCreateRequest = null;
            //var response = instance.AdAccountsCreate(adAccountCreateRequest);
            //Assert.IsType<AdAccount>(response);
        }

        /// <summary>
        /// Test AdAccountsGet
        /// </summary>
        [Fact]
        public void AdAccountsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string adAccountId = null;
            //var response = instance.AdAccountsGet(adAccountId);
            //Assert.IsType<AdAccount>(response);
        }

        /// <summary>
        /// Test AdAccountsList
        /// </summary>
        [Fact]
        public void AdAccountsListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string? bookmark = null;
            //int? pageSize = null;
            //bool? includeSharedAccounts = null;
            //var response = instance.AdAccountsList(bookmark, pageSize, includeSharedAccounts);
            //Assert.IsType<AdAccountsList200Response>(response);
        }

        /// <summary>
        /// Test AnalyticsCreateMmmReport
        /// </summary>
        [Fact]
        public void AnalyticsCreateMmmReportTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string adAccountId = null;
            //CreateMMMReportRequest createMMMReportRequest = null;
            //var response = instance.AnalyticsCreateMmmReport(adAccountId, createMMMReportRequest);
            //Assert.IsType<CreateMMMReportResponse>(response);
        }

        /// <summary>
        /// Test AnalyticsCreateReport
        /// </summary>
        [Fact]
        public void AnalyticsCreateReportTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string adAccountId = null;
            //AdsAnalyticsCreateAsyncRequest adsAnalyticsCreateAsyncRequest = null;
            //var response = instance.AnalyticsCreateReport(adAccountId, adsAnalyticsCreateAsyncRequest);
            //Assert.IsType<AdsAnalyticsCreateAsyncResponse>(response);
        }

        /// <summary>
        /// Test AnalyticsCreateTemplateReport
        /// </summary>
        [Fact]
        public void AnalyticsCreateTemplateReportTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string adAccountId = null;
            //string templateId = null;
            //DateOnly? startDate = null;
            //DateOnly? endDate = null;
            //Granularity? granularity = null;
            //var response = instance.AnalyticsCreateTemplateReport(adAccountId, templateId, startDate, endDate, granularity);
            //Assert.IsType<AdsAnalyticsCreateAsyncResponse>(response);
        }

        /// <summary>
        /// Test AnalyticsGetMmmReport
        /// </summary>
        [Fact]
        public void AnalyticsGetMmmReportTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string adAccountId = null;
            //string token = null;
            //var response = instance.AnalyticsGetMmmReport(adAccountId, token);
            //Assert.IsType<GetMMMReportResponse>(response);
        }

        /// <summary>
        /// Test AnalyticsGetReport
        /// </summary>
        [Fact]
        public void AnalyticsGetReportTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string adAccountId = null;
            //string token = null;
            //var response = instance.AnalyticsGetReport(adAccountId, token);
            //Assert.IsType<AdsAnalyticsGetAsyncResponse>(response);
        }

        /// <summary>
        /// Test SandboxDelete
        /// </summary>
        [Fact]
        public void SandboxDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string adAccountId = null;
            //var response = instance.SandboxDelete(adAccountId);
            //Assert.IsType<string>(response);
        }

        /// <summary>
        /// Test TemplatesList
        /// </summary>
        [Fact]
        public void TemplatesListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string adAccountId = null;
            //int? pageSize = null;
            //string? order = null;
            //string? bookmark = null;
            //var response = instance.TemplatesList(adAccountId, pageSize, order, bookmark);
            //Assert.IsType<TemplatesList200Response>(response);
        }
    }
}
