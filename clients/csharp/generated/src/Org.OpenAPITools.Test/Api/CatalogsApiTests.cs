/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
// uncomment below to import models
//using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing CatalogsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class CatalogsApiTests : IDisposable
    {
        private CatalogsApi instance;

        public CatalogsApiTests()
        {
            instance = new CatalogsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of CatalogsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' CatalogsApi
            //Assert.IsType<CatalogsApi>(instance);
        }

        /// <summary>
        /// Test CatalogsCreate
        /// </summary>
        [Fact]
        public void CatalogsCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CatalogsCreateRequest catalogsCreateRequest = null;
            //string? adAccountId = null;
            //var response = instance.CatalogsCreate(catalogsCreateRequest, adAccountId);
            //Assert.IsType<Catalog>(response);
        }

        /// <summary>
        /// Test CatalogsList
        /// </summary>
        [Fact]
        public void CatalogsListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string? bookmark = null;
            //int? pageSize = null;
            //string? adAccountId = null;
            //var response = instance.CatalogsList(bookmark, pageSize, adAccountId);
            //Assert.IsType<CatalogsList200Response>(response);
        }

        /// <summary>
        /// Test CatalogsProductGroupPinsList
        /// </summary>
        [Fact]
        public void CatalogsProductGroupPinsListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string productGroupId = null;
            //string? bookmark = null;
            //int? pageSize = null;
            //string? adAccountId = null;
            //bool? pinMetrics = null;
            //var response = instance.CatalogsProductGroupPinsList(productGroupId, bookmark, pageSize, adAccountId, pinMetrics);
            //Assert.IsType<CatalogsProductGroupPinsList200Response>(response);
        }

        /// <summary>
        /// Test CatalogsProductGroupsCreate
        /// </summary>
        [Fact]
        public void CatalogsProductGroupsCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //MultipleProductGroupsInner multipleProductGroupsInner = null;
            //string? adAccountId = null;
            //var response = instance.CatalogsProductGroupsCreate(multipleProductGroupsInner, adAccountId);
            //Assert.IsType<CatalogsVerticalProductGroup>(response);
        }

        /// <summary>
        /// Test CatalogsProductGroupsCreateMany
        /// </summary>
        [Fact]
        public void CatalogsProductGroupsCreateManyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<MultipleProductGroupsInner> multipleProductGroupsInner = null;
            //string? adAccountId = null;
            //var response = instance.CatalogsProductGroupsCreateMany(multipleProductGroupsInner, adAccountId);
            //Assert.IsType<List<string>>(response);
        }

        /// <summary>
        /// Test CatalogsProductGroupsDelete
        /// </summary>
        [Fact]
        public void CatalogsProductGroupsDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string productGroupId = null;
            //string? adAccountId = null;
            //instance.CatalogsProductGroupsDelete(productGroupId, adAccountId);
        }

        /// <summary>
        /// Test CatalogsProductGroupsDeleteMany
        /// </summary>
        [Fact]
        public void CatalogsProductGroupsDeleteManyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<int> id = null;
            //string? adAccountId = null;
            //instance.CatalogsProductGroupsDeleteMany(id, adAccountId);
        }

        /// <summary>
        /// Test CatalogsProductGroupsGet
        /// </summary>
        [Fact]
        public void CatalogsProductGroupsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string productGroupId = null;
            //string? adAccountId = null;
            //var response = instance.CatalogsProductGroupsGet(productGroupId, adAccountId);
            //Assert.IsType<CatalogsVerticalProductGroup>(response);
        }

        /// <summary>
        /// Test CatalogsProductGroupsList
        /// </summary>
        [Fact]
        public void CatalogsProductGroupsListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<int>? id = null;
            //string? feedId = null;
            //string? catalogId = null;
            //string? bookmark = null;
            //int? pageSize = null;
            //string? adAccountId = null;
            //var response = instance.CatalogsProductGroupsList(id, feedId, catalogId, bookmark, pageSize, adAccountId);
            //Assert.IsType<CatalogsProductGroupsList200Response>(response);
        }

        /// <summary>
        /// Test CatalogsProductGroupsProductCountsGet
        /// </summary>
        [Fact]
        public void CatalogsProductGroupsProductCountsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string productGroupId = null;
            //string? adAccountId = null;
            //var response = instance.CatalogsProductGroupsProductCountsGet(productGroupId, adAccountId);
            //Assert.IsType<CatalogsProductGroupProductCountsVertical>(response);
        }

        /// <summary>
        /// Test CatalogsProductGroupsUpdate
        /// </summary>
        [Fact]
        public void CatalogsProductGroupsUpdateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string productGroupId = null;
            //CatalogsProductGroupsUpdateRequest catalogsProductGroupsUpdateRequest = null;
            //string? adAccountId = null;
            //var response = instance.CatalogsProductGroupsUpdate(productGroupId, catalogsProductGroupsUpdateRequest, adAccountId);
            //Assert.IsType<CatalogsVerticalProductGroup>(response);
        }

        /// <summary>
        /// Test FeedProcessingResultsList
        /// </summary>
        [Fact]
        public void FeedProcessingResultsListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string feedId = null;
            //string? bookmark = null;
            //int? pageSize = null;
            //string? adAccountId = null;
            //var response = instance.FeedProcessingResultsList(feedId, bookmark, pageSize, adAccountId);
            //Assert.IsType<FeedProcessingResultsList200Response>(response);
        }

        /// <summary>
        /// Test FeedsCreate
        /// </summary>
        [Fact]
        public void FeedsCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //FeedsCreateRequest feedsCreateRequest = null;
            //string? adAccountId = null;
            //var response = instance.FeedsCreate(feedsCreateRequest, adAccountId);
            //Assert.IsType<CatalogsFeed>(response);
        }

        /// <summary>
        /// Test FeedsDelete
        /// </summary>
        [Fact]
        public void FeedsDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string feedId = null;
            //string? adAccountId = null;
            //instance.FeedsDelete(feedId, adAccountId);
        }

        /// <summary>
        /// Test FeedsGet
        /// </summary>
        [Fact]
        public void FeedsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string feedId = null;
            //string? adAccountId = null;
            //var response = instance.FeedsGet(feedId, adAccountId);
            //Assert.IsType<CatalogsFeed>(response);
        }

        /// <summary>
        /// Test FeedsIngest
        /// </summary>
        [Fact]
        public void FeedsIngestTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string feedId = null;
            //string? adAccountId = null;
            //var response = instance.FeedsIngest(feedId, adAccountId);
            //Assert.IsType<CatalogsFeedIngestion>(response);
        }

        /// <summary>
        /// Test FeedsList
        /// </summary>
        [Fact]
        public void FeedsListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string? bookmark = null;
            //int? pageSize = null;
            //string? catalogId = null;
            //string? adAccountId = null;
            //var response = instance.FeedsList(bookmark, pageSize, catalogId, adAccountId);
            //Assert.IsType<FeedsList200Response>(response);
        }

        /// <summary>
        /// Test FeedsUpdate
        /// </summary>
        [Fact]
        public void FeedsUpdateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string feedId = null;
            //FeedsUpdateRequest feedsUpdateRequest = null;
            //string? adAccountId = null;
            //var response = instance.FeedsUpdate(feedId, feedsUpdateRequest, adAccountId);
            //Assert.IsType<CatalogsFeed>(response);
        }

        /// <summary>
        /// Test ItemsBatchGet
        /// </summary>
        [Fact]
        public void ItemsBatchGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string batchId = null;
            //string? adAccountId = null;
            //var response = instance.ItemsBatchGet(batchId, adAccountId);
            //Assert.IsType<CatalogsItemsBatch>(response);
        }

        /// <summary>
        /// Test ItemsBatchPost
        /// </summary>
        [Fact]
        public void ItemsBatchPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ItemsBatchPostRequest itemsBatchPostRequest = null;
            //string? adAccountId = null;
            //var response = instance.ItemsBatchPost(itemsBatchPostRequest, adAccountId);
            //Assert.IsType<CatalogsItemsBatch>(response);
        }

        /// <summary>
        /// Test ItemsGet
        /// </summary>
        [Fact]
        public void ItemsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string country = null;
            //string language = null;
            //string? adAccountId = null;
            //List<string>? itemIds = null;
            //CatalogsItemsFilters? filters = null;
            //var response = instance.ItemsGet(country, language, adAccountId, itemIds, filters);
            //Assert.IsType<CatalogsItems>(response);
        }

        /// <summary>
        /// Test ItemsIssuesList
        /// </summary>
        [Fact]
        public void ItemsIssuesListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string processingResultId = null;
            //string? bookmark = null;
            //int? pageSize = null;
            //List<int>? itemNumbers = null;
            //CatalogsItemValidationIssue? itemValidationIssue = null;
            //string? adAccountId = null;
            //var response = instance.ItemsIssuesList(processingResultId, bookmark, pageSize, itemNumbers, itemValidationIssue, adAccountId);
            //Assert.IsType<ItemsIssuesList200Response>(response);
        }

        /// <summary>
        /// Test ItemsPost
        /// </summary>
        [Fact]
        public void ItemsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CatalogsItemsRequest catalogsItemsRequest = null;
            //string? adAccountId = null;
            //var response = instance.ItemsPost(catalogsItemsRequest, adAccountId);
            //Assert.IsType<CatalogsItems>(response);
        }

        /// <summary>
        /// Test ProductsByProductGroupFilterList
        /// </summary>
        [Fact]
        public void ProductsByProductGroupFilterListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CatalogsListProductsByFilterRequest catalogsListProductsByFilterRequest = null;
            //string? bookmark = null;
            //int? pageSize = null;
            //string? adAccountId = null;
            //bool? pinMetrics = null;
            //var response = instance.ProductsByProductGroupFilterList(catalogsListProductsByFilterRequest, bookmark, pageSize, adAccountId, pinMetrics);
            //Assert.IsType<CatalogsProductGroupPinsList200Response>(response);
        }

        /// <summary>
        /// Test ReportsCreate
        /// </summary>
        [Fact]
        public void ReportsCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CatalogsReportParameters catalogsReportParameters = null;
            //string? adAccountId = null;
            //var response = instance.ReportsCreate(catalogsReportParameters, adAccountId);
            //Assert.IsType<CatalogsCreateReportResponse>(response);
        }

        /// <summary>
        /// Test ReportsGet
        /// </summary>
        [Fact]
        public void ReportsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string token = null;
            //string? adAccountId = null;
            //var response = instance.ReportsGet(token, adAccountId);
            //Assert.IsType<CatalogsReport>(response);
        }

        /// <summary>
        /// Test ReportsStats
        /// </summary>
        [Fact]
        public void ReportsStatsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CatalogsReportParameters parameters = null;
            //string? adAccountId = null;
            //int? pageSize = null;
            //string? bookmark = null;
            //var response = instance.ReportsStats(parameters, adAccountId, pageSize, bookmark);
            //Assert.IsType<ReportsStats200Response>(response);
        }
    }
}
