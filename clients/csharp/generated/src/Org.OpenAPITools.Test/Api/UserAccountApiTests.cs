/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
// uncomment below to import models
//using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing UserAccountApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class UserAccountApiTests : IDisposable
    {
        private UserAccountApi instance;

        public UserAccountApiTests()
        {
            instance = new UserAccountApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of UserAccountApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' UserAccountApi
            //Assert.IsType<UserAccountApi>(instance);
        }

        /// <summary>
        /// Test BoardsUserFollowsList
        /// </summary>
        [Fact]
        public void BoardsUserFollowsListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string? bookmark = null;
            //int? pageSize = null;
            //bool? explicitFollowing = null;
            //string? adAccountId = null;
            //var response = instance.BoardsUserFollowsList(bookmark, pageSize, explicitFollowing, adAccountId);
            //Assert.IsType<BoardsUserFollowsList200Response>(response);
        }

        /// <summary>
        /// Test FollowUserUpdate
        /// </summary>
        [Fact]
        public void FollowUserUpdateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //FollowUserRequest followUserRequest = null;
            //var response = instance.FollowUserUpdate(username, followUserRequest);
            //Assert.IsType<UserSummary>(response);
        }

        /// <summary>
        /// Test FollowersList
        /// </summary>
        [Fact]
        public void FollowersListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string? bookmark = null;
            //int? pageSize = null;
            //var response = instance.FollowersList(bookmark, pageSize);
            //Assert.IsType<FollowersList200Response>(response);
        }

        /// <summary>
        /// Test LinkedBusinessAccountsGet
        /// </summary>
        [Fact]
        public void LinkedBusinessAccountsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.LinkedBusinessAccountsGet();
            //Assert.IsType<List<LinkedBusiness>>(response);
        }

        /// <summary>
        /// Test UnverifyWebsiteDelete
        /// </summary>
        [Fact]
        public void UnverifyWebsiteDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string website = null;
            //instance.UnverifyWebsiteDelete(website);
        }

        /// <summary>
        /// Test UserAccountAnalytics
        /// </summary>
        [Fact]
        public void UserAccountAnalyticsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DateOnly startDate = null;
            //DateOnly endDate = null;
            //string? fromClaimedContent = null;
            //string? pinFormat = null;
            //string? appTypes = null;
            //string? contentType = null;
            //string? source = null;
            //List<string>? metricTypes = null;
            //string? splitField = null;
            //string? adAccountId = null;
            //var response = instance.UserAccountAnalytics(startDate, endDate, fromClaimedContent, pinFormat, appTypes, contentType, source, metricTypes, splitField, adAccountId);
            //Assert.IsType<Dictionary<string, AnalyticsMetricsResponse>>(response);
        }

        /// <summary>
        /// Test UserAccountAnalyticsTopPins
        /// </summary>
        [Fact]
        public void UserAccountAnalyticsTopPinsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DateOnly startDate = null;
            //DateOnly endDate = null;
            //string sortBy = null;
            //string? fromClaimedContent = null;
            //string? pinFormat = null;
            //string? appTypes = null;
            //string? contentType = null;
            //string? source = null;
            //List<string>? metricTypes = null;
            //int? numOfPins = null;
            //int? createdInLastNDays = null;
            //string? adAccountId = null;
            //var response = instance.UserAccountAnalyticsTopPins(startDate, endDate, sortBy, fromClaimedContent, pinFormat, appTypes, contentType, source, metricTypes, numOfPins, createdInLastNDays, adAccountId);
            //Assert.IsType<TopPinsAnalyticsResponse>(response);
        }

        /// <summary>
        /// Test UserAccountAnalyticsTopVideoPins
        /// </summary>
        [Fact]
        public void UserAccountAnalyticsTopVideoPinsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DateOnly startDate = null;
            //DateOnly endDate = null;
            //string sortBy = null;
            //string? fromClaimedContent = null;
            //string? pinFormat = null;
            //string? appTypes = null;
            //string? contentType = null;
            //string? source = null;
            //List<string>? metricTypes = null;
            //int? numOfPins = null;
            //int? createdInLastNDays = null;
            //string? adAccountId = null;
            //var response = instance.UserAccountAnalyticsTopVideoPins(startDate, endDate, sortBy, fromClaimedContent, pinFormat, appTypes, contentType, source, metricTypes, numOfPins, createdInLastNDays, adAccountId);
            //Assert.IsType<TopVideoPinsAnalyticsResponse>(response);
        }

        /// <summary>
        /// Test UserAccountFollowedInterests
        /// </summary>
        [Fact]
        public void UserAccountFollowedInterestsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //string? bookmark = null;
            //int? pageSize = null;
            //var response = instance.UserAccountFollowedInterests(username, bookmark, pageSize);
            //Assert.IsType<UserAccountFollowedInterests200Response>(response);
        }

        /// <summary>
        /// Test UserAccountGet
        /// </summary>
        [Fact]
        public void UserAccountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string? adAccountId = null;
            //var response = instance.UserAccountGet(adAccountId);
            //Assert.IsType<Account>(response);
        }

        /// <summary>
        /// Test UserFollowingGet
        /// </summary>
        [Fact]
        public void UserFollowingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string? bookmark = null;
            //int? pageSize = null;
            //UserFollowingFeedType? feedType = null;
            //bool? explicitFollowing = null;
            //string? adAccountId = null;
            //var response = instance.UserFollowingGet(bookmark, pageSize, feedType, explicitFollowing, adAccountId);
            //Assert.IsType<UserFollowingGet200Response>(response);
        }

        /// <summary>
        /// Test UserWebsitesGet
        /// </summary>
        [Fact]
        public void UserWebsitesGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string? bookmark = null;
            //int? pageSize = null;
            //var response = instance.UserWebsitesGet(bookmark, pageSize);
            //Assert.IsType<UserWebsitesGet200Response>(response);
        }

        /// <summary>
        /// Test VerifyWebsiteUpdate
        /// </summary>
        [Fact]
        public void VerifyWebsiteUpdateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UserWebsiteVerifyRequest userWebsiteVerifyRequest = null;
            //string? adAccountId = null;
            //var response = instance.VerifyWebsiteUpdate(userWebsiteVerifyRequest, adAccountId);
            //Assert.IsType<UserWebsiteSummary>(response);
        }

        /// <summary>
        /// Test WebsiteVerificationGet
        /// </summary>
        [Fact]
        public void WebsiteVerificationGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string? adAccountId = null;
            //var response = instance.WebsiteVerificationGet(adAccountId);
            //Assert.IsType<UserWebsiteVerificationCode>(response);
        }
    }
}
