/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
// uncomment below to import models
//using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing BusinessAccessInviteApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class BusinessAccessInviteApiTests : IDisposable
    {
        private BusinessAccessInviteApi instance;

        public BusinessAccessInviteApiTests()
        {
            instance = new BusinessAccessInviteApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of BusinessAccessInviteApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' BusinessAccessInviteApi
            //Assert.IsType<BusinessAccessInviteApi>(instance);
        }

        /// <summary>
        /// Test AssetAccessRequestsCreate
        /// </summary>
        [Fact]
        public void AssetAccessRequestsCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string businessId = null;
            //CreateAssetAccessRequestBody createAssetAccessRequestBody = null;
            //var response = instance.AssetAccessRequestsCreate(businessId, createAssetAccessRequestBody);
            //Assert.IsType<CreateAssetAccessRequestResponse>(response);
        }

        /// <summary>
        /// Test CancelInvitesOrRequests
        /// </summary>
        [Fact]
        public void CancelInvitesOrRequestsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string businessId = null;
            //CancelInvitesBody cancelInvitesBody = null;
            //var response = instance.CancelInvitesOrRequests(businessId, cancelInvitesBody);
            //Assert.IsType<DeleteInvitesResultsResponseArray>(response);
        }

        /// <summary>
        /// Test CreateAssetInvites
        /// </summary>
        [Fact]
        public void CreateAssetInvitesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string businessId = null;
            //CreateAssetInvitesRequest createAssetInvitesRequest = null;
            //var response = instance.CreateAssetInvites(businessId, createAssetInvitesRequest);
            //Assert.IsType<UpdateInvitesResultsResponseArray>(response);
        }

        /// <summary>
        /// Test CreateMembershipOrPartnershipInvites
        /// </summary>
        [Fact]
        public void CreateMembershipOrPartnershipInvitesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string businessId = null;
            //CreateMembershipOrPartnershipInvitesBody createMembershipOrPartnershipInvitesBody = null;
            //var response = instance.CreateMembershipOrPartnershipInvites(businessId, createMembershipOrPartnershipInvitesBody);
            //Assert.IsType<CreateInvitesResultsResponseArray>(response);
        }

        /// <summary>
        /// Test GetInvites
        /// </summary>
        [Fact]
        public void GetInvitesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string businessId = null;
            //bool? isMember = null;
            //List<string>? inviteStatus = null;
            //InviteType? inviteType = null;
            //string? bookmark = null;
            //int? pageSize = null;
            //var response = instance.GetInvites(businessId, isMember, inviteStatus, inviteType, bookmark, pageSize);
            //Assert.IsType<GetInvites200Response>(response);
        }

        /// <summary>
        /// Test RespondBusinessAccessInvites
        /// </summary>
        [Fact]
        public void RespondBusinessAccessInvitesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AuthRespondInvitesBody authRespondInvitesBody = null;
            //var response = instance.RespondBusinessAccessInvites(authRespondInvitesBody);
            //Assert.IsType<RespondToInvitesResponseArray>(response);
        }
    }
}
