/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
// uncomment below to import models
//using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing PinsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class PinsApiTests : IDisposable
    {
        private PinsApi instance;

        public PinsApiTests()
        {
            instance = new PinsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of PinsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' PinsApi
            //Assert.IsType<PinsApi>(instance);
        }

        /// <summary>
        /// Test MultiPinsAnalytics
        /// </summary>
        [Fact]
        public void MultiPinsAnalyticsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<string> pinIds = null;
            //DateOnly startDate = null;
            //DateOnly endDate = null;
            //List<PinsAnalyticsMetricTypesParameterInner> metricTypes = null;
            //string? appTypes = null;
            //string? adAccountId = null;
            //var response = instance.MultiPinsAnalytics(pinIds, startDate, endDate, metricTypes, appTypes, adAccountId);
            //Assert.IsType<Dictionary<string, Dictionary<string, PinAnalyticsMetricsResponse>>>(response);
        }

        /// <summary>
        /// Test PinsAnalytics
        /// </summary>
        [Fact]
        public void PinsAnalyticsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pinId = null;
            //DateOnly startDate = null;
            //DateOnly endDate = null;
            //List<PinsAnalyticsMetricTypesParameterInner> metricTypes = null;
            //string? appTypes = null;
            //string? splitField = null;
            //string? adAccountId = null;
            //var response = instance.PinsAnalytics(pinId, startDate, endDate, metricTypes, appTypes, splitField, adAccountId);
            //Assert.IsType<Dictionary<string, PinAnalyticsMetricsResponse>>(response);
        }

        /// <summary>
        /// Test PinsCreate
        /// </summary>
        [Fact]
        public void PinsCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //PinCreate pinCreate = null;
            //string? adAccountId = null;
            //var response = instance.PinsCreate(pinCreate, adAccountId);
            //Assert.IsType<Pin>(response);
        }

        /// <summary>
        /// Test PinsDelete
        /// </summary>
        [Fact]
        public void PinsDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pinId = null;
            //string? adAccountId = null;
            //instance.PinsDelete(pinId, adAccountId);
        }

        /// <summary>
        /// Test PinsGet
        /// </summary>
        [Fact]
        public void PinsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pinId = null;
            //bool? pinMetrics = null;
            //string? adAccountId = null;
            //var response = instance.PinsGet(pinId, pinMetrics, adAccountId);
            //Assert.IsType<Pin>(response);
        }

        /// <summary>
        /// Test PinsList
        /// </summary>
        [Fact]
        public void PinsListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string? bookmark = null;
            //int? pageSize = null;
            //string? pinFilter = null;
            //bool? includeProtectedPins = null;
            //string? pinType = null;
            //List<string>? creativeTypes = null;
            //string? adAccountId = null;
            //bool? pinMetrics = null;
            //var response = instance.PinsList(bookmark, pageSize, pinFilter, includeProtectedPins, pinType, creativeTypes, adAccountId, pinMetrics);
            //Assert.IsType<PinsList200Response>(response);
        }

        /// <summary>
        /// Test PinsSave
        /// </summary>
        [Fact]
        public void PinsSaveTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pinId = null;
            //PinsSaveRequest pinsSaveRequest = null;
            //string? adAccountId = null;
            //var response = instance.PinsSave(pinId, pinsSaveRequest, adAccountId);
            //Assert.IsType<Pin>(response);
        }

        /// <summary>
        /// Test PinsUpdate
        /// </summary>
        [Fact]
        public void PinsUpdateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pinId = null;
            //PinUpdate pinUpdate = null;
            //string? adAccountId = null;
            //var response = instance.PinsUpdate(pinId, pinUpdate, adAccountId);
            //Assert.IsType<Pin>(response);
        }
    }
}
