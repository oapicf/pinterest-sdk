/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Client.Auth;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBusinessAccessInviteApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a request to access an existing partner&#39;s assets.
        /// </summary>
        /// <remarks>
        /// Create a request to access an existing partner&#39;s assets with the specified permissions. The request will be sent to the partner for approval. The assets that can be requested are ad accounts and profiles.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="createAssetAccessRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateAssetAccessRequestResponse</returns>
        CreateAssetAccessRequestResponse AssetAccessRequestsCreate(string businessId, CreateAssetAccessRequestBody createAssetAccessRequestBody, int operationIndex = 0);

        /// <summary>
        /// Create a request to access an existing partner&#39;s assets.
        /// </summary>
        /// <remarks>
        /// Create a request to access an existing partner&#39;s assets with the specified permissions. The request will be sent to the partner for approval. The assets that can be requested are ad accounts and profiles.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="createAssetAccessRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateAssetAccessRequestResponse</returns>
        ApiResponse<CreateAssetAccessRequestResponse> AssetAccessRequestsCreateWithHttpInfo(string businessId, CreateAssetAccessRequestBody createAssetAccessRequestBody, int operationIndex = 0);
        /// <summary>
        /// Cancel invites/requests
        /// </summary>
        /// <remarks>
        /// Cancel membership/partnership invites and/or requests.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Business id</param>
        /// <param name="cancelInvitesBody">A list with invite ids</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeleteInvitesResultsResponseArray</returns>
        DeleteInvitesResultsResponseArray CancelInvitesOrRequests(string businessId, CancelInvitesBody cancelInvitesBody, int operationIndex = 0);

        /// <summary>
        /// Cancel invites/requests
        /// </summary>
        /// <remarks>
        /// Cancel membership/partnership invites and/or requests.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Business id</param>
        /// <param name="cancelInvitesBody">A list with invite ids</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeleteInvitesResultsResponseArray</returns>
        ApiResponse<DeleteInvitesResultsResponseArray> CancelInvitesOrRequestsWithHttpInfo(string businessId, CancelInvitesBody cancelInvitesBody, int operationIndex = 0);
        /// <summary>
        /// Update invite/request with an asset permission
        /// </summary>
        /// <remarks>
        /// Assign asset permissions information to an existing invite/request. Can be used to: - Request access to a partner&#39;s asset. Note: This is only for when no existing partnership exists. If an existing   partnership exists, use \&quot;Create a request to access an existing partner&#39;s assets\&quot; to request access to your   partner&#39;s assets.     - invite_type&#x3D;\&quot;PARTNER_REQUEST\&quot; - Invite a partner to access your business assets. Note: This is only for when there is no existing partnership.   If there is an existing partnership, use \&quot;Assign/Update partner asset permissions\&quot; to assign a partner access to   new assets.     - invite_type&#x3D;\&quot;PARTNER_INVITE\&quot; - Invite a member to access your business assets. Note: This is only for when there is no existing membership.   If there is an existing membership, use \&quot;Assign/Update member asset permissions\&quot; to assign a member access to new   assets.     - invite_type&#x3D;\&quot;MEMBER_INVITE\&quot;  To learn more about permission levels, visit https://help.pinterest.com/en/business/article/business-manager-overview.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="createAssetInvitesRequest">A list of invites/requests together with the asset permissions to be assigned to the invite/request. </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UpdateInvitesResultsResponseArray</returns>
        UpdateInvitesResultsResponseArray CreateAssetInvites(string businessId, CreateAssetInvitesRequest createAssetInvitesRequest, int operationIndex = 0);

        /// <summary>
        /// Update invite/request with an asset permission
        /// </summary>
        /// <remarks>
        /// Assign asset permissions information to an existing invite/request. Can be used to: - Request access to a partner&#39;s asset. Note: This is only for when no existing partnership exists. If an existing   partnership exists, use \&quot;Create a request to access an existing partner&#39;s assets\&quot; to request access to your   partner&#39;s assets.     - invite_type&#x3D;\&quot;PARTNER_REQUEST\&quot; - Invite a partner to access your business assets. Note: This is only for when there is no existing partnership.   If there is an existing partnership, use \&quot;Assign/Update partner asset permissions\&quot; to assign a partner access to   new assets.     - invite_type&#x3D;\&quot;PARTNER_INVITE\&quot; - Invite a member to access your business assets. Note: This is only for when there is no existing membership.   If there is an existing membership, use \&quot;Assign/Update member asset permissions\&quot; to assign a member access to new   assets.     - invite_type&#x3D;\&quot;MEMBER_INVITE\&quot;  To learn more about permission levels, visit https://help.pinterest.com/en/business/article/business-manager-overview.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="createAssetInvitesRequest">A list of invites/requests together with the asset permissions to be assigned to the invite/request. </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UpdateInvitesResultsResponseArray</returns>
        ApiResponse<UpdateInvitesResultsResponseArray> CreateAssetInvitesWithHttpInfo(string businessId, CreateAssetInvitesRequest createAssetInvitesRequest, int operationIndex = 0);
        /// <summary>
        /// Create invites or requests
        /// </summary>
        /// <remarks>
        /// Create batch invites or requests. Can create batch invites or requests as described below. - Invite members to join the business. This would required specifying the following:     - invite_type&#x3D;\&quot;MEMBER_INVITE\&quot;     - business_role&#x3D;\&quot;EMPLOYEE\&quot; OR business_role&#x3D;\&quot;BIZ_ADMIN\&quot; (To learn more about business roles, visit     https://help.pinterest.com/en/business/article/profile-permissions-in-business-access.)     - members - Invite partners to access your business assets. This would require specifying the following:     - invite_type&#x3D;\&quot;PARTNER_INVITE\&quot;     - business_role&#x3D;\&quot;PARTNER\&quot;     - partners - Request to be a partner so you can access their assets. This would require specifying the following:     - invite_type&#x3D;\&quot;PARTNER_REQUEST\&quot;     - business_role&#x3D;\&quot;PARTNER\&quot;     - partners
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Business id</param>
        /// <param name="createMembershipOrPartnershipInvitesBody">An object with the properties: invite_type, partners, members, business_role</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateInvitesResultsResponseArray</returns>
        CreateInvitesResultsResponseArray CreateMembershipOrPartnershipInvites(string businessId, CreateMembershipOrPartnershipInvitesBody createMembershipOrPartnershipInvitesBody, int operationIndex = 0);

        /// <summary>
        /// Create invites or requests
        /// </summary>
        /// <remarks>
        /// Create batch invites or requests. Can create batch invites or requests as described below. - Invite members to join the business. This would required specifying the following:     - invite_type&#x3D;\&quot;MEMBER_INVITE\&quot;     - business_role&#x3D;\&quot;EMPLOYEE\&quot; OR business_role&#x3D;\&quot;BIZ_ADMIN\&quot; (To learn more about business roles, visit     https://help.pinterest.com/en/business/article/profile-permissions-in-business-access.)     - members - Invite partners to access your business assets. This would require specifying the following:     - invite_type&#x3D;\&quot;PARTNER_INVITE\&quot;     - business_role&#x3D;\&quot;PARTNER\&quot;     - partners - Request to be a partner so you can access their assets. This would require specifying the following:     - invite_type&#x3D;\&quot;PARTNER_REQUEST\&quot;     - business_role&#x3D;\&quot;PARTNER\&quot;     - partners
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Business id</param>
        /// <param name="createMembershipOrPartnershipInvitesBody">An object with the properties: invite_type, partners, members, business_role</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateInvitesResultsResponseArray</returns>
        ApiResponse<CreateInvitesResultsResponseArray> CreateMembershipOrPartnershipInvitesWithHttpInfo(string businessId, CreateMembershipOrPartnershipInvitesBody createMembershipOrPartnershipInvitesBody, int operationIndex = 0);
        /// <summary>
        /// Get invites/requests
        /// </summary>
        /// <remarks>
        /// Get the membership/partnership invites and/or requests for the authorized user.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="isMember">A boolean field to indicate whether the invite is to create a partnership or a membership. (optional, default to true)</param>
        /// <param name="inviteStatus">A list of invite statuses to filter invites by. Only invites whose status is in the provided statuses will be returned. (optional)</param>
        /// <param name="inviteType">Invite type to filter invites by. Only invites of the specified type will be returned. (optional)</param>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetInvites200Response</returns>
        GetInvites200Response GetInvites(string businessId, bool? isMember = default(bool?), List<string>? inviteStatus = default(List<string>?), InviteType? inviteType = default(InviteType?), string? bookmark = default(string?), int? pageSize = default(int?), int operationIndex = 0);

        /// <summary>
        /// Get invites/requests
        /// </summary>
        /// <remarks>
        /// Get the membership/partnership invites and/or requests for the authorized user.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="isMember">A boolean field to indicate whether the invite is to create a partnership or a membership. (optional, default to true)</param>
        /// <param name="inviteStatus">A list of invite statuses to filter invites by. Only invites whose status is in the provided statuses will be returned. (optional)</param>
        /// <param name="inviteType">Invite type to filter invites by. Only invites of the specified type will be returned. (optional)</param>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetInvites200Response</returns>
        ApiResponse<GetInvites200Response> GetInvitesWithHttpInfo(string businessId, bool? isMember = default(bool?), List<string>? inviteStatus = default(List<string>?), InviteType? inviteType = default(InviteType?), string? bookmark = default(string?), int? pageSize = default(int?), int operationIndex = 0);
        /// <summary>
        /// Accept or decline an invite/request
        /// </summary>
        /// <remarks>
        /// Accept or decline invites or requests.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authRespondInvitesBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RespondToInvitesResponseArray</returns>
        RespondToInvitesResponseArray RespondBusinessAccessInvites(AuthRespondInvitesBody authRespondInvitesBody, int operationIndex = 0);

        /// <summary>
        /// Accept or decline an invite/request
        /// </summary>
        /// <remarks>
        /// Accept or decline invites or requests.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authRespondInvitesBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RespondToInvitesResponseArray</returns>
        ApiResponse<RespondToInvitesResponseArray> RespondBusinessAccessInvitesWithHttpInfo(AuthRespondInvitesBody authRespondInvitesBody, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBusinessAccessInviteApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create a request to access an existing partner&#39;s assets.
        /// </summary>
        /// <remarks>
        /// Create a request to access an existing partner&#39;s assets with the specified permissions. The request will be sent to the partner for approval. The assets that can be requested are ad accounts and profiles.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="createAssetAccessRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateAssetAccessRequestResponse</returns>
        System.Threading.Tasks.Task<CreateAssetAccessRequestResponse> AssetAccessRequestsCreateAsync(string businessId, CreateAssetAccessRequestBody createAssetAccessRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create a request to access an existing partner&#39;s assets.
        /// </summary>
        /// <remarks>
        /// Create a request to access an existing partner&#39;s assets with the specified permissions. The request will be sent to the partner for approval. The assets that can be requested are ad accounts and profiles.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="createAssetAccessRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateAssetAccessRequestResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateAssetAccessRequestResponse>> AssetAccessRequestsCreateWithHttpInfoAsync(string businessId, CreateAssetAccessRequestBody createAssetAccessRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Cancel invites/requests
        /// </summary>
        /// <remarks>
        /// Cancel membership/partnership invites and/or requests.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Business id</param>
        /// <param name="cancelInvitesBody">A list with invite ids</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteInvitesResultsResponseArray</returns>
        System.Threading.Tasks.Task<DeleteInvitesResultsResponseArray> CancelInvitesOrRequestsAsync(string businessId, CancelInvitesBody cancelInvitesBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Cancel invites/requests
        /// </summary>
        /// <remarks>
        /// Cancel membership/partnership invites and/or requests.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Business id</param>
        /// <param name="cancelInvitesBody">A list with invite ids</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteInvitesResultsResponseArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteInvitesResultsResponseArray>> CancelInvitesOrRequestsWithHttpInfoAsync(string businessId, CancelInvitesBody cancelInvitesBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Update invite/request with an asset permission
        /// </summary>
        /// <remarks>
        /// Assign asset permissions information to an existing invite/request. Can be used to: - Request access to a partner&#39;s asset. Note: This is only for when no existing partnership exists. If an existing   partnership exists, use \&quot;Create a request to access an existing partner&#39;s assets\&quot; to request access to your   partner&#39;s assets.     - invite_type&#x3D;\&quot;PARTNER_REQUEST\&quot; - Invite a partner to access your business assets. Note: This is only for when there is no existing partnership.   If there is an existing partnership, use \&quot;Assign/Update partner asset permissions\&quot; to assign a partner access to   new assets.     - invite_type&#x3D;\&quot;PARTNER_INVITE\&quot; - Invite a member to access your business assets. Note: This is only for when there is no existing membership.   If there is an existing membership, use \&quot;Assign/Update member asset permissions\&quot; to assign a member access to new   assets.     - invite_type&#x3D;\&quot;MEMBER_INVITE\&quot;  To learn more about permission levels, visit https://help.pinterest.com/en/business/article/business-manager-overview.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="createAssetInvitesRequest">A list of invites/requests together with the asset permissions to be assigned to the invite/request. </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateInvitesResultsResponseArray</returns>
        System.Threading.Tasks.Task<UpdateInvitesResultsResponseArray> CreateAssetInvitesAsync(string businessId, CreateAssetInvitesRequest createAssetInvitesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Update invite/request with an asset permission
        /// </summary>
        /// <remarks>
        /// Assign asset permissions information to an existing invite/request. Can be used to: - Request access to a partner&#39;s asset. Note: This is only for when no existing partnership exists. If an existing   partnership exists, use \&quot;Create a request to access an existing partner&#39;s assets\&quot; to request access to your   partner&#39;s assets.     - invite_type&#x3D;\&quot;PARTNER_REQUEST\&quot; - Invite a partner to access your business assets. Note: This is only for when there is no existing partnership.   If there is an existing partnership, use \&quot;Assign/Update partner asset permissions\&quot; to assign a partner access to   new assets.     - invite_type&#x3D;\&quot;PARTNER_INVITE\&quot; - Invite a member to access your business assets. Note: This is only for when there is no existing membership.   If there is an existing membership, use \&quot;Assign/Update member asset permissions\&quot; to assign a member access to new   assets.     - invite_type&#x3D;\&quot;MEMBER_INVITE\&quot;  To learn more about permission levels, visit https://help.pinterest.com/en/business/article/business-manager-overview.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="createAssetInvitesRequest">A list of invites/requests together with the asset permissions to be assigned to the invite/request. </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateInvitesResultsResponseArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateInvitesResultsResponseArray>> CreateAssetInvitesWithHttpInfoAsync(string businessId, CreateAssetInvitesRequest createAssetInvitesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Create invites or requests
        /// </summary>
        /// <remarks>
        /// Create batch invites or requests. Can create batch invites or requests as described below. - Invite members to join the business. This would required specifying the following:     - invite_type&#x3D;\&quot;MEMBER_INVITE\&quot;     - business_role&#x3D;\&quot;EMPLOYEE\&quot; OR business_role&#x3D;\&quot;BIZ_ADMIN\&quot; (To learn more about business roles, visit     https://help.pinterest.com/en/business/article/profile-permissions-in-business-access.)     - members - Invite partners to access your business assets. This would require specifying the following:     - invite_type&#x3D;\&quot;PARTNER_INVITE\&quot;     - business_role&#x3D;\&quot;PARTNER\&quot;     - partners - Request to be a partner so you can access their assets. This would require specifying the following:     - invite_type&#x3D;\&quot;PARTNER_REQUEST\&quot;     - business_role&#x3D;\&quot;PARTNER\&quot;     - partners
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Business id</param>
        /// <param name="createMembershipOrPartnershipInvitesBody">An object with the properties: invite_type, partners, members, business_role</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateInvitesResultsResponseArray</returns>
        System.Threading.Tasks.Task<CreateInvitesResultsResponseArray> CreateMembershipOrPartnershipInvitesAsync(string businessId, CreateMembershipOrPartnershipInvitesBody createMembershipOrPartnershipInvitesBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create invites or requests
        /// </summary>
        /// <remarks>
        /// Create batch invites or requests. Can create batch invites or requests as described below. - Invite members to join the business. This would required specifying the following:     - invite_type&#x3D;\&quot;MEMBER_INVITE\&quot;     - business_role&#x3D;\&quot;EMPLOYEE\&quot; OR business_role&#x3D;\&quot;BIZ_ADMIN\&quot; (To learn more about business roles, visit     https://help.pinterest.com/en/business/article/profile-permissions-in-business-access.)     - members - Invite partners to access your business assets. This would require specifying the following:     - invite_type&#x3D;\&quot;PARTNER_INVITE\&quot;     - business_role&#x3D;\&quot;PARTNER\&quot;     - partners - Request to be a partner so you can access their assets. This would require specifying the following:     - invite_type&#x3D;\&quot;PARTNER_REQUEST\&quot;     - business_role&#x3D;\&quot;PARTNER\&quot;     - partners
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Business id</param>
        /// <param name="createMembershipOrPartnershipInvitesBody">An object with the properties: invite_type, partners, members, business_role</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateInvitesResultsResponseArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateInvitesResultsResponseArray>> CreateMembershipOrPartnershipInvitesWithHttpInfoAsync(string businessId, CreateMembershipOrPartnershipInvitesBody createMembershipOrPartnershipInvitesBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get invites/requests
        /// </summary>
        /// <remarks>
        /// Get the membership/partnership invites and/or requests for the authorized user.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="isMember">A boolean field to indicate whether the invite is to create a partnership or a membership. (optional, default to true)</param>
        /// <param name="inviteStatus">A list of invite statuses to filter invites by. Only invites whose status is in the provided statuses will be returned. (optional)</param>
        /// <param name="inviteType">Invite type to filter invites by. Only invites of the specified type will be returned. (optional)</param>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetInvites200Response</returns>
        System.Threading.Tasks.Task<GetInvites200Response> GetInvitesAsync(string businessId, bool? isMember = default(bool?), List<string>? inviteStatus = default(List<string>?), InviteType? inviteType = default(InviteType?), string? bookmark = default(string?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get invites/requests
        /// </summary>
        /// <remarks>
        /// Get the membership/partnership invites and/or requests for the authorized user.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="isMember">A boolean field to indicate whether the invite is to create a partnership or a membership. (optional, default to true)</param>
        /// <param name="inviteStatus">A list of invite statuses to filter invites by. Only invites whose status is in the provided statuses will be returned. (optional)</param>
        /// <param name="inviteType">Invite type to filter invites by. Only invites of the specified type will be returned. (optional)</param>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetInvites200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetInvites200Response>> GetInvitesWithHttpInfoAsync(string businessId, bool? isMember = default(bool?), List<string>? inviteStatus = default(List<string>?), InviteType? inviteType = default(InviteType?), string? bookmark = default(string?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Accept or decline an invite/request
        /// </summary>
        /// <remarks>
        /// Accept or decline invites or requests.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authRespondInvitesBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RespondToInvitesResponseArray</returns>
        System.Threading.Tasks.Task<RespondToInvitesResponseArray> RespondBusinessAccessInvitesAsync(AuthRespondInvitesBody authRespondInvitesBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Accept or decline an invite/request
        /// </summary>
        /// <remarks>
        /// Accept or decline invites or requests.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authRespondInvitesBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RespondToInvitesResponseArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<RespondToInvitesResponseArray>> RespondBusinessAccessInvitesWithHttpInfoAsync(AuthRespondInvitesBody authRespondInvitesBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBusinessAccessInviteApi : IBusinessAccessInviteApiSync, IBusinessAccessInviteApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class BusinessAccessInviteApi : IBusinessAccessInviteApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BusinessAccessInviteApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BusinessAccessInviteApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BusinessAccessInviteApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BusinessAccessInviteApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BusinessAccessInviteApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public BusinessAccessInviteApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BusinessAccessInviteApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public BusinessAccessInviteApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create a request to access an existing partner&#39;s assets. Create a request to access an existing partner&#39;s assets with the specified permissions. The request will be sent to the partner for approval. The assets that can be requested are ad accounts and profiles.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="createAssetAccessRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateAssetAccessRequestResponse</returns>
        public CreateAssetAccessRequestResponse AssetAccessRequestsCreate(string businessId, CreateAssetAccessRequestBody createAssetAccessRequestBody, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<CreateAssetAccessRequestResponse> localVarResponse = AssetAccessRequestsCreateWithHttpInfo(businessId, createAssetAccessRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a request to access an existing partner&#39;s assets. Create a request to access an existing partner&#39;s assets with the specified permissions. The request will be sent to the partner for approval. The assets that can be requested are ad accounts and profiles.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="createAssetAccessRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateAssetAccessRequestResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<CreateAssetAccessRequestResponse> AssetAccessRequestsCreateWithHttpInfo(string businessId, CreateAssetAccessRequestBody createAssetAccessRequestBody, int operationIndex = 0)
        {
            // verify the required parameter 'businessId' is set
            if (businessId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'businessId' when calling BusinessAccessInviteApi->AssetAccessRequestsCreate");
            }

            // verify the required parameter 'createAssetAccessRequestBody' is set
            if (createAssetAccessRequestBody == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'createAssetAccessRequestBody' when calling BusinessAccessInviteApi->AssetAccessRequestsCreate");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("business_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(businessId)); // path parameter
            localVarRequestOptions.Data = createAssetAccessRequestBody;

            localVarRequestOptions.Operation = "BusinessAccessInviteApi.AssetAccessRequestsCreate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (pinterest_oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateAssetAccessRequestResponse>("/businesses/{business_id}/requests/assets/access", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetAccessRequestsCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a request to access an existing partner&#39;s assets. Create a request to access an existing partner&#39;s assets with the specified permissions. The request will be sent to the partner for approval. The assets that can be requested are ad accounts and profiles.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="createAssetAccessRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateAssetAccessRequestResponse</returns>
        public async System.Threading.Tasks.Task<CreateAssetAccessRequestResponse> AssetAccessRequestsCreateAsync(string businessId, CreateAssetAccessRequestBody createAssetAccessRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<CreateAssetAccessRequestResponse> localVarResponse = await AssetAccessRequestsCreateWithHttpInfoAsync(businessId, createAssetAccessRequestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a request to access an existing partner&#39;s assets. Create a request to access an existing partner&#39;s assets with the specified permissions. The request will be sent to the partner for approval. The assets that can be requested are ad accounts and profiles.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="createAssetAccessRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateAssetAccessRequestResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<CreateAssetAccessRequestResponse>> AssetAccessRequestsCreateWithHttpInfoAsync(string businessId, CreateAssetAccessRequestBody createAssetAccessRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'businessId' is set
            if (businessId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'businessId' when calling BusinessAccessInviteApi->AssetAccessRequestsCreate");
            }

            // verify the required parameter 'createAssetAccessRequestBody' is set
            if (createAssetAccessRequestBody == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'createAssetAccessRequestBody' when calling BusinessAccessInviteApi->AssetAccessRequestsCreate");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("business_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(businessId)); // path parameter
            localVarRequestOptions.Data = createAssetAccessRequestBody;

            localVarRequestOptions.Operation = "BusinessAccessInviteApi.AssetAccessRequestsCreate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (pinterest_oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateAssetAccessRequestResponse>("/businesses/{business_id}/requests/assets/access", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetAccessRequestsCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel invites/requests Cancel membership/partnership invites and/or requests.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Business id</param>
        /// <param name="cancelInvitesBody">A list with invite ids</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeleteInvitesResultsResponseArray</returns>
        public DeleteInvitesResultsResponseArray CancelInvitesOrRequests(string businessId, CancelInvitesBody cancelInvitesBody, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<DeleteInvitesResultsResponseArray> localVarResponse = CancelInvitesOrRequestsWithHttpInfo(businessId, cancelInvitesBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel invites/requests Cancel membership/partnership invites and/or requests.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Business id</param>
        /// <param name="cancelInvitesBody">A list with invite ids</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeleteInvitesResultsResponseArray</returns>
        public Org.OpenAPITools.Client.ApiResponse<DeleteInvitesResultsResponseArray> CancelInvitesOrRequestsWithHttpInfo(string businessId, CancelInvitesBody cancelInvitesBody, int operationIndex = 0)
        {
            // verify the required parameter 'businessId' is set
            if (businessId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'businessId' when calling BusinessAccessInviteApi->CancelInvitesOrRequests");
            }

            // verify the required parameter 'cancelInvitesBody' is set
            if (cancelInvitesBody == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'cancelInvitesBody' when calling BusinessAccessInviteApi->CancelInvitesOrRequests");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("business_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(businessId)); // path parameter
            localVarRequestOptions.Data = cancelInvitesBody;

            localVarRequestOptions.Operation = "BusinessAccessInviteApi.CancelInvitesOrRequests";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (pinterest_oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<DeleteInvitesResultsResponseArray>("/businesses/{business_id}/invites", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelInvitesOrRequests", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel invites/requests Cancel membership/partnership invites and/or requests.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Business id</param>
        /// <param name="cancelInvitesBody">A list with invite ids</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteInvitesResultsResponseArray</returns>
        public async System.Threading.Tasks.Task<DeleteInvitesResultsResponseArray> CancelInvitesOrRequestsAsync(string businessId, CancelInvitesBody cancelInvitesBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<DeleteInvitesResultsResponseArray> localVarResponse = await CancelInvitesOrRequestsWithHttpInfoAsync(businessId, cancelInvitesBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel invites/requests Cancel membership/partnership invites and/or requests.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Business id</param>
        /// <param name="cancelInvitesBody">A list with invite ids</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteInvitesResultsResponseArray)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<DeleteInvitesResultsResponseArray>> CancelInvitesOrRequestsWithHttpInfoAsync(string businessId, CancelInvitesBody cancelInvitesBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'businessId' is set
            if (businessId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'businessId' when calling BusinessAccessInviteApi->CancelInvitesOrRequests");
            }

            // verify the required parameter 'cancelInvitesBody' is set
            if (cancelInvitesBody == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'cancelInvitesBody' when calling BusinessAccessInviteApi->CancelInvitesOrRequests");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("business_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(businessId)); // path parameter
            localVarRequestOptions.Data = cancelInvitesBody;

            localVarRequestOptions.Operation = "BusinessAccessInviteApi.CancelInvitesOrRequests";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (pinterest_oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<DeleteInvitesResultsResponseArray>("/businesses/{business_id}/invites", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelInvitesOrRequests", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update invite/request with an asset permission Assign asset permissions information to an existing invite/request. Can be used to: - Request access to a partner&#39;s asset. Note: This is only for when no existing partnership exists. If an existing   partnership exists, use \&quot;Create a request to access an existing partner&#39;s assets\&quot; to request access to your   partner&#39;s assets.     - invite_type&#x3D;\&quot;PARTNER_REQUEST\&quot; - Invite a partner to access your business assets. Note: This is only for when there is no existing partnership.   If there is an existing partnership, use \&quot;Assign/Update partner asset permissions\&quot; to assign a partner access to   new assets.     - invite_type&#x3D;\&quot;PARTNER_INVITE\&quot; - Invite a member to access your business assets. Note: This is only for when there is no existing membership.   If there is an existing membership, use \&quot;Assign/Update member asset permissions\&quot; to assign a member access to new   assets.     - invite_type&#x3D;\&quot;MEMBER_INVITE\&quot;  To learn more about permission levels, visit https://help.pinterest.com/en/business/article/business-manager-overview.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="createAssetInvitesRequest">A list of invites/requests together with the asset permissions to be assigned to the invite/request. </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UpdateInvitesResultsResponseArray</returns>
        public UpdateInvitesResultsResponseArray CreateAssetInvites(string businessId, CreateAssetInvitesRequest createAssetInvitesRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<UpdateInvitesResultsResponseArray> localVarResponse = CreateAssetInvitesWithHttpInfo(businessId, createAssetInvitesRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update invite/request with an asset permission Assign asset permissions information to an existing invite/request. Can be used to: - Request access to a partner&#39;s asset. Note: This is only for when no existing partnership exists. If an existing   partnership exists, use \&quot;Create a request to access an existing partner&#39;s assets\&quot; to request access to your   partner&#39;s assets.     - invite_type&#x3D;\&quot;PARTNER_REQUEST\&quot; - Invite a partner to access your business assets. Note: This is only for when there is no existing partnership.   If there is an existing partnership, use \&quot;Assign/Update partner asset permissions\&quot; to assign a partner access to   new assets.     - invite_type&#x3D;\&quot;PARTNER_INVITE\&quot; - Invite a member to access your business assets. Note: This is only for when there is no existing membership.   If there is an existing membership, use \&quot;Assign/Update member asset permissions\&quot; to assign a member access to new   assets.     - invite_type&#x3D;\&quot;MEMBER_INVITE\&quot;  To learn more about permission levels, visit https://help.pinterest.com/en/business/article/business-manager-overview.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="createAssetInvitesRequest">A list of invites/requests together with the asset permissions to be assigned to the invite/request. </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UpdateInvitesResultsResponseArray</returns>
        public Org.OpenAPITools.Client.ApiResponse<UpdateInvitesResultsResponseArray> CreateAssetInvitesWithHttpInfo(string businessId, CreateAssetInvitesRequest createAssetInvitesRequest, int operationIndex = 0)
        {
            // verify the required parameter 'businessId' is set
            if (businessId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'businessId' when calling BusinessAccessInviteApi->CreateAssetInvites");
            }

            // verify the required parameter 'createAssetInvitesRequest' is set
            if (createAssetInvitesRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'createAssetInvitesRequest' when calling BusinessAccessInviteApi->CreateAssetInvites");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("business_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(businessId)); // path parameter
            localVarRequestOptions.Data = createAssetInvitesRequest;

            localVarRequestOptions.Operation = "BusinessAccessInviteApi.CreateAssetInvites";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (pinterest_oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<UpdateInvitesResultsResponseArray>("/businesses/{business_id}/invites/assets/access", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAssetInvites", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update invite/request with an asset permission Assign asset permissions information to an existing invite/request. Can be used to: - Request access to a partner&#39;s asset. Note: This is only for when no existing partnership exists. If an existing   partnership exists, use \&quot;Create a request to access an existing partner&#39;s assets\&quot; to request access to your   partner&#39;s assets.     - invite_type&#x3D;\&quot;PARTNER_REQUEST\&quot; - Invite a partner to access your business assets. Note: This is only for when there is no existing partnership.   If there is an existing partnership, use \&quot;Assign/Update partner asset permissions\&quot; to assign a partner access to   new assets.     - invite_type&#x3D;\&quot;PARTNER_INVITE\&quot; - Invite a member to access your business assets. Note: This is only for when there is no existing membership.   If there is an existing membership, use \&quot;Assign/Update member asset permissions\&quot; to assign a member access to new   assets.     - invite_type&#x3D;\&quot;MEMBER_INVITE\&quot;  To learn more about permission levels, visit https://help.pinterest.com/en/business/article/business-manager-overview.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="createAssetInvitesRequest">A list of invites/requests together with the asset permissions to be assigned to the invite/request. </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateInvitesResultsResponseArray</returns>
        public async System.Threading.Tasks.Task<UpdateInvitesResultsResponseArray> CreateAssetInvitesAsync(string businessId, CreateAssetInvitesRequest createAssetInvitesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<UpdateInvitesResultsResponseArray> localVarResponse = await CreateAssetInvitesWithHttpInfoAsync(businessId, createAssetInvitesRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update invite/request with an asset permission Assign asset permissions information to an existing invite/request. Can be used to: - Request access to a partner&#39;s asset. Note: This is only for when no existing partnership exists. If an existing   partnership exists, use \&quot;Create a request to access an existing partner&#39;s assets\&quot; to request access to your   partner&#39;s assets.     - invite_type&#x3D;\&quot;PARTNER_REQUEST\&quot; - Invite a partner to access your business assets. Note: This is only for when there is no existing partnership.   If there is an existing partnership, use \&quot;Assign/Update partner asset permissions\&quot; to assign a partner access to   new assets.     - invite_type&#x3D;\&quot;PARTNER_INVITE\&quot; - Invite a member to access your business assets. Note: This is only for when there is no existing membership.   If there is an existing membership, use \&quot;Assign/Update member asset permissions\&quot; to assign a member access to new   assets.     - invite_type&#x3D;\&quot;MEMBER_INVITE\&quot;  To learn more about permission levels, visit https://help.pinterest.com/en/business/article/business-manager-overview.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="createAssetInvitesRequest">A list of invites/requests together with the asset permissions to be assigned to the invite/request. </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateInvitesResultsResponseArray)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<UpdateInvitesResultsResponseArray>> CreateAssetInvitesWithHttpInfoAsync(string businessId, CreateAssetInvitesRequest createAssetInvitesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'businessId' is set
            if (businessId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'businessId' when calling BusinessAccessInviteApi->CreateAssetInvites");
            }

            // verify the required parameter 'createAssetInvitesRequest' is set
            if (createAssetInvitesRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'createAssetInvitesRequest' when calling BusinessAccessInviteApi->CreateAssetInvites");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("business_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(businessId)); // path parameter
            localVarRequestOptions.Data = createAssetInvitesRequest;

            localVarRequestOptions.Operation = "BusinessAccessInviteApi.CreateAssetInvites";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (pinterest_oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<UpdateInvitesResultsResponseArray>("/businesses/{business_id}/invites/assets/access", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAssetInvites", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create invites or requests Create batch invites or requests. Can create batch invites or requests as described below. - Invite members to join the business. This would required specifying the following:     - invite_type&#x3D;\&quot;MEMBER_INVITE\&quot;     - business_role&#x3D;\&quot;EMPLOYEE\&quot; OR business_role&#x3D;\&quot;BIZ_ADMIN\&quot; (To learn more about business roles, visit     https://help.pinterest.com/en/business/article/profile-permissions-in-business-access.)     - members - Invite partners to access your business assets. This would require specifying the following:     - invite_type&#x3D;\&quot;PARTNER_INVITE\&quot;     - business_role&#x3D;\&quot;PARTNER\&quot;     - partners - Request to be a partner so you can access their assets. This would require specifying the following:     - invite_type&#x3D;\&quot;PARTNER_REQUEST\&quot;     - business_role&#x3D;\&quot;PARTNER\&quot;     - partners
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Business id</param>
        /// <param name="createMembershipOrPartnershipInvitesBody">An object with the properties: invite_type, partners, members, business_role</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateInvitesResultsResponseArray</returns>
        public CreateInvitesResultsResponseArray CreateMembershipOrPartnershipInvites(string businessId, CreateMembershipOrPartnershipInvitesBody createMembershipOrPartnershipInvitesBody, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<CreateInvitesResultsResponseArray> localVarResponse = CreateMembershipOrPartnershipInvitesWithHttpInfo(businessId, createMembershipOrPartnershipInvitesBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create invites or requests Create batch invites or requests. Can create batch invites or requests as described below. - Invite members to join the business. This would required specifying the following:     - invite_type&#x3D;\&quot;MEMBER_INVITE\&quot;     - business_role&#x3D;\&quot;EMPLOYEE\&quot; OR business_role&#x3D;\&quot;BIZ_ADMIN\&quot; (To learn more about business roles, visit     https://help.pinterest.com/en/business/article/profile-permissions-in-business-access.)     - members - Invite partners to access your business assets. This would require specifying the following:     - invite_type&#x3D;\&quot;PARTNER_INVITE\&quot;     - business_role&#x3D;\&quot;PARTNER\&quot;     - partners - Request to be a partner so you can access their assets. This would require specifying the following:     - invite_type&#x3D;\&quot;PARTNER_REQUEST\&quot;     - business_role&#x3D;\&quot;PARTNER\&quot;     - partners
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Business id</param>
        /// <param name="createMembershipOrPartnershipInvitesBody">An object with the properties: invite_type, partners, members, business_role</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateInvitesResultsResponseArray</returns>
        public Org.OpenAPITools.Client.ApiResponse<CreateInvitesResultsResponseArray> CreateMembershipOrPartnershipInvitesWithHttpInfo(string businessId, CreateMembershipOrPartnershipInvitesBody createMembershipOrPartnershipInvitesBody, int operationIndex = 0)
        {
            // verify the required parameter 'businessId' is set
            if (businessId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'businessId' when calling BusinessAccessInviteApi->CreateMembershipOrPartnershipInvites");
            }

            // verify the required parameter 'createMembershipOrPartnershipInvitesBody' is set
            if (createMembershipOrPartnershipInvitesBody == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'createMembershipOrPartnershipInvitesBody' when calling BusinessAccessInviteApi->CreateMembershipOrPartnershipInvites");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("business_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(businessId)); // path parameter
            localVarRequestOptions.Data = createMembershipOrPartnershipInvitesBody;

            localVarRequestOptions.Operation = "BusinessAccessInviteApi.CreateMembershipOrPartnershipInvites";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (pinterest_oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateInvitesResultsResponseArray>("/businesses/{business_id}/invites", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateMembershipOrPartnershipInvites", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create invites or requests Create batch invites or requests. Can create batch invites or requests as described below. - Invite members to join the business. This would required specifying the following:     - invite_type&#x3D;\&quot;MEMBER_INVITE\&quot;     - business_role&#x3D;\&quot;EMPLOYEE\&quot; OR business_role&#x3D;\&quot;BIZ_ADMIN\&quot; (To learn more about business roles, visit     https://help.pinterest.com/en/business/article/profile-permissions-in-business-access.)     - members - Invite partners to access your business assets. This would require specifying the following:     - invite_type&#x3D;\&quot;PARTNER_INVITE\&quot;     - business_role&#x3D;\&quot;PARTNER\&quot;     - partners - Request to be a partner so you can access their assets. This would require specifying the following:     - invite_type&#x3D;\&quot;PARTNER_REQUEST\&quot;     - business_role&#x3D;\&quot;PARTNER\&quot;     - partners
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Business id</param>
        /// <param name="createMembershipOrPartnershipInvitesBody">An object with the properties: invite_type, partners, members, business_role</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateInvitesResultsResponseArray</returns>
        public async System.Threading.Tasks.Task<CreateInvitesResultsResponseArray> CreateMembershipOrPartnershipInvitesAsync(string businessId, CreateMembershipOrPartnershipInvitesBody createMembershipOrPartnershipInvitesBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<CreateInvitesResultsResponseArray> localVarResponse = await CreateMembershipOrPartnershipInvitesWithHttpInfoAsync(businessId, createMembershipOrPartnershipInvitesBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create invites or requests Create batch invites or requests. Can create batch invites or requests as described below. - Invite members to join the business. This would required specifying the following:     - invite_type&#x3D;\&quot;MEMBER_INVITE\&quot;     - business_role&#x3D;\&quot;EMPLOYEE\&quot; OR business_role&#x3D;\&quot;BIZ_ADMIN\&quot; (To learn more about business roles, visit     https://help.pinterest.com/en/business/article/profile-permissions-in-business-access.)     - members - Invite partners to access your business assets. This would require specifying the following:     - invite_type&#x3D;\&quot;PARTNER_INVITE\&quot;     - business_role&#x3D;\&quot;PARTNER\&quot;     - partners - Request to be a partner so you can access their assets. This would require specifying the following:     - invite_type&#x3D;\&quot;PARTNER_REQUEST\&quot;     - business_role&#x3D;\&quot;PARTNER\&quot;     - partners
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Business id</param>
        /// <param name="createMembershipOrPartnershipInvitesBody">An object with the properties: invite_type, partners, members, business_role</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateInvitesResultsResponseArray)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<CreateInvitesResultsResponseArray>> CreateMembershipOrPartnershipInvitesWithHttpInfoAsync(string businessId, CreateMembershipOrPartnershipInvitesBody createMembershipOrPartnershipInvitesBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'businessId' is set
            if (businessId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'businessId' when calling BusinessAccessInviteApi->CreateMembershipOrPartnershipInvites");
            }

            // verify the required parameter 'createMembershipOrPartnershipInvitesBody' is set
            if (createMembershipOrPartnershipInvitesBody == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'createMembershipOrPartnershipInvitesBody' when calling BusinessAccessInviteApi->CreateMembershipOrPartnershipInvites");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("business_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(businessId)); // path parameter
            localVarRequestOptions.Data = createMembershipOrPartnershipInvitesBody;

            localVarRequestOptions.Operation = "BusinessAccessInviteApi.CreateMembershipOrPartnershipInvites";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (pinterest_oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateInvitesResultsResponseArray>("/businesses/{business_id}/invites", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateMembershipOrPartnershipInvites", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get invites/requests Get the membership/partnership invites and/or requests for the authorized user.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="isMember">A boolean field to indicate whether the invite is to create a partnership or a membership. (optional, default to true)</param>
        /// <param name="inviteStatus">A list of invite statuses to filter invites by. Only invites whose status is in the provided statuses will be returned. (optional)</param>
        /// <param name="inviteType">Invite type to filter invites by. Only invites of the specified type will be returned. (optional)</param>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetInvites200Response</returns>
        public GetInvites200Response GetInvites(string businessId, bool? isMember = default(bool?), List<string>? inviteStatus = default(List<string>?), InviteType? inviteType = default(InviteType?), string? bookmark = default(string?), int? pageSize = default(int?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<GetInvites200Response> localVarResponse = GetInvitesWithHttpInfo(businessId, isMember, inviteStatus, inviteType, bookmark, pageSize);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get invites/requests Get the membership/partnership invites and/or requests for the authorized user.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="isMember">A boolean field to indicate whether the invite is to create a partnership or a membership. (optional, default to true)</param>
        /// <param name="inviteStatus">A list of invite statuses to filter invites by. Only invites whose status is in the provided statuses will be returned. (optional)</param>
        /// <param name="inviteType">Invite type to filter invites by. Only invites of the specified type will be returned. (optional)</param>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetInvites200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<GetInvites200Response> GetInvitesWithHttpInfo(string businessId, bool? isMember = default(bool?), List<string>? inviteStatus = default(List<string>?), InviteType? inviteType = default(InviteType?), string? bookmark = default(string?), int? pageSize = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'businessId' is set
            if (businessId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'businessId' when calling BusinessAccessInviteApi->GetInvites");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("business_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(businessId)); // path parameter
            if (isMember != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "is_member", isMember));
            }
            if (inviteStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "invite_status", inviteStatus));
            }
            if (inviteType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "invite_type", inviteType));
            }
            if (bookmark != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "bookmark", bookmark));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }

            localVarRequestOptions.Operation = "BusinessAccessInviteApi.GetInvites";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (pinterest_oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetInvites200Response>("/businesses/{business_id}/invites", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInvites", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get invites/requests Get the membership/partnership invites and/or requests for the authorized user.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="isMember">A boolean field to indicate whether the invite is to create a partnership or a membership. (optional, default to true)</param>
        /// <param name="inviteStatus">A list of invite statuses to filter invites by. Only invites whose status is in the provided statuses will be returned. (optional)</param>
        /// <param name="inviteType">Invite type to filter invites by. Only invites of the specified type will be returned. (optional)</param>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetInvites200Response</returns>
        public async System.Threading.Tasks.Task<GetInvites200Response> GetInvitesAsync(string businessId, bool? isMember = default(bool?), List<string>? inviteStatus = default(List<string>?), InviteType? inviteType = default(InviteType?), string? bookmark = default(string?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<GetInvites200Response> localVarResponse = await GetInvitesWithHttpInfoAsync(businessId, isMember, inviteStatus, inviteType, bookmark, pageSize, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get invites/requests Get the membership/partnership invites and/or requests for the authorized user.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="isMember">A boolean field to indicate whether the invite is to create a partnership or a membership. (optional, default to true)</param>
        /// <param name="inviteStatus">A list of invite statuses to filter invites by. Only invites whose status is in the provided statuses will be returned. (optional)</param>
        /// <param name="inviteType">Invite type to filter invites by. Only invites of the specified type will be returned. (optional)</param>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetInvites200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<GetInvites200Response>> GetInvitesWithHttpInfoAsync(string businessId, bool? isMember = default(bool?), List<string>? inviteStatus = default(List<string>?), InviteType? inviteType = default(InviteType?), string? bookmark = default(string?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'businessId' is set
            if (businessId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'businessId' when calling BusinessAccessInviteApi->GetInvites");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("business_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(businessId)); // path parameter
            if (isMember != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "is_member", isMember));
            }
            if (inviteStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "invite_status", inviteStatus));
            }
            if (inviteType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "invite_type", inviteType));
            }
            if (bookmark != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "bookmark", bookmark));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }

            localVarRequestOptions.Operation = "BusinessAccessInviteApi.GetInvites";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (pinterest_oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetInvites200Response>("/businesses/{business_id}/invites", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInvites", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Accept or decline an invite/request Accept or decline invites or requests.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authRespondInvitesBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RespondToInvitesResponseArray</returns>
        public RespondToInvitesResponseArray RespondBusinessAccessInvites(AuthRespondInvitesBody authRespondInvitesBody, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<RespondToInvitesResponseArray> localVarResponse = RespondBusinessAccessInvitesWithHttpInfo(authRespondInvitesBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Accept or decline an invite/request Accept or decline invites or requests.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authRespondInvitesBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RespondToInvitesResponseArray</returns>
        public Org.OpenAPITools.Client.ApiResponse<RespondToInvitesResponseArray> RespondBusinessAccessInvitesWithHttpInfo(AuthRespondInvitesBody authRespondInvitesBody, int operationIndex = 0)
        {
            // verify the required parameter 'authRespondInvitesBody' is set
            if (authRespondInvitesBody == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'authRespondInvitesBody' when calling BusinessAccessInviteApi->RespondBusinessAccessInvites");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = authRespondInvitesBody;

            localVarRequestOptions.Operation = "BusinessAccessInviteApi.RespondBusinessAccessInvites";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (pinterest_oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<RespondToInvitesResponseArray>("/businesses/invites", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RespondBusinessAccessInvites", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Accept or decline an invite/request Accept or decline invites or requests.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authRespondInvitesBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RespondToInvitesResponseArray</returns>
        public async System.Threading.Tasks.Task<RespondToInvitesResponseArray> RespondBusinessAccessInvitesAsync(AuthRespondInvitesBody authRespondInvitesBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<RespondToInvitesResponseArray> localVarResponse = await RespondBusinessAccessInvitesWithHttpInfoAsync(authRespondInvitesBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Accept or decline an invite/request Accept or decline invites or requests.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authRespondInvitesBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RespondToInvitesResponseArray)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<RespondToInvitesResponseArray>> RespondBusinessAccessInvitesWithHttpInfoAsync(AuthRespondInvitesBody authRespondInvitesBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'authRespondInvitesBody' is set
            if (authRespondInvitesBody == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'authRespondInvitesBody' when calling BusinessAccessInviteApi->RespondBusinessAccessInvites");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = authRespondInvitesBody;

            localVarRequestOptions.Operation = "BusinessAccessInviteApi.RespondBusinessAccessInvites";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (pinterest_oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<RespondToInvitesResponseArray>("/businesses/invites", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RespondBusinessAccessInvites", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
