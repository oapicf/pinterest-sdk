/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Client.Auth;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBusinessAccessAssetsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a new asset group.
        /// </summary>
        /// <remarks>
        /// Create a new asset group with the specified parameters. - An &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/asset-groups\&quot;&gt;asset group&lt;/a&gt; is a custom group of assets based on how you’d like to manage your accounts.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="createAssetGroupBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateAssetGroupResponse</returns>
        CreateAssetGroupResponse AssetGroupCreate(string businessId, CreateAssetGroupBody createAssetGroupBody, int operationIndex = 0);

        /// <summary>
        /// Create a new asset group.
        /// </summary>
        /// <remarks>
        /// Create a new asset group with the specified parameters. - An &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/asset-groups\&quot;&gt;asset group&lt;/a&gt; is a custom group of assets based on how you’d like to manage your accounts.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="createAssetGroupBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateAssetGroupResponse</returns>
        ApiResponse<CreateAssetGroupResponse> AssetGroupCreateWithHttpInfo(string businessId, CreateAssetGroupBody createAssetGroupBody, int operationIndex = 0);
        /// <summary>
        /// Delete asset groups.
        /// </summary>
        /// <remarks>
        /// Delete a batch of asset groups.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="deleteAssetGroupBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeleteAssetGroupResponse</returns>
        DeleteAssetGroupResponse AssetGroupDelete(string businessId, DeleteAssetGroupBody deleteAssetGroupBody, int operationIndex = 0);

        /// <summary>
        /// Delete asset groups.
        /// </summary>
        /// <remarks>
        /// Delete a batch of asset groups.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="deleteAssetGroupBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeleteAssetGroupResponse</returns>
        ApiResponse<DeleteAssetGroupResponse> AssetGroupDeleteWithHttpInfo(string businessId, DeleteAssetGroupBody deleteAssetGroupBody, int operationIndex = 0);
        /// <summary>
        /// Update asset groups.
        /// </summary>
        /// <remarks>
        /// Update a batch of asset groups with the specified parameters.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="updateAssetGroupBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UpdateAssetGroupResponse</returns>
        UpdateAssetGroupResponse AssetGroupUpdate(string businessId, UpdateAssetGroupBody updateAssetGroupBody, int operationIndex = 0);

        /// <summary>
        /// Update asset groups.
        /// </summary>
        /// <remarks>
        /// Update a batch of asset groups with the specified parameters.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="updateAssetGroupBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UpdateAssetGroupResponse</returns>
        ApiResponse<UpdateAssetGroupResponse> AssetGroupUpdateWithHttpInfo(string businessId, UpdateAssetGroupBody updateAssetGroupBody, int operationIndex = 0);
        /// <summary>
        /// Get members with access to asset
        /// </summary>
        /// <remarks>
        /// Get all the members the requesting business has granted access to on the given asset.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="assetId">Unique identifier of a business asset.</param>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="startIndex">An index to start fetching the results from. Only the results starting from this index will be returned. (optional, default to 0)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BusinessAssetMembersGet200Response</returns>
        BusinessAssetMembersGet200Response BusinessAssetMembersGet(string businessId, string assetId, string? bookmark = default(string?), int? pageSize = default(int?), int? startIndex = default(int?), int operationIndex = 0);

        /// <summary>
        /// Get members with access to asset
        /// </summary>
        /// <remarks>
        /// Get all the members the requesting business has granted access to on the given asset.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="assetId">Unique identifier of a business asset.</param>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="startIndex">An index to start fetching the results from. Only the results starting from this index will be returned. (optional, default to 0)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BusinessAssetMembersGet200Response</returns>
        ApiResponse<BusinessAssetMembersGet200Response> BusinessAssetMembersGetWithHttpInfo(string businessId, string assetId, string? bookmark = default(string?), int? pageSize = default(int?), int? startIndex = default(int?), int operationIndex = 0);
        /// <summary>
        /// Get partners with access to asset
        /// </summary>
        /// <remarks>
        /// Get all the partners the requesting business has granted access to on the given asset. Note: If the asset has been shared with you, an empty array will be returned. This is because an asset shared with you cannot be shared with a different partner.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="assetId">Unique identifier of a business asset.</param>
        /// <param name="startIndex">An index to start fetching the results from. Only the results starting from this index will be returned. (optional, default to 0)</param>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BusinessAssetPartnersGet200Response</returns>
        BusinessAssetPartnersGet200Response BusinessAssetPartnersGet(string businessId, string assetId, int? startIndex = default(int?), string? bookmark = default(string?), int? pageSize = default(int?), int operationIndex = 0);

        /// <summary>
        /// Get partners with access to asset
        /// </summary>
        /// <remarks>
        /// Get all the partners the requesting business has granted access to on the given asset. Note: If the asset has been shared with you, an empty array will be returned. This is because an asset shared with you cannot be shared with a different partner.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="assetId">Unique identifier of a business asset.</param>
        /// <param name="startIndex">An index to start fetching the results from. Only the results starting from this index will be returned. (optional, default to 0)</param>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BusinessAssetPartnersGet200Response</returns>
        ApiResponse<BusinessAssetPartnersGet200Response> BusinessAssetPartnersGetWithHttpInfo(string businessId, string assetId, int? startIndex = default(int?), string? bookmark = default(string?), int? pageSize = default(int?), int operationIndex = 0);
        /// <summary>
        /// List business assets
        /// </summary>
        /// <remarks>
        /// Get all the assets the requesting business has access to. This includes assets the business owns and assets the business has access to through partnerships.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="permissions">A list of asset permissions used to filter the assets. Only assets where the requesting business has at least one of the specified permissions will be returned. (optional)</param>
        /// <param name="childAssetId">A child asset unique identifier. Used to fetch asset groups that contain the asset id as a child. (optional)</param>
        /// <param name="assetGroupId">An asset group unique identifier. Used to fetch assets contained within the specified asset group. (optional)</param>
        /// <param name="assetType">A resource type to filter the assets by. Only assets of the specified type will be returned. (optional, default to AD_ACCOUNT)</param>
        /// <param name="startIndex">An index to start fetching the results from. Only the results starting from this index will be returned. (optional, default to 0)</param>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BusinessAssetsGet200Response</returns>
        BusinessAssetsGet200Response BusinessAssetsGet(string businessId, List<PermissionsWithOwner>? permissions = default(List<PermissionsWithOwner>?), string? childAssetId = default(string?), string? assetGroupId = default(string?), string? assetType = default(string?), int? startIndex = default(int?), string? bookmark = default(string?), int? pageSize = default(int?), int operationIndex = 0);

        /// <summary>
        /// List business assets
        /// </summary>
        /// <remarks>
        /// Get all the assets the requesting business has access to. This includes assets the business owns and assets the business has access to through partnerships.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="permissions">A list of asset permissions used to filter the assets. Only assets where the requesting business has at least one of the specified permissions will be returned. (optional)</param>
        /// <param name="childAssetId">A child asset unique identifier. Used to fetch asset groups that contain the asset id as a child. (optional)</param>
        /// <param name="assetGroupId">An asset group unique identifier. Used to fetch assets contained within the specified asset group. (optional)</param>
        /// <param name="assetType">A resource type to filter the assets by. Only assets of the specified type will be returned. (optional, default to AD_ACCOUNT)</param>
        /// <param name="startIndex">An index to start fetching the results from. Only the results starting from this index will be returned. (optional, default to 0)</param>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BusinessAssetsGet200Response</returns>
        ApiResponse<BusinessAssetsGet200Response> BusinessAssetsGetWithHttpInfo(string businessId, List<PermissionsWithOwner>? permissions = default(List<PermissionsWithOwner>?), string? childAssetId = default(string?), string? assetGroupId = default(string?), string? assetType = default(string?), int? startIndex = default(int?), string? bookmark = default(string?), int? pageSize = default(int?), int operationIndex = 0);
        /// <summary>
        /// Get assets assigned to a member
        /// </summary>
        /// <remarks>
        /// Get assets on which you assigned asset permissions to the given member. Can be used to: - get all assets, regardless of asset type or - get assets of one asset type by using the asset_type query. The return response will include the permissions the member has to that asset and the asset type.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="memberId">The member id to fetch assets for.</param>
        /// <param name="assetType">A resource type to filter the assets by. Only assets of the specified type will be returned. (optional, default to AD_ACCOUNT)</param>
        /// <param name="startIndex">An index to start fetching the results from. Only the results starting from this index will be returned. (optional, default to 0)</param>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BusinessMemberAssetsGet200Response</returns>
        BusinessMemberAssetsGet200Response BusinessMemberAssetsGet(string businessId, string memberId, string? assetType = default(string?), int? startIndex = default(int?), string? bookmark = default(string?), int? pageSize = default(int?), int operationIndex = 0);

        /// <summary>
        /// Get assets assigned to a member
        /// </summary>
        /// <remarks>
        /// Get assets on which you assigned asset permissions to the given member. Can be used to: - get all assets, regardless of asset type or - get assets of one asset type by using the asset_type query. The return response will include the permissions the member has to that asset and the asset type.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="memberId">The member id to fetch assets for.</param>
        /// <param name="assetType">A resource type to filter the assets by. Only assets of the specified type will be returned. (optional, default to AD_ACCOUNT)</param>
        /// <param name="startIndex">An index to start fetching the results from. Only the results starting from this index will be returned. (optional, default to 0)</param>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BusinessMemberAssetsGet200Response</returns>
        ApiResponse<BusinessMemberAssetsGet200Response> BusinessMemberAssetsGetWithHttpInfo(string businessId, string memberId, string? assetType = default(string?), int? startIndex = default(int?), string? bookmark = default(string?), int? pageSize = default(int?), int operationIndex = 0);
        /// <summary>
        /// Delete member access to asset
        /// </summary>
        /// <remarks>
        /// Terminate multiple members&#39; access to an asset.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="businessMembersAssetAccessDeleteRequest">List member assset permissions to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeleteMemberAccessResultsResponseArray</returns>
        DeleteMemberAccessResultsResponseArray BusinessMembersAssetAccessDelete(string businessId, BusinessMembersAssetAccessDeleteRequest businessMembersAssetAccessDeleteRequest, int operationIndex = 0);

        /// <summary>
        /// Delete member access to asset
        /// </summary>
        /// <remarks>
        /// Terminate multiple members&#39; access to an asset.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="businessMembersAssetAccessDeleteRequest">List member assset permissions to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeleteMemberAccessResultsResponseArray</returns>
        ApiResponse<DeleteMemberAccessResultsResponseArray> BusinessMembersAssetAccessDeleteWithHttpInfo(string businessId, BusinessMembersAssetAccessDeleteRequest businessMembersAssetAccessDeleteRequest, int operationIndex = 0);
        /// <summary>
        /// Assign/Update member asset permissions
        /// </summary>
        /// <remarks>
        /// Grant multiple members access to assets and/or update multiple member&#39;s exisiting permissions to an asset. Note: Not all listed permissions are applicable to each asset type. For example, PROFILE_PUBLISHER would not be applicable to an asset of type AD_ACCOUNT. The permission level PROFILE_PUBLISHER is only available to an asset of the type PROFILE. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="updateMemberAssetAccessBody">List of member asset permissions to create or update.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UpdateMemberAssetsResultsResponseArray</returns>
        UpdateMemberAssetsResultsResponseArray BusinessMembersAssetAccessUpdate(string businessId, UpdateMemberAssetAccessBody updateMemberAssetAccessBody, int operationIndex = 0);

        /// <summary>
        /// Assign/Update member asset permissions
        /// </summary>
        /// <remarks>
        /// Grant multiple members access to assets and/or update multiple member&#39;s exisiting permissions to an asset. Note: Not all listed permissions are applicable to each asset type. For example, PROFILE_PUBLISHER would not be applicable to an asset of type AD_ACCOUNT. The permission level PROFILE_PUBLISHER is only available to an asset of the type PROFILE. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="updateMemberAssetAccessBody">List of member asset permissions to create or update.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UpdateMemberAssetsResultsResponseArray</returns>
        ApiResponse<UpdateMemberAssetsResultsResponseArray> BusinessMembersAssetAccessUpdateWithHttpInfo(string businessId, UpdateMemberAssetAccessBody updateMemberAssetAccessBody, int operationIndex = 0);
        /// <summary>
        /// Get assets assigned to a partner or assets assigned by a partner
        /// </summary>
        /// <remarks>
        /// Can be used to get the business assets your partner has granted you access to or the business assets you have granted your partner access to. If you specify: - partner_type&#x3D;INTERNAL, you will retrieve your business assets that the partner has access to. - partner_type&#x3D;EXTERNAL, you will retrieve the partner&#39;s business assets that the partner has granted you access to.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="partnerId">The partner id to be bound to the Business</param>
        /// <param name="partnerType">Specifies whether to fetch internal or external (shared) partners. If partner_type&#x3D;INTERNAL, the asset being queried is for accesses the partner has to your business assets.&lt;br&gt; If partner_type&#x3D;EXTERNAL, the asset being queried is for the accesses you have to the partner&#39;s business asset. (optional)</param>
        /// <param name="assetType">A resource type to filter the assets by. Only assets of the specified type will be returned. (optional, default to AD_ACCOUNT)</param>
        /// <param name="startIndex">An index to start fetching the results from. Only the results starting from this index will be returned. (optional, default to 0)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BusinessPartnerAssetAccessGet200Response</returns>
        BusinessPartnerAssetAccessGet200Response BusinessPartnerAssetAccessGet(string businessId, string partnerId, PartnerType? partnerType = default(PartnerType?), string? assetType = default(string?), int? startIndex = default(int?), int? pageSize = default(int?), string? bookmark = default(string?), int operationIndex = 0);

        /// <summary>
        /// Get assets assigned to a partner or assets assigned by a partner
        /// </summary>
        /// <remarks>
        /// Can be used to get the business assets your partner has granted you access to or the business assets you have granted your partner access to. If you specify: - partner_type&#x3D;INTERNAL, you will retrieve your business assets that the partner has access to. - partner_type&#x3D;EXTERNAL, you will retrieve the partner&#39;s business assets that the partner has granted you access to.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="partnerId">The partner id to be bound to the Business</param>
        /// <param name="partnerType">Specifies whether to fetch internal or external (shared) partners. If partner_type&#x3D;INTERNAL, the asset being queried is for accesses the partner has to your business assets.&lt;br&gt; If partner_type&#x3D;EXTERNAL, the asset being queried is for the accesses you have to the partner&#39;s business asset. (optional)</param>
        /// <param name="assetType">A resource type to filter the assets by. Only assets of the specified type will be returned. (optional, default to AD_ACCOUNT)</param>
        /// <param name="startIndex">An index to start fetching the results from. Only the results starting from this index will be returned. (optional, default to 0)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BusinessPartnerAssetAccessGet200Response</returns>
        ApiResponse<BusinessPartnerAssetAccessGet200Response> BusinessPartnerAssetAccessGetWithHttpInfo(string businessId, string partnerId, PartnerType? partnerType = default(PartnerType?), string? assetType = default(string?), int? startIndex = default(int?), int? pageSize = default(int?), string? bookmark = default(string?), int operationIndex = 0);
        /// <summary>
        /// Delete partner access to asset
        /// </summary>
        /// <remarks>
        /// Terminate multiple partners&#39; access to an asset. If - partner_type&#x3D;INTERNAL: You will terminate a partner&#39;s asset access to your business assets. - partner_type&#x3D;EXTERNAL: You will terminate your own access to your partner&#39;s business assets.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="deletePartnerAssetAccessBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeletePartnerAssetsResultsResponseArray</returns>
        DeletePartnerAssetsResultsResponseArray DeletePartnerAssetAccessHandlerImpl(string businessId, DeletePartnerAssetAccessBody deletePartnerAssetAccessBody, int operationIndex = 0);

        /// <summary>
        /// Delete partner access to asset
        /// </summary>
        /// <remarks>
        /// Terminate multiple partners&#39; access to an asset. If - partner_type&#x3D;INTERNAL: You will terminate a partner&#39;s asset access to your business assets. - partner_type&#x3D;EXTERNAL: You will terminate your own access to your partner&#39;s business assets.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="deletePartnerAssetAccessBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeletePartnerAssetsResultsResponseArray</returns>
        ApiResponse<DeletePartnerAssetsResultsResponseArray> DeletePartnerAssetAccessHandlerImplWithHttpInfo(string businessId, DeletePartnerAssetAccessBody deletePartnerAssetAccessBody, int operationIndex = 0);
        /// <summary>
        /// Assign/Update partner asset permissions
        /// </summary>
        /// <remarks>
        /// Grant multiple partners access to assets and/or update multiple partner&#39;s exisiting permissions to an asset. If your partner already had permissions on the asset, they will be overriden with the new permissions you assign to them. To learn more about permission levels, visit https://help.pinterest.com/en/business/article/business-manager-overview  Note: Not all listed permissions are applicable to each asset type. For example, PROFILE_PUBLISHER would not be applicable to an asset of type AD_ACCOUNT. The permission level PROFILE_PUBLISHER is only available to an asset of the type PROFILE.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="updatePartnerAssetAccessBody">A list of assets and permissions to assign to your partners.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UpdatePartnerAssetsResultsResponseArray</returns>
        UpdatePartnerAssetsResultsResponseArray UpdatePartnerAssetAccessHandlerImpl(string businessId, UpdatePartnerAssetAccessBody updatePartnerAssetAccessBody, int operationIndex = 0);

        /// <summary>
        /// Assign/Update partner asset permissions
        /// </summary>
        /// <remarks>
        /// Grant multiple partners access to assets and/or update multiple partner&#39;s exisiting permissions to an asset. If your partner already had permissions on the asset, they will be overriden with the new permissions you assign to them. To learn more about permission levels, visit https://help.pinterest.com/en/business/article/business-manager-overview  Note: Not all listed permissions are applicable to each asset type. For example, PROFILE_PUBLISHER would not be applicable to an asset of type AD_ACCOUNT. The permission level PROFILE_PUBLISHER is only available to an asset of the type PROFILE.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="updatePartnerAssetAccessBody">A list of assets and permissions to assign to your partners.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UpdatePartnerAssetsResultsResponseArray</returns>
        ApiResponse<UpdatePartnerAssetsResultsResponseArray> UpdatePartnerAssetAccessHandlerImplWithHttpInfo(string businessId, UpdatePartnerAssetAccessBody updatePartnerAssetAccessBody, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBusinessAccessAssetsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create a new asset group.
        /// </summary>
        /// <remarks>
        /// Create a new asset group with the specified parameters. - An &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/asset-groups\&quot;&gt;asset group&lt;/a&gt; is a custom group of assets based on how you’d like to manage your accounts.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="createAssetGroupBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateAssetGroupResponse</returns>
        System.Threading.Tasks.Task<CreateAssetGroupResponse> AssetGroupCreateAsync(string businessId, CreateAssetGroupBody createAssetGroupBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create a new asset group.
        /// </summary>
        /// <remarks>
        /// Create a new asset group with the specified parameters. - An &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/asset-groups\&quot;&gt;asset group&lt;/a&gt; is a custom group of assets based on how you’d like to manage your accounts.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="createAssetGroupBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateAssetGroupResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateAssetGroupResponse>> AssetGroupCreateWithHttpInfoAsync(string businessId, CreateAssetGroupBody createAssetGroupBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Delete asset groups.
        /// </summary>
        /// <remarks>
        /// Delete a batch of asset groups.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="deleteAssetGroupBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteAssetGroupResponse</returns>
        System.Threading.Tasks.Task<DeleteAssetGroupResponse> AssetGroupDeleteAsync(string businessId, DeleteAssetGroupBody deleteAssetGroupBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Delete asset groups.
        /// </summary>
        /// <remarks>
        /// Delete a batch of asset groups.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="deleteAssetGroupBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteAssetGroupResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteAssetGroupResponse>> AssetGroupDeleteWithHttpInfoAsync(string businessId, DeleteAssetGroupBody deleteAssetGroupBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Update asset groups.
        /// </summary>
        /// <remarks>
        /// Update a batch of asset groups with the specified parameters.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="updateAssetGroupBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateAssetGroupResponse</returns>
        System.Threading.Tasks.Task<UpdateAssetGroupResponse> AssetGroupUpdateAsync(string businessId, UpdateAssetGroupBody updateAssetGroupBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Update asset groups.
        /// </summary>
        /// <remarks>
        /// Update a batch of asset groups with the specified parameters.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="updateAssetGroupBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateAssetGroupResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateAssetGroupResponse>> AssetGroupUpdateWithHttpInfoAsync(string businessId, UpdateAssetGroupBody updateAssetGroupBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get members with access to asset
        /// </summary>
        /// <remarks>
        /// Get all the members the requesting business has granted access to on the given asset.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="assetId">Unique identifier of a business asset.</param>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="startIndex">An index to start fetching the results from. Only the results starting from this index will be returned. (optional, default to 0)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BusinessAssetMembersGet200Response</returns>
        System.Threading.Tasks.Task<BusinessAssetMembersGet200Response> BusinessAssetMembersGetAsync(string businessId, string assetId, string? bookmark = default(string?), int? pageSize = default(int?), int? startIndex = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get members with access to asset
        /// </summary>
        /// <remarks>
        /// Get all the members the requesting business has granted access to on the given asset.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="assetId">Unique identifier of a business asset.</param>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="startIndex">An index to start fetching the results from. Only the results starting from this index will be returned. (optional, default to 0)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BusinessAssetMembersGet200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<BusinessAssetMembersGet200Response>> BusinessAssetMembersGetWithHttpInfoAsync(string businessId, string assetId, string? bookmark = default(string?), int? pageSize = default(int?), int? startIndex = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get partners with access to asset
        /// </summary>
        /// <remarks>
        /// Get all the partners the requesting business has granted access to on the given asset. Note: If the asset has been shared with you, an empty array will be returned. This is because an asset shared with you cannot be shared with a different partner.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="assetId">Unique identifier of a business asset.</param>
        /// <param name="startIndex">An index to start fetching the results from. Only the results starting from this index will be returned. (optional, default to 0)</param>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BusinessAssetPartnersGet200Response</returns>
        System.Threading.Tasks.Task<BusinessAssetPartnersGet200Response> BusinessAssetPartnersGetAsync(string businessId, string assetId, int? startIndex = default(int?), string? bookmark = default(string?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get partners with access to asset
        /// </summary>
        /// <remarks>
        /// Get all the partners the requesting business has granted access to on the given asset. Note: If the asset has been shared with you, an empty array will be returned. This is because an asset shared with you cannot be shared with a different partner.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="assetId">Unique identifier of a business asset.</param>
        /// <param name="startIndex">An index to start fetching the results from. Only the results starting from this index will be returned. (optional, default to 0)</param>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BusinessAssetPartnersGet200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<BusinessAssetPartnersGet200Response>> BusinessAssetPartnersGetWithHttpInfoAsync(string businessId, string assetId, int? startIndex = default(int?), string? bookmark = default(string?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List business assets
        /// </summary>
        /// <remarks>
        /// Get all the assets the requesting business has access to. This includes assets the business owns and assets the business has access to through partnerships.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="permissions">A list of asset permissions used to filter the assets. Only assets where the requesting business has at least one of the specified permissions will be returned. (optional)</param>
        /// <param name="childAssetId">A child asset unique identifier. Used to fetch asset groups that contain the asset id as a child. (optional)</param>
        /// <param name="assetGroupId">An asset group unique identifier. Used to fetch assets contained within the specified asset group. (optional)</param>
        /// <param name="assetType">A resource type to filter the assets by. Only assets of the specified type will be returned. (optional, default to AD_ACCOUNT)</param>
        /// <param name="startIndex">An index to start fetching the results from. Only the results starting from this index will be returned. (optional, default to 0)</param>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BusinessAssetsGet200Response</returns>
        System.Threading.Tasks.Task<BusinessAssetsGet200Response> BusinessAssetsGetAsync(string businessId, List<PermissionsWithOwner>? permissions = default(List<PermissionsWithOwner>?), string? childAssetId = default(string?), string? assetGroupId = default(string?), string? assetType = default(string?), int? startIndex = default(int?), string? bookmark = default(string?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List business assets
        /// </summary>
        /// <remarks>
        /// Get all the assets the requesting business has access to. This includes assets the business owns and assets the business has access to through partnerships.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="permissions">A list of asset permissions used to filter the assets. Only assets where the requesting business has at least one of the specified permissions will be returned. (optional)</param>
        /// <param name="childAssetId">A child asset unique identifier. Used to fetch asset groups that contain the asset id as a child. (optional)</param>
        /// <param name="assetGroupId">An asset group unique identifier. Used to fetch assets contained within the specified asset group. (optional)</param>
        /// <param name="assetType">A resource type to filter the assets by. Only assets of the specified type will be returned. (optional, default to AD_ACCOUNT)</param>
        /// <param name="startIndex">An index to start fetching the results from. Only the results starting from this index will be returned. (optional, default to 0)</param>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BusinessAssetsGet200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<BusinessAssetsGet200Response>> BusinessAssetsGetWithHttpInfoAsync(string businessId, List<PermissionsWithOwner>? permissions = default(List<PermissionsWithOwner>?), string? childAssetId = default(string?), string? assetGroupId = default(string?), string? assetType = default(string?), int? startIndex = default(int?), string? bookmark = default(string?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get assets assigned to a member
        /// </summary>
        /// <remarks>
        /// Get assets on which you assigned asset permissions to the given member. Can be used to: - get all assets, regardless of asset type or - get assets of one asset type by using the asset_type query. The return response will include the permissions the member has to that asset and the asset type.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="memberId">The member id to fetch assets for.</param>
        /// <param name="assetType">A resource type to filter the assets by. Only assets of the specified type will be returned. (optional, default to AD_ACCOUNT)</param>
        /// <param name="startIndex">An index to start fetching the results from. Only the results starting from this index will be returned. (optional, default to 0)</param>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BusinessMemberAssetsGet200Response</returns>
        System.Threading.Tasks.Task<BusinessMemberAssetsGet200Response> BusinessMemberAssetsGetAsync(string businessId, string memberId, string? assetType = default(string?), int? startIndex = default(int?), string? bookmark = default(string?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get assets assigned to a member
        /// </summary>
        /// <remarks>
        /// Get assets on which you assigned asset permissions to the given member. Can be used to: - get all assets, regardless of asset type or - get assets of one asset type by using the asset_type query. The return response will include the permissions the member has to that asset and the asset type.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="memberId">The member id to fetch assets for.</param>
        /// <param name="assetType">A resource type to filter the assets by. Only assets of the specified type will be returned. (optional, default to AD_ACCOUNT)</param>
        /// <param name="startIndex">An index to start fetching the results from. Only the results starting from this index will be returned. (optional, default to 0)</param>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BusinessMemberAssetsGet200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<BusinessMemberAssetsGet200Response>> BusinessMemberAssetsGetWithHttpInfoAsync(string businessId, string memberId, string? assetType = default(string?), int? startIndex = default(int?), string? bookmark = default(string?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Delete member access to asset
        /// </summary>
        /// <remarks>
        /// Terminate multiple members&#39; access to an asset.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="businessMembersAssetAccessDeleteRequest">List member assset permissions to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteMemberAccessResultsResponseArray</returns>
        System.Threading.Tasks.Task<DeleteMemberAccessResultsResponseArray> BusinessMembersAssetAccessDeleteAsync(string businessId, BusinessMembersAssetAccessDeleteRequest businessMembersAssetAccessDeleteRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Delete member access to asset
        /// </summary>
        /// <remarks>
        /// Terminate multiple members&#39; access to an asset.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="businessMembersAssetAccessDeleteRequest">List member assset permissions to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteMemberAccessResultsResponseArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteMemberAccessResultsResponseArray>> BusinessMembersAssetAccessDeleteWithHttpInfoAsync(string businessId, BusinessMembersAssetAccessDeleteRequest businessMembersAssetAccessDeleteRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Assign/Update member asset permissions
        /// </summary>
        /// <remarks>
        /// Grant multiple members access to assets and/or update multiple member&#39;s exisiting permissions to an asset. Note: Not all listed permissions are applicable to each asset type. For example, PROFILE_PUBLISHER would not be applicable to an asset of type AD_ACCOUNT. The permission level PROFILE_PUBLISHER is only available to an asset of the type PROFILE. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="updateMemberAssetAccessBody">List of member asset permissions to create or update.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateMemberAssetsResultsResponseArray</returns>
        System.Threading.Tasks.Task<UpdateMemberAssetsResultsResponseArray> BusinessMembersAssetAccessUpdateAsync(string businessId, UpdateMemberAssetAccessBody updateMemberAssetAccessBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Assign/Update member asset permissions
        /// </summary>
        /// <remarks>
        /// Grant multiple members access to assets and/or update multiple member&#39;s exisiting permissions to an asset. Note: Not all listed permissions are applicable to each asset type. For example, PROFILE_PUBLISHER would not be applicable to an asset of type AD_ACCOUNT. The permission level PROFILE_PUBLISHER is only available to an asset of the type PROFILE. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="updateMemberAssetAccessBody">List of member asset permissions to create or update.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateMemberAssetsResultsResponseArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateMemberAssetsResultsResponseArray>> BusinessMembersAssetAccessUpdateWithHttpInfoAsync(string businessId, UpdateMemberAssetAccessBody updateMemberAssetAccessBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get assets assigned to a partner or assets assigned by a partner
        /// </summary>
        /// <remarks>
        /// Can be used to get the business assets your partner has granted you access to or the business assets you have granted your partner access to. If you specify: - partner_type&#x3D;INTERNAL, you will retrieve your business assets that the partner has access to. - partner_type&#x3D;EXTERNAL, you will retrieve the partner&#39;s business assets that the partner has granted you access to.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="partnerId">The partner id to be bound to the Business</param>
        /// <param name="partnerType">Specifies whether to fetch internal or external (shared) partners. If partner_type&#x3D;INTERNAL, the asset being queried is for accesses the partner has to your business assets.&lt;br&gt; If partner_type&#x3D;EXTERNAL, the asset being queried is for the accesses you have to the partner&#39;s business asset. (optional)</param>
        /// <param name="assetType">A resource type to filter the assets by. Only assets of the specified type will be returned. (optional, default to AD_ACCOUNT)</param>
        /// <param name="startIndex">An index to start fetching the results from. Only the results starting from this index will be returned. (optional, default to 0)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BusinessPartnerAssetAccessGet200Response</returns>
        System.Threading.Tasks.Task<BusinessPartnerAssetAccessGet200Response> BusinessPartnerAssetAccessGetAsync(string businessId, string partnerId, PartnerType? partnerType = default(PartnerType?), string? assetType = default(string?), int? startIndex = default(int?), int? pageSize = default(int?), string? bookmark = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get assets assigned to a partner or assets assigned by a partner
        /// </summary>
        /// <remarks>
        /// Can be used to get the business assets your partner has granted you access to or the business assets you have granted your partner access to. If you specify: - partner_type&#x3D;INTERNAL, you will retrieve your business assets that the partner has access to. - partner_type&#x3D;EXTERNAL, you will retrieve the partner&#39;s business assets that the partner has granted you access to.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="partnerId">The partner id to be bound to the Business</param>
        /// <param name="partnerType">Specifies whether to fetch internal or external (shared) partners. If partner_type&#x3D;INTERNAL, the asset being queried is for accesses the partner has to your business assets.&lt;br&gt; If partner_type&#x3D;EXTERNAL, the asset being queried is for the accesses you have to the partner&#39;s business asset. (optional)</param>
        /// <param name="assetType">A resource type to filter the assets by. Only assets of the specified type will be returned. (optional, default to AD_ACCOUNT)</param>
        /// <param name="startIndex">An index to start fetching the results from. Only the results starting from this index will be returned. (optional, default to 0)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BusinessPartnerAssetAccessGet200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<BusinessPartnerAssetAccessGet200Response>> BusinessPartnerAssetAccessGetWithHttpInfoAsync(string businessId, string partnerId, PartnerType? partnerType = default(PartnerType?), string? assetType = default(string?), int? startIndex = default(int?), int? pageSize = default(int?), string? bookmark = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Delete partner access to asset
        /// </summary>
        /// <remarks>
        /// Terminate multiple partners&#39; access to an asset. If - partner_type&#x3D;INTERNAL: You will terminate a partner&#39;s asset access to your business assets. - partner_type&#x3D;EXTERNAL: You will terminate your own access to your partner&#39;s business assets.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="deletePartnerAssetAccessBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeletePartnerAssetsResultsResponseArray</returns>
        System.Threading.Tasks.Task<DeletePartnerAssetsResultsResponseArray> DeletePartnerAssetAccessHandlerImplAsync(string businessId, DeletePartnerAssetAccessBody deletePartnerAssetAccessBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Delete partner access to asset
        /// </summary>
        /// <remarks>
        /// Terminate multiple partners&#39; access to an asset. If - partner_type&#x3D;INTERNAL: You will terminate a partner&#39;s asset access to your business assets. - partner_type&#x3D;EXTERNAL: You will terminate your own access to your partner&#39;s business assets.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="deletePartnerAssetAccessBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeletePartnerAssetsResultsResponseArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeletePartnerAssetsResultsResponseArray>> DeletePartnerAssetAccessHandlerImplWithHttpInfoAsync(string businessId, DeletePartnerAssetAccessBody deletePartnerAssetAccessBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Assign/Update partner asset permissions
        /// </summary>
        /// <remarks>
        /// Grant multiple partners access to assets and/or update multiple partner&#39;s exisiting permissions to an asset. If your partner already had permissions on the asset, they will be overriden with the new permissions you assign to them. To learn more about permission levels, visit https://help.pinterest.com/en/business/article/business-manager-overview  Note: Not all listed permissions are applicable to each asset type. For example, PROFILE_PUBLISHER would not be applicable to an asset of type AD_ACCOUNT. The permission level PROFILE_PUBLISHER is only available to an asset of the type PROFILE.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="updatePartnerAssetAccessBody">A list of assets and permissions to assign to your partners.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdatePartnerAssetsResultsResponseArray</returns>
        System.Threading.Tasks.Task<UpdatePartnerAssetsResultsResponseArray> UpdatePartnerAssetAccessHandlerImplAsync(string businessId, UpdatePartnerAssetAccessBody updatePartnerAssetAccessBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Assign/Update partner asset permissions
        /// </summary>
        /// <remarks>
        /// Grant multiple partners access to assets and/or update multiple partner&#39;s exisiting permissions to an asset. If your partner already had permissions on the asset, they will be overriden with the new permissions you assign to them. To learn more about permission levels, visit https://help.pinterest.com/en/business/article/business-manager-overview  Note: Not all listed permissions are applicable to each asset type. For example, PROFILE_PUBLISHER would not be applicable to an asset of type AD_ACCOUNT. The permission level PROFILE_PUBLISHER is only available to an asset of the type PROFILE.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="updatePartnerAssetAccessBody">A list of assets and permissions to assign to your partners.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdatePartnerAssetsResultsResponseArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdatePartnerAssetsResultsResponseArray>> UpdatePartnerAssetAccessHandlerImplWithHttpInfoAsync(string businessId, UpdatePartnerAssetAccessBody updatePartnerAssetAccessBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBusinessAccessAssetsApi : IBusinessAccessAssetsApiSync, IBusinessAccessAssetsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class BusinessAccessAssetsApi : IBusinessAccessAssetsApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BusinessAccessAssetsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BusinessAccessAssetsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BusinessAccessAssetsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BusinessAccessAssetsApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BusinessAccessAssetsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public BusinessAccessAssetsApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BusinessAccessAssetsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public BusinessAccessAssetsApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create a new asset group. Create a new asset group with the specified parameters. - An &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/asset-groups\&quot;&gt;asset group&lt;/a&gt; is a custom group of assets based on how you’d like to manage your accounts.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="createAssetGroupBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateAssetGroupResponse</returns>
        public CreateAssetGroupResponse AssetGroupCreate(string businessId, CreateAssetGroupBody createAssetGroupBody, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<CreateAssetGroupResponse> localVarResponse = AssetGroupCreateWithHttpInfo(businessId, createAssetGroupBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new asset group. Create a new asset group with the specified parameters. - An &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/asset-groups\&quot;&gt;asset group&lt;/a&gt; is a custom group of assets based on how you’d like to manage your accounts.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="createAssetGroupBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateAssetGroupResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<CreateAssetGroupResponse> AssetGroupCreateWithHttpInfo(string businessId, CreateAssetGroupBody createAssetGroupBody, int operationIndex = 0)
        {
            // verify the required parameter 'businessId' is set
            if (businessId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'businessId' when calling BusinessAccessAssetsApi->AssetGroupCreate");
            }

            // verify the required parameter 'createAssetGroupBody' is set
            if (createAssetGroupBody == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'createAssetGroupBody' when calling BusinessAccessAssetsApi->AssetGroupCreate");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("business_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(businessId)); // path parameter
            localVarRequestOptions.Data = createAssetGroupBody;

            localVarRequestOptions.Operation = "BusinessAccessAssetsApi.AssetGroupCreate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (pinterest_oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateAssetGroupResponse>("/businesses/{business_id}/asset_groups", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetGroupCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new asset group. Create a new asset group with the specified parameters. - An &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/asset-groups\&quot;&gt;asset group&lt;/a&gt; is a custom group of assets based on how you’d like to manage your accounts.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="createAssetGroupBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateAssetGroupResponse</returns>
        public async System.Threading.Tasks.Task<CreateAssetGroupResponse> AssetGroupCreateAsync(string businessId, CreateAssetGroupBody createAssetGroupBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<CreateAssetGroupResponse> localVarResponse = await AssetGroupCreateWithHttpInfoAsync(businessId, createAssetGroupBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new asset group. Create a new asset group with the specified parameters. - An &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/asset-groups\&quot;&gt;asset group&lt;/a&gt; is a custom group of assets based on how you’d like to manage your accounts.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="createAssetGroupBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateAssetGroupResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<CreateAssetGroupResponse>> AssetGroupCreateWithHttpInfoAsync(string businessId, CreateAssetGroupBody createAssetGroupBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'businessId' is set
            if (businessId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'businessId' when calling BusinessAccessAssetsApi->AssetGroupCreate");
            }

            // verify the required parameter 'createAssetGroupBody' is set
            if (createAssetGroupBody == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'createAssetGroupBody' when calling BusinessAccessAssetsApi->AssetGroupCreate");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("business_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(businessId)); // path parameter
            localVarRequestOptions.Data = createAssetGroupBody;

            localVarRequestOptions.Operation = "BusinessAccessAssetsApi.AssetGroupCreate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (pinterest_oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateAssetGroupResponse>("/businesses/{business_id}/asset_groups", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetGroupCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete asset groups. Delete a batch of asset groups.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="deleteAssetGroupBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeleteAssetGroupResponse</returns>
        public DeleteAssetGroupResponse AssetGroupDelete(string businessId, DeleteAssetGroupBody deleteAssetGroupBody, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<DeleteAssetGroupResponse> localVarResponse = AssetGroupDeleteWithHttpInfo(businessId, deleteAssetGroupBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete asset groups. Delete a batch of asset groups.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="deleteAssetGroupBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeleteAssetGroupResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<DeleteAssetGroupResponse> AssetGroupDeleteWithHttpInfo(string businessId, DeleteAssetGroupBody deleteAssetGroupBody, int operationIndex = 0)
        {
            // verify the required parameter 'businessId' is set
            if (businessId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'businessId' when calling BusinessAccessAssetsApi->AssetGroupDelete");
            }

            // verify the required parameter 'deleteAssetGroupBody' is set
            if (deleteAssetGroupBody == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'deleteAssetGroupBody' when calling BusinessAccessAssetsApi->AssetGroupDelete");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("business_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(businessId)); // path parameter
            localVarRequestOptions.Data = deleteAssetGroupBody;

            localVarRequestOptions.Operation = "BusinessAccessAssetsApi.AssetGroupDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (pinterest_oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<DeleteAssetGroupResponse>("/businesses/{business_id}/asset_groups", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetGroupDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete asset groups. Delete a batch of asset groups.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="deleteAssetGroupBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteAssetGroupResponse</returns>
        public async System.Threading.Tasks.Task<DeleteAssetGroupResponse> AssetGroupDeleteAsync(string businessId, DeleteAssetGroupBody deleteAssetGroupBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<DeleteAssetGroupResponse> localVarResponse = await AssetGroupDeleteWithHttpInfoAsync(businessId, deleteAssetGroupBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete asset groups. Delete a batch of asset groups.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="deleteAssetGroupBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteAssetGroupResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<DeleteAssetGroupResponse>> AssetGroupDeleteWithHttpInfoAsync(string businessId, DeleteAssetGroupBody deleteAssetGroupBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'businessId' is set
            if (businessId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'businessId' when calling BusinessAccessAssetsApi->AssetGroupDelete");
            }

            // verify the required parameter 'deleteAssetGroupBody' is set
            if (deleteAssetGroupBody == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'deleteAssetGroupBody' when calling BusinessAccessAssetsApi->AssetGroupDelete");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("business_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(businessId)); // path parameter
            localVarRequestOptions.Data = deleteAssetGroupBody;

            localVarRequestOptions.Operation = "BusinessAccessAssetsApi.AssetGroupDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (pinterest_oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<DeleteAssetGroupResponse>("/businesses/{business_id}/asset_groups", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetGroupDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update asset groups. Update a batch of asset groups with the specified parameters.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="updateAssetGroupBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UpdateAssetGroupResponse</returns>
        public UpdateAssetGroupResponse AssetGroupUpdate(string businessId, UpdateAssetGroupBody updateAssetGroupBody, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<UpdateAssetGroupResponse> localVarResponse = AssetGroupUpdateWithHttpInfo(businessId, updateAssetGroupBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update asset groups. Update a batch of asset groups with the specified parameters.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="updateAssetGroupBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UpdateAssetGroupResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<UpdateAssetGroupResponse> AssetGroupUpdateWithHttpInfo(string businessId, UpdateAssetGroupBody updateAssetGroupBody, int operationIndex = 0)
        {
            // verify the required parameter 'businessId' is set
            if (businessId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'businessId' when calling BusinessAccessAssetsApi->AssetGroupUpdate");
            }

            // verify the required parameter 'updateAssetGroupBody' is set
            if (updateAssetGroupBody == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'updateAssetGroupBody' when calling BusinessAccessAssetsApi->AssetGroupUpdate");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("business_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(businessId)); // path parameter
            localVarRequestOptions.Data = updateAssetGroupBody;

            localVarRequestOptions.Operation = "BusinessAccessAssetsApi.AssetGroupUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (pinterest_oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<UpdateAssetGroupResponse>("/businesses/{business_id}/asset_groups", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetGroupUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update asset groups. Update a batch of asset groups with the specified parameters.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="updateAssetGroupBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateAssetGroupResponse</returns>
        public async System.Threading.Tasks.Task<UpdateAssetGroupResponse> AssetGroupUpdateAsync(string businessId, UpdateAssetGroupBody updateAssetGroupBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<UpdateAssetGroupResponse> localVarResponse = await AssetGroupUpdateWithHttpInfoAsync(businessId, updateAssetGroupBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update asset groups. Update a batch of asset groups with the specified parameters.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="updateAssetGroupBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateAssetGroupResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<UpdateAssetGroupResponse>> AssetGroupUpdateWithHttpInfoAsync(string businessId, UpdateAssetGroupBody updateAssetGroupBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'businessId' is set
            if (businessId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'businessId' when calling BusinessAccessAssetsApi->AssetGroupUpdate");
            }

            // verify the required parameter 'updateAssetGroupBody' is set
            if (updateAssetGroupBody == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'updateAssetGroupBody' when calling BusinessAccessAssetsApi->AssetGroupUpdate");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("business_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(businessId)); // path parameter
            localVarRequestOptions.Data = updateAssetGroupBody;

            localVarRequestOptions.Operation = "BusinessAccessAssetsApi.AssetGroupUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (pinterest_oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<UpdateAssetGroupResponse>("/businesses/{business_id}/asset_groups", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetGroupUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get members with access to asset Get all the members the requesting business has granted access to on the given asset.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="assetId">Unique identifier of a business asset.</param>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="startIndex">An index to start fetching the results from. Only the results starting from this index will be returned. (optional, default to 0)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BusinessAssetMembersGet200Response</returns>
        public BusinessAssetMembersGet200Response BusinessAssetMembersGet(string businessId, string assetId, string? bookmark = default(string?), int? pageSize = default(int?), int? startIndex = default(int?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<BusinessAssetMembersGet200Response> localVarResponse = BusinessAssetMembersGetWithHttpInfo(businessId, assetId, bookmark, pageSize, startIndex);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get members with access to asset Get all the members the requesting business has granted access to on the given asset.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="assetId">Unique identifier of a business asset.</param>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="startIndex">An index to start fetching the results from. Only the results starting from this index will be returned. (optional, default to 0)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BusinessAssetMembersGet200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<BusinessAssetMembersGet200Response> BusinessAssetMembersGetWithHttpInfo(string businessId, string assetId, string? bookmark = default(string?), int? pageSize = default(int?), int? startIndex = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'businessId' is set
            if (businessId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'businessId' when calling BusinessAccessAssetsApi->BusinessAssetMembersGet");
            }

            // verify the required parameter 'assetId' is set
            if (assetId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'assetId' when calling BusinessAccessAssetsApi->BusinessAssetMembersGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("business_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(businessId)); // path parameter
            localVarRequestOptions.PathParameters.Add("asset_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(assetId)); // path parameter
            if (bookmark != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "bookmark", bookmark));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (startIndex != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start_index", startIndex));
            }

            localVarRequestOptions.Operation = "BusinessAccessAssetsApi.BusinessAssetMembersGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (pinterest_oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<BusinessAssetMembersGet200Response>("/businesses/{business_id}/assets/{asset_id}/members", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BusinessAssetMembersGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get members with access to asset Get all the members the requesting business has granted access to on the given asset.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="assetId">Unique identifier of a business asset.</param>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="startIndex">An index to start fetching the results from. Only the results starting from this index will be returned. (optional, default to 0)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BusinessAssetMembersGet200Response</returns>
        public async System.Threading.Tasks.Task<BusinessAssetMembersGet200Response> BusinessAssetMembersGetAsync(string businessId, string assetId, string? bookmark = default(string?), int? pageSize = default(int?), int? startIndex = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<BusinessAssetMembersGet200Response> localVarResponse = await BusinessAssetMembersGetWithHttpInfoAsync(businessId, assetId, bookmark, pageSize, startIndex, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get members with access to asset Get all the members the requesting business has granted access to on the given asset.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="assetId">Unique identifier of a business asset.</param>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="startIndex">An index to start fetching the results from. Only the results starting from this index will be returned. (optional, default to 0)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BusinessAssetMembersGet200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<BusinessAssetMembersGet200Response>> BusinessAssetMembersGetWithHttpInfoAsync(string businessId, string assetId, string? bookmark = default(string?), int? pageSize = default(int?), int? startIndex = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'businessId' is set
            if (businessId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'businessId' when calling BusinessAccessAssetsApi->BusinessAssetMembersGet");
            }

            // verify the required parameter 'assetId' is set
            if (assetId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'assetId' when calling BusinessAccessAssetsApi->BusinessAssetMembersGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("business_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(businessId)); // path parameter
            localVarRequestOptions.PathParameters.Add("asset_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(assetId)); // path parameter
            if (bookmark != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "bookmark", bookmark));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (startIndex != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start_index", startIndex));
            }

            localVarRequestOptions.Operation = "BusinessAccessAssetsApi.BusinessAssetMembersGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (pinterest_oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<BusinessAssetMembersGet200Response>("/businesses/{business_id}/assets/{asset_id}/members", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BusinessAssetMembersGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get partners with access to asset Get all the partners the requesting business has granted access to on the given asset. Note: If the asset has been shared with you, an empty array will be returned. This is because an asset shared with you cannot be shared with a different partner.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="assetId">Unique identifier of a business asset.</param>
        /// <param name="startIndex">An index to start fetching the results from. Only the results starting from this index will be returned. (optional, default to 0)</param>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BusinessAssetPartnersGet200Response</returns>
        public BusinessAssetPartnersGet200Response BusinessAssetPartnersGet(string businessId, string assetId, int? startIndex = default(int?), string? bookmark = default(string?), int? pageSize = default(int?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<BusinessAssetPartnersGet200Response> localVarResponse = BusinessAssetPartnersGetWithHttpInfo(businessId, assetId, startIndex, bookmark, pageSize);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get partners with access to asset Get all the partners the requesting business has granted access to on the given asset. Note: If the asset has been shared with you, an empty array will be returned. This is because an asset shared with you cannot be shared with a different partner.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="assetId">Unique identifier of a business asset.</param>
        /// <param name="startIndex">An index to start fetching the results from. Only the results starting from this index will be returned. (optional, default to 0)</param>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BusinessAssetPartnersGet200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<BusinessAssetPartnersGet200Response> BusinessAssetPartnersGetWithHttpInfo(string businessId, string assetId, int? startIndex = default(int?), string? bookmark = default(string?), int? pageSize = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'businessId' is set
            if (businessId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'businessId' when calling BusinessAccessAssetsApi->BusinessAssetPartnersGet");
            }

            // verify the required parameter 'assetId' is set
            if (assetId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'assetId' when calling BusinessAccessAssetsApi->BusinessAssetPartnersGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("business_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(businessId)); // path parameter
            localVarRequestOptions.PathParameters.Add("asset_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(assetId)); // path parameter
            if (startIndex != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start_index", startIndex));
            }
            if (bookmark != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "bookmark", bookmark));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }

            localVarRequestOptions.Operation = "BusinessAccessAssetsApi.BusinessAssetPartnersGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (pinterest_oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<BusinessAssetPartnersGet200Response>("/businesses/{business_id}/assets/{asset_id}/partners", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BusinessAssetPartnersGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get partners with access to asset Get all the partners the requesting business has granted access to on the given asset. Note: If the asset has been shared with you, an empty array will be returned. This is because an asset shared with you cannot be shared with a different partner.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="assetId">Unique identifier of a business asset.</param>
        /// <param name="startIndex">An index to start fetching the results from. Only the results starting from this index will be returned. (optional, default to 0)</param>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BusinessAssetPartnersGet200Response</returns>
        public async System.Threading.Tasks.Task<BusinessAssetPartnersGet200Response> BusinessAssetPartnersGetAsync(string businessId, string assetId, int? startIndex = default(int?), string? bookmark = default(string?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<BusinessAssetPartnersGet200Response> localVarResponse = await BusinessAssetPartnersGetWithHttpInfoAsync(businessId, assetId, startIndex, bookmark, pageSize, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get partners with access to asset Get all the partners the requesting business has granted access to on the given asset. Note: If the asset has been shared with you, an empty array will be returned. This is because an asset shared with you cannot be shared with a different partner.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="assetId">Unique identifier of a business asset.</param>
        /// <param name="startIndex">An index to start fetching the results from. Only the results starting from this index will be returned. (optional, default to 0)</param>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BusinessAssetPartnersGet200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<BusinessAssetPartnersGet200Response>> BusinessAssetPartnersGetWithHttpInfoAsync(string businessId, string assetId, int? startIndex = default(int?), string? bookmark = default(string?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'businessId' is set
            if (businessId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'businessId' when calling BusinessAccessAssetsApi->BusinessAssetPartnersGet");
            }

            // verify the required parameter 'assetId' is set
            if (assetId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'assetId' when calling BusinessAccessAssetsApi->BusinessAssetPartnersGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("business_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(businessId)); // path parameter
            localVarRequestOptions.PathParameters.Add("asset_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(assetId)); // path parameter
            if (startIndex != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start_index", startIndex));
            }
            if (bookmark != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "bookmark", bookmark));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }

            localVarRequestOptions.Operation = "BusinessAccessAssetsApi.BusinessAssetPartnersGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (pinterest_oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<BusinessAssetPartnersGet200Response>("/businesses/{business_id}/assets/{asset_id}/partners", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BusinessAssetPartnersGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List business assets Get all the assets the requesting business has access to. This includes assets the business owns and assets the business has access to through partnerships.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="permissions">A list of asset permissions used to filter the assets. Only assets where the requesting business has at least one of the specified permissions will be returned. (optional)</param>
        /// <param name="childAssetId">A child asset unique identifier. Used to fetch asset groups that contain the asset id as a child. (optional)</param>
        /// <param name="assetGroupId">An asset group unique identifier. Used to fetch assets contained within the specified asset group. (optional)</param>
        /// <param name="assetType">A resource type to filter the assets by. Only assets of the specified type will be returned. (optional, default to AD_ACCOUNT)</param>
        /// <param name="startIndex">An index to start fetching the results from. Only the results starting from this index will be returned. (optional, default to 0)</param>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BusinessAssetsGet200Response</returns>
        public BusinessAssetsGet200Response BusinessAssetsGet(string businessId, List<PermissionsWithOwner>? permissions = default(List<PermissionsWithOwner>?), string? childAssetId = default(string?), string? assetGroupId = default(string?), string? assetType = default(string?), int? startIndex = default(int?), string? bookmark = default(string?), int? pageSize = default(int?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<BusinessAssetsGet200Response> localVarResponse = BusinessAssetsGetWithHttpInfo(businessId, permissions, childAssetId, assetGroupId, assetType, startIndex, bookmark, pageSize);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List business assets Get all the assets the requesting business has access to. This includes assets the business owns and assets the business has access to through partnerships.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="permissions">A list of asset permissions used to filter the assets. Only assets where the requesting business has at least one of the specified permissions will be returned. (optional)</param>
        /// <param name="childAssetId">A child asset unique identifier. Used to fetch asset groups that contain the asset id as a child. (optional)</param>
        /// <param name="assetGroupId">An asset group unique identifier. Used to fetch assets contained within the specified asset group. (optional)</param>
        /// <param name="assetType">A resource type to filter the assets by. Only assets of the specified type will be returned. (optional, default to AD_ACCOUNT)</param>
        /// <param name="startIndex">An index to start fetching the results from. Only the results starting from this index will be returned. (optional, default to 0)</param>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BusinessAssetsGet200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<BusinessAssetsGet200Response> BusinessAssetsGetWithHttpInfo(string businessId, List<PermissionsWithOwner>? permissions = default(List<PermissionsWithOwner>?), string? childAssetId = default(string?), string? assetGroupId = default(string?), string? assetType = default(string?), int? startIndex = default(int?), string? bookmark = default(string?), int? pageSize = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'businessId' is set
            if (businessId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'businessId' when calling BusinessAccessAssetsApi->BusinessAssetsGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("business_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(businessId)); // path parameter
            if (permissions != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "permissions", permissions));
            }
            if (childAssetId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "child_asset_id", childAssetId));
            }
            if (assetGroupId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "asset_group_id", assetGroupId));
            }
            if (assetType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "asset_type", assetType));
            }
            if (startIndex != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start_index", startIndex));
            }
            if (bookmark != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "bookmark", bookmark));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }

            localVarRequestOptions.Operation = "BusinessAccessAssetsApi.BusinessAssetsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (pinterest_oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<BusinessAssetsGet200Response>("/businesses/{business_id}/assets", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BusinessAssetsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List business assets Get all the assets the requesting business has access to. This includes assets the business owns and assets the business has access to through partnerships.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="permissions">A list of asset permissions used to filter the assets. Only assets where the requesting business has at least one of the specified permissions will be returned. (optional)</param>
        /// <param name="childAssetId">A child asset unique identifier. Used to fetch asset groups that contain the asset id as a child. (optional)</param>
        /// <param name="assetGroupId">An asset group unique identifier. Used to fetch assets contained within the specified asset group. (optional)</param>
        /// <param name="assetType">A resource type to filter the assets by. Only assets of the specified type will be returned. (optional, default to AD_ACCOUNT)</param>
        /// <param name="startIndex">An index to start fetching the results from. Only the results starting from this index will be returned. (optional, default to 0)</param>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BusinessAssetsGet200Response</returns>
        public async System.Threading.Tasks.Task<BusinessAssetsGet200Response> BusinessAssetsGetAsync(string businessId, List<PermissionsWithOwner>? permissions = default(List<PermissionsWithOwner>?), string? childAssetId = default(string?), string? assetGroupId = default(string?), string? assetType = default(string?), int? startIndex = default(int?), string? bookmark = default(string?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<BusinessAssetsGet200Response> localVarResponse = await BusinessAssetsGetWithHttpInfoAsync(businessId, permissions, childAssetId, assetGroupId, assetType, startIndex, bookmark, pageSize, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List business assets Get all the assets the requesting business has access to. This includes assets the business owns and assets the business has access to through partnerships.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="permissions">A list of asset permissions used to filter the assets. Only assets where the requesting business has at least one of the specified permissions will be returned. (optional)</param>
        /// <param name="childAssetId">A child asset unique identifier. Used to fetch asset groups that contain the asset id as a child. (optional)</param>
        /// <param name="assetGroupId">An asset group unique identifier. Used to fetch assets contained within the specified asset group. (optional)</param>
        /// <param name="assetType">A resource type to filter the assets by. Only assets of the specified type will be returned. (optional, default to AD_ACCOUNT)</param>
        /// <param name="startIndex">An index to start fetching the results from. Only the results starting from this index will be returned. (optional, default to 0)</param>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BusinessAssetsGet200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<BusinessAssetsGet200Response>> BusinessAssetsGetWithHttpInfoAsync(string businessId, List<PermissionsWithOwner>? permissions = default(List<PermissionsWithOwner>?), string? childAssetId = default(string?), string? assetGroupId = default(string?), string? assetType = default(string?), int? startIndex = default(int?), string? bookmark = default(string?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'businessId' is set
            if (businessId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'businessId' when calling BusinessAccessAssetsApi->BusinessAssetsGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("business_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(businessId)); // path parameter
            if (permissions != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "permissions", permissions));
            }
            if (childAssetId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "child_asset_id", childAssetId));
            }
            if (assetGroupId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "asset_group_id", assetGroupId));
            }
            if (assetType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "asset_type", assetType));
            }
            if (startIndex != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start_index", startIndex));
            }
            if (bookmark != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "bookmark", bookmark));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }

            localVarRequestOptions.Operation = "BusinessAccessAssetsApi.BusinessAssetsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (pinterest_oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<BusinessAssetsGet200Response>("/businesses/{business_id}/assets", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BusinessAssetsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get assets assigned to a member Get assets on which you assigned asset permissions to the given member. Can be used to: - get all assets, regardless of asset type or - get assets of one asset type by using the asset_type query. The return response will include the permissions the member has to that asset and the asset type.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="memberId">The member id to fetch assets for.</param>
        /// <param name="assetType">A resource type to filter the assets by. Only assets of the specified type will be returned. (optional, default to AD_ACCOUNT)</param>
        /// <param name="startIndex">An index to start fetching the results from. Only the results starting from this index will be returned. (optional, default to 0)</param>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BusinessMemberAssetsGet200Response</returns>
        public BusinessMemberAssetsGet200Response BusinessMemberAssetsGet(string businessId, string memberId, string? assetType = default(string?), int? startIndex = default(int?), string? bookmark = default(string?), int? pageSize = default(int?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<BusinessMemberAssetsGet200Response> localVarResponse = BusinessMemberAssetsGetWithHttpInfo(businessId, memberId, assetType, startIndex, bookmark, pageSize);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get assets assigned to a member Get assets on which you assigned asset permissions to the given member. Can be used to: - get all assets, regardless of asset type or - get assets of one asset type by using the asset_type query. The return response will include the permissions the member has to that asset and the asset type.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="memberId">The member id to fetch assets for.</param>
        /// <param name="assetType">A resource type to filter the assets by. Only assets of the specified type will be returned. (optional, default to AD_ACCOUNT)</param>
        /// <param name="startIndex">An index to start fetching the results from. Only the results starting from this index will be returned. (optional, default to 0)</param>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BusinessMemberAssetsGet200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<BusinessMemberAssetsGet200Response> BusinessMemberAssetsGetWithHttpInfo(string businessId, string memberId, string? assetType = default(string?), int? startIndex = default(int?), string? bookmark = default(string?), int? pageSize = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'businessId' is set
            if (businessId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'businessId' when calling BusinessAccessAssetsApi->BusinessMemberAssetsGet");
            }

            // verify the required parameter 'memberId' is set
            if (memberId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'memberId' when calling BusinessAccessAssetsApi->BusinessMemberAssetsGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("business_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(businessId)); // path parameter
            localVarRequestOptions.PathParameters.Add("member_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(memberId)); // path parameter
            if (assetType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "asset_type", assetType));
            }
            if (startIndex != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start_index", startIndex));
            }
            if (bookmark != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "bookmark", bookmark));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }

            localVarRequestOptions.Operation = "BusinessAccessAssetsApi.BusinessMemberAssetsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (pinterest_oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<BusinessMemberAssetsGet200Response>("/businesses/{business_id}/members/{member_id}/assets", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BusinessMemberAssetsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get assets assigned to a member Get assets on which you assigned asset permissions to the given member. Can be used to: - get all assets, regardless of asset type or - get assets of one asset type by using the asset_type query. The return response will include the permissions the member has to that asset and the asset type.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="memberId">The member id to fetch assets for.</param>
        /// <param name="assetType">A resource type to filter the assets by. Only assets of the specified type will be returned. (optional, default to AD_ACCOUNT)</param>
        /// <param name="startIndex">An index to start fetching the results from. Only the results starting from this index will be returned. (optional, default to 0)</param>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BusinessMemberAssetsGet200Response</returns>
        public async System.Threading.Tasks.Task<BusinessMemberAssetsGet200Response> BusinessMemberAssetsGetAsync(string businessId, string memberId, string? assetType = default(string?), int? startIndex = default(int?), string? bookmark = default(string?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<BusinessMemberAssetsGet200Response> localVarResponse = await BusinessMemberAssetsGetWithHttpInfoAsync(businessId, memberId, assetType, startIndex, bookmark, pageSize, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get assets assigned to a member Get assets on which you assigned asset permissions to the given member. Can be used to: - get all assets, regardless of asset type or - get assets of one asset type by using the asset_type query. The return response will include the permissions the member has to that asset and the asset type.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="memberId">The member id to fetch assets for.</param>
        /// <param name="assetType">A resource type to filter the assets by. Only assets of the specified type will be returned. (optional, default to AD_ACCOUNT)</param>
        /// <param name="startIndex">An index to start fetching the results from. Only the results starting from this index will be returned. (optional, default to 0)</param>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BusinessMemberAssetsGet200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<BusinessMemberAssetsGet200Response>> BusinessMemberAssetsGetWithHttpInfoAsync(string businessId, string memberId, string? assetType = default(string?), int? startIndex = default(int?), string? bookmark = default(string?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'businessId' is set
            if (businessId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'businessId' when calling BusinessAccessAssetsApi->BusinessMemberAssetsGet");
            }

            // verify the required parameter 'memberId' is set
            if (memberId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'memberId' when calling BusinessAccessAssetsApi->BusinessMemberAssetsGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("business_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(businessId)); // path parameter
            localVarRequestOptions.PathParameters.Add("member_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(memberId)); // path parameter
            if (assetType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "asset_type", assetType));
            }
            if (startIndex != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start_index", startIndex));
            }
            if (bookmark != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "bookmark", bookmark));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }

            localVarRequestOptions.Operation = "BusinessAccessAssetsApi.BusinessMemberAssetsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (pinterest_oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<BusinessMemberAssetsGet200Response>("/businesses/{business_id}/members/{member_id}/assets", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BusinessMemberAssetsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete member access to asset Terminate multiple members&#39; access to an asset.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="businessMembersAssetAccessDeleteRequest">List member assset permissions to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeleteMemberAccessResultsResponseArray</returns>
        public DeleteMemberAccessResultsResponseArray BusinessMembersAssetAccessDelete(string businessId, BusinessMembersAssetAccessDeleteRequest businessMembersAssetAccessDeleteRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<DeleteMemberAccessResultsResponseArray> localVarResponse = BusinessMembersAssetAccessDeleteWithHttpInfo(businessId, businessMembersAssetAccessDeleteRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete member access to asset Terminate multiple members&#39; access to an asset.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="businessMembersAssetAccessDeleteRequest">List member assset permissions to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeleteMemberAccessResultsResponseArray</returns>
        public Org.OpenAPITools.Client.ApiResponse<DeleteMemberAccessResultsResponseArray> BusinessMembersAssetAccessDeleteWithHttpInfo(string businessId, BusinessMembersAssetAccessDeleteRequest businessMembersAssetAccessDeleteRequest, int operationIndex = 0)
        {
            // verify the required parameter 'businessId' is set
            if (businessId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'businessId' when calling BusinessAccessAssetsApi->BusinessMembersAssetAccessDelete");
            }

            // verify the required parameter 'businessMembersAssetAccessDeleteRequest' is set
            if (businessMembersAssetAccessDeleteRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'businessMembersAssetAccessDeleteRequest' when calling BusinessAccessAssetsApi->BusinessMembersAssetAccessDelete");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("business_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(businessId)); // path parameter
            localVarRequestOptions.Data = businessMembersAssetAccessDeleteRequest;

            localVarRequestOptions.Operation = "BusinessAccessAssetsApi.BusinessMembersAssetAccessDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (pinterest_oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<DeleteMemberAccessResultsResponseArray>("/businesses/{business_id}/members/assets/access", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BusinessMembersAssetAccessDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete member access to asset Terminate multiple members&#39; access to an asset.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="businessMembersAssetAccessDeleteRequest">List member assset permissions to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteMemberAccessResultsResponseArray</returns>
        public async System.Threading.Tasks.Task<DeleteMemberAccessResultsResponseArray> BusinessMembersAssetAccessDeleteAsync(string businessId, BusinessMembersAssetAccessDeleteRequest businessMembersAssetAccessDeleteRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<DeleteMemberAccessResultsResponseArray> localVarResponse = await BusinessMembersAssetAccessDeleteWithHttpInfoAsync(businessId, businessMembersAssetAccessDeleteRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete member access to asset Terminate multiple members&#39; access to an asset.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="businessMembersAssetAccessDeleteRequest">List member assset permissions to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteMemberAccessResultsResponseArray)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<DeleteMemberAccessResultsResponseArray>> BusinessMembersAssetAccessDeleteWithHttpInfoAsync(string businessId, BusinessMembersAssetAccessDeleteRequest businessMembersAssetAccessDeleteRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'businessId' is set
            if (businessId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'businessId' when calling BusinessAccessAssetsApi->BusinessMembersAssetAccessDelete");
            }

            // verify the required parameter 'businessMembersAssetAccessDeleteRequest' is set
            if (businessMembersAssetAccessDeleteRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'businessMembersAssetAccessDeleteRequest' when calling BusinessAccessAssetsApi->BusinessMembersAssetAccessDelete");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("business_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(businessId)); // path parameter
            localVarRequestOptions.Data = businessMembersAssetAccessDeleteRequest;

            localVarRequestOptions.Operation = "BusinessAccessAssetsApi.BusinessMembersAssetAccessDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (pinterest_oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<DeleteMemberAccessResultsResponseArray>("/businesses/{business_id}/members/assets/access", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BusinessMembersAssetAccessDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Assign/Update member asset permissions Grant multiple members access to assets and/or update multiple member&#39;s exisiting permissions to an asset. Note: Not all listed permissions are applicable to each asset type. For example, PROFILE_PUBLISHER would not be applicable to an asset of type AD_ACCOUNT. The permission level PROFILE_PUBLISHER is only available to an asset of the type PROFILE. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="updateMemberAssetAccessBody">List of member asset permissions to create or update.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UpdateMemberAssetsResultsResponseArray</returns>
        public UpdateMemberAssetsResultsResponseArray BusinessMembersAssetAccessUpdate(string businessId, UpdateMemberAssetAccessBody updateMemberAssetAccessBody, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<UpdateMemberAssetsResultsResponseArray> localVarResponse = BusinessMembersAssetAccessUpdateWithHttpInfo(businessId, updateMemberAssetAccessBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Assign/Update member asset permissions Grant multiple members access to assets and/or update multiple member&#39;s exisiting permissions to an asset. Note: Not all listed permissions are applicable to each asset type. For example, PROFILE_PUBLISHER would not be applicable to an asset of type AD_ACCOUNT. The permission level PROFILE_PUBLISHER is only available to an asset of the type PROFILE. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="updateMemberAssetAccessBody">List of member asset permissions to create or update.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UpdateMemberAssetsResultsResponseArray</returns>
        public Org.OpenAPITools.Client.ApiResponse<UpdateMemberAssetsResultsResponseArray> BusinessMembersAssetAccessUpdateWithHttpInfo(string businessId, UpdateMemberAssetAccessBody updateMemberAssetAccessBody, int operationIndex = 0)
        {
            // verify the required parameter 'businessId' is set
            if (businessId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'businessId' when calling BusinessAccessAssetsApi->BusinessMembersAssetAccessUpdate");
            }

            // verify the required parameter 'updateMemberAssetAccessBody' is set
            if (updateMemberAssetAccessBody == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'updateMemberAssetAccessBody' when calling BusinessAccessAssetsApi->BusinessMembersAssetAccessUpdate");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("business_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(businessId)); // path parameter
            localVarRequestOptions.Data = updateMemberAssetAccessBody;

            localVarRequestOptions.Operation = "BusinessAccessAssetsApi.BusinessMembersAssetAccessUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (pinterest_oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<UpdateMemberAssetsResultsResponseArray>("/businesses/{business_id}/members/assets/access", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BusinessMembersAssetAccessUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Assign/Update member asset permissions Grant multiple members access to assets and/or update multiple member&#39;s exisiting permissions to an asset. Note: Not all listed permissions are applicable to each asset type. For example, PROFILE_PUBLISHER would not be applicable to an asset of type AD_ACCOUNT. The permission level PROFILE_PUBLISHER is only available to an asset of the type PROFILE. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="updateMemberAssetAccessBody">List of member asset permissions to create or update.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateMemberAssetsResultsResponseArray</returns>
        public async System.Threading.Tasks.Task<UpdateMemberAssetsResultsResponseArray> BusinessMembersAssetAccessUpdateAsync(string businessId, UpdateMemberAssetAccessBody updateMemberAssetAccessBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<UpdateMemberAssetsResultsResponseArray> localVarResponse = await BusinessMembersAssetAccessUpdateWithHttpInfoAsync(businessId, updateMemberAssetAccessBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Assign/Update member asset permissions Grant multiple members access to assets and/or update multiple member&#39;s exisiting permissions to an asset. Note: Not all listed permissions are applicable to each asset type. For example, PROFILE_PUBLISHER would not be applicable to an asset of type AD_ACCOUNT. The permission level PROFILE_PUBLISHER is only available to an asset of the type PROFILE. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="updateMemberAssetAccessBody">List of member asset permissions to create or update.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateMemberAssetsResultsResponseArray)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<UpdateMemberAssetsResultsResponseArray>> BusinessMembersAssetAccessUpdateWithHttpInfoAsync(string businessId, UpdateMemberAssetAccessBody updateMemberAssetAccessBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'businessId' is set
            if (businessId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'businessId' when calling BusinessAccessAssetsApi->BusinessMembersAssetAccessUpdate");
            }

            // verify the required parameter 'updateMemberAssetAccessBody' is set
            if (updateMemberAssetAccessBody == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'updateMemberAssetAccessBody' when calling BusinessAccessAssetsApi->BusinessMembersAssetAccessUpdate");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("business_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(businessId)); // path parameter
            localVarRequestOptions.Data = updateMemberAssetAccessBody;

            localVarRequestOptions.Operation = "BusinessAccessAssetsApi.BusinessMembersAssetAccessUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (pinterest_oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<UpdateMemberAssetsResultsResponseArray>("/businesses/{business_id}/members/assets/access", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BusinessMembersAssetAccessUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get assets assigned to a partner or assets assigned by a partner Can be used to get the business assets your partner has granted you access to or the business assets you have granted your partner access to. If you specify: - partner_type&#x3D;INTERNAL, you will retrieve your business assets that the partner has access to. - partner_type&#x3D;EXTERNAL, you will retrieve the partner&#39;s business assets that the partner has granted you access to.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="partnerId">The partner id to be bound to the Business</param>
        /// <param name="partnerType">Specifies whether to fetch internal or external (shared) partners. If partner_type&#x3D;INTERNAL, the asset being queried is for accesses the partner has to your business assets.&lt;br&gt; If partner_type&#x3D;EXTERNAL, the asset being queried is for the accesses you have to the partner&#39;s business asset. (optional)</param>
        /// <param name="assetType">A resource type to filter the assets by. Only assets of the specified type will be returned. (optional, default to AD_ACCOUNT)</param>
        /// <param name="startIndex">An index to start fetching the results from. Only the results starting from this index will be returned. (optional, default to 0)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BusinessPartnerAssetAccessGet200Response</returns>
        public BusinessPartnerAssetAccessGet200Response BusinessPartnerAssetAccessGet(string businessId, string partnerId, PartnerType? partnerType = default(PartnerType?), string? assetType = default(string?), int? startIndex = default(int?), int? pageSize = default(int?), string? bookmark = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<BusinessPartnerAssetAccessGet200Response> localVarResponse = BusinessPartnerAssetAccessGetWithHttpInfo(businessId, partnerId, partnerType, assetType, startIndex, pageSize, bookmark);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get assets assigned to a partner or assets assigned by a partner Can be used to get the business assets your partner has granted you access to or the business assets you have granted your partner access to. If you specify: - partner_type&#x3D;INTERNAL, you will retrieve your business assets that the partner has access to. - partner_type&#x3D;EXTERNAL, you will retrieve the partner&#39;s business assets that the partner has granted you access to.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="partnerId">The partner id to be bound to the Business</param>
        /// <param name="partnerType">Specifies whether to fetch internal or external (shared) partners. If partner_type&#x3D;INTERNAL, the asset being queried is for accesses the partner has to your business assets.&lt;br&gt; If partner_type&#x3D;EXTERNAL, the asset being queried is for the accesses you have to the partner&#39;s business asset. (optional)</param>
        /// <param name="assetType">A resource type to filter the assets by. Only assets of the specified type will be returned. (optional, default to AD_ACCOUNT)</param>
        /// <param name="startIndex">An index to start fetching the results from. Only the results starting from this index will be returned. (optional, default to 0)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BusinessPartnerAssetAccessGet200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<BusinessPartnerAssetAccessGet200Response> BusinessPartnerAssetAccessGetWithHttpInfo(string businessId, string partnerId, PartnerType? partnerType = default(PartnerType?), string? assetType = default(string?), int? startIndex = default(int?), int? pageSize = default(int?), string? bookmark = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'businessId' is set
            if (businessId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'businessId' when calling BusinessAccessAssetsApi->BusinessPartnerAssetAccessGet");
            }

            // verify the required parameter 'partnerId' is set
            if (partnerId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'partnerId' when calling BusinessAccessAssetsApi->BusinessPartnerAssetAccessGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("business_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(businessId)); // path parameter
            localVarRequestOptions.PathParameters.Add("partner_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(partnerId)); // path parameter
            if (partnerType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "partner_type", partnerType));
            }
            if (assetType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "asset_type", assetType));
            }
            if (startIndex != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start_index", startIndex));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (bookmark != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "bookmark", bookmark));
            }

            localVarRequestOptions.Operation = "BusinessAccessAssetsApi.BusinessPartnerAssetAccessGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (pinterest_oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<BusinessPartnerAssetAccessGet200Response>("/businesses/{business_id}/partners/{partner_id}/assets", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BusinessPartnerAssetAccessGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get assets assigned to a partner or assets assigned by a partner Can be used to get the business assets your partner has granted you access to or the business assets you have granted your partner access to. If you specify: - partner_type&#x3D;INTERNAL, you will retrieve your business assets that the partner has access to. - partner_type&#x3D;EXTERNAL, you will retrieve the partner&#39;s business assets that the partner has granted you access to.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="partnerId">The partner id to be bound to the Business</param>
        /// <param name="partnerType">Specifies whether to fetch internal or external (shared) partners. If partner_type&#x3D;INTERNAL, the asset being queried is for accesses the partner has to your business assets.&lt;br&gt; If partner_type&#x3D;EXTERNAL, the asset being queried is for the accesses you have to the partner&#39;s business asset. (optional)</param>
        /// <param name="assetType">A resource type to filter the assets by. Only assets of the specified type will be returned. (optional, default to AD_ACCOUNT)</param>
        /// <param name="startIndex">An index to start fetching the results from. Only the results starting from this index will be returned. (optional, default to 0)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BusinessPartnerAssetAccessGet200Response</returns>
        public async System.Threading.Tasks.Task<BusinessPartnerAssetAccessGet200Response> BusinessPartnerAssetAccessGetAsync(string businessId, string partnerId, PartnerType? partnerType = default(PartnerType?), string? assetType = default(string?), int? startIndex = default(int?), int? pageSize = default(int?), string? bookmark = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<BusinessPartnerAssetAccessGet200Response> localVarResponse = await BusinessPartnerAssetAccessGetWithHttpInfoAsync(businessId, partnerId, partnerType, assetType, startIndex, pageSize, bookmark, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get assets assigned to a partner or assets assigned by a partner Can be used to get the business assets your partner has granted you access to or the business assets you have granted your partner access to. If you specify: - partner_type&#x3D;INTERNAL, you will retrieve your business assets that the partner has access to. - partner_type&#x3D;EXTERNAL, you will retrieve the partner&#39;s business assets that the partner has granted you access to.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="partnerId">The partner id to be bound to the Business</param>
        /// <param name="partnerType">Specifies whether to fetch internal or external (shared) partners. If partner_type&#x3D;INTERNAL, the asset being queried is for accesses the partner has to your business assets.&lt;br&gt; If partner_type&#x3D;EXTERNAL, the asset being queried is for the accesses you have to the partner&#39;s business asset. (optional)</param>
        /// <param name="assetType">A resource type to filter the assets by. Only assets of the specified type will be returned. (optional, default to AD_ACCOUNT)</param>
        /// <param name="startIndex">An index to start fetching the results from. Only the results starting from this index will be returned. (optional, default to 0)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BusinessPartnerAssetAccessGet200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<BusinessPartnerAssetAccessGet200Response>> BusinessPartnerAssetAccessGetWithHttpInfoAsync(string businessId, string partnerId, PartnerType? partnerType = default(PartnerType?), string? assetType = default(string?), int? startIndex = default(int?), int? pageSize = default(int?), string? bookmark = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'businessId' is set
            if (businessId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'businessId' when calling BusinessAccessAssetsApi->BusinessPartnerAssetAccessGet");
            }

            // verify the required parameter 'partnerId' is set
            if (partnerId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'partnerId' when calling BusinessAccessAssetsApi->BusinessPartnerAssetAccessGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("business_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(businessId)); // path parameter
            localVarRequestOptions.PathParameters.Add("partner_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(partnerId)); // path parameter
            if (partnerType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "partner_type", partnerType));
            }
            if (assetType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "asset_type", assetType));
            }
            if (startIndex != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start_index", startIndex));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (bookmark != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "bookmark", bookmark));
            }

            localVarRequestOptions.Operation = "BusinessAccessAssetsApi.BusinessPartnerAssetAccessGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (pinterest_oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<BusinessPartnerAssetAccessGet200Response>("/businesses/{business_id}/partners/{partner_id}/assets", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BusinessPartnerAssetAccessGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete partner access to asset Terminate multiple partners&#39; access to an asset. If - partner_type&#x3D;INTERNAL: You will terminate a partner&#39;s asset access to your business assets. - partner_type&#x3D;EXTERNAL: You will terminate your own access to your partner&#39;s business assets.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="deletePartnerAssetAccessBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeletePartnerAssetsResultsResponseArray</returns>
        public DeletePartnerAssetsResultsResponseArray DeletePartnerAssetAccessHandlerImpl(string businessId, DeletePartnerAssetAccessBody deletePartnerAssetAccessBody, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<DeletePartnerAssetsResultsResponseArray> localVarResponse = DeletePartnerAssetAccessHandlerImplWithHttpInfo(businessId, deletePartnerAssetAccessBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete partner access to asset Terminate multiple partners&#39; access to an asset. If - partner_type&#x3D;INTERNAL: You will terminate a partner&#39;s asset access to your business assets. - partner_type&#x3D;EXTERNAL: You will terminate your own access to your partner&#39;s business assets.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="deletePartnerAssetAccessBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeletePartnerAssetsResultsResponseArray</returns>
        public Org.OpenAPITools.Client.ApiResponse<DeletePartnerAssetsResultsResponseArray> DeletePartnerAssetAccessHandlerImplWithHttpInfo(string businessId, DeletePartnerAssetAccessBody deletePartnerAssetAccessBody, int operationIndex = 0)
        {
            // verify the required parameter 'businessId' is set
            if (businessId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'businessId' when calling BusinessAccessAssetsApi->DeletePartnerAssetAccessHandlerImpl");
            }

            // verify the required parameter 'deletePartnerAssetAccessBody' is set
            if (deletePartnerAssetAccessBody == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'deletePartnerAssetAccessBody' when calling BusinessAccessAssetsApi->DeletePartnerAssetAccessHandlerImpl");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("business_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(businessId)); // path parameter
            localVarRequestOptions.Data = deletePartnerAssetAccessBody;

            localVarRequestOptions.Operation = "BusinessAccessAssetsApi.DeletePartnerAssetAccessHandlerImpl";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (pinterest_oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<DeletePartnerAssetsResultsResponseArray>("/businesses/{business_id}/partners/assets", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeletePartnerAssetAccessHandlerImpl", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete partner access to asset Terminate multiple partners&#39; access to an asset. If - partner_type&#x3D;INTERNAL: You will terminate a partner&#39;s asset access to your business assets. - partner_type&#x3D;EXTERNAL: You will terminate your own access to your partner&#39;s business assets.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="deletePartnerAssetAccessBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeletePartnerAssetsResultsResponseArray</returns>
        public async System.Threading.Tasks.Task<DeletePartnerAssetsResultsResponseArray> DeletePartnerAssetAccessHandlerImplAsync(string businessId, DeletePartnerAssetAccessBody deletePartnerAssetAccessBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<DeletePartnerAssetsResultsResponseArray> localVarResponse = await DeletePartnerAssetAccessHandlerImplWithHttpInfoAsync(businessId, deletePartnerAssetAccessBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete partner access to asset Terminate multiple partners&#39; access to an asset. If - partner_type&#x3D;INTERNAL: You will terminate a partner&#39;s asset access to your business assets. - partner_type&#x3D;EXTERNAL: You will terminate your own access to your partner&#39;s business assets.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="deletePartnerAssetAccessBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeletePartnerAssetsResultsResponseArray)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<DeletePartnerAssetsResultsResponseArray>> DeletePartnerAssetAccessHandlerImplWithHttpInfoAsync(string businessId, DeletePartnerAssetAccessBody deletePartnerAssetAccessBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'businessId' is set
            if (businessId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'businessId' when calling BusinessAccessAssetsApi->DeletePartnerAssetAccessHandlerImpl");
            }

            // verify the required parameter 'deletePartnerAssetAccessBody' is set
            if (deletePartnerAssetAccessBody == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'deletePartnerAssetAccessBody' when calling BusinessAccessAssetsApi->DeletePartnerAssetAccessHandlerImpl");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("business_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(businessId)); // path parameter
            localVarRequestOptions.Data = deletePartnerAssetAccessBody;

            localVarRequestOptions.Operation = "BusinessAccessAssetsApi.DeletePartnerAssetAccessHandlerImpl";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (pinterest_oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<DeletePartnerAssetsResultsResponseArray>("/businesses/{business_id}/partners/assets", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeletePartnerAssetAccessHandlerImpl", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Assign/Update partner asset permissions Grant multiple partners access to assets and/or update multiple partner&#39;s exisiting permissions to an asset. If your partner already had permissions on the asset, they will be overriden with the new permissions you assign to them. To learn more about permission levels, visit https://help.pinterest.com/en/business/article/business-manager-overview  Note: Not all listed permissions are applicable to each asset type. For example, PROFILE_PUBLISHER would not be applicable to an asset of type AD_ACCOUNT. The permission level PROFILE_PUBLISHER is only available to an asset of the type PROFILE.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="updatePartnerAssetAccessBody">A list of assets and permissions to assign to your partners.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UpdatePartnerAssetsResultsResponseArray</returns>
        public UpdatePartnerAssetsResultsResponseArray UpdatePartnerAssetAccessHandlerImpl(string businessId, UpdatePartnerAssetAccessBody updatePartnerAssetAccessBody, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<UpdatePartnerAssetsResultsResponseArray> localVarResponse = UpdatePartnerAssetAccessHandlerImplWithHttpInfo(businessId, updatePartnerAssetAccessBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Assign/Update partner asset permissions Grant multiple partners access to assets and/or update multiple partner&#39;s exisiting permissions to an asset. If your partner already had permissions on the asset, they will be overriden with the new permissions you assign to them. To learn more about permission levels, visit https://help.pinterest.com/en/business/article/business-manager-overview  Note: Not all listed permissions are applicable to each asset type. For example, PROFILE_PUBLISHER would not be applicable to an asset of type AD_ACCOUNT. The permission level PROFILE_PUBLISHER is only available to an asset of the type PROFILE.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="updatePartnerAssetAccessBody">A list of assets and permissions to assign to your partners.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UpdatePartnerAssetsResultsResponseArray</returns>
        public Org.OpenAPITools.Client.ApiResponse<UpdatePartnerAssetsResultsResponseArray> UpdatePartnerAssetAccessHandlerImplWithHttpInfo(string businessId, UpdatePartnerAssetAccessBody updatePartnerAssetAccessBody, int operationIndex = 0)
        {
            // verify the required parameter 'businessId' is set
            if (businessId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'businessId' when calling BusinessAccessAssetsApi->UpdatePartnerAssetAccessHandlerImpl");
            }

            // verify the required parameter 'updatePartnerAssetAccessBody' is set
            if (updatePartnerAssetAccessBody == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'updatePartnerAssetAccessBody' when calling BusinessAccessAssetsApi->UpdatePartnerAssetAccessHandlerImpl");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("business_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(businessId)); // path parameter
            localVarRequestOptions.Data = updatePartnerAssetAccessBody;

            localVarRequestOptions.Operation = "BusinessAccessAssetsApi.UpdatePartnerAssetAccessHandlerImpl";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (pinterest_oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<UpdatePartnerAssetsResultsResponseArray>("/businesses/{business_id}/partners/assets", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdatePartnerAssetAccessHandlerImpl", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Assign/Update partner asset permissions Grant multiple partners access to assets and/or update multiple partner&#39;s exisiting permissions to an asset. If your partner already had permissions on the asset, they will be overriden with the new permissions you assign to them. To learn more about permission levels, visit https://help.pinterest.com/en/business/article/business-manager-overview  Note: Not all listed permissions are applicable to each asset type. For example, PROFILE_PUBLISHER would not be applicable to an asset of type AD_ACCOUNT. The permission level PROFILE_PUBLISHER is only available to an asset of the type PROFILE.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="updatePartnerAssetAccessBody">A list of assets and permissions to assign to your partners.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdatePartnerAssetsResultsResponseArray</returns>
        public async System.Threading.Tasks.Task<UpdatePartnerAssetsResultsResponseArray> UpdatePartnerAssetAccessHandlerImplAsync(string businessId, UpdatePartnerAssetAccessBody updatePartnerAssetAccessBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<UpdatePartnerAssetsResultsResponseArray> localVarResponse = await UpdatePartnerAssetAccessHandlerImplWithHttpInfoAsync(businessId, updatePartnerAssetAccessBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Assign/Update partner asset permissions Grant multiple partners access to assets and/or update multiple partner&#39;s exisiting permissions to an asset. If your partner already had permissions on the asset, they will be overriden with the new permissions you assign to them. To learn more about permission levels, visit https://help.pinterest.com/en/business/article/business-manager-overview  Note: Not all listed permissions are applicable to each asset type. For example, PROFILE_PUBLISHER would not be applicable to an asset of type AD_ACCOUNT. The permission level PROFILE_PUBLISHER is only available to an asset of the type PROFILE.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="updatePartnerAssetAccessBody">A list of assets and permissions to assign to your partners.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdatePartnerAssetsResultsResponseArray)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<UpdatePartnerAssetsResultsResponseArray>> UpdatePartnerAssetAccessHandlerImplWithHttpInfoAsync(string businessId, UpdatePartnerAssetAccessBody updatePartnerAssetAccessBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'businessId' is set
            if (businessId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'businessId' when calling BusinessAccessAssetsApi->UpdatePartnerAssetAccessHandlerImpl");
            }

            // verify the required parameter 'updatePartnerAssetAccessBody' is set
            if (updatePartnerAssetAccessBody == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'updatePartnerAssetAccessBody' when calling BusinessAccessAssetsApi->UpdatePartnerAssetAccessHandlerImpl");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("business_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(businessId)); // path parameter
            localVarRequestOptions.Data = updatePartnerAssetAccessBody;

            localVarRequestOptions.Operation = "BusinessAccessAssetsApi.UpdatePartnerAssetAccessHandlerImpl";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (pinterest_oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<UpdatePartnerAssetsResultsResponseArray>("/businesses/{business_id}/partners/assets", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdatePartnerAssetAccessHandlerImpl", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
