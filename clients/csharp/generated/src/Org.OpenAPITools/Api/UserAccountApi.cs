/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Client.Auth;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUserAccountApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// List following boards
        /// </summary>
        /// <remarks>
        /// Get a list of the boards a user follows. The request returns a board summary object array.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="explicitFollowing">Whether or not to include implicit user follows, which means followees with board follows. When explicit_following is True, it means we only want explicit user follows. (optional, default to false)</param>
        /// <param name="adAccountId">Unique identifier of an ad account. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BoardsUserFollowsList200Response</returns>
        BoardsUserFollowsList200Response BoardsUserFollowsList(string? bookmark = default(string?), int? pageSize = default(int?), bool? explicitFollowing = default(bool?), string? adAccountId = default(string?), int operationIndex = 0);

        /// <summary>
        /// List following boards
        /// </summary>
        /// <remarks>
        /// Get a list of the boards a user follows. The request returns a board summary object array.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="explicitFollowing">Whether or not to include implicit user follows, which means followees with board follows. When explicit_following is True, it means we only want explicit user follows. (optional, default to false)</param>
        /// <param name="adAccountId">Unique identifier of an ad account. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BoardsUserFollowsList200Response</returns>
        ApiResponse<BoardsUserFollowsList200Response> BoardsUserFollowsListWithHttpInfo(string? bookmark = default(string?), int? pageSize = default(int?), bool? explicitFollowing = default(bool?), string? adAccountId = default(string?), int operationIndex = 0);
        /// <summary>
        /// Follow user
        /// </summary>
        /// <remarks>
        /// &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/getting-started/beta-and-advanced-access/&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Use this request, as a signed-in user, to follow another user.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">A valid username</param>
        /// <param name="followUserRequest">Follow a user.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserSummary</returns>
        UserSummary FollowUserUpdate(string username, FollowUserRequest followUserRequest, int operationIndex = 0);

        /// <summary>
        /// Follow user
        /// </summary>
        /// <remarks>
        /// &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/getting-started/beta-and-advanced-access/&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Use this request, as a signed-in user, to follow another user.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">A valid username</param>
        /// <param name="followUserRequest">Follow a user.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserSummary</returns>
        ApiResponse<UserSummary> FollowUserUpdateWithHttpInfo(string username, FollowUserRequest followUserRequest, int operationIndex = 0);
        /// <summary>
        /// List followers
        /// </summary>
        /// <remarks>
        /// Get a list of your followers.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FollowersList200Response</returns>
        FollowersList200Response FollowersList(string? bookmark = default(string?), int? pageSize = default(int?), int operationIndex = 0);

        /// <summary>
        /// List followers
        /// </summary>
        /// <remarks>
        /// Get a list of your followers.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FollowersList200Response</returns>
        ApiResponse<FollowersList200Response> FollowersListWithHttpInfo(string? bookmark = default(string?), int? pageSize = default(int?), int operationIndex = 0);
        /// <summary>
        /// List linked businesses
        /// </summary>
        /// <remarks>
        /// Get a list of your linked business accounts.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;LinkedBusiness&gt;</returns>
        List<LinkedBusiness> LinkedBusinessAccountsGet(int operationIndex = 0);

        /// <summary>
        /// List linked businesses
        /// </summary>
        /// <remarks>
        /// Get a list of your linked business accounts.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;LinkedBusiness&gt;</returns>
        ApiResponse<List<LinkedBusiness>> LinkedBusinessAccountsGetWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Unverify website
        /// </summary>
        /// <remarks>
        /// Unverifu a website verified by the signed-in user.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="website">Website with path or domain only</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void UnverifyWebsiteDelete(string website, int operationIndex = 0);

        /// <summary>
        /// Unverify website
        /// </summary>
        /// <remarks>
        /// Unverifu a website verified by the signed-in user.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="website">Website with path or domain only</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UnverifyWebsiteDeleteWithHttpInfo(string website, int operationIndex = 0);
        /// <summary>
        /// Get user account analytics
        /// </summary>
        /// <remarks>
        /// Get analytics for the \&quot;operation user_account\&quot; - By default, the \&quot;operation user_account\&quot; is the token user_account.  Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Metric report start date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days back from today.</param>
        /// <param name="endDate">Metric report end date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days past start_date.</param>
        /// <param name="fromClaimedContent">Filter on Pins that match your claimed domain. (optional, default to BOTH)</param>
        /// <param name="pinFormat">Pin formats to get data for, default is all. (optional, default to ALL)</param>
        /// <param name="appTypes">Apps or devices to get data for, default is all. (optional, default to ALL)</param>
        /// <param name="contentType">Filter to paid or organic data. Default is all. (optional, default to ALL)</param>
        /// <param name="source">Filter to activity from Pins created and saved by your, or activity created and saved by others from your claimed accounts (optional, default to ALL)</param>
        /// <param name="metricTypes">Metric types to get data for, default is all.  (optional)</param>
        /// <param name="splitField">How to split the data into groups. Not including this param means data won&#39;t be split. (optional, default to NO_SPLIT)</param>
        /// <param name="adAccountId">Unique identifier of an ad account. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Dictionary&lt;string, AnalyticsMetricsResponse&gt;</returns>
        Dictionary<string, AnalyticsMetricsResponse> UserAccountAnalytics(DateOnly startDate, DateOnly endDate, string? fromClaimedContent = default(string?), string? pinFormat = default(string?), string? appTypes = default(string?), string? contentType = default(string?), string? source = default(string?), List<string>? metricTypes = default(List<string>?), string? splitField = default(string?), string? adAccountId = default(string?), int operationIndex = 0);

        /// <summary>
        /// Get user account analytics
        /// </summary>
        /// <remarks>
        /// Get analytics for the \&quot;operation user_account\&quot; - By default, the \&quot;operation user_account\&quot; is the token user_account.  Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Metric report start date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days back from today.</param>
        /// <param name="endDate">Metric report end date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days past start_date.</param>
        /// <param name="fromClaimedContent">Filter on Pins that match your claimed domain. (optional, default to BOTH)</param>
        /// <param name="pinFormat">Pin formats to get data for, default is all. (optional, default to ALL)</param>
        /// <param name="appTypes">Apps or devices to get data for, default is all. (optional, default to ALL)</param>
        /// <param name="contentType">Filter to paid or organic data. Default is all. (optional, default to ALL)</param>
        /// <param name="source">Filter to activity from Pins created and saved by your, or activity created and saved by others from your claimed accounts (optional, default to ALL)</param>
        /// <param name="metricTypes">Metric types to get data for, default is all.  (optional)</param>
        /// <param name="splitField">How to split the data into groups. Not including this param means data won&#39;t be split. (optional, default to NO_SPLIT)</param>
        /// <param name="adAccountId">Unique identifier of an ad account. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Dictionary&lt;string, AnalyticsMetricsResponse&gt;</returns>
        ApiResponse<Dictionary<string, AnalyticsMetricsResponse>> UserAccountAnalyticsWithHttpInfo(DateOnly startDate, DateOnly endDate, string? fromClaimedContent = default(string?), string? pinFormat = default(string?), string? appTypes = default(string?), string? contentType = default(string?), string? source = default(string?), List<string>? metricTypes = default(List<string>?), string? splitField = default(string?), string? adAccountId = default(string?), int operationIndex = 0);
        /// <summary>
        /// Get user account top pins analytics
        /// </summary>
        /// <remarks>
        /// Gets analytics data about a user&#39;s top pins (limited to the top 50). - By default, the \&quot;operation user_account\&quot; is the token user_account.  Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Metric report start date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days back from today.</param>
        /// <param name="endDate">Metric report end date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days past start_date.</param>
        /// <param name="sortBy">Specify sorting order for metrics</param>
        /// <param name="fromClaimedContent">Filter on Pins that match your claimed domain. (optional, default to BOTH)</param>
        /// <param name="pinFormat">Pin formats to get data for, default is all. (optional, default to ALL)</param>
        /// <param name="appTypes">Apps or devices to get data for, default is all. (optional, default to ALL)</param>
        /// <param name="contentType">Filter to paid or organic data. Default is all. (optional, default to ALL)</param>
        /// <param name="source">Filter to activity from Pins created and saved by your, or activity created and saved by others from your claimed accounts (optional, default to ALL)</param>
        /// <param name="metricTypes">Metric types to get data for, default is all.  (optional)</param>
        /// <param name="numOfPins">Number of pins to include, default is 10. Max is 50. (optional, default to 10)</param>
        /// <param name="createdInLastNDays">Get metrics for pins created in the last \&quot;n\&quot; days. (optional)</param>
        /// <param name="adAccountId">Unique identifier of an ad account. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TopPinsAnalyticsResponse</returns>
        TopPinsAnalyticsResponse UserAccountAnalyticsTopPins(DateOnly startDate, DateOnly endDate, string sortBy, string? fromClaimedContent = default(string?), string? pinFormat = default(string?), string? appTypes = default(string?), string? contentType = default(string?), string? source = default(string?), List<string>? metricTypes = default(List<string>?), int? numOfPins = default(int?), int? createdInLastNDays = default(int?), string? adAccountId = default(string?), int operationIndex = 0);

        /// <summary>
        /// Get user account top pins analytics
        /// </summary>
        /// <remarks>
        /// Gets analytics data about a user&#39;s top pins (limited to the top 50). - By default, the \&quot;operation user_account\&quot; is the token user_account.  Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Metric report start date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days back from today.</param>
        /// <param name="endDate">Metric report end date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days past start_date.</param>
        /// <param name="sortBy">Specify sorting order for metrics</param>
        /// <param name="fromClaimedContent">Filter on Pins that match your claimed domain. (optional, default to BOTH)</param>
        /// <param name="pinFormat">Pin formats to get data for, default is all. (optional, default to ALL)</param>
        /// <param name="appTypes">Apps or devices to get data for, default is all. (optional, default to ALL)</param>
        /// <param name="contentType">Filter to paid or organic data. Default is all. (optional, default to ALL)</param>
        /// <param name="source">Filter to activity from Pins created and saved by your, or activity created and saved by others from your claimed accounts (optional, default to ALL)</param>
        /// <param name="metricTypes">Metric types to get data for, default is all.  (optional)</param>
        /// <param name="numOfPins">Number of pins to include, default is 10. Max is 50. (optional, default to 10)</param>
        /// <param name="createdInLastNDays">Get metrics for pins created in the last \&quot;n\&quot; days. (optional)</param>
        /// <param name="adAccountId">Unique identifier of an ad account. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TopPinsAnalyticsResponse</returns>
        ApiResponse<TopPinsAnalyticsResponse> UserAccountAnalyticsTopPinsWithHttpInfo(DateOnly startDate, DateOnly endDate, string sortBy, string? fromClaimedContent = default(string?), string? pinFormat = default(string?), string? appTypes = default(string?), string? contentType = default(string?), string? source = default(string?), List<string>? metricTypes = default(List<string>?), int? numOfPins = default(int?), int? createdInLastNDays = default(int?), string? adAccountId = default(string?), int operationIndex = 0);
        /// <summary>
        /// Get user account top video pins analytics
        /// </summary>
        /// <remarks>
        /// Gets analytics data about a user&#39;s top video pins (limited to the top 50). - By default, the \&quot;operation user_account\&quot; is the token user_account.  Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Metric report start date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days back from today.</param>
        /// <param name="endDate">Metric report end date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days past start_date.</param>
        /// <param name="sortBy">Specify sorting order for video metrics</param>
        /// <param name="fromClaimedContent">Filter on Pins that match your claimed domain. (optional, default to BOTH)</param>
        /// <param name="pinFormat">Pin formats to get data for, default is all. (optional, default to ALL)</param>
        /// <param name="appTypes">Apps or devices to get data for, default is all. (optional, default to ALL)</param>
        /// <param name="contentType">Filter to paid or organic data. Default is all. (optional, default to ALL)</param>
        /// <param name="source">Filter to activity from Pins created and saved by your, or activity created and saved by others from your claimed accounts (optional, default to ALL)</param>
        /// <param name="metricTypes">Metric types to get video data for, default is all.  (optional)</param>
        /// <param name="numOfPins">Number of pins to include, default is 10. Max is 50. (optional, default to 10)</param>
        /// <param name="createdInLastNDays">Get metrics for pins created in the last \&quot;n\&quot; days. (optional)</param>
        /// <param name="adAccountId">Unique identifier of an ad account. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TopVideoPinsAnalyticsResponse</returns>
        TopVideoPinsAnalyticsResponse UserAccountAnalyticsTopVideoPins(DateOnly startDate, DateOnly endDate, string sortBy, string? fromClaimedContent = default(string?), string? pinFormat = default(string?), string? appTypes = default(string?), string? contentType = default(string?), string? source = default(string?), List<string>? metricTypes = default(List<string>?), int? numOfPins = default(int?), int? createdInLastNDays = default(int?), string? adAccountId = default(string?), int operationIndex = 0);

        /// <summary>
        /// Get user account top video pins analytics
        /// </summary>
        /// <remarks>
        /// Gets analytics data about a user&#39;s top video pins (limited to the top 50). - By default, the \&quot;operation user_account\&quot; is the token user_account.  Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Metric report start date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days back from today.</param>
        /// <param name="endDate">Metric report end date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days past start_date.</param>
        /// <param name="sortBy">Specify sorting order for video metrics</param>
        /// <param name="fromClaimedContent">Filter on Pins that match your claimed domain. (optional, default to BOTH)</param>
        /// <param name="pinFormat">Pin formats to get data for, default is all. (optional, default to ALL)</param>
        /// <param name="appTypes">Apps or devices to get data for, default is all. (optional, default to ALL)</param>
        /// <param name="contentType">Filter to paid or organic data. Default is all. (optional, default to ALL)</param>
        /// <param name="source">Filter to activity from Pins created and saved by your, or activity created and saved by others from your claimed accounts (optional, default to ALL)</param>
        /// <param name="metricTypes">Metric types to get video data for, default is all.  (optional)</param>
        /// <param name="numOfPins">Number of pins to include, default is 10. Max is 50. (optional, default to 10)</param>
        /// <param name="createdInLastNDays">Get metrics for pins created in the last \&quot;n\&quot; days. (optional)</param>
        /// <param name="adAccountId">Unique identifier of an ad account. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TopVideoPinsAnalyticsResponse</returns>
        ApiResponse<TopVideoPinsAnalyticsResponse> UserAccountAnalyticsTopVideoPinsWithHttpInfo(DateOnly startDate, DateOnly endDate, string sortBy, string? fromClaimedContent = default(string?), string? pinFormat = default(string?), string? appTypes = default(string?), string? contentType = default(string?), string? source = default(string?), List<string>? metricTypes = default(List<string>?), int? numOfPins = default(int?), int? createdInLastNDays = default(int?), string? adAccountId = default(string?), int operationIndex = 0);
        /// <summary>
        /// List following interests
        /// </summary>
        /// <remarks>
        /// Get a list of a user&#39;s following interests in one place.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">A valid username</param>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserAccountFollowedInterests200Response</returns>
        UserAccountFollowedInterests200Response UserAccountFollowedInterests(string username, string? bookmark = default(string?), int? pageSize = default(int?), int operationIndex = 0);

        /// <summary>
        /// List following interests
        /// </summary>
        /// <remarks>
        /// Get a list of a user&#39;s following interests in one place.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">A valid username</param>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserAccountFollowedInterests200Response</returns>
        ApiResponse<UserAccountFollowedInterests200Response> UserAccountFollowedInterestsWithHttpInfo(string username, string? bookmark = default(string?), int? pageSize = default(int?), int operationIndex = 0);
        /// <summary>
        /// Get user account
        /// </summary>
        /// <remarks>
        /// Get account information for the \&quot;operation user_account\&quot; - By default, the \&quot;operation user_account\&quot; is the token user_account.  If using Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. See &lt;a href&#x3D;&#39;/docs/getting-started/using-business-access/&#39;&gt;Understanding Business Access&lt;/a&gt; for more information.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="adAccountId">Unique identifier of an ad account. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Account</returns>
        Account UserAccountGet(string? adAccountId = default(string?), int operationIndex = 0);

        /// <summary>
        /// Get user account
        /// </summary>
        /// <remarks>
        /// Get account information for the \&quot;operation user_account\&quot; - By default, the \&quot;operation user_account\&quot; is the token user_account.  If using Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. See &lt;a href&#x3D;&#39;/docs/getting-started/using-business-access/&#39;&gt;Understanding Business Access&lt;/a&gt; for more information.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="adAccountId">Unique identifier of an ad account. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Account</returns>
        ApiResponse<Account> UserAccountGetWithHttpInfo(string? adAccountId = default(string?), int operationIndex = 0);
        /// <summary>
        /// List following
        /// </summary>
        /// <remarks>
        /// Get a list of who a certain user follows.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="feedType">Thrift param specifying what type of followees will be kept. Default to include all followees. (optional)</param>
        /// <param name="explicitFollowing">Whether or not to include implicit user follows, which means followees with board follows. When explicit_following is True, it means we only want explicit user follows. (optional, default to false)</param>
        /// <param name="adAccountId">Unique identifier of an ad account. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserFollowingGet200Response</returns>
        UserFollowingGet200Response UserFollowingGet(string? bookmark = default(string?), int? pageSize = default(int?), UserFollowingFeedType? feedType = default(UserFollowingFeedType?), bool? explicitFollowing = default(bool?), string? adAccountId = default(string?), int operationIndex = 0);

        /// <summary>
        /// List following
        /// </summary>
        /// <remarks>
        /// Get a list of who a certain user follows.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="feedType">Thrift param specifying what type of followees will be kept. Default to include all followees. (optional)</param>
        /// <param name="explicitFollowing">Whether or not to include implicit user follows, which means followees with board follows. When explicit_following is True, it means we only want explicit user follows. (optional, default to false)</param>
        /// <param name="adAccountId">Unique identifier of an ad account. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserFollowingGet200Response</returns>
        ApiResponse<UserFollowingGet200Response> UserFollowingGetWithHttpInfo(string? bookmark = default(string?), int? pageSize = default(int?), UserFollowingFeedType? feedType = default(UserFollowingFeedType?), bool? explicitFollowing = default(bool?), string? adAccountId = default(string?), int operationIndex = 0);
        /// <summary>
        /// Get user websites
        /// </summary>
        /// <remarks>
        /// Get user websites, claimed or not
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserWebsitesGet200Response</returns>
        UserWebsitesGet200Response UserWebsitesGet(string? bookmark = default(string?), int? pageSize = default(int?), int operationIndex = 0);

        /// <summary>
        /// Get user websites
        /// </summary>
        /// <remarks>
        /// Get user websites, claimed or not
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserWebsitesGet200Response</returns>
        ApiResponse<UserWebsitesGet200Response> UserWebsitesGetWithHttpInfo(string? bookmark = default(string?), int? pageSize = default(int?), int operationIndex = 0);
        /// <summary>
        /// Verify website
        /// </summary>
        /// <remarks>
        /// Verify a website as a signed-in user.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userWebsiteVerifyRequest">Verify a website.</param>
        /// <param name="adAccountId">Unique identifier of an ad account. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserWebsiteSummary</returns>
        UserWebsiteSummary VerifyWebsiteUpdate(UserWebsiteVerifyRequest userWebsiteVerifyRequest, string? adAccountId = default(string?), int operationIndex = 0);

        /// <summary>
        /// Verify website
        /// </summary>
        /// <remarks>
        /// Verify a website as a signed-in user.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userWebsiteVerifyRequest">Verify a website.</param>
        /// <param name="adAccountId">Unique identifier of an ad account. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserWebsiteSummary</returns>
        ApiResponse<UserWebsiteSummary> VerifyWebsiteUpdateWithHttpInfo(UserWebsiteVerifyRequest userWebsiteVerifyRequest, string? adAccountId = default(string?), int operationIndex = 0);
        /// <summary>
        /// Get user verification code for website claiming
        /// </summary>
        /// <remarks>
        /// Get verification code for user to install on the website to claim it.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="adAccountId">Unique identifier of an ad account. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserWebsiteVerificationCode</returns>
        UserWebsiteVerificationCode WebsiteVerificationGet(string? adAccountId = default(string?), int operationIndex = 0);

        /// <summary>
        /// Get user verification code for website claiming
        /// </summary>
        /// <remarks>
        /// Get verification code for user to install on the website to claim it.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="adAccountId">Unique identifier of an ad account. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserWebsiteVerificationCode</returns>
        ApiResponse<UserWebsiteVerificationCode> WebsiteVerificationGetWithHttpInfo(string? adAccountId = default(string?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUserAccountApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// List following boards
        /// </summary>
        /// <remarks>
        /// Get a list of the boards a user follows. The request returns a board summary object array.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="explicitFollowing">Whether or not to include implicit user follows, which means followees with board follows. When explicit_following is True, it means we only want explicit user follows. (optional, default to false)</param>
        /// <param name="adAccountId">Unique identifier of an ad account. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BoardsUserFollowsList200Response</returns>
        System.Threading.Tasks.Task<BoardsUserFollowsList200Response> BoardsUserFollowsListAsync(string? bookmark = default(string?), int? pageSize = default(int?), bool? explicitFollowing = default(bool?), string? adAccountId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List following boards
        /// </summary>
        /// <remarks>
        /// Get a list of the boards a user follows. The request returns a board summary object array.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="explicitFollowing">Whether or not to include implicit user follows, which means followees with board follows. When explicit_following is True, it means we only want explicit user follows. (optional, default to false)</param>
        /// <param name="adAccountId">Unique identifier of an ad account. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BoardsUserFollowsList200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<BoardsUserFollowsList200Response>> BoardsUserFollowsListWithHttpInfoAsync(string? bookmark = default(string?), int? pageSize = default(int?), bool? explicitFollowing = default(bool?), string? adAccountId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Follow user
        /// </summary>
        /// <remarks>
        /// &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/getting-started/beta-and-advanced-access/&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Use this request, as a signed-in user, to follow another user.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">A valid username</param>
        /// <param name="followUserRequest">Follow a user.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserSummary</returns>
        System.Threading.Tasks.Task<UserSummary> FollowUserUpdateAsync(string username, FollowUserRequest followUserRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Follow user
        /// </summary>
        /// <remarks>
        /// &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/getting-started/beta-and-advanced-access/&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Use this request, as a signed-in user, to follow another user.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">A valid username</param>
        /// <param name="followUserRequest">Follow a user.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserSummary>> FollowUserUpdateWithHttpInfoAsync(string username, FollowUserRequest followUserRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List followers
        /// </summary>
        /// <remarks>
        /// Get a list of your followers.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FollowersList200Response</returns>
        System.Threading.Tasks.Task<FollowersList200Response> FollowersListAsync(string? bookmark = default(string?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List followers
        /// </summary>
        /// <remarks>
        /// Get a list of your followers.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FollowersList200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<FollowersList200Response>> FollowersListWithHttpInfoAsync(string? bookmark = default(string?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List linked businesses
        /// </summary>
        /// <remarks>
        /// Get a list of your linked business accounts.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;LinkedBusiness&gt;</returns>
        System.Threading.Tasks.Task<List<LinkedBusiness>> LinkedBusinessAccountsGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List linked businesses
        /// </summary>
        /// <remarks>
        /// Get a list of your linked business accounts.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;LinkedBusiness&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<LinkedBusiness>>> LinkedBusinessAccountsGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Unverify website
        /// </summary>
        /// <remarks>
        /// Unverifu a website verified by the signed-in user.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="website">Website with path or domain only</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UnverifyWebsiteDeleteAsync(string website, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Unverify website
        /// </summary>
        /// <remarks>
        /// Unverifu a website verified by the signed-in user.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="website">Website with path or domain only</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UnverifyWebsiteDeleteWithHttpInfoAsync(string website, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get user account analytics
        /// </summary>
        /// <remarks>
        /// Get analytics for the \&quot;operation user_account\&quot; - By default, the \&quot;operation user_account\&quot; is the token user_account.  Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Metric report start date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days back from today.</param>
        /// <param name="endDate">Metric report end date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days past start_date.</param>
        /// <param name="fromClaimedContent">Filter on Pins that match your claimed domain. (optional, default to BOTH)</param>
        /// <param name="pinFormat">Pin formats to get data for, default is all. (optional, default to ALL)</param>
        /// <param name="appTypes">Apps or devices to get data for, default is all. (optional, default to ALL)</param>
        /// <param name="contentType">Filter to paid or organic data. Default is all. (optional, default to ALL)</param>
        /// <param name="source">Filter to activity from Pins created and saved by your, or activity created and saved by others from your claimed accounts (optional, default to ALL)</param>
        /// <param name="metricTypes">Metric types to get data for, default is all.  (optional)</param>
        /// <param name="splitField">How to split the data into groups. Not including this param means data won&#39;t be split. (optional, default to NO_SPLIT)</param>
        /// <param name="adAccountId">Unique identifier of an ad account. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Dictionary&lt;string, AnalyticsMetricsResponse&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, AnalyticsMetricsResponse>> UserAccountAnalyticsAsync(DateOnly startDate, DateOnly endDate, string? fromClaimedContent = default(string?), string? pinFormat = default(string?), string? appTypes = default(string?), string? contentType = default(string?), string? source = default(string?), List<string>? metricTypes = default(List<string>?), string? splitField = default(string?), string? adAccountId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get user account analytics
        /// </summary>
        /// <remarks>
        /// Get analytics for the \&quot;operation user_account\&quot; - By default, the \&quot;operation user_account\&quot; is the token user_account.  Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Metric report start date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days back from today.</param>
        /// <param name="endDate">Metric report end date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days past start_date.</param>
        /// <param name="fromClaimedContent">Filter on Pins that match your claimed domain. (optional, default to BOTH)</param>
        /// <param name="pinFormat">Pin formats to get data for, default is all. (optional, default to ALL)</param>
        /// <param name="appTypes">Apps or devices to get data for, default is all. (optional, default to ALL)</param>
        /// <param name="contentType">Filter to paid or organic data. Default is all. (optional, default to ALL)</param>
        /// <param name="source">Filter to activity from Pins created and saved by your, or activity created and saved by others from your claimed accounts (optional, default to ALL)</param>
        /// <param name="metricTypes">Metric types to get data for, default is all.  (optional)</param>
        /// <param name="splitField">How to split the data into groups. Not including this param means data won&#39;t be split. (optional, default to NO_SPLIT)</param>
        /// <param name="adAccountId">Unique identifier of an ad account. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, AnalyticsMetricsResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, AnalyticsMetricsResponse>>> UserAccountAnalyticsWithHttpInfoAsync(DateOnly startDate, DateOnly endDate, string? fromClaimedContent = default(string?), string? pinFormat = default(string?), string? appTypes = default(string?), string? contentType = default(string?), string? source = default(string?), List<string>? metricTypes = default(List<string>?), string? splitField = default(string?), string? adAccountId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get user account top pins analytics
        /// </summary>
        /// <remarks>
        /// Gets analytics data about a user&#39;s top pins (limited to the top 50). - By default, the \&quot;operation user_account\&quot; is the token user_account.  Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Metric report start date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days back from today.</param>
        /// <param name="endDate">Metric report end date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days past start_date.</param>
        /// <param name="sortBy">Specify sorting order for metrics</param>
        /// <param name="fromClaimedContent">Filter on Pins that match your claimed domain. (optional, default to BOTH)</param>
        /// <param name="pinFormat">Pin formats to get data for, default is all. (optional, default to ALL)</param>
        /// <param name="appTypes">Apps or devices to get data for, default is all. (optional, default to ALL)</param>
        /// <param name="contentType">Filter to paid or organic data. Default is all. (optional, default to ALL)</param>
        /// <param name="source">Filter to activity from Pins created and saved by your, or activity created and saved by others from your claimed accounts (optional, default to ALL)</param>
        /// <param name="metricTypes">Metric types to get data for, default is all.  (optional)</param>
        /// <param name="numOfPins">Number of pins to include, default is 10. Max is 50. (optional, default to 10)</param>
        /// <param name="createdInLastNDays">Get metrics for pins created in the last \&quot;n\&quot; days. (optional)</param>
        /// <param name="adAccountId">Unique identifier of an ad account. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TopPinsAnalyticsResponse</returns>
        System.Threading.Tasks.Task<TopPinsAnalyticsResponse> UserAccountAnalyticsTopPinsAsync(DateOnly startDate, DateOnly endDate, string sortBy, string? fromClaimedContent = default(string?), string? pinFormat = default(string?), string? appTypes = default(string?), string? contentType = default(string?), string? source = default(string?), List<string>? metricTypes = default(List<string>?), int? numOfPins = default(int?), int? createdInLastNDays = default(int?), string? adAccountId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get user account top pins analytics
        /// </summary>
        /// <remarks>
        /// Gets analytics data about a user&#39;s top pins (limited to the top 50). - By default, the \&quot;operation user_account\&quot; is the token user_account.  Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Metric report start date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days back from today.</param>
        /// <param name="endDate">Metric report end date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days past start_date.</param>
        /// <param name="sortBy">Specify sorting order for metrics</param>
        /// <param name="fromClaimedContent">Filter on Pins that match your claimed domain. (optional, default to BOTH)</param>
        /// <param name="pinFormat">Pin formats to get data for, default is all. (optional, default to ALL)</param>
        /// <param name="appTypes">Apps or devices to get data for, default is all. (optional, default to ALL)</param>
        /// <param name="contentType">Filter to paid or organic data. Default is all. (optional, default to ALL)</param>
        /// <param name="source">Filter to activity from Pins created and saved by your, or activity created and saved by others from your claimed accounts (optional, default to ALL)</param>
        /// <param name="metricTypes">Metric types to get data for, default is all.  (optional)</param>
        /// <param name="numOfPins">Number of pins to include, default is 10. Max is 50. (optional, default to 10)</param>
        /// <param name="createdInLastNDays">Get metrics for pins created in the last \&quot;n\&quot; days. (optional)</param>
        /// <param name="adAccountId">Unique identifier of an ad account. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TopPinsAnalyticsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TopPinsAnalyticsResponse>> UserAccountAnalyticsTopPinsWithHttpInfoAsync(DateOnly startDate, DateOnly endDate, string sortBy, string? fromClaimedContent = default(string?), string? pinFormat = default(string?), string? appTypes = default(string?), string? contentType = default(string?), string? source = default(string?), List<string>? metricTypes = default(List<string>?), int? numOfPins = default(int?), int? createdInLastNDays = default(int?), string? adAccountId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get user account top video pins analytics
        /// </summary>
        /// <remarks>
        /// Gets analytics data about a user&#39;s top video pins (limited to the top 50). - By default, the \&quot;operation user_account\&quot; is the token user_account.  Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Metric report start date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days back from today.</param>
        /// <param name="endDate">Metric report end date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days past start_date.</param>
        /// <param name="sortBy">Specify sorting order for video metrics</param>
        /// <param name="fromClaimedContent">Filter on Pins that match your claimed domain. (optional, default to BOTH)</param>
        /// <param name="pinFormat">Pin formats to get data for, default is all. (optional, default to ALL)</param>
        /// <param name="appTypes">Apps or devices to get data for, default is all. (optional, default to ALL)</param>
        /// <param name="contentType">Filter to paid or organic data. Default is all. (optional, default to ALL)</param>
        /// <param name="source">Filter to activity from Pins created and saved by your, or activity created and saved by others from your claimed accounts (optional, default to ALL)</param>
        /// <param name="metricTypes">Metric types to get video data for, default is all.  (optional)</param>
        /// <param name="numOfPins">Number of pins to include, default is 10. Max is 50. (optional, default to 10)</param>
        /// <param name="createdInLastNDays">Get metrics for pins created in the last \&quot;n\&quot; days. (optional)</param>
        /// <param name="adAccountId">Unique identifier of an ad account. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TopVideoPinsAnalyticsResponse</returns>
        System.Threading.Tasks.Task<TopVideoPinsAnalyticsResponse> UserAccountAnalyticsTopVideoPinsAsync(DateOnly startDate, DateOnly endDate, string sortBy, string? fromClaimedContent = default(string?), string? pinFormat = default(string?), string? appTypes = default(string?), string? contentType = default(string?), string? source = default(string?), List<string>? metricTypes = default(List<string>?), int? numOfPins = default(int?), int? createdInLastNDays = default(int?), string? adAccountId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get user account top video pins analytics
        /// </summary>
        /// <remarks>
        /// Gets analytics data about a user&#39;s top video pins (limited to the top 50). - By default, the \&quot;operation user_account\&quot; is the token user_account.  Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Metric report start date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days back from today.</param>
        /// <param name="endDate">Metric report end date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days past start_date.</param>
        /// <param name="sortBy">Specify sorting order for video metrics</param>
        /// <param name="fromClaimedContent">Filter on Pins that match your claimed domain. (optional, default to BOTH)</param>
        /// <param name="pinFormat">Pin formats to get data for, default is all. (optional, default to ALL)</param>
        /// <param name="appTypes">Apps or devices to get data for, default is all. (optional, default to ALL)</param>
        /// <param name="contentType">Filter to paid or organic data. Default is all. (optional, default to ALL)</param>
        /// <param name="source">Filter to activity from Pins created and saved by your, or activity created and saved by others from your claimed accounts (optional, default to ALL)</param>
        /// <param name="metricTypes">Metric types to get video data for, default is all.  (optional)</param>
        /// <param name="numOfPins">Number of pins to include, default is 10. Max is 50. (optional, default to 10)</param>
        /// <param name="createdInLastNDays">Get metrics for pins created in the last \&quot;n\&quot; days. (optional)</param>
        /// <param name="adAccountId">Unique identifier of an ad account. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TopVideoPinsAnalyticsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TopVideoPinsAnalyticsResponse>> UserAccountAnalyticsTopVideoPinsWithHttpInfoAsync(DateOnly startDate, DateOnly endDate, string sortBy, string? fromClaimedContent = default(string?), string? pinFormat = default(string?), string? appTypes = default(string?), string? contentType = default(string?), string? source = default(string?), List<string>? metricTypes = default(List<string>?), int? numOfPins = default(int?), int? createdInLastNDays = default(int?), string? adAccountId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List following interests
        /// </summary>
        /// <remarks>
        /// Get a list of a user&#39;s following interests in one place.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">A valid username</param>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserAccountFollowedInterests200Response</returns>
        System.Threading.Tasks.Task<UserAccountFollowedInterests200Response> UserAccountFollowedInterestsAsync(string username, string? bookmark = default(string?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List following interests
        /// </summary>
        /// <remarks>
        /// Get a list of a user&#39;s following interests in one place.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">A valid username</param>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserAccountFollowedInterests200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserAccountFollowedInterests200Response>> UserAccountFollowedInterestsWithHttpInfoAsync(string username, string? bookmark = default(string?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get user account
        /// </summary>
        /// <remarks>
        /// Get account information for the \&quot;operation user_account\&quot; - By default, the \&quot;operation user_account\&quot; is the token user_account.  If using Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. See &lt;a href&#x3D;&#39;/docs/getting-started/using-business-access/&#39;&gt;Understanding Business Access&lt;/a&gt; for more information.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="adAccountId">Unique identifier of an ad account. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Account</returns>
        System.Threading.Tasks.Task<Account> UserAccountGetAsync(string? adAccountId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get user account
        /// </summary>
        /// <remarks>
        /// Get account information for the \&quot;operation user_account\&quot; - By default, the \&quot;operation user_account\&quot; is the token user_account.  If using Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. See &lt;a href&#x3D;&#39;/docs/getting-started/using-business-access/&#39;&gt;Understanding Business Access&lt;/a&gt; for more information.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="adAccountId">Unique identifier of an ad account. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Account)</returns>
        System.Threading.Tasks.Task<ApiResponse<Account>> UserAccountGetWithHttpInfoAsync(string? adAccountId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List following
        /// </summary>
        /// <remarks>
        /// Get a list of who a certain user follows.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="feedType">Thrift param specifying what type of followees will be kept. Default to include all followees. (optional)</param>
        /// <param name="explicitFollowing">Whether or not to include implicit user follows, which means followees with board follows. When explicit_following is True, it means we only want explicit user follows. (optional, default to false)</param>
        /// <param name="adAccountId">Unique identifier of an ad account. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserFollowingGet200Response</returns>
        System.Threading.Tasks.Task<UserFollowingGet200Response> UserFollowingGetAsync(string? bookmark = default(string?), int? pageSize = default(int?), UserFollowingFeedType? feedType = default(UserFollowingFeedType?), bool? explicitFollowing = default(bool?), string? adAccountId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List following
        /// </summary>
        /// <remarks>
        /// Get a list of who a certain user follows.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="feedType">Thrift param specifying what type of followees will be kept. Default to include all followees. (optional)</param>
        /// <param name="explicitFollowing">Whether or not to include implicit user follows, which means followees with board follows. When explicit_following is True, it means we only want explicit user follows. (optional, default to false)</param>
        /// <param name="adAccountId">Unique identifier of an ad account. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserFollowingGet200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserFollowingGet200Response>> UserFollowingGetWithHttpInfoAsync(string? bookmark = default(string?), int? pageSize = default(int?), UserFollowingFeedType? feedType = default(UserFollowingFeedType?), bool? explicitFollowing = default(bool?), string? adAccountId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get user websites
        /// </summary>
        /// <remarks>
        /// Get user websites, claimed or not
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserWebsitesGet200Response</returns>
        System.Threading.Tasks.Task<UserWebsitesGet200Response> UserWebsitesGetAsync(string? bookmark = default(string?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get user websites
        /// </summary>
        /// <remarks>
        /// Get user websites, claimed or not
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserWebsitesGet200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserWebsitesGet200Response>> UserWebsitesGetWithHttpInfoAsync(string? bookmark = default(string?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Verify website
        /// </summary>
        /// <remarks>
        /// Verify a website as a signed-in user.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userWebsiteVerifyRequest">Verify a website.</param>
        /// <param name="adAccountId">Unique identifier of an ad account. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserWebsiteSummary</returns>
        System.Threading.Tasks.Task<UserWebsiteSummary> VerifyWebsiteUpdateAsync(UserWebsiteVerifyRequest userWebsiteVerifyRequest, string? adAccountId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Verify website
        /// </summary>
        /// <remarks>
        /// Verify a website as a signed-in user.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userWebsiteVerifyRequest">Verify a website.</param>
        /// <param name="adAccountId">Unique identifier of an ad account. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserWebsiteSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserWebsiteSummary>> VerifyWebsiteUpdateWithHttpInfoAsync(UserWebsiteVerifyRequest userWebsiteVerifyRequest, string? adAccountId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get user verification code for website claiming
        /// </summary>
        /// <remarks>
        /// Get verification code for user to install on the website to claim it.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="adAccountId">Unique identifier of an ad account. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserWebsiteVerificationCode</returns>
        System.Threading.Tasks.Task<UserWebsiteVerificationCode> WebsiteVerificationGetAsync(string? adAccountId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get user verification code for website claiming
        /// </summary>
        /// <remarks>
        /// Get verification code for user to install on the website to claim it.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="adAccountId">Unique identifier of an ad account. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserWebsiteVerificationCode)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserWebsiteVerificationCode>> WebsiteVerificationGetWithHttpInfoAsync(string? adAccountId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUserAccountApi : IUserAccountApiSync, IUserAccountApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class UserAccountApi : IUserAccountApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="UserAccountApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UserAccountApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserAccountApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UserAccountApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserAccountApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public UserAccountApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserAccountApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public UserAccountApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// List following boards Get a list of the boards a user follows. The request returns a board summary object array.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="explicitFollowing">Whether or not to include implicit user follows, which means followees with board follows. When explicit_following is True, it means we only want explicit user follows. (optional, default to false)</param>
        /// <param name="adAccountId">Unique identifier of an ad account. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BoardsUserFollowsList200Response</returns>
        public BoardsUserFollowsList200Response BoardsUserFollowsList(string? bookmark = default(string?), int? pageSize = default(int?), bool? explicitFollowing = default(bool?), string? adAccountId = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<BoardsUserFollowsList200Response> localVarResponse = BoardsUserFollowsListWithHttpInfo(bookmark, pageSize, explicitFollowing, adAccountId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List following boards Get a list of the boards a user follows. The request returns a board summary object array.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="explicitFollowing">Whether or not to include implicit user follows, which means followees with board follows. When explicit_following is True, it means we only want explicit user follows. (optional, default to false)</param>
        /// <param name="adAccountId">Unique identifier of an ad account. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BoardsUserFollowsList200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<BoardsUserFollowsList200Response> BoardsUserFollowsListWithHttpInfo(string? bookmark = default(string?), int? pageSize = default(int?), bool? explicitFollowing = default(bool?), string? adAccountId = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (bookmark != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "bookmark", bookmark));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (explicitFollowing != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "explicit_following", explicitFollowing));
            }
            if (adAccountId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ad_account_id", adAccountId));
            }

            localVarRequestOptions.Operation = "UserAccountApi.BoardsUserFollowsList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (pinterest_oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (client_credentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<BoardsUserFollowsList200Response>("/user_account/following/boards", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BoardsUserFollowsList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List following boards Get a list of the boards a user follows. The request returns a board summary object array.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="explicitFollowing">Whether or not to include implicit user follows, which means followees with board follows. When explicit_following is True, it means we only want explicit user follows. (optional, default to false)</param>
        /// <param name="adAccountId">Unique identifier of an ad account. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BoardsUserFollowsList200Response</returns>
        public async System.Threading.Tasks.Task<BoardsUserFollowsList200Response> BoardsUserFollowsListAsync(string? bookmark = default(string?), int? pageSize = default(int?), bool? explicitFollowing = default(bool?), string? adAccountId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<BoardsUserFollowsList200Response> localVarResponse = await BoardsUserFollowsListWithHttpInfoAsync(bookmark, pageSize, explicitFollowing, adAccountId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List following boards Get a list of the boards a user follows. The request returns a board summary object array.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="explicitFollowing">Whether or not to include implicit user follows, which means followees with board follows. When explicit_following is True, it means we only want explicit user follows. (optional, default to false)</param>
        /// <param name="adAccountId">Unique identifier of an ad account. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BoardsUserFollowsList200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<BoardsUserFollowsList200Response>> BoardsUserFollowsListWithHttpInfoAsync(string? bookmark = default(string?), int? pageSize = default(int?), bool? explicitFollowing = default(bool?), string? adAccountId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (bookmark != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "bookmark", bookmark));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (explicitFollowing != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "explicit_following", explicitFollowing));
            }
            if (adAccountId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ad_account_id", adAccountId));
            }

            localVarRequestOptions.Operation = "UserAccountApi.BoardsUserFollowsList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (pinterest_oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (client_credentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<BoardsUserFollowsList200Response>("/user_account/following/boards", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BoardsUserFollowsList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Follow user &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/getting-started/beta-and-advanced-access/&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Use this request, as a signed-in user, to follow another user.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">A valid username</param>
        /// <param name="followUserRequest">Follow a user.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserSummary</returns>
        public UserSummary FollowUserUpdate(string username, FollowUserRequest followUserRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<UserSummary> localVarResponse = FollowUserUpdateWithHttpInfo(username, followUserRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Follow user &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/getting-started/beta-and-advanced-access/&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Use this request, as a signed-in user, to follow another user.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">A valid username</param>
        /// <param name="followUserRequest">Follow a user.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserSummary</returns>
        public Org.OpenAPITools.Client.ApiResponse<UserSummary> FollowUserUpdateWithHttpInfo(string username, FollowUserRequest followUserRequest, int operationIndex = 0)
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'username' when calling UserAccountApi->FollowUserUpdate");
            }

            // verify the required parameter 'followUserRequest' is set
            if (followUserRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'followUserRequest' when calling UserAccountApi->FollowUserUpdate");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("username", Org.OpenAPITools.Client.ClientUtils.ParameterToString(username)); // path parameter
            localVarRequestOptions.Data = followUserRequest;

            localVarRequestOptions.Operation = "UserAccountApi.FollowUserUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (pinterest_oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<UserSummary>("/user_account/following/{username}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FollowUserUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Follow user &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/getting-started/beta-and-advanced-access/&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Use this request, as a signed-in user, to follow another user.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">A valid username</param>
        /// <param name="followUserRequest">Follow a user.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserSummary</returns>
        public async System.Threading.Tasks.Task<UserSummary> FollowUserUpdateAsync(string username, FollowUserRequest followUserRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<UserSummary> localVarResponse = await FollowUserUpdateWithHttpInfoAsync(username, followUserRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Follow user &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/getting-started/beta-and-advanced-access/&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Use this request, as a signed-in user, to follow another user.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">A valid username</param>
        /// <param name="followUserRequest">Follow a user.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserSummary)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<UserSummary>> FollowUserUpdateWithHttpInfoAsync(string username, FollowUserRequest followUserRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'username' when calling UserAccountApi->FollowUserUpdate");
            }

            // verify the required parameter 'followUserRequest' is set
            if (followUserRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'followUserRequest' when calling UserAccountApi->FollowUserUpdate");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("username", Org.OpenAPITools.Client.ClientUtils.ParameterToString(username)); // path parameter
            localVarRequestOptions.Data = followUserRequest;

            localVarRequestOptions.Operation = "UserAccountApi.FollowUserUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (pinterest_oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<UserSummary>("/user_account/following/{username}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FollowUserUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List followers Get a list of your followers.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FollowersList200Response</returns>
        public FollowersList200Response FollowersList(string? bookmark = default(string?), int? pageSize = default(int?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<FollowersList200Response> localVarResponse = FollowersListWithHttpInfo(bookmark, pageSize);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List followers Get a list of your followers.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FollowersList200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<FollowersList200Response> FollowersListWithHttpInfo(string? bookmark = default(string?), int? pageSize = default(int?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (bookmark != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "bookmark", bookmark));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }

            localVarRequestOptions.Operation = "UserAccountApi.FollowersList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (pinterest_oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (client_credentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<FollowersList200Response>("/user_account/followers", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FollowersList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List followers Get a list of your followers.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FollowersList200Response</returns>
        public async System.Threading.Tasks.Task<FollowersList200Response> FollowersListAsync(string? bookmark = default(string?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<FollowersList200Response> localVarResponse = await FollowersListWithHttpInfoAsync(bookmark, pageSize, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List followers Get a list of your followers.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FollowersList200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<FollowersList200Response>> FollowersListWithHttpInfoAsync(string? bookmark = default(string?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (bookmark != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "bookmark", bookmark));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }

            localVarRequestOptions.Operation = "UserAccountApi.FollowersList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (pinterest_oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (client_credentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<FollowersList200Response>("/user_account/followers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FollowersList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List linked businesses Get a list of your linked business accounts.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;LinkedBusiness&gt;</returns>
        public List<LinkedBusiness> LinkedBusinessAccountsGet(int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<List<LinkedBusiness>> localVarResponse = LinkedBusinessAccountsGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// List linked businesses Get a list of your linked business accounts.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;LinkedBusiness&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<LinkedBusiness>> LinkedBusinessAccountsGetWithHttpInfo(int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "UserAccountApi.LinkedBusinessAccountsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (pinterest_oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (client_credentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<LinkedBusiness>>("/user_account/businesses", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LinkedBusinessAccountsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List linked businesses Get a list of your linked business accounts.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;LinkedBusiness&gt;</returns>
        public async System.Threading.Tasks.Task<List<LinkedBusiness>> LinkedBusinessAccountsGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<LinkedBusiness>> localVarResponse = await LinkedBusinessAccountsGetWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List linked businesses Get a list of your linked business accounts.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;LinkedBusiness&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<LinkedBusiness>>> LinkedBusinessAccountsGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "UserAccountApi.LinkedBusinessAccountsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (pinterest_oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (client_credentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<LinkedBusiness>>("/user_account/businesses", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LinkedBusinessAccountsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Unverify website Unverifu a website verified by the signed-in user.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="website">Website with path or domain only</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void UnverifyWebsiteDelete(string website, int operationIndex = 0)
        {
            UnverifyWebsiteDeleteWithHttpInfo(website);
        }

        /// <summary>
        /// Unverify website Unverifu a website verified by the signed-in user.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="website">Website with path or domain only</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> UnverifyWebsiteDeleteWithHttpInfo(string website, int operationIndex = 0)
        {
            // verify the required parameter 'website' is set
            if (website == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'website' when calling UserAccountApi->UnverifyWebsiteDelete");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "website", website));

            localVarRequestOptions.Operation = "UserAccountApi.UnverifyWebsiteDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (pinterest_oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/user_account/websites", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UnverifyWebsiteDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Unverify website Unverifu a website verified by the signed-in user.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="website">Website with path or domain only</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UnverifyWebsiteDeleteAsync(string website, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await UnverifyWebsiteDeleteWithHttpInfoAsync(website, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Unverify website Unverifu a website verified by the signed-in user.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="website">Website with path or domain only</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> UnverifyWebsiteDeleteWithHttpInfoAsync(string website, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'website' is set
            if (website == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'website' when calling UserAccountApi->UnverifyWebsiteDelete");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "website", website));

            localVarRequestOptions.Operation = "UserAccountApi.UnverifyWebsiteDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (pinterest_oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/user_account/websites", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UnverifyWebsiteDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get user account analytics Get analytics for the \&quot;operation user_account\&quot; - By default, the \&quot;operation user_account\&quot; is the token user_account.  Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Metric report start date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days back from today.</param>
        /// <param name="endDate">Metric report end date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days past start_date.</param>
        /// <param name="fromClaimedContent">Filter on Pins that match your claimed domain. (optional, default to BOTH)</param>
        /// <param name="pinFormat">Pin formats to get data for, default is all. (optional, default to ALL)</param>
        /// <param name="appTypes">Apps or devices to get data for, default is all. (optional, default to ALL)</param>
        /// <param name="contentType">Filter to paid or organic data. Default is all. (optional, default to ALL)</param>
        /// <param name="source">Filter to activity from Pins created and saved by your, or activity created and saved by others from your claimed accounts (optional, default to ALL)</param>
        /// <param name="metricTypes">Metric types to get data for, default is all.  (optional)</param>
        /// <param name="splitField">How to split the data into groups. Not including this param means data won&#39;t be split. (optional, default to NO_SPLIT)</param>
        /// <param name="adAccountId">Unique identifier of an ad account. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Dictionary&lt;string, AnalyticsMetricsResponse&gt;</returns>
        public Dictionary<string, AnalyticsMetricsResponse> UserAccountAnalytics(DateOnly startDate, DateOnly endDate, string? fromClaimedContent = default(string?), string? pinFormat = default(string?), string? appTypes = default(string?), string? contentType = default(string?), string? source = default(string?), List<string>? metricTypes = default(List<string>?), string? splitField = default(string?), string? adAccountId = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Dictionary<string, AnalyticsMetricsResponse>> localVarResponse = UserAccountAnalyticsWithHttpInfo(startDate, endDate, fromClaimedContent, pinFormat, appTypes, contentType, source, metricTypes, splitField, adAccountId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get user account analytics Get analytics for the \&quot;operation user_account\&quot; - By default, the \&quot;operation user_account\&quot; is the token user_account.  Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Metric report start date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days back from today.</param>
        /// <param name="endDate">Metric report end date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days past start_date.</param>
        /// <param name="fromClaimedContent">Filter on Pins that match your claimed domain. (optional, default to BOTH)</param>
        /// <param name="pinFormat">Pin formats to get data for, default is all. (optional, default to ALL)</param>
        /// <param name="appTypes">Apps or devices to get data for, default is all. (optional, default to ALL)</param>
        /// <param name="contentType">Filter to paid or organic data. Default is all. (optional, default to ALL)</param>
        /// <param name="source">Filter to activity from Pins created and saved by your, or activity created and saved by others from your claimed accounts (optional, default to ALL)</param>
        /// <param name="metricTypes">Metric types to get data for, default is all.  (optional)</param>
        /// <param name="splitField">How to split the data into groups. Not including this param means data won&#39;t be split. (optional, default to NO_SPLIT)</param>
        /// <param name="adAccountId">Unique identifier of an ad account. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Dictionary&lt;string, AnalyticsMetricsResponse&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<Dictionary<string, AnalyticsMetricsResponse>> UserAccountAnalyticsWithHttpInfo(DateOnly startDate, DateOnly endDate, string? fromClaimedContent = default(string?), string? pinFormat = default(string?), string? appTypes = default(string?), string? contentType = default(string?), string? source = default(string?), List<string>? metricTypes = default(List<string>?), string? splitField = default(string?), string? adAccountId = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start_date", startDate));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "end_date", endDate));
            if (fromClaimedContent != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "from_claimed_content", fromClaimedContent));
            }
            if (pinFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "pin_format", pinFormat));
            }
            if (appTypes != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "app_types", appTypes));
            }
            if (contentType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "content_type", contentType));
            }
            if (source != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "source", source));
            }
            if (metricTypes != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("csv", "metric_types", metricTypes));
            }
            if (splitField != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "split_field", splitField));
            }
            if (adAccountId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ad_account_id", adAccountId));
            }

            localVarRequestOptions.Operation = "UserAccountApi.UserAccountAnalytics";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (pinterest_oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Dictionary<string, AnalyticsMetricsResponse>>("/user_account/analytics", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserAccountAnalytics", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get user account analytics Get analytics for the \&quot;operation user_account\&quot; - By default, the \&quot;operation user_account\&quot; is the token user_account.  Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Metric report start date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days back from today.</param>
        /// <param name="endDate">Metric report end date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days past start_date.</param>
        /// <param name="fromClaimedContent">Filter on Pins that match your claimed domain. (optional, default to BOTH)</param>
        /// <param name="pinFormat">Pin formats to get data for, default is all. (optional, default to ALL)</param>
        /// <param name="appTypes">Apps or devices to get data for, default is all. (optional, default to ALL)</param>
        /// <param name="contentType">Filter to paid or organic data. Default is all. (optional, default to ALL)</param>
        /// <param name="source">Filter to activity from Pins created and saved by your, or activity created and saved by others from your claimed accounts (optional, default to ALL)</param>
        /// <param name="metricTypes">Metric types to get data for, default is all.  (optional)</param>
        /// <param name="splitField">How to split the data into groups. Not including this param means data won&#39;t be split. (optional, default to NO_SPLIT)</param>
        /// <param name="adAccountId">Unique identifier of an ad account. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Dictionary&lt;string, AnalyticsMetricsResponse&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, AnalyticsMetricsResponse>> UserAccountAnalyticsAsync(DateOnly startDate, DateOnly endDate, string? fromClaimedContent = default(string?), string? pinFormat = default(string?), string? appTypes = default(string?), string? contentType = default(string?), string? source = default(string?), List<string>? metricTypes = default(List<string>?), string? splitField = default(string?), string? adAccountId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Dictionary<string, AnalyticsMetricsResponse>> localVarResponse = await UserAccountAnalyticsWithHttpInfoAsync(startDate, endDate, fromClaimedContent, pinFormat, appTypes, contentType, source, metricTypes, splitField, adAccountId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get user account analytics Get analytics for the \&quot;operation user_account\&quot; - By default, the \&quot;operation user_account\&quot; is the token user_account.  Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Metric report start date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days back from today.</param>
        /// <param name="endDate">Metric report end date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days past start_date.</param>
        /// <param name="fromClaimedContent">Filter on Pins that match your claimed domain. (optional, default to BOTH)</param>
        /// <param name="pinFormat">Pin formats to get data for, default is all. (optional, default to ALL)</param>
        /// <param name="appTypes">Apps or devices to get data for, default is all. (optional, default to ALL)</param>
        /// <param name="contentType">Filter to paid or organic data. Default is all. (optional, default to ALL)</param>
        /// <param name="source">Filter to activity from Pins created and saved by your, or activity created and saved by others from your claimed accounts (optional, default to ALL)</param>
        /// <param name="metricTypes">Metric types to get data for, default is all.  (optional)</param>
        /// <param name="splitField">How to split the data into groups. Not including this param means data won&#39;t be split. (optional, default to NO_SPLIT)</param>
        /// <param name="adAccountId">Unique identifier of an ad account. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, AnalyticsMetricsResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Dictionary<string, AnalyticsMetricsResponse>>> UserAccountAnalyticsWithHttpInfoAsync(DateOnly startDate, DateOnly endDate, string? fromClaimedContent = default(string?), string? pinFormat = default(string?), string? appTypes = default(string?), string? contentType = default(string?), string? source = default(string?), List<string>? metricTypes = default(List<string>?), string? splitField = default(string?), string? adAccountId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start_date", startDate));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "end_date", endDate));
            if (fromClaimedContent != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "from_claimed_content", fromClaimedContent));
            }
            if (pinFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "pin_format", pinFormat));
            }
            if (appTypes != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "app_types", appTypes));
            }
            if (contentType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "content_type", contentType));
            }
            if (source != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "source", source));
            }
            if (metricTypes != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("csv", "metric_types", metricTypes));
            }
            if (splitField != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "split_field", splitField));
            }
            if (adAccountId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ad_account_id", adAccountId));
            }

            localVarRequestOptions.Operation = "UserAccountApi.UserAccountAnalytics";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (pinterest_oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Dictionary<string, AnalyticsMetricsResponse>>("/user_account/analytics", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserAccountAnalytics", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get user account top pins analytics Gets analytics data about a user&#39;s top pins (limited to the top 50). - By default, the \&quot;operation user_account\&quot; is the token user_account.  Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Metric report start date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days back from today.</param>
        /// <param name="endDate">Metric report end date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days past start_date.</param>
        /// <param name="sortBy">Specify sorting order for metrics</param>
        /// <param name="fromClaimedContent">Filter on Pins that match your claimed domain. (optional, default to BOTH)</param>
        /// <param name="pinFormat">Pin formats to get data for, default is all. (optional, default to ALL)</param>
        /// <param name="appTypes">Apps or devices to get data for, default is all. (optional, default to ALL)</param>
        /// <param name="contentType">Filter to paid or organic data. Default is all. (optional, default to ALL)</param>
        /// <param name="source">Filter to activity from Pins created and saved by your, or activity created and saved by others from your claimed accounts (optional, default to ALL)</param>
        /// <param name="metricTypes">Metric types to get data for, default is all.  (optional)</param>
        /// <param name="numOfPins">Number of pins to include, default is 10. Max is 50. (optional, default to 10)</param>
        /// <param name="createdInLastNDays">Get metrics for pins created in the last \&quot;n\&quot; days. (optional)</param>
        /// <param name="adAccountId">Unique identifier of an ad account. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TopPinsAnalyticsResponse</returns>
        public TopPinsAnalyticsResponse UserAccountAnalyticsTopPins(DateOnly startDate, DateOnly endDate, string sortBy, string? fromClaimedContent = default(string?), string? pinFormat = default(string?), string? appTypes = default(string?), string? contentType = default(string?), string? source = default(string?), List<string>? metricTypes = default(List<string>?), int? numOfPins = default(int?), int? createdInLastNDays = default(int?), string? adAccountId = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<TopPinsAnalyticsResponse> localVarResponse = UserAccountAnalyticsTopPinsWithHttpInfo(startDate, endDate, sortBy, fromClaimedContent, pinFormat, appTypes, contentType, source, metricTypes, numOfPins, createdInLastNDays, adAccountId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get user account top pins analytics Gets analytics data about a user&#39;s top pins (limited to the top 50). - By default, the \&quot;operation user_account\&quot; is the token user_account.  Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Metric report start date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days back from today.</param>
        /// <param name="endDate">Metric report end date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days past start_date.</param>
        /// <param name="sortBy">Specify sorting order for metrics</param>
        /// <param name="fromClaimedContent">Filter on Pins that match your claimed domain. (optional, default to BOTH)</param>
        /// <param name="pinFormat">Pin formats to get data for, default is all. (optional, default to ALL)</param>
        /// <param name="appTypes">Apps or devices to get data for, default is all. (optional, default to ALL)</param>
        /// <param name="contentType">Filter to paid or organic data. Default is all. (optional, default to ALL)</param>
        /// <param name="source">Filter to activity from Pins created and saved by your, or activity created and saved by others from your claimed accounts (optional, default to ALL)</param>
        /// <param name="metricTypes">Metric types to get data for, default is all.  (optional)</param>
        /// <param name="numOfPins">Number of pins to include, default is 10. Max is 50. (optional, default to 10)</param>
        /// <param name="createdInLastNDays">Get metrics for pins created in the last \&quot;n\&quot; days. (optional)</param>
        /// <param name="adAccountId">Unique identifier of an ad account. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TopPinsAnalyticsResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<TopPinsAnalyticsResponse> UserAccountAnalyticsTopPinsWithHttpInfo(DateOnly startDate, DateOnly endDate, string sortBy, string? fromClaimedContent = default(string?), string? pinFormat = default(string?), string? appTypes = default(string?), string? contentType = default(string?), string? source = default(string?), List<string>? metricTypes = default(List<string>?), int? numOfPins = default(int?), int? createdInLastNDays = default(int?), string? adAccountId = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'sortBy' is set
            if (sortBy == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sortBy' when calling UserAccountApi->UserAccountAnalyticsTopPins");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start_date", startDate));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "end_date", endDate));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "sort_by", sortBy));
            if (fromClaimedContent != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "from_claimed_content", fromClaimedContent));
            }
            if (pinFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "pin_format", pinFormat));
            }
            if (appTypes != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "app_types", appTypes));
            }
            if (contentType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "content_type", contentType));
            }
            if (source != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "source", source));
            }
            if (metricTypes != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("csv", "metric_types", metricTypes));
            }
            if (numOfPins != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "num_of_pins", numOfPins));
            }
            if (createdInLastNDays != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "created_in_last_n_days", createdInLastNDays));
            }
            if (adAccountId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ad_account_id", adAccountId));
            }

            localVarRequestOptions.Operation = "UserAccountApi.UserAccountAnalyticsTopPins";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (pinterest_oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (client_credentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<TopPinsAnalyticsResponse>("/user_account/analytics/top_pins", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserAccountAnalyticsTopPins", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get user account top pins analytics Gets analytics data about a user&#39;s top pins (limited to the top 50). - By default, the \&quot;operation user_account\&quot; is the token user_account.  Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Metric report start date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days back from today.</param>
        /// <param name="endDate">Metric report end date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days past start_date.</param>
        /// <param name="sortBy">Specify sorting order for metrics</param>
        /// <param name="fromClaimedContent">Filter on Pins that match your claimed domain. (optional, default to BOTH)</param>
        /// <param name="pinFormat">Pin formats to get data for, default is all. (optional, default to ALL)</param>
        /// <param name="appTypes">Apps or devices to get data for, default is all. (optional, default to ALL)</param>
        /// <param name="contentType">Filter to paid or organic data. Default is all. (optional, default to ALL)</param>
        /// <param name="source">Filter to activity from Pins created and saved by your, or activity created and saved by others from your claimed accounts (optional, default to ALL)</param>
        /// <param name="metricTypes">Metric types to get data for, default is all.  (optional)</param>
        /// <param name="numOfPins">Number of pins to include, default is 10. Max is 50. (optional, default to 10)</param>
        /// <param name="createdInLastNDays">Get metrics for pins created in the last \&quot;n\&quot; days. (optional)</param>
        /// <param name="adAccountId">Unique identifier of an ad account. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TopPinsAnalyticsResponse</returns>
        public async System.Threading.Tasks.Task<TopPinsAnalyticsResponse> UserAccountAnalyticsTopPinsAsync(DateOnly startDate, DateOnly endDate, string sortBy, string? fromClaimedContent = default(string?), string? pinFormat = default(string?), string? appTypes = default(string?), string? contentType = default(string?), string? source = default(string?), List<string>? metricTypes = default(List<string>?), int? numOfPins = default(int?), int? createdInLastNDays = default(int?), string? adAccountId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<TopPinsAnalyticsResponse> localVarResponse = await UserAccountAnalyticsTopPinsWithHttpInfoAsync(startDate, endDate, sortBy, fromClaimedContent, pinFormat, appTypes, contentType, source, metricTypes, numOfPins, createdInLastNDays, adAccountId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get user account top pins analytics Gets analytics data about a user&#39;s top pins (limited to the top 50). - By default, the \&quot;operation user_account\&quot; is the token user_account.  Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Metric report start date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days back from today.</param>
        /// <param name="endDate">Metric report end date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days past start_date.</param>
        /// <param name="sortBy">Specify sorting order for metrics</param>
        /// <param name="fromClaimedContent">Filter on Pins that match your claimed domain. (optional, default to BOTH)</param>
        /// <param name="pinFormat">Pin formats to get data for, default is all. (optional, default to ALL)</param>
        /// <param name="appTypes">Apps or devices to get data for, default is all. (optional, default to ALL)</param>
        /// <param name="contentType">Filter to paid or organic data. Default is all. (optional, default to ALL)</param>
        /// <param name="source">Filter to activity from Pins created and saved by your, or activity created and saved by others from your claimed accounts (optional, default to ALL)</param>
        /// <param name="metricTypes">Metric types to get data for, default is all.  (optional)</param>
        /// <param name="numOfPins">Number of pins to include, default is 10. Max is 50. (optional, default to 10)</param>
        /// <param name="createdInLastNDays">Get metrics for pins created in the last \&quot;n\&quot; days. (optional)</param>
        /// <param name="adAccountId">Unique identifier of an ad account. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TopPinsAnalyticsResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<TopPinsAnalyticsResponse>> UserAccountAnalyticsTopPinsWithHttpInfoAsync(DateOnly startDate, DateOnly endDate, string sortBy, string? fromClaimedContent = default(string?), string? pinFormat = default(string?), string? appTypes = default(string?), string? contentType = default(string?), string? source = default(string?), List<string>? metricTypes = default(List<string>?), int? numOfPins = default(int?), int? createdInLastNDays = default(int?), string? adAccountId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'sortBy' is set
            if (sortBy == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sortBy' when calling UserAccountApi->UserAccountAnalyticsTopPins");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start_date", startDate));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "end_date", endDate));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "sort_by", sortBy));
            if (fromClaimedContent != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "from_claimed_content", fromClaimedContent));
            }
            if (pinFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "pin_format", pinFormat));
            }
            if (appTypes != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "app_types", appTypes));
            }
            if (contentType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "content_type", contentType));
            }
            if (source != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "source", source));
            }
            if (metricTypes != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("csv", "metric_types", metricTypes));
            }
            if (numOfPins != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "num_of_pins", numOfPins));
            }
            if (createdInLastNDays != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "created_in_last_n_days", createdInLastNDays));
            }
            if (adAccountId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ad_account_id", adAccountId));
            }

            localVarRequestOptions.Operation = "UserAccountApi.UserAccountAnalyticsTopPins";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (pinterest_oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (client_credentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TopPinsAnalyticsResponse>("/user_account/analytics/top_pins", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserAccountAnalyticsTopPins", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get user account top video pins analytics Gets analytics data about a user&#39;s top video pins (limited to the top 50). - By default, the \&quot;operation user_account\&quot; is the token user_account.  Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Metric report start date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days back from today.</param>
        /// <param name="endDate">Metric report end date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days past start_date.</param>
        /// <param name="sortBy">Specify sorting order for video metrics</param>
        /// <param name="fromClaimedContent">Filter on Pins that match your claimed domain. (optional, default to BOTH)</param>
        /// <param name="pinFormat">Pin formats to get data for, default is all. (optional, default to ALL)</param>
        /// <param name="appTypes">Apps or devices to get data for, default is all. (optional, default to ALL)</param>
        /// <param name="contentType">Filter to paid or organic data. Default is all. (optional, default to ALL)</param>
        /// <param name="source">Filter to activity from Pins created and saved by your, or activity created and saved by others from your claimed accounts (optional, default to ALL)</param>
        /// <param name="metricTypes">Metric types to get video data for, default is all.  (optional)</param>
        /// <param name="numOfPins">Number of pins to include, default is 10. Max is 50. (optional, default to 10)</param>
        /// <param name="createdInLastNDays">Get metrics for pins created in the last \&quot;n\&quot; days. (optional)</param>
        /// <param name="adAccountId">Unique identifier of an ad account. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TopVideoPinsAnalyticsResponse</returns>
        public TopVideoPinsAnalyticsResponse UserAccountAnalyticsTopVideoPins(DateOnly startDate, DateOnly endDate, string sortBy, string? fromClaimedContent = default(string?), string? pinFormat = default(string?), string? appTypes = default(string?), string? contentType = default(string?), string? source = default(string?), List<string>? metricTypes = default(List<string>?), int? numOfPins = default(int?), int? createdInLastNDays = default(int?), string? adAccountId = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<TopVideoPinsAnalyticsResponse> localVarResponse = UserAccountAnalyticsTopVideoPinsWithHttpInfo(startDate, endDate, sortBy, fromClaimedContent, pinFormat, appTypes, contentType, source, metricTypes, numOfPins, createdInLastNDays, adAccountId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get user account top video pins analytics Gets analytics data about a user&#39;s top video pins (limited to the top 50). - By default, the \&quot;operation user_account\&quot; is the token user_account.  Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Metric report start date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days back from today.</param>
        /// <param name="endDate">Metric report end date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days past start_date.</param>
        /// <param name="sortBy">Specify sorting order for video metrics</param>
        /// <param name="fromClaimedContent">Filter on Pins that match your claimed domain. (optional, default to BOTH)</param>
        /// <param name="pinFormat">Pin formats to get data for, default is all. (optional, default to ALL)</param>
        /// <param name="appTypes">Apps or devices to get data for, default is all. (optional, default to ALL)</param>
        /// <param name="contentType">Filter to paid or organic data. Default is all. (optional, default to ALL)</param>
        /// <param name="source">Filter to activity from Pins created and saved by your, or activity created and saved by others from your claimed accounts (optional, default to ALL)</param>
        /// <param name="metricTypes">Metric types to get video data for, default is all.  (optional)</param>
        /// <param name="numOfPins">Number of pins to include, default is 10. Max is 50. (optional, default to 10)</param>
        /// <param name="createdInLastNDays">Get metrics for pins created in the last \&quot;n\&quot; days. (optional)</param>
        /// <param name="adAccountId">Unique identifier of an ad account. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TopVideoPinsAnalyticsResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<TopVideoPinsAnalyticsResponse> UserAccountAnalyticsTopVideoPinsWithHttpInfo(DateOnly startDate, DateOnly endDate, string sortBy, string? fromClaimedContent = default(string?), string? pinFormat = default(string?), string? appTypes = default(string?), string? contentType = default(string?), string? source = default(string?), List<string>? metricTypes = default(List<string>?), int? numOfPins = default(int?), int? createdInLastNDays = default(int?), string? adAccountId = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'sortBy' is set
            if (sortBy == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sortBy' when calling UserAccountApi->UserAccountAnalyticsTopVideoPins");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start_date", startDate));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "end_date", endDate));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "sort_by", sortBy));
            if (fromClaimedContent != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "from_claimed_content", fromClaimedContent));
            }
            if (pinFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "pin_format", pinFormat));
            }
            if (appTypes != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "app_types", appTypes));
            }
            if (contentType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "content_type", contentType));
            }
            if (source != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "source", source));
            }
            if (metricTypes != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("csv", "metric_types", metricTypes));
            }
            if (numOfPins != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "num_of_pins", numOfPins));
            }
            if (createdInLastNDays != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "created_in_last_n_days", createdInLastNDays));
            }
            if (adAccountId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ad_account_id", adAccountId));
            }

            localVarRequestOptions.Operation = "UserAccountApi.UserAccountAnalyticsTopVideoPins";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (pinterest_oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (client_credentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<TopVideoPinsAnalyticsResponse>("/user_account/analytics/top_video_pins", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserAccountAnalyticsTopVideoPins", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get user account top video pins analytics Gets analytics data about a user&#39;s top video pins (limited to the top 50). - By default, the \&quot;operation user_account\&quot; is the token user_account.  Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Metric report start date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days back from today.</param>
        /// <param name="endDate">Metric report end date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days past start_date.</param>
        /// <param name="sortBy">Specify sorting order for video metrics</param>
        /// <param name="fromClaimedContent">Filter on Pins that match your claimed domain. (optional, default to BOTH)</param>
        /// <param name="pinFormat">Pin formats to get data for, default is all. (optional, default to ALL)</param>
        /// <param name="appTypes">Apps or devices to get data for, default is all. (optional, default to ALL)</param>
        /// <param name="contentType">Filter to paid or organic data. Default is all. (optional, default to ALL)</param>
        /// <param name="source">Filter to activity from Pins created and saved by your, or activity created and saved by others from your claimed accounts (optional, default to ALL)</param>
        /// <param name="metricTypes">Metric types to get video data for, default is all.  (optional)</param>
        /// <param name="numOfPins">Number of pins to include, default is 10. Max is 50. (optional, default to 10)</param>
        /// <param name="createdInLastNDays">Get metrics for pins created in the last \&quot;n\&quot; days. (optional)</param>
        /// <param name="adAccountId">Unique identifier of an ad account. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TopVideoPinsAnalyticsResponse</returns>
        public async System.Threading.Tasks.Task<TopVideoPinsAnalyticsResponse> UserAccountAnalyticsTopVideoPinsAsync(DateOnly startDate, DateOnly endDate, string sortBy, string? fromClaimedContent = default(string?), string? pinFormat = default(string?), string? appTypes = default(string?), string? contentType = default(string?), string? source = default(string?), List<string>? metricTypes = default(List<string>?), int? numOfPins = default(int?), int? createdInLastNDays = default(int?), string? adAccountId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<TopVideoPinsAnalyticsResponse> localVarResponse = await UserAccountAnalyticsTopVideoPinsWithHttpInfoAsync(startDate, endDate, sortBy, fromClaimedContent, pinFormat, appTypes, contentType, source, metricTypes, numOfPins, createdInLastNDays, adAccountId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get user account top video pins analytics Gets analytics data about a user&#39;s top video pins (limited to the top 50). - By default, the \&quot;operation user_account\&quot; is the token user_account.  Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Metric report start date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days back from today.</param>
        /// <param name="endDate">Metric report end date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days past start_date.</param>
        /// <param name="sortBy">Specify sorting order for video metrics</param>
        /// <param name="fromClaimedContent">Filter on Pins that match your claimed domain. (optional, default to BOTH)</param>
        /// <param name="pinFormat">Pin formats to get data for, default is all. (optional, default to ALL)</param>
        /// <param name="appTypes">Apps or devices to get data for, default is all. (optional, default to ALL)</param>
        /// <param name="contentType">Filter to paid or organic data. Default is all. (optional, default to ALL)</param>
        /// <param name="source">Filter to activity from Pins created and saved by your, or activity created and saved by others from your claimed accounts (optional, default to ALL)</param>
        /// <param name="metricTypes">Metric types to get video data for, default is all.  (optional)</param>
        /// <param name="numOfPins">Number of pins to include, default is 10. Max is 50. (optional, default to 10)</param>
        /// <param name="createdInLastNDays">Get metrics for pins created in the last \&quot;n\&quot; days. (optional)</param>
        /// <param name="adAccountId">Unique identifier of an ad account. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TopVideoPinsAnalyticsResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<TopVideoPinsAnalyticsResponse>> UserAccountAnalyticsTopVideoPinsWithHttpInfoAsync(DateOnly startDate, DateOnly endDate, string sortBy, string? fromClaimedContent = default(string?), string? pinFormat = default(string?), string? appTypes = default(string?), string? contentType = default(string?), string? source = default(string?), List<string>? metricTypes = default(List<string>?), int? numOfPins = default(int?), int? createdInLastNDays = default(int?), string? adAccountId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'sortBy' is set
            if (sortBy == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sortBy' when calling UserAccountApi->UserAccountAnalyticsTopVideoPins");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start_date", startDate));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "end_date", endDate));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "sort_by", sortBy));
            if (fromClaimedContent != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "from_claimed_content", fromClaimedContent));
            }
            if (pinFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "pin_format", pinFormat));
            }
            if (appTypes != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "app_types", appTypes));
            }
            if (contentType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "content_type", contentType));
            }
            if (source != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "source", source));
            }
            if (metricTypes != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("csv", "metric_types", metricTypes));
            }
            if (numOfPins != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "num_of_pins", numOfPins));
            }
            if (createdInLastNDays != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "created_in_last_n_days", createdInLastNDays));
            }
            if (adAccountId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ad_account_id", adAccountId));
            }

            localVarRequestOptions.Operation = "UserAccountApi.UserAccountAnalyticsTopVideoPins";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (pinterest_oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (client_credentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TopVideoPinsAnalyticsResponse>("/user_account/analytics/top_video_pins", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserAccountAnalyticsTopVideoPins", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List following interests Get a list of a user&#39;s following interests in one place.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">A valid username</param>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserAccountFollowedInterests200Response</returns>
        public UserAccountFollowedInterests200Response UserAccountFollowedInterests(string username, string? bookmark = default(string?), int? pageSize = default(int?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<UserAccountFollowedInterests200Response> localVarResponse = UserAccountFollowedInterestsWithHttpInfo(username, bookmark, pageSize);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List following interests Get a list of a user&#39;s following interests in one place.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">A valid username</param>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserAccountFollowedInterests200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<UserAccountFollowedInterests200Response> UserAccountFollowedInterestsWithHttpInfo(string username, string? bookmark = default(string?), int? pageSize = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'username' when calling UserAccountApi->UserAccountFollowedInterests");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("username", Org.OpenAPITools.Client.ClientUtils.ParameterToString(username)); // path parameter
            if (bookmark != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "bookmark", bookmark));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }

            localVarRequestOptions.Operation = "UserAccountApi.UserAccountFollowedInterests";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (pinterest_oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (client_credentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<UserAccountFollowedInterests200Response>("/users/{username}/interests/follow", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserAccountFollowedInterests", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List following interests Get a list of a user&#39;s following interests in one place.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">A valid username</param>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserAccountFollowedInterests200Response</returns>
        public async System.Threading.Tasks.Task<UserAccountFollowedInterests200Response> UserAccountFollowedInterestsAsync(string username, string? bookmark = default(string?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<UserAccountFollowedInterests200Response> localVarResponse = await UserAccountFollowedInterestsWithHttpInfoAsync(username, bookmark, pageSize, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List following interests Get a list of a user&#39;s following interests in one place.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">A valid username</param>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserAccountFollowedInterests200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<UserAccountFollowedInterests200Response>> UserAccountFollowedInterestsWithHttpInfoAsync(string username, string? bookmark = default(string?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'username' when calling UserAccountApi->UserAccountFollowedInterests");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("username", Org.OpenAPITools.Client.ClientUtils.ParameterToString(username)); // path parameter
            if (bookmark != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "bookmark", bookmark));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }

            localVarRequestOptions.Operation = "UserAccountApi.UserAccountFollowedInterests";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (pinterest_oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (client_credentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<UserAccountFollowedInterests200Response>("/users/{username}/interests/follow", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserAccountFollowedInterests", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get user account Get account information for the \&quot;operation user_account\&quot; - By default, the \&quot;operation user_account\&quot; is the token user_account.  If using Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. See &lt;a href&#x3D;&#39;/docs/getting-started/using-business-access/&#39;&gt;Understanding Business Access&lt;/a&gt; for more information.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="adAccountId">Unique identifier of an ad account. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Account</returns>
        public Account UserAccountGet(string? adAccountId = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Account> localVarResponse = UserAccountGetWithHttpInfo(adAccountId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get user account Get account information for the \&quot;operation user_account\&quot; - By default, the \&quot;operation user_account\&quot; is the token user_account.  If using Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. See &lt;a href&#x3D;&#39;/docs/getting-started/using-business-access/&#39;&gt;Understanding Business Access&lt;/a&gt; for more information.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="adAccountId">Unique identifier of an ad account. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Account</returns>
        public Org.OpenAPITools.Client.ApiResponse<Account> UserAccountGetWithHttpInfo(string? adAccountId = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (adAccountId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ad_account_id", adAccountId));
            }

            localVarRequestOptions.Operation = "UserAccountApi.UserAccountGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (pinterest_oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (client_credentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Account>("/user_account", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserAccountGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get user account Get account information for the \&quot;operation user_account\&quot; - By default, the \&quot;operation user_account\&quot; is the token user_account.  If using Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. See &lt;a href&#x3D;&#39;/docs/getting-started/using-business-access/&#39;&gt;Understanding Business Access&lt;/a&gt; for more information.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="adAccountId">Unique identifier of an ad account. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Account</returns>
        public async System.Threading.Tasks.Task<Account> UserAccountGetAsync(string? adAccountId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Account> localVarResponse = await UserAccountGetWithHttpInfoAsync(adAccountId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get user account Get account information for the \&quot;operation user_account\&quot; - By default, the \&quot;operation user_account\&quot; is the token user_account.  If using Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. See &lt;a href&#x3D;&#39;/docs/getting-started/using-business-access/&#39;&gt;Understanding Business Access&lt;/a&gt; for more information.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="adAccountId">Unique identifier of an ad account. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Account)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Account>> UserAccountGetWithHttpInfoAsync(string? adAccountId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (adAccountId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ad_account_id", adAccountId));
            }

            localVarRequestOptions.Operation = "UserAccountApi.UserAccountGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (pinterest_oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (client_credentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Account>("/user_account", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserAccountGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List following Get a list of who a certain user follows.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="feedType">Thrift param specifying what type of followees will be kept. Default to include all followees. (optional)</param>
        /// <param name="explicitFollowing">Whether or not to include implicit user follows, which means followees with board follows. When explicit_following is True, it means we only want explicit user follows. (optional, default to false)</param>
        /// <param name="adAccountId">Unique identifier of an ad account. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserFollowingGet200Response</returns>
        public UserFollowingGet200Response UserFollowingGet(string? bookmark = default(string?), int? pageSize = default(int?), UserFollowingFeedType? feedType = default(UserFollowingFeedType?), bool? explicitFollowing = default(bool?), string? adAccountId = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<UserFollowingGet200Response> localVarResponse = UserFollowingGetWithHttpInfo(bookmark, pageSize, feedType, explicitFollowing, adAccountId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List following Get a list of who a certain user follows.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="feedType">Thrift param specifying what type of followees will be kept. Default to include all followees. (optional)</param>
        /// <param name="explicitFollowing">Whether or not to include implicit user follows, which means followees with board follows. When explicit_following is True, it means we only want explicit user follows. (optional, default to false)</param>
        /// <param name="adAccountId">Unique identifier of an ad account. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserFollowingGet200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<UserFollowingGet200Response> UserFollowingGetWithHttpInfo(string? bookmark = default(string?), int? pageSize = default(int?), UserFollowingFeedType? feedType = default(UserFollowingFeedType?), bool? explicitFollowing = default(bool?), string? adAccountId = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (bookmark != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "bookmark", bookmark));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (feedType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "feed_type", feedType));
            }
            if (explicitFollowing != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "explicit_following", explicitFollowing));
            }
            if (adAccountId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ad_account_id", adAccountId));
            }

            localVarRequestOptions.Operation = "UserAccountApi.UserFollowingGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (pinterest_oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (client_credentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<UserFollowingGet200Response>("/user_account/following", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserFollowingGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List following Get a list of who a certain user follows.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="feedType">Thrift param specifying what type of followees will be kept. Default to include all followees. (optional)</param>
        /// <param name="explicitFollowing">Whether or not to include implicit user follows, which means followees with board follows. When explicit_following is True, it means we only want explicit user follows. (optional, default to false)</param>
        /// <param name="adAccountId">Unique identifier of an ad account. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserFollowingGet200Response</returns>
        public async System.Threading.Tasks.Task<UserFollowingGet200Response> UserFollowingGetAsync(string? bookmark = default(string?), int? pageSize = default(int?), UserFollowingFeedType? feedType = default(UserFollowingFeedType?), bool? explicitFollowing = default(bool?), string? adAccountId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<UserFollowingGet200Response> localVarResponse = await UserFollowingGetWithHttpInfoAsync(bookmark, pageSize, feedType, explicitFollowing, adAccountId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List following Get a list of who a certain user follows.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="feedType">Thrift param specifying what type of followees will be kept. Default to include all followees. (optional)</param>
        /// <param name="explicitFollowing">Whether or not to include implicit user follows, which means followees with board follows. When explicit_following is True, it means we only want explicit user follows. (optional, default to false)</param>
        /// <param name="adAccountId">Unique identifier of an ad account. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserFollowingGet200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<UserFollowingGet200Response>> UserFollowingGetWithHttpInfoAsync(string? bookmark = default(string?), int? pageSize = default(int?), UserFollowingFeedType? feedType = default(UserFollowingFeedType?), bool? explicitFollowing = default(bool?), string? adAccountId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (bookmark != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "bookmark", bookmark));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (feedType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "feed_type", feedType));
            }
            if (explicitFollowing != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "explicit_following", explicitFollowing));
            }
            if (adAccountId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ad_account_id", adAccountId));
            }

            localVarRequestOptions.Operation = "UserAccountApi.UserFollowingGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (pinterest_oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (client_credentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<UserFollowingGet200Response>("/user_account/following", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserFollowingGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get user websites Get user websites, claimed or not
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserWebsitesGet200Response</returns>
        public UserWebsitesGet200Response UserWebsitesGet(string? bookmark = default(string?), int? pageSize = default(int?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<UserWebsitesGet200Response> localVarResponse = UserWebsitesGetWithHttpInfo(bookmark, pageSize);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get user websites Get user websites, claimed or not
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserWebsitesGet200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<UserWebsitesGet200Response> UserWebsitesGetWithHttpInfo(string? bookmark = default(string?), int? pageSize = default(int?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (bookmark != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "bookmark", bookmark));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }

            localVarRequestOptions.Operation = "UserAccountApi.UserWebsitesGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (pinterest_oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<UserWebsitesGet200Response>("/user_account/websites", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserWebsitesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get user websites Get user websites, claimed or not
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserWebsitesGet200Response</returns>
        public async System.Threading.Tasks.Task<UserWebsitesGet200Response> UserWebsitesGetAsync(string? bookmark = default(string?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<UserWebsitesGet200Response> localVarResponse = await UserWebsitesGetWithHttpInfoAsync(bookmark, pageSize, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get user websites Get user websites, claimed or not
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserWebsitesGet200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<UserWebsitesGet200Response>> UserWebsitesGetWithHttpInfoAsync(string? bookmark = default(string?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (bookmark != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "bookmark", bookmark));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }

            localVarRequestOptions.Operation = "UserAccountApi.UserWebsitesGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (pinterest_oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<UserWebsitesGet200Response>("/user_account/websites", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserWebsitesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Verify website Verify a website as a signed-in user.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userWebsiteVerifyRequest">Verify a website.</param>
        /// <param name="adAccountId">Unique identifier of an ad account. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserWebsiteSummary</returns>
        public UserWebsiteSummary VerifyWebsiteUpdate(UserWebsiteVerifyRequest userWebsiteVerifyRequest, string? adAccountId = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<UserWebsiteSummary> localVarResponse = VerifyWebsiteUpdateWithHttpInfo(userWebsiteVerifyRequest, adAccountId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Verify website Verify a website as a signed-in user.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userWebsiteVerifyRequest">Verify a website.</param>
        /// <param name="adAccountId">Unique identifier of an ad account. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserWebsiteSummary</returns>
        public Org.OpenAPITools.Client.ApiResponse<UserWebsiteSummary> VerifyWebsiteUpdateWithHttpInfo(UserWebsiteVerifyRequest userWebsiteVerifyRequest, string? adAccountId = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'userWebsiteVerifyRequest' is set
            if (userWebsiteVerifyRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'userWebsiteVerifyRequest' when calling UserAccountApi->VerifyWebsiteUpdate");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (adAccountId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ad_account_id", adAccountId));
            }
            localVarRequestOptions.Data = userWebsiteVerifyRequest;

            localVarRequestOptions.Operation = "UserAccountApi.VerifyWebsiteUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (pinterest_oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<UserWebsiteSummary>("/user_account/websites", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VerifyWebsiteUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Verify website Verify a website as a signed-in user.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userWebsiteVerifyRequest">Verify a website.</param>
        /// <param name="adAccountId">Unique identifier of an ad account. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserWebsiteSummary</returns>
        public async System.Threading.Tasks.Task<UserWebsiteSummary> VerifyWebsiteUpdateAsync(UserWebsiteVerifyRequest userWebsiteVerifyRequest, string? adAccountId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<UserWebsiteSummary> localVarResponse = await VerifyWebsiteUpdateWithHttpInfoAsync(userWebsiteVerifyRequest, adAccountId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Verify website Verify a website as a signed-in user.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userWebsiteVerifyRequest">Verify a website.</param>
        /// <param name="adAccountId">Unique identifier of an ad account. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserWebsiteSummary)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<UserWebsiteSummary>> VerifyWebsiteUpdateWithHttpInfoAsync(UserWebsiteVerifyRequest userWebsiteVerifyRequest, string? adAccountId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'userWebsiteVerifyRequest' is set
            if (userWebsiteVerifyRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'userWebsiteVerifyRequest' when calling UserAccountApi->VerifyWebsiteUpdate");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (adAccountId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ad_account_id", adAccountId));
            }
            localVarRequestOptions.Data = userWebsiteVerifyRequest;

            localVarRequestOptions.Operation = "UserAccountApi.VerifyWebsiteUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (pinterest_oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<UserWebsiteSummary>("/user_account/websites", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VerifyWebsiteUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get user verification code for website claiming Get verification code for user to install on the website to claim it.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="adAccountId">Unique identifier of an ad account. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserWebsiteVerificationCode</returns>
        public UserWebsiteVerificationCode WebsiteVerificationGet(string? adAccountId = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<UserWebsiteVerificationCode> localVarResponse = WebsiteVerificationGetWithHttpInfo(adAccountId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get user verification code for website claiming Get verification code for user to install on the website to claim it.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="adAccountId">Unique identifier of an ad account. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserWebsiteVerificationCode</returns>
        public Org.OpenAPITools.Client.ApiResponse<UserWebsiteVerificationCode> WebsiteVerificationGetWithHttpInfo(string? adAccountId = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (adAccountId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ad_account_id", adAccountId));
            }

            localVarRequestOptions.Operation = "UserAccountApi.WebsiteVerificationGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (pinterest_oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (client_credentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<UserWebsiteVerificationCode>("/user_account/websites/verification", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WebsiteVerificationGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get user verification code for website claiming Get verification code for user to install on the website to claim it.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="adAccountId">Unique identifier of an ad account. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserWebsiteVerificationCode</returns>
        public async System.Threading.Tasks.Task<UserWebsiteVerificationCode> WebsiteVerificationGetAsync(string? adAccountId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<UserWebsiteVerificationCode> localVarResponse = await WebsiteVerificationGetWithHttpInfoAsync(adAccountId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get user verification code for website claiming Get verification code for user to install on the website to claim it.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="adAccountId">Unique identifier of an ad account. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserWebsiteVerificationCode)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<UserWebsiteVerificationCode>> WebsiteVerificationGetWithHttpInfoAsync(string? adAccountId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (adAccountId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ad_account_id", adAccountId));
            }

            localVarRequestOptions.Operation = "UserAccountApi.WebsiteVerificationGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (pinterest_oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (client_credentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<UserWebsiteVerificationCode>("/user_account/websites/verification", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WebsiteVerificationGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
