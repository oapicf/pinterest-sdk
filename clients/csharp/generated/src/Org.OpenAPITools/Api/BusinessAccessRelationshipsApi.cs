/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Client.Auth;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBusinessAccessRelationshipsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Terminate business memberships
        /// </summary>
        /// <remarks>
        /// Terminate memberships between the specified members and your business.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Business id</param>
        /// <param name="membersToDeleteBody">List of members with role to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeletedMembersResponse</returns>
        DeletedMembersResponse DeleteBusinessMembership(string businessId, MembersToDeleteBody membersToDeleteBody, int operationIndex = 0);

        /// <summary>
        /// Terminate business memberships
        /// </summary>
        /// <remarks>
        /// Terminate memberships between the specified members and your business.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Business id</param>
        /// <param name="membersToDeleteBody">List of members with role to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeletedMembersResponse</returns>
        ApiResponse<DeletedMembersResponse> DeleteBusinessMembershipWithHttpInfo(string businessId, MembersToDeleteBody membersToDeleteBody, int operationIndex = 0);
        /// <summary>
        /// Terminate business partnerships
        /// </summary>
        /// <remarks>
        /// Terminate partnerships between the specified partners and your business. Note: You may only batch terminate partners of the same partner type.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="deletePartnersRequest">An object containing a \&quot;partner_ids\&quot; property composed of a list of partner IDs and a \&quot;partners_type\&quot; property specifying the type of partners to delete. </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeletePartnersResponse</returns>
        DeletePartnersResponse DeleteBusinessPartners(string businessId, DeletePartnersRequest deletePartnersRequest, int operationIndex = 0);

        /// <summary>
        /// Terminate business partnerships
        /// </summary>
        /// <remarks>
        /// Terminate partnerships between the specified partners and your business. Note: You may only batch terminate partners of the same partner type.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="deletePartnersRequest">An object containing a \&quot;partner_ids\&quot; property composed of a list of partner IDs and a \&quot;partners_type\&quot; property specifying the type of partners to delete. </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeletePartnersResponse</returns>
        ApiResponse<DeletePartnersResponse> DeleteBusinessPartnersWithHttpInfo(string businessId, DeletePartnersRequest deletePartnersRequest, int operationIndex = 0);
        /// <summary>
        /// List business employers for user
        /// </summary>
        /// <remarks>
        /// Get all of the viewing user&#39;s business employers.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetBusinessEmployers200Response</returns>
        GetBusinessEmployers200Response GetBusinessEmployers(int? pageSize = default(int?), string? bookmark = default(string?), int operationIndex = 0);

        /// <summary>
        /// List business employers for user
        /// </summary>
        /// <remarks>
        /// Get all of the viewing user&#39;s business employers.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetBusinessEmployers200Response</returns>
        ApiResponse<GetBusinessEmployers200Response> GetBusinessEmployersWithHttpInfo(int? pageSize = default(int?), string? bookmark = default(string?), int operationIndex = 0);
        /// <summary>
        /// Get business members
        /// </summary>
        /// <remarks>
        /// Get all members of the specified business. The return response will include the member&#39;s business_role and assets they have access to if assets_summary&#x3D;TRUE
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="assetsSummary">Include assets summary in the response if this is true.  The assets summary returns a dictionary representing a summary of the assets for the business user ID, with information like the ad accounts and profiles the user has permissions for and what those permissions are (optional, default to false)</param>
        /// <param name="businessRoles">A list of business roles to filter the members by. Only members whose roles are in the specified roles will be returned. (optional)</param>
        /// <param name="memberIds">A list of business members ids separated by comma. (optional)</param>
        /// <param name="startIndex">An index to start fetching the results from. Only the results starting from this index will be returned. (optional, default to 0)</param>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetBusinessMembers200Response</returns>
        GetBusinessMembers200Response GetBusinessMembers(string businessId, bool? assetsSummary = default(bool?), List<MemberBusinessRole>? businessRoles = default(List<MemberBusinessRole>?), string? memberIds = default(string?), int? startIndex = default(int?), string? bookmark = default(string?), int? pageSize = default(int?), int operationIndex = 0);

        /// <summary>
        /// Get business members
        /// </summary>
        /// <remarks>
        /// Get all members of the specified business. The return response will include the member&#39;s business_role and assets they have access to if assets_summary&#x3D;TRUE
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="assetsSummary">Include assets summary in the response if this is true.  The assets summary returns a dictionary representing a summary of the assets for the business user ID, with information like the ad accounts and profiles the user has permissions for and what those permissions are (optional, default to false)</param>
        /// <param name="businessRoles">A list of business roles to filter the members by. Only members whose roles are in the specified roles will be returned. (optional)</param>
        /// <param name="memberIds">A list of business members ids separated by comma. (optional)</param>
        /// <param name="startIndex">An index to start fetching the results from. Only the results starting from this index will be returned. (optional, default to 0)</param>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetBusinessMembers200Response</returns>
        ApiResponse<GetBusinessMembers200Response> GetBusinessMembersWithHttpInfo(string businessId, bool? assetsSummary = default(bool?), List<MemberBusinessRole>? businessRoles = default(List<MemberBusinessRole>?), string? memberIds = default(string?), int? startIndex = default(int?), string? bookmark = default(string?), int? pageSize = default(int?), int operationIndex = 0);
        /// <summary>
        /// Get business partners
        /// </summary>
        /// <remarks>
        /// Get all partners of the specified business.  If the assets_summary&#x3D;TRUE and: - partner_type&#x3D;INTERNAL, the business assets returned are your business assets the partner has access to. - partner_type&#x3D;EXTERNAL, the business assets returned are your partner&#39;s business assets the partner has granted you   access to.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="assetsSummary">Include assets summary in the response if this is true.  The assets summary returns a dictionary representing a summary of the assets for the business user ID, with information like the ad accounts and profiles the user has permissions for and what those permissions are (optional, default to false)</param>
        /// <param name="partnerType">Specifies whether to fetch internal or external (shared) partners. If partner_type&#x3D;INTERNAL, the asset being queried is for accesses the partner has to your business assets.&lt;br&gt; If partner_type&#x3D;EXTERNAL, the asset being queried is for the accesses you have to the partner&#39;s business asset. (optional)</param>
        /// <param name="partnerIds">A list of business partner ids separated by commas used to filter the results. Only partners with the specified ids will be returned. (optional)</param>
        /// <param name="startIndex">An index to start fetching the results from. Only the results starting from this index will be returned. (optional, default to 0)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetBusinessPartners200Response</returns>
        GetBusinessPartners200Response GetBusinessPartners(string businessId, bool? assetsSummary = default(bool?), PartnerType? partnerType = default(PartnerType?), string? partnerIds = default(string?), int? startIndex = default(int?), int? pageSize = default(int?), string? bookmark = default(string?), int operationIndex = 0);

        /// <summary>
        /// Get business partners
        /// </summary>
        /// <remarks>
        /// Get all partners of the specified business.  If the assets_summary&#x3D;TRUE and: - partner_type&#x3D;INTERNAL, the business assets returned are your business assets the partner has access to. - partner_type&#x3D;EXTERNAL, the business assets returned are your partner&#39;s business assets the partner has granted you   access to.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="assetsSummary">Include assets summary in the response if this is true.  The assets summary returns a dictionary representing a summary of the assets for the business user ID, with information like the ad accounts and profiles the user has permissions for and what those permissions are (optional, default to false)</param>
        /// <param name="partnerType">Specifies whether to fetch internal or external (shared) partners. If partner_type&#x3D;INTERNAL, the asset being queried is for accesses the partner has to your business assets.&lt;br&gt; If partner_type&#x3D;EXTERNAL, the asset being queried is for the accesses you have to the partner&#39;s business asset. (optional)</param>
        /// <param name="partnerIds">A list of business partner ids separated by commas used to filter the results. Only partners with the specified ids will be returned. (optional)</param>
        /// <param name="startIndex">An index to start fetching the results from. Only the results starting from this index will be returned. (optional, default to 0)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetBusinessPartners200Response</returns>
        ApiResponse<GetBusinessPartners200Response> GetBusinessPartnersWithHttpInfo(string businessId, bool? assetsSummary = default(bool?), PartnerType? partnerType = default(PartnerType?), string? partnerIds = default(string?), int? startIndex = default(int?), int? pageSize = default(int?), string? bookmark = default(string?), int operationIndex = 0);
        /// <summary>
        /// Update member&#39;s business role
        /// </summary>
        /// <remarks>
        /// Update a member&#39;s business role within the business.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Business id</param>
        /// <param name="updateMemberBusinessRoleBody">List of objects with the member id and the business_role.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UpdateMemberResultsResponseArray</returns>
        UpdateMemberResultsResponseArray UpdateBusinessMemberships(string businessId, List<UpdateMemberBusinessRoleBody> updateMemberBusinessRoleBody, int operationIndex = 0);

        /// <summary>
        /// Update member&#39;s business role
        /// </summary>
        /// <remarks>
        /// Update a member&#39;s business role within the business.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Business id</param>
        /// <param name="updateMemberBusinessRoleBody">List of objects with the member id and the business_role.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UpdateMemberResultsResponseArray</returns>
        ApiResponse<UpdateMemberResultsResponseArray> UpdateBusinessMembershipsWithHttpInfo(string businessId, List<UpdateMemberBusinessRoleBody> updateMemberBusinessRoleBody, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBusinessAccessRelationshipsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Terminate business memberships
        /// </summary>
        /// <remarks>
        /// Terminate memberships between the specified members and your business.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Business id</param>
        /// <param name="membersToDeleteBody">List of members with role to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeletedMembersResponse</returns>
        System.Threading.Tasks.Task<DeletedMembersResponse> DeleteBusinessMembershipAsync(string businessId, MembersToDeleteBody membersToDeleteBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Terminate business memberships
        /// </summary>
        /// <remarks>
        /// Terminate memberships between the specified members and your business.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Business id</param>
        /// <param name="membersToDeleteBody">List of members with role to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeletedMembersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeletedMembersResponse>> DeleteBusinessMembershipWithHttpInfoAsync(string businessId, MembersToDeleteBody membersToDeleteBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Terminate business partnerships
        /// </summary>
        /// <remarks>
        /// Terminate partnerships between the specified partners and your business. Note: You may only batch terminate partners of the same partner type.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="deletePartnersRequest">An object containing a \&quot;partner_ids\&quot; property composed of a list of partner IDs and a \&quot;partners_type\&quot; property specifying the type of partners to delete. </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeletePartnersResponse</returns>
        System.Threading.Tasks.Task<DeletePartnersResponse> DeleteBusinessPartnersAsync(string businessId, DeletePartnersRequest deletePartnersRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Terminate business partnerships
        /// </summary>
        /// <remarks>
        /// Terminate partnerships between the specified partners and your business. Note: You may only batch terminate partners of the same partner type.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="deletePartnersRequest">An object containing a \&quot;partner_ids\&quot; property composed of a list of partner IDs and a \&quot;partners_type\&quot; property specifying the type of partners to delete. </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeletePartnersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeletePartnersResponse>> DeleteBusinessPartnersWithHttpInfoAsync(string businessId, DeletePartnersRequest deletePartnersRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List business employers for user
        /// </summary>
        /// <remarks>
        /// Get all of the viewing user&#39;s business employers.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetBusinessEmployers200Response</returns>
        System.Threading.Tasks.Task<GetBusinessEmployers200Response> GetBusinessEmployersAsync(int? pageSize = default(int?), string? bookmark = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List business employers for user
        /// </summary>
        /// <remarks>
        /// Get all of the viewing user&#39;s business employers.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetBusinessEmployers200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetBusinessEmployers200Response>> GetBusinessEmployersWithHttpInfoAsync(int? pageSize = default(int?), string? bookmark = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get business members
        /// </summary>
        /// <remarks>
        /// Get all members of the specified business. The return response will include the member&#39;s business_role and assets they have access to if assets_summary&#x3D;TRUE
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="assetsSummary">Include assets summary in the response if this is true.  The assets summary returns a dictionary representing a summary of the assets for the business user ID, with information like the ad accounts and profiles the user has permissions for and what those permissions are (optional, default to false)</param>
        /// <param name="businessRoles">A list of business roles to filter the members by. Only members whose roles are in the specified roles will be returned. (optional)</param>
        /// <param name="memberIds">A list of business members ids separated by comma. (optional)</param>
        /// <param name="startIndex">An index to start fetching the results from. Only the results starting from this index will be returned. (optional, default to 0)</param>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetBusinessMembers200Response</returns>
        System.Threading.Tasks.Task<GetBusinessMembers200Response> GetBusinessMembersAsync(string businessId, bool? assetsSummary = default(bool?), List<MemberBusinessRole>? businessRoles = default(List<MemberBusinessRole>?), string? memberIds = default(string?), int? startIndex = default(int?), string? bookmark = default(string?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get business members
        /// </summary>
        /// <remarks>
        /// Get all members of the specified business. The return response will include the member&#39;s business_role and assets they have access to if assets_summary&#x3D;TRUE
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="assetsSummary">Include assets summary in the response if this is true.  The assets summary returns a dictionary representing a summary of the assets for the business user ID, with information like the ad accounts and profiles the user has permissions for and what those permissions are (optional, default to false)</param>
        /// <param name="businessRoles">A list of business roles to filter the members by. Only members whose roles are in the specified roles will be returned. (optional)</param>
        /// <param name="memberIds">A list of business members ids separated by comma. (optional)</param>
        /// <param name="startIndex">An index to start fetching the results from. Only the results starting from this index will be returned. (optional, default to 0)</param>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetBusinessMembers200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetBusinessMembers200Response>> GetBusinessMembersWithHttpInfoAsync(string businessId, bool? assetsSummary = default(bool?), List<MemberBusinessRole>? businessRoles = default(List<MemberBusinessRole>?), string? memberIds = default(string?), int? startIndex = default(int?), string? bookmark = default(string?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get business partners
        /// </summary>
        /// <remarks>
        /// Get all partners of the specified business.  If the assets_summary&#x3D;TRUE and: - partner_type&#x3D;INTERNAL, the business assets returned are your business assets the partner has access to. - partner_type&#x3D;EXTERNAL, the business assets returned are your partner&#39;s business assets the partner has granted you   access to.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="assetsSummary">Include assets summary in the response if this is true.  The assets summary returns a dictionary representing a summary of the assets for the business user ID, with information like the ad accounts and profiles the user has permissions for and what those permissions are (optional, default to false)</param>
        /// <param name="partnerType">Specifies whether to fetch internal or external (shared) partners. If partner_type&#x3D;INTERNAL, the asset being queried is for accesses the partner has to your business assets.&lt;br&gt; If partner_type&#x3D;EXTERNAL, the asset being queried is for the accesses you have to the partner&#39;s business asset. (optional)</param>
        /// <param name="partnerIds">A list of business partner ids separated by commas used to filter the results. Only partners with the specified ids will be returned. (optional)</param>
        /// <param name="startIndex">An index to start fetching the results from. Only the results starting from this index will be returned. (optional, default to 0)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetBusinessPartners200Response</returns>
        System.Threading.Tasks.Task<GetBusinessPartners200Response> GetBusinessPartnersAsync(string businessId, bool? assetsSummary = default(bool?), PartnerType? partnerType = default(PartnerType?), string? partnerIds = default(string?), int? startIndex = default(int?), int? pageSize = default(int?), string? bookmark = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get business partners
        /// </summary>
        /// <remarks>
        /// Get all partners of the specified business.  If the assets_summary&#x3D;TRUE and: - partner_type&#x3D;INTERNAL, the business assets returned are your business assets the partner has access to. - partner_type&#x3D;EXTERNAL, the business assets returned are your partner&#39;s business assets the partner has granted you   access to.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="assetsSummary">Include assets summary in the response if this is true.  The assets summary returns a dictionary representing a summary of the assets for the business user ID, with information like the ad accounts and profiles the user has permissions for and what those permissions are (optional, default to false)</param>
        /// <param name="partnerType">Specifies whether to fetch internal or external (shared) partners. If partner_type&#x3D;INTERNAL, the asset being queried is for accesses the partner has to your business assets.&lt;br&gt; If partner_type&#x3D;EXTERNAL, the asset being queried is for the accesses you have to the partner&#39;s business asset. (optional)</param>
        /// <param name="partnerIds">A list of business partner ids separated by commas used to filter the results. Only partners with the specified ids will be returned. (optional)</param>
        /// <param name="startIndex">An index to start fetching the results from. Only the results starting from this index will be returned. (optional, default to 0)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetBusinessPartners200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetBusinessPartners200Response>> GetBusinessPartnersWithHttpInfoAsync(string businessId, bool? assetsSummary = default(bool?), PartnerType? partnerType = default(PartnerType?), string? partnerIds = default(string?), int? startIndex = default(int?), int? pageSize = default(int?), string? bookmark = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Update member&#39;s business role
        /// </summary>
        /// <remarks>
        /// Update a member&#39;s business role within the business.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Business id</param>
        /// <param name="updateMemberBusinessRoleBody">List of objects with the member id and the business_role.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateMemberResultsResponseArray</returns>
        System.Threading.Tasks.Task<UpdateMemberResultsResponseArray> UpdateBusinessMembershipsAsync(string businessId, List<UpdateMemberBusinessRoleBody> updateMemberBusinessRoleBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Update member&#39;s business role
        /// </summary>
        /// <remarks>
        /// Update a member&#39;s business role within the business.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Business id</param>
        /// <param name="updateMemberBusinessRoleBody">List of objects with the member id and the business_role.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateMemberResultsResponseArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateMemberResultsResponseArray>> UpdateBusinessMembershipsWithHttpInfoAsync(string businessId, List<UpdateMemberBusinessRoleBody> updateMemberBusinessRoleBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBusinessAccessRelationshipsApi : IBusinessAccessRelationshipsApiSync, IBusinessAccessRelationshipsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class BusinessAccessRelationshipsApi : IBusinessAccessRelationshipsApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BusinessAccessRelationshipsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BusinessAccessRelationshipsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BusinessAccessRelationshipsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BusinessAccessRelationshipsApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BusinessAccessRelationshipsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public BusinessAccessRelationshipsApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BusinessAccessRelationshipsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public BusinessAccessRelationshipsApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Terminate business memberships Terminate memberships between the specified members and your business.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Business id</param>
        /// <param name="membersToDeleteBody">List of members with role to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeletedMembersResponse</returns>
        public DeletedMembersResponse DeleteBusinessMembership(string businessId, MembersToDeleteBody membersToDeleteBody, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<DeletedMembersResponse> localVarResponse = DeleteBusinessMembershipWithHttpInfo(businessId, membersToDeleteBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Terminate business memberships Terminate memberships between the specified members and your business.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Business id</param>
        /// <param name="membersToDeleteBody">List of members with role to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeletedMembersResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<DeletedMembersResponse> DeleteBusinessMembershipWithHttpInfo(string businessId, MembersToDeleteBody membersToDeleteBody, int operationIndex = 0)
        {
            // verify the required parameter 'businessId' is set
            if (businessId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'businessId' when calling BusinessAccessRelationshipsApi->DeleteBusinessMembership");
            }

            // verify the required parameter 'membersToDeleteBody' is set
            if (membersToDeleteBody == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'membersToDeleteBody' when calling BusinessAccessRelationshipsApi->DeleteBusinessMembership");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("business_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(businessId)); // path parameter
            localVarRequestOptions.Data = membersToDeleteBody;

            localVarRequestOptions.Operation = "BusinessAccessRelationshipsApi.DeleteBusinessMembership";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (pinterest_oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<DeletedMembersResponse>("/businesses/{business_id}/members", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteBusinessMembership", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Terminate business memberships Terminate memberships between the specified members and your business.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Business id</param>
        /// <param name="membersToDeleteBody">List of members with role to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeletedMembersResponse</returns>
        public async System.Threading.Tasks.Task<DeletedMembersResponse> DeleteBusinessMembershipAsync(string businessId, MembersToDeleteBody membersToDeleteBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<DeletedMembersResponse> localVarResponse = await DeleteBusinessMembershipWithHttpInfoAsync(businessId, membersToDeleteBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Terminate business memberships Terminate memberships between the specified members and your business.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Business id</param>
        /// <param name="membersToDeleteBody">List of members with role to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeletedMembersResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<DeletedMembersResponse>> DeleteBusinessMembershipWithHttpInfoAsync(string businessId, MembersToDeleteBody membersToDeleteBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'businessId' is set
            if (businessId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'businessId' when calling BusinessAccessRelationshipsApi->DeleteBusinessMembership");
            }

            // verify the required parameter 'membersToDeleteBody' is set
            if (membersToDeleteBody == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'membersToDeleteBody' when calling BusinessAccessRelationshipsApi->DeleteBusinessMembership");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("business_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(businessId)); // path parameter
            localVarRequestOptions.Data = membersToDeleteBody;

            localVarRequestOptions.Operation = "BusinessAccessRelationshipsApi.DeleteBusinessMembership";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (pinterest_oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<DeletedMembersResponse>("/businesses/{business_id}/members", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteBusinessMembership", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Terminate business partnerships Terminate partnerships between the specified partners and your business. Note: You may only batch terminate partners of the same partner type.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="deletePartnersRequest">An object containing a \&quot;partner_ids\&quot; property composed of a list of partner IDs and a \&quot;partners_type\&quot; property specifying the type of partners to delete. </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeletePartnersResponse</returns>
        public DeletePartnersResponse DeleteBusinessPartners(string businessId, DeletePartnersRequest deletePartnersRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<DeletePartnersResponse> localVarResponse = DeleteBusinessPartnersWithHttpInfo(businessId, deletePartnersRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Terminate business partnerships Terminate partnerships between the specified partners and your business. Note: You may only batch terminate partners of the same partner type.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="deletePartnersRequest">An object containing a \&quot;partner_ids\&quot; property composed of a list of partner IDs and a \&quot;partners_type\&quot; property specifying the type of partners to delete. </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeletePartnersResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<DeletePartnersResponse> DeleteBusinessPartnersWithHttpInfo(string businessId, DeletePartnersRequest deletePartnersRequest, int operationIndex = 0)
        {
            // verify the required parameter 'businessId' is set
            if (businessId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'businessId' when calling BusinessAccessRelationshipsApi->DeleteBusinessPartners");
            }

            // verify the required parameter 'deletePartnersRequest' is set
            if (deletePartnersRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'deletePartnersRequest' when calling BusinessAccessRelationshipsApi->DeleteBusinessPartners");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("business_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(businessId)); // path parameter
            localVarRequestOptions.Data = deletePartnersRequest;

            localVarRequestOptions.Operation = "BusinessAccessRelationshipsApi.DeleteBusinessPartners";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (pinterest_oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<DeletePartnersResponse>("/businesses/{business_id}/partners", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteBusinessPartners", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Terminate business partnerships Terminate partnerships between the specified partners and your business. Note: You may only batch terminate partners of the same partner type.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="deletePartnersRequest">An object containing a \&quot;partner_ids\&quot; property composed of a list of partner IDs and a \&quot;partners_type\&quot; property specifying the type of partners to delete. </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeletePartnersResponse</returns>
        public async System.Threading.Tasks.Task<DeletePartnersResponse> DeleteBusinessPartnersAsync(string businessId, DeletePartnersRequest deletePartnersRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<DeletePartnersResponse> localVarResponse = await DeleteBusinessPartnersWithHttpInfoAsync(businessId, deletePartnersRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Terminate business partnerships Terminate partnerships between the specified partners and your business. Note: You may only batch terminate partners of the same partner type.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="deletePartnersRequest">An object containing a \&quot;partner_ids\&quot; property composed of a list of partner IDs and a \&quot;partners_type\&quot; property specifying the type of partners to delete. </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeletePartnersResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<DeletePartnersResponse>> DeleteBusinessPartnersWithHttpInfoAsync(string businessId, DeletePartnersRequest deletePartnersRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'businessId' is set
            if (businessId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'businessId' when calling BusinessAccessRelationshipsApi->DeleteBusinessPartners");
            }

            // verify the required parameter 'deletePartnersRequest' is set
            if (deletePartnersRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'deletePartnersRequest' when calling BusinessAccessRelationshipsApi->DeleteBusinessPartners");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("business_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(businessId)); // path parameter
            localVarRequestOptions.Data = deletePartnersRequest;

            localVarRequestOptions.Operation = "BusinessAccessRelationshipsApi.DeleteBusinessPartners";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (pinterest_oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<DeletePartnersResponse>("/businesses/{business_id}/partners", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteBusinessPartners", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List business employers for user Get all of the viewing user&#39;s business employers.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetBusinessEmployers200Response</returns>
        public GetBusinessEmployers200Response GetBusinessEmployers(int? pageSize = default(int?), string? bookmark = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<GetBusinessEmployers200Response> localVarResponse = GetBusinessEmployersWithHttpInfo(pageSize, bookmark);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List business employers for user Get all of the viewing user&#39;s business employers.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetBusinessEmployers200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<GetBusinessEmployers200Response> GetBusinessEmployersWithHttpInfo(int? pageSize = default(int?), string? bookmark = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (bookmark != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "bookmark", bookmark));
            }

            localVarRequestOptions.Operation = "BusinessAccessRelationshipsApi.GetBusinessEmployers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (pinterest_oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetBusinessEmployers200Response>("/businesses/employers", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBusinessEmployers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List business employers for user Get all of the viewing user&#39;s business employers.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetBusinessEmployers200Response</returns>
        public async System.Threading.Tasks.Task<GetBusinessEmployers200Response> GetBusinessEmployersAsync(int? pageSize = default(int?), string? bookmark = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<GetBusinessEmployers200Response> localVarResponse = await GetBusinessEmployersWithHttpInfoAsync(pageSize, bookmark, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List business employers for user Get all of the viewing user&#39;s business employers.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetBusinessEmployers200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<GetBusinessEmployers200Response>> GetBusinessEmployersWithHttpInfoAsync(int? pageSize = default(int?), string? bookmark = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (bookmark != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "bookmark", bookmark));
            }

            localVarRequestOptions.Operation = "BusinessAccessRelationshipsApi.GetBusinessEmployers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (pinterest_oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetBusinessEmployers200Response>("/businesses/employers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBusinessEmployers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get business members Get all members of the specified business. The return response will include the member&#39;s business_role and assets they have access to if assets_summary&#x3D;TRUE
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="assetsSummary">Include assets summary in the response if this is true.  The assets summary returns a dictionary representing a summary of the assets for the business user ID, with information like the ad accounts and profiles the user has permissions for and what those permissions are (optional, default to false)</param>
        /// <param name="businessRoles">A list of business roles to filter the members by. Only members whose roles are in the specified roles will be returned. (optional)</param>
        /// <param name="memberIds">A list of business members ids separated by comma. (optional)</param>
        /// <param name="startIndex">An index to start fetching the results from. Only the results starting from this index will be returned. (optional, default to 0)</param>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetBusinessMembers200Response</returns>
        public GetBusinessMembers200Response GetBusinessMembers(string businessId, bool? assetsSummary = default(bool?), List<MemberBusinessRole>? businessRoles = default(List<MemberBusinessRole>?), string? memberIds = default(string?), int? startIndex = default(int?), string? bookmark = default(string?), int? pageSize = default(int?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<GetBusinessMembers200Response> localVarResponse = GetBusinessMembersWithHttpInfo(businessId, assetsSummary, businessRoles, memberIds, startIndex, bookmark, pageSize);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get business members Get all members of the specified business. The return response will include the member&#39;s business_role and assets they have access to if assets_summary&#x3D;TRUE
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="assetsSummary">Include assets summary in the response if this is true.  The assets summary returns a dictionary representing a summary of the assets for the business user ID, with information like the ad accounts and profiles the user has permissions for and what those permissions are (optional, default to false)</param>
        /// <param name="businessRoles">A list of business roles to filter the members by. Only members whose roles are in the specified roles will be returned. (optional)</param>
        /// <param name="memberIds">A list of business members ids separated by comma. (optional)</param>
        /// <param name="startIndex">An index to start fetching the results from. Only the results starting from this index will be returned. (optional, default to 0)</param>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetBusinessMembers200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<GetBusinessMembers200Response> GetBusinessMembersWithHttpInfo(string businessId, bool? assetsSummary = default(bool?), List<MemberBusinessRole>? businessRoles = default(List<MemberBusinessRole>?), string? memberIds = default(string?), int? startIndex = default(int?), string? bookmark = default(string?), int? pageSize = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'businessId' is set
            if (businessId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'businessId' when calling BusinessAccessRelationshipsApi->GetBusinessMembers");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("business_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(businessId)); // path parameter
            if (assetsSummary != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "assets_summary", assetsSummary));
            }
            if (businessRoles != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "business_roles", businessRoles));
            }
            if (memberIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "member_ids", memberIds));
            }
            if (startIndex != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start_index", startIndex));
            }
            if (bookmark != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "bookmark", bookmark));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }

            localVarRequestOptions.Operation = "BusinessAccessRelationshipsApi.GetBusinessMembers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (pinterest_oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetBusinessMembers200Response>("/businesses/{business_id}/members", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBusinessMembers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get business members Get all members of the specified business. The return response will include the member&#39;s business_role and assets they have access to if assets_summary&#x3D;TRUE
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="assetsSummary">Include assets summary in the response if this is true.  The assets summary returns a dictionary representing a summary of the assets for the business user ID, with information like the ad accounts and profiles the user has permissions for and what those permissions are (optional, default to false)</param>
        /// <param name="businessRoles">A list of business roles to filter the members by. Only members whose roles are in the specified roles will be returned. (optional)</param>
        /// <param name="memberIds">A list of business members ids separated by comma. (optional)</param>
        /// <param name="startIndex">An index to start fetching the results from. Only the results starting from this index will be returned. (optional, default to 0)</param>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetBusinessMembers200Response</returns>
        public async System.Threading.Tasks.Task<GetBusinessMembers200Response> GetBusinessMembersAsync(string businessId, bool? assetsSummary = default(bool?), List<MemberBusinessRole>? businessRoles = default(List<MemberBusinessRole>?), string? memberIds = default(string?), int? startIndex = default(int?), string? bookmark = default(string?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<GetBusinessMembers200Response> localVarResponse = await GetBusinessMembersWithHttpInfoAsync(businessId, assetsSummary, businessRoles, memberIds, startIndex, bookmark, pageSize, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get business members Get all members of the specified business. The return response will include the member&#39;s business_role and assets they have access to if assets_summary&#x3D;TRUE
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="assetsSummary">Include assets summary in the response if this is true.  The assets summary returns a dictionary representing a summary of the assets for the business user ID, with information like the ad accounts and profiles the user has permissions for and what those permissions are (optional, default to false)</param>
        /// <param name="businessRoles">A list of business roles to filter the members by. Only members whose roles are in the specified roles will be returned. (optional)</param>
        /// <param name="memberIds">A list of business members ids separated by comma. (optional)</param>
        /// <param name="startIndex">An index to start fetching the results from. Only the results starting from this index will be returned. (optional, default to 0)</param>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetBusinessMembers200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<GetBusinessMembers200Response>> GetBusinessMembersWithHttpInfoAsync(string businessId, bool? assetsSummary = default(bool?), List<MemberBusinessRole>? businessRoles = default(List<MemberBusinessRole>?), string? memberIds = default(string?), int? startIndex = default(int?), string? bookmark = default(string?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'businessId' is set
            if (businessId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'businessId' when calling BusinessAccessRelationshipsApi->GetBusinessMembers");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("business_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(businessId)); // path parameter
            if (assetsSummary != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "assets_summary", assetsSummary));
            }
            if (businessRoles != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "business_roles", businessRoles));
            }
            if (memberIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "member_ids", memberIds));
            }
            if (startIndex != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start_index", startIndex));
            }
            if (bookmark != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "bookmark", bookmark));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }

            localVarRequestOptions.Operation = "BusinessAccessRelationshipsApi.GetBusinessMembers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (pinterest_oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetBusinessMembers200Response>("/businesses/{business_id}/members", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBusinessMembers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get business partners Get all partners of the specified business.  If the assets_summary&#x3D;TRUE and: - partner_type&#x3D;INTERNAL, the business assets returned are your business assets the partner has access to. - partner_type&#x3D;EXTERNAL, the business assets returned are your partner&#39;s business assets the partner has granted you   access to.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="assetsSummary">Include assets summary in the response if this is true.  The assets summary returns a dictionary representing a summary of the assets for the business user ID, with information like the ad accounts and profiles the user has permissions for and what those permissions are (optional, default to false)</param>
        /// <param name="partnerType">Specifies whether to fetch internal or external (shared) partners. If partner_type&#x3D;INTERNAL, the asset being queried is for accesses the partner has to your business assets.&lt;br&gt; If partner_type&#x3D;EXTERNAL, the asset being queried is for the accesses you have to the partner&#39;s business asset. (optional)</param>
        /// <param name="partnerIds">A list of business partner ids separated by commas used to filter the results. Only partners with the specified ids will be returned. (optional)</param>
        /// <param name="startIndex">An index to start fetching the results from. Only the results starting from this index will be returned. (optional, default to 0)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetBusinessPartners200Response</returns>
        public GetBusinessPartners200Response GetBusinessPartners(string businessId, bool? assetsSummary = default(bool?), PartnerType? partnerType = default(PartnerType?), string? partnerIds = default(string?), int? startIndex = default(int?), int? pageSize = default(int?), string? bookmark = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<GetBusinessPartners200Response> localVarResponse = GetBusinessPartnersWithHttpInfo(businessId, assetsSummary, partnerType, partnerIds, startIndex, pageSize, bookmark);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get business partners Get all partners of the specified business.  If the assets_summary&#x3D;TRUE and: - partner_type&#x3D;INTERNAL, the business assets returned are your business assets the partner has access to. - partner_type&#x3D;EXTERNAL, the business assets returned are your partner&#39;s business assets the partner has granted you   access to.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="assetsSummary">Include assets summary in the response if this is true.  The assets summary returns a dictionary representing a summary of the assets for the business user ID, with information like the ad accounts and profiles the user has permissions for and what those permissions are (optional, default to false)</param>
        /// <param name="partnerType">Specifies whether to fetch internal or external (shared) partners. If partner_type&#x3D;INTERNAL, the asset being queried is for accesses the partner has to your business assets.&lt;br&gt; If partner_type&#x3D;EXTERNAL, the asset being queried is for the accesses you have to the partner&#39;s business asset. (optional)</param>
        /// <param name="partnerIds">A list of business partner ids separated by commas used to filter the results. Only partners with the specified ids will be returned. (optional)</param>
        /// <param name="startIndex">An index to start fetching the results from. Only the results starting from this index will be returned. (optional, default to 0)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetBusinessPartners200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<GetBusinessPartners200Response> GetBusinessPartnersWithHttpInfo(string businessId, bool? assetsSummary = default(bool?), PartnerType? partnerType = default(PartnerType?), string? partnerIds = default(string?), int? startIndex = default(int?), int? pageSize = default(int?), string? bookmark = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'businessId' is set
            if (businessId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'businessId' when calling BusinessAccessRelationshipsApi->GetBusinessPartners");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("business_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(businessId)); // path parameter
            if (assetsSummary != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "assets_summary", assetsSummary));
            }
            if (partnerType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "partner_type", partnerType));
            }
            if (partnerIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "partner_ids", partnerIds));
            }
            if (startIndex != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start_index", startIndex));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (bookmark != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "bookmark", bookmark));
            }

            localVarRequestOptions.Operation = "BusinessAccessRelationshipsApi.GetBusinessPartners";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (pinterest_oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetBusinessPartners200Response>("/businesses/{business_id}/partners", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBusinessPartners", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get business partners Get all partners of the specified business.  If the assets_summary&#x3D;TRUE and: - partner_type&#x3D;INTERNAL, the business assets returned are your business assets the partner has access to. - partner_type&#x3D;EXTERNAL, the business assets returned are your partner&#39;s business assets the partner has granted you   access to.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="assetsSummary">Include assets summary in the response if this is true.  The assets summary returns a dictionary representing a summary of the assets for the business user ID, with information like the ad accounts and profiles the user has permissions for and what those permissions are (optional, default to false)</param>
        /// <param name="partnerType">Specifies whether to fetch internal or external (shared) partners. If partner_type&#x3D;INTERNAL, the asset being queried is for accesses the partner has to your business assets.&lt;br&gt; If partner_type&#x3D;EXTERNAL, the asset being queried is for the accesses you have to the partner&#39;s business asset. (optional)</param>
        /// <param name="partnerIds">A list of business partner ids separated by commas used to filter the results. Only partners with the specified ids will be returned. (optional)</param>
        /// <param name="startIndex">An index to start fetching the results from. Only the results starting from this index will be returned. (optional, default to 0)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetBusinessPartners200Response</returns>
        public async System.Threading.Tasks.Task<GetBusinessPartners200Response> GetBusinessPartnersAsync(string businessId, bool? assetsSummary = default(bool?), PartnerType? partnerType = default(PartnerType?), string? partnerIds = default(string?), int? startIndex = default(int?), int? pageSize = default(int?), string? bookmark = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<GetBusinessPartners200Response> localVarResponse = await GetBusinessPartnersWithHttpInfoAsync(businessId, assetsSummary, partnerType, partnerIds, startIndex, pageSize, bookmark, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get business partners Get all partners of the specified business.  If the assets_summary&#x3D;TRUE and: - partner_type&#x3D;INTERNAL, the business assets returned are your business assets the partner has access to. - partner_type&#x3D;EXTERNAL, the business assets returned are your partner&#39;s business assets the partner has granted you   access to.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Unique identifier of the requesting business.</param>
        /// <param name="assetsSummary">Include assets summary in the response if this is true.  The assets summary returns a dictionary representing a summary of the assets for the business user ID, with information like the ad accounts and profiles the user has permissions for and what those permissions are (optional, default to false)</param>
        /// <param name="partnerType">Specifies whether to fetch internal or external (shared) partners. If partner_type&#x3D;INTERNAL, the asset being queried is for accesses the partner has to your business assets.&lt;br&gt; If partner_type&#x3D;EXTERNAL, the asset being queried is for the accesses you have to the partner&#39;s business asset. (optional)</param>
        /// <param name="partnerIds">A list of business partner ids separated by commas used to filter the results. Only partners with the specified ids will be returned. (optional)</param>
        /// <param name="startIndex">An index to start fetching the results from. Only the results starting from this index will be returned. (optional, default to 0)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetBusinessPartners200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<GetBusinessPartners200Response>> GetBusinessPartnersWithHttpInfoAsync(string businessId, bool? assetsSummary = default(bool?), PartnerType? partnerType = default(PartnerType?), string? partnerIds = default(string?), int? startIndex = default(int?), int? pageSize = default(int?), string? bookmark = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'businessId' is set
            if (businessId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'businessId' when calling BusinessAccessRelationshipsApi->GetBusinessPartners");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("business_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(businessId)); // path parameter
            if (assetsSummary != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "assets_summary", assetsSummary));
            }
            if (partnerType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "partner_type", partnerType));
            }
            if (partnerIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "partner_ids", partnerIds));
            }
            if (startIndex != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start_index", startIndex));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (bookmark != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "bookmark", bookmark));
            }

            localVarRequestOptions.Operation = "BusinessAccessRelationshipsApi.GetBusinessPartners";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (pinterest_oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetBusinessPartners200Response>("/businesses/{business_id}/partners", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBusinessPartners", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update member&#39;s business role Update a member&#39;s business role within the business.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Business id</param>
        /// <param name="updateMemberBusinessRoleBody">List of objects with the member id and the business_role.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UpdateMemberResultsResponseArray</returns>
        public UpdateMemberResultsResponseArray UpdateBusinessMemberships(string businessId, List<UpdateMemberBusinessRoleBody> updateMemberBusinessRoleBody, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<UpdateMemberResultsResponseArray> localVarResponse = UpdateBusinessMembershipsWithHttpInfo(businessId, updateMemberBusinessRoleBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update member&#39;s business role Update a member&#39;s business role within the business.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Business id</param>
        /// <param name="updateMemberBusinessRoleBody">List of objects with the member id and the business_role.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UpdateMemberResultsResponseArray</returns>
        public Org.OpenAPITools.Client.ApiResponse<UpdateMemberResultsResponseArray> UpdateBusinessMembershipsWithHttpInfo(string businessId, List<UpdateMemberBusinessRoleBody> updateMemberBusinessRoleBody, int operationIndex = 0)
        {
            // verify the required parameter 'businessId' is set
            if (businessId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'businessId' when calling BusinessAccessRelationshipsApi->UpdateBusinessMemberships");
            }

            // verify the required parameter 'updateMemberBusinessRoleBody' is set
            if (updateMemberBusinessRoleBody == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'updateMemberBusinessRoleBody' when calling BusinessAccessRelationshipsApi->UpdateBusinessMemberships");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("business_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(businessId)); // path parameter
            localVarRequestOptions.Data = updateMemberBusinessRoleBody;

            localVarRequestOptions.Operation = "BusinessAccessRelationshipsApi.UpdateBusinessMemberships";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (pinterest_oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<UpdateMemberResultsResponseArray>("/businesses/{business_id}/members", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateBusinessMemberships", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update member&#39;s business role Update a member&#39;s business role within the business.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Business id</param>
        /// <param name="updateMemberBusinessRoleBody">List of objects with the member id and the business_role.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateMemberResultsResponseArray</returns>
        public async System.Threading.Tasks.Task<UpdateMemberResultsResponseArray> UpdateBusinessMembershipsAsync(string businessId, List<UpdateMemberBusinessRoleBody> updateMemberBusinessRoleBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<UpdateMemberResultsResponseArray> localVarResponse = await UpdateBusinessMembershipsWithHttpInfoAsync(businessId, updateMemberBusinessRoleBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update member&#39;s business role Update a member&#39;s business role within the business.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">Business id</param>
        /// <param name="updateMemberBusinessRoleBody">List of objects with the member id and the business_role.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateMemberResultsResponseArray)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<UpdateMemberResultsResponseArray>> UpdateBusinessMembershipsWithHttpInfoAsync(string businessId, List<UpdateMemberBusinessRoleBody> updateMemberBusinessRoleBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'businessId' is set
            if (businessId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'businessId' when calling BusinessAccessRelationshipsApi->UpdateBusinessMemberships");
            }

            // verify the required parameter 'updateMemberBusinessRoleBody' is set
            if (updateMemberBusinessRoleBody == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'updateMemberBusinessRoleBody' when calling BusinessAccessRelationshipsApi->UpdateBusinessMemberships");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("business_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(businessId)); // path parameter
            localVarRequestOptions.Data = updateMemberBusinessRoleBody;

            localVarRequestOptions.Operation = "BusinessAccessRelationshipsApi.UpdateBusinessMemberships";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (pinterest_oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<UpdateMemberResultsResponseArray>("/businesses/{business_id}/members", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateBusinessMemberships", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
