/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// SharedAudienceAccount
    /// </summary>
    [DataContract(Name = "SharedAudienceAccount")]
    public partial class SharedAudienceAccount : IValidatableObject
    {
        /// <summary>
        /// account type
        /// </summary>
        /// <value>account type</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AccountTypeEnum
        {
            /// <summary>
            /// Enum ADACCOUNT for value: AD_ACCOUNT
            /// </summary>
            [EnumMember(Value = "AD_ACCOUNT")]
            ADACCOUNT = 1,

            /// <summary>
            /// Enum BUSINESSACCOUNT for value: BUSINESS_ACCOUNT
            /// </summary>
            [EnumMember(Value = "BUSINESS_ACCOUNT")]
            BUSINESSACCOUNT = 2
        }


        /// <summary>
        /// account type
        /// </summary>
        /// <value>account type</value>
        [DataMember(Name = "account_type", IsRequired = true, EmitDefaultValue = true)]
        public AccountTypeEnum AccountType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SharedAudienceAccount" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SharedAudienceAccount() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SharedAudienceAccount" /> class.
        /// </summary>
        /// <param name="accountId">Account ID (ad account or business ID). (required).</param>
        /// <param name="accountName">Account name. (required).</param>
        /// <param name="accountType">account type (required).</param>
        /// <param name="sharedOnTimestamp">Epoch timestamp in seconds for the shared audience event (required).</param>
        public SharedAudienceAccount(string accountId = default(string), string accountName = default(string), AccountTypeEnum accountType = default(AccountTypeEnum), int sharedOnTimestamp = default(int))
        {
            // to ensure "accountId" is required (not null)
            if (accountId == null)
            {
                throw new ArgumentNullException("accountId is a required property for SharedAudienceAccount and cannot be null");
            }
            this.AccountId = accountId;
            // to ensure "accountName" is required (not null)
            if (accountName == null)
            {
                throw new ArgumentNullException("accountName is a required property for SharedAudienceAccount and cannot be null");
            }
            this.AccountName = accountName;
            this.AccountType = accountType;
            this.SharedOnTimestamp = sharedOnTimestamp;
        }

        /// <summary>
        /// Account ID (ad account or business ID).
        /// </summary>
        /// <value>Account ID (ad account or business ID).</value>
        /*
        <example>549755885175</example>
        */
        [DataMember(Name = "account_id", IsRequired = true, EmitDefaultValue = true)]
        public string AccountId { get; set; }

        /// <summary>
        /// Account name.
        /// </summary>
        /// <value>Account name.</value>
        /*
        <example>Home Depot USA</example>
        */
        [DataMember(Name = "account_name", IsRequired = true, EmitDefaultValue = true)]
        public string AccountName { get; set; }

        /// <summary>
        /// Epoch timestamp in seconds for the shared audience event
        /// </summary>
        /// <value>Epoch timestamp in seconds for the shared audience event</value>
        /*
        <example>1677003860</example>
        */
        [DataMember(Name = "shared_on_timestamp", IsRequired = true, EmitDefaultValue = true)]
        public int SharedOnTimestamp { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SharedAudienceAccount {\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  AccountName: ").Append(AccountName).Append("\n");
            sb.Append("  AccountType: ").Append(AccountType).Append("\n");
            sb.Append("  SharedOnTimestamp: ").Append(SharedOnTimestamp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.AccountId != null) {
                // AccountId (string) pattern
                Regex regexAccountId = new Regex(@"^\d+$", RegexOptions.CultureInvariant);
                if (!regexAccountId.Match(this.AccountId).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AccountId, must match a pattern of " + regexAccountId, new [] { "AccountId" });
                }
            }

            yield break;
        }
    }

}
