/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Single instance of a business member to have its role updated
    /// </summary>
    [DataContract(Name = "UpdateMemberBusinessRoleBody")]
    public partial class UpdateMemberBusinessRoleBody : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets BusinessRole
        /// </summary>
        [DataMember(Name = "business_role", IsRequired = true, EmitDefaultValue = true)]
        public BusinessRoleForMembers BusinessRole { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateMemberBusinessRoleBody" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UpdateMemberBusinessRoleBody() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateMemberBusinessRoleBody" /> class.
        /// </summary>
        /// <param name="businessRole">businessRole (required).</param>
        /// <param name="memberId">Unique identifier of the member (required).</param>
        public UpdateMemberBusinessRoleBody(BusinessRoleForMembers businessRole = default(BusinessRoleForMembers), string memberId = default(string))
        {
            this.BusinessRole = businessRole;
            // to ensure "memberId" is required (not null)
            if (memberId == null)
            {
                throw new ArgumentNullException("memberId is a required property for UpdateMemberBusinessRoleBody and cannot be null");
            }
            this.MemberId = memberId;
        }

        /// <summary>
        /// Unique identifier of the member
        /// </summary>
        /// <value>Unique identifier of the member</value>
        /*
        <example>140943737684417</example>
        */
        [DataMember(Name = "member_id", IsRequired = true, EmitDefaultValue = true)]
        public string MemberId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpdateMemberBusinessRoleBody {\n");
            sb.Append("  BusinessRole: ").Append(BusinessRole).Append("\n");
            sb.Append("  MemberId: ").Append(MemberId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // MemberId (string) maxLength
            if (this.MemberId != null && this.MemberId.Length > 25)
            {
                yield return new ValidationResult("Invalid value for MemberId, length must be less than 25.", new [] { "MemberId" });
            }

            if (this.MemberId != null) {
                // MemberId (string) pattern
                Regex regexMemberId = new Regex(@"^\d+$", RegexOptions.CultureInvariant);
                if (!regexMemberId.Match(this.MemberId).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MemberId, must match a pattern of " + regexMemberId, new [] { "MemberId" });
                }
            }

            yield break;
        }
    }

}
