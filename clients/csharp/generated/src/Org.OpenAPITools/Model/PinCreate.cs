/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Pin
    /// </summary>
    [DataContract(Name = "PinCreate")]
    public partial class PinCreate : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PinCreate" /> class.
        /// </summary>
        /// <param name="link">link.</param>
        /// <param name="title">title.</param>
        /// <param name="description">description.</param>
        /// <param name="dominantColor">Dominant pin color. Hex number, e.g. \\\&quot;#6E7874\\\&quot;..</param>
        /// <param name="altText">altText.</param>
        /// <param name="boardId">The board to which this Pin belongs..</param>
        /// <param name="boardSectionId">The board section to which this Pin belongs..</param>
        /// <param name="mediaSource">mediaSource.</param>
        /// <param name="parentPinId">The source pin id if this pin was saved from another pin. &lt;a href&#x3D;\&quot;https://help.pinterest.com/article/save-pins-on-pinterest\&quot;&gt;Learn more&lt;/a&gt;..</param>
        /// <param name="note">Private note for this Pin. &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/article/add-notes-to-your-pins\&quot;&gt;Learn more&lt;/a&gt;..</param>
        public PinCreate(string link = default(string), string title = default(string), string description = default(string), string dominantColor = default(string), string altText = default(string), string boardId = default(string), string boardSectionId = default(string), PinMediaSource mediaSource = default(PinMediaSource), string parentPinId = default(string), string note = default(string))
        {
            this.Link = link;
            this.Title = title;
            this.Description = description;
            this.DominantColor = dominantColor;
            this.AltText = altText;
            this.BoardId = boardId;
            this.BoardSectionId = boardSectionId;
            this.MediaSource = mediaSource;
            this.ParentPinId = parentPinId;
            this.Note = note;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        /*
        <example>813744226420795884</example>
        */
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; private set; }

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        /*
        <example>2020-01-01T20:10:40Z</example>
        */
        [DataMember(Name = "created_at", EmitDefaultValue = false)]
        public DateTime CreatedAt { get; private set; }

        /// <summary>
        /// Returns false as CreatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedAt()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Link
        /// </summary>
        /*
        <example>https://www.pinterest.com/</example>
        */
        [DataMember(Name = "link", EmitDefaultValue = true)]
        public string Link { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name = "title", EmitDefaultValue = true)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Dominant pin color. Hex number, e.g. \\\&quot;#6E7874\\\&quot;.
        /// </summary>
        /// <value>Dominant pin color. Hex number, e.g. \\\&quot;#6E7874\\\&quot;.</value>
        /*
        <example>#6E7874</example>
        */
        [DataMember(Name = "dominant_color", EmitDefaultValue = true)]
        public string DominantColor { get; set; }

        /// <summary>
        /// Gets or Sets AltText
        /// </summary>
        [DataMember(Name = "alt_text", EmitDefaultValue = true)]
        public string AltText { get; set; }

        /// <summary>
        /// The board to which this Pin belongs.
        /// </summary>
        /// <value>The board to which this Pin belongs.</value>
        [DataMember(Name = "board_id", EmitDefaultValue = false)]
        public string BoardId { get; set; }

        /// <summary>
        /// The board section to which this Pin belongs.
        /// </summary>
        /// <value>The board section to which this Pin belongs.</value>
        [DataMember(Name = "board_section_id", EmitDefaultValue = true)]
        public string BoardSectionId { get; set; }

        /// <summary>
        /// Gets or Sets BoardOwner
        /// </summary>
        [DataMember(Name = "board_owner", EmitDefaultValue = false)]
        public BoardOwner BoardOwner { get; private set; }

        /// <summary>
        /// Returns false as BoardOwner should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeBoardOwner()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Media
        /// </summary>
        [DataMember(Name = "media", EmitDefaultValue = false)]
        public PinMedia Media { get; private set; }

        /// <summary>
        /// Returns false as Media should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeMedia()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets MediaSource
        /// </summary>
        [DataMember(Name = "media_source", EmitDefaultValue = false)]
        public PinMediaSource MediaSource { get; set; }

        /// <summary>
        /// The source pin id if this pin was saved from another pin. &lt;a href&#x3D;\&quot;https://help.pinterest.com/article/save-pins-on-pinterest\&quot;&gt;Learn more&lt;/a&gt;.
        /// </summary>
        /// <value>The source pin id if this pin was saved from another pin. &lt;a href&#x3D;\&quot;https://help.pinterest.com/article/save-pins-on-pinterest\&quot;&gt;Learn more&lt;/a&gt;.</value>
        [DataMember(Name = "parent_pin_id", EmitDefaultValue = true)]
        public string ParentPinId { get; set; }

        /// <summary>
        /// Private note for this Pin. &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/article/add-notes-to-your-pins\&quot;&gt;Learn more&lt;/a&gt;.
        /// </summary>
        /// <value>Private note for this Pin. &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/article/add-notes-to-your-pins\&quot;&gt;Learn more&lt;/a&gt;.</value>
        [DataMember(Name = "note", EmitDefaultValue = true)]
        public string Note { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PinCreate {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Link: ").Append(Link).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DominantColor: ").Append(DominantColor).Append("\n");
            sb.Append("  AltText: ").Append(AltText).Append("\n");
            sb.Append("  BoardId: ").Append(BoardId).Append("\n");
            sb.Append("  BoardSectionId: ").Append(BoardSectionId).Append("\n");
            sb.Append("  BoardOwner: ").Append(BoardOwner).Append("\n");
            sb.Append("  Media: ").Append(Media).Append("\n");
            sb.Append("  MediaSource: ").Append(MediaSource).Append("\n");
            sb.Append("  ParentPinId: ").Append(ParentPinId).Append("\n");
            sb.Append("  Note: ").Append(Note).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.Id != null) {
                // Id (string) pattern
                Regex regexId = new Regex(@"^\d+$", RegexOptions.CultureInvariant);
                if (!regexId.Match(this.Id).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Id, must match a pattern of " + regexId, new [] { "Id" });
                }
            }

            // Link (string) maxLength
            if (this.Link != null && this.Link.Length > 2048)
            {
                yield return new ValidationResult("Invalid value for Link, length must be less than 2048.", new [] { "Link" });
            }

            // Title (string) maxLength
            if (this.Title != null && this.Title.Length > 100)
            {
                yield return new ValidationResult("Invalid value for Title, length must be less than 100.", new [] { "Title" });
            }

            // Description (string) maxLength
            if (this.Description != null && this.Description.Length > 800)
            {
                yield return new ValidationResult("Invalid value for Description, length must be less than 800.", new [] { "Description" });
            }

            // AltText (string) maxLength
            if (this.AltText != null && this.AltText.Length > 500)
            {
                yield return new ValidationResult("Invalid value for AltText, length must be less than 500.", new [] { "AltText" });
            }

            if (this.BoardId != null) {
                // BoardId (string) pattern
                Regex regexBoardId = new Regex(@"^\d+$", RegexOptions.CultureInvariant);
                if (!regexBoardId.Match(this.BoardId).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BoardId, must match a pattern of " + regexBoardId, new [] { "BoardId" });
                }
            }

            if (this.BoardSectionId != null) {
                // BoardSectionId (string) pattern
                Regex regexBoardSectionId = new Regex(@"^\d+$", RegexOptions.CultureInvariant);
                if (!regexBoardSectionId.Match(this.BoardSectionId).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BoardSectionId, must match a pattern of " + regexBoardSectionId, new [] { "BoardSectionId" });
                }
            }

            if (this.ParentPinId != null) {
                // ParentPinId (string) pattern
                Regex regexParentPinId = new Regex(@"^\d+$", RegexOptions.CultureInvariant);
                if (!regexParentPinId.Match(this.ParentPinId).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ParentPinId, must match a pattern of " + regexParentPinId, new [] { "ParentPinId" });
                }
            }

            yield break;
        }
    }

}
