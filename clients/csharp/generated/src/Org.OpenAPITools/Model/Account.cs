/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Account
    /// </summary>
    [DataContract(Name = "Account")]
    public partial class Account : IValidatableObject
    {
        /// <summary>
        /// Type of account
        /// </summary>
        /// <value>Type of account</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AccountTypeEnum
        {
            /// <summary>
            /// Enum PINNER for value: PINNER
            /// </summary>
            [EnumMember(Value = "PINNER")]
            PINNER = 1,

            /// <summary>
            /// Enum BUSINESS for value: BUSINESS
            /// </summary>
            [EnumMember(Value = "BUSINESS")]
            BUSINESS = 2
        }


        /// <summary>
        /// Type of account
        /// </summary>
        /// <value>Type of account</value>
        [DataMember(Name = "account_type", EmitDefaultValue = false)]
        public AccountTypeEnum? AccountType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Account" /> class.
        /// </summary>
        /// <param name="accountType">Type of account.</param>
        /// <param name="id">User account ID..</param>
        /// <param name="profileImage">profileImage.</param>
        /// <param name="websiteUrl">websiteUrl.</param>
        /// <param name="username">username.</param>
        /// <param name="about">Profile about description..</param>
        /// <param name="businessName">businessName.</param>
        public Account(AccountTypeEnum? accountType = default(AccountTypeEnum?), string id = default(string), string profileImage = default(string), string websiteUrl = default(string), string username = default(string), string about = default(string), string businessName = default(string))
        {
            this.AccountType = accountType;
            this.Id = id;
            this.ProfileImage = profileImage;
            this.WebsiteUrl = websiteUrl;
            this.Username = username;
            this.About = about;
            this.BusinessName = businessName;
        }

        /// <summary>
        /// User account ID.
        /// </summary>
        /// <value>User account ID.</value>
        /*
        <example>2783136121146311751</example>
        */
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets ProfileImage
        /// </summary>
        [DataMember(Name = "profile_image", EmitDefaultValue = false)]
        public string ProfileImage { get; set; }

        /// <summary>
        /// Gets or Sets WebsiteUrl
        /// </summary>
        [DataMember(Name = "website_url", EmitDefaultValue = false)]
        public string WebsiteUrl { get; set; }

        /// <summary>
        /// Gets or Sets Username
        /// </summary>
        [DataMember(Name = "username", EmitDefaultValue = false)]
        public string Username { get; set; }

        /// <summary>
        /// Profile about description.
        /// </summary>
        /// <value>Profile about description.</value>
        [DataMember(Name = "about", EmitDefaultValue = false)]
        public string About { get; set; }

        /// <summary>
        /// Gets or Sets BusinessName
        /// </summary>
        [DataMember(Name = "business_name", EmitDefaultValue = true)]
        public string BusinessName { get; set; }

        /// <summary>
        /// User account board count.&lt;br/&gt;**Note**: Board count on user account level may differ from counts found elsewhere due to attribution of collaborative Boards.
        /// </summary>
        /// <value>User account board count.&lt;br/&gt;**Note**: Board count on user account level may differ from counts found elsewhere due to attribution of collaborative Boards.</value>
        /*
        <example>14</example>
        */
        [DataMember(Name = "board_count", EmitDefaultValue = true)]
        public int? BoardCount { get; private set; }

        /// <summary>
        /// Returns false as BoardCount should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeBoardCount()
        {
            return false;
        }
        /// <summary>
        /// User account pin count. This includes both created and saved pins.
        /// </summary>
        /// <value>User account pin count. This includes both created and saved pins.</value>
        /*
        <example>339</example>
        */
        [DataMember(Name = "pin_count", EmitDefaultValue = true)]
        public int? PinCount { get; private set; }

        /// <summary>
        /// Returns false as PinCount should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePinCount()
        {
            return false;
        }
        /// <summary>
        /// User account follower count.
        /// </summary>
        /// <value>User account follower count.</value>
        /*
        <example>10</example>
        */
        [DataMember(Name = "follower_count", EmitDefaultValue = true)]
        public int? FollowerCount { get; private set; }

        /// <summary>
        /// Returns false as FollowerCount should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeFollowerCount()
        {
            return false;
        }
        /// <summary>
        /// User account following count.
        /// </summary>
        /// <value>User account following count.</value>
        /*
        <example>347</example>
        */
        [DataMember(Name = "following_count", EmitDefaultValue = true)]
        public int? FollowingCount { get; private set; }

        /// <summary>
        /// Returns false as FollowingCount should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeFollowingCount()
        {
            return false;
        }
        /// <summary>
        /// User account monthly views.
        /// </summary>
        /// <value>User account monthly views.</value>
        /*
        <example>163</example>
        */
        [DataMember(Name = "monthly_views", EmitDefaultValue = true)]
        public int? MonthlyViews { get; private set; }

        /// <summary>
        /// Returns false as MonthlyViews should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeMonthlyViews()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Account {\n");
            sb.Append("  AccountType: ").Append(AccountType).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ProfileImage: ").Append(ProfileImage).Append("\n");
            sb.Append("  WebsiteUrl: ").Append(WebsiteUrl).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  About: ").Append(About).Append("\n");
            sb.Append("  BusinessName: ").Append(BusinessName).Append("\n");
            sb.Append("  BoardCount: ").Append(BoardCount).Append("\n");
            sb.Append("  PinCount: ").Append(PinCount).Append("\n");
            sb.Append("  FollowerCount: ").Append(FollowerCount).Append("\n");
            sb.Append("  FollowingCount: ").Append(FollowingCount).Append("\n");
            sb.Append("  MonthlyViews: ").Append(MonthlyViews).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.Id != null) {
                // Id (string) pattern
                Regex regexId = new Regex(@"^\d+$", RegexOptions.CultureInvariant);
                if (!regexId.Match(this.Id).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Id, must match a pattern of " + regexId, new [] { "Id" });
                }
            }

            yield break;
        }
    }

}
