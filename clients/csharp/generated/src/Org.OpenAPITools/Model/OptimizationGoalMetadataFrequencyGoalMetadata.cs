/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// OptimizationGoalMetadataFrequencyGoalMetadata
    /// </summary>
    [DataContract(Name = "OptimizationGoalMetadata_frequency_goal_metadata")]
    public partial class OptimizationGoalMetadataFrequencyGoalMetadata : IValidatableObject
    {
        /// <summary>
        /// User entity counts time range
        /// </summary>
        /// <value>User entity counts time range</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TimerangeEnum
        {
            /// <summary>
            /// Enum THIRTYDAY for value: THIRTY_DAY
            /// </summary>
            [EnumMember(Value = "THIRTY_DAY")]
            THIRTYDAY = 1,

            /// <summary>
            /// Enum DAY for value: DAY
            /// </summary>
            [EnumMember(Value = "DAY")]
            DAY = 2,

            /// <summary>
            /// Enum SEVENDAY for value: SEVEN_DAY
            /// </summary>
            [EnumMember(Value = "SEVEN_DAY")]
            SEVENDAY = 3,

            /// <summary>
            /// Enum TWENTYMINUTE for value: TWENTY_MINUTE
            /// </summary>
            [EnumMember(Value = "TWENTY_MINUTE")]
            TWENTYMINUTE = 4,

            /// <summary>
            /// Enum TENMINUTE for value: TEN_MINUTE
            /// </summary>
            [EnumMember(Value = "TEN_MINUTE")]
            TENMINUTE = 5,

            /// <summary>
            /// Enum TWENTYFOURHOUR for value: TWENTY_FOUR_HOUR
            /// </summary>
            [EnumMember(Value = "TWENTY_FOUR_HOUR")]
            TWENTYFOURHOUR = 6
        }


        /// <summary>
        /// User entity counts time range
        /// </summary>
        /// <value>User entity counts time range</value>
        /*
        <example>DAY</example>
        */
        [DataMember(Name = "timerange", EmitDefaultValue = false)]
        public TimerangeEnum? Timerange { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OptimizationGoalMetadataFrequencyGoalMetadata" /> class.
        /// </summary>
        /// <param name="frequency">frequency.</param>
        /// <param name="timerange">User entity counts time range.</param>
        public OptimizationGoalMetadataFrequencyGoalMetadata(int frequency = default(int), TimerangeEnum? timerange = default(TimerangeEnum?))
        {
            this.Frequency = frequency;
            this.Timerange = timerange;
        }

        /// <summary>
        /// Gets or Sets Frequency
        /// </summary>
        [DataMember(Name = "frequency", EmitDefaultValue = false)]
        public int Frequency { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OptimizationGoalMetadataFrequencyGoalMetadata {\n");
            sb.Append("  Frequency: ").Append(Frequency).Append("\n");
            sb.Append("  Timerange: ").Append(Timerange).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
