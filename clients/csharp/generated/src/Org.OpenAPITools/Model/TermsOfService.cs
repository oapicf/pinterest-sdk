/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// TermsOfService
    /// </summary>
    [DataContract(Name = "TermsOfService")]
    public partial class TermsOfService : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TermsOfService" /> class.
        /// </summary>
        /// <param name="id">The ID of the terms of service.</param>
        /// <param name="html">The terms of service content.</param>
        /// <param name="hasAccepted">Whether the ad account has accepted terms of service..</param>
        /// <param name="adAccountId">The ID of the ad account..</param>
        public TermsOfService(string id = default(string), string html = default(string), bool hasAccepted = default(bool), string adAccountId = default(string))
        {
            this.Id = id;
            this.Html = html;
            this.HasAccepted = hasAccepted;
            this.AdAccountId = adAccountId;
        }

        /// <summary>
        /// The ID of the terms of service
        /// </summary>
        /// <value>The ID of the terms of service</value>
        /*
        <example>2650449554526</example>
        */
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// The terms of service content
        /// </summary>
        /// <value>The terms of service content</value>
        /*
        <example>example test</example>
        */
        [DataMember(Name = "html", EmitDefaultValue = true)]
        public string Html { get; set; }

        /// <summary>
        /// Whether the ad account has accepted terms of service.
        /// </summary>
        /// <value>Whether the ad account has accepted terms of service.</value>
        /*
        <example>true</example>
        */
        [DataMember(Name = "has_accepted", EmitDefaultValue = true)]
        public bool HasAccepted { get; set; }

        /// <summary>
        /// The ID of the ad account.
        /// </summary>
        /// <value>The ID of the ad account.</value>
        /*
        <example>549755885175</example>
        */
        [DataMember(Name = "ad_account_id", EmitDefaultValue = false)]
        public string AdAccountId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TermsOfService {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Html: ").Append(Html).Append("\n");
            sb.Append("  HasAccepted: ").Append(HasAccepted).Append("\n");
            sb.Append("  AdAccountId: ").Append(AdAccountId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
