/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// UpdatePartnerAssetAccessBodyAccessesInner
    /// </summary>
    [DataContract(Name = "UpdatePartnerAssetAccessBody_accesses_inner")]
    public partial class UpdatePartnerAssetAccessBodyAccessesInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdatePartnerAssetAccessBodyAccessesInner" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UpdatePartnerAssetAccessBodyAccessesInner() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdatePartnerAssetAccessBodyAccessesInner" /> class.
        /// </summary>
        /// <param name="partnerId">Unique identifier of a business partner to update asset access to. (required).</param>
        /// <param name="assetId">Unique identifier of the business asset. (required).</param>
        /// <param name="permissions">A non-empty array of permissions to assign to the partner. (required).</param>
        public UpdatePartnerAssetAccessBodyAccessesInner(string partnerId = default(string), string assetId = default(string), List<Permissions> permissions = default(List<Permissions>))
        {
            // to ensure "partnerId" is required (not null)
            if (partnerId == null)
            {
                throw new ArgumentNullException("partnerId is a required property for UpdatePartnerAssetAccessBodyAccessesInner and cannot be null");
            }
            this.PartnerId = partnerId;
            // to ensure "assetId" is required (not null)
            if (assetId == null)
            {
                throw new ArgumentNullException("assetId is a required property for UpdatePartnerAssetAccessBodyAccessesInner and cannot be null");
            }
            this.AssetId = assetId;
            // to ensure "permissions" is required (not null)
            if (permissions == null)
            {
                throw new ArgumentNullException("permissions is a required property for UpdatePartnerAssetAccessBodyAccessesInner and cannot be null");
            }
            this.Permissions = permissions;
        }

        /// <summary>
        /// Unique identifier of a business partner to update asset access to.
        /// </summary>
        /// <value>Unique identifier of a business partner to update asset access to.</value>
        /*
        <example>1234567890123</example>
        */
        [DataMember(Name = "partner_id", IsRequired = true, EmitDefaultValue = true)]
        public string PartnerId { get; set; }

        /// <summary>
        /// Unique identifier of the business asset.
        /// </summary>
        /// <value>Unique identifier of the business asset.</value>
        /*
        <example>549755885175</example>
        */
        [DataMember(Name = "asset_id", IsRequired = true, EmitDefaultValue = true)]
        public string AssetId { get; set; }

        /// <summary>
        /// A non-empty array of permissions to assign to the partner.
        /// </summary>
        /// <value>A non-empty array of permissions to assign to the partner.</value>
        /*
        <example>[&quot;ANALYST&quot;,&quot;ADMIN&quot;]</example>
        */
        [DataMember(Name = "permissions", IsRequired = true, EmitDefaultValue = true)]
        public List<Permissions> Permissions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpdatePartnerAssetAccessBodyAccessesInner {\n");
            sb.Append("  PartnerId: ").Append(PartnerId).Append("\n");
            sb.Append("  AssetId: ").Append(AssetId).Append("\n");
            sb.Append("  Permissions: ").Append(Permissions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PartnerId (string) maxLength
            if (this.PartnerId != null && this.PartnerId.Length > 25)
            {
                yield return new ValidationResult("Invalid value for PartnerId, length must be less than 25.", new [] { "PartnerId" });
            }

            if (this.PartnerId != null) {
                // PartnerId (string) pattern
                Regex regexPartnerId = new Regex(@"^\d+$", RegexOptions.CultureInvariant);
                if (!regexPartnerId.Match(this.PartnerId).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PartnerId, must match a pattern of " + regexPartnerId, new [] { "PartnerId" });
                }
            }

            // AssetId (string) maxLength
            if (this.AssetId != null && this.AssetId.Length > 25)
            {
                yield return new ValidationResult("Invalid value for AssetId, length must be less than 25.", new [] { "AssetId" });
            }

            if (this.AssetId != null) {
                // AssetId (string) pattern
                Regex regexAssetId = new Regex(@"^\d+$", RegexOptions.CultureInvariant);
                if (!regexAssetId.Match(this.AssetId).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AssetId, must match a pattern of " + regexAssetId, new [] { "AssetId" });
                }
            }

            yield break;
        }
    }

}
