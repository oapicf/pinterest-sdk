/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// VideoMetadata
    /// </summary>
    [DataContract(Name = "VideoMetadata")]
    public partial class VideoMetadata : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VideoMetadata" /> class.
        /// </summary>
        /// <param name="itemType">itemType.</param>
        /// <param name="coverImageUrl">coverImageUrl.</param>
        /// <param name="videoUrl">Video url (720p). &lt;/p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This field is limited and not available to all apps..</param>
        /// <param name="duration">Duration (in milliseconds).</param>
        /// <param name="height">Height (in pixels).</param>
        /// <param name="width">Width (in pixels).</param>
        public VideoMetadata(string itemType = default(string), string coverImageUrl = default(string), string videoUrl = default(string), decimal duration = default(decimal), int height = default(int), int width = default(int))
        {
            this.ItemType = itemType;
            this.CoverImageUrl = coverImageUrl;
            this.VideoUrl = videoUrl;
            this.Duration = duration;
            this.Height = height;
            this.Width = width;
        }

        /// <summary>
        /// Gets or Sets ItemType
        /// </summary>
        [DataMember(Name = "item_type", EmitDefaultValue = false)]
        public string ItemType { get; set; }

        /// <summary>
        /// Gets or Sets CoverImageUrl
        /// </summary>
        [DataMember(Name = "cover_image_url", EmitDefaultValue = false)]
        public string CoverImageUrl { get; set; }

        /// <summary>
        /// Video url (720p). &lt;/p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This field is limited and not available to all apps.
        /// </summary>
        /// <value>Video url (720p). &lt;/p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This field is limited and not available to all apps.</value>
        [DataMember(Name = "video_url", EmitDefaultValue = true)]
        public string VideoUrl { get; set; }

        /// <summary>
        /// Duration (in milliseconds)
        /// </summary>
        /// <value>Duration (in milliseconds)</value>
        [DataMember(Name = "duration", EmitDefaultValue = false)]
        public decimal Duration { get; set; }

        /// <summary>
        /// Height (in pixels)
        /// </summary>
        /// <value>Height (in pixels)</value>
        [DataMember(Name = "height", EmitDefaultValue = false)]
        public int Height { get; set; }

        /// <summary>
        /// Width (in pixels)
        /// </summary>
        /// <value>Width (in pixels)</value>
        [DataMember(Name = "width", EmitDefaultValue = false)]
        public int Width { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VideoMetadata {\n");
            sb.Append("  ItemType: ").Append(ItemType).Append("\n");
            sb.Append("  CoverImageUrl: ").Append(CoverImageUrl).Append("\n");
            sb.Append("  VideoUrl: ").Append(VideoUrl).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
