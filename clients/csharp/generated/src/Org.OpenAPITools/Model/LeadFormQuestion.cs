/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// LeadFormQuestion
    /// </summary>
    [DataContract(Name = "LeadFormQuestion")]
    public partial class LeadFormQuestion : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets QuestionType
        /// </summary>
        [DataMember(Name = "question_type", EmitDefaultValue = false)]
        public LeadFormQuestionType? QuestionType { get; set; }

        /// <summary>
        /// Gets or Sets CustomQuestionFieldType
        /// </summary>
        [DataMember(Name = "custom_question_field_type", EmitDefaultValue = true)]
        public LeadFormQuestionFieldType? CustomQuestionFieldType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="LeadFormQuestion" /> class.
        /// </summary>
        /// <param name="questionType">questionType.</param>
        /// <param name="customQuestionFieldType">customQuestionFieldType.</param>
        /// <param name="customQuestionLabel">Question label for a custom question..</param>
        /// <param name="customQuestionOptions">Question options for a custom question..</param>
        public LeadFormQuestion(LeadFormQuestionType? questionType = default(LeadFormQuestionType?), LeadFormQuestionFieldType? customQuestionFieldType = default(LeadFormQuestionFieldType?), string customQuestionLabel = default(string), List<string> customQuestionOptions = default(List<string>))
        {
            this.QuestionType = questionType;
            this.CustomQuestionFieldType = customQuestionFieldType;
            this.CustomQuestionLabel = customQuestionLabel;
            this.CustomQuestionOptions = customQuestionOptions;
        }

        /// <summary>
        /// Question label for a custom question.
        /// </summary>
        /// <value>Question label for a custom question.</value>
        [DataMember(Name = "custom_question_label", EmitDefaultValue = true)]
        public string CustomQuestionLabel { get; set; }

        /// <summary>
        /// Question options for a custom question.
        /// </summary>
        /// <value>Question options for a custom question.</value>
        [DataMember(Name = "custom_question_options", EmitDefaultValue = true)]
        public List<string> CustomQuestionOptions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LeadFormQuestion {\n");
            sb.Append("  QuestionType: ").Append(QuestionType).Append("\n");
            sb.Append("  CustomQuestionFieldType: ").Append(CustomQuestionFieldType).Append("\n");
            sb.Append("  CustomQuestionLabel: ").Append(CustomQuestionLabel).Append("\n");
            sb.Append("  CustomQuestionOptions: ").Append(CustomQuestionOptions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
