/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;
using System.Reflection;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// CatalogsHotelProductGroupFilterKeys
    /// </summary>
    [JsonConverter(typeof(CatalogsHotelProductGroupFilterKeysJsonConverter))]
    [DataContract(Name = "CatalogsHotelProductGroupFilterKeys")]
    public partial class CatalogsHotelProductGroupFilterKeys : AbstractOpenAPISchema, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CatalogsHotelProductGroupFilterKeys" /> class
        /// with the <see cref="PriceFilter" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of PriceFilter.</param>
        public CatalogsHotelProductGroupFilterKeys(PriceFilter actualInstance)
        {
            IsNullable = false;
            SchemaType= "anyOf";
            ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CatalogsHotelProductGroupFilterKeys" /> class
        /// with the <see cref="HotelIdFilter" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of HotelIdFilter.</param>
        public CatalogsHotelProductGroupFilterKeys(HotelIdFilter actualInstance)
        {
            IsNullable = false;
            SchemaType= "anyOf";
            ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CatalogsHotelProductGroupFilterKeys" /> class
        /// with the <see cref="BrandFilter" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of BrandFilter.</param>
        public CatalogsHotelProductGroupFilterKeys(BrandFilter actualInstance)
        {
            IsNullable = false;
            SchemaType= "anyOf";
            ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CatalogsHotelProductGroupFilterKeys" /> class
        /// with the <see cref="CustomLabel0Filter" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of CustomLabel0Filter.</param>
        public CatalogsHotelProductGroupFilterKeys(CustomLabel0Filter actualInstance)
        {
            IsNullable = false;
            SchemaType= "anyOf";
            ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CatalogsHotelProductGroupFilterKeys" /> class
        /// with the <see cref="CustomLabel1Filter" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of CustomLabel1Filter.</param>
        public CatalogsHotelProductGroupFilterKeys(CustomLabel1Filter actualInstance)
        {
            IsNullable = false;
            SchemaType= "anyOf";
            ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CatalogsHotelProductGroupFilterKeys" /> class
        /// with the <see cref="CustomLabel2Filter" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of CustomLabel2Filter.</param>
        public CatalogsHotelProductGroupFilterKeys(CustomLabel2Filter actualInstance)
        {
            IsNullable = false;
            SchemaType= "anyOf";
            ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CatalogsHotelProductGroupFilterKeys" /> class
        /// with the <see cref="CustomLabel3Filter" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of CustomLabel3Filter.</param>
        public CatalogsHotelProductGroupFilterKeys(CustomLabel3Filter actualInstance)
        {
            IsNullable = false;
            SchemaType= "anyOf";
            ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CatalogsHotelProductGroupFilterKeys" /> class
        /// with the <see cref="CustomLabel4Filter" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of CustomLabel4Filter.</param>
        public CatalogsHotelProductGroupFilterKeys(CustomLabel4Filter actualInstance)
        {
            IsNullable = false;
            SchemaType= "anyOf";
            ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CatalogsHotelProductGroupFilterKeys" /> class
        /// with the <see cref="CountryFilter" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of CountryFilter.</param>
        public CatalogsHotelProductGroupFilterKeys(CountryFilter actualInstance)
        {
            IsNullable = false;
            SchemaType= "anyOf";
            ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }


        private Object _actualInstance;

        /// <summary>
        /// Gets or Sets ActualInstance
        /// </summary>
        public override Object ActualInstance
        {
            get
            {
                return _actualInstance;
            }
            set
            {
                if (value.GetType() == typeof(BrandFilter))
                {
                    _actualInstance = value;
                }
                else if (value.GetType() == typeof(CountryFilter))
                {
                    _actualInstance = value;
                }
                else if (value.GetType() == typeof(CustomLabel0Filter))
                {
                    _actualInstance = value;
                }
                else if (value.GetType() == typeof(CustomLabel1Filter))
                {
                    _actualInstance = value;
                }
                else if (value.GetType() == typeof(CustomLabel2Filter))
                {
                    _actualInstance = value;
                }
                else if (value.GetType() == typeof(CustomLabel3Filter))
                {
                    _actualInstance = value;
                }
                else if (value.GetType() == typeof(CustomLabel4Filter))
                {
                    _actualInstance = value;
                }
                else if (value.GetType() == typeof(HotelIdFilter))
                {
                    _actualInstance = value;
                }
                else if (value.GetType() == typeof(PriceFilter))
                {
                    _actualInstance = value;
                }
                else
                {
                    throw new ArgumentException("Invalid instance found. Must be the following types: BrandFilter, CountryFilter, CustomLabel0Filter, CustomLabel1Filter, CustomLabel2Filter, CustomLabel3Filter, CustomLabel4Filter, HotelIdFilter, PriceFilter");
                }
            }
        }

        /// <summary>
        /// Get the actual instance of `PriceFilter`. If the actual instance is not `PriceFilter`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of PriceFilter</returns>
        public PriceFilter GetPriceFilter()
        {
            return (PriceFilter)ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `HotelIdFilter`. If the actual instance is not `HotelIdFilter`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of HotelIdFilter</returns>
        public HotelIdFilter GetHotelIdFilter()
        {
            return (HotelIdFilter)ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `BrandFilter`. If the actual instance is not `BrandFilter`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of BrandFilter</returns>
        public BrandFilter GetBrandFilter()
        {
            return (BrandFilter)ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `CustomLabel0Filter`. If the actual instance is not `CustomLabel0Filter`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of CustomLabel0Filter</returns>
        public CustomLabel0Filter GetCustomLabel0Filter()
        {
            return (CustomLabel0Filter)ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `CustomLabel1Filter`. If the actual instance is not `CustomLabel1Filter`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of CustomLabel1Filter</returns>
        public CustomLabel1Filter GetCustomLabel1Filter()
        {
            return (CustomLabel1Filter)ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `CustomLabel2Filter`. If the actual instance is not `CustomLabel2Filter`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of CustomLabel2Filter</returns>
        public CustomLabel2Filter GetCustomLabel2Filter()
        {
            return (CustomLabel2Filter)ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `CustomLabel3Filter`. If the actual instance is not `CustomLabel3Filter`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of CustomLabel3Filter</returns>
        public CustomLabel3Filter GetCustomLabel3Filter()
        {
            return (CustomLabel3Filter)ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `CustomLabel4Filter`. If the actual instance is not `CustomLabel4Filter`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of CustomLabel4Filter</returns>
        public CustomLabel4Filter GetCustomLabel4Filter()
        {
            return (CustomLabel4Filter)ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `CountryFilter`. If the actual instance is not `CountryFilter`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of CountryFilter</returns>
        public CountryFilter GetCountryFilter()
        {
            return (CountryFilter)ActualInstance;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CatalogsHotelProductGroupFilterKeys {\n");
            sb.Append("  ActualInstance: ").Append(ActualInstance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(ActualInstance, CatalogsHotelProductGroupFilterKeys.SerializerSettings);
        }

        /// <summary>
        /// Converts the JSON string into an instance of CatalogsHotelProductGroupFilterKeys
        /// </summary>
        /// <param name="jsonString">JSON string</param>
        /// <returns>An instance of CatalogsHotelProductGroupFilterKeys</returns>
        public static CatalogsHotelProductGroupFilterKeys FromJson(string jsonString)
        {
            CatalogsHotelProductGroupFilterKeys newCatalogsHotelProductGroupFilterKeys = null;

            if (string.IsNullOrEmpty(jsonString))
            {
                return newCatalogsHotelProductGroupFilterKeys;
            }

            try
            {
                newCatalogsHotelProductGroupFilterKeys = new CatalogsHotelProductGroupFilterKeys(JsonConvert.DeserializeObject<BrandFilter>(jsonString, CatalogsHotelProductGroupFilterKeys.SerializerSettings));
                // deserialization is considered successful at this point if no exception has been thrown.
                return newCatalogsHotelProductGroupFilterKeys;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into BrandFilter: {1}", jsonString, exception.ToString()));
            }

            try
            {
                newCatalogsHotelProductGroupFilterKeys = new CatalogsHotelProductGroupFilterKeys(JsonConvert.DeserializeObject<CountryFilter>(jsonString, CatalogsHotelProductGroupFilterKeys.SerializerSettings));
                // deserialization is considered successful at this point if no exception has been thrown.
                return newCatalogsHotelProductGroupFilterKeys;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into CountryFilter: {1}", jsonString, exception.ToString()));
            }

            try
            {
                newCatalogsHotelProductGroupFilterKeys = new CatalogsHotelProductGroupFilterKeys(JsonConvert.DeserializeObject<CustomLabel0Filter>(jsonString, CatalogsHotelProductGroupFilterKeys.SerializerSettings));
                // deserialization is considered successful at this point if no exception has been thrown.
                return newCatalogsHotelProductGroupFilterKeys;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into CustomLabel0Filter: {1}", jsonString, exception.ToString()));
            }

            try
            {
                newCatalogsHotelProductGroupFilterKeys = new CatalogsHotelProductGroupFilterKeys(JsonConvert.DeserializeObject<CustomLabel1Filter>(jsonString, CatalogsHotelProductGroupFilterKeys.SerializerSettings));
                // deserialization is considered successful at this point if no exception has been thrown.
                return newCatalogsHotelProductGroupFilterKeys;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into CustomLabel1Filter: {1}", jsonString, exception.ToString()));
            }

            try
            {
                newCatalogsHotelProductGroupFilterKeys = new CatalogsHotelProductGroupFilterKeys(JsonConvert.DeserializeObject<CustomLabel2Filter>(jsonString, CatalogsHotelProductGroupFilterKeys.SerializerSettings));
                // deserialization is considered successful at this point if no exception has been thrown.
                return newCatalogsHotelProductGroupFilterKeys;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into CustomLabel2Filter: {1}", jsonString, exception.ToString()));
            }

            try
            {
                newCatalogsHotelProductGroupFilterKeys = new CatalogsHotelProductGroupFilterKeys(JsonConvert.DeserializeObject<CustomLabel3Filter>(jsonString, CatalogsHotelProductGroupFilterKeys.SerializerSettings));
                // deserialization is considered successful at this point if no exception has been thrown.
                return newCatalogsHotelProductGroupFilterKeys;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into CustomLabel3Filter: {1}", jsonString, exception.ToString()));
            }

            try
            {
                newCatalogsHotelProductGroupFilterKeys = new CatalogsHotelProductGroupFilterKeys(JsonConvert.DeserializeObject<CustomLabel4Filter>(jsonString, CatalogsHotelProductGroupFilterKeys.SerializerSettings));
                // deserialization is considered successful at this point if no exception has been thrown.
                return newCatalogsHotelProductGroupFilterKeys;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into CustomLabel4Filter: {1}", jsonString, exception.ToString()));
            }

            try
            {
                newCatalogsHotelProductGroupFilterKeys = new CatalogsHotelProductGroupFilterKeys(JsonConvert.DeserializeObject<HotelIdFilter>(jsonString, CatalogsHotelProductGroupFilterKeys.SerializerSettings));
                // deserialization is considered successful at this point if no exception has been thrown.
                return newCatalogsHotelProductGroupFilterKeys;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into HotelIdFilter: {1}", jsonString, exception.ToString()));
            }

            try
            {
                newCatalogsHotelProductGroupFilterKeys = new CatalogsHotelProductGroupFilterKeys(JsonConvert.DeserializeObject<PriceFilter>(jsonString, CatalogsHotelProductGroupFilterKeys.SerializerSettings));
                // deserialization is considered successful at this point if no exception has been thrown.
                return newCatalogsHotelProductGroupFilterKeys;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into PriceFilter: {1}", jsonString, exception.ToString()));
            }

            // no match found, throw an exception
            throw new InvalidDataException("The JSON string `" + jsonString + "` cannot be deserialized into any schema defined.");
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// Custom JSON converter for CatalogsHotelProductGroupFilterKeys
    /// </summary>
    public class CatalogsHotelProductGroupFilterKeysJsonConverter : JsonConverter
    {
        /// <summary>
        /// To write the JSON string
        /// </summary>
        /// <param name="writer">JSON writer</param>
        /// <param name="value">Object to be converted into a JSON string</param>
        /// <param name="serializer">JSON Serializer</param>
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            writer.WriteRawValue((string)(typeof(CatalogsHotelProductGroupFilterKeys).GetMethod("ToJson").Invoke(value, null)));
        }

        /// <summary>
        /// To convert a JSON string into an object
        /// </summary>
        /// <param name="reader">JSON reader</param>
        /// <param name="objectType">Object type</param>
        /// <param name="existingValue">Existing value</param>
        /// <param name="serializer">JSON Serializer</param>
        /// <returns>The object converted from the JSON string</returns>
        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
        {
            switch(reader.TokenType) 
            {
                case JsonToken.StartObject:
                    return CatalogsHotelProductGroupFilterKeys.FromJson(JObject.Load(reader).ToString(Formatting.None));
                case JsonToken.StartArray:
                    return CatalogsHotelProductGroupFilterKeys.FromJson(JArray.Load(reader).ToString(Formatting.None));
                default:
                    return null;
            }
        }

        /// <summary>
        /// Check if the object can be converted
        /// </summary>
        /// <param name="objectType">Object type</param>
        /// <returns>True if the object can be converted</returns>
        public override bool CanConvert(Type objectType)
        {
            return false;
        }
    }

}
