/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// CatalogsHotelAddress
    /// </summary>
    [DataContract(Name = "CatalogsHotelAddress")]
    public partial class CatalogsHotelAddress : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CatalogsHotelAddress" /> class.
        /// </summary>
        /// <param name="addr1">Primary street address of hotel..</param>
        /// <param name="city">City where the hotel is located..</param>
        /// <param name="region">State, county, province, where the hotel is located..</param>
        /// <param name="country">Country where the hotel is located..</param>
        /// <param name="postalCode">Required for countries with a postal code system. Postal or zip code of the hotel..</param>
        public CatalogsHotelAddress(string addr1 = default(string), string city = default(string), string region = default(string), string country = default(string), string postalCode = default(string))
        {
            this.Addr1 = addr1;
            this.City = city;
            this.Region = region;
            this.Country = country;
            this.PostalCode = postalCode;
        }

        /// <summary>
        /// Primary street address of hotel.
        /// </summary>
        /// <value>Primary street address of hotel.</value>
        [DataMember(Name = "addr1", EmitDefaultValue = false)]
        public string Addr1 { get; set; }

        /// <summary>
        /// City where the hotel is located.
        /// </summary>
        /// <value>City where the hotel is located.</value>
        [DataMember(Name = "city", EmitDefaultValue = false)]
        public string City { get; set; }

        /// <summary>
        /// State, county, province, where the hotel is located.
        /// </summary>
        /// <value>State, county, province, where the hotel is located.</value>
        [DataMember(Name = "region", EmitDefaultValue = false)]
        public string Region { get; set; }

        /// <summary>
        /// Country where the hotel is located.
        /// </summary>
        /// <value>Country where the hotel is located.</value>
        [DataMember(Name = "country", EmitDefaultValue = false)]
        public string Country { get; set; }

        /// <summary>
        /// Required for countries with a postal code system. Postal or zip code of the hotel.
        /// </summary>
        /// <value>Required for countries with a postal code system. Postal or zip code of the hotel.</value>
        [DataMember(Name = "postal_code", EmitDefaultValue = false)]
        public string PostalCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CatalogsHotelAddress {\n");
            sb.Append("  Addr1: ").Append(Addr1).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  Region: ").Append(Region).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
