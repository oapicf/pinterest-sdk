/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// AdvancedAuctionItem
    /// </summary>
    [DataContract(Name = "AdvancedAuctionItem")]
    public partial class AdvancedAuctionItem : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Country
        /// </summary>
        [DataMember(Name = "country", IsRequired = true, EmitDefaultValue = true)]
        public Country Country { get; set; }

        /// <summary>
        /// Gets or Sets Language
        /// </summary>
        [DataMember(Name = "language", IsRequired = true, EmitDefaultValue = true)]
        public Language Language { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AdvancedAuctionItem" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AdvancedAuctionItem() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AdvancedAuctionItem" /> class.
        /// </summary>
        /// <param name="itemId">The catalog retail item id in the merchant namespace (required).</param>
        /// <param name="country">country (required).</param>
        /// <param name="language">language (required).</param>
        /// <param name="bidOptions">bidOptions (required).</param>
        public AdvancedAuctionItem(string itemId = default(string), Country country = default(Country), Language language = default(Language), AdvancedAuctionBidOptions bidOptions = default(AdvancedAuctionBidOptions))
        {
            // to ensure "itemId" is required (not null)
            if (itemId == null)
            {
                throw new ArgumentNullException("itemId is a required property for AdvancedAuctionItem and cannot be null");
            }
            this.ItemId = itemId;
            this.Country = country;
            this.Language = language;
            // to ensure "bidOptions" is required (not null)
            if (bidOptions == null)
            {
                throw new ArgumentNullException("bidOptions is a required property for AdvancedAuctionItem and cannot be null");
            }
            this.BidOptions = bidOptions;
        }

        /// <summary>
        /// The catalog retail item id in the merchant namespace
        /// </summary>
        /// <value>The catalog retail item id in the merchant namespace</value>
        /*
        <example>DS0294-M</example>
        */
        [DataMember(Name = "item_id", IsRequired = true, EmitDefaultValue = true)]
        public string ItemId { get; set; }

        /// <summary>
        /// Gets or Sets BidOptions
        /// </summary>
        [DataMember(Name = "bid_options", IsRequired = true, EmitDefaultValue = true)]
        public AdvancedAuctionBidOptions BidOptions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AdvancedAuctionItem {\n");
            sb.Append("  ItemId: ").Append(ItemId).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  BidOptions: ").Append(BidOptions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
