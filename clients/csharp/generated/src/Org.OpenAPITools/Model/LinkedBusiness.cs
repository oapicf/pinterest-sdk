/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// LinkedBusiness
    /// </summary>
    [DataContract(Name = "LinkedBusiness")]
    public partial class LinkedBusiness : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LinkedBusiness" /> class.
        /// </summary>
        /// <param name="username">Username.</param>
        /// <param name="imageSmallUrl">image_small_url.</param>
        /// <param name="imageMediumUrl">image_medium_url.</param>
        /// <param name="imageLargeUrl">image_large_url.</param>
        /// <param name="imageXlargeUrl">image_xlarge_url.</param>
        public LinkedBusiness(string username = default(string), string imageSmallUrl = default(string), string imageMediumUrl = default(string), string imageLargeUrl = default(string), string imageXlargeUrl = default(string))
        {
            this.Username = username;
            this.ImageSmallUrl = imageSmallUrl;
            this.ImageMediumUrl = imageMediumUrl;
            this.ImageLargeUrl = imageLargeUrl;
            this.ImageXlargeUrl = imageXlargeUrl;
        }

        /// <summary>
        /// Username
        /// </summary>
        /// <value>Username</value>
        /*
        <example>username</example>
        */
        [DataMember(Name = "username", EmitDefaultValue = false)]
        public string Username { get; set; }

        /// <summary>
        /// image_small_url
        /// </summary>
        /// <value>image_small_url</value>
        /*
        <example>https://www.example.com/dj23454f53dfk2324.jpg</example>
        */
        [DataMember(Name = "image_small_url", EmitDefaultValue = false)]
        public string ImageSmallUrl { get; set; }

        /// <summary>
        /// image_medium_url
        /// </summary>
        /// <value>image_medium_url</value>
        /*
        <example>https://www.example.com/dj23454f53dfk2324.jpg</example>
        */
        [DataMember(Name = "image_medium_url", EmitDefaultValue = false)]
        public string ImageMediumUrl { get; set; }

        /// <summary>
        /// image_large_url
        /// </summary>
        /// <value>image_large_url</value>
        /*
        <example>https://www.example.com/dj23454f53dfk2324.jpg</example>
        */
        [DataMember(Name = "image_large_url", EmitDefaultValue = false)]
        public string ImageLargeUrl { get; set; }

        /// <summary>
        /// image_xlarge_url
        /// </summary>
        /// <value>image_xlarge_url</value>
        /*
        <example>https://www.example.com/dj23454f53dfk2324.jpg</example>
        */
        [DataMember(Name = "image_xlarge_url", EmitDefaultValue = false)]
        public string ImageXlargeUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LinkedBusiness {\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  ImageSmallUrl: ").Append(ImageSmallUrl).Append("\n");
            sb.Append("  ImageMediumUrl: ").Append(ImageMediumUrl).Append("\n");
            sb.Append("  ImageLargeUrl: ").Append(ImageLargeUrl).Append("\n");
            sb.Append("  ImageXlargeUrl: ").Append(ImageXlargeUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
