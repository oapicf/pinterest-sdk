/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// CatalogsItemValidationIssues
    /// </summary>
    [DataContract(Name = "CatalogsItemValidationIssues")]
    public partial class CatalogsItemValidationIssues : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CatalogsItemValidationIssues" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CatalogsItemValidationIssues() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CatalogsItemValidationIssues" /> class.
        /// </summary>
        /// <param name="itemNumber">Item number based on order of appearance in the Catalogs Feed. For example, &#39;0&#39; refers to first item found in a feed that was downloaded from a &#39;location&#39; specified during feed creation. (required).</param>
        /// <param name="itemId">The merchant-created unique ID that represents the product. (required).</param>
        /// <param name="errors">errors (required).</param>
        /// <param name="warnings">warnings (required).</param>
        public CatalogsItemValidationIssues(int itemNumber = default(int), string itemId = default(string), CatalogsItemValidationErrors errors = default(CatalogsItemValidationErrors), CatalogsItemValidationWarnings warnings = default(CatalogsItemValidationWarnings))
        {
            this.ItemNumber = itemNumber;
            // to ensure "itemId" is required (not null)
            if (itemId == null)
            {
                throw new ArgumentNullException("itemId is a required property for CatalogsItemValidationIssues and cannot be null");
            }
            this.ItemId = itemId;
            // to ensure "errors" is required (not null)
            if (errors == null)
            {
                throw new ArgumentNullException("errors is a required property for CatalogsItemValidationIssues and cannot be null");
            }
            this.Errors = errors;
            // to ensure "warnings" is required (not null)
            if (warnings == null)
            {
                throw new ArgumentNullException("warnings is a required property for CatalogsItemValidationIssues and cannot be null");
            }
            this.Warnings = warnings;
        }

        /// <summary>
        /// Item number based on order of appearance in the Catalogs Feed. For example, &#39;0&#39; refers to first item found in a feed that was downloaded from a &#39;location&#39; specified during feed creation.
        /// </summary>
        /// <value>Item number based on order of appearance in the Catalogs Feed. For example, &#39;0&#39; refers to first item found in a feed that was downloaded from a &#39;location&#39; specified during feed creation.</value>
        /*
        <example>0</example>
        */
        [DataMember(Name = "item_number", IsRequired = true, EmitDefaultValue = true)]
        public int ItemNumber { get; set; }

        /// <summary>
        /// The merchant-created unique ID that represents the product.
        /// </summary>
        /// <value>The merchant-created unique ID that represents the product.</value>
        /*
        <example>DS0294-L</example>
        */
        [DataMember(Name = "item_id", IsRequired = true, EmitDefaultValue = true)]
        public string ItemId { get; set; }

        /// <summary>
        /// Gets or Sets Errors
        /// </summary>
        [DataMember(Name = "errors", IsRequired = true, EmitDefaultValue = true)]
        public CatalogsItemValidationErrors Errors { get; set; }

        /// <summary>
        /// Gets or Sets Warnings
        /// </summary>
        [DataMember(Name = "warnings", IsRequired = true, EmitDefaultValue = true)]
        public CatalogsItemValidationWarnings Warnings { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CatalogsItemValidationIssues {\n");
            sb.Append("  ItemNumber: ").Append(ItemNumber).Append("\n");
            sb.Append("  ItemId: ").Append(ItemId).Append("\n");
            sb.Append("  Errors: ").Append(Errors).Append("\n");
            sb.Append("  Warnings: ").Append(Warnings).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
