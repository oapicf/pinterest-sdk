/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Pin fields for updates
    /// </summary>
    [DataContract(Name = "PinUpdate")]
    public partial class PinUpdate : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PinUpdate" /> class.
        /// </summary>
        /// <param name="altText">Pin&#39;s alternative text..</param>
        /// <param name="boardId">The id of the board to move the Pin onto..</param>
        /// <param name="boardSectionId">&lt;a href&#x3D;\&quot;https://help.pinterest.com/en/article/create-a-board-section\&quot;&gt;Board section&lt;/a&gt; ID..</param>
        /// <param name="description">Pin description - 800 characters maximum..</param>
        /// <param name="link">URL viewer is taken to when they click pin..</param>
        /// <param name="title">The native pin title that creators explicitly prefer to display..</param>
        /// <param name="carouselSlots">Carousel Pin slots data..</param>
        /// <param name="note">Private note for this Pin. &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/article/add-notes-to-your-pins\&quot;&gt;Learn more&lt;/a&gt;..</param>
        public PinUpdate(string altText = default(string), string boardId = default(string), string boardSectionId = default(string), string description = default(string), string link = default(string), string title = default(string), List<PinUpdateCarouselSlotsInner> carouselSlots = default(List<PinUpdateCarouselSlotsInner>), string note = default(string))
        {
            this.AltText = altText;
            this.BoardId = boardId;
            this.BoardSectionId = boardSectionId;
            this.Description = description;
            this.Link = link;
            this.Title = title;
            this.CarouselSlots = carouselSlots;
            this.Note = note;
        }

        /// <summary>
        /// Pin&#39;s alternative text.
        /// </summary>
        /// <value>Pin&#39;s alternative text.</value>
        [DataMember(Name = "alt_text", EmitDefaultValue = true)]
        public string AltText { get; set; }

        /// <summary>
        /// The id of the board to move the Pin onto.
        /// </summary>
        /// <value>The id of the board to move the Pin onto.</value>
        [DataMember(Name = "board_id", EmitDefaultValue = true)]
        public string BoardId { get; set; }

        /// <summary>
        /// &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/article/create-a-board-section\&quot;&gt;Board section&lt;/a&gt; ID.
        /// </summary>
        /// <value>&lt;a href&#x3D;\&quot;https://help.pinterest.com/en/article/create-a-board-section\&quot;&gt;Board section&lt;/a&gt; ID.</value>
        [DataMember(Name = "board_section_id", EmitDefaultValue = true)]
        public string BoardSectionId { get; set; }

        /// <summary>
        /// Pin description - 800 characters maximum.
        /// </summary>
        /// <value>Pin description - 800 characters maximum.</value>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// URL viewer is taken to when they click pin.
        /// </summary>
        /// <value>URL viewer is taken to when they click pin.</value>
        /*
        <example>https://www.pinterest.com/</example>
        */
        [DataMember(Name = "link", EmitDefaultValue = true)]
        public string Link { get; set; }

        /// <summary>
        /// The native pin title that creators explicitly prefer to display.
        /// </summary>
        /// <value>The native pin title that creators explicitly prefer to display.</value>
        [DataMember(Name = "title", EmitDefaultValue = true)]
        public string Title { get; set; }

        /// <summary>
        /// Carousel Pin slots data.
        /// </summary>
        /// <value>Carousel Pin slots data.</value>
        [DataMember(Name = "carousel_slots", EmitDefaultValue = false)]
        public List<PinUpdateCarouselSlotsInner> CarouselSlots { get; set; }

        /// <summary>
        /// Private note for this Pin. &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/article/add-notes-to-your-pins\&quot;&gt;Learn more&lt;/a&gt;.
        /// </summary>
        /// <value>Private note for this Pin. &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/article/add-notes-to-your-pins\&quot;&gt;Learn more&lt;/a&gt;.</value>
        [DataMember(Name = "note", EmitDefaultValue = true)]
        public string Note { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PinUpdate {\n");
            sb.Append("  AltText: ").Append(AltText).Append("\n");
            sb.Append("  BoardId: ").Append(BoardId).Append("\n");
            sb.Append("  BoardSectionId: ").Append(BoardSectionId).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Link: ").Append(Link).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  CarouselSlots: ").Append(CarouselSlots).Append("\n");
            sb.Append("  Note: ").Append(Note).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // AltText (string) maxLength
            if (this.AltText != null && this.AltText.Length > 500)
            {
                yield return new ValidationResult("Invalid value for AltText, length must be less than 500.", new [] { "AltText" });
            }

            if (this.BoardId != null) {
                // BoardId (string) pattern
                Regex regexBoardId = new Regex(@"^\d+$", RegexOptions.CultureInvariant);
                if (!regexBoardId.Match(this.BoardId).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BoardId, must match a pattern of " + regexBoardId, new [] { "BoardId" });
                }
            }

            if (this.BoardSectionId != null) {
                // BoardSectionId (string) pattern
                Regex regexBoardSectionId = new Regex(@"^\d+$", RegexOptions.CultureInvariant);
                if (!regexBoardSectionId.Match(this.BoardSectionId).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BoardSectionId, must match a pattern of " + regexBoardSectionId, new [] { "BoardSectionId" });
                }
            }

            // Description (string) maxLength
            if (this.Description != null && this.Description.Length > 800)
            {
                yield return new ValidationResult("Invalid value for Description, length must be less than 800.", new [] { "Description" });
            }

            // Link (string) maxLength
            if (this.Link != null && this.Link.Length > 2048)
            {
                yield return new ValidationResult("Invalid value for Link, length must be less than 2048.", new [] { "Link" });
            }

            // Title (string) maxLength
            if (this.Title != null && this.Title.Length > 100)
            {
                yield return new ValidationResult("Invalid value for Title, length must be less than 100.", new [] { "Title" });
            }

            yield break;
        }
    }

}
