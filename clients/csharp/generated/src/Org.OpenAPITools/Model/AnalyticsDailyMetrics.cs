/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// AnalyticsDailyMetrics
    /// </summary>
    [DataContract(Name = "AnalyticsDailyMetrics")]
    public partial class AnalyticsDailyMetrics : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets DataStatus
        /// </summary>
        [DataMember(Name = "data_status", EmitDefaultValue = false)]
        public DataStatus? DataStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AnalyticsDailyMetrics" /> class.
        /// </summary>
        /// <param name="dataStatus">dataStatus.</param>
        /// <param name="date">Metrics date (UTC): YYYY-MM-DD..</param>
        /// <param name="metrics">The metric name and daily value for each requested metric.</param>
        public AnalyticsDailyMetrics(DataStatus? dataStatus = default(DataStatus?), string date = default(string), Dictionary<string, decimal> metrics = default(Dictionary<string, decimal>))
        {
            this.DataStatus = dataStatus;
            this.Date = date;
            this.Metrics = metrics;
        }

        /// <summary>
        /// Metrics date (UTC): YYYY-MM-DD.
        /// </summary>
        /// <value>Metrics date (UTC): YYYY-MM-DD.</value>
        /*
        <example>2019-12-01</example>
        */
        [DataMember(Name = "date", EmitDefaultValue = false)]
        public string Date { get; set; }

        /// <summary>
        /// The metric name and daily value for each requested metric
        /// </summary>
        /// <value>The metric name and daily value for each requested metric</value>
        /*
        <example>{&quot;CLOSEUP&quot;:1,&quot;CLOSEUP_RATE&quot;:0,&quot;ENGAGEMENT&quot;:1,&quot;ENGAGEMENT_RATE&quot;:0,&quot;IMPRESSION&quot;:240,&quot;OUTBOUND_CLICK&quot;:20,&quot;OUTBOUND_CLICK_RATE&quot;:0.08,&quot;PIN_CLICK&quot;:37,&quot;PIN_CLICK_RATE&quot;:0.15,&quot;QUARTILE_95_PERCENT_VIEW&quot;:8,&quot;SAVE&quot;:20,&quot;SAVE_RATE&quot;:0.18,&quot;VIDEO_10S_VIEW&quot;:2,&quot;VIDEO_AVG_WATCH_TIME&quot;:2507.75,&quot;VIDEO_MRC_VIEW&quot;:20,&quot;VIDEO_START&quot;:29,&quot;VIDEO_V50_WATCH_TIME&quot;:10031}</example>
        */
        [DataMember(Name = "metrics", EmitDefaultValue = false)]
        public Dictionary<string, decimal> Metrics { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AnalyticsDailyMetrics {\n");
            sb.Append("  DataStatus: ").Append(DataStatus).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Metrics: ").Append(Metrics).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
