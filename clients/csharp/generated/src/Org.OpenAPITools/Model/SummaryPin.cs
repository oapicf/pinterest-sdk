/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Summarized pin information
    /// </summary>
    [DataContract(Name = "SummaryPin")]
    public partial class SummaryPin : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SummaryPin" /> class.
        /// </summary>
        /// <param name="altText">altText.</param>
        /// <param name="link">link.</param>
        /// <param name="title">title.</param>
        /// <param name="description">description.</param>
        public SummaryPin(string altText = default(string), string link = default(string), string title = default(string), string description = default(string))
        {
            this.AltText = altText;
            this.Link = link;
            this.Title = title;
            this.Description = description;
        }

        /// <summary>
        /// Gets or Sets Media
        /// </summary>
        [DataMember(Name = "media", EmitDefaultValue = false)]
        public PinMedia Media { get; private set; }

        /// <summary>
        /// Returns false as Media should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeMedia()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets AltText
        /// </summary>
        [DataMember(Name = "alt_text", EmitDefaultValue = true)]
        public string AltText { get; set; }

        /// <summary>
        /// Gets or Sets Link
        /// </summary>
        /*
        <example>https://www.pinterest.com/</example>
        */
        [DataMember(Name = "link", EmitDefaultValue = true)]
        public string Link { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name = "title", EmitDefaultValue = true)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SummaryPin {\n");
            sb.Append("  Media: ").Append(Media).Append("\n");
            sb.Append("  AltText: ").Append(AltText).Append("\n");
            sb.Append("  Link: ").Append(Link).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // AltText (string) maxLength
            if (this.AltText != null && this.AltText.Length > 500)
            {
                yield return new ValidationResult("Invalid value for AltText, length must be less than 500.", new [] { "AltText" });
            }

            // Link (string) maxLength
            if (this.Link != null && this.Link.Length > 2048)
            {
                yield return new ValidationResult("Invalid value for Link, length must be less than 2048.", new [] { "Link" });
            }

            yield break;
        }
    }

}
