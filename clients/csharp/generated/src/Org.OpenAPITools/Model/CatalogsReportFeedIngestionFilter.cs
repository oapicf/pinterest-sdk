/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// CatalogsReportFeedIngestionFilter
    /// </summary>
    [DataContract(Name = "CatalogsReportFeedIngestionFilter")]
    public partial class CatalogsReportFeedIngestionFilter : IValidatableObject
    {
        /// <summary>
        /// Defines ReportType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ReportTypeEnum
        {
            /// <summary>
            /// Enum FEEDINGESTIONISSUES for value: FEED_INGESTION_ISSUES
            /// </summary>
            [EnumMember(Value = "FEED_INGESTION_ISSUES")]
            FEEDINGESTIONISSUES = 1
        }


        /// <summary>
        /// Gets or Sets ReportType
        /// </summary>
        [DataMember(Name = "report_type", IsRequired = true, EmitDefaultValue = true)]
        public ReportTypeEnum ReportType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CatalogsReportFeedIngestionFilter" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CatalogsReportFeedIngestionFilter() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CatalogsReportFeedIngestionFilter" /> class.
        /// </summary>
        /// <param name="reportType">reportType (required).</param>
        /// <param name="feedId">ID of the feed entity. (required).</param>
        /// <param name="processingResultId">Unique identifier of a feed processing result. It can be acquired from the \&quot;id\&quot; field of the \&quot;items\&quot; array within the response of the [List processing results for a given feed](/docs/api/v5/#operation/feed_processing_results/list). If not provided, default to most recent completed processing result..</param>
        public CatalogsReportFeedIngestionFilter(ReportTypeEnum reportType = default(ReportTypeEnum), string feedId = default(string), string processingResultId = default(string))
        {
            this.ReportType = reportType;
            // to ensure "feedId" is required (not null)
            if (feedId == null)
            {
                throw new ArgumentNullException("feedId is a required property for CatalogsReportFeedIngestionFilter and cannot be null");
            }
            this.FeedId = feedId;
            this.ProcessingResultId = processingResultId;
        }

        /// <summary>
        /// ID of the feed entity.
        /// </summary>
        /// <value>ID of the feed entity.</value>
        [DataMember(Name = "feed_id", IsRequired = true, EmitDefaultValue = true)]
        public string FeedId { get; set; }

        /// <summary>
        /// Unique identifier of a feed processing result. It can be acquired from the \&quot;id\&quot; field of the \&quot;items\&quot; array within the response of the [List processing results for a given feed](/docs/api/v5/#operation/feed_processing_results/list). If not provided, default to most recent completed processing result.
        /// </summary>
        /// <value>Unique identifier of a feed processing result. It can be acquired from the \&quot;id\&quot; field of the \&quot;items\&quot; array within the response of the [List processing results for a given feed](/docs/api/v5/#operation/feed_processing_results/list). If not provided, default to most recent completed processing result.</value>
        [DataMember(Name = "processing_result_id", EmitDefaultValue = false)]
        public string ProcessingResultId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CatalogsReportFeedIngestionFilter {\n");
            sb.Append("  ReportType: ").Append(ReportType).Append("\n");
            sb.Append("  FeedId: ").Append(FeedId).Append("\n");
            sb.Append("  ProcessingResultId: ").Append(ProcessingResultId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.FeedId != null) {
                // FeedId (string) pattern
                Regex regexFeedId = new Regex(@"^\d+$", RegexOptions.CultureInvariant);
                if (!regexFeedId.Match(this.FeedId).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FeedId, must match a pattern of " + regexFeedId, new [] { "FeedId" });
                }
            }

            if (this.ProcessingResultId != null) {
                // ProcessingResultId (string) pattern
                Regex regexProcessingResultId = new Regex(@"^\d+$", RegexOptions.CultureInvariant);
                if (!regexProcessingResultId.Match(this.ProcessingResultId).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ProcessingResultId, must match a pattern of " + regexProcessingResultId, new [] { "ProcessingResultId" });
                }
            }

            yield break;
        }
    }

}
