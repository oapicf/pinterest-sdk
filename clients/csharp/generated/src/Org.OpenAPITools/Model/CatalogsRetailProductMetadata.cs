/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Retail product metadata entity
    /// </summary>
    [DataContract(Name = "CatalogsRetailProductMetadata")]
    public partial class CatalogsRetailProductMetadata : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Availability
        /// </summary>
        [DataMember(Name = "availability", IsRequired = true, EmitDefaultValue = true)]
        public NonNullableProductAvailabilityType Availability { get; set; }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name = "currency", IsRequired = true, EmitDefaultValue = true)]
        public NonNullableCatalogsCurrency Currency { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CatalogsRetailProductMetadata" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CatalogsRetailProductMetadata() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CatalogsRetailProductMetadata" /> class.
        /// </summary>
        /// <param name="itemId">The user-created unique ID that represents the product. (required).</param>
        /// <param name="itemGroupId">The parent ID of the product. (required).</param>
        /// <param name="availability">availability (required).</param>
        /// <param name="price">The price of the product. (required).</param>
        /// <param name="salePrice">The discounted price of the product. (required).</param>
        /// <param name="currency">currency (required).</param>
        public CatalogsRetailProductMetadata(string itemId = default(string), string itemGroupId = default(string), NonNullableProductAvailabilityType availability = default(NonNullableProductAvailabilityType), decimal price = default(decimal), decimal? salePrice = default(decimal?), NonNullableCatalogsCurrency currency = default(NonNullableCatalogsCurrency))
        {
            // to ensure "itemId" is required (not null)
            if (itemId == null)
            {
                throw new ArgumentNullException("itemId is a required property for CatalogsRetailProductMetadata and cannot be null");
            }
            this.ItemId = itemId;
            // to ensure "itemGroupId" is required (not null)
            if (itemGroupId == null)
            {
                throw new ArgumentNullException("itemGroupId is a required property for CatalogsRetailProductMetadata and cannot be null");
            }
            this.ItemGroupId = itemGroupId;
            this.Availability = availability;
            this.Price = price;
            // to ensure "salePrice" is required (not null)
            if (salePrice == null)
            {
                throw new ArgumentNullException("salePrice is a required property for CatalogsRetailProductMetadata and cannot be null");
            }
            this.SalePrice = salePrice;
            this.Currency = currency;
        }

        /// <summary>
        /// The user-created unique ID that represents the product.
        /// </summary>
        /// <value>The user-created unique ID that represents the product.</value>
        /*
        <example>DS0294-L</example>
        */
        [DataMember(Name = "item_id", IsRequired = true, EmitDefaultValue = true)]
        public string ItemId { get; set; }

        /// <summary>
        /// The parent ID of the product.
        /// </summary>
        /// <value>The parent ID of the product.</value>
        /*
        <example>DS0294</example>
        */
        [DataMember(Name = "item_group_id", IsRequired = true, EmitDefaultValue = true)]
        public string ItemGroupId { get; set; }

        /// <summary>
        /// The price of the product.
        /// </summary>
        /// <value>The price of the product.</value>
        /*
        <example>24.99</example>
        */
        [DataMember(Name = "price", IsRequired = true, EmitDefaultValue = true)]
        public decimal Price { get; set; }

        /// <summary>
        /// The discounted price of the product.
        /// </summary>
        /// <value>The discounted price of the product.</value>
        /*
        <example>14.99</example>
        */
        [DataMember(Name = "sale_price", IsRequired = true, EmitDefaultValue = true)]
        public decimal? SalePrice { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CatalogsRetailProductMetadata {\n");
            sb.Append("  ItemId: ").Append(ItemId).Append("\n");
            sb.Append("  ItemGroupId: ").Append(ItemGroupId).Append("\n");
            sb.Append("  Availability: ").Append(Availability).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  SalePrice: ").Append(SalePrice).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
