/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// The list of parameter key/value pairs you will need to send with your POST request to upload your media file.
    /// </summary>
    [DataContract(Name = "MediaUpload_allOf_upload_parameters")]
    public partial class MediaUploadAllOfUploadParameters : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MediaUploadAllOfUploadParameters" /> class.
        /// </summary>
        /// <param name="xAmzDate">xAmzDate.</param>
        /// <param name="xAmzSignature">xAmzSignature.</param>
        /// <param name="xAmzSecurityToken">xAmzSecurityToken.</param>
        /// <param name="xAmzAlgorithm">xAmzAlgorithm.</param>
        /// <param name="key">key.</param>
        /// <param name="policy">policy.</param>
        /// <param name="xAmzCredential">xAmzCredential.</param>
        /// <param name="contentType">contentType.</param>
        public MediaUploadAllOfUploadParameters(string xAmzDate = default(string), string xAmzSignature = default(string), string xAmzSecurityToken = default(string), string xAmzAlgorithm = default(string), string key = default(string), string policy = default(string), string xAmzCredential = default(string), string contentType = default(string))
        {
            this.XAmzDate = xAmzDate;
            this.XAmzSignature = xAmzSignature;
            this.XAmzSecurityToken = xAmzSecurityToken;
            this.XAmzAlgorithm = xAmzAlgorithm;
            this.Key = key;
            this.Policy = policy;
            this.XAmzCredential = xAmzCredential;
            this.ContentType = contentType;
        }

        /// <summary>
        /// Gets or Sets XAmzDate
        /// </summary>
        [DataMember(Name = "x-amz-date", EmitDefaultValue = false)]
        public string XAmzDate { get; set; }

        /// <summary>
        /// Gets or Sets XAmzSignature
        /// </summary>
        [DataMember(Name = "x-amz-signature", EmitDefaultValue = false)]
        public string XAmzSignature { get; set; }

        /// <summary>
        /// Gets or Sets XAmzSecurityToken
        /// </summary>
        [DataMember(Name = "x-amz-security-token", EmitDefaultValue = false)]
        public string XAmzSecurityToken { get; set; }

        /// <summary>
        /// Gets or Sets XAmzAlgorithm
        /// </summary>
        [DataMember(Name = "x-amz-algorithm", EmitDefaultValue = false)]
        public string XAmzAlgorithm { get; set; }

        /// <summary>
        /// Gets or Sets Key
        /// </summary>
        [DataMember(Name = "key", EmitDefaultValue = false)]
        public string Key { get; set; }

        /// <summary>
        /// Gets or Sets Policy
        /// </summary>
        [DataMember(Name = "policy", EmitDefaultValue = false)]
        public string Policy { get; set; }

        /// <summary>
        /// Gets or Sets XAmzCredential
        /// </summary>
        [DataMember(Name = "x-amz-credential", EmitDefaultValue = false)]
        public string XAmzCredential { get; set; }

        /// <summary>
        /// Gets or Sets ContentType
        /// </summary>
        /*
        <example>multipart/form-data</example>
        */
        [DataMember(Name = "Content-Type", EmitDefaultValue = false)]
        public string ContentType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MediaUploadAllOfUploadParameters {\n");
            sb.Append("  XAmzDate: ").Append(XAmzDate).Append("\n");
            sb.Append("  XAmzSignature: ").Append(XAmzSignature).Append("\n");
            sb.Append("  XAmzSecurityToken: ").Append(XAmzSecurityToken).Append("\n");
            sb.Append("  XAmzAlgorithm: ").Append(XAmzAlgorithm).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  Policy: ").Append(Policy).Append("\n");
            sb.Append("  XAmzCredential: ").Append(XAmzCredential).Append("\n");
            sb.Append("  ContentType: ").Append(ContentType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
