/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// This field includes all quiz data including questions, options, and results.
    /// </summary>
    [DataContract(Name = "QuizPinData")]
    public partial class QuizPinData : IValidatableObject
    {
        /// <summary>
        /// Quiz ad tie breaker type, default is RANDOM
        /// </summary>
        /// <value>Quiz ad tie breaker type, default is RANDOM</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TieBreakerTypeEnum
        {
            /// <summary>
            /// Enum RANDOM for value: RANDOM
            /// </summary>
            [EnumMember(Value = "RANDOM")]
            RANDOM = 1,

            /// <summary>
            /// Enum CUSTOM for value: CUSTOM
            /// </summary>
            [EnumMember(Value = "CUSTOM")]
            CUSTOM = 2
        }


        /// <summary>
        /// Quiz ad tie breaker type, default is RANDOM
        /// </summary>
        /// <value>Quiz ad tie breaker type, default is RANDOM</value>
        [DataMember(Name = "tie_breaker_type", EmitDefaultValue = false)]
        public TieBreakerTypeEnum? TieBreakerType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="QuizPinData" /> class.
        /// </summary>
        /// <param name="questions">questions.</param>
        /// <param name="results">results.</param>
        /// <param name="tieBreakerType">Quiz ad tie breaker type, default is RANDOM.</param>
        /// <param name="tieBreakerCustomResult">tieBreakerCustomResult.</param>
        public QuizPinData(List<QuizPinQuestion> questions = default(List<QuizPinQuestion>), List<QuizPinResult> results = default(List<QuizPinResult>), TieBreakerTypeEnum? tieBreakerType = default(TieBreakerTypeEnum?), QuizPinResult tieBreakerCustomResult = default(QuizPinResult))
        {
            this.Questions = questions;
            this.Results = results;
            this.TieBreakerType = tieBreakerType;
            this.TieBreakerCustomResult = tieBreakerCustomResult;
        }

        /// <summary>
        /// Gets or Sets Questions
        /// </summary>
        [DataMember(Name = "questions", EmitDefaultValue = false)]
        public List<QuizPinQuestion> Questions { get; set; }

        /// <summary>
        /// Gets or Sets Results
        /// </summary>
        [DataMember(Name = "results", EmitDefaultValue = false)]
        public List<QuizPinResult> Results { get; set; }

        /// <summary>
        /// Gets or Sets TieBreakerCustomResult
        /// </summary>
        [DataMember(Name = "tie_breaker_custom_result", EmitDefaultValue = true)]
        public QuizPinResult TieBreakerCustomResult { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class QuizPinData {\n");
            sb.Append("  Questions: ").Append(Questions).Append("\n");
            sb.Append("  Results: ").Append(Results).Append("\n");
            sb.Append("  TieBreakerType: ").Append(TieBreakerType).Append("\n");
            sb.Append("  TieBreakerCustomResult: ").Append(TieBreakerCustomResult).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
