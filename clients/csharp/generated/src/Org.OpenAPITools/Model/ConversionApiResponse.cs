/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Schema describing the object in the response, which contains information about the events that were received and processed.
    /// </summary>
    [DataContract(Name = "ConversionApiResponse")]
    public partial class ConversionApiResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ConversionApiResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ConversionApiResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ConversionApiResponse" /> class.
        /// </summary>
        /// <param name="numEventsReceived">Total number of events received in the request. (required).</param>
        /// <param name="numEventsProcessed">Number of events that were successfully processed from the events. (required).</param>
        /// <param name="events">Specific messages for each event received. The order will match the order in which the events were received in the request. (required).</param>
        public ConversionApiResponse(int numEventsReceived = default(int), int numEventsProcessed = default(int), List<ConversionApiResponseEventsInner> events = default(List<ConversionApiResponseEventsInner>))
        {
            this.NumEventsReceived = numEventsReceived;
            this.NumEventsProcessed = numEventsProcessed;
            // to ensure "events" is required (not null)
            if (events == null)
            {
                throw new ArgumentNullException("events is a required property for ConversionApiResponse and cannot be null");
            }
            this.Events = events;
        }

        /// <summary>
        /// Total number of events received in the request.
        /// </summary>
        /// <value>Total number of events received in the request.</value>
        [DataMember(Name = "num_events_received", IsRequired = true, EmitDefaultValue = true)]
        public int NumEventsReceived { get; set; }

        /// <summary>
        /// Number of events that were successfully processed from the events.
        /// </summary>
        /// <value>Number of events that were successfully processed from the events.</value>
        [DataMember(Name = "num_events_processed", IsRequired = true, EmitDefaultValue = true)]
        public int NumEventsProcessed { get; set; }

        /// <summary>
        /// Specific messages for each event received. The order will match the order in which the events were received in the request.
        /// </summary>
        /// <value>Specific messages for each event received. The order will match the order in which the events were received in the request.</value>
        [DataMember(Name = "events", IsRequired = true, EmitDefaultValue = true)]
        public List<ConversionApiResponseEventsInner> Events { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ConversionApiResponse {\n");
            sb.Append("  NumEventsReceived: ").Append(NumEventsReceived).Append("\n");
            sb.Append("  NumEventsProcessed: ").Append(NumEventsProcessed).Append("\n");
            sb.Append("  Events: ").Append(Events).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
