/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// BillingProfilesResponse
    /// </summary>
    [DataContract(Name = "BillingProfilesResponse")]
    public partial class BillingProfilesResponse : IValidatableObject
    {
        /// <summary>
        /// Type of the card.
        /// </summary>
        /// <value>Type of the card.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CardTypeEnum
        {
            /// <summary>
            /// Enum UNKNOWN for value: UNKNOWN
            /// </summary>
            [EnumMember(Value = "UNKNOWN")]
            UNKNOWN,

            /// <summary>
            /// Enum VISA for value: VISA
            /// </summary>
            [EnumMember(Value = "VISA")]
            VISA,

            /// <summary>
            /// Enum MASTERCARD for value: MASTERCARD
            /// </summary>
            [EnumMember(Value = "MASTERCARD")]
            MASTERCARD,

            /// <summary>
            /// Enum AMERICANEXPRESS for value: AMERICAN_EXPRESS
            /// </summary>
            [EnumMember(Value = "AMERICAN_EXPRESS")]
            AMERICANEXPRESS,

            /// <summary>
            /// Enum DISCOVER for value: DISCOVER
            /// </summary>
            [EnumMember(Value = "DISCOVER")]
            DISCOVER,

            /// <summary>
            /// Enum ELO for value: ELO
            /// </summary>
            [EnumMember(Value = "ELO")]
            ELO
        }


        /// <summary>
        /// Type of the card.
        /// </summary>
        /// <value>Type of the card.</value>
        /*
        <example>VISA</example>
        */
        [DataMember(Name = "card_type", EmitDefaultValue = false)]
        public CardTypeEnum? CardType { get; set; }
        /// <summary>
        /// Status of the billing.
        /// </summary>
        /// <value>Status of the billing.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum UNSPECIFIED for value: UNSPECIFIED
            /// </summary>
            [EnumMember(Value = "UNSPECIFIED")]
            UNSPECIFIED = 1,

            /// <summary>
            /// Enum VALID for value: VALID
            /// </summary>
            [EnumMember(Value = "VALID")]
            VALID = 2,

            /// <summary>
            /// Enum INVALID for value: INVALID
            /// </summary>
            [EnumMember(Value = "INVALID")]
            INVALID = 3,

            /// <summary>
            /// Enum PENDING for value: PENDING
            /// </summary>
            [EnumMember(Value = "PENDING")]
            PENDING = 4,

            /// <summary>
            /// Enum DELETED for value: DELETED
            /// </summary>
            [EnumMember(Value = "DELETED")]
            DELETED = 5,

            /// <summary>
            /// Enum SECONDARY for value: SECONDARY
            /// </summary>
            [EnumMember(Value = "SECONDARY")]
            SECONDARY = 6,

            /// <summary>
            /// Enum PENDINGSECONDARY for value: PENDING_SECONDARY
            /// </summary>
            [EnumMember(Value = "PENDING_SECONDARY")]
            PENDINGSECONDARY = 7
        }


        /// <summary>
        /// Status of the billing.
        /// </summary>
        /// <value>Status of the billing.</value>
        /*
        <example>INVALID</example>
        */
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Brand of the payment method.
        /// </summary>
        /// <value>Brand of the payment method.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PaymentMethodBrandEnum
        {
            /// <summary>
            /// Enum UNKNOWN for value: UNKNOWN
            /// </summary>
            [EnumMember(Value = "UNKNOWN")]
            UNKNOWN,

            /// <summary>
            /// Enum VISA for value: VISA
            /// </summary>
            [EnumMember(Value = "VISA")]
            VISA,

            /// <summary>
            /// Enum MASTERCARD for value: MASTERCARD
            /// </summary>
            [EnumMember(Value = "MASTERCARD")]
            MASTERCARD,

            /// <summary>
            /// Enum AMERICANEXPRESS for value: AMERICAN_EXPRESS
            /// </summary>
            [EnumMember(Value = "AMERICAN_EXPRESS")]
            AMERICANEXPRESS,

            /// <summary>
            /// Enum DISCOVER for value: DISCOVER
            /// </summary>
            [EnumMember(Value = "DISCOVER")]
            DISCOVER,

            /// <summary>
            /// Enum SOFORT for value: SOFORT
            /// </summary>
            [EnumMember(Value = "SOFORT")]
            SOFORT,

            /// <summary>
            /// Enum DINERSCLUB for value: DINERS_CLUB
            /// </summary>
            [EnumMember(Value = "DINERS_CLUB")]
            DINERSCLUB,

            /// <summary>
            /// Enum ELO for value: ELO
            /// </summary>
            [EnumMember(Value = "ELO")]
            ELO,

            /// <summary>
            /// Enum CARTEBANCAIRE for value: CARTE_BANCAIRE
            /// </summary>
            [EnumMember(Value = "CARTE_BANCAIRE")]
            CARTEBANCAIRE
        }


        /// <summary>
        /// Brand of the payment method.
        /// </summary>
        /// <value>Brand of the payment method.</value>
        /*
        <example>VISA</example>
        */
        [DataMember(Name = "payment_method_brand", EmitDefaultValue = false)]
        public PaymentMethodBrandEnum? PaymentMethodBrand { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="BillingProfilesResponse" /> class.
        /// </summary>
        /// <param name="id">Billing ID..</param>
        /// <param name="cardType">Type of the card..</param>
        /// <param name="status">Status of the billing..</param>
        /// <param name="advertiserId">Advertiser ID of the billing..</param>
        /// <param name="paymentMethodBrand">Brand of the payment method..</param>
        public BillingProfilesResponse(string id = default(string), CardTypeEnum? cardType = default(CardTypeEnum?), StatusEnum? status = default(StatusEnum?), string advertiserId = default(string), PaymentMethodBrandEnum? paymentMethodBrand = default(PaymentMethodBrandEnum?))
        {
            this.Id = id;
            this.CardType = cardType;
            this.Status = status;
            this.AdvertiserId = advertiserId;
            this.PaymentMethodBrand = paymentMethodBrand;
        }

        /// <summary>
        /// Billing ID.
        /// </summary>
        /// <value>Billing ID.</value>
        /*
        <example>12312451231</example>
        */
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Advertiser ID of the billing.
        /// </summary>
        /// <value>Advertiser ID of the billing.</value>
        /*
        <example>12312451231</example>
        */
        [DataMember(Name = "advertiser_id", EmitDefaultValue = false)]
        public string AdvertiserId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BillingProfilesResponse {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CardType: ").Append(CardType).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  AdvertiserId: ").Append(AdvertiserId).Append("\n");
            sb.Append("  PaymentMethodBrand: ").Append(PaymentMethodBrand).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.Id != null) {
                // Id (string) pattern
                Regex regexId = new Regex(@"^\d+$", RegexOptions.CultureInvariant);
                if (!regexId.Match(this.Id).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Id, must match a pattern of " + regexId, new [] { "Id" });
                }
            }

            if (this.AdvertiserId != null) {
                // AdvertiserId (string) pattern
                Regex regexAdvertiserId = new Regex(@"^\d+$", RegexOptions.CultureInvariant);
                if (!regexAdvertiserId.Match(this.AdvertiserId).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AdvertiserId, must match a pattern of " + regexAdvertiserId, new [] { "AdvertiserId" });
                }
            }

            yield break;
        }
    }

}
