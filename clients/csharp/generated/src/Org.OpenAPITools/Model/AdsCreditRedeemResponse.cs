/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// AdsCreditRedeemResponse
    /// </summary>
    [DataContract(Name = "AdsCreditRedeemResponse")]
    public partial class AdsCreditRedeemResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AdsCreditRedeemResponse" /> class.
        /// </summary>
        /// <param name="success">Returns true if the offer code was successfully applied(validateOnly&#x3D;false) or can be applied(validateOnly&#x3D;true)..</param>
        /// <param name="errorCode">Error code type if error occurs.</param>
        /// <param name="errorMessage">Reason for failure.</param>
        public AdsCreditRedeemResponse(bool success = default(bool), int? errorCode = default(int?), string errorMessage = default(string))
        {
            this.Success = success;
            this.ErrorCode = errorCode;
            this.ErrorMessage = errorMessage;
        }

        /// <summary>
        /// Returns true if the offer code was successfully applied(validateOnly&#x3D;false) or can be applied(validateOnly&#x3D;true).
        /// </summary>
        /// <value>Returns true if the offer code was successfully applied(validateOnly&#x3D;false) or can be applied(validateOnly&#x3D;true).</value>
        /*
        <example>false</example>
        */
        [DataMember(Name = "success", EmitDefaultValue = true)]
        public bool Success { get; set; }

        /// <summary>
        /// Error code type if error occurs
        /// </summary>
        /// <value>Error code type if error occurs</value>
        /*
        <example>2708</example>
        */
        [DataMember(Name = "errorCode", EmitDefaultValue = true)]
        public int? ErrorCode { get; set; }

        /// <summary>
        /// Reason for failure
        /// </summary>
        /// <value>Reason for failure</value>
        /*
        <example>The offer has already been redeemed by this advertiser</example>
        */
        [DataMember(Name = "errorMessage", EmitDefaultValue = true)]
        public string ErrorMessage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AdsCreditRedeemResponse {\n");
            sb.Append("  Success: ").Append(Success).Append("\n");
            sb.Append("  ErrorCode: ").Append(ErrorCode).Append("\n");
            sb.Append("  ErrorMessage: ").Append(ErrorMessage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
