/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// IntegrationLogsInvalidLogResponseRejectedLogsInner
    /// </summary>
    [DataContract(Name = "IntegrationLogsInvalidLogResponse_rejected_logs_inner")]
    public partial class IntegrationLogsInvalidLogResponseRejectedLogsInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IntegrationLogsInvalidLogResponseRejectedLogsInner" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected IntegrationLogsInvalidLogResponseRejectedLogsInner() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="IntegrationLogsInvalidLogResponseRejectedLogsInner" /> class.
        /// </summary>
        /// <param name="logIndex">Index of the log in the batch..</param>
        /// <param name="field">The field name containing an invalid value. (required).</param>
        /// <param name="value">The value that is invalid. (required).</param>
        /// <param name="reason">The reason the value is invalid. (required).</param>
        public IntegrationLogsInvalidLogResponseRejectedLogsInner(int logIndex = default(int), string field = default(string), string value = default(string), string reason = default(string))
        {
            // to ensure "field" is required (not null)
            if (field == null)
            {
                throw new ArgumentNullException("field is a required property for IntegrationLogsInvalidLogResponseRejectedLogsInner and cannot be null");
            }
            this.Field = field;
            // to ensure "value" is required (not null)
            if (value == null)
            {
                throw new ArgumentNullException("value is a required property for IntegrationLogsInvalidLogResponseRejectedLogsInner and cannot be null");
            }
            this.Value = value;
            // to ensure "reason" is required (not null)
            if (reason == null)
            {
                throw new ArgumentNullException("reason is a required property for IntegrationLogsInvalidLogResponseRejectedLogsInner and cannot be null");
            }
            this.Reason = reason;
            this.LogIndex = logIndex;
        }

        /// <summary>
        /// Index of the log in the batch.
        /// </summary>
        /// <value>Index of the log in the batch.</value>
        [DataMember(Name = "log_index", EmitDefaultValue = false)]
        public int LogIndex { get; set; }

        /// <summary>
        /// The field name containing an invalid value.
        /// </summary>
        /// <value>The field name containing an invalid value.</value>
        [DataMember(Name = "field", IsRequired = true, EmitDefaultValue = true)]
        public string Field { get; set; }

        /// <summary>
        /// The value that is invalid.
        /// </summary>
        /// <value>The value that is invalid.</value>
        [DataMember(Name = "value", IsRequired = true, EmitDefaultValue = true)]
        public string Value { get; set; }

        /// <summary>
        /// The reason the value is invalid.
        /// </summary>
        /// <value>The reason the value is invalid.</value>
        [DataMember(Name = "reason", IsRequired = true, EmitDefaultValue = true)]
        public string Reason { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IntegrationLogsInvalidLogResponseRejectedLogsInner {\n");
            sb.Append("  LogIndex: ").Append(LogIndex).Append("\n");
            sb.Append("  Field: ").Append(Field).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
