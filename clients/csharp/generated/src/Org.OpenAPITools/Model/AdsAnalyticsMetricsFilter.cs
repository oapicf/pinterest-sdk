/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// AdsAnalyticsMetricsFilter
    /// </summary>
    [DataContract(Name = "AdsAnalyticsMetricsFilter")]
    public partial class AdsAnalyticsMetricsFilter : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Field
        /// </summary>
        [DataMember(Name = "field", IsRequired = true, EmitDefaultValue = true)]
        public AdsAnalyticsFilterColumn Field { get; set; }

        /// <summary>
        /// Gets or Sets Operator
        /// </summary>
        [DataMember(Name = "operator", IsRequired = true, EmitDefaultValue = true)]
        public AdsAnalyticsFilterOperator Operator { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AdsAnalyticsMetricsFilter" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AdsAnalyticsMetricsFilter() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AdsAnalyticsMetricsFilter" /> class.
        /// </summary>
        /// <param name="field">field (required).</param>
        /// <param name="varOperator">varOperator (required).</param>
        /// <param name="values">List of values for filtering (required).</param>
        public AdsAnalyticsMetricsFilter(AdsAnalyticsFilterColumn field = default(AdsAnalyticsFilterColumn), AdsAnalyticsFilterOperator varOperator = default(AdsAnalyticsFilterOperator), List<decimal> values = default(List<decimal>))
        {
            this.Field = field;
            this.Operator = varOperator;
            // to ensure "values" is required (not null)
            if (values == null)
            {
                throw new ArgumentNullException("values is a required property for AdsAnalyticsMetricsFilter and cannot be null");
            }
            this.Values = values;
        }

        /// <summary>
        /// List of values for filtering
        /// </summary>
        /// <value>List of values for filtering</value>
        [DataMember(Name = "values", IsRequired = true, EmitDefaultValue = true)]
        public List<decimal> Values { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AdsAnalyticsMetricsFilter {\n");
            sb.Append("  Field: ").Append(Field).Append("\n");
            sb.Append("  Operator: ").Append(Operator).Append("\n");
            sb.Append("  Values: ").Append(Values).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
