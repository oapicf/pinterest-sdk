/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Metadata of the member/partner that has access to the asset.
    /// </summary>
    [DataContract(Name = "BusinessAccessUserSummary")]
    public partial class BusinessAccessUserSummary : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BusinessAccessUserSummary" /> class.
        /// </summary>
        /// <param name="email">Email of the business member/partner..</param>
        /// <param name="id">Unique identifier of the business member/partner..</param>
        /// <param name="username">Username of the business member/partner..</param>
        public BusinessAccessUserSummary(string email = default(string), string id = default(string), string username = default(string))
        {
            this.Email = email;
            this.Id = id;
            this.Username = username;
        }

        /// <summary>
        /// Email of the business member/partner.
        /// </summary>
        /// <value>Email of the business member/partner.</value>
        /*
        <example>business0101@business.com</example>
        */
        [DataMember(Name = "email", EmitDefaultValue = true)]
        public string Email { get; set; }

        /// <summary>
        /// Unique identifier of the business member/partner.
        /// </summary>
        /// <value>Unique identifier of the business member/partner.</value>
        /*
        <example>383791336903426391</example>
        */
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Username of the business member/partner.
        /// </summary>
        /// <value>Username of the business member/partner.</value>
        /*
        <example>business0101</example>
        */
        [DataMember(Name = "username", EmitDefaultValue = true)]
        public string Username { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BusinessAccessUserSummary {\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Id (string) maxLength
            if (this.Id != null && this.Id.Length > 20)
            {
                yield return new ValidationResult("Invalid value for Id, length must be less than 20.", new [] { "Id" });
            }

            // Id (string) minLength
            if (this.Id != null && this.Id.Length < 1)
            {
                yield return new ValidationResult("Invalid value for Id, length must be greater than 1.", new [] { "Id" });
            }

            yield break;
        }
    }

}
