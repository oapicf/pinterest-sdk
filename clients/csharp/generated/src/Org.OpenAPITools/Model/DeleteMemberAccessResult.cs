/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// The terminated asset access.
    /// </summary>
    [DataContract(Name = "DeleteMemberAccessResult")]
    public partial class DeleteMemberAccessResult : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DeleteMemberAccessResult" /> class.
        /// </summary>
        /// <param name="assetId">Unique identifier of the business asset..</param>
        /// <param name="memberId">Unique identifier of the business member..</param>
        public DeleteMemberAccessResult(string assetId = default(string), string memberId = default(string))
        {
            this.AssetId = assetId;
            this.MemberId = memberId;
        }

        /// <summary>
        /// Unique identifier of the business asset.
        /// </summary>
        /// <value>Unique identifier of the business asset.</value>
        /*
        <example>549755885175</example>
        */
        [DataMember(Name = "asset_id", EmitDefaultValue = false)]
        public string AssetId { get; set; }

        /// <summary>
        /// Unique identifier of the business member.
        /// </summary>
        /// <value>Unique identifier of the business member.</value>
        /*
        <example>140943737684417</example>
        */
        [DataMember(Name = "member_id", EmitDefaultValue = false)]
        public string MemberId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DeleteMemberAccessResult {\n");
            sb.Append("  AssetId: ").Append(AssetId).Append("\n");
            sb.Append("  MemberId: ").Append(MemberId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.AssetId != null) {
                // AssetId (string) pattern
                Regex regexAssetId = new Regex(@"^\d+$", RegexOptions.CultureInvariant);
                if (!regexAssetId.Match(this.AssetId).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AssetId, must match a pattern of " + regexAssetId, new [] { "AssetId" });
                }
            }

            if (this.MemberId != null) {
                // MemberId (string) pattern
                Regex regexMemberId = new Regex(@"^\d+$", RegexOptions.CultureInvariant);
                if (!regexMemberId.Match(this.MemberId).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MemberId, must match a pattern of " + regexMemberId, new [] { "MemberId" });
                }
            }

            yield break;
        }
    }

}
