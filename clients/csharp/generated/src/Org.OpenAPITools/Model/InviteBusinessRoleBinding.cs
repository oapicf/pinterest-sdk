/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// An invite object if the invite/request was successfully updated. Will only be provided if the an invite/request is successfully updated.
    /// </summary>
    [DataContract(Name = "InviteBusinessRoleBinding")]
    public partial class InviteBusinessRoleBinding : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InviteBusinessRoleBinding" /> class.
        /// </summary>
        /// <param name="createdByBusinessId">Unique identifier for the business that created the invite/request..</param>
        /// <param name="createdByUserId">Unique identifier for the user that created the invite/request..</param>
        /// <param name="user">Metadata for the user that updated the invite/request..</param>
        /// <param name="id">Unique identifier of the invite/request..</param>
        /// <param name="inviteData">inviteData.</param>
        /// <param name="isReceivedInvite">Indicates whether the invite/request was received..</param>
        public InviteBusinessRoleBinding(string createdByBusinessId = default(string), string createdByUserId = default(string), BusinessAccessUserSummary user = default(BusinessAccessUserSummary), string id = default(string), BaseInviteDataResponseInviteData inviteData = default(BaseInviteDataResponseInviteData), bool isReceivedInvite = default(bool))
        {
            this.CreatedByBusinessId = createdByBusinessId;
            this.CreatedByUserId = createdByUserId;
            this.User = user;
            this.Id = id;
            this.InviteData = inviteData;
            this.IsReceivedInvite = isReceivedInvite;
        }

        /// <summary>
        /// Unique identifier for the business that created the invite/request.
        /// </summary>
        /// <value>Unique identifier for the business that created the invite/request.</value>
        /*
        <example>1234567890123</example>
        */
        [DataMember(Name = "created_by_business_id", EmitDefaultValue = false)]
        public string CreatedByBusinessId { get; set; }

        /// <summary>
        /// Unique identifier for the user that created the invite/request.
        /// </summary>
        /// <value>Unique identifier for the user that created the invite/request.</value>
        /*
        <example>1234567890123</example>
        */
        [DataMember(Name = "created_by_user_id", EmitDefaultValue = false)]
        public string CreatedByUserId { get; set; }

        /// <summary>
        /// Metadata for the user that updated the invite/request.
        /// </summary>
        /// <value>Metadata for the user that updated the invite/request.</value>
        [DataMember(Name = "user", EmitDefaultValue = false)]
        public BusinessAccessUserSummary User { get; set; }

        /// <summary>
        /// Unique identifier of the invite/request.
        /// </summary>
        /// <value>Unique identifier of the invite/request.</value>
        /*
        <example>383791336903426391</example>
        */
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets InviteData
        /// </summary>
        [DataMember(Name = "invite_data", EmitDefaultValue = false)]
        public BaseInviteDataResponseInviteData InviteData { get; set; }

        /// <summary>
        /// Indicates whether the invite/request was received.
        /// </summary>
        /// <value>Indicates whether the invite/request was received.</value>
        [DataMember(Name = "is_received_invite", EmitDefaultValue = true)]
        public bool IsReceivedInvite { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InviteBusinessRoleBinding {\n");
            sb.Append("  CreatedByBusinessId: ").Append(CreatedByBusinessId).Append("\n");
            sb.Append("  CreatedByUserId: ").Append(CreatedByUserId).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  InviteData: ").Append(InviteData).Append("\n");
            sb.Append("  IsReceivedInvite: ").Append(IsReceivedInvite).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.Id != null) {
                // Id (string) pattern
                Regex regexId = new Regex(@"^\d+$", RegexOptions.CultureInvariant);
                if (!regexId.Match(this.Id).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Id, must match a pattern of " + regexId, new [] { "Id" });
                }
            }

            yield break;
        }
    }

}
