/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Object describing a retail item record
    /// </summary>
    [DataContract(Name = "CatalogsRetailItemResponse")]
    public partial class CatalogsRetailItemResponse : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets CatalogType
        /// </summary>
        [DataMember(Name = "catalog_type", IsRequired = true, EmitDefaultValue = true)]
        public CatalogsType CatalogType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CatalogsRetailItemResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CatalogsRetailItemResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CatalogsRetailItemResponse" /> class.
        /// </summary>
        /// <param name="catalogType">catalogType (required).</param>
        /// <param name="itemId">The catalog retail item id in the merchant namespace.</param>
        /// <param name="pins">The pins mapped to the item.</param>
        /// <param name="attributes">attributes.</param>
        public CatalogsRetailItemResponse(CatalogsType catalogType = default(CatalogsType), string itemId = default(string), List<Pin> pins = default(List<Pin>), ItemAttributes attributes = default(ItemAttributes))
        {
            this.CatalogType = catalogType;
            this.ItemId = itemId;
            this.Pins = pins;
            this.Attributes = attributes;
        }

        /// <summary>
        /// The catalog retail item id in the merchant namespace
        /// </summary>
        /// <value>The catalog retail item id in the merchant namespace</value>
        /*
        <example>DS0294-M</example>
        */
        [DataMember(Name = "item_id", EmitDefaultValue = false)]
        public string ItemId { get; set; }

        /// <summary>
        /// The pins mapped to the item
        /// </summary>
        /// <value>The pins mapped to the item</value>
        [DataMember(Name = "pins", EmitDefaultValue = true)]
        public List<Pin> Pins { get; set; }

        /// <summary>
        /// Gets or Sets Attributes
        /// </summary>
        [DataMember(Name = "attributes", EmitDefaultValue = false)]
        public ItemAttributes Attributes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CatalogsRetailItemResponse {\n");
            sb.Append("  CatalogType: ").Append(CatalogType).Append("\n");
            sb.Append("  ItemId: ").Append(ItemId).Append("\n");
            sb.Append("  Pins: ").Append(Pins).Append("\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
