/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// AdAccountCreateSubscriptionRequest
    /// </summary>
    [DataContract(Name = "AdAccountCreateSubscriptionRequest")]
    public partial class AdAccountCreateSubscriptionRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AdAccountCreateSubscriptionRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AdAccountCreateSubscriptionRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AdAccountCreateSubscriptionRequest" /> class.
        /// </summary>
        /// <param name="webhookUrl">Standard HTTPS webhook URL. (required).</param>
        /// <param name="leadFormId">Lead form ID..</param>
        /// <param name="partnerAccessToken">Partner access token. Only for clients that requires authentication. We recommend to avoid this param..</param>
        /// <param name="partnerRefreshToken">Partner refresh token. Only for clients that requires authentication. We recommend to avoid this param..</param>
        /// <param name="partnerMetadata">partnerMetadata.</param>
        public AdAccountCreateSubscriptionRequest(string webhookUrl = default(string), string leadFormId = default(string), string partnerAccessToken = default(string), string partnerRefreshToken = default(string), AdAccountCreateSubscriptionRequestPartnerMetadata partnerMetadata = default(AdAccountCreateSubscriptionRequestPartnerMetadata))
        {
            // to ensure "webhookUrl" is required (not null)
            if (webhookUrl == null)
            {
                throw new ArgumentNullException("webhookUrl is a required property for AdAccountCreateSubscriptionRequest and cannot be null");
            }
            this.WebhookUrl = webhookUrl;
            this.LeadFormId = leadFormId;
            this.PartnerAccessToken = partnerAccessToken;
            this.PartnerRefreshToken = partnerRefreshToken;
            this.PartnerMetadata = partnerMetadata;
        }

        /// <summary>
        /// Standard HTTPS webhook URL.
        /// </summary>
        /// <value>Standard HTTPS webhook URL.</value>
        /*
        <example>https://webhook.example.com/xyz</example>
        */
        [DataMember(Name = "webhook_url", IsRequired = true, EmitDefaultValue = true)]
        public string WebhookUrl { get; set; }

        /// <summary>
        /// Lead form ID.
        /// </summary>
        /// <value>Lead form ID.</value>
        /*
        <example>383791336903426390</example>
        */
        [DataMember(Name = "lead_form_id", EmitDefaultValue = false)]
        public string LeadFormId { get; set; }

        /// <summary>
        /// Partner access token. Only for clients that requires authentication. We recommend to avoid this param.
        /// </summary>
        /// <value>Partner access token. Only for clients that requires authentication. We recommend to avoid this param.</value>
        [DataMember(Name = "partner_access_token", EmitDefaultValue = false)]
        public string PartnerAccessToken { get; set; }

        /// <summary>
        /// Partner refresh token. Only for clients that requires authentication. We recommend to avoid this param.
        /// </summary>
        /// <value>Partner refresh token. Only for clients that requires authentication. We recommend to avoid this param.</value>
        [DataMember(Name = "partner_refresh_token", EmitDefaultValue = false)]
        public string PartnerRefreshToken { get; set; }

        /// <summary>
        /// Gets or Sets PartnerMetadata
        /// </summary>
        [DataMember(Name = "partner_metadata", EmitDefaultValue = false)]
        public AdAccountCreateSubscriptionRequestPartnerMetadata PartnerMetadata { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AdAccountCreateSubscriptionRequest {\n");
            sb.Append("  WebhookUrl: ").Append(WebhookUrl).Append("\n");
            sb.Append("  LeadFormId: ").Append(LeadFormId).Append("\n");
            sb.Append("  PartnerAccessToken: ").Append(PartnerAccessToken).Append("\n");
            sb.Append("  PartnerRefreshToken: ").Append(PartnerRefreshToken).Append("\n");
            sb.Append("  PartnerMetadata: ").Append(PartnerMetadata).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.LeadFormId != null) {
                // LeadFormId (string) pattern
                Regex regexLeadFormId = new Regex(@"^\d+$", RegexOptions.CultureInvariant);
                if (!regexLeadFormId.Match(this.LeadFormId).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LeadFormId, must match a pattern of " + regexLeadFormId, new [] { "LeadFormId" });
                }
            }

            yield break;
        }
    }

}
