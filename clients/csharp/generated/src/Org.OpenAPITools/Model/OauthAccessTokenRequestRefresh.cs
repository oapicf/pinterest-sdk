/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// A request to exchange a refresh token for a new access token.
    /// </summary>
    [DataContract(Name = "OauthAccessTokenRequestRefresh")]
    public partial class OauthAccessTokenRequestRefresh : IValidatableObject
    {
        /// <summary>
        /// Defines GrantType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum GrantTypeEnum
        {
            /// <summary>
            /// Enum AuthorizationCode for value: authorization_code
            /// </summary>
            [EnumMember(Value = "authorization_code")]
            AuthorizationCode = 1,

            /// <summary>
            /// Enum RefreshToken for value: refresh_token
            /// </summary>
            [EnumMember(Value = "refresh_token")]
            RefreshToken = 2,

            /// <summary>
            /// Enum ClientCredentials for value: client_credentials
            /// </summary>
            [EnumMember(Value = "client_credentials")]
            ClientCredentials = 3
        }


        /// <summary>
        /// Gets or Sets GrantType
        /// </summary>
        [DataMember(Name = "grant_type", IsRequired = true, EmitDefaultValue = true)]
        public GrantTypeEnum GrantType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OauthAccessTokenRequestRefresh" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OauthAccessTokenRequestRefresh() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OauthAccessTokenRequestRefresh" /> class.
        /// </summary>
        /// <param name="grantType">grantType (required).</param>
        /// <param name="refreshToken">refreshToken (required).</param>
        /// <param name="scope">scope.</param>
        /// <param name="refreshOn">Setting this field to &lt;code&gt;true&lt;/code&gt; will add a new refresh token to your 200 response, as well as the refresh_token_expires_in and refresh_token_expires_at fields. To see the structure of this payload, set the 200 response_type to \&quot;everlasting_refresh\&quot;..</param>
        public OauthAccessTokenRequestRefresh(GrantTypeEnum grantType = default(GrantTypeEnum), string refreshToken = default(string), string scope = default(string), bool refreshOn = default(bool))
        {
            this.GrantType = grantType;
            // to ensure "refreshToken" is required (not null)
            if (refreshToken == null)
            {
                throw new ArgumentNullException("refreshToken is a required property for OauthAccessTokenRequestRefresh and cannot be null");
            }
            this.RefreshToken = refreshToken;
            this.Scope = scope;
            this.RefreshOn = refreshOn;
        }

        /// <summary>
        /// Gets or Sets RefreshToken
        /// </summary>
        [DataMember(Name = "refresh_token", IsRequired = true, EmitDefaultValue = true)]
        public string RefreshToken { get; set; }

        /// <summary>
        /// Gets or Sets Scope
        /// </summary>
        [DataMember(Name = "scope", EmitDefaultValue = false)]
        public string Scope { get; set; }

        /// <summary>
        /// Setting this field to &lt;code&gt;true&lt;/code&gt; will add a new refresh token to your 200 response, as well as the refresh_token_expires_in and refresh_token_expires_at fields. To see the structure of this payload, set the 200 response_type to \&quot;everlasting_refresh\&quot;.
        /// </summary>
        /// <value>Setting this field to &lt;code&gt;true&lt;/code&gt; will add a new refresh token to your 200 response, as well as the refresh_token_expires_in and refresh_token_expires_at fields. To see the structure of this payload, set the 200 response_type to \&quot;everlasting_refresh\&quot;.</value>
        [DataMember(Name = "refresh_on", EmitDefaultValue = true)]
        public bool RefreshOn { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OauthAccessTokenRequestRefresh {\n");
            sb.Append("  GrantType: ").Append(GrantType).Append("\n");
            sb.Append("  RefreshToken: ").Append(RefreshToken).Append("\n");
            sb.Append("  Scope: ").Append(Scope).Append("\n");
            sb.Append("  RefreshOn: ").Append(RefreshOn).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
