/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// AdsCreditDiscountsResponse
    /// </summary>
    [DataContract(Name = "AdsCreditDiscountsResponse")]
    public partial class AdsCreditDiscountsResponse : IValidatableObject
    {
        /// <summary>
        /// The type of discount of this credit
        /// </summary>
        /// <value>The type of discount of this credit</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DiscountTypeEnum
        {
            /// <summary>
            /// Enum COUPON for value: COUPON
            /// </summary>
            [EnumMember(Value = "COUPON")]
            COUPON = 1,

            /// <summary>
            /// Enum CREDIT for value: CREDIT
            /// </summary>
            [EnumMember(Value = "CREDIT")]
            CREDIT = 2,

            /// <summary>
            /// Enum COUPONAPPLIED for value: COUPON_APPLIED
            /// </summary>
            [EnumMember(Value = "COUPON_APPLIED")]
            COUPONAPPLIED = 3,

            /// <summary>
            /// Enum CREDITAPPLIED for value: CREDIT_APPLIED
            /// </summary>
            [EnumMember(Value = "CREDIT_APPLIED")]
            CREDITAPPLIED = 4,

            /// <summary>
            /// Enum MARKETINGOFFERCREDIT for value: MARKETING_OFFER_CREDIT
            /// </summary>
            [EnumMember(Value = "MARKETING_OFFER_CREDIT")]
            MARKETINGOFFERCREDIT = 5,

            /// <summary>
            /// Enum MARKETINGOFFERCREDITAPPLIED for value: MARKETING_OFFER_CREDIT_APPLIED
            /// </summary>
            [EnumMember(Value = "MARKETING_OFFER_CREDIT_APPLIED")]
            MARKETINGOFFERCREDITAPPLIED = 6,

            /// <summary>
            /// Enum GOODWILLCREDIT for value: GOODWILL_CREDIT
            /// </summary>
            [EnumMember(Value = "GOODWILL_CREDIT")]
            GOODWILLCREDIT = 7,

            /// <summary>
            /// Enum GOODWILLCREDITAPPLIED for value: GOODWILL_CREDIT_APPLIED
            /// </summary>
            [EnumMember(Value = "GOODWILL_CREDIT_APPLIED")]
            GOODWILLCREDITAPPLIED = 8,

            /// <summary>
            /// Enum INTERNALCREDIT for value: INTERNAL_CREDIT
            /// </summary>
            [EnumMember(Value = "INTERNAL_CREDIT")]
            INTERNALCREDIT = 9,

            /// <summary>
            /// Enum INTERNALCREDITAPPLIED for value: INTERNAL_CREDIT_APPLIED
            /// </summary>
            [EnumMember(Value = "INTERNAL_CREDIT_APPLIED")]
            INTERNALCREDITAPPLIED = 10,

            /// <summary>
            /// Enum PREPAIDCREDIT for value: PREPAID_CREDIT
            /// </summary>
            [EnumMember(Value = "PREPAID_CREDIT")]
            PREPAIDCREDIT = 11,

            /// <summary>
            /// Enum PREPAIDCREDITAPPLIED for value: PREPAID_CREDIT_APPLIED
            /// </summary>
            [EnumMember(Value = "PREPAID_CREDIT_APPLIED")]
            PREPAIDCREDITAPPLIED = 12,

            /// <summary>
            /// Enum SALESINCENTIVECREDIT for value: SALES_INCENTIVE_CREDIT
            /// </summary>
            [EnumMember(Value = "SALES_INCENTIVE_CREDIT")]
            SALESINCENTIVECREDIT = 13,

            /// <summary>
            /// Enum SALESINCENTIVECREDITAPPLIED for value: SALES_INCENTIVE_CREDIT_APPLIED
            /// </summary>
            [EnumMember(Value = "SALES_INCENTIVE_CREDIT_APPLIED")]
            SALESINCENTIVECREDITAPPLIED = 14,

            /// <summary>
            /// Enum CREDITEXPIRED for value: CREDIT_EXPIRED
            /// </summary>
            [EnumMember(Value = "CREDIT_EXPIRED")]
            CREDITEXPIRED = 15,

            /// <summary>
            /// Enum FUTURECREDIT for value: FUTURE_CREDIT
            /// </summary>
            [EnumMember(Value = "FUTURE_CREDIT")]
            FUTURECREDIT = 16,

            /// <summary>
            /// Enum REFERRALCREDIT for value: REFERRAL_CREDIT
            /// </summary>
            [EnumMember(Value = "REFERRAL_CREDIT")]
            REFERRALCREDIT = 17,

            /// <summary>
            /// Enum INVOICESALESINCENTIVECREDIT for value: INVOICE_SALES_INCENTIVE_CREDIT
            /// </summary>
            [EnumMember(Value = "INVOICE_SALES_INCENTIVE_CREDIT")]
            INVOICESALESINCENTIVECREDIT = 18,

            /// <summary>
            /// Enum INVOICESALESINCENTIVECREDITAPPLIED for value: INVOICE_SALES_INCENTIVE_CREDIT_APPLIED
            /// </summary>
            [EnumMember(Value = "INVOICE_SALES_INCENTIVE_CREDIT_APPLIED")]
            INVOICESALESINCENTIVECREDITAPPLIED = 19,

            /// <summary>
            /// Enum PREPAIDCREDITREFUND for value: PREPAID_CREDIT_REFUND
            /// </summary>
            [EnumMember(Value = "PREPAID_CREDIT_REFUND")]
            PREPAIDCREDITREFUND = 20
        }


        /// <summary>
        /// The type of discount of this credit
        /// </summary>
        /// <value>The type of discount of this credit</value>
        [DataMember(Name = "discountType", EmitDefaultValue = true)]
        public DiscountTypeEnum? DiscountType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AdsCreditDiscountsResponse" /> class.
        /// </summary>
        /// <param name="active">True if the offer code is currently active..</param>
        /// <param name="advertiserId">Advertiser ID the offer was applied to..</param>
        /// <param name="discountType">The type of discount of this credit.</param>
        /// <param name="discountInMicroCurrency">The discount applied in the offer’s currency value..</param>
        /// <param name="discountCurrency">Currency value for the discount..</param>
        /// <param name="title">Human readable title of the offer code..</param>
        /// <param name="remainingDiscountInMicroCurrency">The credits left to spend..</param>
        public AdsCreditDiscountsResponse(bool active = default(bool), string advertiserId = default(string), DiscountTypeEnum? discountType = default(DiscountTypeEnum?), decimal? discountInMicroCurrency = default(decimal?), string discountCurrency = default(string), string title = default(string), decimal? remainingDiscountInMicroCurrency = default(decimal?))
        {
            this.Active = active;
            this.AdvertiserId = advertiserId;
            this.DiscountType = discountType;
            this.DiscountInMicroCurrency = discountInMicroCurrency;
            this.DiscountCurrency = discountCurrency;
            this.Title = title;
            this.RemainingDiscountInMicroCurrency = remainingDiscountInMicroCurrency;
        }

        /// <summary>
        /// True if the offer code is currently active.
        /// </summary>
        /// <value>True if the offer code is currently active.</value>
        /*
        <example>true</example>
        */
        [DataMember(Name = "active", EmitDefaultValue = true)]
        public bool Active { get; set; }

        /// <summary>
        /// Advertiser ID the offer was applied to.
        /// </summary>
        /// <value>Advertiser ID the offer was applied to.</value>
        /*
        <example>12312451231</example>
        */
        [DataMember(Name = "advertiser_id", EmitDefaultValue = false)]
        public string AdvertiserId { get; set; }

        /// <summary>
        /// The discount applied in the offer’s currency value.
        /// </summary>
        /// <value>The discount applied in the offer’s currency value.</value>
        /*
        <example>125000000</example>
        */
        [DataMember(Name = "discountInMicroCurrency", EmitDefaultValue = true)]
        public decimal? DiscountInMicroCurrency { get; set; }

        /// <summary>
        /// Currency value for the discount.
        /// </summary>
        /// <value>Currency value for the discount.</value>
        /*
        <example>USD</example>
        */
        [DataMember(Name = "discountCurrency", EmitDefaultValue = true)]
        public string DiscountCurrency { get; set; }

        /// <summary>
        /// Human readable title of the offer code.
        /// </summary>
        /// <value>Human readable title of the offer code.</value>
        /*
        <example>Ads Credits</example>
        */
        [DataMember(Name = "title", EmitDefaultValue = true)]
        public string Title { get; set; }

        /// <summary>
        /// The credits left to spend.
        /// </summary>
        /// <value>The credits left to spend.</value>
        /*
        <example>125000000</example>
        */
        [DataMember(Name = "remainingDiscountInMicroCurrency", EmitDefaultValue = true)]
        public decimal? RemainingDiscountInMicroCurrency { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AdsCreditDiscountsResponse {\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  AdvertiserId: ").Append(AdvertiserId).Append("\n");
            sb.Append("  DiscountType: ").Append(DiscountType).Append("\n");
            sb.Append("  DiscountInMicroCurrency: ").Append(DiscountInMicroCurrency).Append("\n");
            sb.Append("  DiscountCurrency: ").Append(DiscountCurrency).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  RemainingDiscountInMicroCurrency: ").Append(RemainingDiscountInMicroCurrency).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.AdvertiserId != null) {
                // AdvertiserId (string) pattern
                Regex regexAdvertiserId = new Regex(@"^\d+$", RegexOptions.CultureInvariant);
                if (!regexAdvertiserId.Match(this.AdvertiserId).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AdvertiserId, must match a pattern of " + regexAdvertiserId, new [] { "AdvertiserId" });
                }
            }

            yield break;
        }
    }

}
