/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Audience interests and demographics.
    /// </summary>
    [DataContract(Name = "AudienceInsightsResponse")]
    public partial class AudienceInsightsResponse : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public AudienceInsightType? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AudienceInsightsResponse" /> class.
        /// </summary>
        /// <param name="categories">Category interest distribution.</param>
        /// <param name="demographics">demographics.</param>
        /// <param name="type">type.</param>
        /// <param name="date">Generation date.</param>
        /// <param name="size">Population count..</param>
        /// <param name="sizeIsUpperBound">Indicates whether the audience size has been rounded up to the next highest upper boundary..</param>
        public AudienceInsightsResponse(List<AudienceCategory> categories = default(List<AudienceCategory>), AudienceDemographics demographics = default(AudienceDemographics), AudienceInsightType? type = default(AudienceInsightType?), string date = default(string), int size = default(int), bool sizeIsUpperBound = default(bool))
        {
            this.Categories = categories;
            this.Demographics = demographics;
            this.Type = type;
            this.Date = date;
            this.Size = size;
            this.SizeIsUpperBound = sizeIsUpperBound;
        }

        /// <summary>
        /// Category interest distribution
        /// </summary>
        /// <value>Category interest distribution</value>
        [DataMember(Name = "categories", EmitDefaultValue = false)]
        public List<AudienceCategory> Categories { get; set; }

        /// <summary>
        /// Gets or Sets Demographics
        /// </summary>
        [DataMember(Name = "demographics", EmitDefaultValue = false)]
        public AudienceDemographics Demographics { get; set; }

        /// <summary>
        /// Generation date
        /// </summary>
        /// <value>Generation date</value>
        /*
        <example>2022-10-09</example>
        */
        [DataMember(Name = "date", EmitDefaultValue = true)]
        public string Date { get; set; }

        /// <summary>
        /// Population count.
        /// </summary>
        /// <value>Population count.</value>
        /*
        <example>10000</example>
        */
        [DataMember(Name = "size", EmitDefaultValue = false)]
        public int Size { get; set; }

        /// <summary>
        /// Indicates whether the audience size has been rounded up to the next highest upper boundary.
        /// </summary>
        /// <value>Indicates whether the audience size has been rounded up to the next highest upper boundary.</value>
        /*
        <example>true</example>
        */
        [DataMember(Name = "size_is_upper_bound", EmitDefaultValue = true)]
        public bool SizeIsUpperBound { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AudienceInsightsResponse {\n");
            sb.Append("  Categories: ").Append(Categories).Append("\n");
            sb.Append("  Demographics: ").Append(Demographics).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  SizeIsUpperBound: ").Append(SizeIsUpperBound).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.Date != null) {
                // Date (string) pattern
                Regex regexDate = new Regex(@"^\d{4}-\d{2}-\d{2}$", RegexOptions.CultureInvariant);
                if (!regexDate.Match(this.Date).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Date, must match a pattern of " + regexDate, new [] { "Date" });
                }
            }

            yield break;
        }
    }

}
