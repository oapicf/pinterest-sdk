/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// HTTP request details included in the log sent by the client.
    /// </summary>
    [DataContract(Name = "IntegrationLogClientRequest")]
    public partial class IntegrationLogClientRequest : IValidatableObject
    {
        /// <summary>
        /// Defines Method
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MethodEnum
        {
            /// <summary>
            /// Enum GET for value: GET
            /// </summary>
            [EnumMember(Value = "GET")]
            GET = 1,

            /// <summary>
            /// Enum HEAD for value: HEAD
            /// </summary>
            [EnumMember(Value = "HEAD")]
            HEAD = 2,

            /// <summary>
            /// Enum POST for value: POST
            /// </summary>
            [EnumMember(Value = "POST")]
            POST = 3,

            /// <summary>
            /// Enum PUT for value: PUT
            /// </summary>
            [EnumMember(Value = "PUT")]
            PUT = 4,

            /// <summary>
            /// Enum DELETE for value: DELETE
            /// </summary>
            [EnumMember(Value = "DELETE")]
            DELETE = 5,

            /// <summary>
            /// Enum CONNECT for value: CONNECT
            /// </summary>
            [EnumMember(Value = "CONNECT")]
            CONNECT = 6,

            /// <summary>
            /// Enum OPTIONS for value: OPTIONS
            /// </summary>
            [EnumMember(Value = "OPTIONS")]
            OPTIONS = 7,

            /// <summary>
            /// Enum TRACE for value: TRACE
            /// </summary>
            [EnumMember(Value = "TRACE")]
            TRACE = 8,

            /// <summary>
            /// Enum PATCH for value: PATCH
            /// </summary>
            [EnumMember(Value = "PATCH")]
            PATCH = 9
        }


        /// <summary>
        /// Gets or Sets Method
        /// </summary>
        [DataMember(Name = "method", IsRequired = true, EmitDefaultValue = true)]
        public MethodEnum Method { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="IntegrationLogClientRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected IntegrationLogClientRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="IntegrationLogClientRequest" /> class.
        /// </summary>
        /// <param name="method">method (required).</param>
        /// <param name="host">HTTP request host from host header. (required).</param>
        /// <param name="path">HTTP request path. (required).</param>
        /// <param name="requestHeaders">HTTP request headers as key-value pairs..</param>
        /// <param name="responseHeaders">HTTP response headers as key-value pairs..</param>
        /// <param name="responseStatusCode">responseStatusCode.</param>
        public IntegrationLogClientRequest(MethodEnum method = default(MethodEnum), string host = default(string), string path = default(string), Dictionary<string, string> requestHeaders = default(Dictionary<string, string>), Dictionary<string, string> responseHeaders = default(Dictionary<string, string>), int responseStatusCode = default(int))
        {
            this.Method = method;
            // to ensure "host" is required (not null)
            if (host == null)
            {
                throw new ArgumentNullException("host is a required property for IntegrationLogClientRequest and cannot be null");
            }
            this.Host = host;
            // to ensure "path" is required (not null)
            if (path == null)
            {
                throw new ArgumentNullException("path is a required property for IntegrationLogClientRequest and cannot be null");
            }
            this.Path = path;
            this.RequestHeaders = requestHeaders;
            this.ResponseHeaders = responseHeaders;
            this.ResponseStatusCode = responseStatusCode;
        }

        /// <summary>
        /// HTTP request host from host header.
        /// </summary>
        /// <value>HTTP request host from host header.</value>
        [DataMember(Name = "host", IsRequired = true, EmitDefaultValue = true)]
        public string Host { get; set; }

        /// <summary>
        /// HTTP request path.
        /// </summary>
        /// <value>HTTP request path.</value>
        [DataMember(Name = "path", IsRequired = true, EmitDefaultValue = true)]
        public string Path { get; set; }

        /// <summary>
        /// HTTP request headers as key-value pairs.
        /// </summary>
        /// <value>HTTP request headers as key-value pairs.</value>
        [DataMember(Name = "request_headers", EmitDefaultValue = false)]
        public Dictionary<string, string> RequestHeaders { get; set; }

        /// <summary>
        /// HTTP response headers as key-value pairs.
        /// </summary>
        /// <value>HTTP response headers as key-value pairs.</value>
        [DataMember(Name = "response_headers", EmitDefaultValue = false)]
        public Dictionary<string, string> ResponseHeaders { get; set; }

        /// <summary>
        /// Gets or Sets ResponseStatusCode
        /// </summary>
        [DataMember(Name = "response_status_code", EmitDefaultValue = false)]
        public int ResponseStatusCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IntegrationLogClientRequest {\n");
            sb.Append("  Method: ").Append(Method).Append("\n");
            sb.Append("  Host: ").Append(Host).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  RequestHeaders: ").Append(RequestHeaders).Append("\n");
            sb.Append("  ResponseHeaders: ").Append(ResponseHeaders).Append("\n");
            sb.Append("  ResponseStatusCode: ").Append(ResponseStatusCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
