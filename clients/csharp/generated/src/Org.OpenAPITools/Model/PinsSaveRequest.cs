/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// PinsSaveRequest
    /// </summary>
    [DataContract(Name = "pins_save_request")]
    public partial class PinsSaveRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PinsSaveRequest" /> class.
        /// </summary>
        /// <param name="boardId">Unique identifier of the board to which the pin will be saved..</param>
        /// <param name="boardSectionId">Unique identifier of the board section to which the pin will be saved..</param>
        public PinsSaveRequest(string boardId = default(string), string boardSectionId = default(string))
        {
            this.BoardId = boardId;
            this.BoardSectionId = boardSectionId;
        }

        /// <summary>
        /// Unique identifier of the board to which the pin will be saved.
        /// </summary>
        /// <value>Unique identifier of the board to which the pin will be saved.</value>
        [DataMember(Name = "board_id", EmitDefaultValue = true)]
        public string BoardId { get; set; }

        /// <summary>
        /// Unique identifier of the board section to which the pin will be saved.
        /// </summary>
        /// <value>Unique identifier of the board section to which the pin will be saved.</value>
        [DataMember(Name = "board_section_id", EmitDefaultValue = true)]
        public string BoardSectionId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PinsSaveRequest {\n");
            sb.Append("  BoardId: ").Append(BoardId).Append("\n");
            sb.Append("  BoardSectionId: ").Append(BoardSectionId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.BoardId != null) {
                // BoardId (string) pattern
                Regex regexBoardId = new Regex(@"^\d+$", RegexOptions.CultureInvariant);
                if (!regexBoardId.Match(this.BoardId).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BoardId, must match a pattern of " + regexBoardId, new [] { "BoardId" });
                }
            }

            if (this.BoardSectionId != null) {
                // BoardSectionId (string) pattern
                Regex regexBoardSectionId = new Regex(@"^\d+$", RegexOptions.CultureInvariant);
                if (!regexBoardSectionId.Match(this.BoardSectionId).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BoardSectionId, must match a pattern of " + regexBoardSectionId, new [] { "BoardSectionId" });
                }
            }

            yield break;
        }
    }

}
