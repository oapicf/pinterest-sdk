/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Integration metadata
    /// </summary>
    [DataContract(Name = "IntegrationMetadata")]
    public partial class IntegrationMetadata : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IntegrationMetadata" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="externalBusinessId">externalBusinessId.</param>
        /// <param name="connectedMerchantId">connectedMerchantId.</param>
        /// <param name="connectedLbaId">connectedLbaId.</param>
        /// <param name="connectedTagId">connectedTagId.</param>
        /// <param name="partnerAccessTokenExpiry">partnerAccessTokenExpiry.</param>
        /// <param name="partnerRefreshTokenExpiry">partnerRefreshTokenExpiry.</param>
        /// <param name="scopes">scopes.</param>
        /// <param name="createdTimestamp">createdTimestamp.</param>
        /// <param name="updatedTimestamp">updatedTimestamp.</param>
        /// <param name="additionalId1">additionalId1.</param>
        /// <param name="partnerMetadata">partnerMetadata.</param>
        public IntegrationMetadata(string id = default(string), string externalBusinessId = default(string), string connectedMerchantId = default(string), string connectedLbaId = default(string), string connectedTagId = default(string), decimal partnerAccessTokenExpiry = default(decimal), decimal partnerRefreshTokenExpiry = default(decimal), string scopes = default(string), decimal createdTimestamp = default(decimal), decimal updatedTimestamp = default(decimal), string additionalId1 = default(string), string partnerMetadata = default(string))
        {
            this.Id = id;
            this.ExternalBusinessId = externalBusinessId;
            this.ConnectedMerchantId = connectedMerchantId;
            this.ConnectedLbaId = connectedLbaId;
            this.ConnectedTagId = connectedTagId;
            this.PartnerAccessTokenExpiry = partnerAccessTokenExpiry;
            this.PartnerRefreshTokenExpiry = partnerRefreshTokenExpiry;
            this.Scopes = scopes;
            this.CreatedTimestamp = createdTimestamp;
            this.UpdatedTimestamp = updatedTimestamp;
            this.AdditionalId1 = additionalId1;
            this.PartnerMetadata = partnerMetadata;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets ExternalBusinessId
        /// </summary>
        [DataMember(Name = "external_business_id", EmitDefaultValue = false)]
        public string ExternalBusinessId { get; set; }

        /// <summary>
        /// Gets or Sets ConnectedMerchantId
        /// </summary>
        [DataMember(Name = "connected_merchant_id", EmitDefaultValue = false)]
        public string ConnectedMerchantId { get; set; }

        /// <summary>
        /// Gets or Sets ConnectedUserId
        /// </summary>
        [DataMember(Name = "connected_user_id", EmitDefaultValue = false)]
        public string ConnectedUserId { get; private set; }

        /// <summary>
        /// Returns false as ConnectedUserId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeConnectedUserId()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets ConnectedAdvertiserId
        /// </summary>
        [DataMember(Name = "connected_advertiser_id", EmitDefaultValue = false)]
        public string ConnectedAdvertiserId { get; private set; }

        /// <summary>
        /// Returns false as ConnectedAdvertiserId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeConnectedAdvertiserId()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets ConnectedLbaId
        /// </summary>
        [DataMember(Name = "connected_lba_id", EmitDefaultValue = false)]
        public string ConnectedLbaId { get; set; }

        /// <summary>
        /// Gets or Sets ConnectedTagId
        /// </summary>
        [DataMember(Name = "connected_tag_id", EmitDefaultValue = false)]
        public string ConnectedTagId { get; set; }

        /// <summary>
        /// Gets or Sets PartnerAccessTokenExpiry
        /// </summary>
        [DataMember(Name = "partner_access_token_expiry", EmitDefaultValue = false)]
        public decimal PartnerAccessTokenExpiry { get; set; }

        /// <summary>
        /// Gets or Sets PartnerRefreshTokenExpiry
        /// </summary>
        [DataMember(Name = "partner_refresh_token_expiry", EmitDefaultValue = false)]
        public decimal PartnerRefreshTokenExpiry { get; set; }

        /// <summary>
        /// Gets or Sets Scopes
        /// </summary>
        [DataMember(Name = "scopes", EmitDefaultValue = false)]
        public string Scopes { get; set; }

        /// <summary>
        /// Gets or Sets CreatedTimestamp
        /// </summary>
        [DataMember(Name = "created_timestamp", EmitDefaultValue = false)]
        public decimal CreatedTimestamp { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedTimestamp
        /// </summary>
        [DataMember(Name = "updated_timestamp", EmitDefaultValue = false)]
        public decimal UpdatedTimestamp { get; set; }

        /// <summary>
        /// Gets or Sets AdditionalId1
        /// </summary>
        [DataMember(Name = "additional_id_1", EmitDefaultValue = false)]
        public string AdditionalId1 { get; set; }

        /// <summary>
        /// Gets or Sets PartnerMetadata
        /// </summary>
        [DataMember(Name = "partner_metadata", EmitDefaultValue = false)]
        public string PartnerMetadata { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IntegrationMetadata {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ExternalBusinessId: ").Append(ExternalBusinessId).Append("\n");
            sb.Append("  ConnectedMerchantId: ").Append(ConnectedMerchantId).Append("\n");
            sb.Append("  ConnectedUserId: ").Append(ConnectedUserId).Append("\n");
            sb.Append("  ConnectedAdvertiserId: ").Append(ConnectedAdvertiserId).Append("\n");
            sb.Append("  ConnectedLbaId: ").Append(ConnectedLbaId).Append("\n");
            sb.Append("  ConnectedTagId: ").Append(ConnectedTagId).Append("\n");
            sb.Append("  PartnerAccessTokenExpiry: ").Append(PartnerAccessTokenExpiry).Append("\n");
            sb.Append("  PartnerRefreshTokenExpiry: ").Append(PartnerRefreshTokenExpiry).Append("\n");
            sb.Append("  Scopes: ").Append(Scopes).Append("\n");
            sb.Append("  CreatedTimestamp: ").Append(CreatedTimestamp).Append("\n");
            sb.Append("  UpdatedTimestamp: ").Append(UpdatedTimestamp).Append("\n");
            sb.Append("  AdditionalId1: ").Append(AdditionalId1).Append("\n");
            sb.Append("  PartnerMetadata: ").Append(PartnerMetadata).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.Id != null) {
                // Id (string) pattern
                Regex regexId = new Regex(@"^\d+$", RegexOptions.CultureInvariant);
                if (!regexId.Match(this.Id).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Id, must match a pattern of " + regexId, new [] { "Id" });
                }
            }

            yield break;
        }
    }

}
