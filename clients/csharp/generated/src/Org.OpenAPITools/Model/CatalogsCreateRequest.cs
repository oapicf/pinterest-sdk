/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Request object for creating a catalog.
    /// </summary>
    [DataContract(Name = "CatalogsCreateRequest")]
    public partial class CatalogsCreateRequest : IValidatableObject
    {
        /// <summary>
        /// Type of the catalog entity.
        /// </summary>
        /// <value>Type of the catalog entity.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CatalogTypeEnum
        {
            /// <summary>
            /// Enum HOTEL for value: HOTEL
            /// </summary>
            [EnumMember(Value = "HOTEL")]
            HOTEL = 1
        }


        /// <summary>
        /// Type of the catalog entity.
        /// </summary>
        /// <value>Type of the catalog entity.</value>
        [DataMember(Name = "catalog_type", IsRequired = true, EmitDefaultValue = true)]
        public CatalogTypeEnum CatalogType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CatalogsCreateRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CatalogsCreateRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CatalogsCreateRequest" /> class.
        /// </summary>
        /// <param name="catalogType">Type of the catalog entity. (required).</param>
        /// <param name="name">A human-friendly name associated to a given catalog. (required).</param>
        public CatalogsCreateRequest(CatalogTypeEnum catalogType = default(CatalogTypeEnum), string name = default(string))
        {
            this.CatalogType = catalogType;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for CatalogsCreateRequest and cannot be null");
            }
            this.Name = name;
        }

        /// <summary>
        /// A human-friendly name associated to a given catalog.
        /// </summary>
        /// <value>A human-friendly name associated to a given catalog.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CatalogsCreateRequest {\n");
            sb.Append("  CatalogType: ").Append(CatalogType).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
