/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// TargetingTemplateCreate
    /// </summary>
    [DataContract(Name = "TargetingTemplateCreate")]
    public partial class TargetingTemplateCreate : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets PlacementGroup
        /// </summary>
        [DataMember(Name = "placement_group", EmitDefaultValue = false)]
        public PlacementGroupType? PlacementGroup { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TargetingTemplateCreate" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TargetingTemplateCreate() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TargetingTemplateCreate" /> class.
        /// </summary>
        /// <param name="name">Name of targeting template. (required).</param>
        /// <param name="autoTargetingEnabled">Enable auto-targeting for ad group. Also known as &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/expanded-targeting\&quot; target&#x3D;\&quot;_blank\&quot;&gt;\&quot;expanded targeting\&quot;&lt;/a&gt;. (default to true).</param>
        /// <param name="targetingAttributes">targetingAttributes (required).</param>
        /// <param name="placementGroup">placementGroup.</param>
        /// <param name="keywords">keywords.</param>
        /// <param name="trackingUrls">trackingUrls.</param>
        public TargetingTemplateCreate(string name = default(string), bool autoTargetingEnabled = true, TargetingSpec targetingAttributes = default(TargetingSpec), PlacementGroupType? placementGroup = default(PlacementGroupType?), List<TargetingTemplateKeyword> keywords = default(List<TargetingTemplateKeyword>), TrackingUrls trackingUrls = default(TrackingUrls))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for TargetingTemplateCreate and cannot be null");
            }
            this.Name = name;
            // to ensure "targetingAttributes" is required (not null)
            if (targetingAttributes == null)
            {
                throw new ArgumentNullException("targetingAttributes is a required property for TargetingTemplateCreate and cannot be null");
            }
            this.TargetingAttributes = targetingAttributes;
            this.AutoTargetingEnabled = autoTargetingEnabled;
            this.PlacementGroup = placementGroup;
            this.Keywords = keywords;
            this.TrackingUrls = trackingUrls;
        }

        /// <summary>
        /// Name of targeting template.
        /// </summary>
        /// <value>Name of targeting template.</value>
        /*
        <example>Gaming</example>
        */
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Enable auto-targeting for ad group. Also known as &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/expanded-targeting\&quot; target&#x3D;\&quot;_blank\&quot;&gt;\&quot;expanded targeting\&quot;&lt;/a&gt;.
        /// </summary>
        /// <value>Enable auto-targeting for ad group. Also known as &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/expanded-targeting\&quot; target&#x3D;\&quot;_blank\&quot;&gt;\&quot;expanded targeting\&quot;&lt;/a&gt;.</value>
        [DataMember(Name = "auto_targeting_enabled", EmitDefaultValue = true)]
        public bool AutoTargetingEnabled { get; set; }

        /// <summary>
        /// Gets or Sets TargetingAttributes
        /// </summary>
        [DataMember(Name = "targeting_attributes", IsRequired = true, EmitDefaultValue = true)]
        public TargetingSpec TargetingAttributes { get; set; }

        /// <summary>
        /// Gets or Sets Keywords
        /// </summary>
        /*
        <example>[{value&#x3D;cats, match_type&#x3D;EXACT_NEGATIVE}]</example>
        */
        [DataMember(Name = "keywords", EmitDefaultValue = false)]
        public List<TargetingTemplateKeyword> Keywords { get; set; }

        /// <summary>
        /// Gets or Sets TrackingUrls
        /// </summary>
        [DataMember(Name = "tracking_urls", EmitDefaultValue = true)]
        public TrackingUrls TrackingUrls { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TargetingTemplateCreate {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  AutoTargetingEnabled: ").Append(AutoTargetingEnabled).Append("\n");
            sb.Append("  TargetingAttributes: ").Append(TargetingAttributes).Append("\n");
            sb.Append("  PlacementGroup: ").Append(PlacementGroup).Append("\n");
            sb.Append("  Keywords: ").Append(Keywords).Append("\n");
            sb.Append("  TrackingUrls: ").Append(TrackingUrls).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
