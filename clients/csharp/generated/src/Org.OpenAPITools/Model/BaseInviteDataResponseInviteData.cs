/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Metadata for the invite/request.
    /// </summary>
    [DataContract(Name = "BaseInviteDataResponse_invite_data")]
    public partial class BaseInviteDataResponseInviteData : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BaseInviteDataResponseInviteData" /> class.
        /// </summary>
        /// <param name="inviteExpiration">The date and time when the invite/request will expire. Returned in milliseconds..</param>
        /// <param name="inviteStatus">The current status of the invite. The invite can be in one of the following states PENDING, ACCEPTED, DECLINED, CANCELLED, EXPIRED..</param>
        /// <param name="inviteType">The type of invite. &lt;br&gt;&#39;MEMBER_INVITE&#39; is to invite a member to access your business assets. &lt;br&gt;&#39;PARTNER_INVITE&#39; is to invite a partner to access your business assets. &lt;br&gt;&#39;PARTNER_REQUEST&#39; is to request access a partner&#39;s business assets..</param>
        /// <param name="lastUpdatedTime">The date and time the invite/request was last updated. Returned in milliseconds..</param>
        /// <param name="sentAt">The date and time the invite/request was sent/created. Returned in milliseconds..</param>
        public BaseInviteDataResponseInviteData(int inviteExpiration = default(int), string inviteStatus = default(string), string inviteType = default(string), int lastUpdatedTime = default(int), int sentAt = default(int))
        {
            this.InviteExpiration = inviteExpiration;
            this.InviteStatus = inviteStatus;
            this.InviteType = inviteType;
            this.LastUpdatedTime = lastUpdatedTime;
            this.SentAt = sentAt;
        }

        /// <summary>
        /// The date and time when the invite/request will expire. Returned in milliseconds.
        /// </summary>
        /// <value>The date and time when the invite/request will expire. Returned in milliseconds.</value>
        /*
        <example>1709748104775</example>
        */
        [DataMember(Name = "invite_expiration", EmitDefaultValue = false)]
        public int InviteExpiration { get; set; }

        /// <summary>
        /// The current status of the invite. The invite can be in one of the following states PENDING, ACCEPTED, DECLINED, CANCELLED, EXPIRED.
        /// </summary>
        /// <value>The current status of the invite. The invite can be in one of the following states PENDING, ACCEPTED, DECLINED, CANCELLED, EXPIRED.</value>
        /*
        <example>PENDING</example>
        */
        [DataMember(Name = "invite_status", EmitDefaultValue = false)]
        public string InviteStatus { get; set; }

        /// <summary>
        /// The type of invite. &lt;br&gt;&#39;MEMBER_INVITE&#39; is to invite a member to access your business assets. &lt;br&gt;&#39;PARTNER_INVITE&#39; is to invite a partner to access your business assets. &lt;br&gt;&#39;PARTNER_REQUEST&#39; is to request access a partner&#39;s business assets.
        /// </summary>
        /// <value>The type of invite. &lt;br&gt;&#39;MEMBER_INVITE&#39; is to invite a member to access your business assets. &lt;br&gt;&#39;PARTNER_INVITE&#39; is to invite a partner to access your business assets. &lt;br&gt;&#39;PARTNER_REQUEST&#39; is to request access a partner&#39;s business assets.</value>
        /*
        <example>MEMBER_INVITE</example>
        */
        [DataMember(Name = "invite_type", EmitDefaultValue = false)]
        public string InviteType { get; set; }

        /// <summary>
        /// The date and time the invite/request was last updated. Returned in milliseconds.
        /// </summary>
        /// <value>The date and time the invite/request was last updated. Returned in milliseconds.</value>
        /*
        <example>1646767577816</example>
        */
        [DataMember(Name = "last_updated_time", EmitDefaultValue = false)]
        public int LastUpdatedTime { get; set; }

        /// <summary>
        /// The date and time the invite/request was sent/created. Returned in milliseconds.
        /// </summary>
        /// <value>The date and time the invite/request was sent/created. Returned in milliseconds.</value>
        /*
        <example>1646767577816</example>
        */
        [DataMember(Name = "sent_at", EmitDefaultValue = false)]
        public int SentAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BaseInviteDataResponseInviteData {\n");
            sb.Append("  InviteExpiration: ").Append(InviteExpiration).Append("\n");
            sb.Append("  InviteStatus: ").Append(InviteStatus).Append("\n");
            sb.Append("  InviteType: ").Append(InviteType).Append("\n");
            sb.Append("  LastUpdatedTime: ").Append(LastUpdatedTime).Append("\n");
            sb.Append("  SentAt: ").Append(SentAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
