/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// The terminated asset access.
    /// </summary>
    [DataContract(Name = "DeletePartnerAssetsResult")]
    public partial class DeletePartnerAssetsResult : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DeletePartnerAssetsResult" /> class.
        /// </summary>
        /// <param name="assetId">Unique identifier of a business asset..</param>
        /// <param name="assetType">Type of asset. Currently we only support AD_ACCOUNT and PROFILE, and ASSET_GROUP..</param>
        /// <param name="permissions">Permission levels member or partner has on an asset..</param>
        /// <param name="isSharedPartner">If is_shared_partner&#x3D;FALSE, you terminated a partner&#39;s asset access to your business asset.&lt;br&gt; If is_shared_partner&#x3D;TRUE, you terminated your asset access to your partner&#39;s business asset..</param>
        /// <param name="partnerId">Unique identifier of a business partner..</param>
        public DeletePartnerAssetsResult(string assetId = default(string), string assetType = default(string), List<string> permissions = default(List<string>), bool isSharedPartner = default(bool), string partnerId = default(string))
        {
            this.AssetId = assetId;
            this.AssetType = assetType;
            this.Permissions = permissions;
            this.IsSharedPartner = isSharedPartner;
            this.PartnerId = partnerId;
        }

        /// <summary>
        /// Unique identifier of a business asset.
        /// </summary>
        /// <value>Unique identifier of a business asset.</value>
        /*
        <example>549755885175</example>
        */
        [DataMember(Name = "asset_id", EmitDefaultValue = false)]
        public string AssetId { get; set; }

        /// <summary>
        /// Type of asset. Currently we only support AD_ACCOUNT and PROFILE, and ASSET_GROUP.
        /// </summary>
        /// <value>Type of asset. Currently we only support AD_ACCOUNT and PROFILE, and ASSET_GROUP.</value>
        /*
        <example>AD_ACCOUNT</example>
        */
        [DataMember(Name = "asset_type", EmitDefaultValue = false)]
        public string AssetType { get; set; }

        /// <summary>
        /// Permission levels member or partner has on an asset.
        /// </summary>
        /// <value>Permission levels member or partner has on an asset.</value>
        /*
        <example>[&quot;FINANCE_MANAGER&quot;,&quot;CATALOGS_MANAGER&quot;,&quot;AUDIENCE_MANAGER&quot;]</example>
        */
        [DataMember(Name = "permissions", EmitDefaultValue = false)]
        public List<string> Permissions { get; set; }

        /// <summary>
        /// If is_shared_partner&#x3D;FALSE, you terminated a partner&#39;s asset access to your business asset.&lt;br&gt; If is_shared_partner&#x3D;TRUE, you terminated your asset access to your partner&#39;s business asset.
        /// </summary>
        /// <value>If is_shared_partner&#x3D;FALSE, you terminated a partner&#39;s asset access to your business asset.&lt;br&gt; If is_shared_partner&#x3D;TRUE, you terminated your asset access to your partner&#39;s business asset.</value>
        /*
        <example>false</example>
        */
        [DataMember(Name = "is_shared_partner", EmitDefaultValue = true)]
        public bool IsSharedPartner { get; set; }

        /// <summary>
        /// Unique identifier of a business partner.
        /// </summary>
        /// <value>Unique identifier of a business partner.</value>
        /*
        <example>140943737684417</example>
        */
        [DataMember(Name = "partner_id", EmitDefaultValue = false)]
        public string PartnerId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DeletePartnerAssetsResult {\n");
            sb.Append("  AssetId: ").Append(AssetId).Append("\n");
            sb.Append("  AssetType: ").Append(AssetType).Append("\n");
            sb.Append("  Permissions: ").Append(Permissions).Append("\n");
            sb.Append("  IsSharedPartner: ").Append(IsSharedPartner).Append("\n");
            sb.Append("  PartnerId: ").Append(PartnerId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.AssetId != null) {
                // AssetId (string) pattern
                Regex regexAssetId = new Regex(@"^\d+$", RegexOptions.CultureInvariant);
                if (!regexAssetId.Match(this.AssetId).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AssetId, must match a pattern of " + regexAssetId, new [] { "AssetId" });
                }
            }

            if (this.PartnerId != null) {
                // PartnerId (string) pattern
                Regex regexPartnerId = new Regex(@"^\d+$", RegexOptions.CultureInvariant);
                if (!regexPartnerId.Match(this.PartnerId).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PartnerId, must match a pattern of " + regexPartnerId, new [] { "PartnerId" });
                }
            }

            yield break;
        }
    }

}
