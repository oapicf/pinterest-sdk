/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Object describing the catalogs hotel items batch
    /// </summary>
    [DataContract(Name = "CatalogsHotelItemsBatch")]
    public partial class CatalogsHotelItemsBatch : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public BatchOperationStatus? Status { get; set; }

        /// <summary>
        /// Gets or Sets CatalogType
        /// </summary>
        [DataMember(Name = "catalog_type", IsRequired = true, EmitDefaultValue = true)]
        public CatalogsType CatalogType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CatalogsHotelItemsBatch" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CatalogsHotelItemsBatch() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CatalogsHotelItemsBatch" /> class.
        /// </summary>
        /// <param name="batchId">Id of the catalogs items batch.</param>
        /// <param name="status">status.</param>
        /// <param name="catalogType">catalogType (required).</param>
        /// <param name="items">Array with the catalogs items processing records part of the catalogs items batch.</param>
        public CatalogsHotelItemsBatch(string batchId = default(string), BatchOperationStatus? status = default(BatchOperationStatus?), CatalogsType catalogType = default(CatalogsType), List<HotelProcessingRecord> items = default(List<HotelProcessingRecord>))
        {
            this.CatalogType = catalogType;
            this.BatchId = batchId;
            this.Status = status;
            this.Items = items;
        }

        /// <summary>
        /// Id of the catalogs items batch
        /// </summary>
        /// <value>Id of the catalogs items batch</value>
        /*
        <example>595953100599279259-66753b9bb65c46c49bd8503b27fecf9e</example>
        */
        [DataMember(Name = "batch_id", EmitDefaultValue = false)]
        public string BatchId { get; set; }

        /// <summary>
        /// Date and time (UTC) of the batch creation: YYYY-MM-DD&#39;T&#39;hh:mm:ss
        /// </summary>
        /// <value>Date and time (UTC) of the batch creation: YYYY-MM-DD&#39;T&#39;hh:mm:ss</value>
        [DataMember(Name = "created_time", EmitDefaultValue = false)]
        public DateTime CreatedTime { get; private set; }

        /// <summary>
        /// Returns false as CreatedTime should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedTime()
        {
            return false;
        }
        /// <summary>
        /// Date and time (UTC) of the batch completion: YYYY-MM-DD&#39;T&#39;hh:mm:ss
        /// </summary>
        /// <value>Date and time (UTC) of the batch completion: YYYY-MM-DD&#39;T&#39;hh:mm:ss</value>
        [DataMember(Name = "completed_time", EmitDefaultValue = true)]
        public DateTime? CompletedTime { get; private set; }

        /// <summary>
        /// Returns false as CompletedTime should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCompletedTime()
        {
            return false;
        }
        /// <summary>
        /// Array with the catalogs items processing records part of the catalogs items batch
        /// </summary>
        /// <value>Array with the catalogs items processing records part of the catalogs items batch</value>
        [DataMember(Name = "items", EmitDefaultValue = false)]
        public List<HotelProcessingRecord> Items { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CatalogsHotelItemsBatch {\n");
            sb.Append("  BatchId: ").Append(BatchId).Append("\n");
            sb.Append("  CreatedTime: ").Append(CreatedTime).Append("\n");
            sb.Append("  CompletedTime: ").Append(CompletedTime).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  CatalogType: ").Append(CatalogType).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
