/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// CreateMMMReportRequest
    /// </summary>
    [DataContract(Name = "CreateMMMReportRequest")]
    public partial class CreateMMMReportRequest : IValidatableObject
    {
        /// <summary>
        /// DAY - metrics are broken down daily.&lt;br&gt; WEEK - metrics are broken down weekly.
        /// </summary>
        /// <value>DAY - metrics are broken down daily.&lt;br&gt; WEEK - metrics are broken down weekly.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum GranularityEnum
        {
            /// <summary>
            /// Enum DAY for value: DAY
            /// </summary>
            [EnumMember(Value = "DAY")]
            DAY = 1,

            /// <summary>
            /// Enum WEEK for value: WEEK
            /// </summary>
            [EnumMember(Value = "WEEK")]
            WEEK = 2
        }


        /// <summary>
        /// DAY - metrics are broken down daily.&lt;br&gt; WEEK - metrics are broken down weekly.
        /// </summary>
        /// <value>DAY - metrics are broken down daily.&lt;br&gt; WEEK - metrics are broken down weekly.</value>
        [DataMember(Name = "granularity", IsRequired = true, EmitDefaultValue = true)]
        public GranularityEnum Granularity { get; set; }
        /// <summary>
        /// Level of the report
        /// </summary>
        /// <value>Level of the report</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LevelEnum
        {
            /// <summary>
            /// Enum CAMPAIGNTARGETING for value: CAMPAIGN_TARGETING
            /// </summary>
            [EnumMember(Value = "CAMPAIGN_TARGETING")]
            CAMPAIGNTARGETING = 1,

            /// <summary>
            /// Enum ADGROUPTARGETING for value: AD_GROUP_TARGETING
            /// </summary>
            [EnumMember(Value = "AD_GROUP_TARGETING")]
            ADGROUPTARGETING = 2
        }


        /// <summary>
        /// Level of the report
        /// </summary>
        /// <value>Level of the report</value>
        [DataMember(Name = "level", IsRequired = true, EmitDefaultValue = true)]
        public LevelEnum Level { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateMMMReportRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateMMMReportRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateMMMReportRequest" /> class.
        /// </summary>
        /// <param name="reportName">Name of the Marketing Mix Modeling (MMM) report (required).</param>
        /// <param name="startDate">Metric report start date (UTC). Format: YYYY-MM-DD (required).</param>
        /// <param name="endDate">Metric report end date (UTC). Format: YYYY-MM-DD (required).</param>
        /// <param name="granularity">DAY - metrics are broken down daily.&lt;br&gt; WEEK - metrics are broken down weekly. (required).</param>
        /// <param name="level">Level of the report (required).</param>
        /// <param name="targetingTypes">List of targeting types (required).</param>
        /// <param name="columns">Metric and entity columns (required).</param>
        /// <param name="countries">A List of countries for filtering.</param>
        public CreateMMMReportRequest(string reportName = default(string), string startDate = default(string), string endDate = default(string), GranularityEnum granularity = default(GranularityEnum), LevelEnum level = default(LevelEnum), List<MMMReportingTargetingType> targetingTypes = default(List<MMMReportingTargetingType>), List<MMMReportingColumn> columns = default(List<MMMReportingColumn>), List<TargetingAdvertiserCountry> countries = default(List<TargetingAdvertiserCountry>))
        {
            // to ensure "reportName" is required (not null)
            if (reportName == null)
            {
                throw new ArgumentNullException("reportName is a required property for CreateMMMReportRequest and cannot be null");
            }
            this.ReportName = reportName;
            // to ensure "startDate" is required (not null)
            if (startDate == null)
            {
                throw new ArgumentNullException("startDate is a required property for CreateMMMReportRequest and cannot be null");
            }
            this.StartDate = startDate;
            // to ensure "endDate" is required (not null)
            if (endDate == null)
            {
                throw new ArgumentNullException("endDate is a required property for CreateMMMReportRequest and cannot be null");
            }
            this.EndDate = endDate;
            this.Granularity = granularity;
            this.Level = level;
            // to ensure "targetingTypes" is required (not null)
            if (targetingTypes == null)
            {
                throw new ArgumentNullException("targetingTypes is a required property for CreateMMMReportRequest and cannot be null");
            }
            this.TargetingTypes = targetingTypes;
            // to ensure "columns" is required (not null)
            if (columns == null)
            {
                throw new ArgumentNullException("columns is a required property for CreateMMMReportRequest and cannot be null");
            }
            this.Columns = columns;
            this.Countries = countries;
        }

        /// <summary>
        /// Name of the Marketing Mix Modeling (MMM) report
        /// </summary>
        /// <value>Name of the Marketing Mix Modeling (MMM) report</value>
        [DataMember(Name = "report_name", IsRequired = true, EmitDefaultValue = true)]
        public string ReportName { get; set; }

        /// <summary>
        /// Metric report start date (UTC). Format: YYYY-MM-DD
        /// </summary>
        /// <value>Metric report start date (UTC). Format: YYYY-MM-DD</value>
        /*
        <example>2020-12-20</example>
        */
        [DataMember(Name = "start_date", IsRequired = true, EmitDefaultValue = true)]
        public string StartDate { get; set; }

        /// <summary>
        /// Metric report end date (UTC). Format: YYYY-MM-DD
        /// </summary>
        /// <value>Metric report end date (UTC). Format: YYYY-MM-DD</value>
        /*
        <example>2020-12-20</example>
        */
        [DataMember(Name = "end_date", IsRequired = true, EmitDefaultValue = true)]
        public string EndDate { get; set; }

        /// <summary>
        /// List of targeting types
        /// </summary>
        /// <value>List of targeting types</value>
        /*
        <example>[&quot;GENDER&quot;]</example>
        */
        [DataMember(Name = "targeting_types", IsRequired = true, EmitDefaultValue = true)]
        public List<MMMReportingTargetingType> TargetingTypes { get; set; }

        /// <summary>
        /// Metric and entity columns
        /// </summary>
        /// <value>Metric and entity columns</value>
        [DataMember(Name = "columns", IsRequired = true, EmitDefaultValue = true)]
        public List<MMMReportingColumn> Columns { get; set; }

        /// <summary>
        /// A List of countries for filtering
        /// </summary>
        /// <value>A List of countries for filtering</value>
        [DataMember(Name = "countries", EmitDefaultValue = false)]
        public List<TargetingAdvertiserCountry> Countries { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateMMMReportRequest {\n");
            sb.Append("  ReportName: ").Append(ReportName).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  Granularity: ").Append(Granularity).Append("\n");
            sb.Append("  Level: ").Append(Level).Append("\n");
            sb.Append("  TargetingTypes: ").Append(TargetingTypes).Append("\n");
            sb.Append("  Columns: ").Append(Columns).Append("\n");
            sb.Append("  Countries: ").Append(Countries).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.StartDate != null) {
                // StartDate (string) pattern
                Regex regexStartDate = new Regex(@"^(\d{4})-(\d{2})-(\d{2})$", RegexOptions.CultureInvariant);
                if (!regexStartDate.Match(this.StartDate).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for StartDate, must match a pattern of " + regexStartDate, new [] { "StartDate" });
                }
            }

            if (this.EndDate != null) {
                // EndDate (string) pattern
                Regex regexEndDate = new Regex(@"^(\d{4})-(\d{2})-(\d{2})$", RegexOptions.CultureInvariant);
                if (!regexEndDate.Match(this.EndDate).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EndDate, must match a pattern of " + regexEndDate, new [] { "EndDate" });
                }
            }

            yield break;
        }
    }

}
