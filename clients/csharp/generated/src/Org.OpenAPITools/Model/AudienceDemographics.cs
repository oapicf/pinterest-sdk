/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Audience demographics
    /// </summary>
    [DataContract(Name = "AudienceDemographics")]
    public partial class AudienceDemographics : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AudienceDemographics" /> class.
        /// </summary>
        /// <param name="ages">Ages distribution..</param>
        /// <param name="genders">Gender distribution..</param>
        /// <param name="devices">Device usage distribution..</param>
        /// <param name="metros">Geographic metro area distribution..</param>
        /// <param name="countries">Country area distribution..</param>
        public AudienceDemographics(List<AudienceDemographicValue> ages = default(List<AudienceDemographicValue>), List<AudienceDemographicValue> genders = default(List<AudienceDemographicValue>), List<AudienceDemographicValue> devices = default(List<AudienceDemographicValue>), List<AudienceDemographicValue> metros = default(List<AudienceDemographicValue>), List<AudienceDemographicValue> countries = default(List<AudienceDemographicValue>))
        {
            this.Ages = ages;
            this.Genders = genders;
            this.Devices = devices;
            this.Metros = metros;
            this.Countries = countries;
        }

        /// <summary>
        /// Ages distribution.
        /// </summary>
        /// <value>Ages distribution.</value>
        [DataMember(Name = "ages", EmitDefaultValue = false)]
        public List<AudienceDemographicValue> Ages { get; set; }

        /// <summary>
        /// Gender distribution.
        /// </summary>
        /// <value>Gender distribution.</value>
        [DataMember(Name = "genders", EmitDefaultValue = false)]
        public List<AudienceDemographicValue> Genders { get; set; }

        /// <summary>
        /// Device usage distribution.
        /// </summary>
        /// <value>Device usage distribution.</value>
        [DataMember(Name = "devices", EmitDefaultValue = false)]
        public List<AudienceDemographicValue> Devices { get; set; }

        /// <summary>
        /// Geographic metro area distribution.
        /// </summary>
        /// <value>Geographic metro area distribution.</value>
        [DataMember(Name = "metros", EmitDefaultValue = false)]
        public List<AudienceDemographicValue> Metros { get; set; }

        /// <summary>
        /// Country area distribution.
        /// </summary>
        /// <value>Country area distribution.</value>
        [DataMember(Name = "countries", EmitDefaultValue = false)]
        public List<AudienceDemographicValue> Countries { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AudienceDemographics {\n");
            sb.Append("  Ages: ").Append(Ages).Append("\n");
            sb.Append("  Genders: ").Append(Genders).Append("\n");
            sb.Append("  Devices: ").Append(Devices).Append("\n");
            sb.Append("  Metros: ").Append(Metros).Append("\n");
            sb.Append("  Countries: ").Append(Countries).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
