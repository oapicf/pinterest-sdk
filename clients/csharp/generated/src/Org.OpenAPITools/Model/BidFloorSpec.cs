/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// BidFloorSpec
    /// </summary>
    [DataContract(Name = "BidFloorSpec")]
    public partial class BidFloorSpec : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name = "currency", IsRequired = true, EmitDefaultValue = true)]
        public Currency Currency { get; set; }

        /// <summary>
        /// Gets or Sets ObjectiveType
        /// </summary>
        [DataMember(Name = "objective_type", EmitDefaultValue = false)]
        public ObjectiveType? ObjectiveType { get; set; }

        /// <summary>
        /// Gets or Sets BillableEvent
        /// </summary>
        [DataMember(Name = "billable_event", IsRequired = true, EmitDefaultValue = true)]
        public ActionType BillableEvent { get; set; }

        /// <summary>
        /// Gets or Sets CreativeType
        /// </summary>
        [DataMember(Name = "creative_type", EmitDefaultValue = false)]
        public CreativeType? CreativeType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="BidFloorSpec" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BidFloorSpec() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BidFloorSpec" /> class.
        /// </summary>
        /// <param name="countries">countries.</param>
        /// <param name="currency">currency (required).</param>
        /// <param name="objectiveType">objectiveType.</param>
        /// <param name="billableEvent">billableEvent (required).</param>
        /// <param name="optimizationGoalMetadata">optimizationGoalMetadata.</param>
        /// <param name="creativeType">creativeType.</param>
        public BidFloorSpec(List<Country> countries = default(List<Country>), Currency currency = default(Currency), ObjectiveType? objectiveType = default(ObjectiveType?), ActionType billableEvent = default(ActionType), OptimizationGoalMetadata optimizationGoalMetadata = default(OptimizationGoalMetadata), CreativeType? creativeType = default(CreativeType?))
        {
            this.Currency = currency;
            this.BillableEvent = billableEvent;
            this.Countries = countries;
            this.ObjectiveType = objectiveType;
            this.OptimizationGoalMetadata = optimizationGoalMetadata;
            this.CreativeType = creativeType;
        }

        /// <summary>
        /// Gets or Sets Countries
        /// </summary>
        [DataMember(Name = "countries", EmitDefaultValue = false)]
        public List<Country> Countries { get; set; }

        /// <summary>
        /// Gets or Sets OptimizationGoalMetadata
        /// </summary>
        [DataMember(Name = "optimization_goal_metadata", EmitDefaultValue = false)]
        public OptimizationGoalMetadata OptimizationGoalMetadata { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BidFloorSpec {\n");
            sb.Append("  Countries: ").Append(Countries).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  ObjectiveType: ").Append(ObjectiveType).Append("\n");
            sb.Append("  BillableEvent: ").Append(BillableEvent).Append("\n");
            sb.Append("  OptimizationGoalMetadata: ").Append(OptimizationGoalMetadata).Append("\n");
            sb.Append("  CreativeType: ").Append(CreativeType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
