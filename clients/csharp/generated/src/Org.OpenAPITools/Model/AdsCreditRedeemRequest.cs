/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// AdsCreditRedeemRequest
    /// </summary>
    [DataContract(Name = "AdsCreditRedeemRequest")]
    public partial class AdsCreditRedeemRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AdsCreditRedeemRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AdsCreditRedeemRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AdsCreditRedeemRequest" /> class.
        /// </summary>
        /// <param name="offerCodeHash">Takes in a SHA256 hash of the offerCode. (required).</param>
        /// <param name="validateOnly">If true, only validate if we can redeem offer code. Otherwise it will actually apply the offer code to the account (required).</param>
        public AdsCreditRedeemRequest(string offerCodeHash = default(string), bool validateOnly = default(bool))
        {
            // to ensure "offerCodeHash" is required (not null)
            if (offerCodeHash == null)
            {
                throw new ArgumentNullException("offerCodeHash is a required property for AdsCreditRedeemRequest and cannot be null");
            }
            this.OfferCodeHash = offerCodeHash;
            this.ValidateOnly = validateOnly;
        }

        /// <summary>
        /// Takes in a SHA256 hash of the offerCode.
        /// </summary>
        /// <value>Takes in a SHA256 hash of the offerCode.</value>
        /*
        <example>138e9e0ff7e38cf511b880975eb574c09aa9d5e1657590ab0431040da68caa67</example>
        */
        [DataMember(Name = "offerCodeHash", IsRequired = true, EmitDefaultValue = true)]
        public string OfferCodeHash { get; set; }

        /// <summary>
        /// If true, only validate if we can redeem offer code. Otherwise it will actually apply the offer code to the account
        /// </summary>
        /// <value>If true, only validate if we can redeem offer code. Otherwise it will actually apply the offer code to the account</value>
        /*
        <example>true</example>
        */
        [DataMember(Name = "validateOnly", IsRequired = true, EmitDefaultValue = true)]
        public bool ValidateOnly { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AdsCreditRedeemRequest {\n");
            sb.Append("  OfferCodeHash: ").Append(OfferCodeHash).Append("\n");
            sb.Append("  ValidateOnly: ").Append(ValidateOnly).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.OfferCodeHash != null) {
                // OfferCodeHash (string) pattern
                Regex regexOfferCodeHash = new Regex(@"^[a-z0-9]*$", RegexOptions.CultureInvariant);
                if (!regexOfferCodeHash.Match(this.OfferCodeHash).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OfferCodeHash, must match a pattern of " + regexOfferCodeHash, new [] { "OfferCodeHash" });
                }
            }

            yield break;
        }
    }

}
