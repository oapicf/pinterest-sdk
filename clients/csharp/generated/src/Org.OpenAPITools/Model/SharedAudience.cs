/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// SharedAudience
    /// </summary>
    [DataContract(Name = "SharedAudience")]
    public partial class SharedAudience : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets OperationType
        /// </summary>
        [DataMember(Name = "operation_type", IsRequired = true, EmitDefaultValue = true)]
        public OperationType OperationType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SharedAudience" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SharedAudience() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SharedAudience" /> class.
        /// </summary>
        /// <param name="audienceId">Unique identifier of an audience (required).</param>
        /// <param name="operationType">operationType (required).</param>
        /// <param name="recipientAccountIds">List of ad account IDs to share with or revoke from. (required).</param>
        public SharedAudience(string audienceId = default(string), OperationType operationType = default(OperationType), List<string> recipientAccountIds = default(List<string>))
        {
            // to ensure "audienceId" is required (not null)
            if (audienceId == null)
            {
                throw new ArgumentNullException("audienceId is a required property for SharedAudience and cannot be null");
            }
            this.AudienceId = audienceId;
            this.OperationType = operationType;
            // to ensure "recipientAccountIds" is required (not null)
            if (recipientAccountIds == null)
            {
                throw new ArgumentNullException("recipientAccountIds is a required property for SharedAudience and cannot be null");
            }
            this.RecipientAccountIds = recipientAccountIds;
        }

        /// <summary>
        /// Unique identifier of an audience
        /// </summary>
        /// <value>Unique identifier of an audience</value>
        /*
        <example>2542621871096</example>
        */
        [DataMember(Name = "audience_id", IsRequired = true, EmitDefaultValue = true)]
        public string AudienceId { get; set; }

        /// <summary>
        /// List of ad account IDs to share with or revoke from.
        /// </summary>
        /// <value>List of ad account IDs to share with or revoke from.</value>
        [DataMember(Name = "recipient_account_ids", IsRequired = true, EmitDefaultValue = true)]
        public List<string> RecipientAccountIds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SharedAudience {\n");
            sb.Append("  AudienceId: ").Append(AudienceId).Append("\n");
            sb.Append("  OperationType: ").Append(OperationType).Append("\n");
            sb.Append("  RecipientAccountIds: ").Append(RecipientAccountIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.AudienceId != null) {
                // AudienceId (string) pattern
                Regex regexAudienceId = new Regex(@"^\d+$", RegexOptions.CultureInvariant);
                if (!regexAudienceId.Match(this.AudienceId).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AudienceId, must match a pattern of " + regexAudienceId, new [] { "AudienceId" });
                }
            }

            yield break;
        }
    }

}
