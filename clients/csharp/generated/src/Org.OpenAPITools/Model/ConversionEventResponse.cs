/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ConversionEventResponse
    /// </summary>
    [DataContract(Name = "ConversionEventResponse")]
    public partial class ConversionEventResponse : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets ConversionEvent
        /// </summary>
        [DataMember(Name = "conversion_event", EmitDefaultValue = false)]
        public ConversionTagType? ConversionEvent { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ConversionEventResponse" /> class.
        /// </summary>
        /// <param name="conversionEvent">conversionEvent.</param>
        /// <param name="conversionTagId">Id of the tag..</param>
        /// <param name="adAccountId">Id of the ad account..</param>
        /// <param name="createdTime">Creation date in epoch format..</param>
        public ConversionEventResponse(ConversionTagType? conversionEvent = default(ConversionTagType?), string conversionTagId = default(string), string adAccountId = default(string), int createdTime = default(int))
        {
            this.ConversionEvent = conversionEvent;
            this.ConversionTagId = conversionTagId;
            this.AdAccountId = adAccountId;
            this.CreatedTime = createdTime;
        }

        /// <summary>
        /// Id of the tag.
        /// </summary>
        /// <value>Id of the tag.</value>
        /*
        <example>2614324385652</example>
        */
        [DataMember(Name = "conversion_tag_id", EmitDefaultValue = false)]
        public string ConversionTagId { get; set; }

        /// <summary>
        /// Id of the ad account.
        /// </summary>
        /// <value>Id of the ad account.</value>
        /*
        <example>549757463328</example>
        */
        [DataMember(Name = "ad_account_id", EmitDefaultValue = false)]
        public string AdAccountId { get; set; }

        /// <summary>
        /// Creation date in epoch format.
        /// </summary>
        /// <value>Creation date in epoch format.</value>
        /*
        <example>1564768710</example>
        */
        [DataMember(Name = "created_time", EmitDefaultValue = false)]
        public int CreatedTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ConversionEventResponse {\n");
            sb.Append("  ConversionEvent: ").Append(ConversionEvent).Append("\n");
            sb.Append("  ConversionTagId: ").Append(ConversionTagId).Append("\n");
            sb.Append("  AdAccountId: ").Append(AdAccountId).Append("\n");
            sb.Append("  CreatedTime: ").Append(CreatedTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.ConversionTagId != null) {
                // ConversionTagId (string) pattern
                Regex regexConversionTagId = new Regex(@"^\d+$", RegexOptions.CultureInvariant);
                if (!regexConversionTagId.Match(this.ConversionTagId).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ConversionTagId, must match a pattern of " + regexConversionTagId, new [] { "ConversionTagId" });
                }
            }

            if (this.AdAccountId != null) {
                // AdAccountId (string) pattern
                Regex regexAdAccountId = new Regex(@"^\d+$", RegexOptions.CultureInvariant);
                if (!regexAdAccountId.Match(this.AdAccountId).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AdAccountId, must match a pattern of " + regexAdAccountId, new [] { "AdAccountId" });
                }
            }

            yield break;
        }
    }

}
