/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Keyword
    /// </summary>
    [DataContract(Name = "Keyword")]
    public partial class Keyword : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets MatchType
        /// </summary>
        [DataMember(Name = "match_type", IsRequired = true, EmitDefaultValue = true)]
        public MatchTypeResponse MatchType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Keyword" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Keyword() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Keyword" /> class.
        /// </summary>
        /// <param name="bid">&lt;/p&gt;&lt;strong&gt;Note:&lt;/strong&gt; bid field has been deprecated. Input will not be set and field will return null. Keyword custom bid in microcurrency - null if inherited from parent ad group..</param>
        /// <param name="matchType">matchType (required).</param>
        /// <param name="value">Keyword value (120 chars max). (required).</param>
        /// <param name="archived">archived.</param>
        /// <param name="id">Keyword ID ..</param>
        /// <param name="parentId">Keyword parent entity ID (advertiser, campaign, ad group)..</param>
        /// <param name="parentType">Parent entity type.</param>
        /// <param name="type">Always keyword.</param>
        public Keyword(int? bid = default(int?), MatchTypeResponse matchType = default(MatchTypeResponse), string value = default(string), bool archived = default(bool), string id = default(string), string parentId = default(string), string parentType = default(string), string type = default(string))
        {
            this.MatchType = matchType;
            // to ensure "value" is required (not null)
            if (value == null)
            {
                throw new ArgumentNullException("value is a required property for Keyword and cannot be null");
            }
            this.Value = value;
            this.Bid = bid;
            this.Archived = archived;
            this.Id = id;
            this.ParentId = parentId;
            this.ParentType = parentType;
            this.Type = type;
        }

        /// <summary>
        /// &lt;/p&gt;&lt;strong&gt;Note:&lt;/strong&gt; bid field has been deprecated. Input will not be set and field will return null. Keyword custom bid in microcurrency - null if inherited from parent ad group.
        /// </summary>
        /// <value>&lt;/p&gt;&lt;strong&gt;Note:&lt;/strong&gt; bid field has been deprecated. Input will not be set and field will return null. Keyword custom bid in microcurrency - null if inherited from parent ad group.</value>
        [DataMember(Name = "bid", EmitDefaultValue = true)]
        public int? Bid { get; set; }

        /// <summary>
        /// Keyword value (120 chars max).
        /// </summary>
        /// <value>Keyword value (120 chars max).</value>
        [DataMember(Name = "value", IsRequired = true, EmitDefaultValue = true)]
        public string Value { get; set; }

        /// <summary>
        /// Gets or Sets Archived
        /// </summary>
        /*
        <example>false</example>
        */
        [DataMember(Name = "archived", EmitDefaultValue = true)]
        public bool Archived { get; set; }

        /// <summary>
        /// Keyword ID .
        /// </summary>
        /// <value>Keyword ID .</value>
        /*
        <example>383791336903426391</example>
        */
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Keyword parent entity ID (advertiser, campaign, ad group).
        /// </summary>
        /// <value>Keyword parent entity ID (advertiser, campaign, ad group).</value>
        /*
        <example>383791336903426391</example>
        */
        [DataMember(Name = "parent_id", EmitDefaultValue = false)]
        public string ParentId { get; set; }

        /// <summary>
        /// Parent entity type
        /// </summary>
        /// <value>Parent entity type</value>
        /*
        <example>campaign</example>
        */
        [DataMember(Name = "parent_type", EmitDefaultValue = false)]
        public string ParentType { get; set; }

        /// <summary>
        /// Always keyword
        /// </summary>
        /// <value>Always keyword</value>
        /*
        <example>keyword</example>
        */
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Keyword {\n");
            sb.Append("  Bid: ").Append(Bid).Append("\n");
            sb.Append("  MatchType: ").Append(MatchType).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Archived: ").Append(Archived).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ParentId: ").Append(ParentId).Append("\n");
            sb.Append("  ParentType: ").Append(ParentType).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.Id != null) {
                // Id (string) pattern
                Regex regexId = new Regex(@"^\d+$", RegexOptions.CultureInvariant);
                if (!regexId.Match(this.Id).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Id, must match a pattern of " + regexId, new [] { "Id" });
                }
            }

            if (this.ParentId != null) {
                // ParentId (string) pattern
                Regex regexParentId = new Regex(@"^\d+$", RegexOptions.CultureInvariant);
                if (!regexParentId.Match(this.ParentId).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ParentId, must match a pattern of " + regexParentId, new [] { "ParentId" });
                }
            }

            yield break;
        }
    }

}
