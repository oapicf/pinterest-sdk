/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// CustomerListRequest
    /// </summary>
    [DataContract(Name = "CustomerListRequest")]
    public partial class CustomerListRequest : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets ListType
        /// </summary>
        [DataMember(Name = "list_type", EmitDefaultValue = false)]
        public UserListType? ListType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerListRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CustomerListRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerListRequest" /> class.
        /// </summary>
        /// <param name="name">Customer list name. (required).</param>
        /// <param name="records">Records list. Can be any combination of emails, MAIDs, or IDFAs. Emails must be lowercase and can be plain text or hashed using SHA1, SHA256, or MD5. MAIDs and IDFAs must be hashed with SHA1, SHA256, or MD5. (required).</param>
        /// <param name="listType">listType (default to &quot;EMAIL&quot;).</param>
        /// <param name="exceptions">Customer list errors..</param>
        public CustomerListRequest(string name = default(string), string records = default(string), UserListType? listType = "EMAIL", Object exceptions = default(Object))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for CustomerListRequest and cannot be null");
            }
            this.Name = name;
            // to ensure "records" is required (not null)
            if (records == null)
            {
                throw new ArgumentNullException("records is a required property for CustomerListRequest and cannot be null");
            }
            this.Records = records;
            this.ListType = listType;
            this.Exceptions = exceptions;
        }

        /// <summary>
        /// Customer list name.
        /// </summary>
        /// <value>Customer list name.</value>
        /*
        <example>The Glengarry Glen Ross leads</example>
        */
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Records list. Can be any combination of emails, MAIDs, or IDFAs. Emails must be lowercase and can be plain text or hashed using SHA1, SHA256, or MD5. MAIDs and IDFAs must be hashed with SHA1, SHA256, or MD5.
        /// </summary>
        /// <value>Records list. Can be any combination of emails, MAIDs, or IDFAs. Emails must be lowercase and can be plain text or hashed using SHA1, SHA256, or MD5. MAIDs and IDFAs must be hashed with SHA1, SHA256, or MD5.</value>
        /*
        <example>email1@pinterest.com,email2@pinterest.com,..&lt;more records&gt;</example>
        */
        [DataMember(Name = "records", IsRequired = true, EmitDefaultValue = true)]
        public string Records { get; set; }

        /// <summary>
        /// Customer list errors.
        /// </summary>
        /// <value>Customer list errors.</value>
        [DataMember(Name = "exceptions", EmitDefaultValue = false)]
        public Object Exceptions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CustomerListRequest {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Records: ").Append(Records).Append("\n");
            sb.Append("  ListType: ").Append(ListType).Append("\n");
            sb.Append("  Exceptions: ").Append(Exceptions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
