/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// AdPinId
    /// </summary>
    [DataContract(Name = "AdPinId")]
    public partial class AdPinId : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AdPinId" /> class.
        /// </summary>
        /// <param name="pinId">Pin ID..</param>
        public AdPinId(string pinId = default(string))
        {
            this.PinId = pinId;
        }

        /// <summary>
        /// Pin ID.
        /// </summary>
        /// <value>Pin ID.</value>
        /*
        <example>394205773611545468</example>
        */
        [DataMember(Name = "pin_id", EmitDefaultValue = false)]
        public string PinId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AdPinId {\n");
            sb.Append("  PinId: ").Append(PinId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.PinId != null) {
                // PinId (string) pattern
                Regex regexPinId = new Regex(@"^\d+$", RegexOptions.CultureInvariant);
                if (!regexPinId.Match(this.PinId).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PinId, must match a pattern of " + regexPinId, new [] { "PinId" });
                }
            }

            yield break;
        }
    }

}
