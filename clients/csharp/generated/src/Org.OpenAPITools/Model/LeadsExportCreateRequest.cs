/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// LeadsExportCreateRequest
    /// </summary>
    [DataContract(Name = "LeadsExportCreateRequest")]
    public partial class LeadsExportCreateRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LeadsExportCreateRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LeadsExportCreateRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="LeadsExportCreateRequest" /> class.
        /// </summary>
        /// <param name="startDate">Export leads collected on and after start date (UTC). Format: YYYY-MM-DD (required).</param>
        /// <param name="endDate">Export leads collected on and before end date (UTC). Format: YYYY-MM-DD (required).</param>
        /// <param name="adId">ID for the ad collecting leads (required).</param>
        public LeadsExportCreateRequest(string startDate = default(string), string endDate = default(string), string adId = default(string))
        {
            // to ensure "startDate" is required (not null)
            if (startDate == null)
            {
                throw new ArgumentNullException("startDate is a required property for LeadsExportCreateRequest and cannot be null");
            }
            this.StartDate = startDate;
            // to ensure "endDate" is required (not null)
            if (endDate == null)
            {
                throw new ArgumentNullException("endDate is a required property for LeadsExportCreateRequest and cannot be null");
            }
            this.EndDate = endDate;
            // to ensure "adId" is required (not null)
            if (adId == null)
            {
                throw new ArgumentNullException("adId is a required property for LeadsExportCreateRequest and cannot be null");
            }
            this.AdId = adId;
        }

        /// <summary>
        /// Export leads collected on and after start date (UTC). Format: YYYY-MM-DD
        /// </summary>
        /// <value>Export leads collected on and after start date (UTC). Format: YYYY-MM-DD</value>
        /*
        <example>2020-12-20</example>
        */
        [DataMember(Name = "start_date", IsRequired = true, EmitDefaultValue = true)]
        public string StartDate { get; set; }

        /// <summary>
        /// Export leads collected on and before end date (UTC). Format: YYYY-MM-DD
        /// </summary>
        /// <value>Export leads collected on and before end date (UTC). Format: YYYY-MM-DD</value>
        /*
        <example>2020-12-20</example>
        */
        [DataMember(Name = "end_date", IsRequired = true, EmitDefaultValue = true)]
        public string EndDate { get; set; }

        /// <summary>
        /// ID for the ad collecting leads
        /// </summary>
        /// <value>ID for the ad collecting leads</value>
        /*
        <example>687201361754</example>
        */
        [DataMember(Name = "ad_id", IsRequired = true, EmitDefaultValue = true)]
        public string AdId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LeadsExportCreateRequest {\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  AdId: ").Append(AdId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.StartDate != null) {
                // StartDate (string) pattern
                Regex regexStartDate = new Regex(@"^(\d{4})-(\d{2})-(\d{2})$", RegexOptions.CultureInvariant);
                if (!regexStartDate.Match(this.StartDate).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for StartDate, must match a pattern of " + regexStartDate, new [] { "StartDate" });
                }
            }

            if (this.EndDate != null) {
                // EndDate (string) pattern
                Regex regexEndDate = new Regex(@"^(\d{4})-(\d{2})-(\d{2})$", RegexOptions.CultureInvariant);
                if (!regexEndDate.Match(this.EndDate).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EndDate, must match a pattern of " + regexEndDate, new [] { "EndDate" });
                }
            }

            if (this.AdId != null) {
                // AdId (string) pattern
                Regex regexAdId = new Regex(@"^\d+$", RegexOptions.CultureInvariant);
                if (!regexAdId.Match(this.AdId).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AdId, must match a pattern of " + regexAdId, new [] { "AdId" });
                }
            }

            yield break;
        }
    }

}
