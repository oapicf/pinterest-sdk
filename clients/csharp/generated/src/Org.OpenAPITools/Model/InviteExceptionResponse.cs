/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// An exception object if there is an error performing the action. Will only be provided if there is an error.
    /// </summary>
    [DataContract(Name = "InviteExceptionResponse")]
    public partial class InviteExceptionResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InviteExceptionResponse" /> class.
        /// </summary>
        /// <param name="inviteOrRequestId">Unique identifier of the invite/request..</param>
        /// <param name="code">Error code associated with the error in performing the action on the invite/request..</param>
        /// <param name="message">Error message associated with the error in performing the action on the invite/request..</param>
        /// <param name="usersOrPartnerIds">A list of users&#39; usernames or emails OR a list of partner ids that caused the error..</param>
        public InviteExceptionResponse(string inviteOrRequestId = default(string), int code = default(int), string message = default(string), List<string> usersOrPartnerIds = default(List<string>))
        {
            this.InviteOrRequestId = inviteOrRequestId;
            this.Code = code;
            this.Message = message;
            this.UsersOrPartnerIds = usersOrPartnerIds;
        }

        /// <summary>
        /// Unique identifier of the invite/request.
        /// </summary>
        /// <value>Unique identifier of the invite/request.</value>
        /*
        <example>383791336903426391</example>
        */
        [DataMember(Name = "invite_or_request_id", EmitDefaultValue = true)]
        public string InviteOrRequestId { get; set; }

        /// <summary>
        /// Error code associated with the error in performing the action on the invite/request.
        /// </summary>
        /// <value>Error code associated with the error in performing the action on the invite/request.</value>
        /*
        <example>403</example>
        */
        [DataMember(Name = "code", EmitDefaultValue = false)]
        public int Code { get; set; }

        /// <summary>
        /// Error message associated with the error in performing the action on the invite/request.
        /// </summary>
        /// <value>Error message associated with the error in performing the action on the invite/request.</value>
        /*
        <example>You hit the maximum number of pending invites allowed.</example>
        */
        [DataMember(Name = "message", EmitDefaultValue = false)]
        public string Message { get; set; }

        /// <summary>
        /// A list of users&#39; usernames or emails OR a list of partner ids that caused the error.
        /// </summary>
        /// <value>A list of users&#39; usernames or emails OR a list of partner ids that caused the error.</value>
        /*
        <example>[&quot;businessMember0101&quot;,&quot;business+member@business.com&quot;]</example>
        */
        [DataMember(Name = "users_or_partner_ids", EmitDefaultValue = true)]
        public List<string> UsersOrPartnerIds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InviteExceptionResponse {\n");
            sb.Append("  InviteOrRequestId: ").Append(InviteOrRequestId).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  UsersOrPartnerIds: ").Append(UsersOrPartnerIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.InviteOrRequestId != null) {
                // InviteOrRequestId (string) pattern
                Regex regexInviteOrRequestId = new Regex(@"^\d+$", RegexOptions.CultureInvariant);
                if (!regexInviteOrRequestId.Match(this.InviteOrRequestId).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for InviteOrRequestId, must match a pattern of " + regexInviteOrRequestId, new [] { "InviteOrRequestId" });
                }
            }

            yield break;
        }
    }

}
