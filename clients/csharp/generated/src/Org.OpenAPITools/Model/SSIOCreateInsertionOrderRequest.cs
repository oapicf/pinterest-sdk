/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// SSIOCreateInsertionOrderRequest
    /// </summary>
    [DataContract(Name = "SSIOCreateInsertionOrderRequest")]
    public partial class SSIOCreateInsertionOrderRequest : IValidatableObject
    {
        /// <summary>
        /// Type can be Budget or Perpetual
        /// </summary>
        /// <value>Type can be Budget or Perpetual</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OrderLineTypeEnum
        {
            /// <summary>
            /// Enum BUDGET for value: BUDGET
            /// </summary>
            [EnumMember(Value = "BUDGET")]
            BUDGET = 1,

            /// <summary>
            /// Enum PERPETUALS for value: PERPETUALS
            /// </summary>
            [EnumMember(Value = "PERPETUALS")]
            PERPETUALS = 2
        }


        /// <summary>
        /// Type can be Budget or Perpetual
        /// </summary>
        /// <value>Type can be Budget or Perpetual</value>
        [DataMember(Name = "order_line_type", IsRequired = true, EmitDefaultValue = true)]
        public OrderLineTypeEnum OrderLineType { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyInfo
        /// </summary>
        [DataMember(Name = "currency_info", IsRequired = true, EmitDefaultValue = true)]
        public Currency CurrencyInfo { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SSIOCreateInsertionOrderRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SSIOCreateInsertionOrderRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SSIOCreateInsertionOrderRequest" /> class.
        /// </summary>
        /// <param name="startDate">Starting date of time period. Format: YYYY-MM-DD (required).</param>
        /// <param name="endDate">End date of time period. Format: YYYY-MM-DD.</param>
        /// <param name="poNumber">The po number (required).</param>
        /// <param name="budgetAmount">If Budget order line, the budget amount..</param>
        /// <param name="billingContactFirstname">The billing contact first name (required).</param>
        /// <param name="billingContactLastname">The billing contact last name (required).</param>
        /// <param name="billingContactEmail">The billing contact email (required).</param>
        /// <param name="mediaContactFirstname">The media contact first name (required).</param>
        /// <param name="mediaContactLastname">The media contact last name (required).</param>
        /// <param name="mediaContactEmail">The media contact email (required).</param>
        /// <param name="agencyLink">URL link for agency.</param>
        /// <param name="userEmail">The email of user submitting the insertion order.</param>
        /// <param name="acceptedTermsTime">The UTC timestamp (to the nearest sec) of when terms were accepted.</param>
        /// <param name="pmpId">The pmp id (required).</param>
        /// <param name="orderName">The order name (required).</param>
        /// <param name="orderLineType">Type can be Budget or Perpetual (required).</param>
        /// <param name="acceptedTermsId">The SFDC id for the terms (required).</param>
        /// <param name="billtoCompanyId">The bill-to company id (required).</param>
        /// <param name="billtoBusinessAddressId">The bill-to business address id (required).</param>
        /// <param name="billtoBillingAddressId">The bill-to billing address id (required).</param>
        /// <param name="estimatedMonthlySpend">If Ongoing (perpetual) order line, the estimated monthly spend.</param>
        /// <param name="currencyInfo">currencyInfo (required).</param>
        public SSIOCreateInsertionOrderRequest(string startDate = default(string), string endDate = default(string), string poNumber = default(string), decimal budgetAmount = default(decimal), string billingContactFirstname = default(string), string billingContactLastname = default(string), string billingContactEmail = default(string), string mediaContactFirstname = default(string), string mediaContactLastname = default(string), string mediaContactEmail = default(string), string agencyLink = default(string), string userEmail = default(string), int acceptedTermsTime = default(int), string pmpId = default(string), string orderName = default(string), OrderLineTypeEnum orderLineType = default(OrderLineTypeEnum), string acceptedTermsId = default(string), string billtoCompanyId = default(string), string billtoBusinessAddressId = default(string), string billtoBillingAddressId = default(string), decimal estimatedMonthlySpend = default(decimal), Currency currencyInfo = default(Currency))
        {
            // to ensure "startDate" is required (not null)
            if (startDate == null)
            {
                throw new ArgumentNullException("startDate is a required property for SSIOCreateInsertionOrderRequest and cannot be null");
            }
            this.StartDate = startDate;
            // to ensure "poNumber" is required (not null)
            if (poNumber == null)
            {
                throw new ArgumentNullException("poNumber is a required property for SSIOCreateInsertionOrderRequest and cannot be null");
            }
            this.PoNumber = poNumber;
            // to ensure "billingContactFirstname" is required (not null)
            if (billingContactFirstname == null)
            {
                throw new ArgumentNullException("billingContactFirstname is a required property for SSIOCreateInsertionOrderRequest and cannot be null");
            }
            this.BillingContactFirstname = billingContactFirstname;
            // to ensure "billingContactLastname" is required (not null)
            if (billingContactLastname == null)
            {
                throw new ArgumentNullException("billingContactLastname is a required property for SSIOCreateInsertionOrderRequest and cannot be null");
            }
            this.BillingContactLastname = billingContactLastname;
            // to ensure "billingContactEmail" is required (not null)
            if (billingContactEmail == null)
            {
                throw new ArgumentNullException("billingContactEmail is a required property for SSIOCreateInsertionOrderRequest and cannot be null");
            }
            this.BillingContactEmail = billingContactEmail;
            // to ensure "mediaContactFirstname" is required (not null)
            if (mediaContactFirstname == null)
            {
                throw new ArgumentNullException("mediaContactFirstname is a required property for SSIOCreateInsertionOrderRequest and cannot be null");
            }
            this.MediaContactFirstname = mediaContactFirstname;
            // to ensure "mediaContactLastname" is required (not null)
            if (mediaContactLastname == null)
            {
                throw new ArgumentNullException("mediaContactLastname is a required property for SSIOCreateInsertionOrderRequest and cannot be null");
            }
            this.MediaContactLastname = mediaContactLastname;
            // to ensure "mediaContactEmail" is required (not null)
            if (mediaContactEmail == null)
            {
                throw new ArgumentNullException("mediaContactEmail is a required property for SSIOCreateInsertionOrderRequest and cannot be null");
            }
            this.MediaContactEmail = mediaContactEmail;
            // to ensure "pmpId" is required (not null)
            if (pmpId == null)
            {
                throw new ArgumentNullException("pmpId is a required property for SSIOCreateInsertionOrderRequest and cannot be null");
            }
            this.PmpId = pmpId;
            // to ensure "orderName" is required (not null)
            if (orderName == null)
            {
                throw new ArgumentNullException("orderName is a required property for SSIOCreateInsertionOrderRequest and cannot be null");
            }
            this.OrderName = orderName;
            this.OrderLineType = orderLineType;
            // to ensure "acceptedTermsId" is required (not null)
            if (acceptedTermsId == null)
            {
                throw new ArgumentNullException("acceptedTermsId is a required property for SSIOCreateInsertionOrderRequest and cannot be null");
            }
            this.AcceptedTermsId = acceptedTermsId;
            // to ensure "billtoCompanyId" is required (not null)
            if (billtoCompanyId == null)
            {
                throw new ArgumentNullException("billtoCompanyId is a required property for SSIOCreateInsertionOrderRequest and cannot be null");
            }
            this.BilltoCompanyId = billtoCompanyId;
            // to ensure "billtoBusinessAddressId" is required (not null)
            if (billtoBusinessAddressId == null)
            {
                throw new ArgumentNullException("billtoBusinessAddressId is a required property for SSIOCreateInsertionOrderRequest and cannot be null");
            }
            this.BilltoBusinessAddressId = billtoBusinessAddressId;
            // to ensure "billtoBillingAddressId" is required (not null)
            if (billtoBillingAddressId == null)
            {
                throw new ArgumentNullException("billtoBillingAddressId is a required property for SSIOCreateInsertionOrderRequest and cannot be null");
            }
            this.BilltoBillingAddressId = billtoBillingAddressId;
            this.CurrencyInfo = currencyInfo;
            this.EndDate = endDate;
            this.BudgetAmount = budgetAmount;
            this.AgencyLink = agencyLink;
            this.UserEmail = userEmail;
            this.AcceptedTermsTime = acceptedTermsTime;
            this.EstimatedMonthlySpend = estimatedMonthlySpend;
        }

        /// <summary>
        /// Starting date of time period. Format: YYYY-MM-DD
        /// </summary>
        /// <value>Starting date of time period. Format: YYYY-MM-DD</value>
        /*
        <example>2020-12-20</example>
        */
        [DataMember(Name = "start_date", IsRequired = true, EmitDefaultValue = true)]
        public string StartDate { get; set; }

        /// <summary>
        /// End date of time period. Format: YYYY-MM-DD
        /// </summary>
        /// <value>End date of time period. Format: YYYY-MM-DD</value>
        /*
        <example>2020-12-20</example>
        */
        [DataMember(Name = "end_date", EmitDefaultValue = false)]
        public string EndDate { get; set; }

        /// <summary>
        /// The po number
        /// </summary>
        /// <value>The po number</value>
        [DataMember(Name = "po_number", IsRequired = true, EmitDefaultValue = true)]
        public string PoNumber { get; set; }

        /// <summary>
        /// If Budget order line, the budget amount.
        /// </summary>
        /// <value>If Budget order line, the budget amount.</value>
        /*
        <example>5000000</example>
        */
        [DataMember(Name = "budget_amount", EmitDefaultValue = false)]
        public decimal BudgetAmount { get; set; }

        /// <summary>
        /// The billing contact first name
        /// </summary>
        /// <value>The billing contact first name</value>
        [DataMember(Name = "billing_contact_firstname", IsRequired = true, EmitDefaultValue = true)]
        public string BillingContactFirstname { get; set; }

        /// <summary>
        /// The billing contact last name
        /// </summary>
        /// <value>The billing contact last name</value>
        [DataMember(Name = "billing_contact_lastname", IsRequired = true, EmitDefaultValue = true)]
        public string BillingContactLastname { get; set; }

        /// <summary>
        /// The billing contact email
        /// </summary>
        /// <value>The billing contact email</value>
        /*
        <example>test@example</example>
        */
        [DataMember(Name = "billing_contact_email", IsRequired = true, EmitDefaultValue = true)]
        public string BillingContactEmail { get; set; }

        /// <summary>
        /// The media contact first name
        /// </summary>
        /// <value>The media contact first name</value>
        [DataMember(Name = "media_contact_firstname", IsRequired = true, EmitDefaultValue = true)]
        public string MediaContactFirstname { get; set; }

        /// <summary>
        /// The media contact last name
        /// </summary>
        /// <value>The media contact last name</value>
        [DataMember(Name = "media_contact_lastname", IsRequired = true, EmitDefaultValue = true)]
        public string MediaContactLastname { get; set; }

        /// <summary>
        /// The media contact email
        /// </summary>
        /// <value>The media contact email</value>
        /*
        <example>test@example</example>
        */
        [DataMember(Name = "media_contact_email", IsRequired = true, EmitDefaultValue = true)]
        public string MediaContactEmail { get; set; }

        /// <summary>
        /// URL link for agency
        /// </summary>
        /// <value>URL link for agency</value>
        [DataMember(Name = "agency_link", EmitDefaultValue = false)]
        public string AgencyLink { get; set; }

        /// <summary>
        /// The email of user submitting the insertion order
        /// </summary>
        /// <value>The email of user submitting the insertion order</value>
        /*
        <example>test@example</example>
        */
        [DataMember(Name = "user_email", EmitDefaultValue = false)]
        public string UserEmail { get; set; }

        /// <summary>
        /// The UTC timestamp (to the nearest sec) of when terms were accepted
        /// </summary>
        /// <value>The UTC timestamp (to the nearest sec) of when terms were accepted</value>
        [DataMember(Name = "accepted_terms_time", EmitDefaultValue = false)]
        public int AcceptedTermsTime { get; set; }

        /// <summary>
        /// The pmp id
        /// </summary>
        /// <value>The pmp id</value>
        [DataMember(Name = "pmp_id", IsRequired = true, EmitDefaultValue = true)]
        public string PmpId { get; set; }

        /// <summary>
        /// The order name
        /// </summary>
        /// <value>The order name</value>
        [DataMember(Name = "order_name", IsRequired = true, EmitDefaultValue = true)]
        public string OrderName { get; set; }

        /// <summary>
        /// The SFDC id for the terms
        /// </summary>
        /// <value>The SFDC id for the terms</value>
        [DataMember(Name = "accepted_terms_id", IsRequired = true, EmitDefaultValue = true)]
        public string AcceptedTermsId { get; set; }

        /// <summary>
        /// The bill-to company id
        /// </summary>
        /// <value>The bill-to company id</value>
        [DataMember(Name = "billto_company_id", IsRequired = true, EmitDefaultValue = true)]
        public string BilltoCompanyId { get; set; }

        /// <summary>
        /// The bill-to business address id
        /// </summary>
        /// <value>The bill-to business address id</value>
        [DataMember(Name = "billto_business_address_id", IsRequired = true, EmitDefaultValue = true)]
        public string BilltoBusinessAddressId { get; set; }

        /// <summary>
        /// The bill-to billing address id
        /// </summary>
        /// <value>The bill-to billing address id</value>
        [DataMember(Name = "billto_billing_address_id", IsRequired = true, EmitDefaultValue = true)]
        public string BilltoBillingAddressId { get; set; }

        /// <summary>
        /// If Ongoing (perpetual) order line, the estimated monthly spend
        /// </summary>
        /// <value>If Ongoing (perpetual) order line, the estimated monthly spend</value>
        [DataMember(Name = "estimated_monthly_spend", EmitDefaultValue = false)]
        public decimal EstimatedMonthlySpend { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SSIOCreateInsertionOrderRequest {\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  PoNumber: ").Append(PoNumber).Append("\n");
            sb.Append("  BudgetAmount: ").Append(BudgetAmount).Append("\n");
            sb.Append("  BillingContactFirstname: ").Append(BillingContactFirstname).Append("\n");
            sb.Append("  BillingContactLastname: ").Append(BillingContactLastname).Append("\n");
            sb.Append("  BillingContactEmail: ").Append(BillingContactEmail).Append("\n");
            sb.Append("  MediaContactFirstname: ").Append(MediaContactFirstname).Append("\n");
            sb.Append("  MediaContactLastname: ").Append(MediaContactLastname).Append("\n");
            sb.Append("  MediaContactEmail: ").Append(MediaContactEmail).Append("\n");
            sb.Append("  AgencyLink: ").Append(AgencyLink).Append("\n");
            sb.Append("  UserEmail: ").Append(UserEmail).Append("\n");
            sb.Append("  AcceptedTermsTime: ").Append(AcceptedTermsTime).Append("\n");
            sb.Append("  PmpId: ").Append(PmpId).Append("\n");
            sb.Append("  OrderName: ").Append(OrderName).Append("\n");
            sb.Append("  OrderLineType: ").Append(OrderLineType).Append("\n");
            sb.Append("  AcceptedTermsId: ").Append(AcceptedTermsId).Append("\n");
            sb.Append("  BilltoCompanyId: ").Append(BilltoCompanyId).Append("\n");
            sb.Append("  BilltoBusinessAddressId: ").Append(BilltoBusinessAddressId).Append("\n");
            sb.Append("  BilltoBillingAddressId: ").Append(BilltoBillingAddressId).Append("\n");
            sb.Append("  EstimatedMonthlySpend: ").Append(EstimatedMonthlySpend).Append("\n");
            sb.Append("  CurrencyInfo: ").Append(CurrencyInfo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.StartDate != null) {
                // StartDate (string) pattern
                Regex regexStartDate = new Regex(@"^(\d{4})-(\d{2})-(\d{2})$", RegexOptions.CultureInvariant);
                if (!regexStartDate.Match(this.StartDate).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for StartDate, must match a pattern of " + regexStartDate, new [] { "StartDate" });
                }
            }

            if (this.EndDate != null) {
                // EndDate (string) pattern
                Regex regexEndDate = new Regex(@"^(\d{4})-(\d{2})-(\d{2})$", RegexOptions.CultureInvariant);
                if (!regexEndDate.Match(this.EndDate).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EndDate, must match a pattern of " + regexEndDate, new [] { "EndDate" });
                }
            }

            yield break;
        }
    }

}
