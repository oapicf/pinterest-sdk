/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// CatalogsReportDistributionStats
    /// </summary>
    [DataContract(Name = "CatalogsReportDistributionStats")]
    public partial class CatalogsReportDistributionStats : IValidatableObject
    {
        /// <summary>
        /// Defines ReportType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ReportTypeEnum
        {
            /// <summary>
            /// Enum DISTRIBUTIONISSUES for value: DISTRIBUTION_ISSUES
            /// </summary>
            [EnumMember(Value = "DISTRIBUTION_ISSUES")]
            DISTRIBUTIONISSUES = 1
        }


        /// <summary>
        /// Gets or Sets ReportType
        /// </summary>
        [DataMember(Name = "report_type", EmitDefaultValue = false)]
        public ReportTypeEnum? ReportType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CatalogsReportDistributionStats" /> class.
        /// </summary>
        /// <param name="reportType">reportType.</param>
        /// <param name="catalogId">ID of the catalog entity..</param>
        /// <param name="code">The event code that a diagnostics aggregated number references.</param>
        /// <param name="codeLabel">A human-friendly label for the event code (e.g, &#39;SPAM&#39;).</param>
        /// <param name="message">Title message describing the diagnostic issue.</param>
        /// <param name="occurrences">Number of occurrences of the issue.</param>
        /// <param name="ineligibleForAds">Indicates if issue makes items ineligible for ads distribution.</param>
        /// <param name="ineligibleForOrganic">Indicates if issue makes items ineligible for organic distribution.</param>
        public CatalogsReportDistributionStats(ReportTypeEnum? reportType = default(ReportTypeEnum?), string catalogId = default(string), int code = default(int), string codeLabel = default(string), string message = default(string), int occurrences = default(int), bool ineligibleForAds = default(bool), bool ineligibleForOrganic = default(bool))
        {
            this.ReportType = reportType;
            this.CatalogId = catalogId;
            this.Code = code;
            this.CodeLabel = codeLabel;
            this.Message = message;
            this.Occurrences = occurrences;
            this.IneligibleForAds = ineligibleForAds;
            this.IneligibleForOrganic = ineligibleForOrganic;
        }

        /// <summary>
        /// ID of the catalog entity.
        /// </summary>
        /// <value>ID of the catalog entity.</value>
        [DataMember(Name = "catalog_id", EmitDefaultValue = false)]
        public string CatalogId { get; set; }

        /// <summary>
        /// The event code that a diagnostics aggregated number references
        /// </summary>
        /// <value>The event code that a diagnostics aggregated number references</value>
        [DataMember(Name = "code", EmitDefaultValue = false)]
        public int Code { get; set; }

        /// <summary>
        /// A human-friendly label for the event code (e.g, &#39;SPAM&#39;)
        /// </summary>
        /// <value>A human-friendly label for the event code (e.g, &#39;SPAM&#39;)</value>
        /*
        <example>SPAM</example>
        */
        [DataMember(Name = "code_label", EmitDefaultValue = false)]
        public string CodeLabel { get; set; }

        /// <summary>
        /// Title message describing the diagnostic issue
        /// </summary>
        /// <value>Title message describing the diagnostic issue</value>
        [DataMember(Name = "message", EmitDefaultValue = false)]
        public string Message { get; set; }

        /// <summary>
        /// Number of occurrences of the issue
        /// </summary>
        /// <value>Number of occurrences of the issue</value>
        /*
        <example>10</example>
        */
        [DataMember(Name = "occurrences", EmitDefaultValue = false)]
        public int Occurrences { get; set; }

        /// <summary>
        /// Indicates if issue makes items ineligible for ads distribution
        /// </summary>
        /// <value>Indicates if issue makes items ineligible for ads distribution</value>
        /*
        <example>true</example>
        */
        [DataMember(Name = "ineligible_for_ads", EmitDefaultValue = true)]
        public bool IneligibleForAds { get; set; }

        /// <summary>
        /// Indicates if issue makes items ineligible for organic distribution
        /// </summary>
        /// <value>Indicates if issue makes items ineligible for organic distribution</value>
        /*
        <example>true</example>
        */
        [DataMember(Name = "ineligible_for_organic", EmitDefaultValue = true)]
        public bool IneligibleForOrganic { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CatalogsReportDistributionStats {\n");
            sb.Append("  ReportType: ").Append(ReportType).Append("\n");
            sb.Append("  CatalogId: ").Append(CatalogId).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  CodeLabel: ").Append(CodeLabel).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Occurrences: ").Append(Occurrences).Append("\n");
            sb.Append("  IneligibleForAds: ").Append(IneligibleForAds).Append("\n");
            sb.Append("  IneligibleForOrganic: ").Append(IneligibleForOrganic).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.CatalogId != null) {
                // CatalogId (string) pattern
                Regex regexCatalogId = new Regex(@"^\d+$", RegexOptions.CultureInvariant);
                if (!regexCatalogId.Match(this.CatalogId).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CatalogId, must match a pattern of " + regexCatalogId, new [] { "CatalogId" });
                }
            }

            yield break;
        }
    }

}
