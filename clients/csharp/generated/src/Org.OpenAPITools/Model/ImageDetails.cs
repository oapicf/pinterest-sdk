/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ImageDetails
    /// </summary>
    [DataContract(Name = "ImageDetails")]
    public partial class ImageDetails : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ImageDetails" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ImageDetails() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ImageDetails" /> class.
        /// </summary>
        /// <param name="width">width (required).</param>
        /// <param name="height">height (required).</param>
        /// <param name="url">url (required).</param>
        public ImageDetails(int width = default(int), int? height = default(int?), string url = default(string))
        {
            this.Width = width;
            // to ensure "height" is required (not null)
            if (height == null)
            {
                throw new ArgumentNullException("height is a required property for ImageDetails and cannot be null");
            }
            this.Height = height;
            // to ensure "url" is required (not null)
            if (url == null)
            {
                throw new ArgumentNullException("url is a required property for ImageDetails and cannot be null");
            }
            this.Url = url;
        }

        /// <summary>
        /// Gets or Sets Width
        /// </summary>
        [DataMember(Name = "width", IsRequired = true, EmitDefaultValue = true)]
        public int Width { get; set; }

        /// <summary>
        /// Gets or Sets Height
        /// </summary>
        [DataMember(Name = "height", IsRequired = true, EmitDefaultValue = true)]
        public int? Height { get; set; }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [DataMember(Name = "url", IsRequired = true, EmitDefaultValue = true)]
        public string Url { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ImageDetails {\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Width (int) minimum
            if (this.Width < (int)100)
            {
                yield return new ValidationResult("Invalid value for Width, must be a value greater than or equal to 100.", new [] { "Width" });
            }

            // Height (int?) minimum
            if (this.Height < (int?)100)
            {
                yield return new ValidationResult("Invalid value for Height, must be a value greater than or equal to 100.", new [] { "Height" });
            }

            yield break;
        }
    }

}
