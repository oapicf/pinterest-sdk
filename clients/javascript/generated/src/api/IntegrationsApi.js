/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DetailedError from '../model/DetailedError';
import Error from '../model/Error';
import IntegrationLogsRequest from '../model/IntegrationLogsRequest';
import IntegrationLogsSuccessResponse from '../model/IntegrationLogsSuccessResponse';
import IntegrationMetadata from '../model/IntegrationMetadata';
import IntegrationRecord from '../model/IntegrationRecord';
import IntegrationRequest from '../model/IntegrationRequest';
import IntegrationRequestPatch from '../model/IntegrationRequestPatch';
import IntegrationsGetList200Response from '../model/IntegrationsGetList200Response';

/**
* Integrations service.
* @module api/IntegrationsApi
* @version 1.1.1-pre.0
*/
export default class IntegrationsApi {

    /**
    * Constructs a new IntegrationsApi. 
    * @alias module:api/IntegrationsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the integrationsCommerceDel operation.
     * @callback module:api/IntegrationsApi~integrationsCommerceDelCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete commerce integration
     * Delete commerce integration metadata for the given external business ID. Note: If you're interested in joining the beta, please reach out to your Pinterest account manager.
     * @param {String} externalBusinessId External business ID for the integration.
     * @param {module:api/IntegrationsApi~integrationsCommerceDelCallback} callback The callback function, accepting three arguments: error, data, response
     */
    integrationsCommerceDel(externalBusinessId, callback) {
      let postBody = null;
      // verify the required parameter 'externalBusinessId' is set
      if (externalBusinessId === undefined || externalBusinessId === null) {
        throw new Error("Missing the required parameter 'externalBusinessId' when calling integrationsCommerceDel");
      }

      let pathParams = {
        'external_business_id': externalBusinessId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['pinterest_oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/integrations/commerce/{external_business_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the integrationsCommerceGet operation.
     * @callback module:api/IntegrationsApi~integrationsCommerceGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IntegrationMetadata} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get commerce integration
     * Get commerce integration metadata associated with the given external business ID. Note: If you're interested in joining the beta, please reach out to your Pinterest account manager.
     * @param {String} externalBusinessId External business ID for the integration.
     * @param {module:api/IntegrationsApi~integrationsCommerceGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IntegrationMetadata}
     */
    integrationsCommerceGet(externalBusinessId, callback) {
      let postBody = null;
      // verify the required parameter 'externalBusinessId' is set
      if (externalBusinessId === undefined || externalBusinessId === null) {
        throw new Error("Missing the required parameter 'externalBusinessId' when calling integrationsCommerceGet");
      }

      let pathParams = {
        'external_business_id': externalBusinessId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['pinterest_oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IntegrationMetadata;
      return this.apiClient.callApi(
        '/integrations/commerce/{external_business_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the integrationsCommercePatch operation.
     * @callback module:api/IntegrationsApi~integrationsCommercePatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IntegrationMetadata} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update commerce integration
     * Update commerce integration metadata for the given external business ID. Note: If you're interested in joining the beta, please reach out to your Pinterest account manager.
     * @param {String} externalBusinessId External business ID for the integration.
     * @param {Object} opts Optional parameters
     * @param {module:model/IntegrationRequestPatch} [integrationRequestPatch] Parameters to get create/update the Integration Metadata
     * @param {module:api/IntegrationsApi~integrationsCommercePatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IntegrationMetadata}
     */
    integrationsCommercePatch(externalBusinessId, opts, callback) {
      opts = opts || {};
      let postBody = opts['integrationRequestPatch'];
      // verify the required parameter 'externalBusinessId' is set
      if (externalBusinessId === undefined || externalBusinessId === null) {
        throw new Error("Missing the required parameter 'externalBusinessId' when calling integrationsCommercePatch");
      }

      let pathParams = {
        'external_business_id': externalBusinessId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['pinterest_oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IntegrationMetadata;
      return this.apiClient.callApi(
        '/integrations/commerce/{external_business_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the integrationsCommercePost operation.
     * @callback module:api/IntegrationsApi~integrationsCommercePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IntegrationMetadata} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create commerce integration
     * Create commerce integration metadata to link an external business ID with a Pinterest merchant & ad account. Note: If you're interested in joining the beta, please reach out to your Pinterest account manager.
     * @param {Object} opts Optional parameters
     * @param {module:model/IntegrationRequest} [integrationRequest] Parameters to get create/update the Integration Metadata
     * @param {module:api/IntegrationsApi~integrationsCommercePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IntegrationMetadata}
     */
    integrationsCommercePost(opts, callback) {
      opts = opts || {};
      let postBody = opts['integrationRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['pinterest_oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IntegrationMetadata;
      return this.apiClient.callApi(
        '/integrations/commerce', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the integrationsGetById operation.
     * @callback module:api/IntegrationsApi~integrationsGetByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IntegrationRecord} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get integration metadata
     * Get integration metadata by ID. Note: If you're interested in joining the beta, please reach out to your Pinterest account manager.
     * @param {String} id Integration ID.
     * @param {module:api/IntegrationsApi~integrationsGetByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IntegrationRecord}
     */
    integrationsGetById(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling integrationsGetById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['pinterest_oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IntegrationRecord;
      return this.apiClient.callApi(
        '/integrations/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the integrationsGetList operation.
     * @callback module:api/IntegrationsApi~integrationsGetListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IntegrationsGetList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get integration metadata list
     * Get integration metadata list. Note: If you're interested in joining the beta, please reach out to your Pinterest account manager.
     * @param {Object} opts Optional parameters
     * @param {String} [bookmark] Cursor used to fetch the next page of items
     * @param {Number} [pageSize = 25)] Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/reference/pagination/'>Pagination</a> for more information.
     * @param {module:api/IntegrationsApi~integrationsGetListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IntegrationsGetList200Response}
     */
    integrationsGetList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'bookmark': opts['bookmark'],
        'page_size': opts['pageSize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['pinterest_oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IntegrationsGetList200Response;
      return this.apiClient.callApi(
        '/integrations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the integrationsLogsPost operation.
     * @callback module:api/IntegrationsApi~integrationsLogsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IntegrationLogsSuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Receives batched logs from integration applications.
     * This endpoint receives batched logs from integration applications on partner platforms. Note: If you're interested in joining the beta, please reach out to your Pinterest account manager.
     * @param {module:model/IntegrationLogsRequest} integrationLogsRequest Ingest log information from external integration application.
     * @param {module:api/IntegrationsApi~integrationsLogsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IntegrationLogsSuccessResponse}
     */
    integrationsLogsPost(integrationLogsRequest, callback) {
      let postBody = integrationLogsRequest;
      // verify the required parameter 'integrationLogsRequest' is set
      if (integrationLogsRequest === undefined || integrationLogsRequest === null) {
        throw new Error("Missing the required parameter 'integrationLogsRequest' when calling integrationsLogsPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['pinterest_oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IntegrationLogsSuccessResponse;
      return this.apiClient.callApi(
        '/integrations/logs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
