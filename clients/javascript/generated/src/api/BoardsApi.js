/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Board from '../model/Board';
import BoardSection from '../model/BoardSection';
import BoardSectionsList200Response from '../model/BoardSectionsList200Response';
import BoardUpdate from '../model/BoardUpdate';
import BoardsList200Response from '../model/BoardsList200Response';
import BoardsListPins200Response from '../model/BoardsListPins200Response';
import Error from '../model/Error';

/**
* Boards service.
* @module api/BoardsApi
* @version 1.1.1-pre.0
*/
export default class BoardsApi {

    /**
    * Constructs a new BoardsApi. 
    * @alias module:api/BoardsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the boardSectionsCreate operation.
     * @callback module:api/BoardsApi~boardSectionsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BoardSection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create board section
     * Create a board section on a board owned by the \"operation user_account\" - or on a group board that has been shared with this account. Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account.
     * @param {String} boardId Unique identifier of a board.
     * @param {module:model/BoardSection} boardSection Create a board section.
     * @param {Object} opts Optional parameters
     * @param {String} [adAccountId] Unique identifier of an ad account.
     * @param {module:api/BoardsApi~boardSectionsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BoardSection}
     */
    boardSectionsCreate(boardId, boardSection, opts, callback) {
      opts = opts || {};
      let postBody = boardSection;
      // verify the required parameter 'boardId' is set
      if (boardId === undefined || boardId === null) {
        throw new Error("Missing the required parameter 'boardId' when calling boardSectionsCreate");
      }
      // verify the required parameter 'boardSection' is set
      if (boardSection === undefined || boardSection === null) {
        throw new Error("Missing the required parameter 'boardSection' when calling boardSectionsCreate");
      }

      let pathParams = {
        'board_id': boardId
      };
      let queryParams = {
        'ad_account_id': opts['adAccountId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['pinterest_oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BoardSection;
      return this.apiClient.callApi(
        '/boards/{board_id}/sections', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the boardSectionsDelete operation.
     * @callback module:api/BoardsApi~boardSectionsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete board section
     * Delete a board section on a board owned by the \"operation user_account\" - or on a group board that has been shared with this account. Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account.
     * @param {String} boardId Unique identifier of a board.
     * @param {String} sectionId Unique identifier of a board section.
     * @param {Object} opts Optional parameters
     * @param {String} [adAccountId] Unique identifier of an ad account.
     * @param {module:api/BoardsApi~boardSectionsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    boardSectionsDelete(boardId, sectionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'boardId' is set
      if (boardId === undefined || boardId === null) {
        throw new Error("Missing the required parameter 'boardId' when calling boardSectionsDelete");
      }
      // verify the required parameter 'sectionId' is set
      if (sectionId === undefined || sectionId === null) {
        throw new Error("Missing the required parameter 'sectionId' when calling boardSectionsDelete");
      }

      let pathParams = {
        'board_id': boardId,
        'section_id': sectionId
      };
      let queryParams = {
        'ad_account_id': opts['adAccountId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['pinterest_oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/boards/{board_id}/sections/{section_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the boardSectionsList operation.
     * @callback module:api/BoardsApi~boardSectionsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BoardSectionsList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List board sections
     * Get a list of all board sections from a board owned by the \"operation user_account\" - or a group board that has been shared with this account. Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account.
     * @param {String} boardId Unique identifier of a board.
     * @param {Object} opts Optional parameters
     * @param {String} [adAccountId] Unique identifier of an ad account.
     * @param {String} [bookmark] Cursor used to fetch the next page of items
     * @param {Number} [pageSize = 25)] Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/reference/pagination/'>Pagination</a> for more information.
     * @param {module:api/BoardsApi~boardSectionsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BoardSectionsList200Response}
     */
    boardSectionsList(boardId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'boardId' is set
      if (boardId === undefined || boardId === null) {
        throw new Error("Missing the required parameter 'boardId' when calling boardSectionsList");
      }

      let pathParams = {
        'board_id': boardId
      };
      let queryParams = {
        'ad_account_id': opts['adAccountId'],
        'bookmark': opts['bookmark'],
        'page_size': opts['pageSize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['pinterest_oauth2', 'client_credentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BoardSectionsList200Response;
      return this.apiClient.callApi(
        '/boards/{board_id}/sections', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the boardSectionsListPins operation.
     * @callback module:api/BoardsApi~boardSectionsListPinsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BoardsListPins200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Pins on board section
     * Get a list of the Pins on a board section of a board owned by the \"operation user_account\" - or on a group board that has been shared with this account. Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account.
     * @param {String} boardId Unique identifier of a board.
     * @param {String} sectionId Unique identifier of a board section.
     * @param {Object} opts Optional parameters
     * @param {String} [adAccountId] Unique identifier of an ad account.
     * @param {String} [bookmark] Cursor used to fetch the next page of items
     * @param {Number} [pageSize = 25)] Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/reference/pagination/'>Pagination</a> for more information.
     * @param {module:api/BoardsApi~boardSectionsListPinsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BoardsListPins200Response}
     */
    boardSectionsListPins(boardId, sectionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'boardId' is set
      if (boardId === undefined || boardId === null) {
        throw new Error("Missing the required parameter 'boardId' when calling boardSectionsListPins");
      }
      // verify the required parameter 'sectionId' is set
      if (sectionId === undefined || sectionId === null) {
        throw new Error("Missing the required parameter 'sectionId' when calling boardSectionsListPins");
      }

      let pathParams = {
        'board_id': boardId,
        'section_id': sectionId
      };
      let queryParams = {
        'ad_account_id': opts['adAccountId'],
        'bookmark': opts['bookmark'],
        'page_size': opts['pageSize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['pinterest_oauth2', 'client_credentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BoardsListPins200Response;
      return this.apiClient.callApi(
        '/boards/{board_id}/sections/{section_id}/pins', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the boardSectionsUpdate operation.
     * @callback module:api/BoardsApi~boardSectionsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BoardSection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update board section
     * Update a board section on a board owned by the \"operation user_account\" - or on a group board that has been shared with this account. Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account.
     * @param {String} boardId Unique identifier of a board.
     * @param {String} sectionId Unique identifier of a board section.
     * @param {module:model/BoardSection} boardSection Update a board section.
     * @param {Object} opts Optional parameters
     * @param {String} [adAccountId] Unique identifier of an ad account.
     * @param {module:api/BoardsApi~boardSectionsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BoardSection}
     */
    boardSectionsUpdate(boardId, sectionId, boardSection, opts, callback) {
      opts = opts || {};
      let postBody = boardSection;
      // verify the required parameter 'boardId' is set
      if (boardId === undefined || boardId === null) {
        throw new Error("Missing the required parameter 'boardId' when calling boardSectionsUpdate");
      }
      // verify the required parameter 'sectionId' is set
      if (sectionId === undefined || sectionId === null) {
        throw new Error("Missing the required parameter 'sectionId' when calling boardSectionsUpdate");
      }
      // verify the required parameter 'boardSection' is set
      if (boardSection === undefined || boardSection === null) {
        throw new Error("Missing the required parameter 'boardSection' when calling boardSectionsUpdate");
      }

      let pathParams = {
        'board_id': boardId,
        'section_id': sectionId
      };
      let queryParams = {
        'ad_account_id': opts['adAccountId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['pinterest_oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BoardSection;
      return this.apiClient.callApi(
        '/boards/{board_id}/sections/{section_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the boardsCreate operation.
     * @callback module:api/BoardsApi~boardsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Board} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create board
     * Create a board owned by the \"operation user_account\". Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account.
     * @param {module:model/Board} board Create a board using a single board json object.
     * @param {Object} opts Optional parameters
     * @param {String} [adAccountId] Unique identifier of an ad account.
     * @param {module:api/BoardsApi~boardsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Board}
     */
    boardsCreate(board, opts, callback) {
      opts = opts || {};
      let postBody = board;
      // verify the required parameter 'board' is set
      if (board === undefined || board === null) {
        throw new Error("Missing the required parameter 'board' when calling boardsCreate");
      }

      let pathParams = {
      };
      let queryParams = {
        'ad_account_id': opts['adAccountId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['pinterest_oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Board;
      return this.apiClient.callApi(
        '/boards', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the boardsDelete operation.
     * @callback module:api/BoardsApi~boardsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete board
     * Delete a board owned by the \"operation user_account\". - Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account.
     * @param {String} boardId Unique identifier of a board.
     * @param {Object} opts Optional parameters
     * @param {String} [adAccountId] Unique identifier of an ad account.
     * @param {module:api/BoardsApi~boardsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    boardsDelete(boardId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'boardId' is set
      if (boardId === undefined || boardId === null) {
        throw new Error("Missing the required parameter 'boardId' when calling boardsDelete");
      }

      let pathParams = {
        'board_id': boardId
      };
      let queryParams = {
        'ad_account_id': opts['adAccountId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['pinterest_oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/boards/{board_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the boardsGet operation.
     * @callback module:api/BoardsApi~boardsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Board} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get board
     * Get a board owned by the operation user_account - or a group board that has been shared with this account. - Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account.
     * @param {String} boardId Unique identifier of a board.
     * @param {Object} opts Optional parameters
     * @param {String} [adAccountId] Unique identifier of an ad account.
     * @param {module:api/BoardsApi~boardsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Board}
     */
    boardsGet(boardId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'boardId' is set
      if (boardId === undefined || boardId === null) {
        throw new Error("Missing the required parameter 'boardId' when calling boardsGet");
      }

      let pathParams = {
        'board_id': boardId
      };
      let queryParams = {
        'ad_account_id': opts['adAccountId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['pinterest_oauth2', 'client_credentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Board;
      return this.apiClient.callApi(
        '/boards/{board_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the boardsList operation.
     * @callback module:api/BoardsApi~boardsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BoardsList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List boards
     * Get a list of the boards owned by the \"operation user_account\" + group boards where this account is a collaborator Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\". Optional: Specify a privacy type (public, protected, or secret) to indicate which boards to return. - If no privacy is specified, all boards that can be returned (based on the scopes of the token and ad_account role if applicable) will be returned.
     * @param {Object} opts Optional parameters
     * @param {String} [adAccountId] Unique identifier of an ad account.
     * @param {String} [bookmark] Cursor used to fetch the next page of items
     * @param {Number} [pageSize = 25)] Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/reference/pagination/'>Pagination</a> for more information.
     * @param {module:model/String} [privacy] Privacy setting for a board.
     * @param {module:api/BoardsApi~boardsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BoardsList200Response}
     */
    boardsList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'ad_account_id': opts['adAccountId'],
        'bookmark': opts['bookmark'],
        'page_size': opts['pageSize'],
        'privacy': opts['privacy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['pinterest_oauth2', 'client_credentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BoardsList200Response;
      return this.apiClient.callApi(
        '/boards', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the boardsListPins operation.
     * @callback module:api/BoardsApi~boardsListPinsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BoardsListPins200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Pins on board
     * Get a list of the Pins on a board owned by the \"operation user_account\" - or on a group board that has been shared with this account. - Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account.
     * @param {String} boardId Unique identifier of a board.
     * @param {Object} opts Optional parameters
     * @param {String} [bookmark] Cursor used to fetch the next page of items
     * @param {Number} [pageSize = 25)] Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/reference/pagination/'>Pagination</a> for more information.
     * @param {Array.<module:model/String>} [creativeTypes] Pin creative types filter. </p><strong>Note:</strong> SHOP_THE_PIN has been deprecated. Please use COLLECTION instead.
     * @param {String} [adAccountId] Unique identifier of an ad account.
     * @param {Boolean} [pinMetrics = false)] Specify whether to return 90d and lifetime Pin metrics. Total comments and total reactions are only available with lifetime Pin metrics. If Pin was created before <code>2023-03-20</code> lifetime metrics will only be available for Video and Idea Pin formats. Lifetime metrics are available for all Pin formats since then.
     * @param {module:api/BoardsApi~boardsListPinsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BoardsListPins200Response}
     */
    boardsListPins(boardId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'boardId' is set
      if (boardId === undefined || boardId === null) {
        throw new Error("Missing the required parameter 'boardId' when calling boardsListPins");
      }

      let pathParams = {
        'board_id': boardId
      };
      let queryParams = {
        'bookmark': opts['bookmark'],
        'page_size': opts['pageSize'],
        'creative_types': this.apiClient.buildCollectionParam(opts['creativeTypes'], 'multi'),
        'ad_account_id': opts['adAccountId'],
        'pin_metrics': opts['pinMetrics']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['pinterest_oauth2', 'client_credentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BoardsListPins200Response;
      return this.apiClient.callApi(
        '/boards/{board_id}/pins', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the boardsUpdate operation.
     * @callback module:api/BoardsApi~boardsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Board} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update board
     * Update a board owned by the \"operating user_account\". - Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account.
     * @param {String} boardId Unique identifier of a board.
     * @param {module:model/BoardUpdate} boardUpdate Update a board.
     * @param {Object} opts Optional parameters
     * @param {String} [adAccountId] Unique identifier of an ad account.
     * @param {module:api/BoardsApi~boardsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Board}
     */
    boardsUpdate(boardId, boardUpdate, opts, callback) {
      opts = opts || {};
      let postBody = boardUpdate;
      // verify the required parameter 'boardId' is set
      if (boardId === undefined || boardId === null) {
        throw new Error("Missing the required parameter 'boardId' when calling boardsUpdate");
      }
      // verify the required parameter 'boardUpdate' is set
      if (boardUpdate === undefined || boardUpdate === null) {
        throw new Error("Missing the required parameter 'boardUpdate' when calling boardsUpdate");
      }

      let pathParams = {
        'board_id': boardId
      };
      let queryParams = {
        'ad_account_id': opts['adAccountId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['pinterest_oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Board;
      return this.apiClient.callApi(
        '/boards/{board_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
