/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AdsAnalyticsCampaignTargetingType from '../model/AdsAnalyticsCampaignTargetingType';
import CampaignCreateRequest from '../model/CampaignCreateRequest';
import CampaignCreateResponse from '../model/CampaignCreateResponse';
import CampaignResponse from '../model/CampaignResponse';
import CampaignUpdateRequest from '../model/CampaignUpdateRequest';
import CampaignUpdateResponse from '../model/CampaignUpdateResponse';
import CampaignsAnalyticsResponseInner from '../model/CampaignsAnalyticsResponseInner';
import CampaignsList200Response from '../model/CampaignsList200Response';
import ConversionReportAttributionType from '../model/ConversionReportAttributionType';
import Error from '../model/Error';
import Granularity from '../model/Granularity';
import MetricsResponse from '../model/MetricsResponse';

/**
* Campaigns service.
* @module api/CampaignsApi
* @version 1.1.1-pre.0
*/
export default class CampaignsApi {

    /**
    * Constructs a new CampaignsApi. 
    * @alias module:api/CampaignsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the campaignTargetingAnalyticsGet operation.
     * @callback module:api/CampaignsApi~campaignTargetingAnalyticsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MetricsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get targeting analytics for campaigns
     * Get targeting analytics for one or more campaigns. For the requested account and metrics, the response will include the requested metric information (e.g. SPEND_IN_DOLLAR) for the requested target type (e.g. \"age_bucket\") for applicable values (e.g. \"45-49\"). <p/> - The token's user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager. - If granularity is not HOUR, the furthest back you can are allowed to pull data is 90 days before the current date in UTC time and the max time range supported is 90 days. - If granularity is HOUR, the furthest back you can are allowed to pull data is 8 days before the current date in UTC time and the max time range supported is 3 days.
     * @param {String} adAccountId Unique identifier of an ad account.
     * @param {Array.<String>} campaignIds List of Campaign Ids to use to filter the results.
     * @param {Date} startDate Metric report start date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days back from today.
     * @param {Date} endDate Metric report end date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days past start_date.
     * @param {Array.<module:model/AdsAnalyticsCampaignTargetingType>} targetingTypes Targeting type breakdowns for the report. The reporting per targeting type <br> is independent from each other. [\"AGE_BUCKET_AND_GENDER\"] is in BETA and not yet available to all users.
     * @param {Array.<module:model/String>} columns Columns to retrieve, encoded as a comma-separated string. **NOTE**: Any metrics defined as MICRO_DOLLARS returns a value based on the advertiser profile's currency field. For USD,($1/1,000,000, or $0.000001 - one one-ten-thousandth of a cent). it's microdollars. Otherwise, it's in microunits of the advertiser's currency.<br/>For example, if the advertiser's currency is GBP (British pound sterling), all MICRO_DOLLARS fields will be in GBP microunits (1/1,000,000 British pound).<br/>If a column has no value, it may not be returned
     * @param {module:model/Granularity} granularity TOTAL - metrics are aggregated over the specified date range.<br> DAY - metrics are broken down daily.<br> HOUR - metrics are broken down hourly.<br>WEEKLY - metrics are broken down weekly.<br>MONTHLY - metrics are broken down monthly
     * @param {Object} opts Optional parameters
     * @param {module:model/Number} [clickWindowDays = 30)] Number of days to use as the conversion attribution window for a pin click action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to `30` days.
     * @param {module:model/Number} [engagementWindowDays = 30)] Number of days to use as the conversion attribution window for an engagement action. Engagements include saves, closeups, link clicks, and carousel card swipes. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to `30` days.
     * @param {module:model/Number} [viewWindowDays = 1)] Number of days to use as the conversion attribution window for a view action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to `1` day.
     * @param {module:model/String} [conversionReportTime = 'TIME_OF_AD_ACTION')] The date by which the conversion metrics returned from this endpoint will be reported. There are two dates associated with a conversion event: the date that the user interacted with the ad, and the date that the user completed a conversion event.
     * @param {module:model/ConversionReportAttributionType} [attributionTypes] List of types of attribution for the conversion report
     * @param {module:api/CampaignsApi~campaignTargetingAnalyticsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MetricsResponse}
     */
    campaignTargetingAnalyticsGet(adAccountId, campaignIds, startDate, endDate, targetingTypes, columns, granularity, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'adAccountId' is set
      if (adAccountId === undefined || adAccountId === null) {
        throw new Error("Missing the required parameter 'adAccountId' when calling campaignTargetingAnalyticsGet");
      }
      // verify the required parameter 'campaignIds' is set
      if (campaignIds === undefined || campaignIds === null) {
        throw new Error("Missing the required parameter 'campaignIds' when calling campaignTargetingAnalyticsGet");
      }
      // verify the required parameter 'startDate' is set
      if (startDate === undefined || startDate === null) {
        throw new Error("Missing the required parameter 'startDate' when calling campaignTargetingAnalyticsGet");
      }
      // verify the required parameter 'endDate' is set
      if (endDate === undefined || endDate === null) {
        throw new Error("Missing the required parameter 'endDate' when calling campaignTargetingAnalyticsGet");
      }
      // verify the required parameter 'targetingTypes' is set
      if (targetingTypes === undefined || targetingTypes === null) {
        throw new Error("Missing the required parameter 'targetingTypes' when calling campaignTargetingAnalyticsGet");
      }
      // verify the required parameter 'columns' is set
      if (columns === undefined || columns === null) {
        throw new Error("Missing the required parameter 'columns' when calling campaignTargetingAnalyticsGet");
      }
      // verify the required parameter 'granularity' is set
      if (granularity === undefined || granularity === null) {
        throw new Error("Missing the required parameter 'granularity' when calling campaignTargetingAnalyticsGet");
      }

      let pathParams = {
        'ad_account_id': adAccountId
      };
      let queryParams = {
        'campaign_ids': this.apiClient.buildCollectionParam(campaignIds, 'multi'),
        'start_date': startDate,
        'end_date': endDate,
        'targeting_types': this.apiClient.buildCollectionParam(targetingTypes, 'csv'),
        'columns': this.apiClient.buildCollectionParam(columns, 'csv'),
        'granularity': granularity,
        'click_window_days': opts['clickWindowDays'],
        'engagement_window_days': opts['engagementWindowDays'],
        'view_window_days': opts['viewWindowDays'],
        'conversion_report_time': opts['conversionReportTime'],
        'attribution_types': opts['attributionTypes']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['pinterest_oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MetricsResponse;
      return this.apiClient.callApi(
        '/ad_accounts/{ad_account_id}/campaigns/targeting_analytics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the campaignsAnalytics operation.
     * @callback module:api/CampaignsApi~campaignsAnalyticsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CampaignsAnalyticsResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get campaign analytics
     * Get analytics for the specified campaigns in the specified <code>ad_account_id</code>, filtered by the specified options. - The token's user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager. - If granularity is not HOUR, the furthest back you can are allowed to pull data is 90 days before the current date in UTC time and the max time range supported is 90 days. - If granularity is HOUR, the furthest back you can are allowed to pull data is 8 days before the current date in UTC time and the max time range supported is 3 days.
     * @param {String} adAccountId Unique identifier of an ad account.
     * @param {Date} startDate Metric report start date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days back from today.
     * @param {Date} endDate Metric report end date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days past start_date.
     * @param {Array.<String>} campaignIds List of Campaign Ids to use to filter the results.
     * @param {Array.<module:model/String>} columns Columns to retrieve, encoded as a comma-separated string. **NOTE**: Any metrics defined as MICRO_DOLLARS returns a value based on the advertiser profile's currency field. For USD,($1/1,000,000, or $0.000001 - one one-ten-thousandth of a cent). it's microdollars. Otherwise, it's in microunits of the advertiser's currency.<br/>For example, if the advertiser's currency is GBP (British pound sterling), all MICRO_DOLLARS fields will be in GBP microunits (1/1,000,000 British pound).<br/>If a column has no value, it may not be returned
     * @param {module:model/Granularity} granularity TOTAL - metrics are aggregated over the specified date range.<br> DAY - metrics are broken down daily.<br> HOUR - metrics are broken down hourly.<br>WEEKLY - metrics are broken down weekly.<br>MONTHLY - metrics are broken down monthly
     * @param {Object} opts Optional parameters
     * @param {module:model/Number} [clickWindowDays = 30)] Number of days to use as the conversion attribution window for a pin click action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to `30` days.
     * @param {module:model/Number} [engagementWindowDays = 30)] Number of days to use as the conversion attribution window for an engagement action. Engagements include saves, closeups, link clicks, and carousel card swipes. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to `30` days.
     * @param {module:model/Number} [viewWindowDays = 1)] Number of days to use as the conversion attribution window for a view action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to `1` day.
     * @param {module:model/String} [conversionReportTime = 'TIME_OF_AD_ACTION')] The date by which the conversion metrics returned from this endpoint will be reported. There are two dates associated with a conversion event: the date that the user interacted with the ad, and the date that the user completed a conversion event.
     * @param {module:api/CampaignsApi~campaignsAnalyticsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CampaignsAnalyticsResponseInner>}
     */
    campaignsAnalytics(adAccountId, startDate, endDate, campaignIds, columns, granularity, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'adAccountId' is set
      if (adAccountId === undefined || adAccountId === null) {
        throw new Error("Missing the required parameter 'adAccountId' when calling campaignsAnalytics");
      }
      // verify the required parameter 'startDate' is set
      if (startDate === undefined || startDate === null) {
        throw new Error("Missing the required parameter 'startDate' when calling campaignsAnalytics");
      }
      // verify the required parameter 'endDate' is set
      if (endDate === undefined || endDate === null) {
        throw new Error("Missing the required parameter 'endDate' when calling campaignsAnalytics");
      }
      // verify the required parameter 'campaignIds' is set
      if (campaignIds === undefined || campaignIds === null) {
        throw new Error("Missing the required parameter 'campaignIds' when calling campaignsAnalytics");
      }
      // verify the required parameter 'columns' is set
      if (columns === undefined || columns === null) {
        throw new Error("Missing the required parameter 'columns' when calling campaignsAnalytics");
      }
      // verify the required parameter 'granularity' is set
      if (granularity === undefined || granularity === null) {
        throw new Error("Missing the required parameter 'granularity' when calling campaignsAnalytics");
      }

      let pathParams = {
        'ad_account_id': adAccountId
      };
      let queryParams = {
        'start_date': startDate,
        'end_date': endDate,
        'campaign_ids': this.apiClient.buildCollectionParam(campaignIds, 'multi'),
        'columns': this.apiClient.buildCollectionParam(columns, 'csv'),
        'granularity': granularity,
        'click_window_days': opts['clickWindowDays'],
        'engagement_window_days': opts['engagementWindowDays'],
        'view_window_days': opts['viewWindowDays'],
        'conversion_report_time': opts['conversionReportTime']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['pinterest_oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [CampaignsAnalyticsResponseInner];
      return this.apiClient.callApi(
        '/ad_accounts/{ad_account_id}/campaigns/analytics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the campaignsCreate operation.
     * @callback module:api/CampaignsApi~campaignsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CampaignCreateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create campaigns
     * Create multiple new campaigns. Every campaign has its own campaign_id and houses one or more ad groups, which contain one or more ads. For more, see <a href=\"https://help.pinterest.com/en/business/article/set-up-your-campaign/\">Set up your campaign</a>. <p/> <strong>Note:</strong> - The values for 'lifetime_spend_cap' and 'daily_spend_cap' are microcurrency amounts based on the currency field set in the advertiser's profile. (e.g. USD) <p/> <p>Microcurrency is used to track very small transactions, based on the currency set in the advertiser’s profile.</p> <p>A microcurrency unit is 10^(-6) of the standard unit of currency selected in the advertiser’s profile.</p>  <p><strong>Equivalency equations</strong>, using dollars as an example currency:</p> <ul>   <li>$1 = 1,000,000 microdollars</li>   <li>1 microdollar = $0.000001 </li> </ul> <p><strong>To convert between currency and microcurrency</strong>, using dollars as an example currency:</p> <ul>   <li>To convert dollars to microdollars, mutiply dollars by 1,000,000</li>   <li>To convert microdollars to dollars, divide microdollars by 1,000,000</li> </ul>
     * @param {String} adAccountId Unique identifier of an ad account.
     * @param {Array.<module:model/CampaignCreateRequest>} campaignCreateRequest Array of campaigns.
     * @param {module:api/CampaignsApi~campaignsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CampaignCreateResponse}
     */
    campaignsCreate(adAccountId, campaignCreateRequest, callback) {
      let postBody = campaignCreateRequest;
      // verify the required parameter 'adAccountId' is set
      if (adAccountId === undefined || adAccountId === null) {
        throw new Error("Missing the required parameter 'adAccountId' when calling campaignsCreate");
      }
      // verify the required parameter 'campaignCreateRequest' is set
      if (campaignCreateRequest === undefined || campaignCreateRequest === null) {
        throw new Error("Missing the required parameter 'campaignCreateRequest' when calling campaignsCreate");
      }

      let pathParams = {
        'ad_account_id': adAccountId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['pinterest_oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CampaignCreateResponse;
      return this.apiClient.callApi(
        '/ad_accounts/{ad_account_id}/campaigns', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the campaignsGet operation.
     * @callback module:api/CampaignsApi~campaignsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CampaignResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get campaign
     * Get a specific campaign given the campaign ID.
     * @param {String} adAccountId Unique identifier of an ad account.
     * @param {String} campaignId Campaign ID, must be associated with the ad account ID provided in the path.
     * @param {module:api/CampaignsApi~campaignsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CampaignResponse}
     */
    campaignsGet(adAccountId, campaignId, callback) {
      let postBody = null;
      // verify the required parameter 'adAccountId' is set
      if (adAccountId === undefined || adAccountId === null) {
        throw new Error("Missing the required parameter 'adAccountId' when calling campaignsGet");
      }
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling campaignsGet");
      }

      let pathParams = {
        'ad_account_id': adAccountId,
        'campaign_id': campaignId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['pinterest_oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CampaignResponse;
      return this.apiClient.callApi(
        '/ad_accounts/{ad_account_id}/campaigns/{campaign_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the campaignsList operation.
     * @callback module:api/CampaignsApi~campaignsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CampaignsList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List campaigns
     * Get a list of the campaigns in the specified <code>ad_account_id</code>, filtered by the specified options. - The token's user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
     * @param {String} adAccountId Unique identifier of an ad account.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [campaignIds] List of Campaign Ids to use to filter the results.
     * @param {Array.<module:model/String>} [entityStatuses] Entity status
     * @param {Number} [pageSize = 25)] Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/reference/pagination/'>Pagination</a> for more information.
     * @param {module:model/String} [order] The order in which to sort the items returned: “ASCENDING” or “DESCENDING” by ID. Note that higher-value IDs are associated with more-recently added items.
     * @param {String} [bookmark] Cursor used to fetch the next page of items
     * @param {module:api/CampaignsApi~campaignsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CampaignsList200Response}
     */
    campaignsList(adAccountId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'adAccountId' is set
      if (adAccountId === undefined || adAccountId === null) {
        throw new Error("Missing the required parameter 'adAccountId' when calling campaignsList");
      }

      let pathParams = {
        'ad_account_id': adAccountId
      };
      let queryParams = {
        'campaign_ids': this.apiClient.buildCollectionParam(opts['campaignIds'], 'multi'),
        'entity_statuses': this.apiClient.buildCollectionParam(opts['entityStatuses'], 'multi'),
        'page_size': opts['pageSize'],
        'order': opts['order'],
        'bookmark': opts['bookmark']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['pinterest_oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CampaignsList200Response;
      return this.apiClient.callApi(
        '/ad_accounts/{ad_account_id}/campaigns', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the campaignsUpdate operation.
     * @callback module:api/CampaignsApi~campaignsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CampaignUpdateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update campaigns
     * Update multiple ad campaigns based on campaign_ids. <p/> <strong>Note:</strong><p/>  - <p>The values for 'lifetime_spend_cap' and 'daily_spend_cap' are microcurrency amounts based on the currency field set in the advertiser's profile. (e.g. USD) <p/> <p>Microcurrency is used to track very small transactions, based on the currency set in the advertiser’s profile.</p> <p>A microcurrency unit is 10^(-6) of the standard unit of currency selected in the advertiser’ s profile.</p> <p><strong>Equivalency equations</strong>, using dollars as an example currency:</p> <ul>   <li>$1 = 1,000,000 microdollars</li>   <li>1 microdollar = $0.000001 </li> </ul> <p><strong>To convert between currency and microcurrency</strong>, using dollars as an example currency:</p> <ul>   <li>To convert dollars to microdollars, mutiply dollars by 1,000,000</li>   <li>To convert microdollars to dollars, divide microdollars by 1,000,000</li> </ul>
     * @param {String} adAccountId Unique identifier of an ad account.
     * @param {Array.<module:model/CampaignUpdateRequest>} campaignUpdateRequest Array of campaigns.
     * @param {module:api/CampaignsApi~campaignsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CampaignUpdateResponse}
     */
    campaignsUpdate(adAccountId, campaignUpdateRequest, callback) {
      let postBody = campaignUpdateRequest;
      // verify the required parameter 'adAccountId' is set
      if (adAccountId === undefined || adAccountId === null) {
        throw new Error("Missing the required parameter 'adAccountId' when calling campaignsUpdate");
      }
      // verify the required parameter 'campaignUpdateRequest' is set
      if (campaignUpdateRequest === undefined || campaignUpdateRequest === null) {
        throw new Error("Missing the required parameter 'campaignUpdateRequest' when calling campaignsUpdate");
      }

      let pathParams = {
        'ad_account_id': adAccountId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['pinterest_oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CampaignUpdateResponse;
      return this.apiClient.callApi(
        '/ad_accounts/{ad_account_id}/campaigns', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
