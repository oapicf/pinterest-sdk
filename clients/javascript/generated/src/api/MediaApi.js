/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';
import MediaList200Response from '../model/MediaList200Response';
import MediaUpload from '../model/MediaUpload';
import MediaUploadDetails from '../model/MediaUploadDetails';
import MediaUploadRequest from '../model/MediaUploadRequest';

/**
* Media service.
* @module api/MediaApi
* @version 1.1.1-pre.0
*/
export default class MediaApi {

    /**
    * Constructs a new MediaApi. 
    * @alias module:api/MediaApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the mediaCreate operation.
     * @callback module:api/MediaApi~mediaCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MediaUpload} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Register media upload
     * Register your intent to upload media  The response includes all of the information needed to upload the media to Pinterest.  To upload the media, make an HTTP POST request (using <tt>curl</tt>, for example) to <tt>upload_url</tt> using the <tt>Content-Type</tt> header value. Send the media file's contents as the request's <tt>file</tt> parameter and also include all of the parameters from <tt>upload_parameters</tt>.  <strong><a href='/docs/api-features/creating-boards-and-pins/#creating-video-pins'>Learn more</a></strong> about video Pin creation.
     * @param {module:model/MediaUploadRequest} mediaUploadRequest Create a media upload request
     * @param {module:api/MediaApi~mediaCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MediaUpload}
     */
    mediaCreate(mediaUploadRequest, callback) {
      let postBody = mediaUploadRequest;
      // verify the required parameter 'mediaUploadRequest' is set
      if (mediaUploadRequest === undefined || mediaUploadRequest === null) {
        throw new Error("Missing the required parameter 'mediaUploadRequest' when calling mediaCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['pinterest_oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MediaUpload;
      return this.apiClient.callApi(
        '/media', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mediaGet operation.
     * @callback module:api/MediaApi~mediaGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MediaUploadDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get media upload details
     * Get details for a registered media upload, including its current status.  <strong><a href='/docs/api-features/creating-boards-and-pins/#creating-video-pins'>Learn more</a></strong> about video Pin creation.
     * @param {String} mediaId Media identifier
     * @param {module:api/MediaApi~mediaGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MediaUploadDetails}
     */
    mediaGet(mediaId, callback) {
      let postBody = null;
      // verify the required parameter 'mediaId' is set
      if (mediaId === undefined || mediaId === null) {
        throw new Error("Missing the required parameter 'mediaId' when calling mediaGet");
      }

      let pathParams = {
        'media_id': mediaId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['pinterest_oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MediaUploadDetails;
      return this.apiClient.callApi(
        '/media/{media_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mediaList operation.
     * @callback module:api/MediaApi~mediaListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MediaList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List media uploads
     * List media uploads filtered by given parameters.  <strong><a href='/docs/api-features/creating-boards-and-pins/#creating-video-pins'>Learn more</a></strong> about video Pin creation.
     * @param {Object} opts Optional parameters
     * @param {String} [bookmark] Cursor used to fetch the next page of items
     * @param {Number} [pageSize = 25)] Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/reference/pagination/'>Pagination</a> for more information.
     * @param {module:api/MediaApi~mediaListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MediaList200Response}
     */
    mediaList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'bookmark': opts['bookmark'],
        'page_size': opts['pageSize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['pinterest_oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MediaList200Response;
      return this.apiClient.callApi(
        '/media', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
