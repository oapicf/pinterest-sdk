/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CustomerList from '../model/CustomerList';
import CustomerListRequest from '../model/CustomerListRequest';
import CustomerListUpdateRequest from '../model/CustomerListUpdateRequest';
import CustomerListsList200Response from '../model/CustomerListsList200Response';
import Error from '../model/Error';

/**
* CustomerLists service.
* @module api/CustomerListsApi
* @version 1.1.1-pre.0
*/
export default class CustomerListsApi {

    /**
    * Constructs a new CustomerListsApi. 
    * @alias module:api/CustomerListsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the customerListsCreate operation.
     * @callback module:api/CustomerListsApi~customerListsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomerList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create customer lists
     * <p>Create a customer list from your records(hashed or plain-text email addresses, or hashed MAIDs or IDFAs).</p> <p>A customer list is one of the four types of Pinterest audiences: for more information, see <a href=\"https://help.pinterest.com/en/business/article/audience-targeting\" target=\"_blank\">Audience targeting</a> or the <a href=\"/docs/api-features/targeting-overview/\" target=\"_blank\">Audiences</a> section of the ads management guide.<p/>  <p><b>Please review our <u><a href=\"https://help.pinterest.com/en/business/article/audience-targeting#section-13341\" target=\"_blank\">requirements</a></u> for what type of information is allowed when uploading a customer list.</b></p> <p>When you create a customer list, the system scans the list for existing Pinterest accounts; the list must include at least 100 Pinterest accounts. Your original list will be deleted when the matching process is complete. The filtered list – containing only the Pinterest accounts that were included in your starting list – is what will be used to create the audience.</p> <p>Note that once you have created your customer list, you must convert it into an audience (of the “ CUSTOMER_LIST” type) using the <a href=\"#operation/create_audience_handler\">create audience endpoint</a> before it can be used.</p>
     * @param {String} adAccountId Unique identifier of an ad account.
     * @param {module:model/CustomerListRequest} customerListRequest Parameters to get Customer lists info
     * @param {module:api/CustomerListsApi~customerListsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomerList}
     */
    customerListsCreate(adAccountId, customerListRequest, callback) {
      let postBody = customerListRequest;
      // verify the required parameter 'adAccountId' is set
      if (adAccountId === undefined || adAccountId === null) {
        throw new Error("Missing the required parameter 'adAccountId' when calling customerListsCreate");
      }
      // verify the required parameter 'customerListRequest' is set
      if (customerListRequest === undefined || customerListRequest === null) {
        throw new Error("Missing the required parameter 'customerListRequest' when calling customerListsCreate");
      }

      let pathParams = {
        'ad_account_id': adAccountId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['pinterest_oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CustomerList;
      return this.apiClient.callApi(
        '/ad_accounts/{ad_account_id}/customer_lists', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the customerListsGet operation.
     * @callback module:api/CustomerListsApi~customerListsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomerList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get customer list
     * Gets a specific customer list given the customer list ID.
     * @param {String} adAccountId Unique identifier of an ad account.
     * @param {String} customerListId Unique identifier of a customer list
     * @param {module:api/CustomerListsApi~customerListsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomerList}
     */
    customerListsGet(adAccountId, customerListId, callback) {
      let postBody = null;
      // verify the required parameter 'adAccountId' is set
      if (adAccountId === undefined || adAccountId === null) {
        throw new Error("Missing the required parameter 'adAccountId' when calling customerListsGet");
      }
      // verify the required parameter 'customerListId' is set
      if (customerListId === undefined || customerListId === null) {
        throw new Error("Missing the required parameter 'customerListId' when calling customerListsGet");
      }

      let pathParams = {
        'ad_account_id': adAccountId,
        'customer_list_id': customerListId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['pinterest_oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CustomerList;
      return this.apiClient.callApi(
        '/ad_accounts/{ad_account_id}/customer_lists/{customer_list_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the customerListsList operation.
     * @callback module:api/CustomerListsApi~customerListsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomerListsList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get customer lists
     * <p>Get a set of customer lists including id and name based on the filters provided.</p> <p>(Customer lists are a type of audience.) For more information, see <a href=\"https://help.pinterest.com/en/business/article/audience-targeting\" target=\"_blank\">Audience targeting</a>  or the <a href=\"/docs/api-features/targeting-overview/\" target=\"_blank\">Audiences</a> section of the ads management guide.</p>
     * @param {String} adAccountId Unique identifier of an ad account.
     * @param {Object} opts Optional parameters
     * @param {Number} [pageSize = 25)] Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/reference/pagination/'>Pagination</a> for more information.
     * @param {module:model/String} [order] The order in which to sort the items returned: “ASCENDING” or “DESCENDING” by ID. Note that higher-value IDs are associated with more-recently added items.
     * @param {String} [bookmark] Cursor used to fetch the next page of items
     * @param {module:api/CustomerListsApi~customerListsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomerListsList200Response}
     */
    customerListsList(adAccountId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'adAccountId' is set
      if (adAccountId === undefined || adAccountId === null) {
        throw new Error("Missing the required parameter 'adAccountId' when calling customerListsList");
      }

      let pathParams = {
        'ad_account_id': adAccountId
      };
      let queryParams = {
        'page_size': opts['pageSize'],
        'order': opts['order'],
        'bookmark': opts['bookmark']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['pinterest_oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CustomerListsList200Response;
      return this.apiClient.callApi(
        '/ad_accounts/{ad_account_id}/customer_lists', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the customerListsUpdate operation.
     * @callback module:api/CustomerListsApi~customerListsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomerList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update customer list
     * <p>Append or remove records to/from an existing customer list. (A customer list is one of the four types of Pinterest audiences.)</p> <p>When you add records to an existing customer list, the system scans the additions for existing Pinterest accounts; those are the records that will be added to your “CUSTOMER_LIST” audience. Your original list of records  to add will be deleted when the matching process is complete.</p> <p>For more information, see <a href=\"https://help.pinterest.com/en/business/article/audience-targeting\" target=\"_blank\">Audience targeting</a> or the <a href=\"/docs/api-features/targeting-overview/\" target=\"_blank\">Audiences</a> section of the ads management guide.</p>
     * @param {String} adAccountId Unique identifier of an ad account.
     * @param {String} customerListId Unique identifier of a customer list
     * @param {module:model/CustomerListUpdateRequest} customerListUpdateRequest 
     * @param {module:api/CustomerListsApi~customerListsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomerList}
     */
    customerListsUpdate(adAccountId, customerListId, customerListUpdateRequest, callback) {
      let postBody = customerListUpdateRequest;
      // verify the required parameter 'adAccountId' is set
      if (adAccountId === undefined || adAccountId === null) {
        throw new Error("Missing the required parameter 'adAccountId' when calling customerListsUpdate");
      }
      // verify the required parameter 'customerListId' is set
      if (customerListId === undefined || customerListId === null) {
        throw new Error("Missing the required parameter 'customerListId' when calling customerListsUpdate");
      }
      // verify the required parameter 'customerListUpdateRequest' is set
      if (customerListUpdateRequest === undefined || customerListUpdateRequest === null) {
        throw new Error("Missing the required parameter 'customerListUpdateRequest' when calling customerListsUpdate");
      }

      let pathParams = {
        'ad_account_id': adAccountId,
        'customer_list_id': customerListId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['pinterest_oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CustomerList;
      return this.apiClient.callApi(
        '/ad_accounts/{ad_account_id}/customer_lists/{customer_list_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
