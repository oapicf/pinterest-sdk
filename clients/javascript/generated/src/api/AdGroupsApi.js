/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AdGroupArrayResponse from '../model/AdGroupArrayResponse';
import AdGroupAudienceSizingRequest from '../model/AdGroupAudienceSizingRequest';
import AdGroupAudienceSizingResponse from '../model/AdGroupAudienceSizingResponse';
import AdGroupCreateRequest from '../model/AdGroupCreateRequest';
import AdGroupResponse from '../model/AdGroupResponse';
import AdGroupUpdateRequest from '../model/AdGroupUpdateRequest';
import AdGroupsAnalyticsResponseInner from '../model/AdGroupsAnalyticsResponseInner';
import AdGroupsList200Response from '../model/AdGroupsList200Response';
import AdsAnalyticsTargetingType from '../model/AdsAnalyticsTargetingType';
import BidFloor from '../model/BidFloor';
import BidFloorRequest from '../model/BidFloorRequest';
import ConversionReportAttributionType from '../model/ConversionReportAttributionType';
import Error from '../model/Error';
import Granularity from '../model/Granularity';
import MetricsResponse from '../model/MetricsResponse';

/**
* AdGroups service.
* @module api/AdGroupsApi
* @version 1.1.1-pre.0
*/
export default class AdGroupsApi {

    /**
    * Constructs a new AdGroupsApi. 
    * @alias module:api/AdGroupsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the adGroupsAnalytics operation.
     * @callback module:api/AdGroupsApi~adGroupsAnalyticsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AdGroupsAnalyticsResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get ad group analytics
     * Get analytics for the specified ad groups in the specified <code>ad_account_id</code>, filtered by the specified options. - The token's user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager. - If granularity is not HOUR, the furthest back you can are allowed to pull data is 90 days before the current date in UTC time and the max time range supported is 90 days. - If granularity is HOUR, the furthest back you can are allowed to pull data is 8 days before the current date in UTC time and the max time range supported is 3 days.
     * @param {String} adAccountId Unique identifier of an ad account.
     * @param {Date} startDate Metric report start date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days back from today.
     * @param {Date} endDate Metric report end date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days past start_date.
     * @param {Array.<String>} adGroupIds List of Ad group Ids to use to filter the results.
     * @param {Array.<module:model/String>} columns Columns to retrieve, encoded as a comma-separated string. **NOTE**: Any metrics defined as MICRO_DOLLARS returns a value based on the advertiser profile's currency field. For USD,($1/1,000,000, or $0.000001 - one one-ten-thousandth of a cent). it's microdollars. Otherwise, it's in microunits of the advertiser's currency.<br/>For example, if the advertiser's currency is GBP (British pound sterling), all MICRO_DOLLARS fields will be in GBP microunits (1/1,000,000 British pound).<br/>If a column has no value, it may not be returned
     * @param {module:model/Granularity} granularity TOTAL - metrics are aggregated over the specified date range.<br> DAY - metrics are broken down daily.<br> HOUR - metrics are broken down hourly.<br>WEEKLY - metrics are broken down weekly.<br>MONTHLY - metrics are broken down monthly
     * @param {Object} opts Optional parameters
     * @param {module:model/Number} [clickWindowDays = 30)] Number of days to use as the conversion attribution window for a pin click action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to `30` days.
     * @param {module:model/Number} [engagementWindowDays = 30)] Number of days to use as the conversion attribution window for an engagement action. Engagements include saves, closeups, link clicks, and carousel card swipes. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to `30` days.
     * @param {module:model/Number} [viewWindowDays = 1)] Number of days to use as the conversion attribution window for a view action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to `1` day.
     * @param {module:model/String} [conversionReportTime = 'TIME_OF_AD_ACTION')] The date by which the conversion metrics returned from this endpoint will be reported. There are two dates associated with a conversion event: the date that the user interacted with the ad, and the date that the user completed a conversion event.
     * @param {module:api/AdGroupsApi~adGroupsAnalyticsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AdGroupsAnalyticsResponseInner>}
     */
    adGroupsAnalytics(adAccountId, startDate, endDate, adGroupIds, columns, granularity, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'adAccountId' is set
      if (adAccountId === undefined || adAccountId === null) {
        throw new Error("Missing the required parameter 'adAccountId' when calling adGroupsAnalytics");
      }
      // verify the required parameter 'startDate' is set
      if (startDate === undefined || startDate === null) {
        throw new Error("Missing the required parameter 'startDate' when calling adGroupsAnalytics");
      }
      // verify the required parameter 'endDate' is set
      if (endDate === undefined || endDate === null) {
        throw new Error("Missing the required parameter 'endDate' when calling adGroupsAnalytics");
      }
      // verify the required parameter 'adGroupIds' is set
      if (adGroupIds === undefined || adGroupIds === null) {
        throw new Error("Missing the required parameter 'adGroupIds' when calling adGroupsAnalytics");
      }
      // verify the required parameter 'columns' is set
      if (columns === undefined || columns === null) {
        throw new Error("Missing the required parameter 'columns' when calling adGroupsAnalytics");
      }
      // verify the required parameter 'granularity' is set
      if (granularity === undefined || granularity === null) {
        throw new Error("Missing the required parameter 'granularity' when calling adGroupsAnalytics");
      }

      let pathParams = {
        'ad_account_id': adAccountId
      };
      let queryParams = {
        'start_date': startDate,
        'end_date': endDate,
        'ad_group_ids': this.apiClient.buildCollectionParam(adGroupIds, 'multi'),
        'columns': this.apiClient.buildCollectionParam(columns, 'csv'),
        'granularity': granularity,
        'click_window_days': opts['clickWindowDays'],
        'engagement_window_days': opts['engagementWindowDays'],
        'view_window_days': opts['viewWindowDays'],
        'conversion_report_time': opts['conversionReportTime']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['pinterest_oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AdGroupsAnalyticsResponseInner];
      return this.apiClient.callApi(
        '/ad_accounts/{ad_account_id}/ad_groups/analytics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adGroupsAudienceSizing operation.
     * @callback module:api/AdGroupsApi~adGroupsAudienceSizingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AdGroupAudienceSizingResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get audience sizing
     * Get potential audience size for an ad group with given targeting criteria.  Potential audience size estimates the number of people you may be able to reach per month with your campaign.  It is based on historical advertising data and the targeting criteria you select. It does not guarantee results or take into account factors such as bid, budget, schedule, seasonality or product experiments.
     * @param {String} adAccountId Unique identifier of an ad account.
     * @param {Object} opts Optional parameters
     * @param {module:model/AdGroupAudienceSizingRequest} [adGroupAudienceSizingRequest] 
     * @param {module:api/AdGroupsApi~adGroupsAudienceSizingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AdGroupAudienceSizingResponse}
     */
    adGroupsAudienceSizing(adAccountId, opts, callback) {
      opts = opts || {};
      let postBody = opts['adGroupAudienceSizingRequest'];
      // verify the required parameter 'adAccountId' is set
      if (adAccountId === undefined || adAccountId === null) {
        throw new Error("Missing the required parameter 'adAccountId' when calling adGroupsAudienceSizing");
      }

      let pathParams = {
        'ad_account_id': adAccountId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['pinterest_oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AdGroupAudienceSizingResponse;
      return this.apiClient.callApi(
        '/ad_accounts/{ad_account_id}/ad_groups/audience_sizing', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adGroupsBidFloorGet operation.
     * @callback module:api/AdGroupsApi~adGroupsBidFloorGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BidFloor} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get bid floors
     * List bid floors for your campaign configuration. Bid floors are given in microcurrency values based on the currency in the bid floor specification. <p/> <p>Microcurrency is used to track very small transactions, based on the currency set in the advertiser’s profile.</p> <p>A microcurrency unit is 10^(-6) of the standard unit of currency selected in the advertiser’ s profile.</p> <p><strong>Equivalency equations</strong>, using dollars as an example currency:</p> <ul>   <li>$1 = 1,000,000 microdollars</li>   <li>1 microdollar = $0.000001 </li> </ul> <p><strong>To convert between currency and microcurrency</strong>, using dollars as an example currency:</p> <ul>   <li>To convert dollars to microdollars, mutiply dollars by 1,000,000</li>   <li>To convert microdollars to dollars, divide microdollars by 1,000,000</li>  </ul> For more on bid floors see <a class=\"reference external\" href=\"https://help.pinterest.com/en/business/article/set-your-bid\"> Set your bid</a>.
     * @param {String} adAccountId Unique identifier of an ad account.
     * @param {module:model/BidFloorRequest} bidFloorRequest Parameters to get bid_floor info
     * @param {module:api/AdGroupsApi~adGroupsBidFloorGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BidFloor}
     */
    adGroupsBidFloorGet(adAccountId, bidFloorRequest, callback) {
      let postBody = bidFloorRequest;
      // verify the required parameter 'adAccountId' is set
      if (adAccountId === undefined || adAccountId === null) {
        throw new Error("Missing the required parameter 'adAccountId' when calling adGroupsBidFloorGet");
      }
      // verify the required parameter 'bidFloorRequest' is set
      if (bidFloorRequest === undefined || bidFloorRequest === null) {
        throw new Error("Missing the required parameter 'bidFloorRequest' when calling adGroupsBidFloorGet");
      }

      let pathParams = {
        'ad_account_id': adAccountId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['pinterest_oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BidFloor;
      return this.apiClient.callApi(
        '/ad_accounts/{ad_account_id}/bid_floor', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adGroupsCreate operation.
     * @callback module:api/AdGroupsApi~adGroupsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AdGroupArrayResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create ad groups
     * Create multiple new ad groups. All ads in a given ad group will have the same budget, bid, run dates, targeting, and placement (search, browse, other). For more information, <a href=\"https://help.pinterest.com/en/business/article/campaign-structure\" target=\"_blank\"> click here</a>.</p> <strong>Note:</strong> - 'bid_in_micro_currency' and 'budget_in_micro_currency' should be expressed in microcurrency amounts based on the currency field set in the advertiser's profile.<p/> <p>Microcurrency is used to track very small transactions, based on the currency set in the advertiser’s profile.</p> <p>A microcurrency unit is 10^(-6) of the standard unit of currency selected in the advertiser’s profile.</p>  <p><strong>Equivalency equations</strong>, using dollars as an example currency:</p> <ul>   <li>$1 = 1,000,000 microdollars</li>   <li>1 microdollar = $0.000001 </li> </ul> <p><strong>To convert between currency and microcurrency</strong>, using dollars as an example currency:</p> <ul>   <li>To convert dollars to microdollars, mutiply dollars by 1,000,000</li>   <li>To convert microdollars to dollars, divide microdollars by 1,000,000</li> </ul> - Ad groups belong to ad campaigns. Some types of campaigns (e.g. budget optimization) have limits on the number of ad groups they can hold. If you exceed those limits, you will get an error message. - Start and end time cannot be set for ad groups that belong to CBO campaigns. Currently, campaigns with the following objective types: TRAFFIC, AWARENESS, WEB_CONVERSIONS, and CATALOG_SALES will default to CBO.
     * @param {String} adAccountId Unique identifier of an ad account.
     * @param {Array.<module:model/AdGroupCreateRequest>} adGroupCreateRequest List of ad groups to create, size limit [1, 30].
     * @param {module:api/AdGroupsApi~adGroupsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AdGroupArrayResponse}
     */
    adGroupsCreate(adAccountId, adGroupCreateRequest, callback) {
      let postBody = adGroupCreateRequest;
      // verify the required parameter 'adAccountId' is set
      if (adAccountId === undefined || adAccountId === null) {
        throw new Error("Missing the required parameter 'adAccountId' when calling adGroupsCreate");
      }
      // verify the required parameter 'adGroupCreateRequest' is set
      if (adGroupCreateRequest === undefined || adGroupCreateRequest === null) {
        throw new Error("Missing the required parameter 'adGroupCreateRequest' when calling adGroupsCreate");
      }

      let pathParams = {
        'ad_account_id': adAccountId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['pinterest_oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AdGroupArrayResponse;
      return this.apiClient.callApi(
        '/ad_accounts/{ad_account_id}/ad_groups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adGroupsGet operation.
     * @callback module:api/AdGroupsApi~adGroupsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AdGroupResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get ad group
     * Get a specific ad given the ad ID. If your pin is rejected, rejected_reasons will contain additional information from the Ad Review process. For more information about our policies and rejection reasons see the <a href=\"https://www.pinterest.com/_/_/policy/advertising-guidelines/\" target=\"_blank\">Pinterest advertising standards</a>.
     * @param {String} adAccountId Unique identifier of an ad account.
     * @param {String} adGroupId Unique identifier of an ad group.
     * @param {module:api/AdGroupsApi~adGroupsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AdGroupResponse}
     */
    adGroupsGet(adAccountId, adGroupId, callback) {
      let postBody = null;
      // verify the required parameter 'adAccountId' is set
      if (adAccountId === undefined || adAccountId === null) {
        throw new Error("Missing the required parameter 'adAccountId' when calling adGroupsGet");
      }
      // verify the required parameter 'adGroupId' is set
      if (adGroupId === undefined || adGroupId === null) {
        throw new Error("Missing the required parameter 'adGroupId' when calling adGroupsGet");
      }

      let pathParams = {
        'ad_account_id': adAccountId,
        'ad_group_id': adGroupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['pinterest_oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AdGroupResponse;
      return this.apiClient.callApi(
        '/ad_accounts/{ad_account_id}/ad_groups/{ad_group_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adGroupsList operation.
     * @callback module:api/AdGroupsApi~adGroupsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AdGroupsList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List ad groups
     * List ad groups based on provided campaign IDs or ad group IDs.(campaign_ids or ad_group_ids). <p/> <strong>Note:</strong><p/> Provide only campaign_id or ad_group_id. Do not provide both.
     * @param {String} adAccountId Unique identifier of an ad account.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [campaignIds] List of Campaign Ids to use to filter the results.
     * @param {Array.<String>} [adGroupIds] List of Ad group Ids to use to filter the results.
     * @param {Array.<module:model/String>} [entityStatuses] Entity status
     * @param {Number} [pageSize = 25)] Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/reference/pagination/'>Pagination</a> for more information.
     * @param {module:model/String} [order] The order in which to sort the items returned: “ASCENDING” or “DESCENDING” by ID. Note that higher-value IDs are associated with more-recently added items.
     * @param {String} [bookmark] Cursor used to fetch the next page of items
     * @param {Boolean} [translateInterestsToNames = false)] Return interests as text names (if value is true) rather than topic IDs.
     * @param {module:api/AdGroupsApi~adGroupsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AdGroupsList200Response}
     */
    adGroupsList(adAccountId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'adAccountId' is set
      if (adAccountId === undefined || adAccountId === null) {
        throw new Error("Missing the required parameter 'adAccountId' when calling adGroupsList");
      }

      let pathParams = {
        'ad_account_id': adAccountId
      };
      let queryParams = {
        'campaign_ids': this.apiClient.buildCollectionParam(opts['campaignIds'], 'multi'),
        'ad_group_ids': this.apiClient.buildCollectionParam(opts['adGroupIds'], 'multi'),
        'entity_statuses': this.apiClient.buildCollectionParam(opts['entityStatuses'], 'multi'),
        'page_size': opts['pageSize'],
        'order': opts['order'],
        'bookmark': opts['bookmark'],
        'translate_interests_to_names': opts['translateInterestsToNames']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['pinterest_oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AdGroupsList200Response;
      return this.apiClient.callApi(
        '/ad_accounts/{ad_account_id}/ad_groups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adGroupsTargetingAnalyticsGet operation.
     * @callback module:api/AdGroupsApi~adGroupsTargetingAnalyticsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MetricsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get targeting analytics for ad groups
     * Get targeting analytics for one or more ad groups. For the requested ad group(s) and metrics, the response will include the requested metric information (e.g. SPEND_IN_DOLLAR) for the requested target type (e.g. \"age_bucket\") for applicable values (e.g. \"45-49\"). <p/> - The token's user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager. - If granularity is not HOUR, the furthest back you can are allowed to pull data is 90 days before the current date in UTC time and the max time range supported is 90 days. - If granularity is HOUR, the furthest back you can are allowed to pull data is 8 days before the current date in UTC time and the max time range supported is 3 days.
     * @param {String} adAccountId Unique identifier of an ad account.
     * @param {Array.<String>} adGroupIds List of Ad group Ids to use to filter the results.
     * @param {Date} startDate Metric report start date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days back from today.
     * @param {Date} endDate Metric report end date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days past start_date.
     * @param {Array.<module:model/AdsAnalyticsTargetingType>} targetingTypes Targeting type breakdowns for the report. The reporting per targeting type <br> is independent from each other. [\"AGE_BUCKET_AND_GENDER\"] is in BETA and not yet available to all users.
     * @param {Array.<module:model/String>} columns Columns to retrieve, encoded as a comma-separated string. **NOTE**: Any metrics defined as MICRO_DOLLARS returns a value based on the advertiser profile's currency field. For USD,($1/1,000,000, or $0.000001 - one one-ten-thousandth of a cent). it's microdollars. Otherwise, it's in microunits of the advertiser's currency.<br/>For example, if the advertiser's currency is GBP (British pound sterling), all MICRO_DOLLARS fields will be in GBP microunits (1/1,000,000 British pound).<br/>If a column has no value, it may not be returned
     * @param {module:model/Granularity} granularity TOTAL - metrics are aggregated over the specified date range.<br> DAY - metrics are broken down daily.<br> HOUR - metrics are broken down hourly.<br>WEEKLY - metrics are broken down weekly.<br>MONTHLY - metrics are broken down monthly
     * @param {Object} opts Optional parameters
     * @param {module:model/Number} [clickWindowDays = 30)] Number of days to use as the conversion attribution window for a pin click action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to `30` days.
     * @param {module:model/Number} [engagementWindowDays = 30)] Number of days to use as the conversion attribution window for an engagement action. Engagements include saves, closeups, link clicks, and carousel card swipes. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to `30` days.
     * @param {module:model/Number} [viewWindowDays = 1)] Number of days to use as the conversion attribution window for a view action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to `1` day.
     * @param {module:model/String} [conversionReportTime = 'TIME_OF_AD_ACTION')] The date by which the conversion metrics returned from this endpoint will be reported. There are two dates associated with a conversion event: the date that the user interacted with the ad, and the date that the user completed a conversion event.
     * @param {module:model/ConversionReportAttributionType} [attributionTypes] List of types of attribution for the conversion report
     * @param {module:api/AdGroupsApi~adGroupsTargetingAnalyticsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MetricsResponse}
     */
    adGroupsTargetingAnalyticsGet(adAccountId, adGroupIds, startDate, endDate, targetingTypes, columns, granularity, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'adAccountId' is set
      if (adAccountId === undefined || adAccountId === null) {
        throw new Error("Missing the required parameter 'adAccountId' when calling adGroupsTargetingAnalyticsGet");
      }
      // verify the required parameter 'adGroupIds' is set
      if (adGroupIds === undefined || adGroupIds === null) {
        throw new Error("Missing the required parameter 'adGroupIds' when calling adGroupsTargetingAnalyticsGet");
      }
      // verify the required parameter 'startDate' is set
      if (startDate === undefined || startDate === null) {
        throw new Error("Missing the required parameter 'startDate' when calling adGroupsTargetingAnalyticsGet");
      }
      // verify the required parameter 'endDate' is set
      if (endDate === undefined || endDate === null) {
        throw new Error("Missing the required parameter 'endDate' when calling adGroupsTargetingAnalyticsGet");
      }
      // verify the required parameter 'targetingTypes' is set
      if (targetingTypes === undefined || targetingTypes === null) {
        throw new Error("Missing the required parameter 'targetingTypes' when calling adGroupsTargetingAnalyticsGet");
      }
      // verify the required parameter 'columns' is set
      if (columns === undefined || columns === null) {
        throw new Error("Missing the required parameter 'columns' when calling adGroupsTargetingAnalyticsGet");
      }
      // verify the required parameter 'granularity' is set
      if (granularity === undefined || granularity === null) {
        throw new Error("Missing the required parameter 'granularity' when calling adGroupsTargetingAnalyticsGet");
      }

      let pathParams = {
        'ad_account_id': adAccountId
      };
      let queryParams = {
        'ad_group_ids': this.apiClient.buildCollectionParam(adGroupIds, 'multi'),
        'start_date': startDate,
        'end_date': endDate,
        'targeting_types': this.apiClient.buildCollectionParam(targetingTypes, 'csv'),
        'columns': this.apiClient.buildCollectionParam(columns, 'csv'),
        'granularity': granularity,
        'click_window_days': opts['clickWindowDays'],
        'engagement_window_days': opts['engagementWindowDays'],
        'view_window_days': opts['viewWindowDays'],
        'conversion_report_time': opts['conversionReportTime'],
        'attribution_types': opts['attributionTypes']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['pinterest_oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MetricsResponse;
      return this.apiClient.callApi(
        '/ad_accounts/{ad_account_id}/ad_groups/targeting_analytics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adGroupsUpdate operation.
     * @callback module:api/AdGroupsApi~adGroupsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AdGroupArrayResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update ad groups
     * Update multiple existing ad groups.
     * @param {String} adAccountId Unique identifier of an ad account.
     * @param {Array.<module:model/AdGroupUpdateRequest>} adGroupUpdateRequest List of ad groups to update, size limit [1, 30].
     * @param {module:api/AdGroupsApi~adGroupsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AdGroupArrayResponse}
     */
    adGroupsUpdate(adAccountId, adGroupUpdateRequest, callback) {
      let postBody = adGroupUpdateRequest;
      // verify the required parameter 'adAccountId' is set
      if (adAccountId === undefined || adAccountId === null) {
        throw new Error("Missing the required parameter 'adAccountId' when calling adGroupsUpdate");
      }
      // verify the required parameter 'adGroupUpdateRequest' is set
      if (adGroupUpdateRequest === undefined || adGroupUpdateRequest === null) {
        throw new Error("Missing the required parameter 'adGroupUpdateRequest' when calling adGroupsUpdate");
      }

      let pathParams = {
        'ad_account_id': adAccountId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['pinterest_oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AdGroupArrayResponse;
      return this.apiClient.callApi(
        '/ad_accounts/{ad_account_id}/ad_groups', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
