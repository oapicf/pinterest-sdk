/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';
import Pin from '../model/Pin';
import PinAnalyticsMetricsResponse from '../model/PinAnalyticsMetricsResponse';
import PinCreate from '../model/PinCreate';
import PinUpdate from '../model/PinUpdate';
import PinsAnalyticsMetricTypesParameterInner from '../model/PinsAnalyticsMetricTypesParameterInner';
import PinsList200Response from '../model/PinsList200Response';
import PinsSaveRequest from '../model/PinsSaveRequest';

/**
* Pins service.
* @module api/PinsApi
* @version 1.1.1-pre.0
*/
export default class PinsApi {

    /**
    * Constructs a new PinsApi. 
    * @alias module:api/PinsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the multiPinsAnalytics operation.
     * @callback module:api/PinsApi~multiPinsAnalyticsCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: Object}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get multiple Pin analytics
     * <strong>This endpoint is currently in beta and not available to all apps. <a href='/docs/getting-started/beta-and-advanced-access/'>Learn more</a>.</strong>  Get analytics for multiple pins owned by the \"operation user_account\" - or on a group board that has been shared with this account. - The maximum number of pins supported in a single request is 100. - By default, the \"operation user_account\" is the token user_account.  Optional: Business Access: Specify an <code>ad_account_id</code> (obtained via <a href=\"/docs/api/v5/#operation/ad_accounts/list\">List ad accounts</a>) to use the owner of that ad_account as the \"operation user_account\". In order to do this, the token user_account must have one of the following <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a> roles on the ad_account:  - For Pins on public or protected boards: Admin, Analyst. - For Pins on secret boards: Admin.  If Pin was created before <code>2023-03-20</code> lifetime metrics will only be available for Video and Idea Pin formats. Lifetime metrics are available for all Pin formats since then.
     * @param {Array.<String>} pinIds List of Pin IDs.
     * @param {Date} startDate Metric report start date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days back from today.
     * @param {Date} endDate Metric report end date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days past start_date.
     * @param {Array.<module:model/PinsAnalyticsMetricTypesParameterInner>} metricTypes Pin metric types to get data for.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [appTypes = 'ALL')] Apps or devices to get data for, default is all.
     * @param {String} [adAccountId] Unique identifier of an ad account.
     * @param {module:api/PinsApi~multiPinsAnalyticsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: Object}>}
     */
    multiPinsAnalytics(pinIds, startDate, endDate, metricTypes, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'pinIds' is set
      if (pinIds === undefined || pinIds === null) {
        throw new Error("Missing the required parameter 'pinIds' when calling multiPinsAnalytics");
      }
      // verify the required parameter 'startDate' is set
      if (startDate === undefined || startDate === null) {
        throw new Error("Missing the required parameter 'startDate' when calling multiPinsAnalytics");
      }
      // verify the required parameter 'endDate' is set
      if (endDate === undefined || endDate === null) {
        throw new Error("Missing the required parameter 'endDate' when calling multiPinsAnalytics");
      }
      // verify the required parameter 'metricTypes' is set
      if (metricTypes === undefined || metricTypes === null) {
        throw new Error("Missing the required parameter 'metricTypes' when calling multiPinsAnalytics");
      }

      let pathParams = {
      };
      let queryParams = {
        'pin_ids': this.apiClient.buildCollectionParam(pinIds, 'multi'),
        'start_date': startDate,
        'end_date': endDate,
        'app_types': opts['appTypes'],
        'metric_types': this.apiClient.buildCollectionParam(metricTypes, 'csv'),
        'ad_account_id': opts['adAccountId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['pinterest_oauth2', 'client_credentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': Object};
      return this.apiClient.callApi(
        '/pins/analytics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pinsAnalytics operation.
     * @callback module:api/PinsApi~pinsAnalyticsCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, module:model/{String: PinAnalyticsMetricsResponse}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Pin analytics
     * Get analytics for a Pin owned by the \"operation user_account\" - or on a group board that has been shared with this account. - By default, the \"operation user_account\" is the token user_account.  Optional: Business Access: Specify an <code>ad_account_id</code> (obtained via <a href=\"/docs/api/v5/#operation/ad_accounts/list\">List ad accounts</a>) to use the owner of that ad_account as the \"operation user_account\". In order to do this, the token user_account must have one of the following <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a> roles on the ad_account:  - For Pins on public or protected boards: Admin, Analyst. - For Pins on secret boards: Admin.  If Pin was created before <code>2023-03-20</code> lifetime metrics will only be available for Video and Idea Pin formats. Lifetime metrics are available for all Pin formats since then.
     * @param {String} pinId Unique identifier of a Pin.
     * @param {Date} startDate Metric report start date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days back from today.
     * @param {Date} endDate Metric report end date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days past start_date.
     * @param {Array.<module:model/PinsAnalyticsMetricTypesParameterInner>} metricTypes Pin metric types to get data for. VIDEO_MRC_VIEW are Video views, VIDEO_V50_WATCH_TIME is Total play time. If Pin was created before <code>2023-03-20</code>, Profile visits and Follows will only be available for Idea Pins. These metrics are available for all Pin formats since then. Keep in mind this cannot have ALL if split_field is set to any value other than <code>NO_SPLIT</code>.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [appTypes = 'ALL')] Apps or devices to get data for, default is all.
     * @param {module:model/String} [splitField = 'NO_SPLIT')] How to split the data into groups. Not including this param means data won't be split.
     * @param {String} [adAccountId] Unique identifier of an ad account.
     * @param {module:api/PinsApi~pinsAnalyticsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, module:model/{String: PinAnalyticsMetricsResponse}>}
     */
    pinsAnalytics(pinId, startDate, endDate, metricTypes, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'pinId' is set
      if (pinId === undefined || pinId === null) {
        throw new Error("Missing the required parameter 'pinId' when calling pinsAnalytics");
      }
      // verify the required parameter 'startDate' is set
      if (startDate === undefined || startDate === null) {
        throw new Error("Missing the required parameter 'startDate' when calling pinsAnalytics");
      }
      // verify the required parameter 'endDate' is set
      if (endDate === undefined || endDate === null) {
        throw new Error("Missing the required parameter 'endDate' when calling pinsAnalytics");
      }
      // verify the required parameter 'metricTypes' is set
      if (metricTypes === undefined || metricTypes === null) {
        throw new Error("Missing the required parameter 'metricTypes' when calling pinsAnalytics");
      }

      let pathParams = {
        'pin_id': pinId
      };
      let queryParams = {
        'start_date': startDate,
        'end_date': endDate,
        'app_types': opts['appTypes'],
        'metric_types': this.apiClient.buildCollectionParam(metricTypes, 'csv'),
        'split_field': opts['splitField'],
        'ad_account_id': opts['adAccountId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['pinterest_oauth2', 'client_credentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': PinAnalyticsMetricsResponse};
      return this.apiClient.callApi(
        '/pins/{pin_id}/analytics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pinsCreate operation.
     * @callback module:api/PinsApi~pinsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Pin} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Pin
     * Create a Pin on a board or board section owned by the \"operation user_account\".  Note: If the current \"operation user_account\" (defined by the access token) has access to another user's Ad Accounts via Pinterest Business Access, you can modify your request to make use of the current operation_user_account's permissions to those Ad Accounts by including the ad_account_id in the path parameters for the request (e.g. .../?ad_account_id=12345&...).  - This function is intended solely for publishing new content created by the user. If you are interested in saving content created by others to your Pinterest boards, sometimes called 'curated content', please use our <a href='/docs/web-features/add-ons-overview/'>Save button</a> instead. For more tips on creating fresh content for Pinterest, review our <a href='/docs/api-features/content-overview/'>Content App Solutions Guide</a>.  <strong><a href='/docs/api-features/creating-boards-and-pins/#creating-video-pins'>Learn more</a></strong> about video Pin creation.
     * @param {module:model/PinCreate} pinCreate Create a new Pin.
     * @param {Object} opts Optional parameters
     * @param {String} [adAccountId] Unique identifier of an ad account.
     * @param {module:api/PinsApi~pinsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Pin}
     */
    pinsCreate(pinCreate, opts, callback) {
      opts = opts || {};
      let postBody = pinCreate;
      // verify the required parameter 'pinCreate' is set
      if (pinCreate === undefined || pinCreate === null) {
        throw new Error("Missing the required parameter 'pinCreate' when calling pinsCreate");
      }

      let pathParams = {
      };
      let queryParams = {
        'ad_account_id': opts['adAccountId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['pinterest_oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Pin;
      return this.apiClient.callApi(
        '/pins', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pinsDelete operation.
     * @callback module:api/PinsApi~pinsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Pin
     * Delete a Pins owned by the \"operation user_account\" - or on a group board that has been shared with this account. - By default, the \"operation user_account\" is the token user_account.  Optional: Business Access: Specify an <code>ad_account_id</code> (obtained via <a href='/docs/api/v5/#operation/ad_accounts/list'>List ad accounts</a>) to use the owner of that ad_account as the \"operation user_account\". In order to do this, the token user_account must have one of the following <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a> roles on the ad_account:  - For Pins on public or protected boards: Owner, Admin, Analyst, Campaign Manager. - For Pins on secret boards: Owner, Admin.
     * @param {String} pinId Unique identifier of a Pin.
     * @param {Object} opts Optional parameters
     * @param {String} [adAccountId] Unique identifier of an ad account.
     * @param {module:api/PinsApi~pinsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    pinsDelete(pinId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'pinId' is set
      if (pinId === undefined || pinId === null) {
        throw new Error("Missing the required parameter 'pinId' when calling pinsDelete");
      }

      let pathParams = {
        'pin_id': pinId
      };
      let queryParams = {
        'ad_account_id': opts['adAccountId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['pinterest_oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/pins/{pin_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pinsGet operation.
     * @callback module:api/PinsApi~pinsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Pin} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Pin
     * Get a Pin owned by the \"operation user_account\" - or on a group board that has been shared with this account. - By default, the \"operation user_account\" is the token user_account.  Optional: Business Access: Specify an <code>ad_account_id</code> (obtained via <a href='/docs/api/v5/#operation/ad_accounts/list'>List ad accounts</a>) to use the owner of that ad_account as the \"operation user_account\". In order to do this, the token user_account must have one of the following <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a> roles on the ad_account:  - For Pins on public or protected boards: Owner, Admin, Analyst, Campaign Manager. - For Pins on secret boards: Owner, Admin.
     * @param {String} pinId Unique identifier of a Pin.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [pinMetrics = false)] Specify whether to return 90d and lifetime Pin metrics. Total comments and total reactions are only available with lifetime Pin metrics. If Pin was created before <code>2023-03-20</code> lifetime metrics will only be available for Video and Idea Pin formats. Lifetime metrics are available for all Pin formats since then.
     * @param {String} [adAccountId] Unique identifier of an ad account.
     * @param {module:api/PinsApi~pinsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Pin}
     */
    pinsGet(pinId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'pinId' is set
      if (pinId === undefined || pinId === null) {
        throw new Error("Missing the required parameter 'pinId' when calling pinsGet");
      }

      let pathParams = {
        'pin_id': pinId
      };
      let queryParams = {
        'pin_metrics': opts['pinMetrics'],
        'ad_account_id': opts['adAccountId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['pinterest_oauth2', 'client_credentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Pin;
      return this.apiClient.callApi(
        '/pins/{pin_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pinsList operation.
     * @callback module:api/PinsApi~pinsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PinsList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Pins
     * Get a list of the Pins owned by the \"operation user_account\".   - By default, the \"operation user_account\" is the token user_account.   - All Pins owned by the \"operation user_account\" are included, regardless of who owns the board they are on. Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\".  Disclaimer: there are known performance issues when filtering by field <code>creative_type</code> and including protected pins. If your request is timing out in this scenario we encourage you to use <a href='/docs/api/v5/#operation/boards/list_pins'>GET List Pins on Board</a>.
     * @param {Object} opts Optional parameters
     * @param {String} [bookmark] Cursor used to fetch the next page of items
     * @param {Number} [pageSize = 25)] Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/reference/pagination/'>Pagination</a> for more information.
     * @param {module:model/String} [pinFilter] Pin filter.
     * @param {Boolean} [includeProtectedPins = false)] Specify if return pins from protected boards
     * @param {module:model/String} [pinType] The type of pins to return, currently only enabled for private pins
     * @param {Array.<module:model/String>} [creativeTypes] Pin creative types filter. </p><strong>Note:</strong> SHOP_THE_PIN has been deprecated. Please use COLLECTION instead.
     * @param {String} [adAccountId] Unique identifier of an ad account.
     * @param {Boolean} [pinMetrics = false)] Specify whether to return 90d and lifetime Pin metrics. Total comments and total reactions are only available with lifetime Pin metrics. If Pin was created before <code>2023-03-20</code> lifetime metrics will only be available for Video and Idea Pin formats. Lifetime metrics are available for all Pin formats since then.
     * @param {module:api/PinsApi~pinsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PinsList200Response}
     */
    pinsList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'bookmark': opts['bookmark'],
        'page_size': opts['pageSize'],
        'pin_filter': opts['pinFilter'],
        'include_protected_pins': opts['includeProtectedPins'],
        'pin_type': opts['pinType'],
        'creative_types': this.apiClient.buildCollectionParam(opts['creativeTypes'], 'multi'),
        'ad_account_id': opts['adAccountId'],
        'pin_metrics': opts['pinMetrics']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['pinterest_oauth2', 'client_credentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PinsList200Response;
      return this.apiClient.callApi(
        '/pins', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pinsSave operation.
     * @callback module:api/PinsApi~pinsSaveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Pin} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Save Pin
     * Save a Pin on a board or board section owned by the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account. Optional: Business Access: Specify an <code>ad_account_id</code> (obtained via <a href='/docs/api/v5/#operation/ad_accounts/list'>List ad accounts</a>) to use the owner of that ad_account as the \"operation user_account\". In order to do this, the token user_account must have one of the following <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a> roles on the ad_account:  - For Pins on public or protected boards: Owner, Admin, Analyst, Campaign Manager. - For Pins on secret boards: Owner, Admin.  - Any Pin type can be saved: image Pin, video Pin, Idea Pin, product Pin, etc. - Any public Pin can be saved given a pin ID.
     * @param {String} pinId Unique identifier of a Pin.
     * @param {module:model/PinsSaveRequest} pinsSaveRequest Request object used to save an existing pin
     * @param {Object} opts Optional parameters
     * @param {String} [adAccountId] Unique identifier of an ad account.
     * @param {module:api/PinsApi~pinsSaveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Pin}
     */
    pinsSave(pinId, pinsSaveRequest, opts, callback) {
      opts = opts || {};
      let postBody = pinsSaveRequest;
      // verify the required parameter 'pinId' is set
      if (pinId === undefined || pinId === null) {
        throw new Error("Missing the required parameter 'pinId' when calling pinsSave");
      }
      // verify the required parameter 'pinsSaveRequest' is set
      if (pinsSaveRequest === undefined || pinsSaveRequest === null) {
        throw new Error("Missing the required parameter 'pinsSaveRequest' when calling pinsSave");
      }

      let pathParams = {
        'pin_id': pinId
      };
      let queryParams = {
        'ad_account_id': opts['adAccountId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['pinterest_oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Pin;
      return this.apiClient.callApi(
        '/pins/{pin_id}/save', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pinsUpdate operation.
     * @callback module:api/PinsApi~pinsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Pin} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Pin
     * Update a pin owned by the \"operating user_account\". - By default, the \"operation user_account\" is the token user_account.  Optional: Business Access: Specify an <code>ad_account_id</code> (obtained via <a href='/docs/api/v5/#operation/ad_accounts/list'>List ad accounts</a>) to use the owner of that ad_account as the \"operation user_account\". In order to do this, the token user_account must have one of the following <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a> roles on the ad_account:  - For Pins on public or protected boards: Owner, Admin, Analyst, Campaign Manager. - For Pins on secret boards: Owner, Admin.  <strong>This endpoint is currently in beta and not available to all apps. <a href='/docs/getting-started/beta-and-advanced-access/'>Learn more</a>.</strong>
     * @param {String} pinId Unique identifier of a Pin.
     * @param {module:model/PinUpdate} pinUpdate 
     * @param {Object} opts Optional parameters
     * @param {String} [adAccountId] Unique identifier of an ad account.
     * @param {module:api/PinsApi~pinsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Pin}
     */
    pinsUpdate(pinId, pinUpdate, opts, callback) {
      opts = opts || {};
      let postBody = pinUpdate;
      // verify the required parameter 'pinId' is set
      if (pinId === undefined || pinId === null) {
        throw new Error("Missing the required parameter 'pinId' when calling pinsUpdate");
      }
      // verify the required parameter 'pinUpdate' is set
      if (pinUpdate === undefined || pinUpdate === null) {
        throw new Error("Missing the required parameter 'pinUpdate' when calling pinsUpdate");
      }

      let pathParams = {
        'pin_id': pinId
      };
      let queryParams = {
        'ad_account_id': opts['adAccountId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['pinterest_oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Pin;
      return this.apiClient.callApi(
        '/pins/{pin_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
