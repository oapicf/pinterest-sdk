/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DeletePartnersRequest from '../model/DeletePartnersRequest';
import DeletePartnersResponse from '../model/DeletePartnersResponse';
import DeletedMembersResponse from '../model/DeletedMembersResponse';
import Error from '../model/Error';
import GetBusinessEmployers200Response from '../model/GetBusinessEmployers200Response';
import GetBusinessMembers200Response from '../model/GetBusinessMembers200Response';
import GetBusinessPartners200Response from '../model/GetBusinessPartners200Response';
import MemberBusinessRole from '../model/MemberBusinessRole';
import MembersToDeleteBody from '../model/MembersToDeleteBody';
import PartnerType from '../model/PartnerType';
import UpdateMemberBusinessRoleBody from '../model/UpdateMemberBusinessRoleBody';
import UpdateMemberResultsResponseArray from '../model/UpdateMemberResultsResponseArray';

/**
* BusinessAccessRelationships service.
* @module api/BusinessAccessRelationshipsApi
* @version 1.1.1-pre.0
*/
export default class BusinessAccessRelationshipsApi {

    /**
    * Constructs a new BusinessAccessRelationshipsApi. 
    * @alias module:api/BusinessAccessRelationshipsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteBusinessMembership operation.
     * @callback module:api/BusinessAccessRelationshipsApi~deleteBusinessMembershipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeletedMembersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Terminate business memberships
     * Terminate memberships between the specified members and your business.
     * @param {String} businessId Business id
     * @param {module:model/MembersToDeleteBody} membersToDeleteBody List of members with role to delete.
     * @param {module:api/BusinessAccessRelationshipsApi~deleteBusinessMembershipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeletedMembersResponse}
     */
    deleteBusinessMembership(businessId, membersToDeleteBody, callback) {
      let postBody = membersToDeleteBody;
      // verify the required parameter 'businessId' is set
      if (businessId === undefined || businessId === null) {
        throw new Error("Missing the required parameter 'businessId' when calling deleteBusinessMembership");
      }
      // verify the required parameter 'membersToDeleteBody' is set
      if (membersToDeleteBody === undefined || membersToDeleteBody === null) {
        throw new Error("Missing the required parameter 'membersToDeleteBody' when calling deleteBusinessMembership");
      }

      let pathParams = {
        'business_id': businessId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['pinterest_oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeletedMembersResponse;
      return this.apiClient.callApi(
        '/businesses/{business_id}/members', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBusinessPartners operation.
     * @callback module:api/BusinessAccessRelationshipsApi~deleteBusinessPartnersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeletePartnersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Terminate business partnerships
     * Terminate partnerships between the specified partners and your business. Note: You may only batch terminate partners of the same partner type.
     * @param {String} businessId Unique identifier of the requesting business.
     * @param {module:model/DeletePartnersRequest} deletePartnersRequest An object containing a \"partner_ids\" property composed of a list of partner IDs and a \"partners_type\" property specifying the type of partners to delete. 
     * @param {module:api/BusinessAccessRelationshipsApi~deleteBusinessPartnersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeletePartnersResponse}
     */
    deleteBusinessPartners(businessId, deletePartnersRequest, callback) {
      let postBody = deletePartnersRequest;
      // verify the required parameter 'businessId' is set
      if (businessId === undefined || businessId === null) {
        throw new Error("Missing the required parameter 'businessId' when calling deleteBusinessPartners");
      }
      // verify the required parameter 'deletePartnersRequest' is set
      if (deletePartnersRequest === undefined || deletePartnersRequest === null) {
        throw new Error("Missing the required parameter 'deletePartnersRequest' when calling deleteBusinessPartners");
      }

      let pathParams = {
        'business_id': businessId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['pinterest_oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeletePartnersResponse;
      return this.apiClient.callApi(
        '/businesses/{business_id}/partners', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBusinessEmployers operation.
     * @callback module:api/BusinessAccessRelationshipsApi~getBusinessEmployersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetBusinessEmployers200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List business employers for user
     * Get all of the viewing user's business employers.
     * @param {Object} opts Optional parameters
     * @param {Number} [pageSize = 25)] Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/reference/pagination/'>Pagination</a> for more information.
     * @param {String} [bookmark] Cursor used to fetch the next page of items
     * @param {module:api/BusinessAccessRelationshipsApi~getBusinessEmployersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetBusinessEmployers200Response}
     */
    getBusinessEmployers(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page_size': opts['pageSize'],
        'bookmark': opts['bookmark']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['pinterest_oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetBusinessEmployers200Response;
      return this.apiClient.callApi(
        '/businesses/employers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBusinessMembers operation.
     * @callback module:api/BusinessAccessRelationshipsApi~getBusinessMembersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetBusinessMembers200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get business members
     * Get all members of the specified business. The return response will include the member's business_role and assets they have access to if assets_summary=TRUE
     * @param {String} businessId Unique identifier of the requesting business.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [assetsSummary = false)] Include assets summary in the response if this is true.  The assets summary returns a dictionary representing a summary of the assets for the business user ID, with information like the ad accounts and profiles the user has permissions for and what those permissions are
     * @param {Array.<module:model/MemberBusinessRole>} [businessRoles] A list of business roles to filter the members by. Only members whose roles are in the specified roles will be returned.
     * @param {String} [memberIds] A list of business members ids separated by comma.
     * @param {Number} [startIndex = 0)] An index to start fetching the results from. Only the results starting from this index will be returned.
     * @param {String} [bookmark] Cursor used to fetch the next page of items
     * @param {Number} [pageSize = 25)] Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/reference/pagination/'>Pagination</a> for more information.
     * @param {module:api/BusinessAccessRelationshipsApi~getBusinessMembersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetBusinessMembers200Response}
     */
    getBusinessMembers(businessId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'businessId' is set
      if (businessId === undefined || businessId === null) {
        throw new Error("Missing the required parameter 'businessId' when calling getBusinessMembers");
      }

      let pathParams = {
        'business_id': businessId
      };
      let queryParams = {
        'assets_summary': opts['assetsSummary'],
        'business_roles': this.apiClient.buildCollectionParam(opts['businessRoles'], 'multi'),
        'member_ids': opts['memberIds'],
        'start_index': opts['startIndex'],
        'bookmark': opts['bookmark'],
        'page_size': opts['pageSize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['pinterest_oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetBusinessMembers200Response;
      return this.apiClient.callApi(
        '/businesses/{business_id}/members', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBusinessPartners operation.
     * @callback module:api/BusinessAccessRelationshipsApi~getBusinessPartnersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetBusinessPartners200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get business partners
     * Get all partners of the specified business.  If the assets_summary=TRUE and: - partner_type=INTERNAL, the business assets returned are your business assets the partner has access to. - partner_type=EXTERNAL, the business assets returned are your partner's business assets the partner has granted you   access to.
     * @param {String} businessId Unique identifier of the requesting business.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [assetsSummary = false)] Include assets summary in the response if this is true.  The assets summary returns a dictionary representing a summary of the assets for the business user ID, with information like the ad accounts and profiles the user has permissions for and what those permissions are
     * @param {module:model/PartnerType} [partnerType] Specifies whether to fetch internal or external (shared) partners. If partner_type=INTERNAL, the asset being queried is for accesses the partner has to your business assets.<br> If partner_type=EXTERNAL, the asset being queried is for the accesses you have to the partner's business asset.
     * @param {String} [partnerIds] A list of business partner ids separated by commas used to filter the results. Only partners with the specified ids will be returned.
     * @param {Number} [startIndex = 0)] An index to start fetching the results from. Only the results starting from this index will be returned.
     * @param {Number} [pageSize = 25)] Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/reference/pagination/'>Pagination</a> for more information.
     * @param {String} [bookmark] Cursor used to fetch the next page of items
     * @param {module:api/BusinessAccessRelationshipsApi~getBusinessPartnersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetBusinessPartners200Response}
     */
    getBusinessPartners(businessId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'businessId' is set
      if (businessId === undefined || businessId === null) {
        throw new Error("Missing the required parameter 'businessId' when calling getBusinessPartners");
      }

      let pathParams = {
        'business_id': businessId
      };
      let queryParams = {
        'assets_summary': opts['assetsSummary'],
        'partner_type': opts['partnerType'],
        'partner_ids': opts['partnerIds'],
        'start_index': opts['startIndex'],
        'page_size': opts['pageSize'],
        'bookmark': opts['bookmark']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['pinterest_oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetBusinessPartners200Response;
      return this.apiClient.callApi(
        '/businesses/{business_id}/partners', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateBusinessMemberships operation.
     * @callback module:api/BusinessAccessRelationshipsApi~updateBusinessMembershipsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateMemberResultsResponseArray} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update member's business role
     * Update a member's business role within the business.
     * @param {String} businessId Business id
     * @param {Array.<module:model/UpdateMemberBusinessRoleBody>} updateMemberBusinessRoleBody List of objects with the member id and the business_role.
     * @param {module:api/BusinessAccessRelationshipsApi~updateBusinessMembershipsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateMemberResultsResponseArray}
     */
    updateBusinessMemberships(businessId, updateMemberBusinessRoleBody, callback) {
      let postBody = updateMemberBusinessRoleBody;
      // verify the required parameter 'businessId' is set
      if (businessId === undefined || businessId === null) {
        throw new Error("Missing the required parameter 'businessId' when calling updateBusinessMemberships");
      }
      // verify the required parameter 'updateMemberBusinessRoleBody' is set
      if (updateMemberBusinessRoleBody === undefined || updateMemberBusinessRoleBody === null) {
        throw new Error("Missing the required parameter 'updateMemberBusinessRoleBody' when calling updateBusinessMemberships");
      }

      let pathParams = {
        'business_id': businessId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['pinterest_oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateMemberResultsResponseArray;
      return this.apiClient.callApi(
        '/businesses/{business_id}/members', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
