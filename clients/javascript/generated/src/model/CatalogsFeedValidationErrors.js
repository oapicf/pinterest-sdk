/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CatalogsFeedValidationErrors model module.
 * @module model/CatalogsFeedValidationErrors
 * @version 1.1.1-pre.0
 */
class CatalogsFeedValidationErrors {
    /**
     * Constructs a new <code>CatalogsFeedValidationErrors</code>.
     * @alias module:model/CatalogsFeedValidationErrors
     */
    constructor() { 
        
        CatalogsFeedValidationErrors.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CatalogsFeedValidationErrors</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CatalogsFeedValidationErrors} obj Optional instance to populate.
     * @return {module:model/CatalogsFeedValidationErrors} The populated <code>CatalogsFeedValidationErrors</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CatalogsFeedValidationErrors();

            if (data.hasOwnProperty('FETCH_ERROR')) {
                obj['FETCH_ERROR'] = ApiClient.convertToType(data['FETCH_ERROR'], 'Number');
            }
            if (data.hasOwnProperty('FETCH_INACTIVE_FEED_ERROR')) {
                obj['FETCH_INACTIVE_FEED_ERROR'] = ApiClient.convertToType(data['FETCH_INACTIVE_FEED_ERROR'], 'Number');
            }
            if (data.hasOwnProperty('ENCODING_ERROR')) {
                obj['ENCODING_ERROR'] = ApiClient.convertToType(data['ENCODING_ERROR'], 'Number');
            }
            if (data.hasOwnProperty('DELIMITER_ERROR')) {
                obj['DELIMITER_ERROR'] = ApiClient.convertToType(data['DELIMITER_ERROR'], 'Number');
            }
            if (data.hasOwnProperty('REQUIRED_COLUMNS_MISSING')) {
                obj['REQUIRED_COLUMNS_MISSING'] = ApiClient.convertToType(data['REQUIRED_COLUMNS_MISSING'], 'Number');
            }
            if (data.hasOwnProperty('DUPLICATE_PRODUCTS')) {
                obj['DUPLICATE_PRODUCTS'] = ApiClient.convertToType(data['DUPLICATE_PRODUCTS'], 'Number');
            }
            if (data.hasOwnProperty('IMAGE_LINK_INVALID')) {
                obj['IMAGE_LINK_INVALID'] = ApiClient.convertToType(data['IMAGE_LINK_INVALID'], 'Number');
            }
            if (data.hasOwnProperty('ITEMID_MISSING')) {
                obj['ITEMID_MISSING'] = ApiClient.convertToType(data['ITEMID_MISSING'], 'Number');
            }
            if (data.hasOwnProperty('TITLE_MISSING')) {
                obj['TITLE_MISSING'] = ApiClient.convertToType(data['TITLE_MISSING'], 'Number');
            }
            if (data.hasOwnProperty('DESCRIPTION_MISSING')) {
                obj['DESCRIPTION_MISSING'] = ApiClient.convertToType(data['DESCRIPTION_MISSING'], 'Number');
            }
            if (data.hasOwnProperty('PRODUCT_LINK_MISSING')) {
                obj['PRODUCT_LINK_MISSING'] = ApiClient.convertToType(data['PRODUCT_LINK_MISSING'], 'Number');
            }
            if (data.hasOwnProperty('IMAGE_LINK_MISSING')) {
                obj['IMAGE_LINK_MISSING'] = ApiClient.convertToType(data['IMAGE_LINK_MISSING'], 'Number');
            }
            if (data.hasOwnProperty('AVAILABILITY_INVALID')) {
                obj['AVAILABILITY_INVALID'] = ApiClient.convertToType(data['AVAILABILITY_INVALID'], 'Number');
            }
            if (data.hasOwnProperty('PRODUCT_PRICE_INVALID')) {
                obj['PRODUCT_PRICE_INVALID'] = ApiClient.convertToType(data['PRODUCT_PRICE_INVALID'], 'Number');
            }
            if (data.hasOwnProperty('LINK_FORMAT_INVALID')) {
                obj['LINK_FORMAT_INVALID'] = ApiClient.convertToType(data['LINK_FORMAT_INVALID'], 'Number');
            }
            if (data.hasOwnProperty('PARSE_LINE_ERROR')) {
                obj['PARSE_LINE_ERROR'] = ApiClient.convertToType(data['PARSE_LINE_ERROR'], 'Number');
            }
            if (data.hasOwnProperty('ADWORDS_FORMAT_INVALID')) {
                obj['ADWORDS_FORMAT_INVALID'] = ApiClient.convertToType(data['ADWORDS_FORMAT_INVALID'], 'Number');
            }
            if (data.hasOwnProperty('INTERNAL_SERVICE_ERROR')) {
                obj['INTERNAL_SERVICE_ERROR'] = ApiClient.convertToType(data['INTERNAL_SERVICE_ERROR'], 'Number');
            }
            if (data.hasOwnProperty('NO_VERIFIED_DOMAIN')) {
                obj['NO_VERIFIED_DOMAIN'] = ApiClient.convertToType(data['NO_VERIFIED_DOMAIN'], 'Number');
            }
            if (data.hasOwnProperty('ADULT_INVALID')) {
                obj['ADULT_INVALID'] = ApiClient.convertToType(data['ADULT_INVALID'], 'Number');
            }
            if (data.hasOwnProperty('IMAGE_LINK_LENGTH_TOO_LONG')) {
                obj['IMAGE_LINK_LENGTH_TOO_LONG'] = ApiClient.convertToType(data['IMAGE_LINK_LENGTH_TOO_LONG'], 'Number');
            }
            if (data.hasOwnProperty('INVALID_DOMAIN')) {
                obj['INVALID_DOMAIN'] = ApiClient.convertToType(data['INVALID_DOMAIN'], 'Number');
            }
            if (data.hasOwnProperty('FEED_LENGTH_TOO_LONG')) {
                obj['FEED_LENGTH_TOO_LONG'] = ApiClient.convertToType(data['FEED_LENGTH_TOO_LONG'], 'Number');
            }
            if (data.hasOwnProperty('LINK_LENGTH_TOO_LONG')) {
                obj['LINK_LENGTH_TOO_LONG'] = ApiClient.convertToType(data['LINK_LENGTH_TOO_LONG'], 'Number');
            }
            if (data.hasOwnProperty('MALFORMED_XML')) {
                obj['MALFORMED_XML'] = ApiClient.convertToType(data['MALFORMED_XML'], 'Number');
            }
            if (data.hasOwnProperty('PRICE_MISSING')) {
                obj['PRICE_MISSING'] = ApiClient.convertToType(data['PRICE_MISSING'], 'Number');
            }
            if (data.hasOwnProperty('FEED_TOO_SMALL')) {
                obj['FEED_TOO_SMALL'] = ApiClient.convertToType(data['FEED_TOO_SMALL'], 'Number');
            }
            if (data.hasOwnProperty('MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED')) {
                obj['MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED'] = ApiClient.convertToType(data['MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED'], 'Number');
            }
            if (data.hasOwnProperty('ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE')) {
                obj['ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE'] = ApiClient.convertToType(data['ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE'], 'Number');
            }
            if (data.hasOwnProperty('PINJOIN_CONTENT_UNSAFE')) {
                obj['PINJOIN_CONTENT_UNSAFE'] = ApiClient.convertToType(data['PINJOIN_CONTENT_UNSAFE'], 'Number');
            }
            if (data.hasOwnProperty('BLOCKLISTED_IMAGE_SIGNATURE')) {
                obj['BLOCKLISTED_IMAGE_SIGNATURE'] = ApiClient.convertToType(data['BLOCKLISTED_IMAGE_SIGNATURE'], 'Number');
            }
            if (data.hasOwnProperty('LIST_PRICE_INVALID')) {
                obj['LIST_PRICE_INVALID'] = ApiClient.convertToType(data['LIST_PRICE_INVALID'], 'Number');
            }
            if (data.hasOwnProperty('PRICE_CANNOT_BE_DETERMINED')) {
                obj['PRICE_CANNOT_BE_DETERMINED'] = ApiClient.convertToType(data['PRICE_CANNOT_BE_DETERMINED'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CatalogsFeedValidationErrors</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CatalogsFeedValidationErrors</code>.
     */
    static validateJSON(data) {

        return true;
    }


}



/**
 * Pinterest couldn't download your feed.
 * @member {Number} FETCH_ERROR
 */
CatalogsFeedValidationErrors.prototype['FETCH_ERROR'] = undefined;

/**
 * Your feed wasn't ingested because it hasnâ€™t changed in the previous 90 days.
 * @member {Number} FETCH_INACTIVE_FEED_ERROR
 */
CatalogsFeedValidationErrors.prototype['FETCH_INACTIVE_FEED_ERROR'] = undefined;

/**
 * Your feed includes data with an unsupported encoding format.
 * @member {Number} ENCODING_ERROR
 */
CatalogsFeedValidationErrors.prototype['ENCODING_ERROR'] = undefined;

/**
 * Your feed includes data with formatting errors.
 * @member {Number} DELIMITER_ERROR
 */
CatalogsFeedValidationErrors.prototype['DELIMITER_ERROR'] = undefined;

/**
 * Your feed is missing some required column headers.
 * @member {Number} REQUIRED_COLUMNS_MISSING
 */
CatalogsFeedValidationErrors.prototype['REQUIRED_COLUMNS_MISSING'] = undefined;

/**
 * Some products are duplicated.
 * @member {Number} DUPLICATE_PRODUCTS
 */
CatalogsFeedValidationErrors.prototype['DUPLICATE_PRODUCTS'] = undefined;

/**
 * Some image links are formatted incorrectly.
 * @member {Number} IMAGE_LINK_INVALID
 */
CatalogsFeedValidationErrors.prototype['IMAGE_LINK_INVALID'] = undefined;

/**
 * Some items are missing an item id in their product metadata, those items will not be published.
 * @member {Number} ITEMID_MISSING
 */
CatalogsFeedValidationErrors.prototype['ITEMID_MISSING'] = undefined;

/**
 * Some items are missing a title in their product metadata, those items will not be published.
 * @member {Number} TITLE_MISSING
 */
CatalogsFeedValidationErrors.prototype['TITLE_MISSING'] = undefined;

/**
 * Some items are missing a description in their product metadata, those items will not be published.
 * @member {Number} DESCRIPTION_MISSING
 */
CatalogsFeedValidationErrors.prototype['DESCRIPTION_MISSING'] = undefined;

/**
 * Some items are missing a link URL in their product metadata, those items will not be published.
 * @member {Number} PRODUCT_LINK_MISSING
 */
CatalogsFeedValidationErrors.prototype['PRODUCT_LINK_MISSING'] = undefined;

/**
 * Some items are missing an image link URL in their product metadata, those items will not be published.
 * @member {Number} IMAGE_LINK_MISSING
 */
CatalogsFeedValidationErrors.prototype['IMAGE_LINK_MISSING'] = undefined;

/**
 * Some items are missing an availability value in their product metadata, those items will not be published.
 * @member {Number} AVAILABILITY_INVALID
 */
CatalogsFeedValidationErrors.prototype['AVAILABILITY_INVALID'] = undefined;

/**
 * Some items have price formatting errors in their product metadata, those items will not be published.
 * @member {Number} PRODUCT_PRICE_INVALID
 */
CatalogsFeedValidationErrors.prototype['PRODUCT_PRICE_INVALID'] = undefined;

/**
 * Some link values are formatted incorrectly.
 * @member {Number} LINK_FORMAT_INVALID
 */
CatalogsFeedValidationErrors.prototype['LINK_FORMAT_INVALID'] = undefined;

/**
 * Your feed contains formatting errors for some items.
 * @member {Number} PARSE_LINE_ERROR
 */
CatalogsFeedValidationErrors.prototype['PARSE_LINE_ERROR'] = undefined;

/**
 * Some adwords links contain too many characters.
 * @member {Number} ADWORDS_FORMAT_INVALID
 */
CatalogsFeedValidationErrors.prototype['ADWORDS_FORMAT_INVALID'] = undefined;

/**
 * We experienced a technical difficulty and were unable to ingest your feed. The next ingestion will happen in 24 hours.
 * @member {Number} INTERNAL_SERVICE_ERROR
 */
CatalogsFeedValidationErrors.prototype['INTERNAL_SERVICE_ERROR'] = undefined;

/**
 * Your merchant domain needs to be claimed.
 * @member {Number} NO_VERIFIED_DOMAIN
 */
CatalogsFeedValidationErrors.prototype['NO_VERIFIED_DOMAIN'] = undefined;

/**
 * Some items have invalid adult values.
 * @member {Number} ADULT_INVALID
 */
CatalogsFeedValidationErrors.prototype['ADULT_INVALID'] = undefined;

/**
 * Some items have image_link URLs that contain too many characters, so those items will not be published.
 * @member {Number} IMAGE_LINK_LENGTH_TOO_LONG
 */
CatalogsFeedValidationErrors.prototype['IMAGE_LINK_LENGTH_TOO_LONG'] = undefined;

/**
 * Some of your product link values don't match the verified domain associated with this account.
 * @member {Number} INVALID_DOMAIN
 */
CatalogsFeedValidationErrors.prototype['INVALID_DOMAIN'] = undefined;

/**
 * Your feed contains too many items, some items will not be published.
 * @member {Number} FEED_LENGTH_TOO_LONG
 */
CatalogsFeedValidationErrors.prototype['FEED_LENGTH_TOO_LONG'] = undefined;

/**
 * Some product links contain too many characters, those items will not be published.
 * @member {Number} LINK_LENGTH_TOO_LONG
 */
CatalogsFeedValidationErrors.prototype['LINK_LENGTH_TOO_LONG'] = undefined;

/**
 * Your feed couldn't be validated because the xml file is formatted incorrectly.
 * @member {Number} MALFORMED_XML
 */
CatalogsFeedValidationErrors.prototype['MALFORMED_XML'] = undefined;

/**
 * Some products are missing a price, those items will not be published.
 * @member {Number} PRICE_MISSING
 */
CatalogsFeedValidationErrors.prototype['PRICE_MISSING'] = undefined;

/**
 * Your feed couldn't be validated because the file doesn't contain the minimum number of lines required.
 * @member {Number} FEED_TOO_SMALL
 */
CatalogsFeedValidationErrors.prototype['FEED_TOO_SMALL'] = undefined;

/**
 * Some items exceed the maximum number of items per item group, those items will not be published.
 * @member {Number} MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED
 */
CatalogsFeedValidationErrors.prototype['MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED'] = undefined;

/**
 * Some items' main images can't be found.
 * @member {Number} ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE
 */
CatalogsFeedValidationErrors.prototype['ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE'] = undefined;

/**
 * Some items were not published because they don't meet Pinterest's Merchant Guidelines.
 * @member {Number} PINJOIN_CONTENT_UNSAFE
 */
CatalogsFeedValidationErrors.prototype['PINJOIN_CONTENT_UNSAFE'] = undefined;

/**
 * Some items were not published because they don't meet Pinterest's Merchant Guidelines.
 * @member {Number} BLOCKLISTED_IMAGE_SIGNATURE
 */
CatalogsFeedValidationErrors.prototype['BLOCKLISTED_IMAGE_SIGNATURE'] = undefined;

/**
 * Some items have list price formatting errors in their product metadata, those items will not be published.
 * @member {Number} LIST_PRICE_INVALID
 */
CatalogsFeedValidationErrors.prototype['LIST_PRICE_INVALID'] = undefined;

/**
 * Some items were not published because price cannot be determined. The price, list price, and sale price are all different, so those items will not be published.
 * @member {Number} PRICE_CANNOT_BE_DETERMINED
 */
CatalogsFeedValidationErrors.prototype['PRICE_CANNOT_BE_DETERMINED'] = undefined;






export default CatalogsFeedValidationErrors;

