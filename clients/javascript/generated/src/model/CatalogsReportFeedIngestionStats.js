/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CatalogsReportFeedIngestionStats model module.
 * @module model/CatalogsReportFeedIngestionStats
 * @version 1.1.1-pre.0
 */
class CatalogsReportFeedIngestionStats {
    /**
     * Constructs a new <code>CatalogsReportFeedIngestionStats</code>.
     * @alias module:model/CatalogsReportFeedIngestionStats
     */
    constructor() { 
        
        CatalogsReportFeedIngestionStats.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CatalogsReportFeedIngestionStats</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CatalogsReportFeedIngestionStats} obj Optional instance to populate.
     * @return {module:model/CatalogsReportFeedIngestionStats} The populated <code>CatalogsReportFeedIngestionStats</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CatalogsReportFeedIngestionStats();

            if (data.hasOwnProperty('report_type')) {
                obj['report_type'] = ApiClient.convertToType(data['report_type'], 'String');
            }
            if (data.hasOwnProperty('catalog_id')) {
                obj['catalog_id'] = ApiClient.convertToType(data['catalog_id'], 'String');
            }
            if (data.hasOwnProperty('code')) {
                obj['code'] = ApiClient.convertToType(data['code'], 'Number');
            }
            if (data.hasOwnProperty('code_label')) {
                obj['code_label'] = ApiClient.convertToType(data['code_label'], 'String');
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('occurrences')) {
                obj['occurrences'] = ApiClient.convertToType(data['occurrences'], 'Number');
            }
            if (data.hasOwnProperty('severity')) {
                obj['severity'] = ApiClient.convertToType(data['severity'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CatalogsReportFeedIngestionStats</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CatalogsReportFeedIngestionStats</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['report_type'] && !(typeof data['report_type'] === 'string' || data['report_type'] instanceof String)) {
            throw new Error("Expected the field `report_type` to be a primitive type in the JSON string but got " + data['report_type']);
        }
        // ensure the json data is a string
        if (data['catalog_id'] && !(typeof data['catalog_id'] === 'string' || data['catalog_id'] instanceof String)) {
            throw new Error("Expected the field `catalog_id` to be a primitive type in the JSON string but got " + data['catalog_id']);
        }
        // ensure the json data is a string
        if (data['code_label'] && !(typeof data['code_label'] === 'string' || data['code_label'] instanceof String)) {
            throw new Error("Expected the field `code_label` to be a primitive type in the JSON string but got " + data['code_label']);
        }
        // ensure the json data is a string
        if (data['message'] && !(typeof data['message'] === 'string' || data['message'] instanceof String)) {
            throw new Error("Expected the field `message` to be a primitive type in the JSON string but got " + data['message']);
        }
        // ensure the json data is a string
        if (data['severity'] && !(typeof data['severity'] === 'string' || data['severity'] instanceof String)) {
            throw new Error("Expected the field `severity` to be a primitive type in the JSON string but got " + data['severity']);
        }

        return true;
    }


}



/**
 * @member {module:model/CatalogsReportFeedIngestionStats.ReportTypeEnum} report_type
 */
CatalogsReportFeedIngestionStats.prototype['report_type'] = undefined;

/**
 * ID of the catalog entity.
 * @member {String} catalog_id
 */
CatalogsReportFeedIngestionStats.prototype['catalog_id'] = undefined;

/**
 * The event code that a diagnostics aggregated number references
 * @member {Number} code
 */
CatalogsReportFeedIngestionStats.prototype['code'] = undefined;

/**
 * A human-friendly label for the event code (e.g, 'AVAILABILITY_INVALID')
 * @member {String} code_label
 */
CatalogsReportFeedIngestionStats.prototype['code_label'] = undefined;

/**
 * Title message describing the diagnostic issue
 * @member {String} message
 */
CatalogsReportFeedIngestionStats.prototype['message'] = undefined;

/**
 * Number of occurrences of the issue
 * @member {Number} occurrences
 */
CatalogsReportFeedIngestionStats.prototype['occurrences'] = undefined;

/**
 * An ERROR means that items have been dropped, while a WARN denotes that items have been ingested despite an issue
 * @member {module:model/CatalogsReportFeedIngestionStats.SeverityEnum} severity
 */
CatalogsReportFeedIngestionStats.prototype['severity'] = undefined;





/**
 * Allowed values for the <code>report_type</code> property.
 * @enum {String}
 * @readonly
 */
CatalogsReportFeedIngestionStats['ReportTypeEnum'] = {

    /**
     * value: "FEED_INGESTION_ISSUES"
     * @const
     */
    "FEED_INGESTION_ISSUES": "FEED_INGESTION_ISSUES"
};


/**
 * Allowed values for the <code>severity</code> property.
 * @enum {String}
 * @readonly
 */
CatalogsReportFeedIngestionStats['SeverityEnum'] = {

    /**
     * value: "WARN"
     * @const
     */
    "WARN": "WARN",

    /**
     * value: "ERROR"
     * @const
     */
    "ERROR": "ERROR"
};



export default CatalogsReportFeedIngestionStats;

