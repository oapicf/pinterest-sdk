/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The BidFloor model module.
 * @module model/BidFloor
 * @version 1.1.1-pre.0
 */
class BidFloor {
    /**
     * Constructs a new <code>BidFloor</code>.
     * @alias module:model/BidFloor
     */
    constructor() { 
        
        BidFloor.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['type'] = 'bidfloor';
    }

    /**
     * Constructs a <code>BidFloor</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BidFloor} obj Optional instance to populate.
     * @return {module:model/BidFloor} The populated <code>BidFloor</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BidFloor();

            if (data.hasOwnProperty('bid_floors')) {
                obj['bid_floors'] = ApiClient.convertToType(data['bid_floors'], ['Number']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BidFloor</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BidFloor</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['bid_floors'])) {
            throw new Error("Expected the field `bid_floors` to be an array in the JSON data but got " + data['bid_floors']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * A list of bid floors in micro currency. For example, [100000, 200000]
 * @member {Array.<Number>} bid_floors
 */
BidFloor.prototype['bid_floors'] = undefined;

/**
 * Always the string 'bidfloor'
 * @member {String} type
 * @default 'bidfloor'
 */
BidFloor.prototype['type'] = 'bidfloor';






export default BidFloor;

