/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Account model module.
 * @module model/Account
 * @version 1.1.1-pre.0
 */
class Account {
    /**
     * Constructs a new <code>Account</code>.
     * @alias module:model/Account
     */
    constructor() { 
        
        Account.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Account</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Account} obj Optional instance to populate.
     * @return {module:model/Account} The populated <code>Account</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Account();

            if (data.hasOwnProperty('account_type')) {
                obj['account_type'] = ApiClient.convertToType(data['account_type'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('profile_image')) {
                obj['profile_image'] = ApiClient.convertToType(data['profile_image'], 'String');
            }
            if (data.hasOwnProperty('website_url')) {
                obj['website_url'] = ApiClient.convertToType(data['website_url'], 'String');
            }
            if (data.hasOwnProperty('username')) {
                obj['username'] = ApiClient.convertToType(data['username'], 'String');
            }
            if (data.hasOwnProperty('about')) {
                obj['about'] = ApiClient.convertToType(data['about'], 'String');
            }
            if (data.hasOwnProperty('business_name')) {
                obj['business_name'] = ApiClient.convertToType(data['business_name'], 'String');
            }
            if (data.hasOwnProperty('board_count')) {
                obj['board_count'] = ApiClient.convertToType(data['board_count'], 'Number');
            }
            if (data.hasOwnProperty('pin_count')) {
                obj['pin_count'] = ApiClient.convertToType(data['pin_count'], 'Number');
            }
            if (data.hasOwnProperty('follower_count')) {
                obj['follower_count'] = ApiClient.convertToType(data['follower_count'], 'Number');
            }
            if (data.hasOwnProperty('following_count')) {
                obj['following_count'] = ApiClient.convertToType(data['following_count'], 'Number');
            }
            if (data.hasOwnProperty('monthly_views')) {
                obj['monthly_views'] = ApiClient.convertToType(data['monthly_views'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Account</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Account</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['account_type'] && !(typeof data['account_type'] === 'string' || data['account_type'] instanceof String)) {
            throw new Error("Expected the field `account_type` to be a primitive type in the JSON string but got " + data['account_type']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['profile_image'] && !(typeof data['profile_image'] === 'string' || data['profile_image'] instanceof String)) {
            throw new Error("Expected the field `profile_image` to be a primitive type in the JSON string but got " + data['profile_image']);
        }
        // ensure the json data is a string
        if (data['website_url'] && !(typeof data['website_url'] === 'string' || data['website_url'] instanceof String)) {
            throw new Error("Expected the field `website_url` to be a primitive type in the JSON string but got " + data['website_url']);
        }
        // ensure the json data is a string
        if (data['username'] && !(typeof data['username'] === 'string' || data['username'] instanceof String)) {
            throw new Error("Expected the field `username` to be a primitive type in the JSON string but got " + data['username']);
        }
        // ensure the json data is a string
        if (data['about'] && !(typeof data['about'] === 'string' || data['about'] instanceof String)) {
            throw new Error("Expected the field `about` to be a primitive type in the JSON string but got " + data['about']);
        }
        // ensure the json data is a string
        if (data['business_name'] && !(typeof data['business_name'] === 'string' || data['business_name'] instanceof String)) {
            throw new Error("Expected the field `business_name` to be a primitive type in the JSON string but got " + data['business_name']);
        }

        return true;
    }


}



/**
 * Type of account
 * @member {module:model/Account.AccountTypeEnum} account_type
 */
Account.prototype['account_type'] = undefined;

/**
 * User account ID.
 * @member {String} id
 */
Account.prototype['id'] = undefined;

/**
 * @member {String} profile_image
 */
Account.prototype['profile_image'] = undefined;

/**
 * @member {String} website_url
 */
Account.prototype['website_url'] = undefined;

/**
 * @member {String} username
 */
Account.prototype['username'] = undefined;

/**
 * Profile about description.
 * @member {String} about
 */
Account.prototype['about'] = undefined;

/**
 * @member {String} business_name
 */
Account.prototype['business_name'] = undefined;

/**
 * User account board count.<br/>**Note**: Board count on user account level may differ from counts found elsewhere due to attribution of collaborative Boards.
 * @member {Number} board_count
 */
Account.prototype['board_count'] = undefined;

/**
 * User account pin count. This includes both created and saved pins.
 * @member {Number} pin_count
 */
Account.prototype['pin_count'] = undefined;

/**
 * User account follower count.
 * @member {Number} follower_count
 */
Account.prototype['follower_count'] = undefined;

/**
 * User account following count.
 * @member {Number} following_count
 */
Account.prototype['following_count'] = undefined;

/**
 * User account monthly views.
 * @member {Number} monthly_views
 */
Account.prototype['monthly_views'] = undefined;





/**
 * Allowed values for the <code>account_type</code> property.
 * @enum {String}
 * @readonly
 */
Account['AccountTypeEnum'] = {

    /**
     * value: "PINNER"
     * @const
     */
    "PINNER": "PINNER",

    /**
     * value: "BUSINESS"
     * @const
     */
    "BUSINESS": "BUSINESS"
};



export default Account;

