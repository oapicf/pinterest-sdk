/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CatalogsProductGroupMultipleMediaTypesCriteria from './CatalogsProductGroupMultipleMediaTypesCriteria';

/**
 * The MediaTypeFilter model module.
 * @module model/MediaTypeFilter
 * @version 1.1.1-pre.0
 */
class MediaTypeFilter {
    /**
     * Constructs a new <code>MediaTypeFilter</code>.
     * @alias module:model/MediaTypeFilter
     * @param MEDIA_TYPE {module:model/CatalogsProductGroupMultipleMediaTypesCriteria} 
     */
    constructor(MEDIA_TYPE) { 
        
        MediaTypeFilter.initialize(this, MEDIA_TYPE);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, MEDIA_TYPE) { 
        obj['MEDIA_TYPE'] = MEDIA_TYPE;
    }

    /**
     * Constructs a <code>MediaTypeFilter</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MediaTypeFilter} obj Optional instance to populate.
     * @return {module:model/MediaTypeFilter} The populated <code>MediaTypeFilter</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MediaTypeFilter();

            if (data.hasOwnProperty('MEDIA_TYPE')) {
                obj['MEDIA_TYPE'] = CatalogsProductGroupMultipleMediaTypesCriteria.constructFromObject(data['MEDIA_TYPE']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MediaTypeFilter</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MediaTypeFilter</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of MediaTypeFilter.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }

        return true;
    }


}

MediaTypeFilter.RequiredProperties = ["MEDIA_TYPE"];

/**
 * @member {module:model/CatalogsProductGroupMultipleMediaTypesCriteria} MEDIA_TYPE
 */
MediaTypeFilter.prototype['MEDIA_TYPE'] = undefined;






export default MediaTypeFilter;

