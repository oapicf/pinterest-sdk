/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ActionType from './ActionType';
import AdGroupCommon from './AdGroupCommon';
import BudgetType from './BudgetType';
import EntityStatus from './EntityStatus';
import OptimizationGoalMetadata from './OptimizationGoalMetadata';
import PacingDeliveryType from './PacingDeliveryType';
import PlacementGroupType from './PlacementGroupType';
import TargetingSpec from './TargetingSpec';
import TrackingUrls from './TrackingUrls';

/**
 * The AdGroupUpdateRequest model module.
 * @module model/AdGroupUpdateRequest
 * @version 1.1.1-pre.0
 */
class AdGroupUpdateRequest {
    /**
     * Constructs a new <code>AdGroupUpdateRequest</code>.
     * @alias module:model/AdGroupUpdateRequest
     * @implements module:model/AdGroupCommon
     * @param id {String} Ad group ID.
     */
    constructor(id) { 
        AdGroupCommon.initialize(this);
        AdGroupUpdateRequest.initialize(this, id);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id) { 
        obj['id'] = id;
    }

    /**
     * Constructs a <code>AdGroupUpdateRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AdGroupUpdateRequest} obj Optional instance to populate.
     * @return {module:model/AdGroupUpdateRequest} The populated <code>AdGroupUpdateRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AdGroupUpdateRequest();
            AdGroupCommon.constructFromObject(data, obj);

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], EntityStatus);
            }
            if (data.hasOwnProperty('budget_in_micro_currency')) {
                obj['budget_in_micro_currency'] = ApiClient.convertToType(data['budget_in_micro_currency'], 'Number');
            }
            if (data.hasOwnProperty('bid_in_micro_currency')) {
                obj['bid_in_micro_currency'] = ApiClient.convertToType(data['bid_in_micro_currency'], 'Number');
            }
            if (data.hasOwnProperty('optimization_goal_metadata')) {
                obj['optimization_goal_metadata'] = ApiClient.convertToType(data['optimization_goal_metadata'], OptimizationGoalMetadata);
            }
            if (data.hasOwnProperty('budget_type')) {
                obj['budget_type'] = ApiClient.convertToType(data['budget_type'], BudgetType);
            }
            if (data.hasOwnProperty('start_time')) {
                obj['start_time'] = ApiClient.convertToType(data['start_time'], 'Number');
            }
            if (data.hasOwnProperty('end_time')) {
                obj['end_time'] = ApiClient.convertToType(data['end_time'], 'Number');
            }
            if (data.hasOwnProperty('targeting_spec')) {
                obj['targeting_spec'] = TargetingSpec.constructFromObject(data['targeting_spec']);
            }
            if (data.hasOwnProperty('lifetime_frequency_cap')) {
                obj['lifetime_frequency_cap'] = ApiClient.convertToType(data['lifetime_frequency_cap'], 'Number');
            }
            if (data.hasOwnProperty('tracking_urls')) {
                obj['tracking_urls'] = ApiClient.convertToType(data['tracking_urls'], TrackingUrls);
            }
            if (data.hasOwnProperty('auto_targeting_enabled')) {
                obj['auto_targeting_enabled'] = ApiClient.convertToType(data['auto_targeting_enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('placement_group')) {
                obj['placement_group'] = ApiClient.convertToType(data['placement_group'], PlacementGroupType);
            }
            if (data.hasOwnProperty('pacing_delivery_type')) {
                obj['pacing_delivery_type'] = ApiClient.convertToType(data['pacing_delivery_type'], PacingDeliveryType);
            }
            if (data.hasOwnProperty('campaign_id')) {
                obj['campaign_id'] = ApiClient.convertToType(data['campaign_id'], 'String');
            }
            if (data.hasOwnProperty('billable_event')) {
                obj['billable_event'] = ActionType.constructFromObject(data['billable_event']);
            }
            if (data.hasOwnProperty('bid_strategy_type')) {
                obj['bid_strategy_type'] = ApiClient.convertToType(data['bid_strategy_type'], 'String');
            }
            if (data.hasOwnProperty('targeting_template_ids')) {
                obj['targeting_template_ids'] = ApiClient.convertToType(data['targeting_template_ids'], ['String']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AdGroupUpdateRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AdGroupUpdateRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AdGroupUpdateRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `optimization_goal_metadata`
        if (data['optimization_goal_metadata']) { // data not null
          OptimizationGoalMetadata.validateJSON(data['optimization_goal_metadata']);
        }
        // validate the optional field `targeting_spec`
        if (data['targeting_spec']) { // data not null
          TargetingSpec.validateJSON(data['targeting_spec']);
        }
        // validate the optional field `tracking_urls`
        if (data['tracking_urls']) { // data not null
          TrackingUrls.validateJSON(data['tracking_urls']);
        }
        // ensure the json data is a string
        if (data['campaign_id'] && !(typeof data['campaign_id'] === 'string' || data['campaign_id'] instanceof String)) {
            throw new Error("Expected the field `campaign_id` to be a primitive type in the JSON string but got " + data['campaign_id']);
        }
        // ensure the json data is a string
        if (data['bid_strategy_type'] && !(typeof data['bid_strategy_type'] === 'string' || data['bid_strategy_type'] instanceof String)) {
            throw new Error("Expected the field `bid_strategy_type` to be a primitive type in the JSON string but got " + data['bid_strategy_type']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['targeting_template_ids'])) {
            throw new Error("Expected the field `targeting_template_ids` to be an array in the JSON data but got " + data['targeting_template_ids']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }

        return true;
    }


}

AdGroupUpdateRequest.RequiredProperties = ["id"];

/**
 * Ad group name.
 * @member {String} name
 */
AdGroupUpdateRequest.prototype['name'] = undefined;

/**
 * Ad group/entity status.
 * @member {module:model/EntityStatus} status
 */
AdGroupUpdateRequest.prototype['status'] = undefined;

/**
 * Budget in micro currency. This field is **REQUIRED** for non-CBO (campaign budget optimization) campaigns.  A CBO campaign automatically generates ad group budgets from its campaign budget to maximize campaign outcome. A CBO campaign is limited to 70 or less ad groups.
 * @member {Number} budget_in_micro_currency
 */
AdGroupUpdateRequest.prototype['budget_in_micro_currency'] = undefined;

/**
 * Bid price in micro currency. This field is **REQUIRED** for the following campaign objective_type/billable_event combinations: AWARENESS/IMPRESSION, CONSIDERATION/CLICKTHROUGH, CATALOG_SALES/CLICKTHROUGH, VIDEO_VIEW/VIDEO_V_50_MRC.
 * @member {Number} bid_in_micro_currency
 */
AdGroupUpdateRequest.prototype['bid_in_micro_currency'] = undefined;

/**
 * Optimization goals for objective-based performance campaigns. **REQUIRED** when campaign's `objective_type` is set to `\"WEB_CONVERSION\"`.
 * @member {module:model/OptimizationGoalMetadata} optimization_goal_metadata
 */
AdGroupUpdateRequest.prototype['optimization_goal_metadata'] = undefined;

/**
 * @member {module:model/BudgetType} budget_type
 */
AdGroupUpdateRequest.prototype['budget_type'] = undefined;

/**
 * Ad group start time. Unix timestamp in seconds. Defaults to current time.
 * @member {Number} start_time
 */
AdGroupUpdateRequest.prototype['start_time'] = undefined;

/**
 * Ad group end time. Unix timestamp in seconds.
 * @member {Number} end_time
 */
AdGroupUpdateRequest.prototype['end_time'] = undefined;

/**
 * @member {module:model/TargetingSpec} targeting_spec
 */
AdGroupUpdateRequest.prototype['targeting_spec'] = undefined;

/**
 * Set a limit to the number of times a promoted pin from this campaign can be impressed by a pinner within the past rolling 30 days. Only available for CPM (cost per mille (1000 impressions))  ad groups. A CPM ad group has an IMPRESSION <a href=\"/docs/redoc/#section/Billable-event\">billable_event</a> value. This field **REQUIRES** the `end_time` field.
 * @member {Number} lifetime_frequency_cap
 */
AdGroupUpdateRequest.prototype['lifetime_frequency_cap'] = undefined;

/**
 * Third-party tracking URLs.<br> JSON object with the format: {\"<a href=\"/docs/redoc/#section/Tracking-URL-event\">Tracking event enum</a>\":[URL string array],...}<br> For example: {\"impression\": [\"URL1\", \"URL2\"], \"click\": [\"URL1\", \"URL2\", \"URL3\"]}.<br>Up to three tracking URLs are supported for each event type. Tracking URLs set at the ad group or ad level can override those set at the campaign level. May be null. Pass in an empty object - {} - to remove tracking URLs.<br><br> For more information, see <a href=\"https://help.pinterest.com/en/business/article/third-party-and-dynamic-tracking\" target=\"_blank\">Third-party and dynamic tracking</a>.
 * @member {module:model/TrackingUrls} tracking_urls
 */
AdGroupUpdateRequest.prototype['tracking_urls'] = undefined;

/**
 * Enable auto-targeting for ad group. Also known as <a href=\"https://help.pinterest.com/en/business/article/expanded-targeting\" target=\"_blank\">\"expanded targeting\"</a>.
 * @member {Boolean} auto_targeting_enabled
 */
AdGroupUpdateRequest.prototype['auto_targeting_enabled'] = undefined;

/**
 * <a href=\"/docs/redoc/#section/Placement-group\">Placement group</a>.
 * @member {module:model/PlacementGroupType} placement_group
 */
AdGroupUpdateRequest.prototype['placement_group'] = undefined;

/**
 * @member {module:model/PacingDeliveryType} pacing_delivery_type
 */
AdGroupUpdateRequest.prototype['pacing_delivery_type'] = undefined;

/**
 * Campaign ID of the ad group.
 * @member {String} campaign_id
 */
AdGroupUpdateRequest.prototype['campaign_id'] = undefined;

/**
 * @member {module:model/ActionType} billable_event
 */
AdGroupUpdateRequest.prototype['billable_event'] = undefined;

/**
 * Bid strategy type. For Campaigns with Video Completion objectives, the only supported bid strategy type is AUTOMATIC_BID.
 * @member {module:model/AdGroupUpdateRequest.BidStrategyTypeEnum} bid_strategy_type
 */
AdGroupUpdateRequest.prototype['bid_strategy_type'] = undefined;

/**
 * Targeting template IDs applied to the ad group. We currently only support 1 targeting template per ad group. To use targeting templates, do not set any other targeting fields: targeting_spec, tracking_urls, auto_targeting_enabled, placement_group. To clear all targeting template IDs, set this field to ['0'].
 * @member {Array.<String>} targeting_template_ids
 */
AdGroupUpdateRequest.prototype['targeting_template_ids'] = undefined;

/**
 * Ad group ID.
 * @member {String} id
 */
AdGroupUpdateRequest.prototype['id'] = undefined;


// Implement AdGroupCommon interface:
/**
 * Ad group name.
 * @member {String} name
 */
AdGroupCommon.prototype['name'] = undefined;
/**
 * Ad group/entity status.
 * @member {module:model/EntityStatus} status
 */
AdGroupCommon.prototype['status'] = undefined;
/**
 * Budget in micro currency. This field is **REQUIRED** for non-CBO (campaign budget optimization) campaigns.  A CBO campaign automatically generates ad group budgets from its campaign budget to maximize campaign outcome. A CBO campaign is limited to 70 or less ad groups.
 * @member {Number} budget_in_micro_currency
 */
AdGroupCommon.prototype['budget_in_micro_currency'] = undefined;
/**
 * Bid price in micro currency. This field is **REQUIRED** for the following campaign objective_type/billable_event combinations: AWARENESS/IMPRESSION, CONSIDERATION/CLICKTHROUGH, CATALOG_SALES/CLICKTHROUGH, VIDEO_VIEW/VIDEO_V_50_MRC.
 * @member {Number} bid_in_micro_currency
 */
AdGroupCommon.prototype['bid_in_micro_currency'] = undefined;
/**
 * Optimization goals for objective-based performance campaigns. **REQUIRED** when campaign's `objective_type` is set to `\"WEB_CONVERSION\"`.
 * @member {module:model/OptimizationGoalMetadata} optimization_goal_metadata
 */
AdGroupCommon.prototype['optimization_goal_metadata'] = undefined;
/**
 * @member {module:model/BudgetType} budget_type
 */
AdGroupCommon.prototype['budget_type'] = undefined;
/**
 * Ad group start time. Unix timestamp in seconds. Defaults to current time.
 * @member {Number} start_time
 */
AdGroupCommon.prototype['start_time'] = undefined;
/**
 * Ad group end time. Unix timestamp in seconds.
 * @member {Number} end_time
 */
AdGroupCommon.prototype['end_time'] = undefined;
/**
 * @member {module:model/TargetingSpec} targeting_spec
 */
AdGroupCommon.prototype['targeting_spec'] = undefined;
/**
 * Set a limit to the number of times a promoted pin from this campaign can be impressed by a pinner within the past rolling 30 days. Only available for CPM (cost per mille (1000 impressions))  ad groups. A CPM ad group has an IMPRESSION <a href=\"/docs/redoc/#section/Billable-event\">billable_event</a> value. This field **REQUIRES** the `end_time` field.
 * @member {Number} lifetime_frequency_cap
 */
AdGroupCommon.prototype['lifetime_frequency_cap'] = undefined;
/**
 * Third-party tracking URLs.<br> JSON object with the format: {\"<a href=\"/docs/redoc/#section/Tracking-URL-event\">Tracking event enum</a>\":[URL string array],...}<br> For example: {\"impression\": [\"URL1\", \"URL2\"], \"click\": [\"URL1\", \"URL2\", \"URL3\"]}.<br>Up to three tracking URLs are supported for each event type. Tracking URLs set at the ad group or ad level can override those set at the campaign level. May be null. Pass in an empty object - {} - to remove tracking URLs.<br><br> For more information, see <a href=\"https://help.pinterest.com/en/business/article/third-party-and-dynamic-tracking\" target=\"_blank\">Third-party and dynamic tracking</a>.
 * @member {module:model/TrackingUrls} tracking_urls
 */
AdGroupCommon.prototype['tracking_urls'] = undefined;
/**
 * Enable auto-targeting for ad group. Also known as <a href=\"https://help.pinterest.com/en/business/article/expanded-targeting\" target=\"_blank\">\"expanded targeting\"</a>.
 * @member {Boolean} auto_targeting_enabled
 */
AdGroupCommon.prototype['auto_targeting_enabled'] = undefined;
/**
 * <a href=\"/docs/redoc/#section/Placement-group\">Placement group</a>.
 * @member {module:model/PlacementGroupType} placement_group
 */
AdGroupCommon.prototype['placement_group'] = undefined;
/**
 * @member {module:model/PacingDeliveryType} pacing_delivery_type
 */
AdGroupCommon.prototype['pacing_delivery_type'] = undefined;
/**
 * Campaign ID of the ad group.
 * @member {String} campaign_id
 */
AdGroupCommon.prototype['campaign_id'] = undefined;
/**
 * @member {module:model/ActionType} billable_event
 */
AdGroupCommon.prototype['billable_event'] = undefined;
/**
 * Bid strategy type. For Campaigns with Video Completion objectives, the only supported bid strategy type is AUTOMATIC_BID.
 * @member {module:model/AdGroupCommon.BidStrategyTypeEnum} bid_strategy_type
 */
AdGroupCommon.prototype['bid_strategy_type'] = undefined;
/**
 * Targeting template IDs applied to the ad group. We currently only support 1 targeting template per ad group. To use targeting templates, do not set any other targeting fields: targeting_spec, tracking_urls, auto_targeting_enabled, placement_group. To clear all targeting template IDs, set this field to ['0'].
 * @member {Array.<String>} targeting_template_ids
 */
AdGroupCommon.prototype['targeting_template_ids'] = undefined;



/**
 * Allowed values for the <code>bid_strategy_type</code> property.
 * @enum {String}
 * @readonly
 */
AdGroupUpdateRequest['BidStrategyTypeEnum'] = {

    /**
     * value: "AUTOMATIC_BID"
     * @const
     */
    "AUTOMATIC_BID": "AUTOMATIC_BID",

    /**
     * value: "MAX_BID"
     * @const
     */
    "MAX_BID": "MAX_BID",

    /**
     * value: "TARGET_AVG"
     * @const
     */
    "TARGET_AVG": "TARGET_AVG"
};



export default AdGroupUpdateRequest;

