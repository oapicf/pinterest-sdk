/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PinMediaSourceImageBase64 from './PinMediaSourceImageBase64';
import PinMediaSourceImageURL from './PinMediaSourceImageURL';
import PinMediaSourceImagesBase64 from './PinMediaSourceImagesBase64';
import PinMediaSourceImagesURL from './PinMediaSourceImagesURL';
import PinMediaSourceImagesURLItemsInner from './PinMediaSourceImagesURLItemsInner';
import PinMediaSourcePinURL from './PinMediaSourcePinURL';
import PinMediaSourceVideoID from './PinMediaSourceVideoID';

/**
 * The PinMediaSource model module.
 * @module model/PinMediaSource
 * @version 1.1.1-pre.0
 */
class PinMediaSource {
    /**
     * Constructs a new <code>PinMediaSource</code>.
     * Pin media source.
     * @alias module:model/PinMediaSource
     * @param {(module:model/PinMediaSourceImageBase64|module:model/PinMediaSourceImageURL|module:model/PinMediaSourceImagesBase64|module:model/PinMediaSourceImagesURL|module:model/PinMediaSourcePinURL|module:model/PinMediaSourceVideoID)} instance The actual instance to initialize PinMediaSource.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            if (typeof instance === "PinMediaSourceImageBase64") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                PinMediaSourceImageBase64.validateJSON(instance); // throw an exception if no match
                // create PinMediaSourceImageBase64 from JS object
                this.actualInstance = PinMediaSourceImageBase64.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into PinMediaSourceImageBase64
            errorMessages.push("Failed to construct PinMediaSourceImageBase64: " + err)
        }

        try {
            if (typeof instance === "PinMediaSourceImageURL") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                PinMediaSourceImageURL.validateJSON(instance); // throw an exception if no match
                // create PinMediaSourceImageURL from JS object
                this.actualInstance = PinMediaSourceImageURL.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into PinMediaSourceImageURL
            errorMessages.push("Failed to construct PinMediaSourceImageURL: " + err)
        }

        try {
            if (typeof instance === "PinMediaSourceVideoID") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                PinMediaSourceVideoID.validateJSON(instance); // throw an exception if no match
                // create PinMediaSourceVideoID from JS object
                this.actualInstance = PinMediaSourceVideoID.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into PinMediaSourceVideoID
            errorMessages.push("Failed to construct PinMediaSourceVideoID: " + err)
        }

        try {
            if (typeof instance === "PinMediaSourceImagesBase64") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                PinMediaSourceImagesBase64.validateJSON(instance); // throw an exception if no match
                // create PinMediaSourceImagesBase64 from JS object
                this.actualInstance = PinMediaSourceImagesBase64.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into PinMediaSourceImagesBase64
            errorMessages.push("Failed to construct PinMediaSourceImagesBase64: " + err)
        }

        try {
            if (typeof instance === "PinMediaSourceImagesURL") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                PinMediaSourceImagesURL.validateJSON(instance); // throw an exception if no match
                // create PinMediaSourceImagesURL from JS object
                this.actualInstance = PinMediaSourceImagesURL.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into PinMediaSourceImagesURL
            errorMessages.push("Failed to construct PinMediaSourceImagesURL: " + err)
        }

        try {
            if (typeof instance === "PinMediaSourcePinURL") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                PinMediaSourcePinURL.validateJSON(instance); // throw an exception if no match
                // create PinMediaSourcePinURL from JS object
                this.actualInstance = PinMediaSourcePinURL.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into PinMediaSourcePinURL
            errorMessages.push("Failed to construct PinMediaSourcePinURL: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `PinMediaSource` with oneOf schemas PinMediaSourceImageBase64, PinMediaSourceImageURL, PinMediaSourceImagesBase64, PinMediaSourceImagesURL, PinMediaSourcePinURL, PinMediaSourceVideoID. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `PinMediaSource` with oneOf schemas PinMediaSourceImageBase64, PinMediaSourceImageURL, PinMediaSourceImagesBase64, PinMediaSourceImagesURL, PinMediaSourcePinURL, PinMediaSourceVideoID. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>PinMediaSource</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PinMediaSource} obj Optional instance to populate.
     * @return {module:model/PinMediaSource} The populated <code>PinMediaSource</code> instance.
     */
    static constructFromObject(data, obj) {
        return new PinMediaSource(data);
    }

    /**
     * Gets the actual instance, which can be <code>PinMediaSourceImageBase64</code>, <code>PinMediaSourceImageURL</code>, <code>PinMediaSourceImagesBase64</code>, <code>PinMediaSourceImagesURL</code>, <code>PinMediaSourcePinURL</code>, <code>PinMediaSourceVideoID</code>.
     * @return {(module:model/PinMediaSourceImageBase64|module:model/PinMediaSourceImageURL|module:model/PinMediaSourceImagesBase64|module:model/PinMediaSourceImagesURL|module:model/PinMediaSourcePinURL|module:model/PinMediaSourceVideoID)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>PinMediaSourceImageBase64</code>, <code>PinMediaSourceImageURL</code>, <code>PinMediaSourceImagesBase64</code>, <code>PinMediaSourceImagesURL</code>, <code>PinMediaSourcePinURL</code>, <code>PinMediaSourceVideoID</code>.
     * @param {(module:model/PinMediaSourceImageBase64|module:model/PinMediaSourceImageURL|module:model/PinMediaSourceImagesBase64|module:model/PinMediaSourceImagesURL|module:model/PinMediaSourcePinURL|module:model/PinMediaSourceVideoID)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = PinMediaSource.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of PinMediaSource from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/PinMediaSource} An instance of PinMediaSource.
     */
    static fromJSON = function(json_string){
        return PinMediaSource.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * @member {module:model/PinMediaSource.SourceTypeEnum} source_type
 */
PinMediaSource.prototype['source_type'] = undefined;

/**
 * @member {module:model/PinMediaSource.ContentTypeEnum} content_type
 */
PinMediaSource.prototype['content_type'] = undefined;

/**
 * @member {String} data
 */
PinMediaSource.prototype['data'] = undefined;

/**
 * Set the parameter to false to create the new simplified Pin instead of the standard pin. Currently the field is only available to a list of beta users.
 * @member {Boolean} is_standard
 * @default true
 */
PinMediaSource.prototype['is_standard'] = true;

/**
 * @member {String} url
 */
PinMediaSource.prototype['url'] = undefined;

/**
 * Cover image url.
 * @member {String} cover_image_url
 */
PinMediaSource.prototype['cover_image_url'] = undefined;

/**
 * Content type for cover image Base64.
 * @member {module:model/PinMediaSource.CoverImageContentTypeEnum} cover_image_content_type
 */
PinMediaSource.prototype['cover_image_content_type'] = undefined;

/**
 * Cover image Base64.
 * @member {String} cover_image_data
 */
PinMediaSource.prototype['cover_image_data'] = undefined;

/**
 * @member {String} media_id
 */
PinMediaSource.prototype['media_id'] = undefined;

/**
 * Array with image objects.
 * @member {Array.<module:model/PinMediaSourceImagesURLItemsInner>} items
 */
PinMediaSource.prototype['items'] = undefined;

/**
 * @member {Number} index
 */
PinMediaSource.prototype['index'] = undefined;

/**
 * This is an affiliate link or sponsored product. The FTC requires disclosure for paid partnerships and affiliate products.
 * @member {Boolean} is_affiliate_link
 * @default false
 */
PinMediaSource.prototype['is_affiliate_link'] = false;


PinMediaSource.OneOf = ["PinMediaSourceImageBase64", "PinMediaSourceImageURL", "PinMediaSourceImagesBase64", "PinMediaSourceImagesURL", "PinMediaSourcePinURL", "PinMediaSourceVideoID"];

export default PinMediaSource;

