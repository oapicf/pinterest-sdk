/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The IntegrationLogClientError model module.
 * @module model/IntegrationLogClientError
 * @version 1.1.1-pre.0
 */
class IntegrationLogClientError {
    /**
     * Constructs a new <code>IntegrationLogClientError</code>.
     * System error details included in the log sent by the client.
     * @alias module:model/IntegrationLogClientError
     */
    constructor() { 
        
        IntegrationLogClientError.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>IntegrationLogClientError</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IntegrationLogClientError} obj Optional instance to populate.
     * @return {module:model/IntegrationLogClientError} The populated <code>IntegrationLogClientError</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IntegrationLogClientError();

            if (data.hasOwnProperty('cause')) {
                obj['cause'] = ApiClient.convertToType(data['cause'], 'String');
            }
            if (data.hasOwnProperty('column_number')) {
                obj['column_number'] = ApiClient.convertToType(data['column_number'], 'Number');
            }
            if (data.hasOwnProperty('file_name')) {
                obj['file_name'] = ApiClient.convertToType(data['file_name'], 'String');
            }
            if (data.hasOwnProperty('line_number')) {
                obj['line_number'] = ApiClient.convertToType(data['line_number'], 'Number');
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('message_detail')) {
                obj['message_detail'] = ApiClient.convertToType(data['message_detail'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('number')) {
                obj['number'] = ApiClient.convertToType(data['number'], 'Number');
            }
            if (data.hasOwnProperty('stack_trace')) {
                obj['stack_trace'] = ApiClient.convertToType(data['stack_trace'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IntegrationLogClientError</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IntegrationLogClientError</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['cause'] && !(typeof data['cause'] === 'string' || data['cause'] instanceof String)) {
            throw new Error("Expected the field `cause` to be a primitive type in the JSON string but got " + data['cause']);
        }
        // ensure the json data is a string
        if (data['file_name'] && !(typeof data['file_name'] === 'string' || data['file_name'] instanceof String)) {
            throw new Error("Expected the field `file_name` to be a primitive type in the JSON string but got " + data['file_name']);
        }
        // ensure the json data is a string
        if (data['message'] && !(typeof data['message'] === 'string' || data['message'] instanceof String)) {
            throw new Error("Expected the field `message` to be a primitive type in the JSON string but got " + data['message']);
        }
        // ensure the json data is a string
        if (data['message_detail'] && !(typeof data['message_detail'] === 'string' || data['message_detail'] instanceof String)) {
            throw new Error("Expected the field `message_detail` to be a primitive type in the JSON string but got " + data['message_detail']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['stack_trace'] && !(typeof data['stack_trace'] === 'string' || data['stack_trace'] instanceof String)) {
            throw new Error("Expected the field `stack_trace` to be a primitive type in the JSON string but got " + data['stack_trace']);
        }

        return true;
    }


}



/**
 * Original cause of the error.
 * @member {String} cause
 */
IntegrationLogClientError.prototype['cause'] = undefined;

/**
 * Column number in the line of the file that raised the error.
 * @member {Number} column_number
 */
IntegrationLogClientError.prototype['column_number'] = undefined;

/**
 * Filename where the error happened.
 * @member {String} file_name
 */
IntegrationLogClientError.prototype['file_name'] = undefined;

/**
 * Line number where the error happened.
 * @member {Number} line_number
 */
IntegrationLogClientError.prototype['line_number'] = undefined;

/**
 * Human-readable description of the error.
 * @member {String} message
 */
IntegrationLogClientError.prototype['message'] = undefined;

/**
 * More detail about the message.
 * @member {String} message_detail
 */
IntegrationLogClientError.prototype['message_detail'] = undefined;

/**
 * Filename where the error happened.
 * @member {String} name
 */
IntegrationLogClientError.prototype['name'] = undefined;

/**
 * Integer that specifies the error code.
 * @member {Number} number
 */
IntegrationLogClientError.prototype['number'] = undefined;

/**
 * Stack trace of where the error happened.
 * @member {String} stack_trace
 */
IntegrationLogClientError.prototype['stack_trace'] = undefined;






export default IntegrationLogClientError;

