/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SharedAudienceAccount model module.
 * @module model/SharedAudienceAccount
 * @version 1.1.1-pre.0
 */
class SharedAudienceAccount {
    /**
     * Constructs a new <code>SharedAudienceAccount</code>.
     * @alias module:model/SharedAudienceAccount
     * @param accountId {String} Account ID (ad account or business ID).
     * @param accountName {String} Account name.
     * @param accountType {module:model/SharedAudienceAccount.AccountTypeEnum} account type
     * @param sharedOnTimestamp {Number} Epoch timestamp in seconds for the shared audience event
     */
    constructor(accountId, accountName, accountType, sharedOnTimestamp) { 
        
        SharedAudienceAccount.initialize(this, accountId, accountName, accountType, sharedOnTimestamp);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, accountId, accountName, accountType, sharedOnTimestamp) { 
        obj['account_id'] = accountId;
        obj['account_name'] = accountName;
        obj['account_type'] = accountType;
        obj['shared_on_timestamp'] = sharedOnTimestamp;
    }

    /**
     * Constructs a <code>SharedAudienceAccount</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SharedAudienceAccount} obj Optional instance to populate.
     * @return {module:model/SharedAudienceAccount} The populated <code>SharedAudienceAccount</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SharedAudienceAccount();

            if (data.hasOwnProperty('account_id')) {
                obj['account_id'] = ApiClient.convertToType(data['account_id'], 'String');
            }
            if (data.hasOwnProperty('account_name')) {
                obj['account_name'] = ApiClient.convertToType(data['account_name'], 'String');
            }
            if (data.hasOwnProperty('account_type')) {
                obj['account_type'] = ApiClient.convertToType(data['account_type'], 'String');
            }
            if (data.hasOwnProperty('shared_on_timestamp')) {
                obj['shared_on_timestamp'] = ApiClient.convertToType(data['shared_on_timestamp'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SharedAudienceAccount</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SharedAudienceAccount</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SharedAudienceAccount.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['account_id'] && !(typeof data['account_id'] === 'string' || data['account_id'] instanceof String)) {
            throw new Error("Expected the field `account_id` to be a primitive type in the JSON string but got " + data['account_id']);
        }
        // ensure the json data is a string
        if (data['account_name'] && !(typeof data['account_name'] === 'string' || data['account_name'] instanceof String)) {
            throw new Error("Expected the field `account_name` to be a primitive type in the JSON string but got " + data['account_name']);
        }
        // ensure the json data is a string
        if (data['account_type'] && !(typeof data['account_type'] === 'string' || data['account_type'] instanceof String)) {
            throw new Error("Expected the field `account_type` to be a primitive type in the JSON string but got " + data['account_type']);
        }

        return true;
    }


}

SharedAudienceAccount.RequiredProperties = ["account_id", "account_name", "account_type", "shared_on_timestamp"];

/**
 * Account ID (ad account or business ID).
 * @member {String} account_id
 */
SharedAudienceAccount.prototype['account_id'] = undefined;

/**
 * Account name.
 * @member {String} account_name
 */
SharedAudienceAccount.prototype['account_name'] = undefined;

/**
 * account type
 * @member {module:model/SharedAudienceAccount.AccountTypeEnum} account_type
 */
SharedAudienceAccount.prototype['account_type'] = undefined;

/**
 * Epoch timestamp in seconds for the shared audience event
 * @member {Number} shared_on_timestamp
 */
SharedAudienceAccount.prototype['shared_on_timestamp'] = undefined;





/**
 * Allowed values for the <code>account_type</code> property.
 * @enum {String}
 * @readonly
 */
SharedAudienceAccount['AccountTypeEnum'] = {

    /**
     * value: "AD_ACCOUNT"
     * @const
     */
    "AD_ACCOUNT": "AD_ACCOUNT",

    /**
     * value: "BUSINESS_ACCOUNT"
     * @const
     */
    "BUSINESS_ACCOUNT": "BUSINESS_ACCOUNT"
};



export default SharedAudienceAccount;

