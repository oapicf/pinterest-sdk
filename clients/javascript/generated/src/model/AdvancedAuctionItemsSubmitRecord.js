/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AdvancedAuctionBidOptions from './AdvancedAuctionBidOptions';
import AdvancedAuctionItemsSubmitDeleteRecord from './AdvancedAuctionItemsSubmitDeleteRecord';
import AdvancedAuctionItemsSubmitUpsertRecord from './AdvancedAuctionItemsSubmitUpsertRecord';
import AdvancedAuctionOperation from './AdvancedAuctionOperation';
import Country from './Country';
import Language from './Language';
import UpdateMaskBidOptionField from './UpdateMaskBidOptionField';

/**
 * The AdvancedAuctionItemsSubmitRecord model module.
 * @module model/AdvancedAuctionItemsSubmitRecord
 * @version 1.1.1-pre.0
 */
class AdvancedAuctionItemsSubmitRecord {
    /**
     * Constructs a new <code>AdvancedAuctionItemsSubmitRecord</code>.
     * Object describing an item bid option operation
     * @alias module:model/AdvancedAuctionItemsSubmitRecord
     * @param {(module:model/AdvancedAuctionItemsSubmitDeleteRecord|module:model/AdvancedAuctionItemsSubmitUpsertRecord)} instance The actual instance to initialize AdvancedAuctionItemsSubmitRecord.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            if (typeof instance === "AdvancedAuctionItemsSubmitUpsertRecord") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                AdvancedAuctionItemsSubmitUpsertRecord.validateJSON(instance); // throw an exception if no match
                // create AdvancedAuctionItemsSubmitUpsertRecord from JS object
                this.actualInstance = AdvancedAuctionItemsSubmitUpsertRecord.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into AdvancedAuctionItemsSubmitUpsertRecord
            errorMessages.push("Failed to construct AdvancedAuctionItemsSubmitUpsertRecord: " + err)
        }

        try {
            if (typeof instance === "AdvancedAuctionItemsSubmitDeleteRecord") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                AdvancedAuctionItemsSubmitDeleteRecord.validateJSON(instance); // throw an exception if no match
                // create AdvancedAuctionItemsSubmitDeleteRecord from JS object
                this.actualInstance = AdvancedAuctionItemsSubmitDeleteRecord.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into AdvancedAuctionItemsSubmitDeleteRecord
            errorMessages.push("Failed to construct AdvancedAuctionItemsSubmitDeleteRecord: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `AdvancedAuctionItemsSubmitRecord` with oneOf schemas AdvancedAuctionItemsSubmitDeleteRecord, AdvancedAuctionItemsSubmitUpsertRecord. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `AdvancedAuctionItemsSubmitRecord` with oneOf schemas AdvancedAuctionItemsSubmitDeleteRecord, AdvancedAuctionItemsSubmitUpsertRecord. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>AdvancedAuctionItemsSubmitRecord</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AdvancedAuctionItemsSubmitRecord} obj Optional instance to populate.
     * @return {module:model/AdvancedAuctionItemsSubmitRecord} The populated <code>AdvancedAuctionItemsSubmitRecord</code> instance.
     */
    static constructFromObject(data, obj) {
        return new AdvancedAuctionItemsSubmitRecord(data);
    }

    /**
     * Gets the actual instance, which can be <code>AdvancedAuctionItemsSubmitDeleteRecord</code>, <code>AdvancedAuctionItemsSubmitUpsertRecord</code>.
     * @return {(module:model/AdvancedAuctionItemsSubmitDeleteRecord|module:model/AdvancedAuctionItemsSubmitUpsertRecord)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>AdvancedAuctionItemsSubmitDeleteRecord</code>, <code>AdvancedAuctionItemsSubmitUpsertRecord</code>.
     * @param {(module:model/AdvancedAuctionItemsSubmitDeleteRecord|module:model/AdvancedAuctionItemsSubmitUpsertRecord)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = AdvancedAuctionItemsSubmitRecord.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of AdvancedAuctionItemsSubmitRecord from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/AdvancedAuctionItemsSubmitRecord} An instance of AdvancedAuctionItemsSubmitRecord.
     */
    static fromJSON = function(json_string){
        return AdvancedAuctionItemsSubmitRecord.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * @member {module:model/AdvancedAuctionOperation} operation
 */
AdvancedAuctionItemsSubmitRecord.prototype['operation'] = undefined;

/**
 * The catalog retail item id in the merchant namespace
 * @member {String} item_id
 */
AdvancedAuctionItemsSubmitRecord.prototype['item_id'] = undefined;

/**
 * @member {module:model/Country} country
 */
AdvancedAuctionItemsSubmitRecord.prototype['country'] = undefined;

/**
 * @member {module:model/Language} language
 */
AdvancedAuctionItemsSubmitRecord.prototype['language'] = undefined;

/**
 * @member {module:model/AdvancedAuctionBidOptions} bid_options
 */
AdvancedAuctionItemsSubmitRecord.prototype['bid_options'] = undefined;

/**
 * The list of item bid option fields to be set or updated. Fields specified in the updated mask without a value specified in the `bid_options` object in the body will be set to `null`. If an item bid option record is being created, fields not specified in the update mask will be initialized to `null`.
 * @member {Array.<module:model/UpdateMaskBidOptionField>} update_mask
 */
AdvancedAuctionItemsSubmitRecord.prototype['update_mask'] = undefined;


AdvancedAuctionItemsSubmitRecord.OneOf = ["AdvancedAuctionItemsSubmitDeleteRecord", "AdvancedAuctionItemsSubmitUpsertRecord"];

export default AdvancedAuctionItemsSubmitRecord;

