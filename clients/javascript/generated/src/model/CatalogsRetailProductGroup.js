/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CatalogsProductGroupFilters from './CatalogsProductGroupFilters';
import CatalogsProductGroupStatus from './CatalogsProductGroupStatus';
import CatalogsProductGroupType from './CatalogsProductGroupType';

/**
 * The CatalogsRetailProductGroup model module.
 * @module model/CatalogsRetailProductGroup
 * @version 1.1.1-pre.0
 */
class CatalogsRetailProductGroup {
    /**
     * Constructs a new <code>CatalogsRetailProductGroup</code>.
     * @alias module:model/CatalogsRetailProductGroup
     * @param catalogType {module:model/CatalogsRetailProductGroup.CatalogTypeEnum} 
     * @param id {String} ID of the catalog product group.
     * @param filters {module:model/CatalogsProductGroupFilters} 
     * @param catalogId {String} Catalog id pertaining to the retail product group.
     * @param feedId {String} id of the catalogs feed belonging to this catalog product group
     */
    constructor(catalogType, id, filters, catalogId, feedId) { 
        
        CatalogsRetailProductGroup.initialize(this, catalogType, id, filters, catalogId, feedId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, catalogType, id, filters, catalogId, feedId) { 
        obj['catalog_type'] = catalogType;
        obj['id'] = id;
        obj['filters'] = filters;
        obj['catalog_id'] = catalogId;
        obj['feed_id'] = feedId;
    }

    /**
     * Constructs a <code>CatalogsRetailProductGroup</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CatalogsRetailProductGroup} obj Optional instance to populate.
     * @return {module:model/CatalogsRetailProductGroup} The populated <code>CatalogsRetailProductGroup</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CatalogsRetailProductGroup();

            if (data.hasOwnProperty('catalog_type')) {
                obj['catalog_type'] = ApiClient.convertToType(data['catalog_type'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('filters')) {
                obj['filters'] = CatalogsProductGroupFilters.constructFromObject(data['filters']);
            }
            if (data.hasOwnProperty('is_featured')) {
                obj['is_featured'] = ApiClient.convertToType(data['is_featured'], 'Boolean');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = CatalogsProductGroupType.constructFromObject(data['type']);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = CatalogsProductGroupStatus.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Number');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'Number');
            }
            if (data.hasOwnProperty('catalog_id')) {
                obj['catalog_id'] = ApiClient.convertToType(data['catalog_id'], 'String');
            }
            if (data.hasOwnProperty('feed_id')) {
                obj['feed_id'] = ApiClient.convertToType(data['feed_id'], 'String');
            }
            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('locale')) {
                obj['locale'] = ApiClient.convertToType(data['locale'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CatalogsRetailProductGroup</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CatalogsRetailProductGroup</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CatalogsRetailProductGroup.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['catalog_type'] && !(typeof data['catalog_type'] === 'string' || data['catalog_type'] instanceof String)) {
            throw new Error("Expected the field `catalog_type` to be a primitive type in the JSON string but got " + data['catalog_type']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // validate the optional field `filters`
        if (data['filters']) { // data not null
          CatalogsProductGroupFilters.validateJSON(data['filters']);
        }
        // ensure the json data is a string
        if (data['catalog_id'] && !(typeof data['catalog_id'] === 'string' || data['catalog_id'] instanceof String)) {
            throw new Error("Expected the field `catalog_id` to be a primitive type in the JSON string but got " + data['catalog_id']);
        }
        // ensure the json data is a string
        if (data['feed_id'] && !(typeof data['feed_id'] === 'string' || data['feed_id'] instanceof String)) {
            throw new Error("Expected the field `feed_id` to be a primitive type in the JSON string but got " + data['feed_id']);
        }
        // ensure the json data is a string
        if (data['country'] && !(typeof data['country'] === 'string' || data['country'] instanceof String)) {
            throw new Error("Expected the field `country` to be a primitive type in the JSON string but got " + data['country']);
        }
        // ensure the json data is a string
        if (data['locale'] && !(typeof data['locale'] === 'string' || data['locale'] instanceof String)) {
            throw new Error("Expected the field `locale` to be a primitive type in the JSON string but got " + data['locale']);
        }

        return true;
    }


}

CatalogsRetailProductGroup.RequiredProperties = ["catalog_type", "id", "filters", "catalog_id", "feed_id"];

/**
 * @member {module:model/CatalogsRetailProductGroup.CatalogTypeEnum} catalog_type
 */
CatalogsRetailProductGroup.prototype['catalog_type'] = undefined;

/**
 * ID of the catalog product group.
 * @member {String} id
 */
CatalogsRetailProductGroup.prototype['id'] = undefined;

/**
 * Name of catalog product group
 * @member {String} name
 */
CatalogsRetailProductGroup.prototype['name'] = undefined;

/**
 * @member {String} description
 */
CatalogsRetailProductGroup.prototype['description'] = undefined;

/**
 * @member {module:model/CatalogsProductGroupFilters} filters
 */
CatalogsRetailProductGroup.prototype['filters'] = undefined;

/**
 * boolean indicator of whether the product group is being featured or not
 * @member {Boolean} is_featured
 */
CatalogsRetailProductGroup.prototype['is_featured'] = undefined;

/**
 * @member {module:model/CatalogsProductGroupType} type
 */
CatalogsRetailProductGroup.prototype['type'] = undefined;

/**
 * @member {module:model/CatalogsProductGroupStatus} status
 */
CatalogsRetailProductGroup.prototype['status'] = undefined;

/**
 * Unix timestamp in seconds of when catalog product group was created.
 * @member {Number} created_at
 */
CatalogsRetailProductGroup.prototype['created_at'] = undefined;

/**
 * Unix timestamp in seconds of last time catalog product group was updated.
 * @member {Number} updated_at
 */
CatalogsRetailProductGroup.prototype['updated_at'] = undefined;

/**
 * Catalog id pertaining to the retail product group.
 * @member {String} catalog_id
 */
CatalogsRetailProductGroup.prototype['catalog_id'] = undefined;

/**
 * id of the catalogs feed belonging to this catalog product group
 * @member {String} feed_id
 */
CatalogsRetailProductGroup.prototype['feed_id'] = undefined;

/**
 * @member {String} country
 */
CatalogsRetailProductGroup.prototype['country'] = undefined;

/**
 * @member {String} locale
 */
CatalogsRetailProductGroup.prototype['locale'] = undefined;





/**
 * Allowed values for the <code>catalog_type</code> property.
 * @enum {String}
 * @readonly
 */
CatalogsRetailProductGroup['CatalogTypeEnum'] = {

    /**
     * value: "RETAIL"
     * @const
     */
    "RETAIL": "RETAIL"
};



export default CatalogsRetailProductGroup;

