/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import UserListType from './UserListType';

/**
 * The CustomerListRequest model module.
 * @module model/CustomerListRequest
 * @version 1.1.1-pre.0
 */
class CustomerListRequest {
    /**
     * Constructs a new <code>CustomerListRequest</code>.
     * @alias module:model/CustomerListRequest
     * @param name {String} Customer list name.
     * @param records {String} Records list. Can be any combination of emails, MAIDs, or IDFAs. Emails must be lowercase and can be plain text or hashed using SHA1, SHA256, or MD5. MAIDs and IDFAs must be hashed with SHA1, SHA256, or MD5.
     */
    constructor(name, records) { 
        
        CustomerListRequest.initialize(this, name, records);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, records) { 
        obj['name'] = name;
        obj['records'] = records;
        obj['list_type'] = 'EMAIL';
    }

    /**
     * Constructs a <code>CustomerListRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CustomerListRequest} obj Optional instance to populate.
     * @return {module:model/CustomerListRequest} The populated <code>CustomerListRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CustomerListRequest();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('records')) {
                obj['records'] = ApiClient.convertToType(data['records'], 'String');
            }
            if (data.hasOwnProperty('list_type')) {
                obj['list_type'] = ApiClient.convertToType(data['list_type'], UserListType);
            }
            if (data.hasOwnProperty('exceptions')) {
                obj['exceptions'] = ApiClient.convertToType(data['exceptions'], Object);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CustomerListRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CustomerListRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CustomerListRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['records'] && !(typeof data['records'] === 'string' || data['records'] instanceof String)) {
            throw new Error("Expected the field `records` to be a primitive type in the JSON string but got " + data['records']);
        }

        return true;
    }


}

CustomerListRequest.RequiredProperties = ["name", "records"];

/**
 * Customer list name.
 * @member {String} name
 */
CustomerListRequest.prototype['name'] = undefined;

/**
 * Records list. Can be any combination of emails, MAIDs, or IDFAs. Emails must be lowercase and can be plain text or hashed using SHA1, SHA256, or MD5. MAIDs and IDFAs must be hashed with SHA1, SHA256, or MD5.
 * @member {String} records
 */
CustomerListRequest.prototype['records'] = undefined;

/**
 * @member {module:model/UserListType} list_type
 * @default 'EMAIL'
 */
CustomerListRequest.prototype['list_type'] = 'EMAIL';

/**
 * Customer list errors.
 * @member {Object} exceptions
 */
CustomerListRequest.prototype['exceptions'] = undefined;






export default CustomerListRequest;

