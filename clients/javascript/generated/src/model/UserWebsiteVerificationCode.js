/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The UserWebsiteVerificationCode model module.
 * @module model/UserWebsiteVerificationCode
 * @version 1.1.1-pre.0
 */
class UserWebsiteVerificationCode {
    /**
     * Constructs a new <code>UserWebsiteVerificationCode</code>.
     * @alias module:model/UserWebsiteVerificationCode
     */
    constructor() { 
        
        UserWebsiteVerificationCode.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UserWebsiteVerificationCode</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UserWebsiteVerificationCode} obj Optional instance to populate.
     * @return {module:model/UserWebsiteVerificationCode} The populated <code>UserWebsiteVerificationCode</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UserWebsiteVerificationCode();

            if (data.hasOwnProperty('verification_code')) {
                obj['verification_code'] = ApiClient.convertToType(data['verification_code'], 'String');
            }
            if (data.hasOwnProperty('dns_txt_record')) {
                obj['dns_txt_record'] = ApiClient.convertToType(data['dns_txt_record'], 'String');
            }
            if (data.hasOwnProperty('metatag')) {
                obj['metatag'] = ApiClient.convertToType(data['metatag'], 'String');
            }
            if (data.hasOwnProperty('filename')) {
                obj['filename'] = ApiClient.convertToType(data['filename'], 'String');
            }
            if (data.hasOwnProperty('file_content')) {
                obj['file_content'] = ApiClient.convertToType(data['file_content'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UserWebsiteVerificationCode</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UserWebsiteVerificationCode</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['verification_code'] && !(typeof data['verification_code'] === 'string' || data['verification_code'] instanceof String)) {
            throw new Error("Expected the field `verification_code` to be a primitive type in the JSON string but got " + data['verification_code']);
        }
        // ensure the json data is a string
        if (data['dns_txt_record'] && !(typeof data['dns_txt_record'] === 'string' || data['dns_txt_record'] instanceof String)) {
            throw new Error("Expected the field `dns_txt_record` to be a primitive type in the JSON string but got " + data['dns_txt_record']);
        }
        // ensure the json data is a string
        if (data['metatag'] && !(typeof data['metatag'] === 'string' || data['metatag'] instanceof String)) {
            throw new Error("Expected the field `metatag` to be a primitive type in the JSON string but got " + data['metatag']);
        }
        // ensure the json data is a string
        if (data['filename'] && !(typeof data['filename'] === 'string' || data['filename'] instanceof String)) {
            throw new Error("Expected the field `filename` to be a primitive type in the JSON string but got " + data['filename']);
        }
        // ensure the json data is a string
        if (data['file_content'] && !(typeof data['file_content'] === 'string' || data['file_content'] instanceof String)) {
            throw new Error("Expected the field `file_content` to be a primitive type in the JSON string but got " + data['file_content']);
        }

        return true;
    }


}



/**
 * Code to check against the user claiming the website
 * @member {String} verification_code
 */
UserWebsiteVerificationCode.prototype['verification_code'] = undefined;

/**
 * DNS TXT record to check against for the website to be claimed
 * @member {String} dns_txt_record
 */
UserWebsiteVerificationCode.prototype['dns_txt_record'] = undefined;

/**
 * Metatag the verification process searchs for the website to be claimed
 * @member {String} metatag
 */
UserWebsiteVerificationCode.prototype['metatag'] = undefined;

/**
 * File expected to find on the website being claimed
 * @member {String} filename
 */
UserWebsiteVerificationCode.prototype['filename'] = undefined;

/**
 * A full html file to upload to the website in order for it to be claimed
 * @member {String} file_content
 */
UserWebsiteVerificationCode.prototype['file_content'] = undefined;






export default UserWebsiteVerificationCode;

