/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CatalogsCreativeAssetsProduct from './CatalogsCreativeAssetsProduct';
import CatalogsCreativeAssetsProductMetadata from './CatalogsCreativeAssetsProductMetadata';
import CatalogsHotelProduct from './CatalogsHotelProduct';
import CatalogsRetailProduct from './CatalogsRetailProduct';
import CatalogsType from './CatalogsType';
import Pin from './Pin';

/**
 * The CatalogsProduct model module.
 * @module model/CatalogsProduct
 * @version 1.1.1-pre.0
 */
class CatalogsProduct {
    /**
     * Constructs a new <code>CatalogsProduct</code>.
     * Catalogs product for all verticals
     * @alias module:model/CatalogsProduct
     * @param {(module:model/CatalogsCreativeAssetsProduct|module:model/CatalogsHotelProduct|module:model/CatalogsRetailProduct)} instance The actual instance to initialize CatalogsProduct.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            if (typeof instance === "CatalogsRetailProduct") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                CatalogsRetailProduct.validateJSON(instance); // throw an exception if no match
                // create CatalogsRetailProduct from JS object
                this.actualInstance = CatalogsRetailProduct.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into CatalogsRetailProduct
            errorMessages.push("Failed to construct CatalogsRetailProduct: " + err)
        }

        try {
            if (typeof instance === "CatalogsHotelProduct") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                CatalogsHotelProduct.validateJSON(instance); // throw an exception if no match
                // create CatalogsHotelProduct from JS object
                this.actualInstance = CatalogsHotelProduct.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into CatalogsHotelProduct
            errorMessages.push("Failed to construct CatalogsHotelProduct: " + err)
        }

        try {
            if (typeof instance === "CatalogsCreativeAssetsProduct") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                CatalogsCreativeAssetsProduct.validateJSON(instance); // throw an exception if no match
                // create CatalogsCreativeAssetsProduct from JS object
                this.actualInstance = CatalogsCreativeAssetsProduct.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into CatalogsCreativeAssetsProduct
            errorMessages.push("Failed to construct CatalogsCreativeAssetsProduct: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `CatalogsProduct` with oneOf schemas CatalogsCreativeAssetsProduct, CatalogsHotelProduct, CatalogsRetailProduct. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `CatalogsProduct` with oneOf schemas CatalogsCreativeAssetsProduct, CatalogsHotelProduct, CatalogsRetailProduct. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>CatalogsProduct</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CatalogsProduct} obj Optional instance to populate.
     * @return {module:model/CatalogsProduct} The populated <code>CatalogsProduct</code> instance.
     */
    static constructFromObject(data, obj) {
        return new CatalogsProduct(data);
    }

    /**
     * Gets the actual instance, which can be <code>CatalogsCreativeAssetsProduct</code>, <code>CatalogsHotelProduct</code>, <code>CatalogsRetailProduct</code>.
     * @return {(module:model/CatalogsCreativeAssetsProduct|module:model/CatalogsHotelProduct|module:model/CatalogsRetailProduct)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>CatalogsCreativeAssetsProduct</code>, <code>CatalogsHotelProduct</code>, <code>CatalogsRetailProduct</code>.
     * @param {(module:model/CatalogsCreativeAssetsProduct|module:model/CatalogsHotelProduct|module:model/CatalogsRetailProduct)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = CatalogsProduct.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of CatalogsProduct from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/CatalogsProduct} An instance of CatalogsProduct.
     */
    static fromJSON = function(json_string){
        return CatalogsProduct.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * @member {module:model/CatalogsType} catalog_type
 */
CatalogsProduct.prototype['catalog_type'] = undefined;

/**
 * @member {module:model/CatalogsCreativeAssetsProductMetadata} metadata
 */
CatalogsProduct.prototype['metadata'] = undefined;

/**
 * @member {module:model/Pin} pin
 */
CatalogsProduct.prototype['pin'] = undefined;


CatalogsProduct.OneOf = ["CatalogsCreativeAssetsProduct", "CatalogsHotelProduct", "CatalogsRetailProduct"];

export default CatalogsProduct;

