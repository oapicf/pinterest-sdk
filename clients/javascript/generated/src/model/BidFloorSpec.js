/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ActionType from './ActionType';
import Country from './Country';
import CreativeType from './CreativeType';
import Currency from './Currency';
import ObjectiveType from './ObjectiveType';
import OptimizationGoalMetadata from './OptimizationGoalMetadata';

/**
 * The BidFloorSpec model module.
 * @module model/BidFloorSpec
 * @version 1.1.1-pre.0
 */
class BidFloorSpec {
    /**
     * Constructs a new <code>BidFloorSpec</code>.
     * @alias module:model/BidFloorSpec
     * @param currency {module:model/Currency} 
     * @param billableEvent {module:model/ActionType} 
     */
    constructor(currency, billableEvent) { 
        
        BidFloorSpec.initialize(this, currency, billableEvent);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, currency, billableEvent) { 
        obj['currency'] = currency;
        obj['billable_event'] = billableEvent;
    }

    /**
     * Constructs a <code>BidFloorSpec</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BidFloorSpec} obj Optional instance to populate.
     * @return {module:model/BidFloorSpec} The populated <code>BidFloorSpec</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BidFloorSpec();

            if (data.hasOwnProperty('countries')) {
                obj['countries'] = ApiClient.convertToType(data['countries'], [Country]);
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = Currency.constructFromObject(data['currency']);
            }
            if (data.hasOwnProperty('objective_type')) {
                obj['objective_type'] = ObjectiveType.constructFromObject(data['objective_type']);
            }
            if (data.hasOwnProperty('billable_event')) {
                obj['billable_event'] = ActionType.constructFromObject(data['billable_event']);
            }
            if (data.hasOwnProperty('optimization_goal_metadata')) {
                obj['optimization_goal_metadata'] = OptimizationGoalMetadata.constructFromObject(data['optimization_goal_metadata']);
            }
            if (data.hasOwnProperty('creative_type')) {
                obj['creative_type'] = CreativeType.constructFromObject(data['creative_type']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BidFloorSpec</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BidFloorSpec</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of BidFloorSpec.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['countries'])) {
            throw new Error("Expected the field `countries` to be an array in the JSON data but got " + data['countries']);
        }
        // validate the optional field `optimization_goal_metadata`
        if (data['optimization_goal_metadata']) { // data not null
          OptimizationGoalMetadata.validateJSON(data['optimization_goal_metadata']);
        }

        return true;
    }


}

BidFloorSpec.RequiredProperties = ["currency", "billable_event"];

/**
 * @member {Array.<module:model/Country>} countries
 */
BidFloorSpec.prototype['countries'] = undefined;

/**
 * @member {module:model/Currency} currency
 */
BidFloorSpec.prototype['currency'] = undefined;

/**
 * @member {module:model/ObjectiveType} objective_type
 */
BidFloorSpec.prototype['objective_type'] = undefined;

/**
 * @member {module:model/ActionType} billable_event
 */
BidFloorSpec.prototype['billable_event'] = undefined;

/**
 * @member {module:model/OptimizationGoalMetadata} optimization_goal_metadata
 */
BidFloorSpec.prototype['optimization_goal_metadata'] = undefined;

/**
 * @member {module:model/CreativeType} creative_type
 */
BidFloorSpec.prototype['creative_type'] = undefined;






export default BidFloorSpec;

