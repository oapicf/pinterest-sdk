/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NonNullableCatalogsCurrency from './NonNullableCatalogsCurrency';
import NonNullableProductAvailabilityType from './NonNullableProductAvailabilityType';

/**
 * The CatalogsRetailProductMetadata model module.
 * @module model/CatalogsRetailProductMetadata
 * @version 1.1.1-pre.0
 */
class CatalogsRetailProductMetadata {
    /**
     * Constructs a new <code>CatalogsRetailProductMetadata</code>.
     * Retail product metadata entity
     * @alias module:model/CatalogsRetailProductMetadata
     * @param itemId {String} The user-created unique ID that represents the product.
     * @param itemGroupId {String} The parent ID of the product.
     * @param availability {module:model/NonNullableProductAvailabilityType} 
     * @param price {Number} The price of the product.
     * @param salePrice {Number} The discounted price of the product.
     * @param currency {module:model/NonNullableCatalogsCurrency} 
     */
    constructor(itemId, itemGroupId, availability, price, salePrice, currency) { 
        
        CatalogsRetailProductMetadata.initialize(this, itemId, itemGroupId, availability, price, salePrice, currency);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, itemId, itemGroupId, availability, price, salePrice, currency) { 
        obj['item_id'] = itemId;
        obj['item_group_id'] = itemGroupId;
        obj['availability'] = availability;
        obj['price'] = price;
        obj['sale_price'] = salePrice;
        obj['currency'] = currency;
    }

    /**
     * Constructs a <code>CatalogsRetailProductMetadata</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CatalogsRetailProductMetadata} obj Optional instance to populate.
     * @return {module:model/CatalogsRetailProductMetadata} The populated <code>CatalogsRetailProductMetadata</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CatalogsRetailProductMetadata();

            if (data.hasOwnProperty('item_id')) {
                obj['item_id'] = ApiClient.convertToType(data['item_id'], 'String');
            }
            if (data.hasOwnProperty('item_group_id')) {
                obj['item_group_id'] = ApiClient.convertToType(data['item_group_id'], 'String');
            }
            if (data.hasOwnProperty('availability')) {
                obj['availability'] = NonNullableProductAvailabilityType.constructFromObject(data['availability']);
            }
            if (data.hasOwnProperty('price')) {
                obj['price'] = ApiClient.convertToType(data['price'], 'Number');
            }
            if (data.hasOwnProperty('sale_price')) {
                obj['sale_price'] = ApiClient.convertToType(data['sale_price'], 'Number');
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = NonNullableCatalogsCurrency.constructFromObject(data['currency']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CatalogsRetailProductMetadata</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CatalogsRetailProductMetadata</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CatalogsRetailProductMetadata.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['item_id'] && !(typeof data['item_id'] === 'string' || data['item_id'] instanceof String)) {
            throw new Error("Expected the field `item_id` to be a primitive type in the JSON string but got " + data['item_id']);
        }
        // ensure the json data is a string
        if (data['item_group_id'] && !(typeof data['item_group_id'] === 'string' || data['item_group_id'] instanceof String)) {
            throw new Error("Expected the field `item_group_id` to be a primitive type in the JSON string but got " + data['item_group_id']);
        }

        return true;
    }


}

CatalogsRetailProductMetadata.RequiredProperties = ["item_id", "item_group_id", "availability", "price", "sale_price", "currency"];

/**
 * The user-created unique ID that represents the product.
 * @member {String} item_id
 */
CatalogsRetailProductMetadata.prototype['item_id'] = undefined;

/**
 * The parent ID of the product.
 * @member {String} item_group_id
 */
CatalogsRetailProductMetadata.prototype['item_group_id'] = undefined;

/**
 * @member {module:model/NonNullableProductAvailabilityType} availability
 */
CatalogsRetailProductMetadata.prototype['availability'] = undefined;

/**
 * The price of the product.
 * @member {Number} price
 */
CatalogsRetailProductMetadata.prototype['price'] = undefined;

/**
 * The discounted price of the product.
 * @member {Number} sale_price
 */
CatalogsRetailProductMetadata.prototype['sale_price'] = undefined;

/**
 * @member {module:model/NonNullableCatalogsCurrency} currency
 */
CatalogsRetailProductMetadata.prototype['currency'] = undefined;






export default CatalogsRetailProductMetadata;

