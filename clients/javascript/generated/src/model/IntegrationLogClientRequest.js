/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The IntegrationLogClientRequest model module.
 * @module model/IntegrationLogClientRequest
 * @version 1.1.1-pre.0
 */
class IntegrationLogClientRequest {
    /**
     * Constructs a new <code>IntegrationLogClientRequest</code>.
     * HTTP request details included in the log sent by the client.
     * @alias module:model/IntegrationLogClientRequest
     * @param method {module:model/IntegrationLogClientRequest.MethodEnum} 
     * @param host {String} HTTP request host from host header.
     * @param path {String} HTTP request path.
     */
    constructor(method, host, path) { 
        
        IntegrationLogClientRequest.initialize(this, method, host, path);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, method, host, path) { 
        obj['method'] = method;
        obj['host'] = host;
        obj['path'] = path;
    }

    /**
     * Constructs a <code>IntegrationLogClientRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IntegrationLogClientRequest} obj Optional instance to populate.
     * @return {module:model/IntegrationLogClientRequest} The populated <code>IntegrationLogClientRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IntegrationLogClientRequest();

            if (data.hasOwnProperty('method')) {
                obj['method'] = ApiClient.convertToType(data['method'], 'String');
            }
            if (data.hasOwnProperty('host')) {
                obj['host'] = ApiClient.convertToType(data['host'], 'String');
            }
            if (data.hasOwnProperty('path')) {
                obj['path'] = ApiClient.convertToType(data['path'], 'String');
            }
            if (data.hasOwnProperty('request_headers')) {
                obj['request_headers'] = ApiClient.convertToType(data['request_headers'], {'String': 'String'});
            }
            if (data.hasOwnProperty('response_headers')) {
                obj['response_headers'] = ApiClient.convertToType(data['response_headers'], {'String': 'String'});
            }
            if (data.hasOwnProperty('response_status_code')) {
                obj['response_status_code'] = ApiClient.convertToType(data['response_status_code'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IntegrationLogClientRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IntegrationLogClientRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of IntegrationLogClientRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['method'] && !(typeof data['method'] === 'string' || data['method'] instanceof String)) {
            throw new Error("Expected the field `method` to be a primitive type in the JSON string but got " + data['method']);
        }
        // ensure the json data is a string
        if (data['host'] && !(typeof data['host'] === 'string' || data['host'] instanceof String)) {
            throw new Error("Expected the field `host` to be a primitive type in the JSON string but got " + data['host']);
        }
        // ensure the json data is a string
        if (data['path'] && !(typeof data['path'] === 'string' || data['path'] instanceof String)) {
            throw new Error("Expected the field `path` to be a primitive type in the JSON string but got " + data['path']);
        }

        return true;
    }


}

IntegrationLogClientRequest.RequiredProperties = ["method", "host", "path"];

/**
 * @member {module:model/IntegrationLogClientRequest.MethodEnum} method
 */
IntegrationLogClientRequest.prototype['method'] = undefined;

/**
 * HTTP request host from host header.
 * @member {String} host
 */
IntegrationLogClientRequest.prototype['host'] = undefined;

/**
 * HTTP request path.
 * @member {String} path
 */
IntegrationLogClientRequest.prototype['path'] = undefined;

/**
 * HTTP request headers as key-value pairs.
 * @member {Object.<String, String>} request_headers
 */
IntegrationLogClientRequest.prototype['request_headers'] = undefined;

/**
 * HTTP response headers as key-value pairs.
 * @member {Object.<String, String>} response_headers
 */
IntegrationLogClientRequest.prototype['response_headers'] = undefined;

/**
 * @member {Number} response_status_code
 */
IntegrationLogClientRequest.prototype['response_status_code'] = undefined;





/**
 * Allowed values for the <code>method</code> property.
 * @enum {String}
 * @readonly
 */
IntegrationLogClientRequest['MethodEnum'] = {

    /**
     * value: "GET"
     * @const
     */
    "GET": "GET",

    /**
     * value: "HEAD"
     * @const
     */
    "HEAD": "HEAD",

    /**
     * value: "POST"
     * @const
     */
    "POST": "POST",

    /**
     * value: "PUT"
     * @const
     */
    "PUT": "PUT",

    /**
     * value: "DELETE"
     * @const
     */
    "DELETE": "DELETE",

    /**
     * value: "CONNECT"
     * @const
     */
    "CONNECT": "CONNECT",

    /**
     * value: "OPTIONS"
     * @const
     */
    "OPTIONS": "OPTIONS",

    /**
     * value: "TRACE"
     * @const
     */
    "TRACE": "TRACE",

    /**
     * value: "PATCH"
     * @const
     */
    "PATCH": "PATCH"
};



export default IntegrationLogClientRequest;

