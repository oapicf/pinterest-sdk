/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BatchOperation from './BatchOperation';
import CatalogsItemsRequestLanguage from './CatalogsItemsRequestLanguage';
import Country from './Country';
import ItemDeleteDiscontinuedBatchRecord from './ItemDeleteDiscontinuedBatchRecord';

/**
 * The CatalogsItemsDeleteDiscontinuedBatchRequest model module.
 * @module model/CatalogsItemsDeleteDiscontinuedBatchRequest
 * @version 1.1.1-pre.0
 */
class CatalogsItemsDeleteDiscontinuedBatchRequest {
    /**
     * Constructs a new <code>CatalogsItemsDeleteDiscontinuedBatchRequest</code>.
     * Request object to discontinue catalogs items
     * @alias module:model/CatalogsItemsDeleteDiscontinuedBatchRequest
     * @param country {module:model/Country} 
     * @param language {module:model/CatalogsItemsRequestLanguage} 
     * @param operation {module:model/BatchOperation} 
     * @param items {Array.<module:model/ItemDeleteDiscontinuedBatchRecord>} Array with catalogs items
     */
    constructor(country, language, operation, items) { 
        
        CatalogsItemsDeleteDiscontinuedBatchRequest.initialize(this, country, language, operation, items);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, country, language, operation, items) { 
        obj['country'] = country;
        obj['language'] = language;
        obj['operation'] = operation;
        obj['items'] = items;
    }

    /**
     * Constructs a <code>CatalogsItemsDeleteDiscontinuedBatchRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CatalogsItemsDeleteDiscontinuedBatchRequest} obj Optional instance to populate.
     * @return {module:model/CatalogsItemsDeleteDiscontinuedBatchRequest} The populated <code>CatalogsItemsDeleteDiscontinuedBatchRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CatalogsItemsDeleteDiscontinuedBatchRequest();

            if (data.hasOwnProperty('country')) {
                obj['country'] = Country.constructFromObject(data['country']);
            }
            if (data.hasOwnProperty('language')) {
                obj['language'] = CatalogsItemsRequestLanguage.constructFromObject(data['language']);
            }
            if (data.hasOwnProperty('operation')) {
                obj['operation'] = BatchOperation.constructFromObject(data['operation']);
            }
            if (data.hasOwnProperty('items')) {
                obj['items'] = ApiClient.convertToType(data['items'], [ItemDeleteDiscontinuedBatchRecord]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CatalogsItemsDeleteDiscontinuedBatchRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CatalogsItemsDeleteDiscontinuedBatchRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CatalogsItemsDeleteDiscontinuedBatchRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `language`
        if (data['language']) { // data not null
          CatalogsItemsRequestLanguage.validateJSON(data['language']);
        }
        if (data['items']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['items'])) {
                throw new Error("Expected the field `items` to be an array in the JSON data but got " + data['items']);
            }
            // validate the optional field `items` (array)
            for (const item of data['items']) {
                ItemDeleteDiscontinuedBatchRecord.validateJSON(item);
            };
        }

        return true;
    }


}

CatalogsItemsDeleteDiscontinuedBatchRequest.RequiredProperties = ["country", "language", "operation", "items"];

/**
 * @member {module:model/Country} country
 */
CatalogsItemsDeleteDiscontinuedBatchRequest.prototype['country'] = undefined;

/**
 * @member {module:model/CatalogsItemsRequestLanguage} language
 */
CatalogsItemsDeleteDiscontinuedBatchRequest.prototype['language'] = undefined;

/**
 * @member {module:model/BatchOperation} operation
 */
CatalogsItemsDeleteDiscontinuedBatchRequest.prototype['operation'] = undefined;

/**
 * Array with catalogs items
 * @member {Array.<module:model/ItemDeleteDiscontinuedBatchRecord>} items
 */
CatalogsItemsDeleteDiscontinuedBatchRequest.prototype['items'] = undefined;






export default CatalogsItemsDeleteDiscontinuedBatchRequest;

