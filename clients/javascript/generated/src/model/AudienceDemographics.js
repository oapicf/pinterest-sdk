/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AudienceDemographicValue from './AudienceDemographicValue';

/**
 * The AudienceDemographics model module.
 * @module model/AudienceDemographics
 * @version 1.1.1-pre.0
 */
class AudienceDemographics {
    /**
     * Constructs a new <code>AudienceDemographics</code>.
     * Audience demographics
     * @alias module:model/AudienceDemographics
     */
    constructor() { 
        
        AudienceDemographics.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AudienceDemographics</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AudienceDemographics} obj Optional instance to populate.
     * @return {module:model/AudienceDemographics} The populated <code>AudienceDemographics</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AudienceDemographics();

            if (data.hasOwnProperty('ages')) {
                obj['ages'] = ApiClient.convertToType(data['ages'], [AudienceDemographicValue]);
            }
            if (data.hasOwnProperty('genders')) {
                obj['genders'] = ApiClient.convertToType(data['genders'], [AudienceDemographicValue]);
            }
            if (data.hasOwnProperty('devices')) {
                obj['devices'] = ApiClient.convertToType(data['devices'], [AudienceDemographicValue]);
            }
            if (data.hasOwnProperty('metros')) {
                obj['metros'] = ApiClient.convertToType(data['metros'], [AudienceDemographicValue]);
            }
            if (data.hasOwnProperty('countries')) {
                obj['countries'] = ApiClient.convertToType(data['countries'], [AudienceDemographicValue]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AudienceDemographics</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AudienceDemographics</code>.
     */
    static validateJSON(data) {
        if (data['ages']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['ages'])) {
                throw new Error("Expected the field `ages` to be an array in the JSON data but got " + data['ages']);
            }
            // validate the optional field `ages` (array)
            for (const item of data['ages']) {
                AudienceDemographicValue.validateJSON(item);
            };
        }
        if (data['genders']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['genders'])) {
                throw new Error("Expected the field `genders` to be an array in the JSON data but got " + data['genders']);
            }
            // validate the optional field `genders` (array)
            for (const item of data['genders']) {
                AudienceDemographicValue.validateJSON(item);
            };
        }
        if (data['devices']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['devices'])) {
                throw new Error("Expected the field `devices` to be an array in the JSON data but got " + data['devices']);
            }
            // validate the optional field `devices` (array)
            for (const item of data['devices']) {
                AudienceDemographicValue.validateJSON(item);
            };
        }
        if (data['metros']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['metros'])) {
                throw new Error("Expected the field `metros` to be an array in the JSON data but got " + data['metros']);
            }
            // validate the optional field `metros` (array)
            for (const item of data['metros']) {
                AudienceDemographicValue.validateJSON(item);
            };
        }
        if (data['countries']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['countries'])) {
                throw new Error("Expected the field `countries` to be an array in the JSON data but got " + data['countries']);
            }
            // validate the optional field `countries` (array)
            for (const item of data['countries']) {
                AudienceDemographicValue.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Ages distribution.
 * @member {Array.<module:model/AudienceDemographicValue>} ages
 */
AudienceDemographics.prototype['ages'] = undefined;

/**
 * Gender distribution.
 * @member {Array.<module:model/AudienceDemographicValue>} genders
 */
AudienceDemographics.prototype['genders'] = undefined;

/**
 * Device usage distribution.
 * @member {Array.<module:model/AudienceDemographicValue>} devices
 */
AudienceDemographics.prototype['devices'] = undefined;

/**
 * Geographic metro area distribution.
 * @member {Array.<module:model/AudienceDemographicValue>} metros
 */
AudienceDemographics.prototype['metros'] = undefined;

/**
 * Country area distribution.
 * @member {Array.<module:model/AudienceDemographicValue>} countries
 */
AudienceDemographics.prototype['countries'] = undefined;






export default AudienceDemographics;

