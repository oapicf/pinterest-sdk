/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CatalogsRetailProductGroupProductCounts model module.
 * @module model/CatalogsRetailProductGroupProductCounts
 * @version 1.1.1-pre.0
 */
class CatalogsRetailProductGroupProductCounts {
    /**
     * Constructs a new <code>CatalogsRetailProductGroupProductCounts</code>.
     * Product counts for a Retail CatalogsProductGroup
     * @alias module:model/CatalogsRetailProductGroupProductCounts
     * @param catalogType {module:model/CatalogsRetailProductGroupProductCounts.CatalogTypeEnum} 
     * @param inStock {Number} 
     * @param outOfStock {Number} 
     * @param preorder {Number} 
     * @param total {Number} 
     */
    constructor(catalogType, inStock, outOfStock, preorder, total) { 
        
        CatalogsRetailProductGroupProductCounts.initialize(this, catalogType, inStock, outOfStock, preorder, total);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, catalogType, inStock, outOfStock, preorder, total) { 
        obj['catalog_type'] = catalogType;
        obj['in_stock'] = inStock;
        obj['out_of_stock'] = outOfStock;
        obj['preorder'] = preorder;
        obj['total'] = total;
    }

    /**
     * Constructs a <code>CatalogsRetailProductGroupProductCounts</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CatalogsRetailProductGroupProductCounts} obj Optional instance to populate.
     * @return {module:model/CatalogsRetailProductGroupProductCounts} The populated <code>CatalogsRetailProductGroupProductCounts</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CatalogsRetailProductGroupProductCounts();

            if (data.hasOwnProperty('catalog_type')) {
                obj['catalog_type'] = ApiClient.convertToType(data['catalog_type'], 'String');
            }
            if (data.hasOwnProperty('in_stock')) {
                obj['in_stock'] = ApiClient.convertToType(data['in_stock'], 'Number');
            }
            if (data.hasOwnProperty('out_of_stock')) {
                obj['out_of_stock'] = ApiClient.convertToType(data['out_of_stock'], 'Number');
            }
            if (data.hasOwnProperty('preorder')) {
                obj['preorder'] = ApiClient.convertToType(data['preorder'], 'Number');
            }
            if (data.hasOwnProperty('total')) {
                obj['total'] = ApiClient.convertToType(data['total'], 'Number');
            }
            if (data.hasOwnProperty('videos')) {
                obj['videos'] = ApiClient.convertToType(data['videos'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CatalogsRetailProductGroupProductCounts</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CatalogsRetailProductGroupProductCounts</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CatalogsRetailProductGroupProductCounts.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['catalog_type'] && !(typeof data['catalog_type'] === 'string' || data['catalog_type'] instanceof String)) {
            throw new Error("Expected the field `catalog_type` to be a primitive type in the JSON string but got " + data['catalog_type']);
        }

        return true;
    }


}

CatalogsRetailProductGroupProductCounts.RequiredProperties = ["catalog_type", "in_stock", "out_of_stock", "preorder", "total"];

/**
 * @member {module:model/CatalogsRetailProductGroupProductCounts.CatalogTypeEnum} catalog_type
 */
CatalogsRetailProductGroupProductCounts.prototype['catalog_type'] = undefined;

/**
 * @member {Number} in_stock
 */
CatalogsRetailProductGroupProductCounts.prototype['in_stock'] = undefined;

/**
 * @member {Number} out_of_stock
 */
CatalogsRetailProductGroupProductCounts.prototype['out_of_stock'] = undefined;

/**
 * @member {Number} preorder
 */
CatalogsRetailProductGroupProductCounts.prototype['preorder'] = undefined;

/**
 * @member {Number} total
 */
CatalogsRetailProductGroupProductCounts.prototype['total'] = undefined;

/**
 * @member {Number} videos
 */
CatalogsRetailProductGroupProductCounts.prototype['videos'] = undefined;





/**
 * Allowed values for the <code>catalog_type</code> property.
 * @enum {String}
 * @readonly
 */
CatalogsRetailProductGroupProductCounts['CatalogTypeEnum'] = {

    /**
     * value: "RETAIL"
     * @const
     */
    "RETAIL": "RETAIL"
};



export default CatalogsRetailProductGroupProductCounts;

