/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ObjectiveType from './ObjectiveType';
import PinterestTagEventData from './PinterestTagEventData';

/**
 * The AudienceRule model module.
 * @module model/AudienceRule
 * @version 1.1.1-pre.0
 */
class AudienceRule {
    /**
     * Constructs a new <code>AudienceRule</code>.
     * JSON object defining targeted audience users. Example rule formats per audience type:&lt;br&gt;CUSTOMER_LIST: { \&quot;customer_list_id\&quot;: \&quot;&amp;lt;customer list ID&amp;gt;\&quot;}&lt;br&gt;ACTALIKE: { \&quot;seed_id\&quot;: [\&quot;&amp;lt;audience ID&amp;gt;\&quot;], \&quot;country\&quot;: \&quot;US\&quot;, \&quot;percentage\&quot;: \&quot;10\&quot; }&lt;br&gt;(Valid countries include: \&quot;US\&quot;, \&quot;CA\&quot;, and \&quot;GB\&quot;. Percentage should be 1-10.&lt;br&gt;The targeted audience should be this % size across Pinterest.)&lt;br&gt;VISITOR: { \&quot;visitor_source_id\&quot;: [\&quot;&amp;lt;conversion tag ID&amp;gt;\&quot;], \&quot;retention_days\&quot;: \&quot;180\&quot;, \&quot;event_source\&quot;: {\&quot;&#x3D;\&quot;: [\&quot;web\&quot;, \&quot;mobile\&quot;]}, \&quot;ingestion_source\&quot;: {\&quot;&#x3D;\&quot;: [\&quot;tag\&quot;]}}&lt;br&gt;(Retention days should be 1-540. Retention applies to specific customers.)&lt;br&gt;ENGAGEMENT: {\&quot;engagement_domain\&quot;: [\&quot;www.entomi.com\&quot;], \&quot;engager_type\&quot;: 1}&lt;br&gt;For more details on engagement audiences, see &lt;a href&#x3D;\&quot;/docs/redoc/adtech_ads_v4/#section/November-2021\&quot; target&#x3D;\&quot;_blank\&quot;&gt;November 2021 changelog&lt;/a&gt;.
     * @alias module:model/AudienceRule
     */
    constructor() { 
        
        AudienceRule.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AudienceRule</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AudienceRule} obj Optional instance to populate.
     * @return {module:model/AudienceRule} The populated <code>AudienceRule</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AudienceRule();

            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('customer_list_id')) {
                obj['customer_list_id'] = ApiClient.convertToType(data['customer_list_id'], 'String');
            }
            if (data.hasOwnProperty('engagement_domain')) {
                obj['engagement_domain'] = ApiClient.convertToType(data['engagement_domain'], ['String']);
            }
            if (data.hasOwnProperty('engagement_type')) {
                obj['engagement_type'] = ApiClient.convertToType(data['engagement_type'], 'String');
            }
            if (data.hasOwnProperty('event')) {
                obj['event'] = ApiClient.convertToType(data['event'], 'String');
            }
            if (data.hasOwnProperty('event_data')) {
                obj['event_data'] = PinterestTagEventData.constructFromObject(data['event_data']);
            }
            if (data.hasOwnProperty('percentage')) {
                obj['percentage'] = ApiClient.convertToType(data['percentage'], 'Number');
            }
            if (data.hasOwnProperty('pin_id')) {
                obj['pin_id'] = ApiClient.convertToType(data['pin_id'], ['String']);
            }
            if (data.hasOwnProperty('prefill')) {
                obj['prefill'] = ApiClient.convertToType(data['prefill'], 'Boolean');
            }
            if (data.hasOwnProperty('retention_days')) {
                obj['retention_days'] = ApiClient.convertToType(data['retention_days'], 'Number');
            }
            if (data.hasOwnProperty('seed_id')) {
                obj['seed_id'] = ApiClient.convertToType(data['seed_id'], ['String']);
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], ['String']);
            }
            if (data.hasOwnProperty('visitor_source_id')) {
                obj['visitor_source_id'] = ApiClient.convertToType(data['visitor_source_id'], 'String');
            }
            if (data.hasOwnProperty('event_source')) {
                obj['event_source'] = ApiClient.convertToType(data['event_source'], Object);
            }
            if (data.hasOwnProperty('ingestion_source')) {
                obj['ingestion_source'] = ApiClient.convertToType(data['ingestion_source'], Object);
            }
            if (data.hasOwnProperty('engager_type')) {
                obj['engager_type'] = ApiClient.convertToType(data['engager_type'], 'Number');
            }
            if (data.hasOwnProperty('campaign_id')) {
                obj['campaign_id'] = ApiClient.convertToType(data['campaign_id'], ['String']);
            }
            if (data.hasOwnProperty('ad_id')) {
                obj['ad_id'] = ApiClient.convertToType(data['ad_id'], ['String']);
            }
            if (data.hasOwnProperty('objective_type')) {
                obj['objective_type'] = ApiClient.convertToType(data['objective_type'], [ObjectiveType]);
            }
            if (data.hasOwnProperty('ad_account_id')) {
                obj['ad_account_id'] = ApiClient.convertToType(data['ad_account_id'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AudienceRule</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AudienceRule</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['country'] && !(typeof data['country'] === 'string' || data['country'] instanceof String)) {
            throw new Error("Expected the field `country` to be a primitive type in the JSON string but got " + data['country']);
        }
        // ensure the json data is a string
        if (data['customer_list_id'] && !(typeof data['customer_list_id'] === 'string' || data['customer_list_id'] instanceof String)) {
            throw new Error("Expected the field `customer_list_id` to be a primitive type in the JSON string but got " + data['customer_list_id']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['engagement_domain'])) {
            throw new Error("Expected the field `engagement_domain` to be an array in the JSON data but got " + data['engagement_domain']);
        }
        // ensure the json data is a string
        if (data['engagement_type'] && !(typeof data['engagement_type'] === 'string' || data['engagement_type'] instanceof String)) {
            throw new Error("Expected the field `engagement_type` to be a primitive type in the JSON string but got " + data['engagement_type']);
        }
        // ensure the json data is a string
        if (data['event'] && !(typeof data['event'] === 'string' || data['event'] instanceof String)) {
            throw new Error("Expected the field `event` to be a primitive type in the JSON string but got " + data['event']);
        }
        // validate the optional field `event_data`
        if (data['event_data']) { // data not null
          PinterestTagEventData.validateJSON(data['event_data']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['pin_id'])) {
            throw new Error("Expected the field `pin_id` to be an array in the JSON data but got " + data['pin_id']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['seed_id'])) {
            throw new Error("Expected the field `seed_id` to be an array in the JSON data but got " + data['seed_id']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['url'])) {
            throw new Error("Expected the field `url` to be an array in the JSON data but got " + data['url']);
        }
        // ensure the json data is a string
        if (data['visitor_source_id'] && !(typeof data['visitor_source_id'] === 'string' || data['visitor_source_id'] instanceof String)) {
            throw new Error("Expected the field `visitor_source_id` to be a primitive type in the JSON string but got " + data['visitor_source_id']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['campaign_id'])) {
            throw new Error("Expected the field `campaign_id` to be an array in the JSON data but got " + data['campaign_id']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['ad_id'])) {
            throw new Error("Expected the field `ad_id` to be an array in the JSON data but got " + data['ad_id']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['objective_type'])) {
            throw new Error("Expected the field `objective_type` to be an array in the JSON data but got " + data['objective_type']);
        }
        // ensure the json data is a string
        if (data['ad_account_id'] && !(typeof data['ad_account_id'] === 'string' || data['ad_account_id'] instanceof String)) {
            throw new Error("Expected the field `ad_account_id` to be a primitive type in the JSON string but got " + data['ad_account_id']);
        }

        return true;
    }


}



/**
 * Valid countries include: \"US\", \"CA\", and \"GB\".
 * @member {String} country
 */
AudienceRule.prototype['country'] = undefined;

/**
 * Customer list ID. For CUSTOMER_LIST `audience_type`.
 * @member {String} customer_list_id
 */
AudienceRule.prototype['customer_list_id'] = undefined;

/**
 * The audience account's verified domain. **Required** for ENGAGEMENT `audience_type`.
 * @member {Array.<String>} engagement_domain
 */
AudienceRule.prototype['engagement_domain'] = undefined;

/**
 * Engagement type enum. Optional for ENGAGEMENT `audience_type`. Supported values are `click`, `save`, `closeup`, `comment` and `like`. All engagements are included if this field is not set. 
 * @member {String} engagement_type
 */
AudienceRule.prototype['engagement_type'] = undefined;

/**
 * A Pinterest tag event. Optional for VISITOR `audience_type`. Possible values are `pagevisit`, `signup`, `checkout`, `viewcategory`, `search`, `addtocart`, `watchvideo`, `lead`, and `custom`. This field also accepts a partner-defined Pinterest tag event.
 * @member {String} event
 */
AudienceRule.prototype['event'] = undefined;

/**
 * @member {module:model/PinterestTagEventData} event_data
 */
AudienceRule.prototype['event_data'] = undefined;

/**
 * Percentage should be 1-10. The targeted audience should be this % size across Pinterest.
 * @member {Number} percentage
 */
AudienceRule.prototype['percentage'] = undefined;

/**
 * IDs of engaged organic pins. Optional for ENGAGEMENT `audience_type`. For example, \"pin_id:\": [\"34567\"]
 * @member {Array.<String>} pin_id
 */
AudienceRule.prototype['pin_id'] = undefined;

/**
 * Optional for VISITOR `audience_type`. If `true`, the specified rule on existing engagement data is applied to pre-populate the audience. If `false`, the audience is empty at creation time. The default is `true`.
 * @member {Boolean} prefill
 */
AudienceRule.prototype['prefill'] = undefined;

/**
 * Number of days a Pinterest user remains in the audience. Optional for ENGAGEMENT and VISITOR `audience_type`. Accepted range is 1-540. Defaults to 180 if not specified.
 * @member {Number} retention_days
 */
AudienceRule.prototype['retention_days'] = undefined;

/**
 * Audience ID(s). For ACTALIKE `audience_type`. 
 * @member {Array.<String>} seed_id
 */
AudienceRule.prototype['seed_id'] = undefined;

/**
 * Optional for ENGAGEMENT or VISITOR `audience_type`. For ENGAGEMENT, it is the engaged pin's URL. For VISITOR, you can use it as a string or a {operator: value} object for filtering visitors based on conversion tag event URLs. Supported operators are [ =, !=, contains, not_contains].<br>Example 1:  \"url\": \"http://www.myonlinestore123.com/view_item/shoe\"<br>Example 2: \"url\": {\"contains\": \"/view_item/shoe\"}
 * @member {Array.<String>} url
 */
AudienceRule.prototype['url'] = undefined;

/**
 * The conversion tag ID, or the Pinterest tag ID, that you use on your website. For VISITOR `audience_type`.
 * @member {String} visitor_source_id
 */
AudienceRule.prototype['visitor_source_id'] = undefined;

/**
 * Optional for VISITOR. You can use it as a {'=': [value]}. Supported values are: web, mobile, offline
 * @member {Object} event_source
 */
AudienceRule.prototype['event_source'] = undefined;

/**
 * Optional for VISITOR. You can use it as a {'=': [value]}. Supported values are: tag, mmp, file_upload, conversions_api
 * @member {Object} ingestion_source
 */
AudienceRule.prototype['ingestion_source'] = undefined;

/**
 * Optional for ENGAGEMENT. Engager type value should be 1-2.
 * @member {Number} engager_type
 */
AudienceRule.prototype['engager_type'] = undefined;

/**
 * Campaign ID for engagement audience filter.
 * @member {Array.<String>} campaign_id
 */
AudienceRule.prototype['campaign_id'] = undefined;

/**
 * Ad ID for engagement audience filter.
 * @member {Array.<String>} ad_id
 */
AudienceRule.prototype['ad_id'] = undefined;

/**
 * Objective for engagement audience filter.
 * @member {Array.<module:model/ObjectiveType>} objective_type
 */
AudienceRule.prototype['objective_type'] = undefined;

/**
 * Ad account ID.
 * @member {String} ad_account_id
 */
AudienceRule.prototype['ad_account_id'] = undefined;






export default AudienceRule;

