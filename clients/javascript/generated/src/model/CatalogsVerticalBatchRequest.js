/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CatalogsCreativeAssetsBatchItem from './CatalogsCreativeAssetsBatchItem';
import CatalogsCreativeAssetsBatchRequest from './CatalogsCreativeAssetsBatchRequest';
import CatalogsHotelBatchRequest from './CatalogsHotelBatchRequest';
import CatalogsItemsRequestLanguage from './CatalogsItemsRequestLanguage';
import CatalogsRetailBatchRequest from './CatalogsRetailBatchRequest';
import Country from './Country';

/**
 * The CatalogsVerticalBatchRequest model module.
 * @module model/CatalogsVerticalBatchRequest
 * @version 1.1.1-pre.0
 */
class CatalogsVerticalBatchRequest {
    /**
     * Constructs a new <code>CatalogsVerticalBatchRequest</code>.
     * A request object that can have multiple operations on a single batch
     * @alias module:model/CatalogsVerticalBatchRequest
     * @param {(module:model/CatalogsCreativeAssetsBatchRequest|module:model/CatalogsHotelBatchRequest|module:model/CatalogsRetailBatchRequest)} instance The actual instance to initialize CatalogsVerticalBatchRequest.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            if (typeof instance === "CatalogsRetailBatchRequest") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                CatalogsRetailBatchRequest.validateJSON(instance); // throw an exception if no match
                // create CatalogsRetailBatchRequest from JS object
                this.actualInstance = CatalogsRetailBatchRequest.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into CatalogsRetailBatchRequest
            errorMessages.push("Failed to construct CatalogsRetailBatchRequest: " + err)
        }

        try {
            if (typeof instance === "CatalogsHotelBatchRequest") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                CatalogsHotelBatchRequest.validateJSON(instance); // throw an exception if no match
                // create CatalogsHotelBatchRequest from JS object
                this.actualInstance = CatalogsHotelBatchRequest.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into CatalogsHotelBatchRequest
            errorMessages.push("Failed to construct CatalogsHotelBatchRequest: " + err)
        }

        try {
            if (typeof instance === "CatalogsCreativeAssetsBatchRequest") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                CatalogsCreativeAssetsBatchRequest.validateJSON(instance); // throw an exception if no match
                // create CatalogsCreativeAssetsBatchRequest from JS object
                this.actualInstance = CatalogsCreativeAssetsBatchRequest.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into CatalogsCreativeAssetsBatchRequest
            errorMessages.push("Failed to construct CatalogsCreativeAssetsBatchRequest: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `CatalogsVerticalBatchRequest` with oneOf schemas CatalogsCreativeAssetsBatchRequest, CatalogsHotelBatchRequest, CatalogsRetailBatchRequest. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `CatalogsVerticalBatchRequest` with oneOf schemas CatalogsCreativeAssetsBatchRequest, CatalogsHotelBatchRequest, CatalogsRetailBatchRequest. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>CatalogsVerticalBatchRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CatalogsVerticalBatchRequest} obj Optional instance to populate.
     * @return {module:model/CatalogsVerticalBatchRequest} The populated <code>CatalogsVerticalBatchRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        return new CatalogsVerticalBatchRequest(data);
    }

    /**
     * Gets the actual instance, which can be <code>CatalogsCreativeAssetsBatchRequest</code>, <code>CatalogsHotelBatchRequest</code>, <code>CatalogsRetailBatchRequest</code>.
     * @return {(module:model/CatalogsCreativeAssetsBatchRequest|module:model/CatalogsHotelBatchRequest|module:model/CatalogsRetailBatchRequest)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>CatalogsCreativeAssetsBatchRequest</code>, <code>CatalogsHotelBatchRequest</code>, <code>CatalogsRetailBatchRequest</code>.
     * @param {(module:model/CatalogsCreativeAssetsBatchRequest|module:model/CatalogsHotelBatchRequest|module:model/CatalogsRetailBatchRequest)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = CatalogsVerticalBatchRequest.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of CatalogsVerticalBatchRequest from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/CatalogsVerticalBatchRequest} An instance of CatalogsVerticalBatchRequest.
     */
    static fromJSON = function(json_string){
        return CatalogsVerticalBatchRequest.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * @member {module:model/CatalogsVerticalBatchRequest.CatalogTypeEnum} catalog_type
 */
CatalogsVerticalBatchRequest.prototype['catalog_type'] = undefined;

/**
 * @member {module:model/Country} country
 */
CatalogsVerticalBatchRequest.prototype['country'] = undefined;

/**
 * @member {module:model/CatalogsItemsRequestLanguage} language
 */
CatalogsVerticalBatchRequest.prototype['language'] = undefined;

/**
 * Array with creative assets item operations
 * @member {Array.<module:model/CatalogsCreativeAssetsBatchItem>} items
 */
CatalogsVerticalBatchRequest.prototype['items'] = undefined;

/**
 * Catalog id pertaining to the creative assets item. If not provided, default to oldest creative assets catalog
 * @member {String} catalog_id
 */
CatalogsVerticalBatchRequest.prototype['catalog_id'] = undefined;


CatalogsVerticalBatchRequest.OneOf = ["CatalogsCreativeAssetsBatchRequest", "CatalogsHotelBatchRequest", "CatalogsRetailBatchRequest"];

export default CatalogsVerticalBatchRequest;

