/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AdvancedAuctionBidOptions from './AdvancedAuctionBidOptions';
import AdvancedAuctionItem from './AdvancedAuctionItem';
import Country from './Country';
import Language from './Language';
import UpdateMaskBidOptionField from './UpdateMaskBidOptionField';

/**
 * The AdvancedAuctionItemsSubmitUpsertRecord model module.
 * @module model/AdvancedAuctionItemsSubmitUpsertRecord
 * @version 1.1.1-pre.0
 */
class AdvancedAuctionItemsSubmitUpsertRecord {
    /**
     * Constructs a new <code>AdvancedAuctionItemsSubmitUpsertRecord</code>.
     * Object describing an item bid option upsert operation
     * @alias module:model/AdvancedAuctionItemsSubmitUpsertRecord
     * @implements module:model/AdvancedAuctionItem
     * @param itemId {String} The catalog retail item id in the merchant namespace
     * @param country {module:model/Country} 
     * @param language {module:model/Language} 
     * @param bidOptions {module:model/AdvancedAuctionBidOptions} 
     * @param updateMask {Array.<module:model/UpdateMaskBidOptionField>} The list of item bid option fields to be set or updated. Fields specified in the updated mask without a value specified in the `bid_options` object in the body will be set to `null`. If an item bid option record is being created, fields not specified in the update mask will be initialized to `null`.
     */
    constructor(itemId, country, language, bidOptions, updateMask) { 
        AdvancedAuctionItem.initialize(this, itemId, country, language, bidOptions);
        AdvancedAuctionItemsSubmitUpsertRecord.initialize(this, itemId, country, language, bidOptions, updateMask);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, itemId, country, language, bidOptions, updateMask) { 
        obj['item_id'] = itemId;
        obj['country'] = country;
        obj['language'] = language;
        obj['bid_options'] = bidOptions;
        obj['update_mask'] = updateMask;
    }

    /**
     * Constructs a <code>AdvancedAuctionItemsSubmitUpsertRecord</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AdvancedAuctionItemsSubmitUpsertRecord} obj Optional instance to populate.
     * @return {module:model/AdvancedAuctionItemsSubmitUpsertRecord} The populated <code>AdvancedAuctionItemsSubmitUpsertRecord</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AdvancedAuctionItemsSubmitUpsertRecord();
            AdvancedAuctionItem.constructFromObject(data, obj);

            if (data.hasOwnProperty('item_id')) {
                obj['item_id'] = ApiClient.convertToType(data['item_id'], 'String');
            }
            if (data.hasOwnProperty('country')) {
                obj['country'] = Country.constructFromObject(data['country']);
            }
            if (data.hasOwnProperty('language')) {
                obj['language'] = Language.constructFromObject(data['language']);
            }
            if (data.hasOwnProperty('bid_options')) {
                obj['bid_options'] = AdvancedAuctionBidOptions.constructFromObject(data['bid_options']);
            }
            if (data.hasOwnProperty('update_mask')) {
                obj['update_mask'] = ApiClient.convertToType(data['update_mask'], [UpdateMaskBidOptionField]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AdvancedAuctionItemsSubmitUpsertRecord</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AdvancedAuctionItemsSubmitUpsertRecord</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AdvancedAuctionItemsSubmitUpsertRecord.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['item_id'] && !(typeof data['item_id'] === 'string' || data['item_id'] instanceof String)) {
            throw new Error("Expected the field `item_id` to be a primitive type in the JSON string but got " + data['item_id']);
        }
        // validate the optional field `bid_options`
        if (data['bid_options']) { // data not null
          AdvancedAuctionBidOptions.validateJSON(data['bid_options']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['update_mask'])) {
            throw new Error("Expected the field `update_mask` to be an array in the JSON data but got " + data['update_mask']);
        }

        return true;
    }


}

AdvancedAuctionItemsSubmitUpsertRecord.RequiredProperties = ["item_id", "country", "language", "bid_options", "update_mask"];

/**
 * The catalog retail item id in the merchant namespace
 * @member {String} item_id
 */
AdvancedAuctionItemsSubmitUpsertRecord.prototype['item_id'] = undefined;

/**
 * @member {module:model/Country} country
 */
AdvancedAuctionItemsSubmitUpsertRecord.prototype['country'] = undefined;

/**
 * @member {module:model/Language} language
 */
AdvancedAuctionItemsSubmitUpsertRecord.prototype['language'] = undefined;

/**
 * @member {module:model/AdvancedAuctionBidOptions} bid_options
 */
AdvancedAuctionItemsSubmitUpsertRecord.prototype['bid_options'] = undefined;

/**
 * The list of item bid option fields to be set or updated. Fields specified in the updated mask without a value specified in the `bid_options` object in the body will be set to `null`. If an item bid option record is being created, fields not specified in the update mask will be initialized to `null`.
 * @member {Array.<module:model/UpdateMaskBidOptionField>} update_mask
 */
AdvancedAuctionItemsSubmitUpsertRecord.prototype['update_mask'] = undefined;


// Implement AdvancedAuctionItem interface:
/**
 * The catalog retail item id in the merchant namespace
 * @member {String} item_id
 */
AdvancedAuctionItem.prototype['item_id'] = undefined;
/**
 * @member {module:model/Country} country
 */
AdvancedAuctionItem.prototype['country'] = undefined;
/**
 * @member {module:model/Language} language
 */
AdvancedAuctionItem.prototype['language'] = undefined;
/**
 * @member {module:model/AdvancedAuctionBidOptions} bid_options
 */
AdvancedAuctionItem.prototype['bid_options'] = undefined;




export default AdvancedAuctionItemsSubmitUpsertRecord;

