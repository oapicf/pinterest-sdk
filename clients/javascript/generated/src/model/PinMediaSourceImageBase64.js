/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PinMediaSourceImageBase64 model module.
 * @module model/PinMediaSourceImageBase64
 * @version 1.1.1-pre.0
 */
class PinMediaSourceImageBase64 {
    /**
     * Constructs a new <code>PinMediaSourceImageBase64</code>.
     * Base64-encoded image media source
     * @alias module:model/PinMediaSourceImageBase64
     * @param sourceType {module:model/PinMediaSourceImageBase64.SourceTypeEnum} 
     * @param contentType {module:model/PinMediaSourceImageBase64.ContentTypeEnum} 
     * @param data {String} 
     */
    constructor(sourceType, contentType, data) { 
        
        PinMediaSourceImageBase64.initialize(this, sourceType, contentType, data);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, sourceType, contentType, data) { 
        obj['source_type'] = sourceType;
        obj['content_type'] = contentType;
        obj['data'] = data;
        obj['is_standard'] = true;
    }

    /**
     * Constructs a <code>PinMediaSourceImageBase64</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PinMediaSourceImageBase64} obj Optional instance to populate.
     * @return {module:model/PinMediaSourceImageBase64} The populated <code>PinMediaSourceImageBase64</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PinMediaSourceImageBase64();

            if (data.hasOwnProperty('source_type')) {
                obj['source_type'] = ApiClient.convertToType(data['source_type'], 'String');
            }
            if (data.hasOwnProperty('content_type')) {
                obj['content_type'] = ApiClient.convertToType(data['content_type'], 'String');
            }
            if (data.hasOwnProperty('data')) {
                obj['data'] = ApiClient.convertToType(data['data'], 'String');
            }
            if (data.hasOwnProperty('is_standard')) {
                obj['is_standard'] = ApiClient.convertToType(data['is_standard'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PinMediaSourceImageBase64</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PinMediaSourceImageBase64</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PinMediaSourceImageBase64.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['source_type'] && !(typeof data['source_type'] === 'string' || data['source_type'] instanceof String)) {
            throw new Error("Expected the field `source_type` to be a primitive type in the JSON string but got " + data['source_type']);
        }
        // ensure the json data is a string
        if (data['content_type'] && !(typeof data['content_type'] === 'string' || data['content_type'] instanceof String)) {
            throw new Error("Expected the field `content_type` to be a primitive type in the JSON string but got " + data['content_type']);
        }
        // ensure the json data is a string
        if (data['data'] && !(typeof data['data'] === 'string' || data['data'] instanceof String)) {
            throw new Error("Expected the field `data` to be a primitive type in the JSON string but got " + data['data']);
        }

        return true;
    }


}

PinMediaSourceImageBase64.RequiredProperties = ["source_type", "content_type", "data"];

/**
 * @member {module:model/PinMediaSourceImageBase64.SourceTypeEnum} source_type
 */
PinMediaSourceImageBase64.prototype['source_type'] = undefined;

/**
 * @member {module:model/PinMediaSourceImageBase64.ContentTypeEnum} content_type
 */
PinMediaSourceImageBase64.prototype['content_type'] = undefined;

/**
 * @member {String} data
 */
PinMediaSourceImageBase64.prototype['data'] = undefined;

/**
 * Set the parameter to false to create the new simplified Pin instead of the standard pin. Currently the field is only available to a list of beta users.
 * @member {Boolean} is_standard
 * @default true
 */
PinMediaSourceImageBase64.prototype['is_standard'] = true;





/**
 * Allowed values for the <code>source_type</code> property.
 * @enum {String}
 * @readonly
 */
PinMediaSourceImageBase64['SourceTypeEnum'] = {

    /**
     * value: "image_base64"
     * @const
     */
    "image_base64": "image_base64"
};


/**
 * Allowed values for the <code>content_type</code> property.
 * @enum {String}
 * @readonly
 */
PinMediaSourceImageBase64['ContentTypeEnum'] = {

    /**
     * value: "image/jpeg"
     * @const
     */
    "jpeg": "image/jpeg",

    /**
     * value: "image/png"
     * @const
     */
    "png": "image/png"
};



export default PinMediaSourceImageBase64;

