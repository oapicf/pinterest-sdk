/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ImageDetails from './ImageDetails';

/**
 * The ImageMetadataImages model module.
 * @module model/ImageMetadataImages
 * @version 1.1.1-pre.0
 */
class ImageMetadataImages {
    /**
     * Constructs a new <code>ImageMetadataImages</code>.
     * @alias module:model/ImageMetadataImages
     */
    constructor() { 
        
        ImageMetadataImages.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ImageMetadataImages</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ImageMetadataImages} obj Optional instance to populate.
     * @return {module:model/ImageMetadataImages} The populated <code>ImageMetadataImages</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ImageMetadataImages();

            if (data.hasOwnProperty('150x150')) {
                obj['150x150'] = ImageDetails.constructFromObject(data['150x150']);
            }
            if (data.hasOwnProperty('400x300')) {
                obj['400x300'] = ImageDetails.constructFromObject(data['400x300']);
            }
            if (data.hasOwnProperty('600x')) {
                obj['600x'] = ImageDetails.constructFromObject(data['600x']);
            }
            if (data.hasOwnProperty('1200x')) {
                obj['1200x'] = ImageDetails.constructFromObject(data['1200x']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ImageMetadataImages</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ImageMetadataImages</code>.
     */
    static validateJSON(data) {

        return true;
    }


}



/**
 * @member {module:model/ImageDetails} 150x150
 */
ImageMetadataImages.prototype['150x150'] = undefined;

/**
 * @member {module:model/ImageDetails} 400x300
 */
ImageMetadataImages.prototype['400x300'] = undefined;

/**
 * @member {module:model/ImageDetails} 600x
 */
ImageMetadataImages.prototype['600x'] = undefined;

/**
 * @member {module:model/ImageDetails} 1200x
 */
ImageMetadataImages.prototype['1200x'] = undefined;






export default ImageMetadataImages;

