/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SSIOAccountAddress model module.
 * @module model/SSIOAccountAddress
 * @version 1.1.1-pre.0
 */
class SSIOAccountAddress {
    /**
     * Constructs a new <code>SSIOAccountAddress</code>.
     * @alias module:model/SSIOAccountAddress
     */
    constructor() { 
        
        SSIOAccountAddress.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SSIOAccountAddress</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SSIOAccountAddress} obj Optional instance to populate.
     * @return {module:model/SSIOAccountAddress} The populated <code>SSIOAccountAddress</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SSIOAccountAddress();

            if (data.hasOwnProperty('display')) {
                obj['display'] = ApiClient.convertToType(data['display'], 'String');
            }
            if (data.hasOwnProperty('purpose')) {
                obj['purpose'] = ApiClient.convertToType(data['purpose'], 'String');
            }
            if (data.hasOwnProperty('address_id')) {
                obj['address_id'] = ApiClient.convertToType(data['address_id'], 'String');
            }
            if (data.hasOwnProperty('order_legal_entity')) {
                obj['order_legal_entity'] = ApiClient.convertToType(data['order_legal_entity'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SSIOAccountAddress</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SSIOAccountAddress</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['display'] && !(typeof data['display'] === 'string' || data['display'] instanceof String)) {
            throw new Error("Expected the field `display` to be a primitive type in the JSON string but got " + data['display']);
        }
        // ensure the json data is a string
        if (data['purpose'] && !(typeof data['purpose'] === 'string' || data['purpose'] instanceof String)) {
            throw new Error("Expected the field `purpose` to be a primitive type in the JSON string but got " + data['purpose']);
        }
        // ensure the json data is a string
        if (data['address_id'] && !(typeof data['address_id'] === 'string' || data['address_id'] instanceof String)) {
            throw new Error("Expected the field `address_id` to be a primitive type in the JSON string but got " + data['address_id']);
        }
        // ensure the json data is a string
        if (data['order_legal_entity'] && !(typeof data['order_legal_entity'] === 'string' || data['order_legal_entity'] instanceof String)) {
            throw new Error("Expected the field `order_legal_entity` to be a primitive type in the JSON string but got " + data['order_legal_entity']);
        }

        return true;
    }


}



/**
 * Address display
 * @member {String} display
 */
SSIOAccountAddress.prototype['display'] = undefined;

/**
 * Purpose for which the address is used, usually Billing or Businness
 * @member {String} purpose
 */
SSIOAccountAddress.prototype['purpose'] = undefined;

/**
 * Salesforce id for address
 * @member {String} address_id
 */
SSIOAccountAddress.prototype['address_id'] = undefined;

/**
 * Legal entity for this insertion order
 * @member {String} order_legal_entity
 */
SSIOAccountAddress.prototype['order_legal_entity'] = undefined;






export default SSIOAccountAddress;

