/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BatchOperation from './BatchOperation';
import CatalogsItemsCreateBatchRequest from './CatalogsItemsCreateBatchRequest';
import CatalogsItemsDeleteBatchRequest from './CatalogsItemsDeleteBatchRequest';
import CatalogsItemsDeleteDiscontinuedBatchRequest from './CatalogsItemsDeleteDiscontinuedBatchRequest';
import CatalogsItemsRequestLanguage from './CatalogsItemsRequestLanguage';
import CatalogsItemsUpdateBatchRequest from './CatalogsItemsUpdateBatchRequest';
import CatalogsItemsUpsertBatchRequest from './CatalogsItemsUpsertBatchRequest';
import Country from './Country';
import ItemDeleteBatchRecord from './ItemDeleteBatchRecord';

/**
 * The CatalogsItemsBatchRequest model module.
 * @module model/CatalogsItemsBatchRequest
 * @version 1.1.1-pre.0
 */
class CatalogsItemsBatchRequest {
    /**
     * Constructs a new <code>CatalogsItemsBatchRequest</code>.
     * Request object of catalogs items batch
     * @alias module:model/CatalogsItemsBatchRequest
     * @param {(module:model/CatalogsItemsCreateBatchRequest|module:model/CatalogsItemsDeleteBatchRequest|module:model/CatalogsItemsDeleteDiscontinuedBatchRequest|module:model/CatalogsItemsUpdateBatchRequest|module:model/CatalogsItemsUpsertBatchRequest)} instance The actual instance to initialize CatalogsItemsBatchRequest.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            if (typeof instance === "CatalogsItemsUpdateBatchRequest") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                CatalogsItemsUpdateBatchRequest.validateJSON(instance); // throw an exception if no match
                // create CatalogsItemsUpdateBatchRequest from JS object
                this.actualInstance = CatalogsItemsUpdateBatchRequest.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into CatalogsItemsUpdateBatchRequest
            errorMessages.push("Failed to construct CatalogsItemsUpdateBatchRequest: " + err)
        }

        try {
            if (typeof instance === "CatalogsItemsUpsertBatchRequest") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                CatalogsItemsUpsertBatchRequest.validateJSON(instance); // throw an exception if no match
                // create CatalogsItemsUpsertBatchRequest from JS object
                this.actualInstance = CatalogsItemsUpsertBatchRequest.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into CatalogsItemsUpsertBatchRequest
            errorMessages.push("Failed to construct CatalogsItemsUpsertBatchRequest: " + err)
        }

        try {
            if (typeof instance === "CatalogsItemsCreateBatchRequest") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                CatalogsItemsCreateBatchRequest.validateJSON(instance); // throw an exception if no match
                // create CatalogsItemsCreateBatchRequest from JS object
                this.actualInstance = CatalogsItemsCreateBatchRequest.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into CatalogsItemsCreateBatchRequest
            errorMessages.push("Failed to construct CatalogsItemsCreateBatchRequest: " + err)
        }

        try {
            if (typeof instance === "CatalogsItemsDeleteDiscontinuedBatchRequest") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                CatalogsItemsDeleteDiscontinuedBatchRequest.validateJSON(instance); // throw an exception if no match
                // create CatalogsItemsDeleteDiscontinuedBatchRequest from JS object
                this.actualInstance = CatalogsItemsDeleteDiscontinuedBatchRequest.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into CatalogsItemsDeleteDiscontinuedBatchRequest
            errorMessages.push("Failed to construct CatalogsItemsDeleteDiscontinuedBatchRequest: " + err)
        }

        try {
            if (typeof instance === "CatalogsItemsDeleteBatchRequest") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                CatalogsItemsDeleteBatchRequest.validateJSON(instance); // throw an exception if no match
                // create CatalogsItemsDeleteBatchRequest from JS object
                this.actualInstance = CatalogsItemsDeleteBatchRequest.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into CatalogsItemsDeleteBatchRequest
            errorMessages.push("Failed to construct CatalogsItemsDeleteBatchRequest: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `CatalogsItemsBatchRequest` with oneOf schemas CatalogsItemsCreateBatchRequest, CatalogsItemsDeleteBatchRequest, CatalogsItemsDeleteDiscontinuedBatchRequest, CatalogsItemsUpdateBatchRequest, CatalogsItemsUpsertBatchRequest. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `CatalogsItemsBatchRequest` with oneOf schemas CatalogsItemsCreateBatchRequest, CatalogsItemsDeleteBatchRequest, CatalogsItemsDeleteDiscontinuedBatchRequest, CatalogsItemsUpdateBatchRequest, CatalogsItemsUpsertBatchRequest. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>CatalogsItemsBatchRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CatalogsItemsBatchRequest} obj Optional instance to populate.
     * @return {module:model/CatalogsItemsBatchRequest} The populated <code>CatalogsItemsBatchRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        return new CatalogsItemsBatchRequest(data);
    }

    /**
     * Gets the actual instance, which can be <code>CatalogsItemsCreateBatchRequest</code>, <code>CatalogsItemsDeleteBatchRequest</code>, <code>CatalogsItemsDeleteDiscontinuedBatchRequest</code>, <code>CatalogsItemsUpdateBatchRequest</code>, <code>CatalogsItemsUpsertBatchRequest</code>.
     * @return {(module:model/CatalogsItemsCreateBatchRequest|module:model/CatalogsItemsDeleteBatchRequest|module:model/CatalogsItemsDeleteDiscontinuedBatchRequest|module:model/CatalogsItemsUpdateBatchRequest|module:model/CatalogsItemsUpsertBatchRequest)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>CatalogsItemsCreateBatchRequest</code>, <code>CatalogsItemsDeleteBatchRequest</code>, <code>CatalogsItemsDeleteDiscontinuedBatchRequest</code>, <code>CatalogsItemsUpdateBatchRequest</code>, <code>CatalogsItemsUpsertBatchRequest</code>.
     * @param {(module:model/CatalogsItemsCreateBatchRequest|module:model/CatalogsItemsDeleteBatchRequest|module:model/CatalogsItemsDeleteDiscontinuedBatchRequest|module:model/CatalogsItemsUpdateBatchRequest|module:model/CatalogsItemsUpsertBatchRequest)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = CatalogsItemsBatchRequest.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of CatalogsItemsBatchRequest from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/CatalogsItemsBatchRequest} An instance of CatalogsItemsBatchRequest.
     */
    static fromJSON = function(json_string){
        return CatalogsItemsBatchRequest.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * @member {module:model/Country} country
 */
CatalogsItemsBatchRequest.prototype['country'] = undefined;

/**
 * @member {module:model/CatalogsItemsRequestLanguage} language
 */
CatalogsItemsBatchRequest.prototype['language'] = undefined;

/**
 * @member {module:model/BatchOperation} operation
 */
CatalogsItemsBatchRequest.prototype['operation'] = undefined;

/**
 * Array with catalogs items
 * @member {Array.<module:model/ItemDeleteBatchRecord>} items
 */
CatalogsItemsBatchRequest.prototype['items'] = undefined;


CatalogsItemsBatchRequest.OneOf = ["CatalogsItemsCreateBatchRequest", "CatalogsItemsDeleteBatchRequest", "CatalogsItemsDeleteDiscontinuedBatchRequest", "CatalogsItemsUpdateBatchRequest", "CatalogsItemsUpsertBatchRequest"];

export default CatalogsItemsBatchRequest;

