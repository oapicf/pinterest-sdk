/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ItemAttributesRequest from './ItemAttributesRequest';
import ItemCreateBatchRecord from './ItemCreateBatchRecord';
import ItemDeleteBatchRecord from './ItemDeleteBatchRecord';
import ItemDeleteDiscontinuedBatchRecord from './ItemDeleteDiscontinuedBatchRecord';
import ItemUpdateBatchRecord from './ItemUpdateBatchRecord';
import ItemUpsertBatchRecord from './ItemUpsertBatchRecord';
import UpdateMaskFieldType from './UpdateMaskFieldType';

/**
 * The ItemBatchRecord model module.
 * @module model/ItemBatchRecord
 * @version 1.1.1-pre.0
 */
class ItemBatchRecord {
    /**
     * Constructs a new <code>ItemBatchRecord</code>.
     * Object describing an item batch record
     * @alias module:model/ItemBatchRecord
     * @param {(module:model/ItemCreateBatchRecord|module:model/ItemDeleteBatchRecord|module:model/ItemDeleteDiscontinuedBatchRecord|module:model/ItemUpdateBatchRecord|module:model/ItemUpsertBatchRecord)} instance The actual instance to initialize ItemBatchRecord.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            if (typeof instance === "ItemCreateBatchRecord") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ItemCreateBatchRecord.validateJSON(instance); // throw an exception if no match
                // create ItemCreateBatchRecord from JS object
                this.actualInstance = ItemCreateBatchRecord.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ItemCreateBatchRecord
            errorMessages.push("Failed to construct ItemCreateBatchRecord: " + err)
        }

        try {
            if (typeof instance === "ItemDeleteDiscontinuedBatchRecord") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ItemDeleteDiscontinuedBatchRecord.validateJSON(instance); // throw an exception if no match
                // create ItemDeleteDiscontinuedBatchRecord from JS object
                this.actualInstance = ItemDeleteDiscontinuedBatchRecord.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ItemDeleteDiscontinuedBatchRecord
            errorMessages.push("Failed to construct ItemDeleteDiscontinuedBatchRecord: " + err)
        }

        try {
            if (typeof instance === "ItemUpdateBatchRecord") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ItemUpdateBatchRecord.validateJSON(instance); // throw an exception if no match
                // create ItemUpdateBatchRecord from JS object
                this.actualInstance = ItemUpdateBatchRecord.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ItemUpdateBatchRecord
            errorMessages.push("Failed to construct ItemUpdateBatchRecord: " + err)
        }

        try {
            if (typeof instance === "ItemUpsertBatchRecord") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ItemUpsertBatchRecord.validateJSON(instance); // throw an exception if no match
                // create ItemUpsertBatchRecord from JS object
                this.actualInstance = ItemUpsertBatchRecord.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ItemUpsertBatchRecord
            errorMessages.push("Failed to construct ItemUpsertBatchRecord: " + err)
        }

        try {
            if (typeof instance === "ItemDeleteBatchRecord") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ItemDeleteBatchRecord.validateJSON(instance); // throw an exception if no match
                // create ItemDeleteBatchRecord from JS object
                this.actualInstance = ItemDeleteBatchRecord.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ItemDeleteBatchRecord
            errorMessages.push("Failed to construct ItemDeleteBatchRecord: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `ItemBatchRecord` with oneOf schemas ItemCreateBatchRecord, ItemDeleteBatchRecord, ItemDeleteDiscontinuedBatchRecord, ItemUpdateBatchRecord, ItemUpsertBatchRecord. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `ItemBatchRecord` with oneOf schemas ItemCreateBatchRecord, ItemDeleteBatchRecord, ItemDeleteDiscontinuedBatchRecord, ItemUpdateBatchRecord, ItemUpsertBatchRecord. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>ItemBatchRecord</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ItemBatchRecord} obj Optional instance to populate.
     * @return {module:model/ItemBatchRecord} The populated <code>ItemBatchRecord</code> instance.
     */
    static constructFromObject(data, obj) {
        return new ItemBatchRecord(data);
    }

    /**
     * Gets the actual instance, which can be <code>ItemCreateBatchRecord</code>, <code>ItemDeleteBatchRecord</code>, <code>ItemDeleteDiscontinuedBatchRecord</code>, <code>ItemUpdateBatchRecord</code>, <code>ItemUpsertBatchRecord</code>.
     * @return {(module:model/ItemCreateBatchRecord|module:model/ItemDeleteBatchRecord|module:model/ItemDeleteDiscontinuedBatchRecord|module:model/ItemUpdateBatchRecord|module:model/ItemUpsertBatchRecord)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>ItemCreateBatchRecord</code>, <code>ItemDeleteBatchRecord</code>, <code>ItemDeleteDiscontinuedBatchRecord</code>, <code>ItemUpdateBatchRecord</code>, <code>ItemUpsertBatchRecord</code>.
     * @param {(module:model/ItemCreateBatchRecord|module:model/ItemDeleteBatchRecord|module:model/ItemDeleteDiscontinuedBatchRecord|module:model/ItemUpdateBatchRecord|module:model/ItemUpsertBatchRecord)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = ItemBatchRecord.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of ItemBatchRecord from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/ItemBatchRecord} An instance of ItemBatchRecord.
     */
    static fromJSON = function(json_string){
        return ItemBatchRecord.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * The catalog item id in the merchant namespace
 * @member {String} item_id
 */
ItemBatchRecord.prototype['item_id'] = undefined;

/**
 * @member {module:model/ItemAttributesRequest} attributes
 */
ItemBatchRecord.prototype['attributes'] = undefined;

/**
 * The list of product attributes to be updated. Attributes specified in the update mask without a value specified in the body will be deleted from the product item.
 * @member {Array.<module:model/UpdateMaskFieldType>} update_mask
 */
ItemBatchRecord.prototype['update_mask'] = undefined;


ItemBatchRecord.OneOf = ["ItemCreateBatchRecord", "ItemDeleteBatchRecord", "ItemDeleteDiscontinuedBatchRecord", "ItemUpdateBatchRecord", "ItemUpsertBatchRecord"];

export default ItemBatchRecord;

