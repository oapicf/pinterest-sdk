/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CatalogsHotelProductGroupFilters from './CatalogsHotelProductGroupFilters';

/**
 * The CatalogsHotelListProductsByCatalogBasedFilterRequest model module.
 * @module model/CatalogsHotelListProductsByCatalogBasedFilterRequest
 * @version 1.1.1-pre.0
 */
class CatalogsHotelListProductsByCatalogBasedFilterRequest {
    /**
     * Constructs a new <code>CatalogsHotelListProductsByCatalogBasedFilterRequest</code>.
     * Request object to list products for a given hotel catalog_id and product group filter.
     * @alias module:model/CatalogsHotelListProductsByCatalogBasedFilterRequest
     * @param catalogType {module:model/CatalogsHotelListProductsByCatalogBasedFilterRequest.CatalogTypeEnum} 
     * @param catalogId {String} Catalog id pertaining to the hotel product group.
     * @param filters {module:model/CatalogsHotelProductGroupFilters} 
     */
    constructor(catalogType, catalogId, filters) { 
        
        CatalogsHotelListProductsByCatalogBasedFilterRequest.initialize(this, catalogType, catalogId, filters);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, catalogType, catalogId, filters) { 
        obj['catalog_type'] = catalogType;
        obj['catalog_id'] = catalogId;
        obj['filters'] = filters;
    }

    /**
     * Constructs a <code>CatalogsHotelListProductsByCatalogBasedFilterRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CatalogsHotelListProductsByCatalogBasedFilterRequest} obj Optional instance to populate.
     * @return {module:model/CatalogsHotelListProductsByCatalogBasedFilterRequest} The populated <code>CatalogsHotelListProductsByCatalogBasedFilterRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CatalogsHotelListProductsByCatalogBasedFilterRequest();

            if (data.hasOwnProperty('catalog_type')) {
                obj['catalog_type'] = ApiClient.convertToType(data['catalog_type'], 'String');
            }
            if (data.hasOwnProperty('catalog_id')) {
                obj['catalog_id'] = ApiClient.convertToType(data['catalog_id'], 'String');
            }
            if (data.hasOwnProperty('filters')) {
                obj['filters'] = CatalogsHotelProductGroupFilters.constructFromObject(data['filters']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CatalogsHotelListProductsByCatalogBasedFilterRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CatalogsHotelListProductsByCatalogBasedFilterRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CatalogsHotelListProductsByCatalogBasedFilterRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['catalog_type'] && !(typeof data['catalog_type'] === 'string' || data['catalog_type'] instanceof String)) {
            throw new Error("Expected the field `catalog_type` to be a primitive type in the JSON string but got " + data['catalog_type']);
        }
        // ensure the json data is a string
        if (data['catalog_id'] && !(typeof data['catalog_id'] === 'string' || data['catalog_id'] instanceof String)) {
            throw new Error("Expected the field `catalog_id` to be a primitive type in the JSON string but got " + data['catalog_id']);
        }
        // validate the optional field `filters`
        if (data['filters']) { // data not null
          CatalogsHotelProductGroupFilters.validateJSON(data['filters']);
        }

        return true;
    }


}

CatalogsHotelListProductsByCatalogBasedFilterRequest.RequiredProperties = ["catalog_type", "catalog_id", "filters"];

/**
 * @member {module:model/CatalogsHotelListProductsByCatalogBasedFilterRequest.CatalogTypeEnum} catalog_type
 */
CatalogsHotelListProductsByCatalogBasedFilterRequest.prototype['catalog_type'] = undefined;

/**
 * Catalog id pertaining to the hotel product group.
 * @member {String} catalog_id
 */
CatalogsHotelListProductsByCatalogBasedFilterRequest.prototype['catalog_id'] = undefined;

/**
 * @member {module:model/CatalogsHotelProductGroupFilters} filters
 */
CatalogsHotelListProductsByCatalogBasedFilterRequest.prototype['filters'] = undefined;





/**
 * Allowed values for the <code>catalog_type</code> property.
 * @enum {String}
 * @readonly
 */
CatalogsHotelListProductsByCatalogBasedFilterRequest['CatalogTypeEnum'] = {

    /**
     * value: "HOTEL"
     * @const
     */
    "HOTEL": "HOTEL"
};



export default CatalogsHotelListProductsByCatalogBasedFilterRequest;

