/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CatalogsCreativeAssetsAttributes from './CatalogsCreativeAssetsAttributes';
import CatalogsType from './CatalogsType';
import Pin from './Pin';

/**
 * The CatalogsCreativeAssetsItemResponse model module.
 * @module model/CatalogsCreativeAssetsItemResponse
 * @version 1.1.1-pre.0
 */
class CatalogsCreativeAssetsItemResponse {
    /**
     * Constructs a new <code>CatalogsCreativeAssetsItemResponse</code>.
     * Object describing a hotel record
     * @alias module:model/CatalogsCreativeAssetsItemResponse
     * @param catalogType {module:model/CatalogsType} 
     */
    constructor(catalogType) { 
        
        CatalogsCreativeAssetsItemResponse.initialize(this, catalogType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, catalogType) { 
        obj['catalog_type'] = catalogType;
    }

    /**
     * Constructs a <code>CatalogsCreativeAssetsItemResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CatalogsCreativeAssetsItemResponse} obj Optional instance to populate.
     * @return {module:model/CatalogsCreativeAssetsItemResponse} The populated <code>CatalogsCreativeAssetsItemResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CatalogsCreativeAssetsItemResponse();

            if (data.hasOwnProperty('catalog_type')) {
                obj['catalog_type'] = CatalogsType.constructFromObject(data['catalog_type']);
            }
            if (data.hasOwnProperty('creative_assets_id')) {
                obj['creative_assets_id'] = ApiClient.convertToType(data['creative_assets_id'], 'String');
            }
            if (data.hasOwnProperty('pins')) {
                obj['pins'] = ApiClient.convertToType(data['pins'], [Pin]);
            }
            if (data.hasOwnProperty('attributes')) {
                obj['attributes'] = CatalogsCreativeAssetsAttributes.constructFromObject(data['attributes']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CatalogsCreativeAssetsItemResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CatalogsCreativeAssetsItemResponse</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CatalogsCreativeAssetsItemResponse.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['creative_assets_id'] && !(typeof data['creative_assets_id'] === 'string' || data['creative_assets_id'] instanceof String)) {
            throw new Error("Expected the field `creative_assets_id` to be a primitive type in the JSON string but got " + data['creative_assets_id']);
        }
        if (data['pins']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['pins'])) {
                throw new Error("Expected the field `pins` to be an array in the JSON data but got " + data['pins']);
            }
            // validate the optional field `pins` (array)
            for (const item of data['pins']) {
                Pin.validateJSON(item);
            };
        }
        // validate the optional field `attributes`
        if (data['attributes']) { // data not null
          CatalogsCreativeAssetsAttributes.validateJSON(data['attributes']);
        }

        return true;
    }


}

CatalogsCreativeAssetsItemResponse.RequiredProperties = ["catalog_type"];

/**
 * @member {module:model/CatalogsType} catalog_type
 */
CatalogsCreativeAssetsItemResponse.prototype['catalog_type'] = undefined;

/**
 * The catalog creative assets id in the merchant namespace
 * @member {String} creative_assets_id
 */
CatalogsCreativeAssetsItemResponse.prototype['creative_assets_id'] = undefined;

/**
 * The pins mapped to the item
 * @member {Array.<module:model/Pin>} pins
 */
CatalogsCreativeAssetsItemResponse.prototype['pins'] = undefined;

/**
 * @member {module:model/CatalogsCreativeAssetsAttributes} attributes
 */
CatalogsCreativeAssetsItemResponse.prototype['attributes'] = undefined;






export default CatalogsCreativeAssetsItemResponse;

