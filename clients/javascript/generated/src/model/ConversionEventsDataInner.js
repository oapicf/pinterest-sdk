/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ConversionEventsDataInnerCustomData from './ConversionEventsDataInnerCustomData';
import ConversionEventsUserData from './ConversionEventsUserData';

/**
 * The ConversionEventsDataInner model module.
 * @module model/ConversionEventsDataInner
 * @version 1.1.1-pre.0
 */
class ConversionEventsDataInner {
    /**
     * Constructs a new <code>ConversionEventsDataInner</code>.
     * @alias module:model/ConversionEventsDataInner
     * @param eventName {String} <p>The type of the user event. Please use the right event_name otherwise the event won't be accepted and show up correctly in reports.   <ul>   <li><code>add_to_cart</code></li>   <li><code>checkout</code></li>   <li><code>custom</code></li>   <li><code>lead</code></li>   <li><code>page_visit</code></li>   <li><code>search</code></li>   <li><code>signup</code></li>   <li><code>view_category</code></li>   <li><code>watch_video</code></li>   </ul> </p> 
     * @param actionSource {String} <p>   The source indicating where the conversion event occurred.   <ul>     <li><code>app_android</code></li>     <li><code>app_ios</code></li>     <li><code>web</code></li>     <li><code>offline</code></li>   </ul> </p> 
     * @param eventTime {Number} The time when the event happened. Unix timestamp in seconds.
     * @param eventId {String} A unique id string that identifies this event and can be used for deduping between events ingested via both the conversion API and Pinterest tracking. Without this, event's data is likely to be double counted and will cause report metric inflation. Third-party vendors make sure this field is updated on both Pinterest tag and Conversions API side before rolling out template for Conversions API.
     * @param userData {module:model/ConversionEventsUserData} 
     */
    constructor(eventName, actionSource, eventTime, eventId, userData) { 
        
        ConversionEventsDataInner.initialize(this, eventName, actionSource, eventTime, eventId, userData);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, eventName, actionSource, eventTime, eventId, userData) { 
        obj['event_name'] = eventName;
        obj['action_source'] = actionSource;
        obj['event_time'] = eventTime;
        obj['event_id'] = eventId;
        obj['user_data'] = userData;
    }

    /**
     * Constructs a <code>ConversionEventsDataInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ConversionEventsDataInner} obj Optional instance to populate.
     * @return {module:model/ConversionEventsDataInner} The populated <code>ConversionEventsDataInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ConversionEventsDataInner();

            if (data.hasOwnProperty('event_name')) {
                obj['event_name'] = ApiClient.convertToType(data['event_name'], 'String');
            }
            if (data.hasOwnProperty('action_source')) {
                obj['action_source'] = ApiClient.convertToType(data['action_source'], 'String');
            }
            if (data.hasOwnProperty('event_time')) {
                obj['event_time'] = ApiClient.convertToType(data['event_time'], 'Number');
            }
            if (data.hasOwnProperty('event_id')) {
                obj['event_id'] = ApiClient.convertToType(data['event_id'], 'String');
            }
            if (data.hasOwnProperty('event_source_url')) {
                obj['event_source_url'] = ApiClient.convertToType(data['event_source_url'], 'String');
            }
            if (data.hasOwnProperty('opt_out')) {
                obj['opt_out'] = ApiClient.convertToType(data['opt_out'], 'Boolean');
            }
            if (data.hasOwnProperty('partner_name')) {
                obj['partner_name'] = ApiClient.convertToType(data['partner_name'], 'String');
            }
            if (data.hasOwnProperty('user_data')) {
                obj['user_data'] = ConversionEventsUserData.constructFromObject(data['user_data']);
            }
            if (data.hasOwnProperty('custom_data')) {
                obj['custom_data'] = ConversionEventsDataInnerCustomData.constructFromObject(data['custom_data']);
            }
            if (data.hasOwnProperty('app_id')) {
                obj['app_id'] = ApiClient.convertToType(data['app_id'], 'String');
            }
            if (data.hasOwnProperty('app_name')) {
                obj['app_name'] = ApiClient.convertToType(data['app_name'], 'String');
            }
            if (data.hasOwnProperty('app_version')) {
                obj['app_version'] = ApiClient.convertToType(data['app_version'], 'String');
            }
            if (data.hasOwnProperty('device_brand')) {
                obj['device_brand'] = ApiClient.convertToType(data['device_brand'], 'String');
            }
            if (data.hasOwnProperty('device_carrier')) {
                obj['device_carrier'] = ApiClient.convertToType(data['device_carrier'], 'String');
            }
            if (data.hasOwnProperty('device_model')) {
                obj['device_model'] = ApiClient.convertToType(data['device_model'], 'String');
            }
            if (data.hasOwnProperty('device_type')) {
                obj['device_type'] = ApiClient.convertToType(data['device_type'], 'String');
            }
            if (data.hasOwnProperty('os_version')) {
                obj['os_version'] = ApiClient.convertToType(data['os_version'], 'String');
            }
            if (data.hasOwnProperty('wifi')) {
                obj['wifi'] = ApiClient.convertToType(data['wifi'], 'Boolean');
            }
            if (data.hasOwnProperty('language')) {
                obj['language'] = ApiClient.convertToType(data['language'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ConversionEventsDataInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ConversionEventsDataInner</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ConversionEventsDataInner.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['event_name'] && !(typeof data['event_name'] === 'string' || data['event_name'] instanceof String)) {
            throw new Error("Expected the field `event_name` to be a primitive type in the JSON string but got " + data['event_name']);
        }
        // ensure the json data is a string
        if (data['action_source'] && !(typeof data['action_source'] === 'string' || data['action_source'] instanceof String)) {
            throw new Error("Expected the field `action_source` to be a primitive type in the JSON string but got " + data['action_source']);
        }
        // ensure the json data is a string
        if (data['event_id'] && !(typeof data['event_id'] === 'string' || data['event_id'] instanceof String)) {
            throw new Error("Expected the field `event_id` to be a primitive type in the JSON string but got " + data['event_id']);
        }
        // ensure the json data is a string
        if (data['event_source_url'] && !(typeof data['event_source_url'] === 'string' || data['event_source_url'] instanceof String)) {
            throw new Error("Expected the field `event_source_url` to be a primitive type in the JSON string but got " + data['event_source_url']);
        }
        // ensure the json data is a string
        if (data['partner_name'] && !(typeof data['partner_name'] === 'string' || data['partner_name'] instanceof String)) {
            throw new Error("Expected the field `partner_name` to be a primitive type in the JSON string but got " + data['partner_name']);
        }
        // validate the optional field `user_data`
        if (data['user_data']) { // data not null
          ConversionEventsUserData.validateJSON(data['user_data']);
        }
        // validate the optional field `custom_data`
        if (data['custom_data']) { // data not null
          ConversionEventsDataInnerCustomData.validateJSON(data['custom_data']);
        }
        // ensure the json data is a string
        if (data['app_id'] && !(typeof data['app_id'] === 'string' || data['app_id'] instanceof String)) {
            throw new Error("Expected the field `app_id` to be a primitive type in the JSON string but got " + data['app_id']);
        }
        // ensure the json data is a string
        if (data['app_name'] && !(typeof data['app_name'] === 'string' || data['app_name'] instanceof String)) {
            throw new Error("Expected the field `app_name` to be a primitive type in the JSON string but got " + data['app_name']);
        }
        // ensure the json data is a string
        if (data['app_version'] && !(typeof data['app_version'] === 'string' || data['app_version'] instanceof String)) {
            throw new Error("Expected the field `app_version` to be a primitive type in the JSON string but got " + data['app_version']);
        }
        // ensure the json data is a string
        if (data['device_brand'] && !(typeof data['device_brand'] === 'string' || data['device_brand'] instanceof String)) {
            throw new Error("Expected the field `device_brand` to be a primitive type in the JSON string but got " + data['device_brand']);
        }
        // ensure the json data is a string
        if (data['device_carrier'] && !(typeof data['device_carrier'] === 'string' || data['device_carrier'] instanceof String)) {
            throw new Error("Expected the field `device_carrier` to be a primitive type in the JSON string but got " + data['device_carrier']);
        }
        // ensure the json data is a string
        if (data['device_model'] && !(typeof data['device_model'] === 'string' || data['device_model'] instanceof String)) {
            throw new Error("Expected the field `device_model` to be a primitive type in the JSON string but got " + data['device_model']);
        }
        // ensure the json data is a string
        if (data['device_type'] && !(typeof data['device_type'] === 'string' || data['device_type'] instanceof String)) {
            throw new Error("Expected the field `device_type` to be a primitive type in the JSON string but got " + data['device_type']);
        }
        // ensure the json data is a string
        if (data['os_version'] && !(typeof data['os_version'] === 'string' || data['os_version'] instanceof String)) {
            throw new Error("Expected the field `os_version` to be a primitive type in the JSON string but got " + data['os_version']);
        }
        // ensure the json data is a string
        if (data['language'] && !(typeof data['language'] === 'string' || data['language'] instanceof String)) {
            throw new Error("Expected the field `language` to be a primitive type in the JSON string but got " + data['language']);
        }

        return true;
    }


}

ConversionEventsDataInner.RequiredProperties = ["event_name", "action_source", "event_time", "event_id", "user_data"];

/**
 * <p>The type of the user event. Please use the right event_name otherwise the event won't be accepted and show up correctly in reports.   <ul>   <li><code>add_to_cart</code></li>   <li><code>checkout</code></li>   <li><code>custom</code></li>   <li><code>lead</code></li>   <li><code>page_visit</code></li>   <li><code>search</code></li>   <li><code>signup</code></li>   <li><code>view_category</code></li>   <li><code>watch_video</code></li>   </ul> </p> 
 * @member {String} event_name
 */
ConversionEventsDataInner.prototype['event_name'] = undefined;

/**
 * <p>   The source indicating where the conversion event occurred.   <ul>     <li><code>app_android</code></li>     <li><code>app_ios</code></li>     <li><code>web</code></li>     <li><code>offline</code></li>   </ul> </p> 
 * @member {String} action_source
 */
ConversionEventsDataInner.prototype['action_source'] = undefined;

/**
 * The time when the event happened. Unix timestamp in seconds.
 * @member {Number} event_time
 */
ConversionEventsDataInner.prototype['event_time'] = undefined;

/**
 * A unique id string that identifies this event and can be used for deduping between events ingested via both the conversion API and Pinterest tracking. Without this, event's data is likely to be double counted and will cause report metric inflation. Third-party vendors make sure this field is updated on both Pinterest tag and Conversions API side before rolling out template for Conversions API.
 * @member {String} event_id
 */
ConversionEventsDataInner.prototype['event_id'] = undefined;

/**
 * URL of the web conversion event.
 * @member {String} event_source_url
 */
ConversionEventsDataInner.prototype['event_source_url'] = undefined;

/**
 * When action_source is web or offline, it defines whether the user has opted out of tracking for web conversion events. While when action_source is app_android or app_ios, it defines whether the user has enabled Limit Ad Tracking on their iOS device, or opted out of Ads Personalization on their Android device.
 * @member {Boolean} opt_out
 */
ConversionEventsDataInner.prototype['opt_out'] = undefined;

/**
 * The third party partner name responsible to send the event to Conversions API on behalf of the advertiser. The naming convention is \"ss-partnername\" lowercase. E.g ‘ss-shopify’
 * @member {String} partner_name
 */
ConversionEventsDataInner.prototype['partner_name'] = undefined;

/**
 * @member {module:model/ConversionEventsUserData} user_data
 */
ConversionEventsDataInner.prototype['user_data'] = undefined;

/**
 * @member {module:model/ConversionEventsDataInnerCustomData} custom_data
 */
ConversionEventsDataInner.prototype['custom_data'] = undefined;

/**
 * The app store app ID.
 * @member {String} app_id
 */
ConversionEventsDataInner.prototype['app_id'] = undefined;

/**
 * Name of the app.
 * @member {String} app_name
 */
ConversionEventsDataInner.prototype['app_name'] = undefined;

/**
 * Version of the app.
 * @member {String} app_version
 */
ConversionEventsDataInner.prototype['app_version'] = undefined;

/**
 * Brand of the user device.
 * @member {String} device_brand
 */
ConversionEventsDataInner.prototype['device_brand'] = undefined;

/**
 * User device's mobile carrier.
 * @member {String} device_carrier
 */
ConversionEventsDataInner.prototype['device_carrier'] = undefined;

/**
 * Model of the user device.
 * @member {String} device_model
 */
ConversionEventsDataInner.prototype['device_model'] = undefined;

/**
 * Type of the user device.
 * @member {String} device_type
 */
ConversionEventsDataInner.prototype['device_type'] = undefined;

/**
 * Version of the device operating system.
 * @member {String} os_version
 */
ConversionEventsDataInner.prototype['os_version'] = undefined;

/**
 * Whether the event occurred when the user device was connected to wifi.
 * @member {Boolean} wifi
 */
ConversionEventsDataInner.prototype['wifi'] = undefined;

/**
 * Two-character ISO-639-1 language code indicating the user's language.
 * @member {String} language
 */
ConversionEventsDataInner.prototype['language'] = undefined;






export default ConversionEventsDataInner;

