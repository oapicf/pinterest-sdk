/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.PinterestSdk);
  }
}(this, function(expect, PinterestSdk) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new PinterestSdk.BoardsApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('BoardsApi', function() {
    describe('boardSectionsCreate', function() {
      it('should call boardSectionsCreate successfully', function(done) {
        //uncomment below and update the code to test boardSectionsCreate
        //instance.boardSectionsCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('boardSectionsDelete', function() {
      it('should call boardSectionsDelete successfully', function(done) {
        //uncomment below and update the code to test boardSectionsDelete
        //instance.boardSectionsDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('boardSectionsList', function() {
      it('should call boardSectionsList successfully', function(done) {
        //uncomment below and update the code to test boardSectionsList
        //instance.boardSectionsList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('boardSectionsListPins', function() {
      it('should call boardSectionsListPins successfully', function(done) {
        //uncomment below and update the code to test boardSectionsListPins
        //instance.boardSectionsListPins(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('boardSectionsUpdate', function() {
      it('should call boardSectionsUpdate successfully', function(done) {
        //uncomment below and update the code to test boardSectionsUpdate
        //instance.boardSectionsUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('boardsCreate', function() {
      it('should call boardsCreate successfully', function(done) {
        //uncomment below and update the code to test boardsCreate
        //instance.boardsCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('boardsDelete', function() {
      it('should call boardsDelete successfully', function(done) {
        //uncomment below and update the code to test boardsDelete
        //instance.boardsDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('boardsGet', function() {
      it('should call boardsGet successfully', function(done) {
        //uncomment below and update the code to test boardsGet
        //instance.boardsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('boardsList', function() {
      it('should call boardsList successfully', function(done) {
        //uncomment below and update the code to test boardsList
        //instance.boardsList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('boardsListPins', function() {
      it('should call boardsListPins successfully', function(done) {
        //uncomment below and update the code to test boardsListPins
        //instance.boardsListPins(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('boardsUpdate', function() {
      it('should call boardsUpdate successfully', function(done) {
        //uncomment below and update the code to test boardsUpdate
        //instance.boardsUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
