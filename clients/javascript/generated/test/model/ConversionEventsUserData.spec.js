/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.PinterestSdk);
  }
}(this, function(expect, PinterestSdk) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new PinterestSdk.ConversionEventsUserData();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ConversionEventsUserData', function() {
    it('should create an instance of ConversionEventsUserData', function() {
      // uncomment below and update the code to test ConversionEventsUserData
      //var instance = new PinterestSdk.ConversionEventsUserData();
      //expect(instance).to.be.a(PinterestSdk.ConversionEventsUserData);
    });

    it('should have the property ph (base name: "ph")', function() {
      // uncomment below and update the code to test the property ph
      //var instance = new PinterestSdk.ConversionEventsUserData();
      //expect(instance).to.be();
    });

    it('should have the property ge (base name: "ge")', function() {
      // uncomment below and update the code to test the property ge
      //var instance = new PinterestSdk.ConversionEventsUserData();
      //expect(instance).to.be();
    });

    it('should have the property db (base name: "db")', function() {
      // uncomment below and update the code to test the property db
      //var instance = new PinterestSdk.ConversionEventsUserData();
      //expect(instance).to.be();
    });

    it('should have the property ln (base name: "ln")', function() {
      // uncomment below and update the code to test the property ln
      //var instance = new PinterestSdk.ConversionEventsUserData();
      //expect(instance).to.be();
    });

    it('should have the property fn (base name: "fn")', function() {
      // uncomment below and update the code to test the property fn
      //var instance = new PinterestSdk.ConversionEventsUserData();
      //expect(instance).to.be();
    });

    it('should have the property ct (base name: "ct")', function() {
      // uncomment below and update the code to test the property ct
      //var instance = new PinterestSdk.ConversionEventsUserData();
      //expect(instance).to.be();
    });

    it('should have the property st (base name: "st")', function() {
      // uncomment below and update the code to test the property st
      //var instance = new PinterestSdk.ConversionEventsUserData();
      //expect(instance).to.be();
    });

    it('should have the property zp (base name: "zp")', function() {
      // uncomment below and update the code to test the property zp
      //var instance = new PinterestSdk.ConversionEventsUserData();
      //expect(instance).to.be();
    });

    it('should have the property country (base name: "country")', function() {
      // uncomment below and update the code to test the property country
      //var instance = new PinterestSdk.ConversionEventsUserData();
      //expect(instance).to.be();
    });

    it('should have the property externalId (base name: "external_id")', function() {
      // uncomment below and update the code to test the property externalId
      //var instance = new PinterestSdk.ConversionEventsUserData();
      //expect(instance).to.be();
    });

    it('should have the property clickId (base name: "click_id")', function() {
      // uncomment below and update the code to test the property clickId
      //var instance = new PinterestSdk.ConversionEventsUserData();
      //expect(instance).to.be();
    });

    it('should have the property partnerId (base name: "partner_id")', function() {
      // uncomment below and update the code to test the property partnerId
      //var instance = new PinterestSdk.ConversionEventsUserData();
      //expect(instance).to.be();
    });

    it('should have the property em (base name: "em")', function() {
      // uncomment below and update the code to test the property em
      //var instance = new PinterestSdk.ConversionEventsUserData();
      //expect(instance).to.be();
    });

    it('should have the property hashedMaids (base name: "hashed_maids")', function() {
      // uncomment below and update the code to test the property hashedMaids
      //var instance = new PinterestSdk.ConversionEventsUserData();
      //expect(instance).to.be();
    });

    it('should have the property clientIpAddress (base name: "client_ip_address")', function() {
      // uncomment below and update the code to test the property clientIpAddress
      //var instance = new PinterestSdk.ConversionEventsUserData();
      //expect(instance).to.be();
    });

    it('should have the property clientUserAgent (base name: "client_user_agent")', function() {
      // uncomment below and update the code to test the property clientUserAgent
      //var instance = new PinterestSdk.ConversionEventsUserData();
      //expect(instance).to.be();
    });

  });

}));
