// tslint:disable
/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders, HttpQuery } from '../runtime';
import type {
    TargetingTemplateCreate,
    TargetingTemplateGetResponseData,
    TargetingTemplateList200Response,
    TargetingTemplateUpdateRequest,
} from '../models';

export interface TargetingTemplateCreateRequest {
    adAccountId: string;
    targetingTemplateCreate: TargetingTemplateCreate;
}

export interface TargetingTemplateListRequest {
    adAccountId: string;
    order?: TargetingTemplateListOrderEnum;
    includeSizing?: boolean;
    searchQuery?: string;
    pageSize?: number;
    bookmark?: string;
}

export interface TargetingTemplateUpdateRequest {
    adAccountId: string;
    targetingTemplateUpdateRequest: TargetingTemplateUpdateRequest;
}

/**
 * no description
 */
export class TargetingTemplateApi extends BaseAPI {

    /**
     * <p>Targeting templates allow advertisers to save a set of targeting details including audience lists,  keywords & interest, demographics, and placements to use more than once during the campaign creation process.</p>  <p>Templates can be used to build out basic targeting criteria that you plan to use across campaigns and to reuse   performance targeting from prior campaigns for new campaigns.</p>
     * Create targeting templates
     */
    targetingTemplateCreate({ adAccountId, targetingTemplateCreate }: TargetingTemplateCreateRequest): Observable<TargetingTemplateGetResponseData>
    targetingTemplateCreate({ adAccountId, targetingTemplateCreate }: TargetingTemplateCreateRequest, opts?: OperationOpts): Observable<AjaxResponse<TargetingTemplateGetResponseData>>
    targetingTemplateCreate({ adAccountId, targetingTemplateCreate }: TargetingTemplateCreateRequest, opts?: OperationOpts): Observable<TargetingTemplateGetResponseData | AjaxResponse<TargetingTemplateGetResponseData>> {
        throwIfNullOrUndefined(adAccountId, 'adAccountId', 'targetingTemplateCreate');
        throwIfNullOrUndefined(targetingTemplateCreate, 'targetingTemplateCreate', 'targetingTemplateCreate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('pinterest_oauth2', ['ads:write'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        return this.request<TargetingTemplateGetResponseData>({
            url: '/ad_accounts/{ad_account_id}/targeting_templates'.replace('{ad_account_id}', encodeURI(adAccountId)),
            method: 'POST',
            headers,
            body: targetingTemplateCreate,
        }, opts?.responseOpts);
    };

    /**
     * Get a list of the targeting templates in the specified <code>ad_account_id</code>
     * List targeting templates
     */
    targetingTemplateList({ adAccountId, order, includeSizing, searchQuery, pageSize, bookmark }: TargetingTemplateListRequest): Observable<TargetingTemplateList200Response>
    targetingTemplateList({ adAccountId, order, includeSizing, searchQuery, pageSize, bookmark }: TargetingTemplateListRequest, opts?: OperationOpts): Observable<AjaxResponse<TargetingTemplateList200Response>>
    targetingTemplateList({ adAccountId, order, includeSizing, searchQuery, pageSize, bookmark }: TargetingTemplateListRequest, opts?: OperationOpts): Observable<TargetingTemplateList200Response | AjaxResponse<TargetingTemplateList200Response>> {
        throwIfNullOrUndefined(adAccountId, 'adAccountId', 'targetingTemplateList');

        const headers: HttpHeaders = {
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('pinterest_oauth2', ['ads:read'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        const query: HttpQuery = {};

        if (order != null) { query['order'] = order; }
        if (includeSizing != null) { query['include_sizing'] = includeSizing; }
        if (searchQuery != null) { query['search_query'] = searchQuery; }
        if (pageSize != null) { query['page_size'] = pageSize; }
        if (bookmark != null) { query['bookmark'] = bookmark; }

        return this.request<TargetingTemplateList200Response>({
            url: '/ad_accounts/{ad_account_id}/targeting_templates'.replace('{ad_account_id}', encodeURI(adAccountId)),
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * <p>Update the targeting template given advertiser ID and targeting template ID</p>
     * Update targeting templates
     */
    targetingTemplateUpdate({ adAccountId, targetingTemplateUpdateRequest }: TargetingTemplateUpdateRequest): Observable<void>
    targetingTemplateUpdate({ adAccountId, targetingTemplateUpdateRequest }: TargetingTemplateUpdateRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    targetingTemplateUpdate({ adAccountId, targetingTemplateUpdateRequest }: TargetingTemplateUpdateRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(adAccountId, 'adAccountId', 'targetingTemplateUpdate');
        throwIfNullOrUndefined(targetingTemplateUpdateRequest, 'targetingTemplateUpdateRequest', 'targetingTemplateUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('pinterest_oauth2', ['ads:write'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        return this.request<void>({
            url: '/ad_accounts/{ad_account_id}/targeting_templates'.replace('{ad_account_id}', encodeURI(adAccountId)),
            method: 'PATCH',
            headers,
            body: targetingTemplateUpdateRequest,
        }, opts?.responseOpts);
    };

}

/**
 * @export
 * @enum {string}
 */
export enum TargetingTemplateListOrderEnum {
    Ascending = 'ASCENDING',
    Descending = 'DESCENDING'
}
