// tslint:disable
/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders, HttpQuery } from '../runtime';
import type {
    AuthRespondInvitesBody,
    CancelInvitesBody,
    CreateAssetAccessRequestBody,
    CreateAssetAccessRequestResponse,
    CreateAssetInvitesRequest,
    CreateInvitesResultsResponseArray,
    CreateMembershipOrPartnershipInvitesBody,
    DeleteInvitesResultsResponseArray,
    GetInvites200Response,
    InviteType,
    RespondToInvitesResponseArray,
    UpdateInvitesResultsResponseArray,
} from '../models';

export interface AssetAccessRequestsCreateRequest {
    businessId: string;
    createAssetAccessRequestBody: CreateAssetAccessRequestBody;
}

export interface CancelInvitesOrRequestsRequest {
    businessId: string;
    cancelInvitesBody: CancelInvitesBody;
}

export interface CreateAssetInvitesRequest {
    businessId: string;
    createAssetInvitesRequest: CreateAssetInvitesRequest;
}

export interface CreateMembershipOrPartnershipInvitesRequest {
    businessId: string;
    createMembershipOrPartnershipInvitesBody: CreateMembershipOrPartnershipInvitesBody;
}

export interface GetInvitesRequest {
    businessId: string;
    isMember?: boolean;
    inviteStatus?: Array<GetInvitesInviteStatusEnum>;
    inviteType?: InviteType;
    bookmark?: string;
    pageSize?: number;
}

export interface RespondBusinessAccessInvitesRequest {
    authRespondInvitesBody: AuthRespondInvitesBody;
}

/**
 * no description
 */
export class BusinessAccessInviteApi extends BaseAPI {

    /**
     * Create a request to access an existing partner\'s assets with the specified permissions. The request will be sent to the partner for approval. The assets that can be requested are ad accounts and profiles.
     * Create a request to access an existing partner\'s assets.
     */
    assetAccessRequestsCreate({ businessId, createAssetAccessRequestBody }: AssetAccessRequestsCreateRequest): Observable<CreateAssetAccessRequestResponse>
    assetAccessRequestsCreate({ businessId, createAssetAccessRequestBody }: AssetAccessRequestsCreateRequest, opts?: OperationOpts): Observable<AjaxResponse<CreateAssetAccessRequestResponse>>
    assetAccessRequestsCreate({ businessId, createAssetAccessRequestBody }: AssetAccessRequestsCreateRequest, opts?: OperationOpts): Observable<CreateAssetAccessRequestResponse | AjaxResponse<CreateAssetAccessRequestResponse>> {
        throwIfNullOrUndefined(businessId, 'businessId', 'assetAccessRequestsCreate');
        throwIfNullOrUndefined(createAssetAccessRequestBody, 'createAssetAccessRequestBody', 'assetAccessRequestsCreate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('pinterest_oauth2', ['biz_access:read', 'biz_access:write'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        return this.request<CreateAssetAccessRequestResponse>({
            url: '/businesses/{business_id}/requests/assets/access'.replace('{business_id}', encodeURI(businessId)),
            method: 'POST',
            headers,
            body: createAssetAccessRequestBody,
        }, opts?.responseOpts);
    };

    /**
     * Cancel membership/partnership invites and/or requests.
     * Cancel invites/requests
     */
    cancelInvitesOrRequests({ businessId, cancelInvitesBody }: CancelInvitesOrRequestsRequest): Observable<DeleteInvitesResultsResponseArray>
    cancelInvitesOrRequests({ businessId, cancelInvitesBody }: CancelInvitesOrRequestsRequest, opts?: OperationOpts): Observable<AjaxResponse<DeleteInvitesResultsResponseArray>>
    cancelInvitesOrRequests({ businessId, cancelInvitesBody }: CancelInvitesOrRequestsRequest, opts?: OperationOpts): Observable<DeleteInvitesResultsResponseArray | AjaxResponse<DeleteInvitesResultsResponseArray>> {
        throwIfNullOrUndefined(businessId, 'businessId', 'cancelInvitesOrRequests');
        throwIfNullOrUndefined(cancelInvitesBody, 'cancelInvitesBody', 'cancelInvitesOrRequests');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('pinterest_oauth2', ['biz_access:write'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        return this.request<DeleteInvitesResultsResponseArray>({
            url: '/businesses/{business_id}/invites'.replace('{business_id}', encodeURI(businessId)),
            method: 'DELETE',
            headers,
            body: cancelInvitesBody,
        }, opts?.responseOpts);
    };

    /**
     * Assign asset permissions information to an existing invite/request. Can be used to: - Request access to a partner\'s asset. Note: This is only for when no existing partnership exists. If an existing   partnership exists, use \"Create a request to access an existing partner\'s assets\" to request access to your   partner\'s assets.     - invite_type=\"PARTNER_REQUEST\" - Invite a partner to access your business assets. Note: This is only for when there is no existing partnership.   If there is an existing partnership, use \"Assign/Update partner asset permissions\" to assign a partner access to   new assets.     - invite_type=\"PARTNER_INVITE\" - Invite a member to access your business assets. Note: This is only for when there is no existing membership.   If there is an existing membership, use \"Assign/Update member asset permissions\" to assign a member access to new   assets.     - invite_type=\"MEMBER_INVITE\"  To learn more about permission levels, visit https://help.pinterest.com/en/business/article/business-manager-overview.
     * Update invite/request with an asset permission
     */
    createAssetInvites({ businessId, createAssetInvitesRequest }: CreateAssetInvitesRequest): Observable<UpdateInvitesResultsResponseArray>
    createAssetInvites({ businessId, createAssetInvitesRequest }: CreateAssetInvitesRequest, opts?: OperationOpts): Observable<AjaxResponse<UpdateInvitesResultsResponseArray>>
    createAssetInvites({ businessId, createAssetInvitesRequest }: CreateAssetInvitesRequest, opts?: OperationOpts): Observable<UpdateInvitesResultsResponseArray | AjaxResponse<UpdateInvitesResultsResponseArray>> {
        throwIfNullOrUndefined(businessId, 'businessId', 'createAssetInvites');
        throwIfNullOrUndefined(createAssetInvitesRequest, 'createAssetInvitesRequest', 'createAssetInvites');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('pinterest_oauth2', ['biz_access:read', 'biz_access:write'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        return this.request<UpdateInvitesResultsResponseArray>({
            url: '/businesses/{business_id}/invites/assets/access'.replace('{business_id}', encodeURI(businessId)),
            method: 'POST',
            headers,
            body: createAssetInvitesRequest,
        }, opts?.responseOpts);
    };

    /**
     * Create batch invites or requests. Can create batch invites or requests as described below. - Invite members to join the business. This would required specifying the following:     - invite_type=\"MEMBER_INVITE\"     - business_role=\"EMPLOYEE\" OR business_role=\"BIZ_ADMIN\" (To learn more about business roles, visit     https://help.pinterest.com/en/business/article/profile-permissions-in-business-access.)     - members - Invite partners to access your business assets. This would require specifying the following:     - invite_type=\"PARTNER_INVITE\"     - business_role=\"PARTNER\"     - partners - Request to be a partner so you can access their assets. This would require specifying the following:     - invite_type=\"PARTNER_REQUEST\"     - business_role=\"PARTNER\"     - partners
     * Create invites or requests
     */
    createMembershipOrPartnershipInvites({ businessId, createMembershipOrPartnershipInvitesBody }: CreateMembershipOrPartnershipInvitesRequest): Observable<CreateInvitesResultsResponseArray>
    createMembershipOrPartnershipInvites({ businessId, createMembershipOrPartnershipInvitesBody }: CreateMembershipOrPartnershipInvitesRequest, opts?: OperationOpts): Observable<AjaxResponse<CreateInvitesResultsResponseArray>>
    createMembershipOrPartnershipInvites({ businessId, createMembershipOrPartnershipInvitesBody }: CreateMembershipOrPartnershipInvitesRequest, opts?: OperationOpts): Observable<CreateInvitesResultsResponseArray | AjaxResponse<CreateInvitesResultsResponseArray>> {
        throwIfNullOrUndefined(businessId, 'businessId', 'createMembershipOrPartnershipInvites');
        throwIfNullOrUndefined(createMembershipOrPartnershipInvitesBody, 'createMembershipOrPartnershipInvitesBody', 'createMembershipOrPartnershipInvites');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('pinterest_oauth2', ['biz_access:write'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        return this.request<CreateInvitesResultsResponseArray>({
            url: '/businesses/{business_id}/invites'.replace('{business_id}', encodeURI(businessId)),
            method: 'POST',
            headers,
            body: createMembershipOrPartnershipInvitesBody,
        }, opts?.responseOpts);
    };

    /**
     * Get the membership/partnership invites and/or requests for the authorized user.
     * Get invites/requests
     */
    getInvites({ businessId, isMember, inviteStatus, inviteType, bookmark, pageSize }: GetInvitesRequest): Observable<GetInvites200Response>
    getInvites({ businessId, isMember, inviteStatus, inviteType, bookmark, pageSize }: GetInvitesRequest, opts?: OperationOpts): Observable<AjaxResponse<GetInvites200Response>>
    getInvites({ businessId, isMember, inviteStatus, inviteType, bookmark, pageSize }: GetInvitesRequest, opts?: OperationOpts): Observable<GetInvites200Response | AjaxResponse<GetInvites200Response>> {
        throwIfNullOrUndefined(businessId, 'businessId', 'getInvites');

        const headers: HttpHeaders = {
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('pinterest_oauth2', ['biz_access:read'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        const query: HttpQuery = {};

        if (isMember != null) { query['is_member'] = isMember; }
        if (inviteStatus != null) { query['invite_status'] = inviteStatus; }
        if (inviteType != null) { query['invite_type'] = inviteType; }
        if (bookmark != null) { query['bookmark'] = bookmark; }
        if (pageSize != null) { query['page_size'] = pageSize; }

        return this.request<GetInvites200Response>({
            url: '/businesses/{business_id}/invites'.replace('{business_id}', encodeURI(businessId)),
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Accept or decline invites or requests.
     * Accept or decline an invite/request
     */
    respondBusinessAccessInvites({ authRespondInvitesBody }: RespondBusinessAccessInvitesRequest): Observable<RespondToInvitesResponseArray>
    respondBusinessAccessInvites({ authRespondInvitesBody }: RespondBusinessAccessInvitesRequest, opts?: OperationOpts): Observable<AjaxResponse<RespondToInvitesResponseArray>>
    respondBusinessAccessInvites({ authRespondInvitesBody }: RespondBusinessAccessInvitesRequest, opts?: OperationOpts): Observable<RespondToInvitesResponseArray | AjaxResponse<RespondToInvitesResponseArray>> {
        throwIfNullOrUndefined(authRespondInvitesBody, 'authRespondInvitesBody', 'respondBusinessAccessInvites');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('pinterest_oauth2', ['biz_access:read', 'biz_access:write'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        return this.request<RespondToInvitesResponseArray>({
            url: '/businesses/invites',
            method: 'PATCH',
            headers,
            body: authRespondInvitesBody,
        }, opts?.responseOpts);
    };

}

/**
 * @export
 * @enum {string}
 */
export enum GetInvitesInviteStatusEnum {
    Pending = 'PENDING',
    Expired = 'EXPIRED'
}
