// tslint:disable
/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined } from '../runtime';
import type { OperationOpts, HttpHeaders, HttpQuery } from '../runtime';
import type {
    RelatedTerms,
} from '../models';

export interface TermsRelatedListRequest {
    terms: Array<string>;
}

export interface TermsSuggestedListRequest {
    term: string;
    limit?: number;
}

/**
 * no description
 */
export class TermsApi extends BaseAPI {

    /**
     * Get a list of terms logically related to each input term. <p/> Example: the term \'workout\' would list related terms like \'one song workout\', \'yoga workout\', \'workout motivation\', etc.
     * List related terms
     */
    termsRelatedList({ terms }: TermsRelatedListRequest): Observable<RelatedTerms>
    termsRelatedList({ terms }: TermsRelatedListRequest, opts?: OperationOpts): Observable<AjaxResponse<RelatedTerms>>
    termsRelatedList({ terms }: TermsRelatedListRequest, opts?: OperationOpts): Observable<RelatedTerms | AjaxResponse<RelatedTerms>> {
        throwIfNullOrUndefined(terms, 'terms', 'termsRelatedList');

        const headers: HttpHeaders = {
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('pinterest_oauth2', ['ads:read'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'terms': terms,
        };

        return this.request<RelatedTerms>({
            url: '/terms/related',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Get popular search terms that begin with your input term. <p/> Example: \'sport\' would return popular terms like \'sports bar\' and \'sportswear\', but not \'motor sports\' since the phrase does not begin with the given term.
     * List suggested terms
     */
    termsSuggestedList({ term, limit }: TermsSuggestedListRequest): Observable<Array<string>>
    termsSuggestedList({ term, limit }: TermsSuggestedListRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<string>>>
    termsSuggestedList({ term, limit }: TermsSuggestedListRequest, opts?: OperationOpts): Observable<Array<string> | AjaxResponse<Array<string>>> {
        throwIfNullOrUndefined(term, 'term', 'termsSuggestedList');

        const headers: HttpHeaders = {
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('pinterest_oauth2', ['ads:read'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'term': term,
        };

        if (limit != null) { query['limit'] = limit; }

        return this.request<Array<string>>({
            url: '/terms/suggested',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

}
