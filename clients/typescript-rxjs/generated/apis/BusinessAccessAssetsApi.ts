// tslint:disable
/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders, HttpQuery } from '../runtime';
import type {
    BusinessAssetMembersGet200Response,
    BusinessAssetPartnersGet200Response,
    BusinessAssetsGet200Response,
    BusinessMemberAssetsGet200Response,
    BusinessMembersAssetAccessDeleteRequest,
    BusinessPartnerAssetAccessGet200Response,
    CreateAssetGroupBody,
    CreateAssetGroupResponse,
    DeleteAssetGroupBody,
    DeleteAssetGroupResponse,
    DeleteMemberAccessResultsResponseArray,
    DeletePartnerAssetAccessBody,
    DeletePartnerAssetsResultsResponseArray,
    PartnerType,
    PermissionsWithOwner,
    UpdateAssetGroupBody,
    UpdateAssetGroupResponse,
    UpdateMemberAssetAccessBody,
    UpdateMemberAssetsResultsResponseArray,
    UpdatePartnerAssetAccessBody,
    UpdatePartnerAssetsResultsResponseArray,
} from '../models';

export interface AssetGroupCreateRequest {
    businessId: string;
    createAssetGroupBody: CreateAssetGroupBody;
}

export interface AssetGroupDeleteRequest {
    businessId: string;
    deleteAssetGroupBody: DeleteAssetGroupBody;
}

export interface AssetGroupUpdateRequest {
    businessId: string;
    updateAssetGroupBody: UpdateAssetGroupBody;
}

export interface BusinessAssetMembersGetRequest {
    businessId: string;
    assetId: string;
    bookmark?: string;
    pageSize?: number;
    startIndex?: number;
}

export interface BusinessAssetPartnersGetRequest {
    businessId: string;
    assetId: string;
    startIndex?: number;
    bookmark?: string;
    pageSize?: number;
}

export interface BusinessAssetsGetRequest {
    businessId: string;
    permissions?: Array<PermissionsWithOwner>;
    childAssetId?: string;
    assetGroupId?: string;
    assetType?: BusinessAssetsGetAssetTypeEnum;
    startIndex?: number;
    bookmark?: string;
    pageSize?: number;
}

export interface BusinessMemberAssetsGetRequest {
    businessId: string;
    memberId: string;
    assetType?: BusinessMemberAssetsGetAssetTypeEnum;
    startIndex?: number;
    bookmark?: string;
    pageSize?: number;
}

export interface BusinessMembersAssetAccessDeleteRequest {
    businessId: string;
    businessMembersAssetAccessDeleteRequest: BusinessMembersAssetAccessDeleteRequest;
}

export interface BusinessMembersAssetAccessUpdateRequest {
    businessId: string;
    updateMemberAssetAccessBody: UpdateMemberAssetAccessBody;
}

export interface BusinessPartnerAssetAccessGetRequest {
    businessId: string;
    partnerId: string;
    partnerType?: PartnerType;
    assetType?: BusinessPartnerAssetAccessGetAssetTypeEnum;
    startIndex?: number;
    pageSize?: number;
    bookmark?: string;
}

export interface DeletePartnerAssetAccessHandlerImplRequest {
    businessId: string;
    deletePartnerAssetAccessBody: DeletePartnerAssetAccessBody;
}

export interface UpdatePartnerAssetAccessHandlerImplRequest {
    businessId: string;
    updatePartnerAssetAccessBody: UpdatePartnerAssetAccessBody;
}

/**
 * no description
 */
export class BusinessAccessAssetsApi extends BaseAPI {

    /**
     * Create a new asset group with the specified parameters. - An <a href=\"https://help.pinterest.com/en/business/article/asset-groups\">asset group</a> is a custom group of assets based on how youâ€™d like to manage your accounts.
     * Create a new asset group.
     */
    assetGroupCreate({ businessId, createAssetGroupBody }: AssetGroupCreateRequest): Observable<CreateAssetGroupResponse>
    assetGroupCreate({ businessId, createAssetGroupBody }: AssetGroupCreateRequest, opts?: OperationOpts): Observable<AjaxResponse<CreateAssetGroupResponse>>
    assetGroupCreate({ businessId, createAssetGroupBody }: AssetGroupCreateRequest, opts?: OperationOpts): Observable<CreateAssetGroupResponse | AjaxResponse<CreateAssetGroupResponse>> {
        throwIfNullOrUndefined(businessId, 'businessId', 'assetGroupCreate');
        throwIfNullOrUndefined(createAssetGroupBody, 'createAssetGroupBody', 'assetGroupCreate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('pinterest_oauth2', ['biz_access:read', 'biz_access:write'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        return this.request<CreateAssetGroupResponse>({
            url: '/businesses/{business_id}/asset_groups'.replace('{business_id}', encodeURI(businessId)),
            method: 'POST',
            headers,
            body: createAssetGroupBody,
        }, opts?.responseOpts);
    };

    /**
     * Delete a batch of asset groups.
     * Delete asset groups.
     */
    assetGroupDelete({ businessId, deleteAssetGroupBody }: AssetGroupDeleteRequest): Observable<DeleteAssetGroupResponse>
    assetGroupDelete({ businessId, deleteAssetGroupBody }: AssetGroupDeleteRequest, opts?: OperationOpts): Observable<AjaxResponse<DeleteAssetGroupResponse>>
    assetGroupDelete({ businessId, deleteAssetGroupBody }: AssetGroupDeleteRequest, opts?: OperationOpts): Observable<DeleteAssetGroupResponse | AjaxResponse<DeleteAssetGroupResponse>> {
        throwIfNullOrUndefined(businessId, 'businessId', 'assetGroupDelete');
        throwIfNullOrUndefined(deleteAssetGroupBody, 'deleteAssetGroupBody', 'assetGroupDelete');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('pinterest_oauth2', ['biz_access:read', 'biz_access:write'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        return this.request<DeleteAssetGroupResponse>({
            url: '/businesses/{business_id}/asset_groups'.replace('{business_id}', encodeURI(businessId)),
            method: 'DELETE',
            headers,
            body: deleteAssetGroupBody,
        }, opts?.responseOpts);
    };

    /**
     * Update a batch of asset groups with the specified parameters.
     * Update asset groups.
     */
    assetGroupUpdate({ businessId, updateAssetGroupBody }: AssetGroupUpdateRequest): Observable<UpdateAssetGroupResponse>
    assetGroupUpdate({ businessId, updateAssetGroupBody }: AssetGroupUpdateRequest, opts?: OperationOpts): Observable<AjaxResponse<UpdateAssetGroupResponse>>
    assetGroupUpdate({ businessId, updateAssetGroupBody }: AssetGroupUpdateRequest, opts?: OperationOpts): Observable<UpdateAssetGroupResponse | AjaxResponse<UpdateAssetGroupResponse>> {
        throwIfNullOrUndefined(businessId, 'businessId', 'assetGroupUpdate');
        throwIfNullOrUndefined(updateAssetGroupBody, 'updateAssetGroupBody', 'assetGroupUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('pinterest_oauth2', ['biz_access:read', 'biz_access:write'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        return this.request<UpdateAssetGroupResponse>({
            url: '/businesses/{business_id}/asset_groups'.replace('{business_id}', encodeURI(businessId)),
            method: 'PATCH',
            headers,
            body: updateAssetGroupBody,
        }, opts?.responseOpts);
    };

    /**
     * Get all the members the requesting business has granted access to on the given asset.
     * Get members with access to asset
     */
    businessAssetMembersGet({ businessId, assetId, bookmark, pageSize, startIndex }: BusinessAssetMembersGetRequest): Observable<BusinessAssetMembersGet200Response>
    businessAssetMembersGet({ businessId, assetId, bookmark, pageSize, startIndex }: BusinessAssetMembersGetRequest, opts?: OperationOpts): Observable<AjaxResponse<BusinessAssetMembersGet200Response>>
    businessAssetMembersGet({ businessId, assetId, bookmark, pageSize, startIndex }: BusinessAssetMembersGetRequest, opts?: OperationOpts): Observable<BusinessAssetMembersGet200Response | AjaxResponse<BusinessAssetMembersGet200Response>> {
        throwIfNullOrUndefined(businessId, 'businessId', 'businessAssetMembersGet');
        throwIfNullOrUndefined(assetId, 'assetId', 'businessAssetMembersGet');

        const headers: HttpHeaders = {
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('pinterest_oauth2', ['biz_access:read'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        const query: HttpQuery = {};

        if (bookmark != null) { query['bookmark'] = bookmark; }
        if (pageSize != null) { query['page_size'] = pageSize; }
        if (startIndex != null) { query['start_index'] = startIndex; }

        return this.request<BusinessAssetMembersGet200Response>({
            url: '/businesses/{business_id}/assets/{asset_id}/members'.replace('{business_id}', encodeURI(businessId)).replace('{asset_id}', encodeURI(assetId)),
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Get all the partners the requesting business has granted access to on the given asset. Note: If the asset has been shared with you, an empty array will be returned. This is because an asset shared with you cannot be shared with a different partner.
     * Get partners with access to asset
     */
    businessAssetPartnersGet({ businessId, assetId, startIndex, bookmark, pageSize }: BusinessAssetPartnersGetRequest): Observable<BusinessAssetPartnersGet200Response>
    businessAssetPartnersGet({ businessId, assetId, startIndex, bookmark, pageSize }: BusinessAssetPartnersGetRequest, opts?: OperationOpts): Observable<AjaxResponse<BusinessAssetPartnersGet200Response>>
    businessAssetPartnersGet({ businessId, assetId, startIndex, bookmark, pageSize }: BusinessAssetPartnersGetRequest, opts?: OperationOpts): Observable<BusinessAssetPartnersGet200Response | AjaxResponse<BusinessAssetPartnersGet200Response>> {
        throwIfNullOrUndefined(businessId, 'businessId', 'businessAssetPartnersGet');
        throwIfNullOrUndefined(assetId, 'assetId', 'businessAssetPartnersGet');

        const headers: HttpHeaders = {
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('pinterest_oauth2', ['biz_access:read'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        const query: HttpQuery = {};

        if (startIndex != null) { query['start_index'] = startIndex; }
        if (bookmark != null) { query['bookmark'] = bookmark; }
        if (pageSize != null) { query['page_size'] = pageSize; }

        return this.request<BusinessAssetPartnersGet200Response>({
            url: '/businesses/{business_id}/assets/{asset_id}/partners'.replace('{business_id}', encodeURI(businessId)).replace('{asset_id}', encodeURI(assetId)),
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Get all the assets the requesting business has access to. This includes assets the business owns and assets the business has access to through partnerships.
     * List business assets
     */
    businessAssetsGet({ businessId, permissions, childAssetId, assetGroupId, assetType, startIndex, bookmark, pageSize }: BusinessAssetsGetRequest): Observable<BusinessAssetsGet200Response>
    businessAssetsGet({ businessId, permissions, childAssetId, assetGroupId, assetType, startIndex, bookmark, pageSize }: BusinessAssetsGetRequest, opts?: OperationOpts): Observable<AjaxResponse<BusinessAssetsGet200Response>>
    businessAssetsGet({ businessId, permissions, childAssetId, assetGroupId, assetType, startIndex, bookmark, pageSize }: BusinessAssetsGetRequest, opts?: OperationOpts): Observable<BusinessAssetsGet200Response | AjaxResponse<BusinessAssetsGet200Response>> {
        throwIfNullOrUndefined(businessId, 'businessId', 'businessAssetsGet');

        const headers: HttpHeaders = {
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('pinterest_oauth2', ['biz_access:read'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        const query: HttpQuery = {};

        if (permissions != null) { query['permissions'] = permissions; }
        if (childAssetId != null) { query['child_asset_id'] = childAssetId; }
        if (assetGroupId != null) { query['asset_group_id'] = assetGroupId; }
        if (assetType != null) { query['asset_type'] = assetType; }
        if (startIndex != null) { query['start_index'] = startIndex; }
        if (bookmark != null) { query['bookmark'] = bookmark; }
        if (pageSize != null) { query['page_size'] = pageSize; }

        return this.request<BusinessAssetsGet200Response>({
            url: '/businesses/{business_id}/assets'.replace('{business_id}', encodeURI(businessId)),
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Get assets on which you assigned asset permissions to the given member. Can be used to: - get all assets, regardless of asset type or - get assets of one asset type by using the asset_type query. The return response will include the permissions the member has to that asset and the asset type.
     * Get assets assigned to a member
     */
    businessMemberAssetsGet({ businessId, memberId, assetType, startIndex, bookmark, pageSize }: BusinessMemberAssetsGetRequest): Observable<BusinessMemberAssetsGet200Response>
    businessMemberAssetsGet({ businessId, memberId, assetType, startIndex, bookmark, pageSize }: BusinessMemberAssetsGetRequest, opts?: OperationOpts): Observable<AjaxResponse<BusinessMemberAssetsGet200Response>>
    businessMemberAssetsGet({ businessId, memberId, assetType, startIndex, bookmark, pageSize }: BusinessMemberAssetsGetRequest, opts?: OperationOpts): Observable<BusinessMemberAssetsGet200Response | AjaxResponse<BusinessMemberAssetsGet200Response>> {
        throwIfNullOrUndefined(businessId, 'businessId', 'businessMemberAssetsGet');
        throwIfNullOrUndefined(memberId, 'memberId', 'businessMemberAssetsGet');

        const headers: HttpHeaders = {
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('pinterest_oauth2', ['biz_access:read'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        const query: HttpQuery = {};

        if (assetType != null) { query['asset_type'] = assetType; }
        if (startIndex != null) { query['start_index'] = startIndex; }
        if (bookmark != null) { query['bookmark'] = bookmark; }
        if (pageSize != null) { query['page_size'] = pageSize; }

        return this.request<BusinessMemberAssetsGet200Response>({
            url: '/businesses/{business_id}/members/{member_id}/assets'.replace('{business_id}', encodeURI(businessId)).replace('{member_id}', encodeURI(memberId)),
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Terminate multiple members\' access to an asset.
     * Delete member access to asset
     */
    businessMembersAssetAccessDelete({ businessId, businessMembersAssetAccessDeleteRequest }: BusinessMembersAssetAccessDeleteRequest): Observable<DeleteMemberAccessResultsResponseArray>
    businessMembersAssetAccessDelete({ businessId, businessMembersAssetAccessDeleteRequest }: BusinessMembersAssetAccessDeleteRequest, opts?: OperationOpts): Observable<AjaxResponse<DeleteMemberAccessResultsResponseArray>>
    businessMembersAssetAccessDelete({ businessId, businessMembersAssetAccessDeleteRequest }: BusinessMembersAssetAccessDeleteRequest, opts?: OperationOpts): Observable<DeleteMemberAccessResultsResponseArray | AjaxResponse<DeleteMemberAccessResultsResponseArray>> {
        throwIfNullOrUndefined(businessId, 'businessId', 'businessMembersAssetAccessDelete');
        throwIfNullOrUndefined(businessMembersAssetAccessDeleteRequest, 'businessMembersAssetAccessDeleteRequest', 'businessMembersAssetAccessDelete');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('pinterest_oauth2', ['biz_access:write'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        return this.request<DeleteMemberAccessResultsResponseArray>({
            url: '/businesses/{business_id}/members/assets/access'.replace('{business_id}', encodeURI(businessId)),
            method: 'DELETE',
            headers,
            body: businessMembersAssetAccessDeleteRequest,
        }, opts?.responseOpts);
    };

    /**
     * Grant multiple members access to assets and/or update multiple member\'s exisiting permissions to an asset. Note: Not all listed permissions are applicable to each asset type. For example, PROFILE_PUBLISHER would not be applicable to an asset of type AD_ACCOUNT. The permission level PROFILE_PUBLISHER is only available to an asset of the type PROFILE. 
     * Assign/Update member asset permissions
     */
    businessMembersAssetAccessUpdate({ businessId, updateMemberAssetAccessBody }: BusinessMembersAssetAccessUpdateRequest): Observable<UpdateMemberAssetsResultsResponseArray>
    businessMembersAssetAccessUpdate({ businessId, updateMemberAssetAccessBody }: BusinessMembersAssetAccessUpdateRequest, opts?: OperationOpts): Observable<AjaxResponse<UpdateMemberAssetsResultsResponseArray>>
    businessMembersAssetAccessUpdate({ businessId, updateMemberAssetAccessBody }: BusinessMembersAssetAccessUpdateRequest, opts?: OperationOpts): Observable<UpdateMemberAssetsResultsResponseArray | AjaxResponse<UpdateMemberAssetsResultsResponseArray>> {
        throwIfNullOrUndefined(businessId, 'businessId', 'businessMembersAssetAccessUpdate');
        throwIfNullOrUndefined(updateMemberAssetAccessBody, 'updateMemberAssetAccessBody', 'businessMembersAssetAccessUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('pinterest_oauth2', ['biz_access:write'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        return this.request<UpdateMemberAssetsResultsResponseArray>({
            url: '/businesses/{business_id}/members/assets/access'.replace('{business_id}', encodeURI(businessId)),
            method: 'PATCH',
            headers,
            body: updateMemberAssetAccessBody,
        }, opts?.responseOpts);
    };

    /**
     * Can be used to get the business assets your partner has granted you access to or the business assets you have granted your partner access to. If you specify: - partner_type=INTERNAL, you will retrieve your business assets that the partner has access to. - partner_type=EXTERNAL, you will retrieve the partner\'s business assets that the partner has granted you access to.
     * Get assets assigned to a partner or assets assigned by a partner
     */
    businessPartnerAssetAccessGet({ businessId, partnerId, partnerType, assetType, startIndex, pageSize, bookmark }: BusinessPartnerAssetAccessGetRequest): Observable<BusinessPartnerAssetAccessGet200Response>
    businessPartnerAssetAccessGet({ businessId, partnerId, partnerType, assetType, startIndex, pageSize, bookmark }: BusinessPartnerAssetAccessGetRequest, opts?: OperationOpts): Observable<AjaxResponse<BusinessPartnerAssetAccessGet200Response>>
    businessPartnerAssetAccessGet({ businessId, partnerId, partnerType, assetType, startIndex, pageSize, bookmark }: BusinessPartnerAssetAccessGetRequest, opts?: OperationOpts): Observable<BusinessPartnerAssetAccessGet200Response | AjaxResponse<BusinessPartnerAssetAccessGet200Response>> {
        throwIfNullOrUndefined(businessId, 'businessId', 'businessPartnerAssetAccessGet');
        throwIfNullOrUndefined(partnerId, 'partnerId', 'businessPartnerAssetAccessGet');

        const headers: HttpHeaders = {
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('pinterest_oauth2', ['biz_access:read'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        const query: HttpQuery = {};

        if (partnerType != null) { query['partner_type'] = partnerType; }
        if (assetType != null) { query['asset_type'] = assetType; }
        if (startIndex != null) { query['start_index'] = startIndex; }
        if (pageSize != null) { query['page_size'] = pageSize; }
        if (bookmark != null) { query['bookmark'] = bookmark; }

        return this.request<BusinessPartnerAssetAccessGet200Response>({
            url: '/businesses/{business_id}/partners/{partner_id}/assets'.replace('{business_id}', encodeURI(businessId)).replace('{partner_id}', encodeURI(partnerId)),
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Terminate multiple partners\' access to an asset. If - partner_type=INTERNAL: You will terminate a partner\'s asset access to your business assets. - partner_type=EXTERNAL: You will terminate your own access to your partner\'s business assets.
     * Delete partner access to asset
     */
    deletePartnerAssetAccessHandlerImpl({ businessId, deletePartnerAssetAccessBody }: DeletePartnerAssetAccessHandlerImplRequest): Observable<DeletePartnerAssetsResultsResponseArray>
    deletePartnerAssetAccessHandlerImpl({ businessId, deletePartnerAssetAccessBody }: DeletePartnerAssetAccessHandlerImplRequest, opts?: OperationOpts): Observable<AjaxResponse<DeletePartnerAssetsResultsResponseArray>>
    deletePartnerAssetAccessHandlerImpl({ businessId, deletePartnerAssetAccessBody }: DeletePartnerAssetAccessHandlerImplRequest, opts?: OperationOpts): Observable<DeletePartnerAssetsResultsResponseArray | AjaxResponse<DeletePartnerAssetsResultsResponseArray>> {
        throwIfNullOrUndefined(businessId, 'businessId', 'deletePartnerAssetAccessHandlerImpl');
        throwIfNullOrUndefined(deletePartnerAssetAccessBody, 'deletePartnerAssetAccessBody', 'deletePartnerAssetAccessHandlerImpl');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('pinterest_oauth2', ['biz_access:write'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        return this.request<DeletePartnerAssetsResultsResponseArray>({
            url: '/businesses/{business_id}/partners/assets'.replace('{business_id}', encodeURI(businessId)),
            method: 'DELETE',
            headers,
            body: deletePartnerAssetAccessBody,
        }, opts?.responseOpts);
    };

    /**
     * Grant multiple partners access to assets and/or update multiple partner\'s exisiting permissions to an asset. If your partner already had permissions on the asset, they will be overriden with the new permissions you assign to them. To learn more about permission levels, visit https://help.pinterest.com/en/business/article/business-manager-overview  Note: Not all listed permissions are applicable to each asset type. For example, PROFILE_PUBLISHER would not be applicable to an asset of type AD_ACCOUNT. The permission level PROFILE_PUBLISHER is only available to an asset of the type PROFILE.
     * Assign/Update partner asset permissions
     */
    updatePartnerAssetAccessHandlerImpl({ businessId, updatePartnerAssetAccessBody }: UpdatePartnerAssetAccessHandlerImplRequest): Observable<UpdatePartnerAssetsResultsResponseArray>
    updatePartnerAssetAccessHandlerImpl({ businessId, updatePartnerAssetAccessBody }: UpdatePartnerAssetAccessHandlerImplRequest, opts?: OperationOpts): Observable<AjaxResponse<UpdatePartnerAssetsResultsResponseArray>>
    updatePartnerAssetAccessHandlerImpl({ businessId, updatePartnerAssetAccessBody }: UpdatePartnerAssetAccessHandlerImplRequest, opts?: OperationOpts): Observable<UpdatePartnerAssetsResultsResponseArray | AjaxResponse<UpdatePartnerAssetsResultsResponseArray>> {
        throwIfNullOrUndefined(businessId, 'businessId', 'updatePartnerAssetAccessHandlerImpl');
        throwIfNullOrUndefined(updatePartnerAssetAccessBody, 'updatePartnerAssetAccessBody', 'updatePartnerAssetAccessHandlerImpl');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('pinterest_oauth2', ['biz_access:write'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        return this.request<UpdatePartnerAssetsResultsResponseArray>({
            url: '/businesses/{business_id}/partners/assets'.replace('{business_id}', encodeURI(businessId)),
            method: 'PATCH',
            headers,
            body: updatePartnerAssetAccessBody,
        }, opts?.responseOpts);
    };

}

/**
 * @export
 * @enum {string}
 */
export enum BusinessAssetsGetAssetTypeEnum {
    AdAccount = 'AD_ACCOUNT',
    Profile = 'PROFILE',
    AssetGroup = 'ASSET_GROUP'
}
/**
 * @export
 * @enum {string}
 */
export enum BusinessMemberAssetsGetAssetTypeEnum {
    AdAccount = 'AD_ACCOUNT',
    Profile = 'PROFILE',
    AssetGroup = 'ASSET_GROUP'
}
/**
 * @export
 * @enum {string}
 */
export enum BusinessPartnerAssetAccessGetAssetTypeEnum {
    AdAccount = 'AD_ACCOUNT',
    Profile = 'PROFILE',
    AssetGroup = 'ASSET_GROUP'
}
