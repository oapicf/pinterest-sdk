// tslint:disable
/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders, HttpQuery } from '../runtime';
import type {
    DeletePartnersRequest,
    DeletePartnersResponse,
    DeletedMembersResponse,
    GetBusinessEmployers200Response,
    GetBusinessMembers200Response,
    GetBusinessPartners200Response,
    MemberBusinessRole,
    MembersToDeleteBody,
    PartnerType,
    UpdateMemberBusinessRoleBody,
    UpdateMemberResultsResponseArray,
} from '../models';

export interface DeleteBusinessMembershipRequest {
    businessId: string;
    membersToDeleteBody: MembersToDeleteBody;
}

export interface DeleteBusinessPartnersRequest {
    businessId: string;
    deletePartnersRequest: DeletePartnersRequest;
}

export interface GetBusinessEmployersRequest {
    pageSize?: number;
    bookmark?: string;
}

export interface GetBusinessMembersRequest {
    businessId: string;
    assetsSummary?: boolean;
    businessRoles?: Array<MemberBusinessRole>;
    memberIds?: string;
    startIndex?: number;
    bookmark?: string;
    pageSize?: number;
}

export interface GetBusinessPartnersRequest {
    businessId: string;
    assetsSummary?: boolean;
    partnerType?: PartnerType;
    partnerIds?: string;
    startIndex?: number;
    pageSize?: number;
    bookmark?: string;
}

export interface UpdateBusinessMembershipsRequest {
    businessId: string;
    updateMemberBusinessRoleBody: Array<UpdateMemberBusinessRoleBody>;
}

/**
 * no description
 */
export class BusinessAccessRelationshipsApi extends BaseAPI {

    /**
     * Terminate memberships between the specified members and your business.
     * Terminate business memberships
     */
    deleteBusinessMembership({ businessId, membersToDeleteBody }: DeleteBusinessMembershipRequest): Observable<DeletedMembersResponse>
    deleteBusinessMembership({ businessId, membersToDeleteBody }: DeleteBusinessMembershipRequest, opts?: OperationOpts): Observable<AjaxResponse<DeletedMembersResponse>>
    deleteBusinessMembership({ businessId, membersToDeleteBody }: DeleteBusinessMembershipRequest, opts?: OperationOpts): Observable<DeletedMembersResponse | AjaxResponse<DeletedMembersResponse>> {
        throwIfNullOrUndefined(businessId, 'businessId', 'deleteBusinessMembership');
        throwIfNullOrUndefined(membersToDeleteBody, 'membersToDeleteBody', 'deleteBusinessMembership');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('pinterest_oauth2', ['biz_access:read', 'biz_access:write'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        return this.request<DeletedMembersResponse>({
            url: '/businesses/{business_id}/members'.replace('{business_id}', encodeURI(businessId)),
            method: 'DELETE',
            headers,
            body: membersToDeleteBody,
        }, opts?.responseOpts);
    };

    /**
     * Terminate partnerships between the specified partners and your business. Note: You may only batch terminate partners of the same partner type.
     * Terminate business partnerships
     */
    deleteBusinessPartners({ businessId, deletePartnersRequest }: DeleteBusinessPartnersRequest): Observable<DeletePartnersResponse>
    deleteBusinessPartners({ businessId, deletePartnersRequest }: DeleteBusinessPartnersRequest, opts?: OperationOpts): Observable<AjaxResponse<DeletePartnersResponse>>
    deleteBusinessPartners({ businessId, deletePartnersRequest }: DeleteBusinessPartnersRequest, opts?: OperationOpts): Observable<DeletePartnersResponse | AjaxResponse<DeletePartnersResponse>> {
        throwIfNullOrUndefined(businessId, 'businessId', 'deleteBusinessPartners');
        throwIfNullOrUndefined(deletePartnersRequest, 'deletePartnersRequest', 'deleteBusinessPartners');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('pinterest_oauth2', ['biz_access:write'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        return this.request<DeletePartnersResponse>({
            url: '/businesses/{business_id}/partners'.replace('{business_id}', encodeURI(businessId)),
            method: 'DELETE',
            headers,
            body: deletePartnersRequest,
        }, opts?.responseOpts);
    };

    /**
     * Get all of the viewing user\'s business employers.
     * List business employers for user
     */
    getBusinessEmployers({ pageSize, bookmark }: GetBusinessEmployersRequest): Observable<GetBusinessEmployers200Response>
    getBusinessEmployers({ pageSize, bookmark }: GetBusinessEmployersRequest, opts?: OperationOpts): Observable<AjaxResponse<GetBusinessEmployers200Response>>
    getBusinessEmployers({ pageSize, bookmark }: GetBusinessEmployersRequest, opts?: OperationOpts): Observable<GetBusinessEmployers200Response | AjaxResponse<GetBusinessEmployers200Response>> {

        const headers: HttpHeaders = {
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('pinterest_oauth2', ['biz_access:read'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        const query: HttpQuery = {};

        if (pageSize != null) { query['page_size'] = pageSize; }
        if (bookmark != null) { query['bookmark'] = bookmark; }

        return this.request<GetBusinessEmployers200Response>({
            url: '/businesses/employers',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Get all members of the specified business. The return response will include the member\'s business_role and assets they have access to if assets_summary=TRUE
     * Get business members
     */
    getBusinessMembers({ businessId, assetsSummary, businessRoles, memberIds, startIndex, bookmark, pageSize }: GetBusinessMembersRequest): Observable<GetBusinessMembers200Response>
    getBusinessMembers({ businessId, assetsSummary, businessRoles, memberIds, startIndex, bookmark, pageSize }: GetBusinessMembersRequest, opts?: OperationOpts): Observable<AjaxResponse<GetBusinessMembers200Response>>
    getBusinessMembers({ businessId, assetsSummary, businessRoles, memberIds, startIndex, bookmark, pageSize }: GetBusinessMembersRequest, opts?: OperationOpts): Observable<GetBusinessMembers200Response | AjaxResponse<GetBusinessMembers200Response>> {
        throwIfNullOrUndefined(businessId, 'businessId', 'getBusinessMembers');

        const headers: HttpHeaders = {
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('pinterest_oauth2', ['biz_access:read'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        const query: HttpQuery = {};

        if (assetsSummary != null) { query['assets_summary'] = assetsSummary; }
        if (businessRoles != null) { query['business_roles'] = businessRoles; }
        if (memberIds != null) { query['member_ids'] = memberIds; }
        if (startIndex != null) { query['start_index'] = startIndex; }
        if (bookmark != null) { query['bookmark'] = bookmark; }
        if (pageSize != null) { query['page_size'] = pageSize; }

        return this.request<GetBusinessMembers200Response>({
            url: '/businesses/{business_id}/members'.replace('{business_id}', encodeURI(businessId)),
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Get all partners of the specified business.  If the assets_summary=TRUE and: - partner_type=INTERNAL, the business assets returned are your business assets the partner has access to. - partner_type=EXTERNAL, the business assets returned are your partner\'s business assets the partner has granted you   access to.
     * Get business partners
     */
    getBusinessPartners({ businessId, assetsSummary, partnerType, partnerIds, startIndex, pageSize, bookmark }: GetBusinessPartnersRequest): Observable<GetBusinessPartners200Response>
    getBusinessPartners({ businessId, assetsSummary, partnerType, partnerIds, startIndex, pageSize, bookmark }: GetBusinessPartnersRequest, opts?: OperationOpts): Observable<AjaxResponse<GetBusinessPartners200Response>>
    getBusinessPartners({ businessId, assetsSummary, partnerType, partnerIds, startIndex, pageSize, bookmark }: GetBusinessPartnersRequest, opts?: OperationOpts): Observable<GetBusinessPartners200Response | AjaxResponse<GetBusinessPartners200Response>> {
        throwIfNullOrUndefined(businessId, 'businessId', 'getBusinessPartners');

        const headers: HttpHeaders = {
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('pinterest_oauth2', ['biz_access:read'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        const query: HttpQuery = {};

        if (assetsSummary != null) { query['assets_summary'] = assetsSummary; }
        if (partnerType != null) { query['partner_type'] = partnerType; }
        if (partnerIds != null) { query['partner_ids'] = partnerIds; }
        if (startIndex != null) { query['start_index'] = startIndex; }
        if (pageSize != null) { query['page_size'] = pageSize; }
        if (bookmark != null) { query['bookmark'] = bookmark; }

        return this.request<GetBusinessPartners200Response>({
            url: '/businesses/{business_id}/partners'.replace('{business_id}', encodeURI(businessId)),
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Update a member\'s business role within the business.
     * Update member\'s business role
     */
    updateBusinessMemberships({ businessId, updateMemberBusinessRoleBody }: UpdateBusinessMembershipsRequest): Observable<UpdateMemberResultsResponseArray>
    updateBusinessMemberships({ businessId, updateMemberBusinessRoleBody }: UpdateBusinessMembershipsRequest, opts?: OperationOpts): Observable<AjaxResponse<UpdateMemberResultsResponseArray>>
    updateBusinessMemberships({ businessId, updateMemberBusinessRoleBody }: UpdateBusinessMembershipsRequest, opts?: OperationOpts): Observable<UpdateMemberResultsResponseArray | AjaxResponse<UpdateMemberResultsResponseArray>> {
        throwIfNullOrUndefined(businessId, 'businessId', 'updateBusinessMemberships');
        throwIfNullOrUndefined(updateMemberBusinessRoleBody, 'updateMemberBusinessRoleBody', 'updateBusinessMemberships');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('pinterest_oauth2', ['biz_access:write'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        return this.request<UpdateMemberResultsResponseArray>({
            url: '/businesses/{business_id}/members'.replace('{business_id}', encodeURI(businessId)),
            method: 'PATCH',
            headers,
            body: updateMemberBusinessRoleBody,
        }, opts?.responseOpts);
    };

}
