// tslint:disable
/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders, HttpQuery } from '../runtime';
import type {
    OrderLine,
    OrderLinesList200Response,
} from '../models';

export interface OrderLinesGetRequest {
    adAccountId: string;
    orderLineId: string;
}

export interface OrderLinesListRequest {
    adAccountId: string;
    pageSize?: number;
    order?: OrderLinesListOrderEnum;
    bookmark?: string;
}

/**
 * no description
 */
export class OrderLinesApi extends BaseAPI {

    /**
     * Get a specific existing order line associated with an ad account.
     * Get order line
     */
    orderLinesGet({ adAccountId, orderLineId }: OrderLinesGetRequest): Observable<OrderLine>
    orderLinesGet({ adAccountId, orderLineId }: OrderLinesGetRequest, opts?: OperationOpts): Observable<AjaxResponse<OrderLine>>
    orderLinesGet({ adAccountId, orderLineId }: OrderLinesGetRequest, opts?: OperationOpts): Observable<OrderLine | AjaxResponse<OrderLine>> {
        throwIfNullOrUndefined(adAccountId, 'adAccountId', 'orderLinesGet');
        throwIfNullOrUndefined(orderLineId, 'orderLineId', 'orderLinesGet');

        const headers: HttpHeaders = {
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('pinterest_oauth2', ['ads:read'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        return this.request<OrderLine>({
            url: '/ad_accounts/{ad_account_id}/order_lines/{order_line_id}'.replace('{ad_account_id}', encodeURI(adAccountId)).replace('{order_line_id}', encodeURI(orderLineId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * List existing order lines associated with an ad account.
     * Get order lines
     */
    orderLinesList({ adAccountId, pageSize, order, bookmark }: OrderLinesListRequest): Observable<OrderLinesList200Response>
    orderLinesList({ adAccountId, pageSize, order, bookmark }: OrderLinesListRequest, opts?: OperationOpts): Observable<AjaxResponse<OrderLinesList200Response>>
    orderLinesList({ adAccountId, pageSize, order, bookmark }: OrderLinesListRequest, opts?: OperationOpts): Observable<OrderLinesList200Response | AjaxResponse<OrderLinesList200Response>> {
        throwIfNullOrUndefined(adAccountId, 'adAccountId', 'orderLinesList');

        const headers: HttpHeaders = {
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('pinterest_oauth2', ['ads:read'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        const query: HttpQuery = {};

        if (pageSize != null) { query['page_size'] = pageSize; }
        if (order != null) { query['order'] = order; }
        if (bookmark != null) { query['bookmark'] = bookmark; }

        return this.request<OrderLinesList200Response>({
            url: '/ad_accounts/{ad_account_id}/order_lines'.replace('{ad_account_id}', encodeURI(adAccountId)),
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

}

/**
 * @export
 * @enum {string}
 */
export enum OrderLinesListOrderEnum {
    Ascending = 'ASCENDING',
    Descending = 'DESCENDING'
}
