// tslint:disable
/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders, HttpQuery } from '../runtime';
import type {
    AdAccountsCountryResponse,
    BookClosedResponse,
    DeliveryMetricsResponse,
    SingleInterestTargetingOptionResponse,
} from '../models';

export interface DeliveryMetricsGetRequest {
    reportType?: DeliveryMetricsGetReportTypeEnum;
}

export interface InterestTargetingOptionsGetRequest {
    interestId: string;
}

export interface MetricsReadyStateGetRequest {
    date: string;
}

export interface TargetingOptionsGetRequest {
    targetingType: TargetingOptionsGetTargetingTypeEnum;
    clientId?: string;
    oauthSignature?: string;
    timestamp?: string;
    adAccountId?: string;
}

/**
 * no description
 */
export class ResourcesApi extends BaseAPI {

    /**
     * Get Ad Accounts countries
     * Get ad accounts countries
     */
    adAccountCountriesGet(): Observable<AdAccountsCountryResponse>
    adAccountCountriesGet(opts?: OperationOpts): Observable<AjaxResponse<AdAccountsCountryResponse>>
    adAccountCountriesGet(opts?: OperationOpts): Observable<AdAccountsCountryResponse | AjaxResponse<AdAccountsCountryResponse>> {
        const headers: HttpHeaders = {
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('pinterest_oauth2', ['ads:read'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        return this.request<AdAccountsCountryResponse>({
            url: '/resources/ad_account_countries',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Get the definitions for ads and organic metrics available across both synchronous and asynchronous report endpoints. The `display_name` attribute will match how the metric is named in our native tools like Ads Manager. See <a href=\'/docs/api-features/analytics-overview/\'>Organic Analytics</a> and <a href=\'/docs/api-features/ads-reporting/\'>Ads Analytics</a> for more information.
     * Get available metrics\' definitions
     */
    deliveryMetricsGet({ reportType }: DeliveryMetricsGetRequest): Observable<DeliveryMetricsResponse>
    deliveryMetricsGet({ reportType }: DeliveryMetricsGetRequest, opts?: OperationOpts): Observable<AjaxResponse<DeliveryMetricsResponse>>
    deliveryMetricsGet({ reportType }: DeliveryMetricsGetRequest, opts?: OperationOpts): Observable<DeliveryMetricsResponse | AjaxResponse<DeliveryMetricsResponse>> {

        const headers: HttpHeaders = {
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('pinterest_oauth2', ['ads:read', 'pins:read', 'user_accounts:read'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        const query: HttpQuery = {};

        if (reportType != null) { query['report_type'] = reportType; }

        return this.request<DeliveryMetricsResponse>({
            url: '/resources/delivery_metrics',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * <p>Get details of a specific interest given interest ID.</p> <p>Click <a href=\"https://docs.google.com/spreadsheets/d/1HxL-0Z3p2fgxis9YBP2HWC3tvPrs1hAuHDRtH-NJTIM/edit#gid=118370875\" target=\"_blank\">here</a> for a spreadsheet listing interests and their IDs.</p>
     * Get interest details
     */
    interestTargetingOptionsGet({ interestId }: InterestTargetingOptionsGetRequest): Observable<SingleInterestTargetingOptionResponse>
    interestTargetingOptionsGet({ interestId }: InterestTargetingOptionsGetRequest, opts?: OperationOpts): Observable<AjaxResponse<SingleInterestTargetingOptionResponse>>
    interestTargetingOptionsGet({ interestId }: InterestTargetingOptionsGetRequest, opts?: OperationOpts): Observable<SingleInterestTargetingOptionResponse | AjaxResponse<SingleInterestTargetingOptionResponse>> {
        throwIfNullOrUndefined(interestId, 'interestId', 'interestTargetingOptionsGet');

        const headers: HttpHeaders = {
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('pinterest_oauth2', ['ads:read'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        return this.request<SingleInterestTargetingOptionResponse>({
            url: '/resources/targeting/interests/{interest_id}'.replace('{interest_id}', encodeURI(interestId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Get a list of all lead form question type names. Some questions might not be used.  <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/getting-started/beta-and-advanced-access/\'>Learn more</a>.</strong>
     * Get lead form questions
     */
    leadFormQuestionsGet(): Observable<void>
    leadFormQuestionsGet(opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    leadFormQuestionsGet(opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        const headers: HttpHeaders = {
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('pinterest_oauth2', ['ads:read'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        return this.request<void>({
            url: '/resources/lead_form_questions',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Learn whether conversion or non-conversion metrics are finalized and ready to query.
     * Get metrics ready state
     */
    metricsReadyStateGet({ date }: MetricsReadyStateGetRequest): Observable<BookClosedResponse>
    metricsReadyStateGet({ date }: MetricsReadyStateGetRequest, opts?: OperationOpts): Observable<AjaxResponse<BookClosedResponse>>
    metricsReadyStateGet({ date }: MetricsReadyStateGetRequest, opts?: OperationOpts): Observable<BookClosedResponse | AjaxResponse<BookClosedResponse>> {
        throwIfNullOrUndefined(date, 'date', 'metricsReadyStateGet');

        const headers: HttpHeaders = {
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('pinterest_oauth2', ['ads:read'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'date': date,
        };

        return this.request<BookClosedResponse>({
            url: '/resources/metrics_ready_state',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * <p>You can use targeting values in ads placement to define your intended audience. </p> <p>Targeting metrics are organized around targeting specifications.</p> <p>For more information on ads targeting, see <a class=\"reference external\" href=\"https://help.pinterest.com/en/business/article/audience-targeting\" target=\"_blank\">Audience targeting</a>.</p> <p><b>Sample return:</b></p> <pre class=\"literal-block\"> [{&quot;36313&quot;: &quot;Australia: Moreton Bay - North&quot;, &quot;124735&quot;: &quot;Canada: North Battleford&quot;, &quot;36109&quot;: &quot;Australia: Murray&quot;, &quot;36108&quot;: &quot;Australia: Mid North Coast&quot;, &quot;36101&quot;: &quot;Australia: Capital Region&quot;, &quot;811&quot;: &quot;U.S.: Reno&quot;, &quot;36103&quot;: &quot;Australia: Central West&quot;, &quot;36102&quot;: &quot;Australia: Central Coast&quot;, &quot;36105&quot;: &quot;Australia: Far West and Orana&quot;, &quot;36104&quot;: &quot;Australia: Coffs Harbour - Grafton&quot;, &quot;36107&quot;: &quot;Australia: Illawarra&quot;, &quot;36106&quot;: &quot;Australia: Hunter Valley Exc Newcastle&quot;, &quot;554017&quot;: &quot;New Zealand: Wanganui&quot;, &quot;554016&quot;: &quot;New Zealand: Marlborough&quot;, &quot;554015&quot;: &quot;New Zealand: Gisborne&quot;, &quot;554014&quot;: &quot;New Zealand: Tararua&quot;, &quot;554013&quot;: &quot;New Zealand: Invercargill&quot;, &quot;GR&quot;: &quot;Greece&quot;, &quot;554011&quot;: &quot;New Zealand: Whangarei&quot;, &quot;554010&quot;: &quot;New Zealand: Far North&quot;, &quot;717&quot;: &quot;U.S.: Quincy-Hannibal-Keokuk&quot;, &quot;716&quot;: &quot;U.S.: Baton Rouge&quot;,...}] </pre>
     * Get targeting options
     */
    targetingOptionsGet({ targetingType, clientId, oauthSignature, timestamp, adAccountId }: TargetingOptionsGetRequest): Observable<Array<object>>
    targetingOptionsGet({ targetingType, clientId, oauthSignature, timestamp, adAccountId }: TargetingOptionsGetRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<object>>>
    targetingOptionsGet({ targetingType, clientId, oauthSignature, timestamp, adAccountId }: TargetingOptionsGetRequest, opts?: OperationOpts): Observable<Array<object> | AjaxResponse<Array<object>>> {
        throwIfNullOrUndefined(targetingType, 'targetingType', 'targetingOptionsGet');

        const headers: HttpHeaders = {
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('pinterest_oauth2', ['ads:read'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        const query: HttpQuery = {};

        if (clientId != null) { query['client_id'] = clientId; }
        if (oauthSignature != null) { query['oauth_signature'] = oauthSignature; }
        if (timestamp != null) { query['timestamp'] = timestamp; }
        if (adAccountId != null) { query['ad_account_id'] = adAccountId; }

        return this.request<Array<object>>({
            url: '/resources/targeting/{targeting_type}'.replace('{targeting_type}', encodeURI(targetingType)),
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

}

/**
 * @export
 * @enum {string}
 */
export enum DeliveryMetricsGetReportTypeEnum {
    Sync = 'SYNC',
    Async = 'ASYNC'
}
/**
 * @export
 * @enum {string}
 */
export enum TargetingOptionsGetTargetingTypeEnum {
    Apptype = 'APPTYPE',
    Gender = 'GENDER',
    Locale = 'LOCALE',
    AgeBucket = 'AGE_BUCKET',
    Location = 'LOCATION',
    Geo = 'GEO',
    Interest = 'INTEREST',
    Keyword = 'KEYWORD',
    AudienceInclude = 'AUDIENCE_INCLUDE',
    AudienceExclude = 'AUDIENCE_EXCLUDE'
}
