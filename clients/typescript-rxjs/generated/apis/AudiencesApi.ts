// tslint:disable
/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders, HttpQuery } from '../runtime';
import type {
    Audience,
    AudienceCreateCustomRequest,
    AudienceCreateRequest,
    AudienceUpdateRequest,
    AudiencesList200Response,
} from '../models';

export interface AudiencesCreateRequest {
    adAccountId: string;
    audienceCreateRequest: AudienceCreateRequest;
}

export interface AudiencesCreateCustomRequest {
    adAccountId: string;
    audienceCreateCustomRequest: AudienceCreateCustomRequest;
}

export interface AudiencesGetRequest {
    adAccountId: string;
    audienceId: string;
}

export interface AudiencesListRequest {
    adAccountId: string;
    bookmark?: string;
    order?: AudiencesListOrderEnum;
    pageSize?: number;
    ownershipType?: AudiencesListOwnershipTypeEnum;
}

export interface AudiencesUpdateRequest {
    adAccountId: string;
    audienceId: string;
    audienceUpdateRequest?: AudienceUpdateRequest;
}

/**
 * no description
 */
export class AudiencesApi extends BaseAPI {

    /**
     * Create an audience you can use in targeting for specific ad groups. Targeting combines customer information with the ways users interact with Pinterest to help you reach specific groups of users; you can include or exclude specific audience_ids when you create an ad group. <p/> For more, see <a class=\"reference external\" href=\"https://help.pinterest.com/en/business/article/audience-targeting\" target=\"_blank\">Audience targeting</a>.
     * Create audience
     */
    audiencesCreate({ adAccountId, audienceCreateRequest }: AudiencesCreateRequest): Observable<Audience>
    audiencesCreate({ adAccountId, audienceCreateRequest }: AudiencesCreateRequest, opts?: OperationOpts): Observable<AjaxResponse<Audience>>
    audiencesCreate({ adAccountId, audienceCreateRequest }: AudiencesCreateRequest, opts?: OperationOpts): Observable<Audience | AjaxResponse<Audience>> {
        throwIfNullOrUndefined(adAccountId, 'adAccountId', 'audiencesCreate');
        throwIfNullOrUndefined(audienceCreateRequest, 'audienceCreateRequest', 'audiencesCreate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('pinterest_oauth2', ['ads:write'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        return this.request<Audience>({
            url: '/ad_accounts/{ad_account_id}/audiences'.replace('{ad_account_id}', encodeURI(adAccountId)),
            method: 'POST',
            headers,
            body: audienceCreateRequest,
        }, opts?.responseOpts);
    };

    /**
     * Create a custom audience and find the audiences you want your ads to reach.
     * Create custom audience
     */
    audiencesCreateCustom({ adAccountId, audienceCreateCustomRequest }: AudiencesCreateCustomRequest): Observable<Audience>
    audiencesCreateCustom({ adAccountId, audienceCreateCustomRequest }: AudiencesCreateCustomRequest, opts?: OperationOpts): Observable<AjaxResponse<Audience>>
    audiencesCreateCustom({ adAccountId, audienceCreateCustomRequest }: AudiencesCreateCustomRequest, opts?: OperationOpts): Observable<Audience | AjaxResponse<Audience>> {
        throwIfNullOrUndefined(adAccountId, 'adAccountId', 'audiencesCreateCustom');
        throwIfNullOrUndefined(audienceCreateCustomRequest, 'audienceCreateCustomRequest', 'audiencesCreateCustom');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('pinterest_oauth2', ['ads:write'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        return this.request<Audience>({
            url: '/ad_accounts/{ad_account_id}/audiences/custom'.replace('{ad_account_id}', encodeURI(adAccountId)),
            method: 'POST',
            headers,
            body: audienceCreateCustomRequest,
        }, opts?.responseOpts);
    };

    /**
     * Get a specific audience given the audience ID.
     * Get audience
     */
    audiencesGet({ adAccountId, audienceId }: AudiencesGetRequest): Observable<Audience>
    audiencesGet({ adAccountId, audienceId }: AudiencesGetRequest, opts?: OperationOpts): Observable<AjaxResponse<Audience>>
    audiencesGet({ adAccountId, audienceId }: AudiencesGetRequest, opts?: OperationOpts): Observable<Audience | AjaxResponse<Audience>> {
        throwIfNullOrUndefined(adAccountId, 'adAccountId', 'audiencesGet');
        throwIfNullOrUndefined(audienceId, 'audienceId', 'audiencesGet');

        const headers: HttpHeaders = {
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('pinterest_oauth2', ['ads:read'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        return this.request<Audience>({
            url: '/ad_accounts/{ad_account_id}/audiences/{audience_id}'.replace('{ad_account_id}', encodeURI(adAccountId)).replace('{audience_id}', encodeURI(audienceId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Get list of audiences for the ad account.
     * List audiences
     */
    audiencesList({ adAccountId, bookmark, order, pageSize, ownershipType }: AudiencesListRequest): Observable<AudiencesList200Response>
    audiencesList({ adAccountId, bookmark, order, pageSize, ownershipType }: AudiencesListRequest, opts?: OperationOpts): Observable<AjaxResponse<AudiencesList200Response>>
    audiencesList({ adAccountId, bookmark, order, pageSize, ownershipType }: AudiencesListRequest, opts?: OperationOpts): Observable<AudiencesList200Response | AjaxResponse<AudiencesList200Response>> {
        throwIfNullOrUndefined(adAccountId, 'adAccountId', 'audiencesList');

        const headers: HttpHeaders = {
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('pinterest_oauth2', ['ads:read'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        const query: HttpQuery = {};

        if (bookmark != null) { query['bookmark'] = bookmark; }
        if (order != null) { query['order'] = order; }
        if (pageSize != null) { query['page_size'] = pageSize; }
        if (ownershipType != null) { query['ownership_type'] = ownershipType; }

        return this.request<AudiencesList200Response>({
            url: '/ad_accounts/{ad_account_id}/audiences'.replace('{ad_account_id}', encodeURI(adAccountId)),
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Update (edit or remove) an existing targeting audience.
     * Update audience
     */
    audiencesUpdate({ adAccountId, audienceId, audienceUpdateRequest }: AudiencesUpdateRequest): Observable<Audience>
    audiencesUpdate({ adAccountId, audienceId, audienceUpdateRequest }: AudiencesUpdateRequest, opts?: OperationOpts): Observable<AjaxResponse<Audience>>
    audiencesUpdate({ adAccountId, audienceId, audienceUpdateRequest }: AudiencesUpdateRequest, opts?: OperationOpts): Observable<Audience | AjaxResponse<Audience>> {
        throwIfNullOrUndefined(adAccountId, 'adAccountId', 'audiencesUpdate');
        throwIfNullOrUndefined(audienceId, 'audienceId', 'audiencesUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('pinterest_oauth2', ['ads:write'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        return this.request<Audience>({
            url: '/ad_accounts/{ad_account_id}/audiences/{audience_id}'.replace('{ad_account_id}', encodeURI(adAccountId)).replace('{audience_id}', encodeURI(audienceId)),
            method: 'PATCH',
            headers,
            body: audienceUpdateRequest,
        }, opts?.responseOpts);
    };

}

/**
 * @export
 * @enum {string}
 */
export enum AudiencesListOrderEnum {
    Ascending = 'ASCENDING',
    Descending = 'DESCENDING'
}
/**
 * @export
 * @enum {string}
 */
export enum AudiencesListOwnershipTypeEnum {
    Owned = 'OWNED',
    Received = 'RECEIVED'
}
