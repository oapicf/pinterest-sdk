// tslint:disable
/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders, HttpQuery } from '../runtime';
import type {
    DetailedError,
    IntegrationLogsRequest,
    IntegrationLogsSuccessResponse,
    IntegrationMetadata,
    IntegrationRecord,
    IntegrationRequest,
    IntegrationRequestPatch,
    IntegrationsGetList200Response,
} from '../models';

export interface IntegrationsCommerceDelRequest {
    externalBusinessId: string;
}

export interface IntegrationsCommerceGetRequest {
    externalBusinessId: string;
}

export interface IntegrationsCommercePatchRequest {
    externalBusinessId: string;
    integrationRequestPatch?: IntegrationRequestPatch;
}

export interface IntegrationsCommercePostRequest {
    integrationRequest?: IntegrationRequest;
}

export interface IntegrationsGetByIdRequest {
    id: string;
}

export interface IntegrationsGetListRequest {
    bookmark?: string;
    pageSize?: number;
}

export interface IntegrationsLogsPostRequest {
    integrationLogsRequest: IntegrationLogsRequest;
}

/**
 * no description
 */
export class IntegrationsApi extends BaseAPI {

    /**
     * Delete commerce integration metadata for the given external business ID. Note: If you\'re interested in joining the beta, please reach out to your Pinterest account manager.
     * Delete commerce integration
     */
    integrationsCommerceDel({ externalBusinessId }: IntegrationsCommerceDelRequest): Observable<void>
    integrationsCommerceDel({ externalBusinessId }: IntegrationsCommerceDelRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    integrationsCommerceDel({ externalBusinessId }: IntegrationsCommerceDelRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(externalBusinessId, 'externalBusinessId', 'integrationsCommerceDel');

        const headers: HttpHeaders = {
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('pinterest_oauth2', ['ads:write'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        return this.request<void>({
            url: '/integrations/commerce/{external_business_id}'.replace('{external_business_id}', encodeURI(externalBusinessId)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Get commerce integration metadata associated with the given external business ID. Note: If you\'re interested in joining the beta, please reach out to your Pinterest account manager.
     * Get commerce integration
     */
    integrationsCommerceGet({ externalBusinessId }: IntegrationsCommerceGetRequest): Observable<IntegrationMetadata>
    integrationsCommerceGet({ externalBusinessId }: IntegrationsCommerceGetRequest, opts?: OperationOpts): Observable<AjaxResponse<IntegrationMetadata>>
    integrationsCommerceGet({ externalBusinessId }: IntegrationsCommerceGetRequest, opts?: OperationOpts): Observable<IntegrationMetadata | AjaxResponse<IntegrationMetadata>> {
        throwIfNullOrUndefined(externalBusinessId, 'externalBusinessId', 'integrationsCommerceGet');

        const headers: HttpHeaders = {
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('pinterest_oauth2', ['ads:read'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        return this.request<IntegrationMetadata>({
            url: '/integrations/commerce/{external_business_id}'.replace('{external_business_id}', encodeURI(externalBusinessId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Update commerce integration metadata for the given external business ID. Note: If you\'re interested in joining the beta, please reach out to your Pinterest account manager.
     * Update commerce integration
     */
    integrationsCommercePatch({ externalBusinessId, integrationRequestPatch }: IntegrationsCommercePatchRequest): Observable<IntegrationMetadata>
    integrationsCommercePatch({ externalBusinessId, integrationRequestPatch }: IntegrationsCommercePatchRequest, opts?: OperationOpts): Observable<AjaxResponse<IntegrationMetadata>>
    integrationsCommercePatch({ externalBusinessId, integrationRequestPatch }: IntegrationsCommercePatchRequest, opts?: OperationOpts): Observable<IntegrationMetadata | AjaxResponse<IntegrationMetadata>> {
        throwIfNullOrUndefined(externalBusinessId, 'externalBusinessId', 'integrationsCommercePatch');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('pinterest_oauth2', ['ads:write'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        return this.request<IntegrationMetadata>({
            url: '/integrations/commerce/{external_business_id}'.replace('{external_business_id}', encodeURI(externalBusinessId)),
            method: 'PATCH',
            headers,
            body: integrationRequestPatch,
        }, opts?.responseOpts);
    };

    /**
     * Create commerce integration metadata to link an external business ID with a Pinterest merchant & ad account. Note: If you\'re interested in joining the beta, please reach out to your Pinterest account manager.
     * Create commerce integration
     */
    integrationsCommercePost({ integrationRequest }: IntegrationsCommercePostRequest): Observable<IntegrationMetadata>
    integrationsCommercePost({ integrationRequest }: IntegrationsCommercePostRequest, opts?: OperationOpts): Observable<AjaxResponse<IntegrationMetadata>>
    integrationsCommercePost({ integrationRequest }: IntegrationsCommercePostRequest, opts?: OperationOpts): Observable<IntegrationMetadata | AjaxResponse<IntegrationMetadata>> {

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('pinterest_oauth2', ['ads:write'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        return this.request<IntegrationMetadata>({
            url: '/integrations/commerce',
            method: 'POST',
            headers,
            body: integrationRequest,
        }, opts?.responseOpts);
    };

    /**
     * Get integration metadata by ID. Note: If you\'re interested in joining the beta, please reach out to your Pinterest account manager.
     * Get integration metadata
     */
    integrationsGetById({ id }: IntegrationsGetByIdRequest): Observable<IntegrationRecord>
    integrationsGetById({ id }: IntegrationsGetByIdRequest, opts?: OperationOpts): Observable<AjaxResponse<IntegrationRecord>>
    integrationsGetById({ id }: IntegrationsGetByIdRequest, opts?: OperationOpts): Observable<IntegrationRecord | AjaxResponse<IntegrationRecord>> {
        throwIfNullOrUndefined(id, 'id', 'integrationsGetById');

        const headers: HttpHeaders = {
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('pinterest_oauth2', ['ads:read'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        return this.request<IntegrationRecord>({
            url: '/integrations/{id}'.replace('{id}', encodeURI(id)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Get integration metadata list. Note: If you\'re interested in joining the beta, please reach out to your Pinterest account manager.
     * Get integration metadata list
     */
    integrationsGetList({ bookmark, pageSize }: IntegrationsGetListRequest): Observable<IntegrationsGetList200Response>
    integrationsGetList({ bookmark, pageSize }: IntegrationsGetListRequest, opts?: OperationOpts): Observable<AjaxResponse<IntegrationsGetList200Response>>
    integrationsGetList({ bookmark, pageSize }: IntegrationsGetListRequest, opts?: OperationOpts): Observable<IntegrationsGetList200Response | AjaxResponse<IntegrationsGetList200Response>> {

        const headers: HttpHeaders = {
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('pinterest_oauth2', ['ads:read'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        const query: HttpQuery = {};

        if (bookmark != null) { query['bookmark'] = bookmark; }
        if (pageSize != null) { query['page_size'] = pageSize; }

        return this.request<IntegrationsGetList200Response>({
            url: '/integrations',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * This endpoint receives batched logs from integration applications on partner platforms. Note: If you\'re interested in joining the beta, please reach out to your Pinterest account manager.
     * Receives batched logs from integration applications.
     */
    integrationsLogsPost({ integrationLogsRequest }: IntegrationsLogsPostRequest): Observable<IntegrationLogsSuccessResponse>
    integrationsLogsPost({ integrationLogsRequest }: IntegrationsLogsPostRequest, opts?: OperationOpts): Observable<AjaxResponse<IntegrationLogsSuccessResponse>>
    integrationsLogsPost({ integrationLogsRequest }: IntegrationsLogsPostRequest, opts?: OperationOpts): Observable<IntegrationLogsSuccessResponse | AjaxResponse<IntegrationLogsSuccessResponse>> {
        throwIfNullOrUndefined(integrationLogsRequest, 'integrationLogsRequest', 'integrationsLogsPost');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('pinterest_oauth2', ['ads:write'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        return this.request<IntegrationLogsSuccessResponse>({
            url: '/integrations/logs',
            method: 'POST',
            headers,
            body: integrationLogsRequest,
        }, opts?.responseOpts);
    };

}
