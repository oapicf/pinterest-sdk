// tslint:disable
/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders, HttpQuery } from '../runtime';
import type {
    CustomerList,
    CustomerListRequest,
    CustomerListUpdateRequest,
    CustomerListsList200Response,
} from '../models';

export interface CustomerListsCreateRequest {
    adAccountId: string;
    customerListRequest: CustomerListRequest;
}

export interface CustomerListsGetRequest {
    adAccountId: string;
    customerListId: string;
}

export interface CustomerListsListRequest {
    adAccountId: string;
    pageSize?: number;
    order?: CustomerListsListOrderEnum;
    bookmark?: string;
}

export interface CustomerListsUpdateRequest {
    adAccountId: string;
    customerListId: string;
    customerListUpdateRequest: CustomerListUpdateRequest;
}

/**
 * no description
 */
export class CustomerListsApi extends BaseAPI {

    /**
     * <p>Create a customer list from your records(hashed or plain-text email addresses, or hashed MAIDs or IDFAs).</p> <p>A customer list is one of the four types of Pinterest audiences: for more information, see <a href=\"https://help.pinterest.com/en/business/article/audience-targeting\" target=\"_blank\">Audience targeting</a> or the <a href=\"/docs/api-features/targeting-overview/\" target=\"_blank\">Audiences</a> section of the ads management guide.<p/>  <p><b>Please review our <u><a href=\"https://help.pinterest.com/en/business/article/audience-targeting#section-13341\" target=\"_blank\">requirements</a></u> for what type of information is allowed when uploading a customer list.</b></p> <p>When you create a customer list, the system scans the list for existing Pinterest accounts; the list must include at least 100 Pinterest accounts. Your original list will be deleted when the matching process is complete. The filtered list – containing only the Pinterest accounts that were included in your starting list – is what will be used to create the audience.</p> <p>Note that once you have created your customer list, you must convert it into an audience (of the “ CUSTOMER_LIST” type) using the <a href=\"#operation/create_audience_handler\">create audience endpoint</a> before it can be used.</p>
     * Create customer lists
     */
    customerListsCreate({ adAccountId, customerListRequest }: CustomerListsCreateRequest): Observable<CustomerList>
    customerListsCreate({ adAccountId, customerListRequest }: CustomerListsCreateRequest, opts?: OperationOpts): Observable<AjaxResponse<CustomerList>>
    customerListsCreate({ adAccountId, customerListRequest }: CustomerListsCreateRequest, opts?: OperationOpts): Observable<CustomerList | AjaxResponse<CustomerList>> {
        throwIfNullOrUndefined(adAccountId, 'adAccountId', 'customerListsCreate');
        throwIfNullOrUndefined(customerListRequest, 'customerListRequest', 'customerListsCreate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('pinterest_oauth2', ['ads:write'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        return this.request<CustomerList>({
            url: '/ad_accounts/{ad_account_id}/customer_lists'.replace('{ad_account_id}', encodeURI(adAccountId)),
            method: 'POST',
            headers,
            body: customerListRequest,
        }, opts?.responseOpts);
    };

    /**
     * Gets a specific customer list given the customer list ID.
     * Get customer list
     */
    customerListsGet({ adAccountId, customerListId }: CustomerListsGetRequest): Observable<CustomerList>
    customerListsGet({ adAccountId, customerListId }: CustomerListsGetRequest, opts?: OperationOpts): Observable<AjaxResponse<CustomerList>>
    customerListsGet({ adAccountId, customerListId }: CustomerListsGetRequest, opts?: OperationOpts): Observable<CustomerList | AjaxResponse<CustomerList>> {
        throwIfNullOrUndefined(adAccountId, 'adAccountId', 'customerListsGet');
        throwIfNullOrUndefined(customerListId, 'customerListId', 'customerListsGet');

        const headers: HttpHeaders = {
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('pinterest_oauth2', ['ads:read'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        return this.request<CustomerList>({
            url: '/ad_accounts/{ad_account_id}/customer_lists/{customer_list_id}'.replace('{ad_account_id}', encodeURI(adAccountId)).replace('{customer_list_id}', encodeURI(customerListId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * <p>Get a set of customer lists including id and name based on the filters provided.</p> <p>(Customer lists are a type of audience.) For more information, see <a href=\"https://help.pinterest.com/en/business/article/audience-targeting\" target=\"_blank\">Audience targeting</a>  or the <a href=\"/docs/api-features/targeting-overview/\" target=\"_blank\">Audiences</a> section of the ads management guide.</p>
     * Get customer lists
     */
    customerListsList({ adAccountId, pageSize, order, bookmark }: CustomerListsListRequest): Observable<CustomerListsList200Response>
    customerListsList({ adAccountId, pageSize, order, bookmark }: CustomerListsListRequest, opts?: OperationOpts): Observable<AjaxResponse<CustomerListsList200Response>>
    customerListsList({ adAccountId, pageSize, order, bookmark }: CustomerListsListRequest, opts?: OperationOpts): Observable<CustomerListsList200Response | AjaxResponse<CustomerListsList200Response>> {
        throwIfNullOrUndefined(adAccountId, 'adAccountId', 'customerListsList');

        const headers: HttpHeaders = {
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('pinterest_oauth2', ['ads:read'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        const query: HttpQuery = {};

        if (pageSize != null) { query['page_size'] = pageSize; }
        if (order != null) { query['order'] = order; }
        if (bookmark != null) { query['bookmark'] = bookmark; }

        return this.request<CustomerListsList200Response>({
            url: '/ad_accounts/{ad_account_id}/customer_lists'.replace('{ad_account_id}', encodeURI(adAccountId)),
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * <p>Append or remove records to/from an existing customer list. (A customer list is one of the four types of Pinterest audiences.)</p> <p>When you add records to an existing customer list, the system scans the additions for existing Pinterest accounts; those are the records that will be added to your “CUSTOMER_LIST” audience. Your original list of records  to add will be deleted when the matching process is complete.</p> <p>For more information, see <a href=\"https://help.pinterest.com/en/business/article/audience-targeting\" target=\"_blank\">Audience targeting</a> or the <a href=\"/docs/api-features/targeting-overview/\" target=\"_blank\">Audiences</a> section of the ads management guide.</p>
     * Update customer list
     */
    customerListsUpdate({ adAccountId, customerListId, customerListUpdateRequest }: CustomerListsUpdateRequest): Observable<CustomerList>
    customerListsUpdate({ adAccountId, customerListId, customerListUpdateRequest }: CustomerListsUpdateRequest, opts?: OperationOpts): Observable<AjaxResponse<CustomerList>>
    customerListsUpdate({ adAccountId, customerListId, customerListUpdateRequest }: CustomerListsUpdateRequest, opts?: OperationOpts): Observable<CustomerList | AjaxResponse<CustomerList>> {
        throwIfNullOrUndefined(adAccountId, 'adAccountId', 'customerListsUpdate');
        throwIfNullOrUndefined(customerListId, 'customerListId', 'customerListsUpdate');
        throwIfNullOrUndefined(customerListUpdateRequest, 'customerListUpdateRequest', 'customerListsUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('pinterest_oauth2', ['ads:write'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        return this.request<CustomerList>({
            url: '/ad_accounts/{ad_account_id}/customer_lists/{customer_list_id}'.replace('{ad_account_id}', encodeURI(adAccountId)).replace('{customer_list_id}', encodeURI(customerListId)),
            method: 'PATCH',
            headers,
            body: customerListUpdateRequest,
        }, opts?.responseOpts);
    };

}

/**
 * @export
 * @enum {string}
 */
export enum CustomerListsListOrderEnum {
    Ascending = 'ASCENDING',
    Descending = 'DESCENDING'
}
