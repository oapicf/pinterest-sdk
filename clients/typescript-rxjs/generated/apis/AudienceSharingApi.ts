// tslint:disable
/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders, HttpQuery } from '../runtime';
import type {
    AdAccountsAudiencesSharedAccountsList200Response,
    AudienceAccountType,
    AudiencesList200Response,
    BusinessSharedAudience,
    BusinessSharedAudienceResponse,
    SharedAudience,
    SharedAudienceResponse,
} from '../models';

export interface AdAccountsAudiencesSharedAccountsListRequest {
    adAccountId: string;
    audienceId: string;
    accountType: AudienceAccountType;
    pageSize?: number;
    bookmark?: string;
}

export interface BusinessAccountAudiencesSharedAccountsListRequest {
    businessId: string;
    audienceId: string;
    accountType: AudienceAccountType;
    pageSize?: number;
    bookmark?: string;
}

export interface SharedAudiencesForBusinessListRequest {
    businessId: string;
    bookmark?: string;
    order?: SharedAudiencesForBusinessListOrderEnum;
    pageSize?: number;
}

export interface UpdateAdAccountToAdAccountSharedAudienceRequest {
    adAccountId: string;
    sharedAudience: SharedAudience;
}

export interface UpdateAdAccountToBusinessSharedAudienceRequest {
    adAccountId: string;
    businessSharedAudience: BusinessSharedAudience;
}

export interface UpdateBusinessToAdAccountSharedAudienceRequest {
    businessId: string;
    sharedAudience: SharedAudience;
}

export interface UpdateBusinessToBusinessSharedAudienceRequest {
    businessId: string;
    businessSharedAudience: BusinessSharedAudience;
}

/**
 * no description
 */
export class AudienceSharingApi extends BaseAPI {

    /**
     * List all ad accounts and/or businesses that have access to a specific audience. The audience must be owned by the requesting ad account.
     * List accounts with access to an audience owned by an ad account
     */
    adAccountsAudiencesSharedAccountsList({ adAccountId, audienceId, accountType, pageSize, bookmark }: AdAccountsAudiencesSharedAccountsListRequest): Observable<AdAccountsAudiencesSharedAccountsList200Response>
    adAccountsAudiencesSharedAccountsList({ adAccountId, audienceId, accountType, pageSize, bookmark }: AdAccountsAudiencesSharedAccountsListRequest, opts?: OperationOpts): Observable<AjaxResponse<AdAccountsAudiencesSharedAccountsList200Response>>
    adAccountsAudiencesSharedAccountsList({ adAccountId, audienceId, accountType, pageSize, bookmark }: AdAccountsAudiencesSharedAccountsListRequest, opts?: OperationOpts): Observable<AdAccountsAudiencesSharedAccountsList200Response | AjaxResponse<AdAccountsAudiencesSharedAccountsList200Response>> {
        throwIfNullOrUndefined(adAccountId, 'adAccountId', 'adAccountsAudiencesSharedAccountsList');
        throwIfNullOrUndefined(audienceId, 'audienceId', 'adAccountsAudiencesSharedAccountsList');
        throwIfNullOrUndefined(accountType, 'accountType', 'adAccountsAudiencesSharedAccountsList');

        const headers: HttpHeaders = {
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('pinterest_oauth2', ['ads:read'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'audience_id': audienceId,
            'account_type': accountType,
        };

        if (pageSize != null) { query['page_size'] = pageSize; }
        if (bookmark != null) { query['bookmark'] = bookmark; }

        return this.request<AdAccountsAudiencesSharedAccountsList200Response>({
            url: '/ad_accounts/{ad_account_id}/audiences/shared/accounts'.replace('{ad_account_id}', encodeURI(adAccountId)),
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * List all ad accounts and/or businesses that have access to a specific audience. The audience must either be owned by an ad account in the requesting business, or it must have been shared with the requesting business. If the requesting business is not the owner of the audience, only ad accounts owned by the requesting business will be returned.
     * List accounts with access to an audience owned by a business
     */
    businessAccountAudiencesSharedAccountsList({ businessId, audienceId, accountType, pageSize, bookmark }: BusinessAccountAudiencesSharedAccountsListRequest): Observable<AdAccountsAudiencesSharedAccountsList200Response>
    businessAccountAudiencesSharedAccountsList({ businessId, audienceId, accountType, pageSize, bookmark }: BusinessAccountAudiencesSharedAccountsListRequest, opts?: OperationOpts): Observable<AjaxResponse<AdAccountsAudiencesSharedAccountsList200Response>>
    businessAccountAudiencesSharedAccountsList({ businessId, audienceId, accountType, pageSize, bookmark }: BusinessAccountAudiencesSharedAccountsListRequest, opts?: OperationOpts): Observable<AdAccountsAudiencesSharedAccountsList200Response | AjaxResponse<AdAccountsAudiencesSharedAccountsList200Response>> {
        throwIfNullOrUndefined(businessId, 'businessId', 'businessAccountAudiencesSharedAccountsList');
        throwIfNullOrUndefined(audienceId, 'audienceId', 'businessAccountAudiencesSharedAccountsList');
        throwIfNullOrUndefined(accountType, 'accountType', 'businessAccountAudiencesSharedAccountsList');

        const headers: HttpHeaders = {
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('pinterest_oauth2', ['biz_access:read'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'audience_id': audienceId,
            'account_type': accountType,
        };

        if (pageSize != null) { query['page_size'] = pageSize; }
        if (bookmark != null) { query['bookmark'] = bookmark; }

        return this.request<AdAccountsAudiencesSharedAccountsList200Response>({
            url: '/businesses/{business_id}/audiences/shared/accounts'.replace('{business_id}', encodeURI(businessId)),
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Get a list of received audiences for the given business.
     * List received audiences for a business
     */
    sharedAudiencesForBusinessList({ businessId, bookmark, order, pageSize }: SharedAudiencesForBusinessListRequest): Observable<AudiencesList200Response>
    sharedAudiencesForBusinessList({ businessId, bookmark, order, pageSize }: SharedAudiencesForBusinessListRequest, opts?: OperationOpts): Observable<AjaxResponse<AudiencesList200Response>>
    sharedAudiencesForBusinessList({ businessId, bookmark, order, pageSize }: SharedAudiencesForBusinessListRequest, opts?: OperationOpts): Observable<AudiencesList200Response | AjaxResponse<AudiencesList200Response>> {
        throwIfNullOrUndefined(businessId, 'businessId', 'sharedAudiencesForBusinessList');

        const headers: HttpHeaders = {
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('pinterest_oauth2', ['biz_access:read'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        const query: HttpQuery = {};

        if (bookmark != null) { query['bookmark'] = bookmark; }
        if (order != null) { query['order'] = order; }
        if (pageSize != null) { query['page_size'] = pageSize; }

        return this.request<AudiencesList200Response>({
            url: '/businesses/{business_id}/audiences'.replace('{business_id}', encodeURI(businessId)),
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * From an ad account, share a specific audience with another ad account, or revoke access to a previously shared audience. Only the audience owner account can share the audience. The recipient ad account(s) must be in the same <a href=\'https://help.pinterest.com/en/business/article/create-and-manage-accounts\'>Pinterest Business Hierarchy</a> as the business owner of the ad account.<br> This endpoint is not available to all apps.<a href=\'/docs/getting-started/beta-and-advanced-access/\'>Learn more</a>.
     * Update audience sharing between ad accounts
     */
    updateAdAccountToAdAccountSharedAudience({ adAccountId, sharedAudience }: UpdateAdAccountToAdAccountSharedAudienceRequest): Observable<SharedAudienceResponse>
    updateAdAccountToAdAccountSharedAudience({ adAccountId, sharedAudience }: UpdateAdAccountToAdAccountSharedAudienceRequest, opts?: OperationOpts): Observable<AjaxResponse<SharedAudienceResponse>>
    updateAdAccountToAdAccountSharedAudience({ adAccountId, sharedAudience }: UpdateAdAccountToAdAccountSharedAudienceRequest, opts?: OperationOpts): Observable<SharedAudienceResponse | AjaxResponse<SharedAudienceResponse>> {
        throwIfNullOrUndefined(adAccountId, 'adAccountId', 'updateAdAccountToAdAccountSharedAudience');
        throwIfNullOrUndefined(sharedAudience, 'sharedAudience', 'updateAdAccountToAdAccountSharedAudience');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('pinterest_oauth2', ['ads:write'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        return this.request<SharedAudienceResponse>({
            url: '/ad_accounts/{ad_account_id}/audiences/ad_accounts/shared'.replace('{ad_account_id}', encodeURI(adAccountId)),
            method: 'PATCH',
            headers,
            body: sharedAudience,
        }, opts?.responseOpts);
    };

    /**
     * From an ad account, share a specific audience with a business account, or revoke access to a previously shared audience. Only the audience owner account can share the audience. The recipient business account must be in the same business hierarchy as the business owner of the ad account.<br> This endpoint is not available to all apps.<a href=\'/docs/getting-started/beta-and-advanced-access/\'>Learn more</a>.
     * Update audience sharing from an ad account to businesses
     */
    updateAdAccountToBusinessSharedAudience({ adAccountId, businessSharedAudience }: UpdateAdAccountToBusinessSharedAudienceRequest): Observable<BusinessSharedAudienceResponse>
    updateAdAccountToBusinessSharedAudience({ adAccountId, businessSharedAudience }: UpdateAdAccountToBusinessSharedAudienceRequest, opts?: OperationOpts): Observable<AjaxResponse<BusinessSharedAudienceResponse>>
    updateAdAccountToBusinessSharedAudience({ adAccountId, businessSharedAudience }: UpdateAdAccountToBusinessSharedAudienceRequest, opts?: OperationOpts): Observable<BusinessSharedAudienceResponse | AjaxResponse<BusinessSharedAudienceResponse>> {
        throwIfNullOrUndefined(adAccountId, 'adAccountId', 'updateAdAccountToBusinessSharedAudience');
        throwIfNullOrUndefined(businessSharedAudience, 'businessSharedAudience', 'updateAdAccountToBusinessSharedAudience');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('pinterest_oauth2', ['ads:write'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        return this.request<BusinessSharedAudienceResponse>({
            url: '/ad_accounts/{ad_account_id}/audiences/businesses/shared'.replace('{ad_account_id}', encodeURI(adAccountId)),
            method: 'PATCH',
            headers,
            body: businessSharedAudience,
        }, opts?.responseOpts);
    };

    /**
     * From a business, share a specific audience with other ad account(s), or revoke access to a previously shared audience. <ul> <li>If the business is the owner of the audience, it can share with any ad account within the same business hierarchy.</li> <li>If the business is the recipient of the audience, it can share with any of its owned ad accounts.</li> </ul> This endpoint is not available to all apps.<a href=\'/docs/getting-started/beta-and-advanced-access/\'>Learn more</a>.
     * Update audience sharing from a business to ad accounts
     */
    updateBusinessToAdAccountSharedAudience({ businessId, sharedAudience }: UpdateBusinessToAdAccountSharedAudienceRequest): Observable<SharedAudienceResponse>
    updateBusinessToAdAccountSharedAudience({ businessId, sharedAudience }: UpdateBusinessToAdAccountSharedAudienceRequest, opts?: OperationOpts): Observable<AjaxResponse<SharedAudienceResponse>>
    updateBusinessToAdAccountSharedAudience({ businessId, sharedAudience }: UpdateBusinessToAdAccountSharedAudienceRequest, opts?: OperationOpts): Observable<SharedAudienceResponse | AjaxResponse<SharedAudienceResponse>> {
        throwIfNullOrUndefined(businessId, 'businessId', 'updateBusinessToAdAccountSharedAudience');
        throwIfNullOrUndefined(sharedAudience, 'sharedAudience', 'updateBusinessToAdAccountSharedAudience');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('pinterest_oauth2', ['biz_access:write'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        return this.request<SharedAudienceResponse>({
            url: '/businesses/{business_id}/audiences/ad_accounts/shared'.replace('{business_id}', encodeURI(businessId)),
            method: 'PATCH',
            headers,
            body: sharedAudience,
        }, opts?.responseOpts);
    };

    /**
     * From a business, share a specific audience with another business account, or revoke access to a previously shared audience. Only the audience owner can share the audience with other businesses, and the recipient business must be within the same business hierarchy.<br> This endpoint is not available to all apps.<a href=\'/docs/getting-started/beta-and-advanced-access/\'>Learn more</a>.
     * Update audience sharing between businesses
     */
    updateBusinessToBusinessSharedAudience({ businessId, businessSharedAudience }: UpdateBusinessToBusinessSharedAudienceRequest): Observable<BusinessSharedAudienceResponse>
    updateBusinessToBusinessSharedAudience({ businessId, businessSharedAudience }: UpdateBusinessToBusinessSharedAudienceRequest, opts?: OperationOpts): Observable<AjaxResponse<BusinessSharedAudienceResponse>>
    updateBusinessToBusinessSharedAudience({ businessId, businessSharedAudience }: UpdateBusinessToBusinessSharedAudienceRequest, opts?: OperationOpts): Observable<BusinessSharedAudienceResponse | AjaxResponse<BusinessSharedAudienceResponse>> {
        throwIfNullOrUndefined(businessId, 'businessId', 'updateBusinessToBusinessSharedAudience');
        throwIfNullOrUndefined(businessSharedAudience, 'businessSharedAudience', 'updateBusinessToBusinessSharedAudience');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('pinterest_oauth2', ['biz_access:write'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        return this.request<BusinessSharedAudienceResponse>({
            url: '/businesses/{business_id}/audiences/businesses/shared'.replace('{business_id}', encodeURI(businessId)),
            method: 'PATCH',
            headers,
            body: businessSharedAudience,
        }, opts?.responseOpts);
    };

}

/**
 * @export
 * @enum {string}
 */
export enum SharedAudiencesForBusinessListOrderEnum {
    Ascending = 'ASCENDING',
    Descending = 'DESCENDING'
}
