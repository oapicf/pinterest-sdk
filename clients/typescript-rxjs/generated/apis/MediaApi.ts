// tslint:disable
/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders, HttpQuery } from '../runtime';
import type {
    MediaList200Response,
    MediaUpload,
    MediaUploadDetails,
    MediaUploadRequest,
} from '../models';

export interface MediaCreateRequest {
    mediaUploadRequest: MediaUploadRequest;
}

export interface MediaGetRequest {
    mediaId: string;
}

export interface MediaListRequest {
    bookmark?: string;
    pageSize?: number;
}

/**
 * no description
 */
export class MediaApi extends BaseAPI {

    /**
     * Register your intent to upload media  The response includes all of the information needed to upload the media to Pinterest.  To upload the media, make an HTTP POST request (using <tt>curl</tt>, for example) to <tt>upload_url</tt> using the <tt>Content-Type</tt> header value. Send the media file\'s contents as the request\'s <tt>file</tt> parameter and also include all of the parameters from <tt>upload_parameters</tt>.  <strong><a href=\'/docs/api-features/creating-boards-and-pins/#creating-video-pins\'>Learn more</a></strong> about video Pin creation.
     * Register media upload
     */
    mediaCreate({ mediaUploadRequest }: MediaCreateRequest): Observable<MediaUpload>
    mediaCreate({ mediaUploadRequest }: MediaCreateRequest, opts?: OperationOpts): Observable<AjaxResponse<MediaUpload>>
    mediaCreate({ mediaUploadRequest }: MediaCreateRequest, opts?: OperationOpts): Observable<MediaUpload | AjaxResponse<MediaUpload>> {
        throwIfNullOrUndefined(mediaUploadRequest, 'mediaUploadRequest', 'mediaCreate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('pinterest_oauth2', ['pins:read', 'pins:write'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        return this.request<MediaUpload>({
            url: '/media',
            method: 'POST',
            headers,
            body: mediaUploadRequest,
        }, opts?.responseOpts);
    };

    /**
     * Get details for a registered media upload, including its current status.  <strong><a href=\'/docs/api-features/creating-boards-and-pins/#creating-video-pins\'>Learn more</a></strong> about video Pin creation.
     * Get media upload details
     */
    mediaGet({ mediaId }: MediaGetRequest): Observable<MediaUploadDetails>
    mediaGet({ mediaId }: MediaGetRequest, opts?: OperationOpts): Observable<AjaxResponse<MediaUploadDetails>>
    mediaGet({ mediaId }: MediaGetRequest, opts?: OperationOpts): Observable<MediaUploadDetails | AjaxResponse<MediaUploadDetails>> {
        throwIfNullOrUndefined(mediaId, 'mediaId', 'mediaGet');

        const headers: HttpHeaders = {
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('pinterest_oauth2', ['pins:read'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        return this.request<MediaUploadDetails>({
            url: '/media/{media_id}'.replace('{media_id}', encodeURI(mediaId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * List media uploads filtered by given parameters.  <strong><a href=\'/docs/api-features/creating-boards-and-pins/#creating-video-pins\'>Learn more</a></strong> about video Pin creation.
     * List media uploads
     */
    mediaList({ bookmark, pageSize }: MediaListRequest): Observable<MediaList200Response>
    mediaList({ bookmark, pageSize }: MediaListRequest, opts?: OperationOpts): Observable<AjaxResponse<MediaList200Response>>
    mediaList({ bookmark, pageSize }: MediaListRequest, opts?: OperationOpts): Observable<MediaList200Response | AjaxResponse<MediaList200Response>> {

        const headers: HttpHeaders = {
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('pinterest_oauth2', ['pins:read'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        const query: HttpQuery = {};

        if (bookmark != null) { query['bookmark'] = bookmark; }
        if (pageSize != null) { query['page_size'] = pageSize; }

        return this.request<MediaList200Response>({
            url: '/media',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

}
