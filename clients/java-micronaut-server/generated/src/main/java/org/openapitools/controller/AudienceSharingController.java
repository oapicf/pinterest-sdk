/*
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.controller;

import io.micronaut.http.annotation.*;
import io.micronaut.core.annotation.Nullable;
import io.micronaut.core.convert.format.Format;
import io.micronaut.security.annotation.Secured;
import io.micronaut.security.rules.SecurityRule;
import reactor.core.publisher.Mono;
import io.micronaut.http.HttpStatus;
import io.micronaut.http.exceptions.HttpStatusException;
import org.openapitools.model.AdAccountsAudiencesSharedAccountsList200Response;
import org.openapitools.model.AudienceAccountType;
import org.openapitools.model.AudiencesList200Response;
import org.openapitools.model.BusinessSharedAudience;
import org.openapitools.model.BusinessSharedAudienceResponse;
import org.openapitools.model.Error;
import org.openapitools.model.SharedAudience;
import org.openapitools.model.SharedAudienceResponse;
import javax.annotation.Generated;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;

@Generated(value="org.openapitools.codegen.languages.JavaMicronautServerCodegen", date="2024-11-05T02:03:37.829873561Z[Etc/UTC]", comments = "Generator version: 7.9.0")
@Controller
@Tag(name = "AudienceSharing", description = "The AudienceSharing API")
public class AudienceSharingController {
    /**
     * List accounts with access to an audience owned by an ad account
     * List all ad accounts and/or businesses that have access to a specific audience. The audience must be owned by the requesting ad account.
     *
     * @param adAccountId Unique identifier of an ad account. (required)
     * @param audienceId Unique identifier of the audience to use to filter the results. (required)
     * @param accountType Filter accounts by account type. (required)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @return AdAccountsAudiencesSharedAccountsList200Response
     */
    @Operation(
        operationId = "adAccountsAudiencesSharedAccountsList",
        summary = "List accounts with access to an audience owned by an ad account",
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AdAccountsAudiencesSharedAccountsList200Response.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid ad account audiences shared accounts parameters.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Shared accounts not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "0", description = "Unexpected error.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        parameters = {
            @Parameter(name = "adAccountId", description = "Unique identifier of an ad account.", required = true),
            @Parameter(name = "audienceId", description = "Unique identifier of the audience to use to filter the results.", required = true),
            @Parameter(name = "accountType", description = "Filter accounts by account type.", required = true),
            @Parameter(name = "pageSize", description = "Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/reference/pagination/'>Pagination</a> for more information."),
            @Parameter(name = "bookmark", description = "Cursor used to fetch the next page of items")
        },
        security = {
            @SecurityRequirement(name = "pinterest_oauth2", scopes = { "ads:read" })
        }
    )
    @Get(uri="/ad_accounts/{ad_account_id}/audiences/shared/accounts")
    @Produces(value = {"application/json"})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<AdAccountsAudiencesSharedAccountsList200Response> adAccountsAudiencesSharedAccountsList(
        @PathVariable(value="ad_account_id") @NotNull @Pattern(regexp="^\\d+$") @Size(max=18) String adAccountId, 
        @QueryValue(value="audience_id") @NotNull @Pattern(regexp="^\\d+$") @Size(max=18) String audienceId, 
        @QueryValue(value="account_type", defaultValue="AD_ACCOUNT") @NotNull AudienceAccountType accountType, 
        @QueryValue(value="page_size", defaultValue="25") @Nullable @Min(1) @Max(250) Integer pageSize, 
        @QueryValue(value="bookmark") @Nullable String bookmark
    ) {
        // TODO implement adAccountsAudiencesSharedAccountsList();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * List accounts with access to an audience owned by a business
     * List all ad accounts and/or businesses that have access to a specific audience. The audience must either be owned by an ad account in the requesting business, or it must have been shared with the requesting business. If the requesting business is not the owner of the audience, only ad accounts owned by the requesting business will be returned.
     *
     * @param businessId Unique identifier of the requesting business. (required)
     * @param audienceId Unique identifier of the audience to use to filter the results. (required)
     * @param accountType Filter accounts by account type. (required)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @return AdAccountsAudiencesSharedAccountsList200Response
     */
    @Operation(
        operationId = "businessAccountAudiencesSharedAccountsList",
        summary = "List accounts with access to an audience owned by a business",
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AdAccountsAudiencesSharedAccountsList200Response.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid business audiences shared accounts parameters.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Shared accounts not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "0", description = "Unexpected error.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        parameters = {
            @Parameter(name = "businessId", description = "Unique identifier of the requesting business.", required = true),
            @Parameter(name = "audienceId", description = "Unique identifier of the audience to use to filter the results.", required = true),
            @Parameter(name = "accountType", description = "Filter accounts by account type.", required = true),
            @Parameter(name = "pageSize", description = "Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/reference/pagination/'>Pagination</a> for more information."),
            @Parameter(name = "bookmark", description = "Cursor used to fetch the next page of items")
        },
        security = {
            @SecurityRequirement(name = "pinterest_oauth2", scopes = { "biz_access:read" })
        }
    )
    @Get(uri="/businesses/{business_id}/audiences/shared/accounts")
    @Produces(value = {"application/json"})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<AdAccountsAudiencesSharedAccountsList200Response> businessAccountAudiencesSharedAccountsList(
        @PathVariable(value="business_id") @NotNull @Pattern(regexp="^\\d+$") @Size(min=1, max=20) String businessId, 
        @QueryValue(value="audience_id") @NotNull @Pattern(regexp="^\\d+$") @Size(max=18) String audienceId, 
        @QueryValue(value="account_type", defaultValue="AD_ACCOUNT") @NotNull AudienceAccountType accountType, 
        @QueryValue(value="page_size", defaultValue="25") @Nullable @Min(1) @Max(250) Integer pageSize, 
        @QueryValue(value="bookmark") @Nullable String bookmark
    ) {
        // TODO implement businessAccountAudiencesSharedAccountsList();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * List received audiences for a business
     * Get a list of received audiences for the given business.
     *
     * @param businessId Unique identifier of the requesting business. (required)
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @param order The order in which to sort the items returned: “ASCENDING” or “DESCENDING” by ID. Note that higher-value IDs are associated with more-recently added items. (optional)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @return AudiencesList200Response
     */
    @Operation(
        operationId = "sharedAudiencesForBusinessList",
        summary = "List received audiences for a business",
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AudiencesList200Response.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid parameters.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "0", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        parameters = {
            @Parameter(name = "businessId", description = "Unique identifier of the requesting business.", required = true),
            @Parameter(name = "bookmark", description = "Cursor used to fetch the next page of items"),
            @Parameter(name = "order", description = "The order in which to sort the items returned: “ASCENDING” or “DESCENDING” by ID. Note that higher-value IDs are associated with more-recently added items."),
            @Parameter(name = "pageSize", description = "Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/reference/pagination/'>Pagination</a> for more information.")
        },
        security = {
            @SecurityRequirement(name = "pinterest_oauth2", scopes = { "biz_access:read" })
        }
    )
    @Get(uri="/businesses/{business_id}/audiences")
    @Produces(value = {"application/json"})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<AudiencesList200Response> sharedAudiencesForBusinessList(
        @PathVariable(value="business_id") @NotNull @Pattern(regexp="^\\d+$") @Size(min=1, max=20) String businessId, 
        @QueryValue(value="bookmark") @Nullable String bookmark, 
        @QueryValue(value="order") @Nullable String order, 
        @QueryValue(value="page_size", defaultValue="25") @Nullable @Min(1) @Max(250) Integer pageSize
    ) {
        // TODO implement sharedAudiencesForBusinessList();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Update audience sharing between ad accounts
     * From an ad account, share a specific audience with another ad account, or revoke access to a previously shared audience. Only the audience owner account can share the audience. The recipient ad account(s) must be in the same &lt;a href&#x3D;&#39;https://help.pinterest.com/en/business/article/create-and-manage-accounts&#39;&gt;Pinterest Business Hierarchy&lt;/a&gt; as the business owner of the ad account.&lt;br&gt; This endpoint is not available to all apps.&lt;a href&#x3D;&#39;/docs/getting-started/beta-and-advanced-access/&#39;&gt;Learn more&lt;/a&gt;.
     *
     * @param adAccountId Unique identifier of an ad account. (required)
     * @param sharedAudience  (required)
     * @return SharedAudienceResponse
     */
    @Operation(
        operationId = "updateAdAccountToAdAccountSharedAudience",
        summary = "Update audience sharing between ad accounts",
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SharedAudienceResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid ad account id.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "0", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        parameters = {
            @Parameter(name = "adAccountId", description = "Unique identifier of an ad account.", required = true),
            @Parameter(name = "sharedAudience", required = true)
        },
        security = {
            @SecurityRequirement(name = "pinterest_oauth2", scopes = { "ads:write" })
        }
    )
    @Patch(uri="/ad_accounts/{ad_account_id}/audiences/ad_accounts/shared")
    @Produces(value = {"application/json"})
    @Consumes(value = {"application/json"})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<SharedAudienceResponse> updateAdAccountToAdAccountSharedAudience(
        @PathVariable(value="ad_account_id") @NotNull @Pattern(regexp="^\\d+$") @Size(max=18) String adAccountId, 
        @Body @NotNull @Valid SharedAudience sharedAudience
    ) {
        // TODO implement updateAdAccountToAdAccountSharedAudience();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Update audience sharing from an ad account to businesses
     * From an ad account, share a specific audience with a business account, or revoke access to a previously shared audience. Only the audience owner account can share the audience. The recipient business account must be in the same business hierarchy as the business owner of the ad account.&lt;br&gt; This endpoint is not available to all apps.&lt;a href&#x3D;&#39;/docs/getting-started/beta-and-advanced-access/&#39;&gt;Learn more&lt;/a&gt;.
     *
     * @param adAccountId Unique identifier of an ad account. (required)
     * @param businessSharedAudience  (required)
     * @return BusinessSharedAudienceResponse
     */
    @Operation(
        operationId = "updateAdAccountToBusinessSharedAudience",
        summary = "Update audience sharing from an ad account to businesses",
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BusinessSharedAudienceResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid ad account id.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "0", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        parameters = {
            @Parameter(name = "adAccountId", description = "Unique identifier of an ad account.", required = true),
            @Parameter(name = "businessSharedAudience", required = true)
        },
        security = {
            @SecurityRequirement(name = "pinterest_oauth2", scopes = { "ads:write" })
        }
    )
    @Patch(uri="/ad_accounts/{ad_account_id}/audiences/businesses/shared")
    @Produces(value = {"application/json"})
    @Consumes(value = {"application/json"})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<BusinessSharedAudienceResponse> updateAdAccountToBusinessSharedAudience(
        @PathVariable(value="ad_account_id") @NotNull @Pattern(regexp="^\\d+$") @Size(max=18) String adAccountId, 
        @Body @NotNull @Valid BusinessSharedAudience businessSharedAudience
    ) {
        // TODO implement updateAdAccountToBusinessSharedAudience();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Update audience sharing from a business to ad accounts
     * From a business, share a specific audience with other ad account(s), or revoke access to a previously shared audience. &lt;ul&gt; &lt;li&gt;If the business is the owner of the audience, it can share with any ad account within the same business hierarchy.&lt;/li&gt; &lt;li&gt;If the business is the recipient of the audience, it can share with any of its owned ad accounts.&lt;/li&gt; &lt;/ul&gt; This endpoint is not available to all apps.&lt;a href&#x3D;&#39;/docs/getting-started/beta-and-advanced-access/&#39;&gt;Learn more&lt;/a&gt;.
     *
     * @param businessId Unique identifier of the requesting business. (required)
     * @param sharedAudience  (required)
     * @return SharedAudienceResponse
     */
    @Operation(
        operationId = "updateBusinessToAdAccountSharedAudience",
        summary = "Update audience sharing from a business to ad accounts",
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SharedAudienceResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid parameters.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "0", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        parameters = {
            @Parameter(name = "businessId", description = "Unique identifier of the requesting business.", required = true),
            @Parameter(name = "sharedAudience", required = true)
        },
        security = {
            @SecurityRequirement(name = "pinterest_oauth2", scopes = { "biz_access:write" })
        }
    )
    @Patch(uri="/businesses/{business_id}/audiences/ad_accounts/shared")
    @Produces(value = {"application/json"})
    @Consumes(value = {"application/json"})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<SharedAudienceResponse> updateBusinessToAdAccountSharedAudience(
        @PathVariable(value="business_id") @NotNull @Pattern(regexp="^\\d+$") @Size(min=1, max=20) String businessId, 
        @Body @NotNull @Valid SharedAudience sharedAudience
    ) {
        // TODO implement updateBusinessToAdAccountSharedAudience();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Update audience sharing between businesses
     * From a business, share a specific audience with another business account, or revoke access to a previously shared audience. Only the audience owner can share the audience with other businesses, and the recipient business must be within the same business hierarchy.&lt;br&gt; This endpoint is not available to all apps.&lt;a href&#x3D;&#39;/docs/getting-started/beta-and-advanced-access/&#39;&gt;Learn more&lt;/a&gt;.
     *
     * @param businessId Unique identifier of the requesting business. (required)
     * @param businessSharedAudience  (required)
     * @return BusinessSharedAudienceResponse
     */
    @Operation(
        operationId = "updateBusinessToBusinessSharedAudience",
        summary = "Update audience sharing between businesses",
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BusinessSharedAudienceResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid parameters.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "0", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        parameters = {
            @Parameter(name = "businessId", description = "Unique identifier of the requesting business.", required = true),
            @Parameter(name = "businessSharedAudience", required = true)
        },
        security = {
            @SecurityRequirement(name = "pinterest_oauth2", scopes = { "biz_access:write" })
        }
    )
    @Patch(uri="/businesses/{business_id}/audiences/businesses/shared")
    @Produces(value = {"application/json"})
    @Consumes(value = {"application/json"})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<BusinessSharedAudienceResponse> updateBusinessToBusinessSharedAudience(
        @PathVariable(value="business_id") @NotNull @Pattern(regexp="^\\d+$") @Size(min=1, max=20) String businessId, 
        @Body @NotNull @Valid BusinessSharedAudience businessSharedAudience
    ) {
        // TODO implement updateBusinessToBusinessSharedAudience();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }

}
