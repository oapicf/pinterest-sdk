/*
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.*;

import javax.validation.constraints.*;
import javax.validation.Valid;
import io.micronaut.core.annotation.*;
import javax.annotation.Generated;
import io.swagger.v3.oas.annotations.media.Schema;

/**
 * BillingProfilesResponse
 */
@JsonPropertyOrder({
  BillingProfilesResponse.JSON_PROPERTY_ID,
  BillingProfilesResponse.JSON_PROPERTY_CARD_TYPE,
  BillingProfilesResponse.JSON_PROPERTY_STATUS,
  BillingProfilesResponse.JSON_PROPERTY_ADVERTISER_ID,
  BillingProfilesResponse.JSON_PROPERTY_PAYMENT_METHOD_BRAND
})
@JsonTypeName("BillingProfilesResponse")
@Generated(value="org.openapitools.codegen.languages.JavaMicronautServerCodegen", date="2024-11-05T02:03:37.829873561Z[Etc/UTC]", comments = "Generator version: 7.9.0")
@Introspected
public class BillingProfilesResponse {
    public static final String JSON_PROPERTY_ID = "id";
    private String id;

    /**
     * Type of the card.
     */
    public enum CardTypeEnum {
        UNKNOWN("UNKNOWN"),
        VISA("VISA"),
        MASTERCARD("MASTERCARD"),
        AMERICAN_EXPRESS("AMERICAN_EXPRESS"),
        DISCOVER("DISCOVER"),
        ELO("ELO");

        private String value;

        CardTypeEnum(String value) {
            this.value = value;
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        @JsonCreator
        public static CardTypeEnum fromValue(String value) {
            for (CardTypeEnum b : CardTypeEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }
    }
    public static final String JSON_PROPERTY_CARD_TYPE = "card_type";
    private CardTypeEnum cardType;

    /**
     * Status of the billing.
     */
    public enum StatusEnum {
        UNSPECIFIED("UNSPECIFIED"),
        VALID("VALID"),
        INVALID("INVALID"),
        PENDING("PENDING"),
        DELETED("DELETED"),
        SECONDARY("SECONDARY"),
        PENDING_SECONDARY("PENDING_SECONDARY");

        private String value;

        StatusEnum(String value) {
            this.value = value;
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        @JsonCreator
        public static StatusEnum fromValue(String value) {
            for (StatusEnum b : StatusEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }
    }
    public static final String JSON_PROPERTY_STATUS = "status";
    private StatusEnum status;

    public static final String JSON_PROPERTY_ADVERTISER_ID = "advertiser_id";
    private String advertiserId;

    /**
     * Brand of the payment method.
     */
    public enum PaymentMethodBrandEnum {
        UNKNOWN("UNKNOWN"),
        VISA("VISA"),
        MASTERCARD("MASTERCARD"),
        AMERICAN_EXPRESS("AMERICAN_EXPRESS"),
        DISCOVER("DISCOVER"),
        SOFORT("SOFORT"),
        DINERS_CLUB("DINERS_CLUB"),
        ELO("ELO"),
        CARTE_BANCAIRE("CARTE_BANCAIRE");

        private String value;

        PaymentMethodBrandEnum(String value) {
            this.value = value;
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        @JsonCreator
        public static PaymentMethodBrandEnum fromValue(String value) {
            for (PaymentMethodBrandEnum b : PaymentMethodBrandEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }
    }
    public static final String JSON_PROPERTY_PAYMENT_METHOD_BRAND = "payment_method_brand";
    private PaymentMethodBrandEnum paymentMethodBrand;

    public BillingProfilesResponse() {
    }

    public BillingProfilesResponse id(String id) {
        this.id = id;
        return this;
    }

    /**
     * Billing ID.
     * @return id
     */
    @Nullable
    @Pattern(regexp="^\\d+$")
    @Schema(name = "id", example = "12312451231", description = "Billing ID.", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
    @JsonProperty(JSON_PROPERTY_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getId() {
        return id;
    }

    @JsonProperty(JSON_PROPERTY_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setId(String id) {
        this.id = id;
    }

    public BillingProfilesResponse cardType(CardTypeEnum cardType) {
        this.cardType = cardType;
        return this;
    }

    /**
     * Type of the card.
     * @return cardType
     */
    @Nullable
    @Schema(name = "card_type", example = "VISA", description = "Type of the card.", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
    @JsonProperty(JSON_PROPERTY_CARD_TYPE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public CardTypeEnum getCardType() {
        return cardType;
    }

    @JsonProperty(JSON_PROPERTY_CARD_TYPE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setCardType(CardTypeEnum cardType) {
        this.cardType = cardType;
    }

    public BillingProfilesResponse status(StatusEnum status) {
        this.status = status;
        return this;
    }

    /**
     * Status of the billing.
     * @return status
     */
    @Nullable
    @Schema(name = "status", example = "INVALID", description = "Status of the billing.", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
    @JsonProperty(JSON_PROPERTY_STATUS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public StatusEnum getStatus() {
        return status;
    }

    @JsonProperty(JSON_PROPERTY_STATUS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setStatus(StatusEnum status) {
        this.status = status;
    }

    public BillingProfilesResponse advertiserId(String advertiserId) {
        this.advertiserId = advertiserId;
        return this;
    }

    /**
     * Advertiser ID of the billing.
     * @return advertiserId
     */
    @Nullable
    @Pattern(regexp="^\\d+$")
    @Schema(name = "advertiser_id", example = "12312451231", description = "Advertiser ID of the billing.", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
    @JsonProperty(JSON_PROPERTY_ADVERTISER_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getAdvertiserId() {
        return advertiserId;
    }

    @JsonProperty(JSON_PROPERTY_ADVERTISER_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setAdvertiserId(String advertiserId) {
        this.advertiserId = advertiserId;
    }

    public BillingProfilesResponse paymentMethodBrand(PaymentMethodBrandEnum paymentMethodBrand) {
        this.paymentMethodBrand = paymentMethodBrand;
        return this;
    }

    /**
     * Brand of the payment method.
     * @return paymentMethodBrand
     */
    @Nullable
    @Schema(name = "payment_method_brand", example = "VISA", description = "Brand of the payment method.", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
    @JsonProperty(JSON_PROPERTY_PAYMENT_METHOD_BRAND)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public PaymentMethodBrandEnum getPaymentMethodBrand() {
        return paymentMethodBrand;
    }

    @JsonProperty(JSON_PROPERTY_PAYMENT_METHOD_BRAND)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setPaymentMethodBrand(PaymentMethodBrandEnum paymentMethodBrand) {
        this.paymentMethodBrand = paymentMethodBrand;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        BillingProfilesResponse billingProfilesResponse = (BillingProfilesResponse) o;
        return Objects.equals(this.id, billingProfilesResponse.id) &&
            Objects.equals(this.cardType, billingProfilesResponse.cardType) &&
            Objects.equals(this.status, billingProfilesResponse.status) &&
            Objects.equals(this.advertiserId, billingProfilesResponse.advertiserId) &&
            Objects.equals(this.paymentMethodBrand, billingProfilesResponse.paymentMethodBrand);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id, cardType, status, advertiserId, paymentMethodBrand);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class BillingProfilesResponse {\n");
        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    cardType: ").append(toIndentedString(cardType)).append("\n");
        sb.append("    status: ").append(toIndentedString(status)).append("\n");
        sb.append("    advertiserId: ").append(toIndentedString(advertiserId)).append("\n");
        sb.append("    paymentMethodBrand: ").append(toIndentedString(paymentMethodBrand)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

