/*
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.controller;

import io.micronaut.http.annotation.*;
import io.micronaut.core.annotation.Nullable;
import io.micronaut.core.convert.format.Format;
import io.micronaut.security.annotation.Secured;
import io.micronaut.security.rules.SecurityRule;
import reactor.core.publisher.Mono;
import io.micronaut.http.HttpStatus;
import io.micronaut.http.exceptions.HttpStatusException;
import org.openapitools.model.Board;
import org.openapitools.model.BoardSection;
import org.openapitools.model.BoardSectionsList200Response;
import org.openapitools.model.BoardUpdate;
import org.openapitools.model.BoardsList200Response;
import org.openapitools.model.BoardsListPins200Response;
import org.openapitools.model.Error;
import javax.annotation.Generated;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;

@Generated(value="org.openapitools.codegen.languages.JavaMicronautServerCodegen", date="2024-11-05T02:03:37.829873561Z[Etc/UTC]", comments = "Generator version: 7.9.0")
@Controller
@Tag(name = "Boards", description = "The Boards API")
public class BoardsController {
    /**
     * Create board section
     * Create a board section on a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
     *
     * @param boardId Unique identifier of a board. (required)
     * @param boardSection Create a board section. (required)
     * @param adAccountId Unique identifier of an ad account. (optional)
     * @return BoardSection
     */
    @Operation(
        operationId = "boardSectionsCreate",
        summary = "Create board section",
        responses = {
            @ApiResponse(responseCode = "201", description = "response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BoardSection.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid board section parameters.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Not authorized to create board sections.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "409", description = "Could not get exclusive access to the board to create a new section.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "500", description = "Could not create a new board section.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "0", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        parameters = {
            @Parameter(name = "boardId", description = "Unique identifier of a board.", required = true),
            @Parameter(name = "boardSection", description = "Create a board section.", required = true),
            @Parameter(name = "adAccountId", description = "Unique identifier of an ad account.")
        },
        security = {
            @SecurityRequirement(name = "pinterest_oauth2", scopes = { "boards:read", "boards:write" })
        }
    )
    @Post(uri="/boards/{board_id}/sections")
    @Produces(value = {"application/json"})
    @Consumes(value = {"application/json"})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<BoardSection> boardSectionsCreate(
        @PathVariable(value="board_id") @NotNull @Pattern(regexp="^\\d+$") String boardId, 
        @Body @NotNull @Valid BoardSection boardSection, 
        @QueryValue(value="ad_account_id") @Nullable @Pattern(regexp="^\\d+$") @Size(max=18) String adAccountId
    ) {
        // TODO implement boardSectionsCreate();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Delete board section
     * Delete a board section on a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
     *
     * @param boardId Unique identifier of a board. (required)
     * @param sectionId Unique identifier of a board section. (required)
     * @param adAccountId Unique identifier of an ad account. (optional)
     */
    @Operation(
        operationId = "boardSectionsDelete",
        summary = "Delete board section",
        responses = {
            @ApiResponse(responseCode = "204", description = "Board section deleted successfully"),
            @ApiResponse(responseCode = "403", description = "Not authorized to delete board section.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Board section not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "409", description = "Board section conflict.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "0", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        parameters = {
            @Parameter(name = "boardId", description = "Unique identifier of a board.", required = true),
            @Parameter(name = "sectionId", description = "Unique identifier of a board section.", required = true),
            @Parameter(name = "adAccountId", description = "Unique identifier of an ad account.")
        },
        security = {
            @SecurityRequirement(name = "pinterest_oauth2", scopes = { "boards:read", "boards:write" })
        }
    )
    @Delete(uri="/boards/{board_id}/sections/{section_id}")
    @Produces(value = {"application/json"})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<Void> boardSectionsDelete(
        @PathVariable(value="board_id") @NotNull @Pattern(regexp="^\\d+$") String boardId, 
        @PathVariable(value="section_id") @NotNull @Pattern(regexp="^\\d+$") String sectionId, 
        @QueryValue(value="ad_account_id") @Nullable @Pattern(regexp="^\\d+$") @Size(max=18) String adAccountId
    ) {
        // TODO implement boardSectionsDelete();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * List board sections
     * Get a list of all board sections from a board owned by the \&quot;operation user_account\&quot; - or a group board that has been shared with this account. Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
     *
     * @param boardId Unique identifier of a board. (required)
     * @param adAccountId Unique identifier of an ad account. (optional)
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @return BoardSectionsList200Response
     */
    @Operation(
        operationId = "boardSectionsList",
        summary = "List board sections",
        responses = {
            @ApiResponse(responseCode = "200", description = "response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BoardSectionsList200Response.class))
            }),
            @ApiResponse(responseCode = "0", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        parameters = {
            @Parameter(name = "boardId", description = "Unique identifier of a board.", required = true),
            @Parameter(name = "adAccountId", description = "Unique identifier of an ad account."),
            @Parameter(name = "bookmark", description = "Cursor used to fetch the next page of items"),
            @Parameter(name = "pageSize", description = "Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/reference/pagination/'>Pagination</a> for more information.")
        },
        security = {
            @SecurityRequirement(name = "pinterest_oauth2", scopes = { "boards:read" }),
            @SecurityRequirement(name = "client_credentials", scopes = { "boards:read" })
        }
    )
    @Get(uri="/boards/{board_id}/sections")
    @Produces(value = {"application/json"})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<BoardSectionsList200Response> boardSectionsList(
        @PathVariable(value="board_id") @NotNull @Pattern(regexp="^\\d+$") String boardId, 
        @QueryValue(value="ad_account_id") @Nullable @Pattern(regexp="^\\d+$") @Size(max=18) String adAccountId, 
        @QueryValue(value="bookmark") @Nullable String bookmark, 
        @QueryValue(value="page_size", defaultValue="25") @Nullable @Min(1) @Max(250) Integer pageSize
    ) {
        // TODO implement boardSectionsList();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * List Pins on board section
     * Get a list of the Pins on a board section of a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
     *
     * @param boardId Unique identifier of a board. (required)
     * @param sectionId Unique identifier of a board section. (required)
     * @param adAccountId Unique identifier of an ad account. (optional)
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @return BoardsListPins200Response
     */
    @Operation(
        operationId = "boardSectionsListPins",
        summary = "List Pins on board section",
        responses = {
            @ApiResponse(responseCode = "200", description = "response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BoardsListPins200Response.class))
            }),
            @ApiResponse(responseCode = "403", description = "Not authorized to access Pins on board section.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Board or section not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "409", description = "Board section conflict.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "0", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        parameters = {
            @Parameter(name = "boardId", description = "Unique identifier of a board.", required = true),
            @Parameter(name = "sectionId", description = "Unique identifier of a board section.", required = true),
            @Parameter(name = "adAccountId", description = "Unique identifier of an ad account."),
            @Parameter(name = "bookmark", description = "Cursor used to fetch the next page of items"),
            @Parameter(name = "pageSize", description = "Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/reference/pagination/'>Pagination</a> for more information.")
        },
        security = {
            @SecurityRequirement(name = "pinterest_oauth2", scopes = { "boards:read", "pins:read" }),
            @SecurityRequirement(name = "client_credentials", scopes = { "boards:read", "pins:read" })
        }
    )
    @Get(uri="/boards/{board_id}/sections/{section_id}/pins")
    @Produces(value = {"application/json"})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<BoardsListPins200Response> boardSectionsListPins(
        @PathVariable(value="board_id") @NotNull @Pattern(regexp="^\\d+$") String boardId, 
        @PathVariable(value="section_id") @NotNull @Pattern(regexp="^\\d+$") String sectionId, 
        @QueryValue(value="ad_account_id") @Nullable @Pattern(regexp="^\\d+$") @Size(max=18) String adAccountId, 
        @QueryValue(value="bookmark") @Nullable String bookmark, 
        @QueryValue(value="page_size", defaultValue="25") @Nullable @Min(1) @Max(250) Integer pageSize
    ) {
        // TODO implement boardSectionsListPins();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Update board section
     * Update a board section on a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
     *
     * @param boardId Unique identifier of a board. (required)
     * @param sectionId Unique identifier of a board section. (required)
     * @param boardSection Update a board section. (required)
     * @param adAccountId Unique identifier of an ad account. (optional)
     * @return BoardSection
     */
    @Operation(
        operationId = "boardSectionsUpdate",
        summary = "Update board section",
        responses = {
            @ApiResponse(responseCode = "200", description = "response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BoardSection.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid board section parameters.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Not authorized to update board section.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "409", description = "Board section conflict.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "0", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        parameters = {
            @Parameter(name = "boardId", description = "Unique identifier of a board.", required = true),
            @Parameter(name = "sectionId", description = "Unique identifier of a board section.", required = true),
            @Parameter(name = "boardSection", description = "Update a board section.", required = true),
            @Parameter(name = "adAccountId", description = "Unique identifier of an ad account.")
        },
        security = {
            @SecurityRequirement(name = "pinterest_oauth2", scopes = { "boards:read", "boards:write" })
        }
    )
    @Patch(uri="/boards/{board_id}/sections/{section_id}")
    @Produces(value = {"application/json"})
    @Consumes(value = {"application/json"})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<BoardSection> boardSectionsUpdate(
        @PathVariable(value="board_id") @NotNull @Pattern(regexp="^\\d+$") String boardId, 
        @PathVariable(value="section_id") @NotNull @Pattern(regexp="^\\d+$") String sectionId, 
        @Body @NotNull @Valid BoardSection boardSection, 
        @QueryValue(value="ad_account_id") @Nullable @Pattern(regexp="^\\d+$") @Size(max=18) String adAccountId
    ) {
        // TODO implement boardSectionsUpdate();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Create board
     * Create a board owned by the \&quot;operation user_account\&quot;. Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
     *
     * @param board Create a board using a single board json object. (required)
     * @param adAccountId Unique identifier of an ad account. (optional)
     * @return Board
     */
    @Operation(
        operationId = "boardsCreate",
        summary = "Create board",
        responses = {
            @ApiResponse(responseCode = "201", description = "response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Board.class))
            }),
            @ApiResponse(responseCode = "400", description = "The board name is invalid or duplicated.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "0", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        parameters = {
            @Parameter(name = "board", description = "Create a board using a single board json object.", required = true),
            @Parameter(name = "adAccountId", description = "Unique identifier of an ad account.")
        },
        security = {
            @SecurityRequirement(name = "pinterest_oauth2", scopes = { "boards:read", "boards:write" })
        }
    )
    @Post(uri="/boards")
    @Produces(value = {"application/json"})
    @Consumes(value = {"application/json"})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<Board> boardsCreate(
        @Body @NotNull @Valid Board board, 
        @QueryValue(value="ad_account_id") @Nullable @Pattern(regexp="^\\d+$") @Size(max=18) String adAccountId
    ) {
        // TODO implement boardsCreate();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Delete board
     * Delete a board owned by the \&quot;operation user_account\&quot;. - Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
     *
     * @param boardId Unique identifier of a board. (required)
     * @param adAccountId Unique identifier of an ad account. (optional)
     */
    @Operation(
        operationId = "boardsDelete",
        summary = "Delete board",
        responses = {
            @ApiResponse(responseCode = "204", description = "Board deleted successfully"),
            @ApiResponse(responseCode = "403", description = "Not authorized to delete the board.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Board not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "409", description = "Could not get exclusive access to delete the board.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "429", description = "This request exceeded a rate limit. This can happen if the client exceeds one of the published rate limits or if multiple write operations are applied to an object within a short time window.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "0", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        parameters = {
            @Parameter(name = "boardId", description = "Unique identifier of a board.", required = true),
            @Parameter(name = "adAccountId", description = "Unique identifier of an ad account.")
        },
        security = {
            @SecurityRequirement(name = "pinterest_oauth2", scopes = { "boards:read", "boards:write" })
        }
    )
    @Delete(uri="/boards/{board_id}")
    @Produces(value = {"application/json"})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<Void> boardsDelete(
        @PathVariable(value="board_id") @NotNull @Pattern(regexp="^\\d+$") String boardId, 
        @QueryValue(value="ad_account_id") @Nullable @Pattern(regexp="^\\d+$") @Size(max=18) String adAccountId
    ) {
        // TODO implement boardsDelete();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Get board
     * Get a board owned by the operation user_account - or a group board that has been shared with this account. - Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
     *
     * @param boardId Unique identifier of a board. (required)
     * @param adAccountId Unique identifier of an ad account. (optional)
     * @return Board
     */
    @Operation(
        operationId = "boardsGet",
        summary = "Get board",
        responses = {
            @ApiResponse(responseCode = "200", description = "response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Board.class))
            }),
            @ApiResponse(responseCode = "404", description = "Board not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "0", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        parameters = {
            @Parameter(name = "boardId", description = "Unique identifier of a board.", required = true),
            @Parameter(name = "adAccountId", description = "Unique identifier of an ad account.")
        },
        security = {
            @SecurityRequirement(name = "pinterest_oauth2", scopes = { "boards:read" }),
            @SecurityRequirement(name = "client_credentials", scopes = { "boards:read" })
        }
    )
    @Get(uri="/boards/{board_id}")
    @Produces(value = {"application/json"})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<Board> boardsGet(
        @PathVariable(value="board_id") @NotNull @Pattern(regexp="^\\d+$") String boardId, 
        @QueryValue(value="ad_account_id") @Nullable @Pattern(regexp="^\\d+$") @Size(max=18) String adAccountId
    ) {
        // TODO implement boardsGet();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * List boards
     * Get a list of the boards owned by the \&quot;operation user_account\&quot; + group boards where this account is a collaborator Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. Optional: Specify a privacy type (public, protected, or secret) to indicate which boards to return. - If no privacy is specified, all boards that can be returned (based on the scopes of the token and ad_account role if applicable) will be returned.
     *
     * @param adAccountId Unique identifier of an ad account. (optional)
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @param privacy Privacy setting for a board. (optional)
     * @return BoardsList200Response
     */
    @Operation(
        operationId = "boardsList",
        summary = "List boards",
        responses = {
            @ApiResponse(responseCode = "200", description = "response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BoardsList200Response.class))
            }),
            @ApiResponse(responseCode = "0", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        parameters = {
            @Parameter(name = "adAccountId", description = "Unique identifier of an ad account."),
            @Parameter(name = "bookmark", description = "Cursor used to fetch the next page of items"),
            @Parameter(name = "pageSize", description = "Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/reference/pagination/'>Pagination</a> for more information."),
            @Parameter(name = "privacy", description = "Privacy setting for a board.")
        },
        security = {
            @SecurityRequirement(name = "pinterest_oauth2", scopes = { "boards:read" }),
            @SecurityRequirement(name = "client_credentials", scopes = { "boards:read" })
        }
    )
    @Get(uri="/boards")
    @Produces(value = {"application/json"})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<BoardsList200Response> boardsList(
        @QueryValue(value="ad_account_id") @Nullable @Pattern(regexp="^\\d+$") @Size(max=18) String adAccountId, 
        @QueryValue(value="bookmark") @Nullable String bookmark, 
        @QueryValue(value="page_size", defaultValue="25") @Nullable @Min(1) @Max(250) Integer pageSize, 
        @QueryValue(value="privacy") @Nullable String privacy
    ) {
        // TODO implement boardsList();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * List Pins on board
     * Get a list of the Pins on a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. - Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
     *
     * @param boardId Unique identifier of a board. (required)
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @param creativeTypes Pin creative types filter. &lt;/p&gt;&lt;strong&gt;Note:&lt;/strong&gt; SHOP_THE_PIN has been deprecated. Please use COLLECTION instead. (optional)
     * @param adAccountId Unique identifier of an ad account. (optional)
     * @param pinMetrics Specify whether to return 90d and lifetime Pin metrics. Total comments and total reactions are only available with lifetime Pin metrics. If Pin was created before &lt;code&gt;2023-03-20&lt;/code&gt; lifetime metrics will only be available for Video and Idea Pin formats. Lifetime metrics are available for all Pin formats since then. (optional, default to false)
     * @return BoardsListPins200Response
     */
    @Operation(
        operationId = "boardsListPins",
        summary = "List Pins on board",
        responses = {
            @ApiResponse(responseCode = "200", description = "response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BoardsListPins200Response.class))
            }),
            @ApiResponse(responseCode = "404", description = "Board not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "0", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        parameters = {
            @Parameter(name = "boardId", description = "Unique identifier of a board.", required = true),
            @Parameter(name = "bookmark", description = "Cursor used to fetch the next page of items"),
            @Parameter(name = "pageSize", description = "Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/reference/pagination/'>Pagination</a> for more information."),
            @Parameter(name = "creativeTypes", description = "Pin creative types filter. </p><strong>Note:</strong> SHOP_THE_PIN has been deprecated. Please use COLLECTION instead."),
            @Parameter(name = "adAccountId", description = "Unique identifier of an ad account."),
            @Parameter(name = "pinMetrics", description = "Specify whether to return 90d and lifetime Pin metrics. Total comments and total reactions are only available with lifetime Pin metrics. If Pin was created before <code>2023-03-20</code> lifetime metrics will only be available for Video and Idea Pin formats. Lifetime metrics are available for all Pin formats since then.")
        },
        security = {
            @SecurityRequirement(name = "pinterest_oauth2", scopes = { "boards:read", "pins:read" }),
            @SecurityRequirement(name = "client_credentials", scopes = { "boards:read", "pins:read" })
        }
    )
    @Get(uri="/boards/{board_id}/pins")
    @Produces(value = {"application/json"})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<BoardsListPins200Response> boardsListPins(
        @PathVariable(value="board_id") @NotNull @Pattern(regexp="^\\d+$") String boardId, 
        @QueryValue(value="bookmark") @Nullable String bookmark, 
        @QueryValue(value="page_size", defaultValue="25") @Nullable @Min(1) @Max(250) Integer pageSize, 
        @QueryValue(value="creative_types") @Nullable List<String> creativeTypes, 
        @QueryValue(value="ad_account_id") @Nullable @Pattern(regexp="^\\d+$") @Size(max=18) String adAccountId, 
        @QueryValue(value="pin_metrics", defaultValue="false") @Nullable Boolean pinMetrics
    ) {
        // TODO implement boardsListPins();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Update board
     * Update a board owned by the \&quot;operating user_account\&quot;. - Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
     *
     * @param boardId Unique identifier of a board. (required)
     * @param boardUpdate Update a board. (required)
     * @param adAccountId Unique identifier of an ad account. (optional)
     * @return Board
     */
    @Operation(
        operationId = "boardsUpdate",
        summary = "Update board",
        responses = {
            @ApiResponse(responseCode = "200", description = "response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Board.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid board parameters.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Not authorized to update the board.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "429", description = "This request exceeded a rate limit. This can happen if the client exceeds one of the published rate limits or if multiple write operations are applied to an object within a short time window.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "0", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        parameters = {
            @Parameter(name = "boardId", description = "Unique identifier of a board.", required = true),
            @Parameter(name = "boardUpdate", description = "Update a board.", required = true),
            @Parameter(name = "adAccountId", description = "Unique identifier of an ad account.")
        },
        security = {
            @SecurityRequirement(name = "pinterest_oauth2", scopes = { "boards:read", "boards:write" })
        }
    )
    @Patch(uri="/boards/{board_id}")
    @Produces(value = {"application/json"})
    @Consumes(value = {"application/json"})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<Board> boardsUpdate(
        @PathVariable(value="board_id") @NotNull @Pattern(regexp="^\\d+$") String boardId, 
        @Body @NotNull @Valid BoardUpdate boardUpdate, 
        @QueryValue(value="ad_account_id") @Nullable @Pattern(regexp="^\\d+$") @Size(max=18) String adAccountId
    ) {
        // TODO implement boardsUpdate();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }

}
