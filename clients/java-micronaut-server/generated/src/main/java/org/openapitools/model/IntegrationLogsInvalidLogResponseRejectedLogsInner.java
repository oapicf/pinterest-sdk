/*
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.*;

import javax.validation.constraints.*;
import javax.validation.Valid;
import io.micronaut.core.annotation.*;
import javax.annotation.Generated;
import io.swagger.v3.oas.annotations.media.Schema;

/**
 * IntegrationLogsInvalidLogResponseRejectedLogsInner
 */
@JsonPropertyOrder({
  IntegrationLogsInvalidLogResponseRejectedLogsInner.JSON_PROPERTY_LOG_INDEX,
  IntegrationLogsInvalidLogResponseRejectedLogsInner.JSON_PROPERTY_FIELD,
  IntegrationLogsInvalidLogResponseRejectedLogsInner.JSON_PROPERTY_VALUE,
  IntegrationLogsInvalidLogResponseRejectedLogsInner.JSON_PROPERTY_REASON
})
@JsonTypeName("IntegrationLogsInvalidLogResponse_rejected_logs_inner")
@Generated(value="org.openapitools.codegen.languages.JavaMicronautServerCodegen", date="2024-11-05T02:03:37.829873561Z[Etc/UTC]", comments = "Generator version: 7.9.0")
@Introspected
public class IntegrationLogsInvalidLogResponseRejectedLogsInner {
    public static final String JSON_PROPERTY_LOG_INDEX = "log_index";
    private Integer logIndex;

    public static final String JSON_PROPERTY_FIELD = "field";
    private String field;

    public static final String JSON_PROPERTY_VALUE = "value";
    private String value;

    public static final String JSON_PROPERTY_REASON = "reason";
    private String reason;

    public IntegrationLogsInvalidLogResponseRejectedLogsInner(String field, String value, String reason) {
        this.field = field;
        this.value = value;
        this.reason = reason;
    }

    public IntegrationLogsInvalidLogResponseRejectedLogsInner logIndex(Integer logIndex) {
        this.logIndex = logIndex;
        return this;
    }

    /**
     * Index of the log in the batch.
     * @return logIndex
     */
    @Nullable
    @Schema(name = "log_index", description = "Index of the log in the batch.", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
    @JsonProperty(JSON_PROPERTY_LOG_INDEX)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Integer getLogIndex() {
        return logIndex;
    }

    @JsonProperty(JSON_PROPERTY_LOG_INDEX)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setLogIndex(Integer logIndex) {
        this.logIndex = logIndex;
    }

    public IntegrationLogsInvalidLogResponseRejectedLogsInner field(String field) {
        this.field = field;
        return this;
    }

    /**
     * The field name containing an invalid value.
     * @return field
     */
    @NotNull
    @Schema(name = "field", description = "The field name containing an invalid value.", requiredMode = Schema.RequiredMode.REQUIRED)
    @JsonProperty(JSON_PROPERTY_FIELD)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getField() {
        return field;
    }

    @JsonProperty(JSON_PROPERTY_FIELD)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setField(String field) {
        this.field = field;
    }

    public IntegrationLogsInvalidLogResponseRejectedLogsInner value(String value) {
        this.value = value;
        return this;
    }

    /**
     * The value that is invalid.
     * @return value
     */
    @NotNull
    @Schema(name = "value", description = "The value that is invalid.", requiredMode = Schema.RequiredMode.REQUIRED)
    @JsonProperty(JSON_PROPERTY_VALUE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getValue() {
        return value;
    }

    @JsonProperty(JSON_PROPERTY_VALUE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setValue(String value) {
        this.value = value;
    }

    public IntegrationLogsInvalidLogResponseRejectedLogsInner reason(String reason) {
        this.reason = reason;
        return this;
    }

    /**
     * The reason the value is invalid.
     * @return reason
     */
    @NotNull
    @Schema(name = "reason", description = "The reason the value is invalid.", requiredMode = Schema.RequiredMode.REQUIRED)
    @JsonProperty(JSON_PROPERTY_REASON)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getReason() {
        return reason;
    }

    @JsonProperty(JSON_PROPERTY_REASON)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setReason(String reason) {
        this.reason = reason;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        IntegrationLogsInvalidLogResponseRejectedLogsInner integrationLogsInvalidLogResponseRejectedLogsInner = (IntegrationLogsInvalidLogResponseRejectedLogsInner) o;
        return Objects.equals(this.logIndex, integrationLogsInvalidLogResponseRejectedLogsInner.logIndex) &&
            Objects.equals(this.field, integrationLogsInvalidLogResponseRejectedLogsInner.field) &&
            Objects.equals(this.value, integrationLogsInvalidLogResponseRejectedLogsInner.value) &&
            Objects.equals(this.reason, integrationLogsInvalidLogResponseRejectedLogsInner.reason);
    }

    @Override
    public int hashCode() {
        return Objects.hash(logIndex, field, value, reason);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class IntegrationLogsInvalidLogResponseRejectedLogsInner {\n");
        sb.append("    logIndex: ").append(toIndentedString(logIndex)).append("\n");
        sb.append("    field: ").append(toIndentedString(field)).append("\n");
        sb.append("    value: ").append(toIndentedString(value)).append("\n");
        sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

