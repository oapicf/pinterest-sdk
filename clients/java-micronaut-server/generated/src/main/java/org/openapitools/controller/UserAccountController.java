/*
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.controller;

import io.micronaut.http.annotation.*;
import io.micronaut.core.annotation.Nullable;
import io.micronaut.core.convert.format.Format;
import io.micronaut.security.annotation.Secured;
import io.micronaut.security.rules.SecurityRule;
import reactor.core.publisher.Mono;
import io.micronaut.http.HttpStatus;
import io.micronaut.http.exceptions.HttpStatusException;
import org.openapitools.model.Account;
import org.openapitools.model.AnalyticsMetricsResponse;
import org.openapitools.model.BoardsUserFollowsList200Response;
import org.openapitools.model.Error;
import org.openapitools.model.FollowUserRequest;
import org.openapitools.model.FollowersList200Response;
import org.openapitools.model.LinkedBusiness;
import java.time.LocalDate;
import org.openapitools.model.TopPinsAnalyticsResponse;
import org.openapitools.model.TopVideoPinsAnalyticsResponse;
import org.openapitools.model.UserAccountFollowedInterests200Response;
import org.openapitools.model.UserFollowingFeedType;
import org.openapitools.model.UserFollowingGet200Response;
import org.openapitools.model.UserSummary;
import org.openapitools.model.UserWebsiteSummary;
import org.openapitools.model.UserWebsiteVerificationCode;
import org.openapitools.model.UserWebsiteVerifyRequest;
import org.openapitools.model.UserWebsitesGet200Response;
import javax.annotation.Generated;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;

@Generated(value="org.openapitools.codegen.languages.JavaMicronautServerCodegen", date="2024-11-05T02:03:37.829873561Z[Etc/UTC]", comments = "Generator version: 7.9.0")
@Controller
@Tag(name = "UserAccount", description = "The UserAccount API")
public class UserAccountController {
    /**
     * List following boards
     * Get a list of the boards a user follows. The request returns a board summary object array.
     *
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @param explicitFollowing Whether or not to include implicit user follows, which means followees with board follows. When explicit_following is True, it means we only want explicit user follows. (optional, default to false)
     * @param adAccountId Unique identifier of an ad account. (optional)
     * @return BoardsUserFollowsList200Response
     */
    @Operation(
        operationId = "boardsUserFollowsList",
        summary = "List following boards",
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BoardsUserFollowsList200Response.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid user id", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "0", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        parameters = {
            @Parameter(name = "bookmark", description = "Cursor used to fetch the next page of items"),
            @Parameter(name = "pageSize", description = "Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/reference/pagination/'>Pagination</a> for more information."),
            @Parameter(name = "explicitFollowing", description = "Whether or not to include implicit user follows, which means followees with board follows. When explicit_following is True, it means we only want explicit user follows."),
            @Parameter(name = "adAccountId", description = "Unique identifier of an ad account.")
        },
        security = {
            @SecurityRequirement(name = "pinterest_oauth2", scopes = { "user_accounts:read" }),
            @SecurityRequirement(name = "client_credentials", scopes = { "user_accounts:read" })
        }
    )
    @Get(uri="/user_account/following/boards")
    @Produces(value = {"application/json"})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<BoardsUserFollowsList200Response> boardsUserFollowsList(
        @QueryValue(value="bookmark") @Nullable String bookmark, 
        @QueryValue(value="page_size", defaultValue="25") @Nullable @Min(1) @Max(250) Integer pageSize, 
        @QueryValue(value="explicit_following", defaultValue="false") @Nullable Boolean explicitFollowing, 
        @QueryValue(value="ad_account_id") @Nullable @Pattern(regexp="^\\d+$") @Size(max=18) String adAccountId
    ) {
        // TODO implement boardsUserFollowsList();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Follow user
     * &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/getting-started/beta-and-advanced-access/&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Use this request, as a signed-in user, to follow another user.
     *
     * @param username A valid username (required)
     * @param followUserRequest Follow a user. (required)
     * @return UserSummary
     */
    @Operation(
        operationId = "followUserUpdate",
        summary = "Follow user",
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserSummary.class))
            }),
            @ApiResponse(responseCode = "404", description = "User not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "0", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        parameters = {
            @Parameter(name = "username", description = "A valid username", required = true),
            @Parameter(name = "followUserRequest", description = "Follow a user.", required = true)
        },
        security = {
            @SecurityRequirement(name = "pinterest_oauth2", scopes = { "user_accounts:write" })
        }
    )
    @Post(uri="/user_account/following/{username}")
    @Produces(value = {"application/json"})
    @Consumes(value = {"application/json"})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<UserSummary> followUserUpdate(
        @PathVariable(value="username") @NotNull @Pattern(regexp="(?!^\\d+$)^.+$") String username, 
        @Body @NotNull @Valid FollowUserRequest followUserRequest
    ) {
        // TODO implement followUserUpdate();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * List followers
     * Get a list of your followers.
     *
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @return FollowersList200Response
     */
    @Operation(
        operationId = "followersList",
        summary = "List followers",
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = FollowersList200Response.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid user id", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "0", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        parameters = {
            @Parameter(name = "bookmark", description = "Cursor used to fetch the next page of items"),
            @Parameter(name = "pageSize", description = "Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/reference/pagination/'>Pagination</a> for more information.")
        },
        security = {
            @SecurityRequirement(name = "pinterest_oauth2", scopes = { "user_accounts:read" }),
            @SecurityRequirement(name = "client_credentials", scopes = { "user_accounts:read" })
        }
    )
    @Get(uri="/user_account/followers")
    @Produces(value = {"application/json"})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<FollowersList200Response> followersList(
        @QueryValue(value="bookmark") @Nullable String bookmark, 
        @QueryValue(value="page_size", defaultValue="25") @Nullable @Min(1) @Max(250) Integer pageSize
    ) {
        // TODO implement followersList();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * List linked businesses
     * Get a list of your linked business accounts.
     *
     * @return List&lt;LinkedBusiness&gt;
     */
    @Operation(
        operationId = "linkedBusinessAccountsGet",
        summary = "List linked businesses",
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = LinkedBusiness.class))
            }),
            @ApiResponse(responseCode = "0", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "pinterest_oauth2", scopes = { "user_accounts:read" }),
            @SecurityRequirement(name = "client_credentials", scopes = { "user_accounts:read" })
        }
    )
    @Get(uri="/user_account/businesses")
    @Produces(value = {"application/json"})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<List<LinkedBusiness>> linkedBusinessAccountsGet() {
        // TODO implement linkedBusinessAccountsGet();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Unverify website
     * Unverifu a website verified by the signed-in user.
     *
     * @param website Website with path or domain only (required)
     */
    @Operation(
        operationId = "unverifyWebsiteDelete",
        summary = "Unverify website",
        responses = {
            @ApiResponse(responseCode = "204", description = "Successfully unverified website"),
            @ApiResponse(responseCode = "404", description = "Website not in user list.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "0", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        parameters = {
            @Parameter(name = "website", description = "Website with path or domain only", required = true)
        },
        security = {
            @SecurityRequirement(name = "pinterest_oauth2", scopes = { "user_accounts:write" })
        }
    )
    @Delete(uri="/user_account/websites")
    @Produces(value = {"application/json"})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<Void> unverifyWebsiteDelete(
        @QueryValue(value="website") @NotNull String website
    ) {
        // TODO implement unverifyWebsiteDelete();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Get user account analytics
     * Get analytics for the \&quot;operation user_account\&quot; - By default, the \&quot;operation user_account\&quot; is the token user_account.  Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;.
     *
     * @param startDate Metric report start date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days back from today. (required)
     * @param endDate Metric report end date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days past start_date. (required)
     * @param fromClaimedContent Filter on Pins that match your claimed domain. (optional, default to BOTH)
     * @param pinFormat Pin formats to get data for, default is all. (optional, default to ALL)
     * @param appTypes Apps or devices to get data for, default is all. (optional, default to ALL)
     * @param contentType Filter to paid or organic data. Default is all. (optional, default to ALL)
     * @param source Filter to activity from Pins created and saved by your, or activity created and saved by others from your claimed accounts (optional, default to ALL)
     * @param metricTypes Metric types to get data for, default is all.  (optional)
     * @param splitField How to split the data into groups. Not including this param means data won&#39;t be split. (optional, default to NO_SPLIT)
     * @param adAccountId Unique identifier of an ad account. (optional)
     * @return Map&lt;String, AnalyticsMetricsResponse&gt;
     */
    @Operation(
        operationId = "userAccountAnalytics",
        summary = "Get user account analytics",
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AnalyticsMetricsResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid user accounts analytics parameters.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Not authorized to access the user account analytics.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "0", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        parameters = {
            @Parameter(name = "startDate", description = "Metric report start date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days back from today.", required = true),
            @Parameter(name = "endDate", description = "Metric report end date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days past start_date.", required = true),
            @Parameter(name = "fromClaimedContent", description = "Filter on Pins that match your claimed domain."),
            @Parameter(name = "pinFormat", description = "Pin formats to get data for, default is all."),
            @Parameter(name = "appTypes", description = "Apps or devices to get data for, default is all."),
            @Parameter(name = "contentType", description = "Filter to paid or organic data. Default is all."),
            @Parameter(name = "source", description = "Filter to activity from Pins created and saved by your, or activity created and saved by others from your claimed accounts"),
            @Parameter(name = "metricTypes", description = "Metric types to get data for, default is all. "),
            @Parameter(name = "splitField", description = "How to split the data into groups. Not including this param means data won't be split."),
            @Parameter(name = "adAccountId", description = "Unique identifier of an ad account.")
        },
        security = {
            @SecurityRequirement(name = "pinterest_oauth2", scopes = { "user_accounts:read" })
        }
    )
    @Get(uri="/user_account/analytics")
    @Produces(value = {"application/json"})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<Map<String, AnalyticsMetricsResponse>> userAccountAnalytics(
        @QueryValue(value="start_date") @NotNull @Format("yyyy-MM-dd") LocalDate startDate, 
        @QueryValue(value="end_date") @NotNull @Format("yyyy-MM-dd") LocalDate endDate, 
        @QueryValue(value="from_claimed_content", defaultValue="BOTH") @Nullable String fromClaimedContent, 
        @QueryValue(value="pin_format", defaultValue="ALL") @Nullable String pinFormat, 
        @QueryValue(value="app_types", defaultValue="ALL") @Nullable String appTypes, 
        @QueryValue(value="content_type", defaultValue="ALL") @Nullable String contentType, 
        @QueryValue(value="source", defaultValue="ALL") @Nullable String source, 
        @QueryValue(value="metric_types") @Nullable List<String> metricTypes, 
        @QueryValue(value="split_field", defaultValue="NO_SPLIT") @Nullable String splitField, 
        @QueryValue(value="ad_account_id") @Nullable @Pattern(regexp="^\\d+$") @Size(max=18) String adAccountId
    ) {
        // TODO implement userAccountAnalytics();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Get user account top pins analytics
     * Gets analytics data about a user&#39;s top pins (limited to the top 50). - By default, the \&quot;operation user_account\&quot; is the token user_account.  Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;.
     *
     * @param startDate Metric report start date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days back from today. (required)
     * @param endDate Metric report end date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days past start_date. (required)
     * @param sortBy Specify sorting order for metrics (required)
     * @param fromClaimedContent Filter on Pins that match your claimed domain. (optional, default to BOTH)
     * @param pinFormat Pin formats to get data for, default is all. (optional, default to ALL)
     * @param appTypes Apps or devices to get data for, default is all. (optional, default to ALL)
     * @param contentType Filter to paid or organic data. Default is all. (optional, default to ALL)
     * @param source Filter to activity from Pins created and saved by your, or activity created and saved by others from your claimed accounts (optional, default to ALL)
     * @param metricTypes Metric types to get data for, default is all.  (optional)
     * @param numOfPins Number of pins to include, default is 10. Max is 50. (optional, default to 10)
     * @param createdInLastNDays Get metrics for pins created in the last \&quot;n\&quot; days. (optional)
     * @param adAccountId Unique identifier of an ad account. (optional)
     * @return TopPinsAnalyticsResponse
     */
    @Operation(
        operationId = "userAccountAnalyticsTopPins",
        summary = "Get user account top pins analytics",
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TopPinsAnalyticsResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Not authorized to access the user account analytics.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "0", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        parameters = {
            @Parameter(name = "startDate", description = "Metric report start date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days back from today.", required = true),
            @Parameter(name = "endDate", description = "Metric report end date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days past start_date.", required = true),
            @Parameter(name = "sortBy", description = "Specify sorting order for metrics", required = true),
            @Parameter(name = "fromClaimedContent", description = "Filter on Pins that match your claimed domain."),
            @Parameter(name = "pinFormat", description = "Pin formats to get data for, default is all."),
            @Parameter(name = "appTypes", description = "Apps or devices to get data for, default is all."),
            @Parameter(name = "contentType", description = "Filter to paid or organic data. Default is all."),
            @Parameter(name = "source", description = "Filter to activity from Pins created and saved by your, or activity created and saved by others from your claimed accounts"),
            @Parameter(name = "metricTypes", description = "Metric types to get data for, default is all. "),
            @Parameter(name = "numOfPins", description = "Number of pins to include, default is 10. Max is 50."),
            @Parameter(name = "createdInLastNDays", description = "Get metrics for pins created in the last \"n\" days."),
            @Parameter(name = "adAccountId", description = "Unique identifier of an ad account.")
        },
        security = {
            @SecurityRequirement(name = "pinterest_oauth2", scopes = { "pins:read", "user_accounts:read" }),
            @SecurityRequirement(name = "client_credentials", scopes = { "pins:read", "user_accounts:read" })
        }
    )
    @Get(uri="/user_account/analytics/top_pins")
    @Produces(value = {"application/json"})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<TopPinsAnalyticsResponse> userAccountAnalyticsTopPins(
        @QueryValue(value="start_date") @NotNull @Format("yyyy-MM-dd") LocalDate startDate, 
        @QueryValue(value="end_date") @NotNull @Format("yyyy-MM-dd") LocalDate endDate, 
        @QueryValue(value="sort_by") @NotNull String sortBy, 
        @QueryValue(value="from_claimed_content", defaultValue="BOTH") @Nullable String fromClaimedContent, 
        @QueryValue(value="pin_format", defaultValue="ALL") @Nullable String pinFormat, 
        @QueryValue(value="app_types", defaultValue="ALL") @Nullable String appTypes, 
        @QueryValue(value="content_type", defaultValue="ALL") @Nullable String contentType, 
        @QueryValue(value="source", defaultValue="ALL") @Nullable String source, 
        @QueryValue(value="metric_types") @Nullable List<String> metricTypes, 
        @QueryValue(value="num_of_pins", defaultValue="10") @Nullable @Min(1) @Max(50) Integer numOfPins, 
        @QueryValue(value="created_in_last_n_days") @Nullable Integer createdInLastNDays, 
        @QueryValue(value="ad_account_id") @Nullable @Pattern(regexp="^\\d+$") @Size(max=18) String adAccountId
    ) {
        // TODO implement userAccountAnalyticsTopPins();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Get user account top video pins analytics
     * Gets analytics data about a user&#39;s top video pins (limited to the top 50). - By default, the \&quot;operation user_account\&quot; is the token user_account.  Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;.
     *
     * @param startDate Metric report start date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days back from today. (required)
     * @param endDate Metric report end date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days past start_date. (required)
     * @param sortBy Specify sorting order for video metrics (required)
     * @param fromClaimedContent Filter on Pins that match your claimed domain. (optional, default to BOTH)
     * @param pinFormat Pin formats to get data for, default is all. (optional, default to ALL)
     * @param appTypes Apps or devices to get data for, default is all. (optional, default to ALL)
     * @param contentType Filter to paid or organic data. Default is all. (optional, default to ALL)
     * @param source Filter to activity from Pins created and saved by your, or activity created and saved by others from your claimed accounts (optional, default to ALL)
     * @param metricTypes Metric types to get video data for, default is all.  (optional)
     * @param numOfPins Number of pins to include, default is 10. Max is 50. (optional, default to 10)
     * @param createdInLastNDays Get metrics for pins created in the last \&quot;n\&quot; days. (optional)
     * @param adAccountId Unique identifier of an ad account. (optional)
     * @return TopVideoPinsAnalyticsResponse
     */
    @Operation(
        operationId = "userAccountAnalyticsTopVideoPins",
        summary = "Get user account top video pins analytics",
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TopVideoPinsAnalyticsResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Not authorized to access the user account analytics.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "0", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        parameters = {
            @Parameter(name = "startDate", description = "Metric report start date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days back from today.", required = true),
            @Parameter(name = "endDate", description = "Metric report end date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days past start_date.", required = true),
            @Parameter(name = "sortBy", description = "Specify sorting order for video metrics", required = true),
            @Parameter(name = "fromClaimedContent", description = "Filter on Pins that match your claimed domain."),
            @Parameter(name = "pinFormat", description = "Pin formats to get data for, default is all."),
            @Parameter(name = "appTypes", description = "Apps or devices to get data for, default is all."),
            @Parameter(name = "contentType", description = "Filter to paid or organic data. Default is all."),
            @Parameter(name = "source", description = "Filter to activity from Pins created and saved by your, or activity created and saved by others from your claimed accounts"),
            @Parameter(name = "metricTypes", description = "Metric types to get video data for, default is all. "),
            @Parameter(name = "numOfPins", description = "Number of pins to include, default is 10. Max is 50."),
            @Parameter(name = "createdInLastNDays", description = "Get metrics for pins created in the last \"n\" days."),
            @Parameter(name = "adAccountId", description = "Unique identifier of an ad account.")
        },
        security = {
            @SecurityRequirement(name = "pinterest_oauth2", scopes = { "pins:read", "user_accounts:read" }),
            @SecurityRequirement(name = "client_credentials", scopes = { "pins:read", "user_accounts:read" })
        }
    )
    @Get(uri="/user_account/analytics/top_video_pins")
    @Produces(value = {"application/json"})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<TopVideoPinsAnalyticsResponse> userAccountAnalyticsTopVideoPins(
        @QueryValue(value="start_date") @NotNull @Format("yyyy-MM-dd") LocalDate startDate, 
        @QueryValue(value="end_date") @NotNull @Format("yyyy-MM-dd") LocalDate endDate, 
        @QueryValue(value="sort_by") @NotNull String sortBy, 
        @QueryValue(value="from_claimed_content", defaultValue="BOTH") @Nullable String fromClaimedContent, 
        @QueryValue(value="pin_format", defaultValue="ALL") @Nullable String pinFormat, 
        @QueryValue(value="app_types", defaultValue="ALL") @Nullable String appTypes, 
        @QueryValue(value="content_type", defaultValue="ALL") @Nullable String contentType, 
        @QueryValue(value="source", defaultValue="ALL") @Nullable String source, 
        @QueryValue(value="metric_types") @Nullable List<String> metricTypes, 
        @QueryValue(value="num_of_pins", defaultValue="10") @Nullable @Min(1) @Max(50) Integer numOfPins, 
        @QueryValue(value="created_in_last_n_days") @Nullable Integer createdInLastNDays, 
        @QueryValue(value="ad_account_id") @Nullable @Pattern(regexp="^\\d+$") @Size(max=18) String adAccountId
    ) {
        // TODO implement userAccountAnalyticsTopVideoPins();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * List following interests
     * Get a list of a user&#39;s following interests in one place.
     *
     * @param username A valid username (required)
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @return UserAccountFollowedInterests200Response
     */
    @Operation(
        operationId = "userAccountFollowedInterests",
        summary = "List following interests",
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserAccountFollowedInterests200Response.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid parameters", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "Authorization failed", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "User not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "0", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        parameters = {
            @Parameter(name = "username", description = "A valid username", required = true),
            @Parameter(name = "bookmark", description = "Cursor used to fetch the next page of items"),
            @Parameter(name = "pageSize", description = "Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/reference/pagination/'>Pagination</a> for more information.")
        },
        security = {
            @SecurityRequirement(name = "pinterest_oauth2", scopes = { "user_accounts:read" }),
            @SecurityRequirement(name = "client_credentials", scopes = { "user_accounts:read" })
        }
    )
    @Get(uri="/users/{username}/interests/follow")
    @Produces(value = {"application/json"})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<UserAccountFollowedInterests200Response> userAccountFollowedInterests(
        @PathVariable(value="username") @NotNull @Pattern(regexp="(?!^\\d+$)^.+$") String username, 
        @QueryValue(value="bookmark") @Nullable String bookmark, 
        @QueryValue(value="page_size", defaultValue="25") @Nullable @Min(1) @Max(250) Integer pageSize
    ) {
        // TODO implement userAccountFollowedInterests();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Get user account
     * Get account information for the \&quot;operation user_account\&quot; - By default, the \&quot;operation user_account\&quot; is the token user_account.  If using Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. See &lt;a href&#x3D;&#39;/docs/getting-started/using-business-access/&#39;&gt;Understanding Business Access&lt;/a&gt; for more information.
     *
     * @param adAccountId Unique identifier of an ad account. (optional)
     * @return Account
     */
    @Operation(
        operationId = "userAccountGet",
        summary = "Get user account",
        responses = {
            @ApiResponse(responseCode = "200", description = "response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Account.class))
            }),
            @ApiResponse(responseCode = "403", description = "Not authorized to access the user account.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "0", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        parameters = {
            @Parameter(name = "adAccountId", description = "Unique identifier of an ad account.")
        },
        security = {
            @SecurityRequirement(name = "pinterest_oauth2", scopes = { "user_accounts:read" }),
            @SecurityRequirement(name = "client_credentials", scopes = { "user_accounts:read" })
        }
    )
    @Get(uri="/user_account")
    @Produces(value = {"application/json"})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<Account> userAccountGet(
        @QueryValue(value="ad_account_id") @Nullable @Pattern(regexp="^\\d+$") @Size(max=18) String adAccountId
    ) {
        // TODO implement userAccountGet();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * List following
     * Get a list of who a certain user follows.
     *
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @param feedType Thrift param specifying what type of followees will be kept. Default to include all followees. (optional, default to ALL)
     * @param explicitFollowing Whether or not to include implicit user follows, which means followees with board follows. When explicit_following is True, it means we only want explicit user follows. (optional, default to false)
     * @param adAccountId Unique identifier of an ad account. (optional)
     * @return UserFollowingGet200Response
     */
    @Operation(
        operationId = "userFollowingGet",
        summary = "List following",
        responses = {
            @ApiResponse(responseCode = "200", description = "response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserFollowingGet200Response.class))
            }),
            @ApiResponse(responseCode = "0", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        parameters = {
            @Parameter(name = "bookmark", description = "Cursor used to fetch the next page of items"),
            @Parameter(name = "pageSize", description = "Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/reference/pagination/'>Pagination</a> for more information."),
            @Parameter(name = "feedType", description = "Thrift param specifying what type of followees will be kept. Default to include all followees."),
            @Parameter(name = "explicitFollowing", description = "Whether or not to include implicit user follows, which means followees with board follows. When explicit_following is True, it means we only want explicit user follows."),
            @Parameter(name = "adAccountId", description = "Unique identifier of an ad account.")
        },
        security = {
            @SecurityRequirement(name = "pinterest_oauth2", scopes = { "user_accounts:read" }),
            @SecurityRequirement(name = "client_credentials", scopes = { "user_accounts:read" })
        }
    )
    @Get(uri="/user_account/following")
    @Produces(value = {"application/json"})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<UserFollowingGet200Response> userFollowingGet(
        @QueryValue(value="bookmark") @Nullable String bookmark, 
        @QueryValue(value="page_size", defaultValue="25") @Nullable @Min(1) @Max(250) Integer pageSize, 
        @QueryValue(value="feed_type", defaultValue="ALL") @Nullable UserFollowingFeedType feedType, 
        @QueryValue(value="explicit_following", defaultValue="false") @Nullable Boolean explicitFollowing, 
        @QueryValue(value="ad_account_id") @Nullable @Pattern(regexp="^\\d+$") @Size(max=18) String adAccountId
    ) {
        // TODO implement userFollowingGet();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Get user websites
     * Get user websites, claimed or not
     *
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @return UserWebsitesGet200Response
     */
    @Operation(
        operationId = "userWebsitesGet",
        summary = "Get user websites",
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserWebsitesGet200Response.class))
            }),
            @ApiResponse(responseCode = "403", description = "Not authorized to access the user website list.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "0", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        parameters = {
            @Parameter(name = "bookmark", description = "Cursor used to fetch the next page of items"),
            @Parameter(name = "pageSize", description = "Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/reference/pagination/'>Pagination</a> for more information.")
        },
        security = {
            @SecurityRequirement(name = "pinterest_oauth2", scopes = { "user_accounts:read" })
        }
    )
    @Get(uri="/user_account/websites")
    @Produces(value = {"application/json"})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<UserWebsitesGet200Response> userWebsitesGet(
        @QueryValue(value="bookmark") @Nullable String bookmark, 
        @QueryValue(value="page_size", defaultValue="25") @Nullable @Min(1) @Max(250) Integer pageSize
    ) {
        // TODO implement userWebsitesGet();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Verify website
     * Verify a website as a signed-in user.
     *
     * @param userWebsiteVerifyRequest Verify a website. (required)
     * @param adAccountId Unique identifier of an ad account. (optional)
     * @return UserWebsiteSummary
     */
    @Operation(
        operationId = "verifyWebsiteUpdate",
        summary = "Verify website",
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserWebsiteSummary.class))
            }),
            @ApiResponse(responseCode = "0", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        parameters = {
            @Parameter(name = "userWebsiteVerifyRequest", description = "Verify a website.", required = true),
            @Parameter(name = "adAccountId", description = "Unique identifier of an ad account.")
        },
        security = {
            @SecurityRequirement(name = "pinterest_oauth2", scopes = { "user_accounts:write" })
        }
    )
    @Post(uri="/user_account/websites")
    @Produces(value = {"application/json"})
    @Consumes(value = {"application/json"})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<UserWebsiteSummary> verifyWebsiteUpdate(
        @Body @NotNull @Valid UserWebsiteVerifyRequest userWebsiteVerifyRequest, 
        @QueryValue(value="ad_account_id") @Nullable @Pattern(regexp="^\\d+$") @Size(max=18) String adAccountId
    ) {
        // TODO implement verifyWebsiteUpdate();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Get user verification code for website claiming
     * Get verification code for user to install on the website to claim it.
     *
     * @param adAccountId Unique identifier of an ad account. (optional)
     * @return UserWebsiteVerificationCode
     */
    @Operation(
        operationId = "websiteVerificationGet",
        summary = "Get user verification code for website claiming",
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserWebsiteVerificationCode.class))
            }),
            @ApiResponse(responseCode = "403", description = "Not authorized to access the user verification code for website claiming.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "0", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        parameters = {
            @Parameter(name = "adAccountId", description = "Unique identifier of an ad account.")
        },
        security = {
            @SecurityRequirement(name = "pinterest_oauth2", scopes = { "user_accounts:read" }),
            @SecurityRequirement(name = "client_credentials", scopes = { "user_accounts:read" })
        }
    )
    @Get(uri="/user_account/websites/verification")
    @Produces(value = {"application/json"})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<UserWebsiteVerificationCode> websiteVerificationGet(
        @QueryValue(value="ad_account_id") @Nullable @Pattern(regexp="^\\d+$") @Size(max=18) String adAccountId
    ) {
        // TODO implement websiteVerificationGet();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }

}
