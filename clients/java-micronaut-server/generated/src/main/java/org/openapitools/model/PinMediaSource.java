/*
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.model.PinMediaSourceImageBase64;
import org.openapitools.model.PinMediaSourceImageURL;
import org.openapitools.model.PinMediaSourceImagesBase64;
import org.openapitools.model.PinMediaSourceImagesURL;
import org.openapitools.model.PinMediaSourceImagesURLItemsInner;
import org.openapitools.model.PinMediaSourcePinURL;
import org.openapitools.model.PinMediaSourceVideoID;
import com.fasterxml.jackson.annotation.*;

import javax.validation.constraints.*;
import javax.validation.Valid;
import io.micronaut.core.annotation.*;
import javax.annotation.Generated;
import io.swagger.v3.oas.annotations.media.Schema;

/**
 * Pin media source.
 */
@Schema(name = "PinMediaSource", description = "Pin media source.")
@JsonPropertyOrder({
  PinMediaSource.JSON_PROPERTY_SOURCE_TYPE,
  PinMediaSource.JSON_PROPERTY_CONTENT_TYPE,
  PinMediaSource.JSON_PROPERTY_DATA,
  PinMediaSource.JSON_PROPERTY_IS_STANDARD,
  PinMediaSource.JSON_PROPERTY_URL,
  PinMediaSource.JSON_PROPERTY_COVER_IMAGE_URL,
  PinMediaSource.JSON_PROPERTY_COVER_IMAGE_CONTENT_TYPE,
  PinMediaSource.JSON_PROPERTY_COVER_IMAGE_DATA,
  PinMediaSource.JSON_PROPERTY_MEDIA_ID,
  PinMediaSource.JSON_PROPERTY_ITEMS,
  PinMediaSource.JSON_PROPERTY_INDEX,
  PinMediaSource.JSON_PROPERTY_IS_AFFILIATE_LINK
})
@JsonTypeName("PinMediaSource")
@Generated(value="org.openapitools.codegen.languages.JavaMicronautServerCodegen", date="2024-11-05T02:03:37.829873561Z[Etc/UTC]", comments = "Generator version: 7.9.0")
@JsonIgnoreProperties(
  value = "source_type", // ignore manually set source_type, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the source_type to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "source_type", visible = true)
@JsonSubTypes({
  @JsonSubTypes.Type(value = PinMediaSourceImageBase64.class, name = "image_base64"),
  @JsonSubTypes.Type(value = PinMediaSourceImageURL.class, name = "image_url"),
  @JsonSubTypes.Type(value = PinMediaSourceImagesBase64.class, name = "multiple_image_base64"),
  @JsonSubTypes.Type(value = PinMediaSourceImagesURL.class, name = "multiple_image_urls"),
  @JsonSubTypes.Type(value = PinMediaSourcePinURL.class, name = "pin_url"),
  @JsonSubTypes.Type(value = PinMediaSourceVideoID.class, name = "video_id"),
})

@Introspected
public class PinMediaSource {
    /**
     * Gets or Sets sourceType
     */
    public enum SourceTypeEnum {
        PIN_URL("pin_url");

        private String value;

        SourceTypeEnum(String value) {
            this.value = value;
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        @JsonCreator
        public static SourceTypeEnum fromValue(String value) {
            for (SourceTypeEnum b : SourceTypeEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }
    }
    public static final String JSON_PROPERTY_SOURCE_TYPE = "source_type";
    protected SourceTypeEnum sourceType;

    /**
     * Gets or Sets contentType
     */
    public enum ContentTypeEnum {
        JPEG("image/jpeg"),
        PNG("image/png");

        private String value;

        ContentTypeEnum(String value) {
            this.value = value;
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        @JsonCreator
        public static ContentTypeEnum fromValue(String value) {
            for (ContentTypeEnum b : ContentTypeEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }
    }
    public static final String JSON_PROPERTY_CONTENT_TYPE = "content_type";
    private ContentTypeEnum contentType;

    public static final String JSON_PROPERTY_DATA = "data";
    private String data;

    public static final String JSON_PROPERTY_IS_STANDARD = "is_standard";
    private Boolean isStandard = true;

    public static final String JSON_PROPERTY_URL = "url";
    private String url;

    public static final String JSON_PROPERTY_COVER_IMAGE_URL = "cover_image_url";
    private String coverImageUrl;

    /**
     * Content type for cover image Base64.
     */
    public enum CoverImageContentTypeEnum {
        JPEG("image/jpeg"),
        PNG("image/png");

        private String value;

        CoverImageContentTypeEnum(String value) {
            this.value = value;
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        @JsonCreator
        public static CoverImageContentTypeEnum fromValue(String value) {
            for (CoverImageContentTypeEnum b : CoverImageContentTypeEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }
    }
    public static final String JSON_PROPERTY_COVER_IMAGE_CONTENT_TYPE = "cover_image_content_type";
    private CoverImageContentTypeEnum coverImageContentType;

    public static final String JSON_PROPERTY_COVER_IMAGE_DATA = "cover_image_data";
    private String coverImageData;

    public static final String JSON_PROPERTY_MEDIA_ID = "media_id";
    private String mediaId;

    public static final String JSON_PROPERTY_ITEMS = "items";
    private List<@Valid PinMediaSourceImagesURLItemsInner> items = new ArrayList<>();

    public static final String JSON_PROPERTY_INDEX = "index";
    private Integer index;

    public static final String JSON_PROPERTY_IS_AFFILIATE_LINK = "is_affiliate_link";
    private Boolean isAffiliateLink = false;

    public PinMediaSource(SourceTypeEnum sourceType, ContentTypeEnum contentType, String data, String url, String mediaId, List<@Valid PinMediaSourceImagesURLItemsInner> items) {
        this.sourceType = sourceType;
        this.contentType = contentType;
        this.data = data;
        this.url = url;
        this.mediaId = mediaId;
        this.items = items;
    }

    public PinMediaSource sourceType(SourceTypeEnum sourceType) {
        this.sourceType = sourceType;
        return this;
    }

    /**
     * Get sourceType
     * @return sourceType
     */
    @NotNull
    @Schema(name = "source_type", requiredMode = Schema.RequiredMode.REQUIRED)
    @JsonProperty(JSON_PROPERTY_SOURCE_TYPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public SourceTypeEnum getSourceType() {
        return sourceType;
    }

    @JsonProperty(JSON_PROPERTY_SOURCE_TYPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setSourceType(SourceTypeEnum sourceType) {
        this.sourceType = sourceType;
    }

    public PinMediaSource contentType(ContentTypeEnum contentType) {
        this.contentType = contentType;
        return this;
    }

    /**
     * Get contentType
     * @return contentType
     */
    @NotNull
    @Schema(name = "content_type", requiredMode = Schema.RequiredMode.REQUIRED)
    @JsonProperty(JSON_PROPERTY_CONTENT_TYPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public ContentTypeEnum getContentType() {
        return contentType;
    }

    @JsonProperty(JSON_PROPERTY_CONTENT_TYPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setContentType(ContentTypeEnum contentType) {
        this.contentType = contentType;
    }

    public PinMediaSource data(String data) {
        this.data = data;
        return this;
    }

    /**
     * Get data
     * @return data
     */
    @NotNull
    @Pattern(regexp="[a-zA-Z0-9+/=]+")
    @Schema(name = "data", requiredMode = Schema.RequiredMode.REQUIRED)
    @JsonProperty(JSON_PROPERTY_DATA)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getData() {
        return data;
    }

    @JsonProperty(JSON_PROPERTY_DATA)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setData(String data) {
        this.data = data;
    }

    public PinMediaSource isStandard(Boolean isStandard) {
        this.isStandard = isStandard;
        return this;
    }

    /**
     * Set the parameter to false to create the new simplified Pin instead of the standard pin. Currently the field is only available to a list of beta users.
     * @return isStandard
     */
    @Nullable
    @Schema(name = "is_standard", description = "Set the parameter to false to create the new simplified Pin instead of the standard pin. Currently the field is only available to a list of beta users.", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
    @JsonProperty(JSON_PROPERTY_IS_STANDARD)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Boolean getIsStandard() {
        return isStandard;
    }

    @JsonProperty(JSON_PROPERTY_IS_STANDARD)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setIsStandard(Boolean isStandard) {
        this.isStandard = isStandard;
    }

    public PinMediaSource url(String url) {
        this.url = url;
        return this;
    }

    /**
     * Get url
     * @return url
     */
    @NotNull
    @Schema(name = "url", requiredMode = Schema.RequiredMode.REQUIRED)
    @JsonProperty(JSON_PROPERTY_URL)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getUrl() {
        return url;
    }

    @JsonProperty(JSON_PROPERTY_URL)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setUrl(String url) {
        this.url = url;
    }

    public PinMediaSource coverImageUrl(String coverImageUrl) {
        this.coverImageUrl = coverImageUrl;
        return this;
    }

    /**
     * Cover image url.
     * @return coverImageUrl
     */
    @Nullable
    @Schema(name = "cover_image_url", description = "Cover image url.", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
    @JsonProperty(JSON_PROPERTY_COVER_IMAGE_URL)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getCoverImageUrl() {
        return coverImageUrl;
    }

    @JsonProperty(JSON_PROPERTY_COVER_IMAGE_URL)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setCoverImageUrl(String coverImageUrl) {
        this.coverImageUrl = coverImageUrl;
    }

    public PinMediaSource coverImageContentType(CoverImageContentTypeEnum coverImageContentType) {
        this.coverImageContentType = coverImageContentType;
        return this;
    }

    /**
     * Content type for cover image Base64.
     * @return coverImageContentType
     */
    @Nullable
    @Schema(name = "cover_image_content_type", description = "Content type for cover image Base64.", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
    @JsonProperty(JSON_PROPERTY_COVER_IMAGE_CONTENT_TYPE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public CoverImageContentTypeEnum getCoverImageContentType() {
        return coverImageContentType;
    }

    @JsonProperty(JSON_PROPERTY_COVER_IMAGE_CONTENT_TYPE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setCoverImageContentType(CoverImageContentTypeEnum coverImageContentType) {
        this.coverImageContentType = coverImageContentType;
    }

    public PinMediaSource coverImageData(String coverImageData) {
        this.coverImageData = coverImageData;
        return this;
    }

    /**
     * Cover image Base64.
     * @return coverImageData
     */
    @Nullable
    @Schema(name = "cover_image_data", description = "Cover image Base64.", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
    @JsonProperty(JSON_PROPERTY_COVER_IMAGE_DATA)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getCoverImageData() {
        return coverImageData;
    }

    @JsonProperty(JSON_PROPERTY_COVER_IMAGE_DATA)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setCoverImageData(String coverImageData) {
        this.coverImageData = coverImageData;
    }

    public PinMediaSource mediaId(String mediaId) {
        this.mediaId = mediaId;
        return this;
    }

    /**
     * Get mediaId
     * @return mediaId
     */
    @NotNull
    @Pattern(regexp="^\\d+$")
    @Schema(name = "media_id", requiredMode = Schema.RequiredMode.REQUIRED)
    @JsonProperty(JSON_PROPERTY_MEDIA_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getMediaId() {
        return mediaId;
    }

    @JsonProperty(JSON_PROPERTY_MEDIA_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setMediaId(String mediaId) {
        this.mediaId = mediaId;
    }

    public PinMediaSource items(List<@Valid PinMediaSourceImagesURLItemsInner> items) {
        this.items = items;
        return this;
    }

    public PinMediaSource addItemsItem(PinMediaSourceImagesURLItemsInner itemsItem) {
        this.items.add(itemsItem);
        return this;
    }

    /**
     * Array with image objects.
     * @return items
     */
    @NotNull
    @Size(min=2, max=5)
    @Schema(name = "items", description = "Array with image objects.", requiredMode = Schema.RequiredMode.REQUIRED)
    @JsonProperty(JSON_PROPERTY_ITEMS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public List<@Valid PinMediaSourceImagesURLItemsInner> getItems() {
        return items;
    }

    @JsonProperty(JSON_PROPERTY_ITEMS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setItems(List<@Valid PinMediaSourceImagesURLItemsInner> items) {
        this.items = items;
    }

    public PinMediaSource index(Integer index) {
        this.index = index;
        return this;
    }

    /**
     * Get index
     * minimum: 0
     * @return index
     */
    @Nullable
    @Min(0)
    @Schema(name = "index", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
    @JsonProperty(JSON_PROPERTY_INDEX)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Integer getIndex() {
        return index;
    }

    @JsonProperty(JSON_PROPERTY_INDEX)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setIndex(Integer index) {
        this.index = index;
    }

    public PinMediaSource isAffiliateLink(Boolean isAffiliateLink) {
        this.isAffiliateLink = isAffiliateLink;
        return this;
    }

    /**
     * This is an affiliate link or sponsored product. The FTC requires disclosure for paid partnerships and affiliate products.
     * @return isAffiliateLink
     */
    @Nullable
    @Schema(name = "is_affiliate_link", description = "This is an affiliate link or sponsored product. The FTC requires disclosure for paid partnerships and affiliate products.", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
    @JsonProperty(JSON_PROPERTY_IS_AFFILIATE_LINK)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Boolean getIsAffiliateLink() {
        return isAffiliateLink;
    }

    @JsonProperty(JSON_PROPERTY_IS_AFFILIATE_LINK)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setIsAffiliateLink(Boolean isAffiliateLink) {
        this.isAffiliateLink = isAffiliateLink;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PinMediaSource pinMediaSource = (PinMediaSource) o;
        return Objects.equals(this.sourceType, pinMediaSource.sourceType) &&
            Objects.equals(this.contentType, pinMediaSource.contentType) &&
            Objects.equals(this.data, pinMediaSource.data) &&
            Objects.equals(this.isStandard, pinMediaSource.isStandard) &&
            Objects.equals(this.url, pinMediaSource.url) &&
            Objects.equals(this.coverImageUrl, pinMediaSource.coverImageUrl) &&
            Objects.equals(this.coverImageContentType, pinMediaSource.coverImageContentType) &&
            Objects.equals(this.coverImageData, pinMediaSource.coverImageData) &&
            Objects.equals(this.mediaId, pinMediaSource.mediaId) &&
            Objects.equals(this.items, pinMediaSource.items) &&
            Objects.equals(this.index, pinMediaSource.index) &&
            Objects.equals(this.isAffiliateLink, pinMediaSource.isAffiliateLink);
    }

    @Override
    public int hashCode() {
        return Objects.hash(sourceType, contentType, data, isStandard, url, coverImageUrl, coverImageContentType, coverImageData, mediaId, items, index, isAffiliateLink);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class PinMediaSource {\n");
        sb.append("    sourceType: ").append(toIndentedString(sourceType)).append("\n");
        sb.append("    contentType: ").append(toIndentedString(contentType)).append("\n");
        sb.append("    data: ").append(toIndentedString(data)).append("\n");
        sb.append("    isStandard: ").append(toIndentedString(isStandard)).append("\n");
        sb.append("    url: ").append(toIndentedString(url)).append("\n");
        sb.append("    coverImageUrl: ").append(toIndentedString(coverImageUrl)).append("\n");
        sb.append("    coverImageContentType: ").append(toIndentedString(coverImageContentType)).append("\n");
        sb.append("    coverImageData: ").append(toIndentedString(coverImageData)).append("\n");
        sb.append("    mediaId: ").append(toIndentedString(mediaId)).append("\n");
        sb.append("    items: ").append(toIndentedString(items)).append("\n");
        sb.append("    index: ").append(toIndentedString(index)).append("\n");
        sb.append("    isAffiliateLink: ").append(toIndentedString(isAffiliateLink)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

