/*
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonTypeName;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.*;

import javax.validation.constraints.*;
import javax.validation.Valid;
import io.micronaut.core.annotation.*;
import javax.annotation.Generated;
import io.swagger.v3.oas.annotations.media.Schema;

/**
 * ConversionApiResponseEventsInner
 */
@JsonPropertyOrder({
  ConversionApiResponseEventsInner.JSON_PROPERTY_STATUS,
  ConversionApiResponseEventsInner.JSON_PROPERTY_ERROR_MESSAGE,
  ConversionApiResponseEventsInner.JSON_PROPERTY_WARNING_MESSAGE
})
@JsonTypeName("ConversionApiResponse_events_inner")
@Generated(value="org.openapitools.codegen.languages.JavaMicronautServerCodegen", date="2024-11-05T02:03:37.829873561Z[Etc/UTC]", comments = "Generator version: 7.9.0")
@Introspected
public class ConversionApiResponseEventsInner {
    /**
     * Whether the event was processed successfully.
     */
    public enum StatusEnum {
        FAILED("failed"),
        PROCESSED("processed");

        private String value;

        StatusEnum(String value) {
            this.value = value;
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        @JsonCreator
        public static StatusEnum fromValue(String value) {
            for (StatusEnum b : StatusEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }
    }
    public static final String JSON_PROPERTY_STATUS = "status";
    private StatusEnum status;

    public static final String JSON_PROPERTY_ERROR_MESSAGE = "error_message";
    private String errorMessage;

    public static final String JSON_PROPERTY_WARNING_MESSAGE = "warning_message";
    private String warningMessage;

    public ConversionApiResponseEventsInner(StatusEnum status) {
        this.status = status;
    }

    public ConversionApiResponseEventsInner status(StatusEnum status) {
        this.status = status;
        return this;
    }

    /**
     * Whether the event was processed successfully.
     * @return status
     */
    @NotNull
    @Schema(name = "status", example = "processed", description = "Whether the event was processed successfully.", requiredMode = Schema.RequiredMode.REQUIRED)
    @JsonProperty(JSON_PROPERTY_STATUS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public StatusEnum getStatus() {
        return status;
    }

    @JsonProperty(JSON_PROPERTY_STATUS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setStatus(StatusEnum status) {
        this.status = status;
    }

    public ConversionApiResponseEventsInner errorMessage(String errorMessage) {
        this.errorMessage = errorMessage;
        return this;
    }

    /**
     * Error message containing more information about why the event failed to be processed.
     * @return errorMessage
     */
    @Nullable
    @Schema(name = "error_message", description = "Error message containing more information about why the event failed to be processed.", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
    @JsonProperty(JSON_PROPERTY_ERROR_MESSAGE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getErrorMessage() {
        return errorMessage;
    }

    @JsonProperty(JSON_PROPERTY_ERROR_MESSAGE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setErrorMessage(String errorMessage) {
        this.errorMessage = errorMessage;
    }

    public ConversionApiResponseEventsInner warningMessage(String warningMessage) {
        this.warningMessage = warningMessage;
        return this;
    }

    /**
     * Warning messages about any fields in the event which are not standard. These are not critical to event processing.
     * @return warningMessage
     */
    @Nullable
    @Schema(name = "warning_message", description = "Warning messages about any fields in the event which are not standard. These are not critical to event processing.", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
    @JsonProperty(JSON_PROPERTY_WARNING_MESSAGE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getWarningMessage() {
        return warningMessage;
    }

    @JsonProperty(JSON_PROPERTY_WARNING_MESSAGE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setWarningMessage(String warningMessage) {
        this.warningMessage = warningMessage;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ConversionApiResponseEventsInner conversionApiResponseEventsInner = (ConversionApiResponseEventsInner) o;
        return Objects.equals(this.status, conversionApiResponseEventsInner.status) &&
            Objects.equals(this.errorMessage, conversionApiResponseEventsInner.errorMessage) &&
            Objects.equals(this.warningMessage, conversionApiResponseEventsInner.warningMessage);
    }

    @Override
    public int hashCode() {
        return Objects.hash(status, errorMessage, warningMessage);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class ConversionApiResponseEventsInner {\n");
        sb.append("    status: ").append(toIndentedString(status)).append("\n");
        sb.append("    errorMessage: ").append(toIndentedString(errorMessage)).append("\n");
        sb.append("    warningMessage: ").append(toIndentedString(warningMessage)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

