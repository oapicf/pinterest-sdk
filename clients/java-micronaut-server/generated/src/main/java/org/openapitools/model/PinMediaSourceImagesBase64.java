/*
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.model.PinMediaSourceImagesBase64ItemsInner;
import com.fasterxml.jackson.annotation.*;

import javax.validation.constraints.*;
import javax.validation.Valid;
import io.micronaut.core.annotation.*;
import javax.annotation.Generated;
import io.swagger.v3.oas.annotations.media.Schema;

/**
 * Multiple Base64-encoded images media source
 */
@Schema(name = "PinMediaSourceImagesBase64", description = "Multiple Base64-encoded images media source")
@JsonPropertyOrder({
  PinMediaSourceImagesBase64.JSON_PROPERTY_SOURCE_TYPE,
  PinMediaSourceImagesBase64.JSON_PROPERTY_ITEMS,
  PinMediaSourceImagesBase64.JSON_PROPERTY_INDEX
})
@JsonTypeName("PinMediaSourceImagesBase64")
@Generated(value="org.openapitools.codegen.languages.JavaMicronautServerCodegen", date="2024-11-05T02:03:37.829873561Z[Etc/UTC]", comments = "Generator version: 7.9.0")
@Introspected
public class PinMediaSourceImagesBase64 {
    /**
     * Gets or Sets sourceType
     */
    public enum SourceTypeEnum {
        MULTIPLE_IMAGE_BASE64("multiple_image_base64");

        private String value;

        SourceTypeEnum(String value) {
            this.value = value;
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        @JsonCreator
        public static SourceTypeEnum fromValue(String value) {
            for (SourceTypeEnum b : SourceTypeEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }
    }
    public static final String JSON_PROPERTY_SOURCE_TYPE = "source_type";
    private SourceTypeEnum sourceType;

    public static final String JSON_PROPERTY_ITEMS = "items";
    private List<@Valid PinMediaSourceImagesBase64ItemsInner> items = new ArrayList<>();

    public static final String JSON_PROPERTY_INDEX = "index";
    private Integer index;

    public PinMediaSourceImagesBase64(List<@Valid PinMediaSourceImagesBase64ItemsInner> items) {
        this.items = items;
    }

    public PinMediaSourceImagesBase64 sourceType(SourceTypeEnum sourceType) {
        this.sourceType = sourceType;
        return this;
    }

    /**
     * Get sourceType
     * @return sourceType
     */
    @Nullable
    @Schema(name = "source_type", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
    @JsonProperty(JSON_PROPERTY_SOURCE_TYPE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public SourceTypeEnum getSourceType() {
        return sourceType;
    }

    @JsonProperty(JSON_PROPERTY_SOURCE_TYPE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setSourceType(SourceTypeEnum sourceType) {
        this.sourceType = sourceType;
    }

    public PinMediaSourceImagesBase64 items(List<@Valid PinMediaSourceImagesBase64ItemsInner> items) {
        this.items = items;
        return this;
    }

    public PinMediaSourceImagesBase64 addItemsItem(PinMediaSourceImagesBase64ItemsInner itemsItem) {
        this.items.add(itemsItem);
        return this;
    }

    /**
     * Array with image objects.
     * @return items
     */
    @NotNull
    @Size(min=2, max=5)
    @Schema(name = "items", description = "Array with image objects.", requiredMode = Schema.RequiredMode.REQUIRED)
    @JsonProperty(JSON_PROPERTY_ITEMS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public List<@Valid PinMediaSourceImagesBase64ItemsInner> getItems() {
        return items;
    }

    @JsonProperty(JSON_PROPERTY_ITEMS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setItems(List<@Valid PinMediaSourceImagesBase64ItemsInner> items) {
        this.items = items;
    }

    public PinMediaSourceImagesBase64 index(Integer index) {
        this.index = index;
        return this;
    }

    /**
     * Get index
     * minimum: 0
     * @return index
     */
    @Nullable
    @Min(0)
    @Schema(name = "index", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
    @JsonProperty(JSON_PROPERTY_INDEX)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Integer getIndex() {
        return index;
    }

    @JsonProperty(JSON_PROPERTY_INDEX)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setIndex(Integer index) {
        this.index = index;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PinMediaSourceImagesBase64 pinMediaSourceImagesBase64 = (PinMediaSourceImagesBase64) o;
        return Objects.equals(this.sourceType, pinMediaSourceImagesBase64.sourceType) &&
            Objects.equals(this.items, pinMediaSourceImagesBase64.items) &&
            Objects.equals(this.index, pinMediaSourceImagesBase64.index);
    }

    @Override
    public int hashCode() {
        return Objects.hash(sourceType, items, index);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class PinMediaSourceImagesBase64 {\n");
        sb.append("    sourceType: ").append(toIndentedString(sourceType)).append("\n");
        sb.append("    items: ").append(toIndentedString(items)).append("\n");
        sb.append("    index: ").append(toIndentedString(index)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

