--  Pinterest REST API
--  Pinterest's REST API
--
--  The version of the OpenAPI document: 5.14.0
--  Contact: blah+oapicf@cliffano.com
--
--  NOTE: This package is auto generated by OpenAPI-Generator 7.9.0.
--  https://openapi-generator.tech
--  Do not edit the class manually.

pragma Warnings (Off, "*is not referenced");
with Swagger.Streams;
with Swagger.Servers.Operation;
package body .Skeletons is
   pragma Style_Checks ("-bmrIu");
   pragma Warnings (Off, "*use clause for package*");

   use Swagger.Streams;

   Media_List_1 : aliased constant Swagger.Mime_List := (
     1 => Swagger.Mime_Json);   Media_List_2 : aliased constant Swagger.Mime_List := (
     1 => Swagger.Mime_Form);

   package body Skeleton is


      package API_Ad_Account_Analytics is
         new Swagger.Servers.Operation
            (Handler => Ad_Account_Analytics,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/analytics",
             Mimes   => Media_List_1'Access);

      --  Get ad account analytics
      procedure Ad_Account_Analytics
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Ad_Account_Id : Swagger.UString;
         Start_Date : Swagger.Date;
         End_Date : Swagger.Date;
         Columns : Swagger.UString_Vectors.Vector;
         Granularity : Granularity_Type;
         Click_Window_Days : Swagger.Nullable_Integer;
         Engagement_Window_Days : Swagger.Nullable_Integer;
         View_Window_Days : Swagger.Nullable_Integer;
         Conversion_Report_Time : Swagger.Nullable_UString;
         Result : .Models.AdAccountAnalyticsResponseInner_Type_Vectors.Vector;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         Start_Date := To_Swagger.Date (Swagger.Servers.Get_Query_Parameter (Req, "start_date"));

         End_Date := To_Swagger.Date (Swagger.Servers.Get_Query_Parameter (Req, "end_date"));

         Columns := To_Swagger.UString_Vectors.Vector (Swagger.Servers.Get_Query_Parameter (Req, "columns"));

         Granularity := To_Granularity_Type (Swagger.Servers.Get_Query_Parameter (Req, "granularity"));

         Click_Window_Days := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "click_window_days"));

         Engagement_Window_Days := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "engagement_window_days"));

         View_Window_Days := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "view_window_days"));

         Conversion_Report_Time := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "conversion_report_time"));

         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Ad_Account_Analytics
            (Ad_Account_Id,
             Start_Date,
             End_Date,
             Columns,
             Granularity,
             Click_Window_Days,
             Engagement_Window_Days,
             View_Window_Days,
             Conversion_Report_Time, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid ad account analytics parameters.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Ad_Account_Analytics;

      package API_Ad_Account_Targeting_Analytics_Get is
         new Swagger.Servers.Operation
            (Handler => Ad_Account_Targeting_Analytics_Get,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/targeting_analytics",
             Mimes   => Media_List_1'Access);

      --  Get targeting analytics for an ad account
      procedure Ad_Account_Targeting_Analytics_Get
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Ad_Account_Id : Swagger.UString;
         Start_Date : Swagger.Date;
         End_Date : Swagger.Date;
         Targeting_Types : .Models.AdsAnalyticsTargetingType_Type_Vectors.Vector;
         Columns : Swagger.UString_Vectors.Vector;
         Granularity : Granularity_Type;
         Click_Window_Days : Swagger.Nullable_Integer;
         Engagement_Window_Days : Swagger.Nullable_Integer;
         View_Window_Days : Swagger.Nullable_Integer;
         Conversion_Report_Time : Swagger.Nullable_UString;
         Attribution_Types : ConversionReportAttributionType_Type;
         Result : .Models.MetricsResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         Start_Date := To_Swagger.Date (Swagger.Servers.Get_Query_Parameter (Req, "start_date"));

         End_Date := To_Swagger.Date (Swagger.Servers.Get_Query_Parameter (Req, "end_date"));

         Targeting_Types := To_.Models.AdsAnalyticsTargetingType_Type_Vectors.Vector (Swagger.Servers.Get_Query_Parameter (Req, "targeting_types"));

         Columns := To_Swagger.UString_Vectors.Vector (Swagger.Servers.Get_Query_Parameter (Req, "columns"));

         Granularity := To_Granularity_Type (Swagger.Servers.Get_Query_Parameter (Req, "granularity"));

         Click_Window_Days := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "click_window_days"));

         Engagement_Window_Days := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "engagement_window_days"));

         View_Window_Days := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "view_window_days"));

         Conversion_Report_Time := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "conversion_report_time"));

         Attribution_Types := To_ConversionReportAttributionType_Type (Swagger.Servers.Get_Query_Parameter (Req, "attribution_types"));

         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Ad_Account_Targeting_Analytics_Get
            (Ad_Account_Id,
             Start_Date,
             End_Date,
             Targeting_Types,
             Columns,
             Granularity,
             Click_Window_Days,
             Engagement_Window_Days,
             View_Window_Days,
             Conversion_Report_Time,
             Attribution_Types, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Ad_Account_Targeting_Analytics_Get;

      package API_Ad_Accounts_Create is
         new Swagger.Servers.Operation
            (Handler => Ad_Accounts_Create,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/ad_accounts",
             Mimes   => Media_List_1'Access);

      --  Create ad account
      procedure Ad_Accounts_Create
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         Ad_Account_Create_Request_Type : AdAccountCreateRequest_Type;
         Result : .Models.AdAccount_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         
         Swagger.Servers.Read (Req, Media_List_1, Input);
         if Swagger.Is_Null (Input) then
            Context.Set_Error (415, "Invalid content");
            return;
         end if;

         .Models.Deserialize (Input, "AdAccountCreateRequest_Type", Ad_Account_Create_Request_Type);
         Impl.Ad_Accounts_Create
            (Ad_Account_Create_Request_Type, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Ad_Accounts_Create;

      package API_Ad_Accounts_Get is
         new Swagger.Servers.Operation
            (Handler => Ad_Accounts_Get,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}",
             Mimes   => Media_List_1'Access);

      --  Get ad account
      procedure Ad_Accounts_Get
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Ad_Account_Id : Swagger.UString;
         Result : .Models.AdAccount_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Ad_Accounts_Get
            (Ad_Account_Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Ad_Accounts_Get;

      package API_Ad_Accounts_List is
         new Swagger.Servers.Operation
            (Handler => Ad_Accounts_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/ad_accounts",
             Mimes   => Media_List_1'Access);

      --  List ad accounts
      procedure Ad_Accounts_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Bookmark : Swagger.Nullable_UString;
         Page_Size : Swagger.Nullable_Integer;
         Include_Shared_Accounts : Swagger.Nullable_Boolean;
         Result : .Models.AdAccountsList200Response_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         Bookmark := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "bookmark"));

         Page_Size := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "page_size"));

         Include_Shared_Accounts := To_Boolean (Swagger.Servers.Get_Query_Parameter (Req, "include_shared_accounts"));

         
         Impl.Ad_Accounts_List
            (Bookmark,
             Page_Size,
             Include_Shared_Accounts, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("response");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Ad_Accounts_List;

      package API_Analytics_Create_Mmm_Report is
         new Swagger.Servers.Operation
            (Handler => Analytics_Create_Mmm_Report,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/mmm_reports",
             Mimes   => Media_List_1'Access);

      --  Create a request for a Marketing Mix Modeling (MMM) report
      procedure Analytics_Create_Mmm_Report
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         Ad_Account_Id : Swagger.UString;
         Create_MMMReport_Request_Type : CreateMMMReportRequest_Type;
         Result : .Models.CreateMMMReportResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Swagger.Servers.Read (Req, Media_List_1, Input);
         if Swagger.Is_Null (Input) then
            Context.Set_Error (415, "Invalid content");
            return;
         end if;

         .Models.Deserialize (Input, "CreateMMMReportRequest_Type", Create_MMMReport_Request_Type);
         Impl.Analytics_Create_Mmm_Report
            (Ad_Account_Id,
             Create_MMMReport_Request_Type, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid ad account ads analytics mmm parameters");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Analytics_Create_Mmm_Report;

      package API_Analytics_Create_Report is
         new Swagger.Servers.Operation
            (Handler => Analytics_Create_Report,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/reports",
             Mimes   => Media_List_1'Access);

      --  Create async request for an account analytics report
      procedure Analytics_Create_Report
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         Ad_Account_Id : Swagger.UString;
         Ads_Analytics_Create_Async_Request_Type : AdsAnalyticsCreateAsyncRequest_Type;
         Result : .Models.AdsAnalyticsCreateAsyncResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Swagger.Servers.Read (Req, Media_List_1, Input);
         if Swagger.Is_Null (Input) then
            Context.Set_Error (415, "Invalid content");
            return;
         end if;

         .Models.Deserialize (Input, "AdsAnalyticsCreateAsyncRequest_Type", Ads_Analytics_Create_Async_Request_Type);
         Impl.Analytics_Create_Report
            (Ad_Account_Id,
             Ads_Analytics_Create_Async_Request_Type, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid ad account ads analytics parameters.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Analytics_Create_Report;

      package API_Analytics_Create_Template_Report is
         new Swagger.Servers.Operation
            (Handler => Analytics_Create_Template_Report,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/templates/{template_id}/reports",
             Mimes   => Media_List_1'Access);

      --  Create async request for an analytics report using a template
      procedure Analytics_Create_Template_Report
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Ad_Account_Id : Swagger.UString;
         Template_Id : Swagger.UString;
         Start_Date : Swagger.Nullable_Date;
         End_Date : Swagger.Nullable_Date;
         Granularity : Granularity_Type;
         Result : .Models.AdsAnalyticsCreateAsyncResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         Start_Date := To_Swagger.Date (Swagger.Servers.Get_Query_Parameter (Req, "start_date"));

         End_Date := To_Swagger.Date (Swagger.Servers.Get_Query_Parameter (Req, "end_date"));

         Granularity := To_Granularity_Type (Swagger.Servers.Get_Query_Parameter (Req, "granularity"));

         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Template_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 2));

         Impl.Analytics_Create_Template_Report
            (Ad_Account_Id,
             Template_Id,
             Start_Date,
             End_Date,
             Granularity, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid ad account ads analytics template parameters.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Analytics_Create_Template_Report;

      package API_Analytics_Get_Mmm_Report is
         new Swagger.Servers.Operation
            (Handler => Analytics_Get_Mmm_Report,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/mmm_reports",
             Mimes   => Media_List_1'Access);

      --  Get advertiser Marketing Mix Modeling (MMM) report.
      procedure Analytics_Get_Mmm_Report
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Ad_Account_Id : Swagger.UString;
         Token : Swagger.UString;
         Result : .Models.GetMMMReportResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         Token := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "token"));

         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Analytics_Get_Mmm_Report
            (Ad_Account_Id,
             Token, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid ad account ads analytics parameters.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Analytics_Get_Mmm_Report;

      package API_Analytics_Get_Report is
         new Swagger.Servers.Operation
            (Handler => Analytics_Get_Report,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/reports",
             Mimes   => Media_List_1'Access);

      --  Get the account analytics report created by the async call
      procedure Analytics_Get_Report
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Ad_Account_Id : Swagger.UString;
         Token : Swagger.UString;
         Result : .Models.AdsAnalyticsGetAsyncResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         Token := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "token"));

         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Analytics_Get_Report
            (Ad_Account_Id,
             Token, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid ad account ads analytics parameters.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Analytics_Get_Report;

      package API_Sandbox_Delete is
         new Swagger.Servers.Operation
            (Handler => Sandbox_Delete,
             Method  => Swagger.Servers.DELETE,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/sandbox",
             Mimes   => Media_List_1'Access);

      --  Delete ads data for ad account in API Sandbox
      procedure Sandbox_Delete
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Ad_Account_Id : Swagger.UString;
         Result : Swagger.UString;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Sandbox_Delete
            (Ad_Account_Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("OK");

            Stream.Start_Document;
            if not Value..Is_Null then
               Stream.Write_Entity ("", Result);
            end if;
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid ad account id.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Sandbox_Delete;

      package API_Templates_List is
         new Swagger.Servers.Operation
            (Handler => Templates_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/templates",
             Mimes   => Media_List_1'Access);

      --  List templates
      procedure Templates_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Ad_Account_Id : Swagger.UString;
         Page_Size : Swagger.Nullable_Integer;
         Order : Swagger.Nullable_UString;
         Bookmark : Swagger.Nullable_UString;
         Result : .Models.TemplatesList200Response_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         Page_Size := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "page_size"));

         Order := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "order"));

         Bookmark := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "bookmark"));

         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Templates_List
            (Ad_Account_Id,
             Page_Size,
             Order,
             Bookmark, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid ad account template parameters.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Templates_List;

      package API_Ad_Groups_Analytics is
         new Swagger.Servers.Operation
            (Handler => Ad_Groups_Analytics,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/ad_groups/analytics",
             Mimes   => Media_List_1'Access);

      --  Get ad group analytics
      procedure Ad_Groups_Analytics
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Ad_Account_Id : Swagger.UString;
         Start_Date : Swagger.Date;
         End_Date : Swagger.Date;
         Ad_Group_Ids : Swagger.UString_Vectors.Vector;
         Columns : Swagger.UString_Vectors.Vector;
         Granularity : Granularity_Type;
         Click_Window_Days : Swagger.Nullable_Integer;
         Engagement_Window_Days : Swagger.Nullable_Integer;
         View_Window_Days : Swagger.Nullable_Integer;
         Conversion_Report_Time : Swagger.Nullable_UString;
         Result : .Models.AdGroupsAnalyticsResponseInner_Type_Vectors.Vector;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         Start_Date := To_Swagger.Date (Swagger.Servers.Get_Query_Parameter (Req, "start_date"));

         End_Date := To_Swagger.Date (Swagger.Servers.Get_Query_Parameter (Req, "end_date"));

         Ad_Group_Ids := To_Swagger.UString_Vectors.Vector (Swagger.Servers.Get_Query_Parameter (Req, "ad_group_ids"));

         Columns := To_Swagger.UString_Vectors.Vector (Swagger.Servers.Get_Query_Parameter (Req, "columns"));

         Granularity := To_Granularity_Type (Swagger.Servers.Get_Query_Parameter (Req, "granularity"));

         Click_Window_Days := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "click_window_days"));

         Engagement_Window_Days := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "engagement_window_days"));

         View_Window_Days := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "view_window_days"));

         Conversion_Report_Time := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "conversion_report_time"));

         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Ad_Groups_Analytics
            (Ad_Account_Id,
             Start_Date,
             End_Date,
             Ad_Group_Ids,
             Columns,
             Granularity,
             Click_Window_Days,
             Engagement_Window_Days,
             View_Window_Days,
             Conversion_Report_Time, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid ad account group analytics parameters.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Ad_Groups_Analytics;

      package API_Ad_Groups_Audience_Sizing is
         new Swagger.Servers.Operation
            (Handler => Ad_Groups_Audience_Sizing,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/ad_groups/audience_sizing",
             Mimes   => Media_List_1'Access);

      --  Get audience sizing
      procedure Ad_Groups_Audience_Sizing
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         Ad_Account_Id : Swagger.UString;
         Ad_Group_Audience_Sizing_Request_Type : AdGroupAudienceSizingRequest_Type;
         Result : .Models.AdGroupAudienceSizingResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Swagger.Servers.Read (Req, Media_List_1, Input);
         if Swagger.Is_Null (Input) then
            Context.Set_Error (415, "Invalid content");
            return;
         end if;

         .Models.Deserialize (Input, "AdGroupAudienceSizingRequest_Type", Ad_Group_Audience_Sizing_Request_Type);
         Impl.Ad_Groups_Audience_Sizing
            (Ad_Account_Id,
             Ad_Group_Audience_Sizing_Request_Type, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid ad group audience sizing parameters.");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("No access to requested audience list or product group.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Ad_Groups_Audience_Sizing;

      package API_Ad_Groups_Bid_Floor_Get is
         new Swagger.Servers.Operation
            (Handler => Ad_Groups_Bid_Floor_Get,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/bid_floor",
             Mimes   => Media_List_1'Access);

      --  Get bid floors
      procedure Ad_Groups_Bid_Floor_Get
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         Ad_Account_Id : Swagger.UString;
         Bid_Floor_Request_Type : BidFloorRequest_Type;
         Result : .Models.BidFloor_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Swagger.Servers.Read (Req, Media_List_1, Input);
         if Swagger.Is_Null (Input) then
            Context.Set_Error (415, "Invalid content");
            return;
         end if;

         .Models.Deserialize (Input, "BidFloorRequest_Type", Bid_Floor_Request_Type);
         Impl.Ad_Groups_Bid_Floor_Get
            (Ad_Account_Id,
             Bid_Floor_Request_Type, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Ad_Groups_Bid_Floor_Get;

      package API_Ad_Groups_Create is
         new Swagger.Servers.Operation
            (Handler => Ad_Groups_Create,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/ad_groups",
             Mimes   => Media_List_1'Access);

      --  Create ad groups
      procedure Ad_Groups_Create
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         Ad_Account_Id : Swagger.UString;
         Ad_Group_Create_Request : .Models.AdGroupCreateRequest_Type_Vectors.Vector;
         Result : .Models.AdGroupArrayResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Swagger.Servers.Read (Req, Media_List_1, Input);
         if Swagger.Is_Null (Input) then
            Context.Set_Error (415, "Invalid content");
            return;
         end if;

         .Models.Deserialize (Input, "AdGroupCreateRequest", Ad_Group_Create_Request);
         Impl.Ad_Groups_Create
            (Ad_Account_Id,
             Ad_Group_Create_Request, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Ad_Groups_Create;

      package API_Ad_Groups_Get is
         new Swagger.Servers.Operation
            (Handler => Ad_Groups_Get,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/ad_groups/{ad_group_id}",
             Mimes   => Media_List_1'Access);

      --  Get ad group
      procedure Ad_Groups_Get
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Ad_Account_Id : Swagger.UString;
         Ad_Group_Id : Swagger.UString;
         Result : .Models.AdGroupResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Ad_Group_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 2));

         Impl.Ad_Groups_Get
            (Ad_Account_Id,
             Ad_Group_Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Ad_Groups_Get;

      package API_Ad_Groups_List is
         new Swagger.Servers.Operation
            (Handler => Ad_Groups_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/ad_groups",
             Mimes   => Media_List_1'Access);

      --  List ad groups
      procedure Ad_Groups_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Ad_Account_Id : Swagger.UString;
         Campaign_Ids : Swagger.UString_Vectors.Vector;
         Ad_Group_Ids : Swagger.UString_Vectors.Vector;
         Entity_Statuses : Swagger.UString_Vectors.Vector;
         Page_Size : Swagger.Nullable_Integer;
         Order : Swagger.Nullable_UString;
         Bookmark : Swagger.Nullable_UString;
         Translate_Interests_To_Names : Swagger.Nullable_Boolean;
         Result : .Models.AdGroupsList200Response_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         Campaign_Ids := To_Swagger.UString_Vectors.Vector (Swagger.Servers.Get_Query_Parameter (Req, "campaign_ids"));

         Ad_Group_Ids := To_Swagger.UString_Vectors.Vector (Swagger.Servers.Get_Query_Parameter (Req, "ad_group_ids"));

         Entity_Statuses := To_Swagger.UString_Vectors.Vector (Swagger.Servers.Get_Query_Parameter (Req, "entity_statuses"));

         Page_Size := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "page_size"));

         Order := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "order"));

         Bookmark := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "bookmark"));

         Translate_Interests_To_Names := To_Boolean (Swagger.Servers.Get_Query_Parameter (Req, "translate_interests_to_names"));

         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Ad_Groups_List
            (Ad_Account_Id,
             Campaign_Ids,
             Ad_Group_Ids,
             Entity_Statuses,
             Page_Size,
             Order,
             Bookmark,
             Translate_Interests_To_Names, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid ad account group parameters.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Ad_Groups_List;

      package API_Ad_Groups_Targeting_Analytics_Get is
         new Swagger.Servers.Operation
            (Handler => Ad_Groups_Targeting_Analytics_Get,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/ad_groups/targeting_analytics",
             Mimes   => Media_List_1'Access);

      --  Get targeting analytics for ad groups
      procedure Ad_Groups_Targeting_Analytics_Get
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Ad_Account_Id : Swagger.UString;
         Ad_Group_Ids : Swagger.UString_Vectors.Vector;
         Start_Date : Swagger.Date;
         End_Date : Swagger.Date;
         Targeting_Types : .Models.AdsAnalyticsTargetingType_Type_Vectors.Vector;
         Columns : Swagger.UString_Vectors.Vector;
         Granularity : Granularity_Type;
         Click_Window_Days : Swagger.Nullable_Integer;
         Engagement_Window_Days : Swagger.Nullable_Integer;
         View_Window_Days : Swagger.Nullable_Integer;
         Conversion_Report_Time : Swagger.Nullable_UString;
         Attribution_Types : ConversionReportAttributionType_Type;
         Result : .Models.MetricsResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         Ad_Group_Ids := To_Swagger.UString_Vectors.Vector (Swagger.Servers.Get_Query_Parameter (Req, "ad_group_ids"));

         Start_Date := To_Swagger.Date (Swagger.Servers.Get_Query_Parameter (Req, "start_date"));

         End_Date := To_Swagger.Date (Swagger.Servers.Get_Query_Parameter (Req, "end_date"));

         Targeting_Types := To_.Models.AdsAnalyticsTargetingType_Type_Vectors.Vector (Swagger.Servers.Get_Query_Parameter (Req, "targeting_types"));

         Columns := To_Swagger.UString_Vectors.Vector (Swagger.Servers.Get_Query_Parameter (Req, "columns"));

         Granularity := To_Granularity_Type (Swagger.Servers.Get_Query_Parameter (Req, "granularity"));

         Click_Window_Days := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "click_window_days"));

         Engagement_Window_Days := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "engagement_window_days"));

         View_Window_Days := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "view_window_days"));

         Conversion_Report_Time := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "conversion_report_time"));

         Attribution_Types := To_ConversionReportAttributionType_Type (Swagger.Servers.Get_Query_Parameter (Req, "attribution_types"));

         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Ad_Groups_Targeting_Analytics_Get
            (Ad_Account_Id,
             Ad_Group_Ids,
             Start_Date,
             End_Date,
             Targeting_Types,
             Columns,
             Granularity,
             Click_Window_Days,
             Engagement_Window_Days,
             View_Window_Days,
             Conversion_Report_Time,
             Attribution_Types, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Ad_Groups_Targeting_Analytics_Get;

      package API_Ad_Groups_Update is
         new Swagger.Servers.Operation
            (Handler => Ad_Groups_Update,
             Method  => Swagger.Servers.PATCH,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/ad_groups",
             Mimes   => Media_List_1'Access);

      --  Update ad groups
      procedure Ad_Groups_Update
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         Ad_Account_Id : Swagger.UString;
         Ad_Group_Update_Request : .Models.AdGroupUpdateRequest_Type_Vectors.Vector;
         Result : .Models.AdGroupArrayResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Swagger.Servers.Read (Req, Media_List_1, Input);
         if Swagger.Is_Null (Input) then
            Context.Set_Error (415, "Invalid content");
            return;
         end if;

         .Models.Deserialize (Input, "AdGroupUpdateRequest", Ad_Group_Update_Request);
         Impl.Ad_Groups_Update
            (Ad_Account_Id,
             Ad_Group_Update_Request, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Ad_Groups_Update;

      package API_Ad_Previews_Create is
         new Swagger.Servers.Operation
            (Handler => Ad_Previews_Create,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/ad_previews",
             Mimes   => Media_List_1'Access);

      --  Create ad preview with pin or image
      procedure Ad_Previews_Create
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         Ad_Account_Id : Swagger.UString;
         Ad_Preview_Request_Type : AdPreviewRequest_Type;
         Result : .Models.AdPreviewURLResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Swagger.Servers.Read (Req, Media_List_1, Input);
         if Swagger.Is_Null (Input) then
            Context.Set_Error (415, "Invalid content");
            return;
         end if;

         .Models.Deserialize (Input, "AdPreviewRequest_Type", Ad_Preview_Request_Type);
         Impl.Ad_Previews_Create
            (Ad_Account_Id,
             Ad_Preview_Request_Type, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Successful ad preview creation.");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid Pin parameters response");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Ad_Previews_Create;

      package API_Ad_Targeting_Analytics_Get is
         new Swagger.Servers.Operation
            (Handler => Ad_Targeting_Analytics_Get,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/ads/targeting_analytics",
             Mimes   => Media_List_1'Access);

      --  Get targeting analytics for ads
      procedure Ad_Targeting_Analytics_Get
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Ad_Account_Id : Swagger.UString;
         Ad_Ids : Swagger.UString_Vectors.Vector;
         Start_Date : Swagger.Date;
         End_Date : Swagger.Date;
         Targeting_Types : .Models.AdsAnalyticsAdTargetingType_Type_Vectors.Vector;
         Columns : Swagger.UString_Vectors.Vector;
         Granularity : Granularity_Type;
         Click_Window_Days : Swagger.Nullable_Integer;
         Engagement_Window_Days : Swagger.Nullable_Integer;
         View_Window_Days : Swagger.Nullable_Integer;
         Conversion_Report_Time : Swagger.Nullable_UString;
         Attribution_Types : ConversionReportAttributionType_Type;
         Result : .Models.MetricsResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         Ad_Ids := To_Swagger.UString_Vectors.Vector (Swagger.Servers.Get_Query_Parameter (Req, "ad_ids"));

         Start_Date := To_Swagger.Date (Swagger.Servers.Get_Query_Parameter (Req, "start_date"));

         End_Date := To_Swagger.Date (Swagger.Servers.Get_Query_Parameter (Req, "end_date"));

         Targeting_Types := To_.Models.AdsAnalyticsAdTargetingType_Type_Vectors.Vector (Swagger.Servers.Get_Query_Parameter (Req, "targeting_types"));

         Columns := To_Swagger.UString_Vectors.Vector (Swagger.Servers.Get_Query_Parameter (Req, "columns"));

         Granularity := To_Granularity_Type (Swagger.Servers.Get_Query_Parameter (Req, "granularity"));

         Click_Window_Days := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "click_window_days"));

         Engagement_Window_Days := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "engagement_window_days"));

         View_Window_Days := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "view_window_days"));

         Conversion_Report_Time := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "conversion_report_time"));

         Attribution_Types := To_ConversionReportAttributionType_Type (Swagger.Servers.Get_Query_Parameter (Req, "attribution_types"));

         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Ad_Targeting_Analytics_Get
            (Ad_Account_Id,
             Ad_Ids,
             Start_Date,
             End_Date,
             Targeting_Types,
             Columns,
             Granularity,
             Click_Window_Days,
             Engagement_Window_Days,
             View_Window_Days,
             Conversion_Report_Time,
             Attribution_Types, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Ad_Targeting_Analytics_Get;

      package API_Ads_Analytics is
         new Swagger.Servers.Operation
            (Handler => Ads_Analytics,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/ads/analytics",
             Mimes   => Media_List_1'Access);

      --  Get ad analytics
      procedure Ads_Analytics
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Ad_Account_Id : Swagger.UString;
         Start_Date : Swagger.Date;
         End_Date : Swagger.Date;
         Columns : Swagger.UString_Vectors.Vector;
         Granularity : Granularity_Type;
         Ad_Ids : Swagger.UString_Vectors.Vector;
         Click_Window_Days : Swagger.Nullable_Integer;
         Engagement_Window_Days : Swagger.Nullable_Integer;
         View_Window_Days : Swagger.Nullable_Integer;
         Conversion_Report_Time : Swagger.Nullable_UString;
         Pin_Ids : Swagger.UString_Vectors.Vector;
         Campaign_Ids : Swagger.UString_Vectors.Vector;
         Result : .Models.AdsAnalyticsResponseInner_Type_Vectors.Vector;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         Start_Date := To_Swagger.Date (Swagger.Servers.Get_Query_Parameter (Req, "start_date"));

         End_Date := To_Swagger.Date (Swagger.Servers.Get_Query_Parameter (Req, "end_date"));

         Ad_Ids := To_Swagger.UString_Vectors.Vector (Swagger.Servers.Get_Query_Parameter (Req, "ad_ids"));

         Columns := To_Swagger.UString_Vectors.Vector (Swagger.Servers.Get_Query_Parameter (Req, "columns"));

         Granularity := To_Granularity_Type (Swagger.Servers.Get_Query_Parameter (Req, "granularity"));

         Click_Window_Days := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "click_window_days"));

         Engagement_Window_Days := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "engagement_window_days"));

         View_Window_Days := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "view_window_days"));

         Conversion_Report_Time := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "conversion_report_time"));

         Pin_Ids := To_Swagger.UString_Vectors.Vector (Swagger.Servers.Get_Query_Parameter (Req, "pin_ids"));

         Campaign_Ids := To_Swagger.UString_Vectors.Vector (Swagger.Servers.Get_Query_Parameter (Req, "campaign_ids"));

         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Ads_Analytics
            (Ad_Account_Id,
             Start_Date,
             End_Date,
             Columns,
             Granularity,
             Ad_Ids,
             Click_Window_Days,
             Engagement_Window_Days,
             View_Window_Days,
             Conversion_Report_Time,
             Pin_Ids,
             Campaign_Ids, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid ad account ads analytics parameters.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Ads_Analytics;

      package API_Ads_Create is
         new Swagger.Servers.Operation
            (Handler => Ads_Create,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/ads",
             Mimes   => Media_List_1'Access);

      --  Create ads
      procedure Ads_Create
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         Ad_Account_Id : Swagger.UString;
         Ad_Create_Request : .Models.AdCreateRequest_Type_Vectors.Vector;
         Result : .Models.AdArrayResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Swagger.Servers.Read (Req, Media_List_1, Input);
         if Swagger.Is_Null (Input) then
            Context.Set_Error (415, "Invalid content");
            return;
         end if;

         .Models.Deserialize (Input, "AdCreateRequest", Ad_Create_Request);
         Impl.Ads_Create
            (Ad_Account_Id,
             Ad_Create_Request, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Ads_Create;

      package API_Ads_Get is
         new Swagger.Servers.Operation
            (Handler => Ads_Get,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/ads/{ad_id}",
             Mimes   => Media_List_1'Access);

      --  Get ad
      procedure Ads_Get
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Ad_Account_Id : Swagger.UString;
         Ad_Id : Swagger.UString;
         Result : .Models.AdResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Ad_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 2));

         Impl.Ads_Get
            (Ad_Account_Id,
             Ad_Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Ads_Get;

      package API_Ads_List is
         new Swagger.Servers.Operation
            (Handler => Ads_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/ads",
             Mimes   => Media_List_1'Access);

      --  List ads
      procedure Ads_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Ad_Account_Id : Swagger.UString;
         Campaign_Ids : Swagger.UString_Vectors.Vector;
         Ad_Group_Ids : Swagger.UString_Vectors.Vector;
         Ad_Ids : Swagger.UString_Vectors.Vector;
         Entity_Statuses : Swagger.UString_Vectors.Vector;
         Page_Size : Swagger.Nullable_Integer;
         Order : Swagger.Nullable_UString;
         Bookmark : Swagger.Nullable_UString;
         Result : .Models.AdsList200Response_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         Campaign_Ids := To_Swagger.UString_Vectors.Vector (Swagger.Servers.Get_Query_Parameter (Req, "campaign_ids"));

         Ad_Group_Ids := To_Swagger.UString_Vectors.Vector (Swagger.Servers.Get_Query_Parameter (Req, "ad_group_ids"));

         Ad_Ids := To_Swagger.UString_Vectors.Vector (Swagger.Servers.Get_Query_Parameter (Req, "ad_ids"));

         Entity_Statuses := To_Swagger.UString_Vectors.Vector (Swagger.Servers.Get_Query_Parameter (Req, "entity_statuses"));

         Page_Size := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "page_size"));

         Order := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "order"));

         Bookmark := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "bookmark"));

         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Ads_List
            (Ad_Account_Id,
             Campaign_Ids,
             Ad_Group_Ids,
             Ad_Ids,
             Entity_Statuses,
             Page_Size,
             Order,
             Bookmark, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid ad account ads parameters.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Ads_List;

      package API_Ads_Update is
         new Swagger.Servers.Operation
            (Handler => Ads_Update,
             Method  => Swagger.Servers.PATCH,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/ads",
             Mimes   => Media_List_1'Access);

      --  Update ads
      procedure Ads_Update
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         Ad_Account_Id : Swagger.UString;
         Ad_Update_Request : .Models.AdUpdateRequest_Type_Vectors.Vector;
         Result : .Models.AdArrayResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Swagger.Servers.Read (Req, Media_List_1, Input);
         if Swagger.Is_Null (Input) then
            Context.Set_Error (415, "Invalid content");
            return;
         end if;

         .Models.Deserialize (Input, "AdUpdateRequest", Ad_Update_Request);
         Impl.Ads_Update
            (Ad_Account_Id,
             Ad_Update_Request, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Ads_Update;

      package API_Advanced_Auction_Items_Get_Post is
         new Swagger.Servers.Operation
            (Handler => Advanced_Auction_Items_Get_Post,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/advanced_auction/items/get",
             Mimes   => Media_List_1'Access);

      --  Get item bid options (POST)
      procedure Advanced_Auction_Items_Get_Post
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         Advanced_Auction_Items_Get_Request_Type : AdvancedAuctionItemsGetRequest_Type;
         Ad_Account_Id : Swagger.Nullable_UString;
         Result : .Models.AdvancedAuctionItems_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Catalogs_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "ad_account_id"));

         
         Swagger.Servers.Read (Req, Media_List_1, Input);
         if Swagger.Is_Null (Input) then
            Context.Set_Error (415, "Invalid content");
            return;
         end if;

         .Models.Deserialize (Input, "AdvancedAuctionItemsGetRequest_Type", Advanced_Auction_Items_Get_Request_Type);
         Impl.Advanced_Auction_Items_Get_Post
            (Advanced_Auction_Items_Get_Request_Type,
             Ad_Account_Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Response containing the bid option values for the requested retail catalog items. Items that don't exist or do not have bid options set won't be present in the response.");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid request parameters.");
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Not authenticated to get item bid options");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Not authorized to get item bid options");
            return;
         end if;
         if Context.Get_Status = 500 then
            Context.Set_Description ("Internal error");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Advanced_Auction_Items_Get_Post;

      package API_Advanced_Auction_Items_Submit_Post is
         new Swagger.Servers.Operation
            (Handler => Advanced_Auction_Items_Submit_Post,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/advanced_auction/items/submit",
             Mimes   => Media_List_1'Access);

      --  Operate on item level bid options
      procedure Advanced_Auction_Items_Submit_Post
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         Advanced_Auction_Items_Submit_Request_Type : AdvancedAuctionItemsSubmitRequest_Type;
         Ad_Account_Id : Swagger.Nullable_UString;
         Result : .Models.AdvancedAuctionProcessedItems_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Catalogs_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "ad_account_id"));

         
         Swagger.Servers.Read (Req, Media_List_1, Input);
         if Swagger.Is_Null (Input) then
            Context.Set_Error (415, "Invalid content");
            return;
         end if;

         .Models.Deserialize (Input, "AdvancedAuctionItemsSubmitRequest_Type", Advanced_Auction_Items_Submit_Request_Type);
         Impl.Advanced_Auction_Items_Submit_Post
            (Advanced_Auction_Items_Submit_Request_Type,
             Ad_Account_Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Response containing the results of the item bid options operations");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid request parameters.");
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Not authenticated to post item bid options");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Not authorized to post item bid options");
            return;
         end if;
         if Context.Get_Status = 500 then
            Context.Set_Description ("Internal error");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Advanced_Auction_Items_Submit_Post;

      package API_Audience_Insights_Get is
         new Swagger.Servers.Operation
            (Handler => Audience_Insights_Get,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/audience_insights",
             Mimes   => Media_List_1'Access);

      --  Get audience insights
      procedure Audience_Insights_Get
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Ad_Account_Id : Swagger.UString;
         Audience_Insight_Type : AudienceInsightType_Type;
         Result : .Models.AudienceInsightsResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         Audience_Insight_Type := To_AudienceInsightType_Type (Swagger.Servers.Get_Query_Parameter (Req, "audience_insight_type"));

         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Audience_Insights_Get
            (Ad_Account_Id,
             Audience_Insight_Type, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Audience_Insights_Get;

      package API_Audience_Insights_Scope_And_Type_Get is
         new Swagger.Servers.Operation
            (Handler => Audience_Insights_Scope_And_Type_Get,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/insights/audiences",
             Mimes   => Media_List_1'Access);

      --  Get audience insights scope and type
      procedure Audience_Insights_Scope_And_Type_Get
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Ad_Account_Id : Swagger.UString;
         Result : .Models.AudienceDefinitionResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Audience_Insights_Scope_And_Type_Get
            (Ad_Account_Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Audience_Insights_Scope_And_Type_Get;

      package API_Ad_Accounts_Audiences_Shared_Accounts_List is
         new Swagger.Servers.Operation
            (Handler => Ad_Accounts_Audiences_Shared_Accounts_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/audiences/shared/accounts",
             Mimes   => Media_List_1'Access);

      --  List accounts with access to an audience owned by an ad account
      procedure Ad_Accounts_Audiences_Shared_Accounts_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Ad_Account_Id : Swagger.UString;
         Audience_Id : Swagger.UString;
         Account_Type : AudienceAccountType_Type;
         Page_Size : Swagger.Nullable_Integer;
         Bookmark : Swagger.Nullable_UString;
         Result : .Models.AdAccountsAudiencesSharedAccountsList200Response_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         Audience_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "audience_id"));

         Account_Type := To_AudienceAccountType_Type (Swagger.Servers.Get_Query_Parameter (Req, "account_type"));

         Page_Size := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "page_size"));

         Bookmark := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "bookmark"));

         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Ad_Accounts_Audiences_Shared_Accounts_List
            (Ad_Account_Id,
             Audience_Id,
             Account_Type,
             Page_Size,
             Bookmark, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid ad account audiences shared accounts parameters.");
            return;
         end if;
         if Context.Get_Status = 404 then
            Context.Set_Description ("Shared accounts not found.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error.");
            return;
         end if;

      end Ad_Accounts_Audiences_Shared_Accounts_List;

      package API_Business_Account_Audiences_Shared_Accounts_List is
         new Swagger.Servers.Operation
            (Handler => Business_Account_Audiences_Shared_Accounts_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/businesses/{business_id}/audiences/shared/accounts",
             Mimes   => Media_List_1'Access);

      --  List accounts with access to an audience owned by a business
      procedure Business_Account_Audiences_Shared_Accounts_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Business_Id : Swagger.UString;
         Audience_Id : Swagger.UString;
         Account_Type : AudienceAccountType_Type;
         Page_Size : Swagger.Nullable_Integer;
         Bookmark : Swagger.Nullable_UString;
         Result : .Models.AdAccountsAudiencesSharedAccountsList200Response_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Biz_Access_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         Audience_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "audience_id"));

         Account_Type := To_AudienceAccountType_Type (Swagger.Servers.Get_Query_Parameter (Req, "account_type"));

         Page_Size := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "page_size"));

         Bookmark := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "bookmark"));

         
         Business_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Business_Account_Audiences_Shared_Accounts_List
            (Business_Id,
             Audience_Id,
             Account_Type,
             Page_Size,
             Bookmark, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid business audiences shared accounts parameters.");
            return;
         end if;
         if Context.Get_Status = 404 then
            Context.Set_Description ("Shared accounts not found.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error.");
            return;
         end if;

      end Business_Account_Audiences_Shared_Accounts_List;

      package API_Shared_Audiences_For_Business_List is
         new Swagger.Servers.Operation
            (Handler => Shared_Audiences_For_Business_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/businesses/{business_id}/audiences",
             Mimes   => Media_List_1'Access);

      --  List received audiences for a business
      procedure Shared_Audiences_For_Business_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Business_Id : Swagger.UString;
         Bookmark : Swagger.Nullable_UString;
         Order : Swagger.Nullable_UString;
         Page_Size : Swagger.Nullable_Integer;
         Result : .Models.AudiencesList200Response_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Biz_Access_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         Bookmark := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "bookmark"));

         Order := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "order"));

         Page_Size := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "page_size"));

         
         Business_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Shared_Audiences_For_Business_List
            (Business_Id,
             Bookmark,
             Order,
             Page_Size, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid parameters.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Shared_Audiences_For_Business_List;

      package API_Update_Ad_Account_To_Ad_Account_Shared_Audience is
         new Swagger.Servers.Operation
            (Handler => Update_Ad_Account_To_Ad_Account_Shared_Audience,
             Method  => Swagger.Servers.PATCH,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/audiences/ad_accounts/shared",
             Mimes   => Media_List_1'Access);

      --  Update audience sharing between ad accounts
      procedure Update_Ad_Account_To_Ad_Account_Shared_Audience
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         Ad_Account_Id : Swagger.UString;
         Shared_Audience_Type : SharedAudience_Type;
         Result : .Models.SharedAudienceResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Swagger.Servers.Read (Req, Media_List_1, Input);
         if Swagger.Is_Null (Input) then
            Context.Set_Error (415, "Invalid content");
            return;
         end if;

         .Models.Deserialize (Input, "SharedAudience_Type", Shared_Audience_Type);
         Impl.Update_Ad_Account_To_Ad_Account_Shared_Audience
            (Ad_Account_Id,
             Shared_Audience_Type, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid ad account id.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Update_Ad_Account_To_Ad_Account_Shared_Audience;

      package API_Update_Ad_Account_To_Business_Shared_Audience is
         new Swagger.Servers.Operation
            (Handler => Update_Ad_Account_To_Business_Shared_Audience,
             Method  => Swagger.Servers.PATCH,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/audiences/businesses/shared",
             Mimes   => Media_List_1'Access);

      --  Update audience sharing from an ad account to businesses
      procedure Update_Ad_Account_To_Business_Shared_Audience
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         Ad_Account_Id : Swagger.UString;
         Business_Shared_Audience_Type : BusinessSharedAudience_Type;
         Result : .Models.BusinessSharedAudienceResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Swagger.Servers.Read (Req, Media_List_1, Input);
         if Swagger.Is_Null (Input) then
            Context.Set_Error (415, "Invalid content");
            return;
         end if;

         .Models.Deserialize (Input, "BusinessSharedAudience_Type", Business_Shared_Audience_Type);
         Impl.Update_Ad_Account_To_Business_Shared_Audience
            (Ad_Account_Id,
             Business_Shared_Audience_Type, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid ad account id.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Update_Ad_Account_To_Business_Shared_Audience;

      package API_Update_Business_To_Ad_Account_Shared_Audience is
         new Swagger.Servers.Operation
            (Handler => Update_Business_To_Ad_Account_Shared_Audience,
             Method  => Swagger.Servers.PATCH,
             URI     => URI_Prefix & "/businesses/{business_id}/audiences/ad_accounts/shared",
             Mimes   => Media_List_1'Access);

      --  Update audience sharing from a business to ad accounts
      procedure Update_Business_To_Ad_Account_Shared_Audience
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         Business_Id : Swagger.UString;
         Shared_Audience_Type : SharedAudience_Type;
         Result : .Models.SharedAudienceResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Biz_Access_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         
         Business_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Swagger.Servers.Read (Req, Media_List_1, Input);
         if Swagger.Is_Null (Input) then
            Context.Set_Error (415, "Invalid content");
            return;
         end if;

         .Models.Deserialize (Input, "SharedAudience_Type", Shared_Audience_Type);
         Impl.Update_Business_To_Ad_Account_Shared_Audience
            (Business_Id,
             Shared_Audience_Type, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid parameters.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Update_Business_To_Ad_Account_Shared_Audience;

      package API_Update_Business_To_Business_Shared_Audience is
         new Swagger.Servers.Operation
            (Handler => Update_Business_To_Business_Shared_Audience,
             Method  => Swagger.Servers.PATCH,
             URI     => URI_Prefix & "/businesses/{business_id}/audiences/businesses/shared",
             Mimes   => Media_List_1'Access);

      --  Update audience sharing between businesses
      procedure Update_Business_To_Business_Shared_Audience
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         Business_Id : Swagger.UString;
         Business_Shared_Audience_Type : BusinessSharedAudience_Type;
         Result : .Models.BusinessSharedAudienceResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Biz_Access_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         
         Business_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Swagger.Servers.Read (Req, Media_List_1, Input);
         if Swagger.Is_Null (Input) then
            Context.Set_Error (415, "Invalid content");
            return;
         end if;

         .Models.Deserialize (Input, "BusinessSharedAudience_Type", Business_Shared_Audience_Type);
         Impl.Update_Business_To_Business_Shared_Audience
            (Business_Id,
             Business_Shared_Audience_Type, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid parameters.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Update_Business_To_Business_Shared_Audience;

      package API_Audiences_Create is
         new Swagger.Servers.Operation
            (Handler => Audiences_Create,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/audiences",
             Mimes   => Media_List_1'Access);

      --  Create audience
      procedure Audiences_Create
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         Ad_Account_Id : Swagger.UString;
         Audience_Create_Request_Type : AudienceCreateRequest_Type;
         Result : .Models.Audience_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Swagger.Servers.Read (Req, Media_List_1, Input);
         if Swagger.Is_Null (Input) then
            Context.Set_Error (415, "Invalid content");
            return;
         end if;

         .Models.Deserialize (Input, "AudienceCreateRequest_Type", Audience_Create_Request_Type);
         Impl.Audiences_Create
            (Ad_Account_Id,
             Audience_Create_Request_Type, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Audiences_Create;

      package API_Audiences_Create_Custom is
         new Swagger.Servers.Operation
            (Handler => Audiences_Create_Custom,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/audiences/custom",
             Mimes   => Media_List_1'Access);

      --  Create custom audience
      procedure Audiences_Create_Custom
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         Ad_Account_Id : Swagger.UString;
         Audience_Create_Custom_Request_Type : AudienceCreateCustomRequest_Type;
         Result : .Models.Audience_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Swagger.Servers.Read (Req, Media_List_1, Input);
         if Swagger.Is_Null (Input) then
            Context.Set_Error (415, "Invalid content");
            return;
         end if;

         .Models.Deserialize (Input, "AudienceCreateCustomRequest_Type", Audience_Create_Custom_Request_Type);
         Impl.Audiences_Create_Custom
            (Ad_Account_Id,
             Audience_Create_Custom_Request_Type, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Audiences_Create_Custom;

      package API_Audiences_Get is
         new Swagger.Servers.Operation
            (Handler => Audiences_Get,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/audiences/{audience_id}",
             Mimes   => Media_List_1'Access);

      --  Get audience
      procedure Audiences_Get
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Ad_Account_Id : Swagger.UString;
         Audience_Id : Swagger.UString;
         Result : .Models.Audience_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Audience_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 2));

         Impl.Audiences_Get
            (Ad_Account_Id,
             Audience_Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 404 then
            Context.Set_Description ("Audience not found.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error.");
            return;
         end if;

      end Audiences_Get;

      package API_Audiences_List is
         new Swagger.Servers.Operation
            (Handler => Audiences_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/audiences",
             Mimes   => Media_List_1'Access);

      --  List audiences
      procedure Audiences_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Ad_Account_Id : Swagger.UString;
         Bookmark : Swagger.Nullable_UString;
         Order : Swagger.Nullable_UString;
         Page_Size : Swagger.Nullable_Integer;
         Ownership_Type : Swagger.Nullable_UString;
         Result : .Models.AudiencesList200Response_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         Bookmark := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "bookmark"));

         Order := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "order"));

         Page_Size := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "page_size"));

         Ownership_Type := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "ownership_type"));

         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Audiences_List
            (Ad_Account_Id,
             Bookmark,
             Order,
             Page_Size,
             Ownership_Type, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid ad account audience parameters.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Audiences_List;

      package API_Audiences_Update is
         new Swagger.Servers.Operation
            (Handler => Audiences_Update,
             Method  => Swagger.Servers.PATCH,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/audiences/{audience_id}",
             Mimes   => Media_List_1'Access);

      --  Update audience
      procedure Audiences_Update
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         Ad_Account_Id : Swagger.UString;
         Audience_Id : Swagger.UString;
         Audience_Update_Request_Type : AudienceUpdateRequest_Type;
         Result : .Models.Audience_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Audience_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 2));

         Swagger.Servers.Read (Req, Media_List_1, Input);
         if Swagger.Is_Null (Input) then
            Context.Set_Error (415, "Invalid content");
            return;
         end if;

         .Models.Deserialize (Input, "AudienceUpdateRequest_Type", Audience_Update_Request_Type);
         Impl.Audiences_Update
            (Ad_Account_Id,
             Audience_Id,
             Audience_Update_Request_Type, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Audiences_Update;

      package API_Ads_Credit_Redeem is
         new Swagger.Servers.Operation
            (Handler => Ads_Credit_Redeem,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/ads_credit/redeem",
             Mimes   => Media_List_1'Access);

      --  Redeem ad credits
      procedure Ads_Credit_Redeem
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         Ad_Account_Id : Swagger.UString;
         Ads_Credit_Redeem_Request_Type : AdsCreditRedeemRequest_Type;
         Result : .Models.AdsCreditRedeemResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Billing_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Swagger.Servers.Read (Req, Media_List_1, Input);
         if Swagger.Is_Null (Input) then
            Context.Set_Error (415, "Invalid content");
            return;
         end if;

         .Models.Deserialize (Input, "AdsCreditRedeemRequest_Type", Ads_Credit_Redeem_Request_Type);
         Impl.Ads_Credit_Redeem
            (Ad_Account_Id,
             Ads_Credit_Redeem_Request_Type, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Successfully redeemed ad credits.");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Error thrown when unable to redeem offer code.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Ads_Credit_Redeem;

      package API_Ads_Credits_Discounts_Get is
         new Swagger.Servers.Operation
            (Handler => Ads_Credits_Discounts_Get,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/ads_credit/discounts",
             Mimes   => Media_List_1'Access);

      --  Get ads credit discounts
      procedure Ads_Credits_Discounts_Get
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Ad_Account_Id : Swagger.UString;
         Bookmark : Swagger.Nullable_UString;
         Page_Size : Swagger.Nullable_Integer;
         Result : .Models.AdsCreditsDiscountsGet200Response_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Billing_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         Bookmark := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "bookmark"));

         Page_Size := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "page_size"));

         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Ads_Credits_Discounts_Get
            (Ad_Account_Id,
             Bookmark,
             Page_Size, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error.");
            return;
         end if;

      end Ads_Credits_Discounts_Get;

      package API_Billing_Profiles_Get is
         new Swagger.Servers.Operation
            (Handler => Billing_Profiles_Get,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/billing_profiles",
             Mimes   => Media_List_1'Access);

      --  Get billing profiles
      procedure Billing_Profiles_Get
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Ad_Account_Id : Swagger.UString;
         Is_Active : Boolean;
         Bookmark : Swagger.Nullable_UString;
         Page_Size : Swagger.Nullable_Integer;
         Result : .Models.BillingProfilesGet200Response_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Billing_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         Is_Active := To_Boolean (Swagger.Servers.Get_Query_Parameter (Req, "is_active"));

         Bookmark := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "bookmark"));

         Page_Size := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "page_size"));

         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Billing_Profiles_Get
            (Ad_Account_Id,
             Is_Active,
             Bookmark,
             Page_Size, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error.");
            return;
         end if;

      end Billing_Profiles_Get;

      package API_Ssio_Accounts_Get is
         new Swagger.Servers.Operation
            (Handler => Ssio_Accounts_Get,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/ssio/accounts",
             Mimes   => Media_List_1'Access);

      --  Get Salesforce account details including bill_to information.
      procedure Ssio_Accounts_Get
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Ad_Account_Id : Swagger.UString;
         Result : .Models.SSIOAccountResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Ssio_Accounts_Get
            (Ad_Account_Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid request parameter.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Ssio_Accounts_Get;

      package API_Ssio_Insertion_Order_Create is
         new Swagger.Servers.Operation
            (Handler => Ssio_Insertion_Order_Create,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/ssio/insertion_orders",
             Mimes   => Media_List_1'Access);

      --  Create insertion order through SSIO.
      procedure Ssio_Insertion_Order_Create
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         Ad_Account_Id : Swagger.UString;
         S_SIOCreate_Insertion_Order_Request_Type : SSIOCreateInsertionOrderRequest_Type;
         Result : .Models.SSIOCreateInsertionOrderResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Swagger.Servers.Read (Req, Media_List_1, Input);
         if Swagger.Is_Null (Input) then
            Context.Set_Error (415, "Invalid content");
            return;
         end if;

         .Models.Deserialize (Input, "SSIOCreateInsertionOrderRequest_Type", S_SIOCreate_Insertion_Order_Request_Type);
         Impl.Ssio_Insertion_Order_Create
            (Ad_Account_Id,
             S_SIOCreate_Insertion_Order_Request_Type, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid request.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Ssio_Insertion_Order_Create;

      package API_Ssio_Insertion_Order_Edit is
         new Swagger.Servers.Operation
            (Handler => Ssio_Insertion_Order_Edit,
             Method  => Swagger.Servers.PATCH,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/ssio/insertion_orders",
             Mimes   => Media_List_1'Access);

      --  Edit insertion order through SSIO.
      procedure Ssio_Insertion_Order_Edit
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         Ad_Account_Id : Swagger.UString;
         S_SIOEdit_Insertion_Order_Request_Type : SSIOEditInsertionOrderRequest_Type;
         Result : .Models.SSIOEditInsertionOrderResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Swagger.Servers.Read (Req, Media_List_1, Input);
         if Swagger.Is_Null (Input) then
            Context.Set_Error (415, "Invalid content");
            return;
         end if;

         .Models.Deserialize (Input, "SSIOEditInsertionOrderRequest_Type", S_SIOEdit_Insertion_Order_Request_Type);
         Impl.Ssio_Insertion_Order_Edit
            (Ad_Account_Id,
             S_SIOEdit_Insertion_Order_Request_Type, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid request.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Ssio_Insertion_Order_Edit;

      package API_Ssio_Insertion_Orders_Status_Get_By_Ad_Account is
         new Swagger.Servers.Operation
            (Handler => Ssio_Insertion_Orders_Status_Get_By_Ad_Account,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/ssio/insertion_orders/status",
             Mimes   => Media_List_1'Access);

      --  Get insertion order status by ad account id.
      procedure Ssio_Insertion_Orders_Status_Get_By_Ad_Account
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Ad_Account_Id : Swagger.UString;
         Bookmark : Swagger.Nullable_UString;
         Page_Size : Swagger.Nullable_Integer;
         Result : .Models.SsioInsertionOrdersStatusGetByAdAccount200Response_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         Bookmark := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "bookmark"));

         Page_Size := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "page_size"));

         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Ssio_Insertion_Orders_Status_Get_By_Ad_Account
            (Ad_Account_Id,
             Bookmark,
             Page_Size, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid request parameter.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Ssio_Insertion_Orders_Status_Get_By_Ad_Account;

      package API_Ssio_Insertion_Orders_Status_Get_By_Pin_Order_Id is
         new Swagger.Servers.Operation
            (Handler => Ssio_Insertion_Orders_Status_Get_By_Pin_Order_Id,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/ssio/insertion_orders/{pin_order_id}/status",
             Mimes   => Media_List_1'Access);

      --  Get insertion order status by pin order id.
      procedure Ssio_Insertion_Orders_Status_Get_By_Pin_Order_Id
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Ad_Account_Id : Swagger.UString;
         Pin_Order_Id : Swagger.UString;
         Result : .Models.SSIOInsertionOrderStatusResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Pin_Order_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 2));

         Impl.Ssio_Insertion_Orders_Status_Get_By_Pin_Order_Id
            (Ad_Account_Id,
             Pin_Order_Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid request parameter.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Ssio_Insertion_Orders_Status_Get_By_Pin_Order_Id;

      package API_Ssio_Order_Lines_Get_By_Ad_Account is
         new Swagger.Servers.Operation
            (Handler => Ssio_Order_Lines_Get_By_Ad_Account,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/ssio/order_lines",
             Mimes   => Media_List_1'Access);

      --  Get Salesforce order lines by ad account id.
      procedure Ssio_Order_Lines_Get_By_Ad_Account
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Ad_Account_Id : Swagger.UString;
         Bookmark : Swagger.Nullable_UString;
         Page_Size : Swagger.Nullable_Integer;
         Pin_Order_Id : Swagger.Nullable_UString;
         Result : .Models.SsioOrderLinesGetByAdAccount200Response_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         Bookmark := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "bookmark"));

         Page_Size := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "page_size"));

         Pin_Order_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "pin_order_id"));

         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Ssio_Order_Lines_Get_By_Ad_Account
            (Ad_Account_Id,
             Bookmark,
             Page_Size,
             Pin_Order_Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid request parameter.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Ssio_Order_Lines_Get_By_Ad_Account;

      package API_Board_Sections_Create is
         new Swagger.Servers.Operation
            (Handler => Board_Sections_Create,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/boards/{board_id}/sections",
             Mimes   => Media_List_1'Access);

      --  Create board section
      procedure Board_Sections_Create
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         Board_Id : Swagger.UString;
         Board_Section_Type : BoardSection_Type;
         Ad_Account_Id : Swagger.Nullable_UString;
         Result : .Models.BoardSection_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "ad_account_id"));

         
         Board_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Swagger.Servers.Read (Req, Media_List_1, Input);
         if Swagger.Is_Null (Input) then
            Context.Set_Error (415, "Invalid content");
            return;
         end if;

         .Models.Deserialize (Input, "BoardSection_Type", Board_Section_Type);
         Impl.Board_Sections_Create
            (Board_Id,
             Board_Section_Type,
             Ad_Account_Id, Result, Context);
         if Context.Get_Status = 201 then
            Context.Set_Description ("response");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid board section parameters.");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Not authorized to create board sections.");
            return;
         end if;
         if Context.Get_Status = 409 then
            Context.Set_Description ("Could not get exclusive access to the board to create a new section.");
            return;
         end if;
         if Context.Get_Status = 500 then
            Context.Set_Description ("Could not create a new board section.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Board_Sections_Create;

      package API_Board_Sections_Delete is
         new Swagger.Servers.Operation
            (Handler => Board_Sections_Delete,
             Method  => Swagger.Servers.DELETE,
             URI     => URI_Prefix & "/boards/{board_id}/sections/{section_id}",
             Mimes   => Media_List_1'Access);

      --  Delete board section
      procedure Board_Sections_Delete
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Board_Id : Swagger.UString;
         Section_Id : Swagger.UString;
         Ad_Account_Id : Swagger.Nullable_UString;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "ad_account_id"));

         
         Board_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Section_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 2));

         Impl.Board_Sections_Delete
            (Board_Id,
             Section_Id,
             Ad_Account_Id, Context);

      end Board_Sections_Delete;

      package API_Board_Sections_List is
         new Swagger.Servers.Operation
            (Handler => Board_Sections_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/boards/{board_id}/sections",
             Mimes   => Media_List_1'Access);

      --  List board sections
      procedure Board_Sections_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Board_Id : Swagger.UString;
         Ad_Account_Id : Swagger.Nullable_UString;
         Bookmark : Swagger.Nullable_UString;
         Page_Size : Swagger.Nullable_Integer;
         Result : .Models.BoardSectionsList200Response_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "ad_account_id"));

         Bookmark := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "bookmark"));

         Page_Size := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "page_size"));

         
         Board_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Board_Sections_List
            (Board_Id,
             Ad_Account_Id,
             Bookmark,
             Page_Size, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("response");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Board_Sections_List;

      package API_Board_Sections_List_Pins is
         new Swagger.Servers.Operation
            (Handler => Board_Sections_List_Pins,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/boards/{board_id}/sections/{section_id}/pins",
             Mimes   => Media_List_1'Access);

      --  List Pins on board section
      procedure Board_Sections_List_Pins
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Board_Id : Swagger.UString;
         Section_Id : Swagger.UString;
         Ad_Account_Id : Swagger.Nullable_UString;
         Bookmark : Swagger.Nullable_UString;
         Page_Size : Swagger.Nullable_Integer;
         Result : .Models.BoardsListPins200Response_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Pins_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Pins_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "ad_account_id"));

         Bookmark := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "bookmark"));

         Page_Size := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "page_size"));

         
         Board_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Section_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 2));

         Impl.Board_Sections_List_Pins
            (Board_Id,
             Section_Id,
             Ad_Account_Id,
             Bookmark,
             Page_Size, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("response");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Not authorized to access Pins on board section.");
            return;
         end if;
         if Context.Get_Status = 404 then
            Context.Set_Description ("Board or section not found.");
            return;
         end if;
         if Context.Get_Status = 409 then
            Context.Set_Description ("Board section conflict.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Board_Sections_List_Pins;

      package API_Board_Sections_Update is
         new Swagger.Servers.Operation
            (Handler => Board_Sections_Update,
             Method  => Swagger.Servers.PATCH,
             URI     => URI_Prefix & "/boards/{board_id}/sections/{section_id}",
             Mimes   => Media_List_1'Access);

      --  Update board section
      procedure Board_Sections_Update
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         Board_Id : Swagger.UString;
         Section_Id : Swagger.UString;
         Board_Section_Type : BoardSection_Type;
         Ad_Account_Id : Swagger.Nullable_UString;
         Result : .Models.BoardSection_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "ad_account_id"));

         
         Board_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Section_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 2));

         Swagger.Servers.Read (Req, Media_List_1, Input);
         if Swagger.Is_Null (Input) then
            Context.Set_Error (415, "Invalid content");
            return;
         end if;

         .Models.Deserialize (Input, "BoardSection_Type", Board_Section_Type);
         Impl.Board_Sections_Update
            (Board_Id,
             Section_Id,
             Board_Section_Type,
             Ad_Account_Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("response");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid board section parameters.");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Not authorized to update board section.");
            return;
         end if;
         if Context.Get_Status = 409 then
            Context.Set_Description ("Board section conflict.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Board_Sections_Update;

      package API_Boards_Create is
         new Swagger.Servers.Operation
            (Handler => Boards_Create,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/boards",
             Mimes   => Media_List_1'Access);

      --  Create board
      procedure Boards_Create
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         Board_Type : Board_Type;
         Ad_Account_Id : Swagger.Nullable_UString;
         Result : .Models.Board_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "ad_account_id"));

         
         Swagger.Servers.Read (Req, Media_List_1, Input);
         if Swagger.Is_Null (Input) then
            Context.Set_Error (415, "Invalid content");
            return;
         end if;

         .Models.Deserialize (Input, "Board_Type", Board_Type);
         Impl.Boards_Create
            (Board_Type,
             Ad_Account_Id, Result, Context);
         if Context.Get_Status = 201 then
            Context.Set_Description ("response");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("The board name is invalid or duplicated.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Boards_Create;

      package API_Boards_Delete is
         new Swagger.Servers.Operation
            (Handler => Boards_Delete,
             Method  => Swagger.Servers.DELETE,
             URI     => URI_Prefix & "/boards/{board_id}",
             Mimes   => Media_List_1'Access);

      --  Delete board
      procedure Boards_Delete
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Board_Id : Swagger.UString;
         Ad_Account_Id : Swagger.Nullable_UString;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "ad_account_id"));

         
         Board_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Boards_Delete
            (Board_Id,
             Ad_Account_Id, Context);

      end Boards_Delete;

      package API_Boards_Get is
         new Swagger.Servers.Operation
            (Handler => Boards_Get,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/boards/{board_id}",
             Mimes   => Media_List_1'Access);

      --  Get board
      procedure Boards_Get
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Board_Id : Swagger.UString;
         Ad_Account_Id : Swagger.Nullable_UString;
         Result : .Models.Board_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "ad_account_id"));

         
         Board_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Boards_Get
            (Board_Id,
             Ad_Account_Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("response");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 404 then
            Context.Set_Description ("Board not found.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Boards_Get;

      package API_Boards_List is
         new Swagger.Servers.Operation
            (Handler => Boards_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/boards",
             Mimes   => Media_List_1'Access);

      --  List boards
      procedure Boards_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Ad_Account_Id : Swagger.Nullable_UString;
         Bookmark : Swagger.Nullable_UString;
         Page_Size : Swagger.Nullable_Integer;
         Privacy : Swagger.Nullable_UString;
         Result : .Models.BoardsList200Response_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "ad_account_id"));

         Bookmark := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "bookmark"));

         Page_Size := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "page_size"));

         Privacy := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "privacy"));

         
         Impl.Boards_List
            (Ad_Account_Id,
             Bookmark,
             Page_Size,
             Privacy, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("response");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Boards_List;

      package API_Boards_List_Pins is
         new Swagger.Servers.Operation
            (Handler => Boards_List_Pins,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/boards/{board_id}/pins",
             Mimes   => Media_List_1'Access);

      --  List Pins on board
      procedure Boards_List_Pins
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Board_Id : Swagger.UString;
         Bookmark : Swagger.Nullable_UString;
         Page_Size : Swagger.Nullable_Integer;
         Creative_Types : Swagger.UString_Vectors.Vector;
         Ad_Account_Id : Swagger.Nullable_UString;
         Pin_Metrics : Swagger.Nullable_Boolean;
         Result : .Models.BoardsListPins200Response_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Pins_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Pins_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         Bookmark := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "bookmark"));

         Page_Size := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "page_size"));

         Creative_Types := To_Swagger.UString_Vectors.Vector (Swagger.Servers.Get_Query_Parameter (Req, "creative_types"));

         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "ad_account_id"));

         Pin_Metrics := To_Boolean (Swagger.Servers.Get_Query_Parameter (Req, "pin_metrics"));

         
         Board_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Boards_List_Pins
            (Board_Id,
             Bookmark,
             Page_Size,
             Creative_Types,
             Ad_Account_Id,
             Pin_Metrics, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("response");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 404 then
            Context.Set_Description ("Board not found.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Boards_List_Pins;

      package API_Boards_Update is
         new Swagger.Servers.Operation
            (Handler => Boards_Update,
             Method  => Swagger.Servers.PATCH,
             URI     => URI_Prefix & "/boards/{board_id}",
             Mimes   => Media_List_1'Access);

      --  Update board
      procedure Boards_Update
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         Board_Id : Swagger.UString;
         Board_Update_Type : BoardUpdate_Type;
         Ad_Account_Id : Swagger.Nullable_UString;
         Result : .Models.Board_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "ad_account_id"));

         
         Board_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Swagger.Servers.Read (Req, Media_List_1, Input);
         if Swagger.Is_Null (Input) then
            Context.Set_Error (415, "Invalid content");
            return;
         end if;

         .Models.Deserialize (Input, "BoardUpdate_Type", Board_Update_Type);
         Impl.Boards_Update
            (Board_Id,
             Board_Update_Type,
             Ad_Account_Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("response");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid board parameters.");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Not authorized to update the board.");
            return;
         end if;
         if Context.Get_Status = 429 then
            Context.Set_Description ("This request exceeded a rate limit. This can happen if the client exceeds one of the published rate limits or if multiple write operations are applied to an object within a short time window.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Boards_Update;

      package API_Bulk_Download_Create is
         new Swagger.Servers.Operation
            (Handler => Bulk_Download_Create,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/bulk/download",
             Mimes   => Media_List_1'Access);

      --  Get advertiser entities in bulk
      procedure Bulk_Download_Create
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         Ad_Account_Id : Swagger.UString;
         Bulk_Download_Request_Type : BulkDownloadRequest_Type;
         Result : .Models.BulkDownloadResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Swagger.Servers.Read (Req, Media_List_1, Input);
         if Swagger.Is_Null (Input) then
            Context.Set_Error (415, "Invalid content");
            return;
         end if;

         .Models.Deserialize (Input, "BulkDownloadRequest_Type", Bulk_Download_Request_Type);
         Impl.Bulk_Download_Create
            (Ad_Account_Id,
             Bulk_Download_Request_Type, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Bulk_Download_Create;

      package API_Bulk_Request_Get is
         new Swagger.Servers.Operation
            (Handler => Bulk_Request_Get,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/bulk/{bulk_request_id}",
             Mimes   => Media_List_1'Access);

      --  Download advertiser entities in bulk
      procedure Bulk_Request_Get
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Ad_Account_Id : Swagger.UString;
         Bulk_Request_Id : Swagger.UString;
         Include_Details : Swagger.Nullable_Boolean;
         Result : .Models.BulkUpsertStatusResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         Include_Details := To_Boolean (Swagger.Servers.Get_Query_Parameter (Req, "include_details"));

         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Bulk_Request_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 2));

         Impl.Bulk_Request_Get
            (Ad_Account_Id,
             Bulk_Request_Id,
             Include_Details, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Bulk_Request_Get;

      package API_Bulk_Upsert_Create is
         new Swagger.Servers.Operation
            (Handler => Bulk_Upsert_Create,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/bulk/upsert",
             Mimes   => Media_List_1'Access);

      --  Create/update ad entities in bulk
      procedure Bulk_Upsert_Create
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         Ad_Account_Id : Swagger.UString;
         Bulk_Upsert_Request_Type : BulkUpsertRequest_Type;
         Result : .Models.BulkUpsertResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Swagger.Servers.Read (Req, Media_List_1, Input);
         if Swagger.Is_Null (Input) then
            Context.Set_Error (415, "Invalid content");
            return;
         end if;

         .Models.Deserialize (Input, "BulkUpsertRequest_Type", Bulk_Upsert_Request_Type);
         Impl.Bulk_Upsert_Create
            (Ad_Account_Id,
             Bulk_Upsert_Request_Type, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Bulk_Upsert_Create;

      package API_Asset_Group_Create is
         new Swagger.Servers.Operation
            (Handler => Asset_Group_Create,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/businesses/{business_id}/asset_groups",
             Mimes   => Media_List_1'Access);

      --  Create a new asset group.
      procedure Asset_Group_Create
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         Business_Id : Swagger.UString;
         Create_Asset_Group_Body_Type : CreateAssetGroupBody_Type;
         Result : .Models.CreateAssetGroupResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Biz_Access_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Biz_Access_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         
         Business_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Swagger.Servers.Read (Req, Media_List_1, Input);
         if Swagger.Is_Null (Input) then
            Context.Set_Error (415, "Invalid content");
            return;
         end if;

         .Models.Deserialize (Input, "CreateAssetGroupBody_Type", Create_Asset_Group_Body_Type);
         Impl.Asset_Group_Create
            (Business_Id,
             Create_Asset_Group_Body_Type, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid parameters.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Asset_Group_Create;

      package API_Asset_Group_Delete is
         new Swagger.Servers.Operation
            (Handler => Asset_Group_Delete,
             Method  => Swagger.Servers.DELETE,
             URI     => URI_Prefix & "/businesses/{business_id}/asset_groups",
             Mimes   => Media_List_1'Access);

      --  Delete asset groups.
      procedure Asset_Group_Delete
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         Business_Id : Swagger.UString;
         Delete_Asset_Group_Body_Type : DeleteAssetGroupBody_Type;
         Result : .Models.DeleteAssetGroupResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Biz_Access_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Biz_Access_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         
         Business_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Swagger.Servers.Read (Req, Media_List_1, Input);
         if Swagger.Is_Null (Input) then
            Context.Set_Error (415, "Invalid content");
            return;
         end if;

         .Models.Deserialize (Input, "DeleteAssetGroupBody_Type", Delete_Asset_Group_Body_Type);
         Impl.Asset_Group_Delete
            (Business_Id,
             Delete_Asset_Group_Body_Type, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid parameters.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Asset_Group_Delete;

      package API_Asset_Group_Update is
         new Swagger.Servers.Operation
            (Handler => Asset_Group_Update,
             Method  => Swagger.Servers.PATCH,
             URI     => URI_Prefix & "/businesses/{business_id}/asset_groups",
             Mimes   => Media_List_1'Access);

      --  Update asset groups.
      procedure Asset_Group_Update
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         Business_Id : Swagger.UString;
         Update_Asset_Group_Body_Type : UpdateAssetGroupBody_Type;
         Result : .Models.UpdateAssetGroupResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Biz_Access_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Biz_Access_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         
         Business_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Swagger.Servers.Read (Req, Media_List_1, Input);
         if Swagger.Is_Null (Input) then
            Context.Set_Error (415, "Invalid content");
            return;
         end if;

         .Models.Deserialize (Input, "UpdateAssetGroupBody_Type", Update_Asset_Group_Body_Type);
         Impl.Asset_Group_Update
            (Business_Id,
             Update_Asset_Group_Body_Type, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid parameters.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Asset_Group_Update;

      package API_Business_Asset_Members_Get is
         new Swagger.Servers.Operation
            (Handler => Business_Asset_Members_Get,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/businesses/{business_id}/assets/{asset_id}/members",
             Mimes   => Media_List_1'Access);

      --  Get members with access to asset
      procedure Business_Asset_Members_Get
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Business_Id : Swagger.UString;
         Asset_Id : Swagger.UString;
         Bookmark : Swagger.Nullable_UString;
         Page_Size : Swagger.Nullable_Integer;
         Start_Index : Swagger.Nullable_Integer;
         Result : .Models.BusinessAssetMembersGet200Response_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Biz_Access_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         Bookmark := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "bookmark"));

         Page_Size := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "page_size"));

         Start_Index := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "start_index"));

         
         Business_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Asset_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 2));

         Impl.Business_Asset_Members_Get
            (Business_Id,
             Asset_Id,
             Bookmark,
             Page_Size,
             Start_Index, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Sucess");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Business_Asset_Members_Get;

      package API_Business_Asset_Partners_Get is
         new Swagger.Servers.Operation
            (Handler => Business_Asset_Partners_Get,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/businesses/{business_id}/assets/{asset_id}/partners",
             Mimes   => Media_List_1'Access);

      --  Get partners with access to asset
      procedure Business_Asset_Partners_Get
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Business_Id : Swagger.UString;
         Asset_Id : Swagger.UString;
         Start_Index : Swagger.Nullable_Integer;
         Bookmark : Swagger.Nullable_UString;
         Page_Size : Swagger.Nullable_Integer;
         Result : .Models.BusinessAssetPartnersGet200Response_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Biz_Access_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         Start_Index := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "start_index"));

         Bookmark := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "bookmark"));

         Page_Size := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "page_size"));

         
         Business_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Asset_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 2));

         Impl.Business_Asset_Partners_Get
            (Business_Id,
             Asset_Id,
             Start_Index,
             Bookmark,
             Page_Size, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Sucess");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Business_Asset_Partners_Get;

      package API_Business_Assets_Get is
         new Swagger.Servers.Operation
            (Handler => Business_Assets_Get,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/businesses/{business_id}/assets",
             Mimes   => Media_List_1'Access);

      --  List business assets
      procedure Business_Assets_Get
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Business_Id : Swagger.UString;
         Permissions : .Models.PermissionsWithOwner_Type_Vectors.Vector;
         Child_Asset_Id : Swagger.Nullable_UString;
         Asset_Group_Id : Swagger.Nullable_UString;
         Asset_Type : Swagger.Nullable_UString;
         Start_Index : Swagger.Nullable_Integer;
         Bookmark : Swagger.Nullable_UString;
         Page_Size : Swagger.Nullable_Integer;
         Result : .Models.BusinessAssetsGet200Response_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Biz_Access_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         Permissions := To_.Models.PermissionsWithOwner_Type_Vectors.Vector (Swagger.Servers.Get_Query_Parameter (Req, "permissions"));

         Child_Asset_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "child_asset_id"));

         Asset_Group_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "asset_group_id"));

         Asset_Type := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "asset_type"));

         Start_Index := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "start_index"));

         Bookmark := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "bookmark"));

         Page_Size := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "page_size"));

         
         Business_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Business_Assets_Get
            (Business_Id,
             Permissions,
             Child_Asset_Id,
             Asset_Group_Id,
             Asset_Type,
             Start_Index,
             Bookmark,
             Page_Size, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Business_Assets_Get;

      package API_Business_Member_Assets_Get is
         new Swagger.Servers.Operation
            (Handler => Business_Member_Assets_Get,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/businesses/{business_id}/members/{member_id}/assets",
             Mimes   => Media_List_1'Access);

      --  Get assets assigned to a member
      procedure Business_Member_Assets_Get
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Business_Id : Swagger.UString;
         Member_Id : Swagger.UString;
         Asset_Type : Swagger.Nullable_UString;
         Start_Index : Swagger.Nullable_Integer;
         Bookmark : Swagger.Nullable_UString;
         Page_Size : Swagger.Nullable_Integer;
         Result : .Models.BusinessMemberAssetsGet200Response_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Biz_Access_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         Asset_Type := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "asset_type"));

         Start_Index := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "start_index"));

         Bookmark := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "bookmark"));

         Page_Size := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "page_size"));

         
         Business_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Member_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 2));

         Impl.Business_Member_Assets_Get
            (Business_Id,
             Member_Id,
             Asset_Type,
             Start_Index,
             Bookmark,
             Page_Size, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Business_Member_Assets_Get;

      package API_Business_Members_Asset_Access_Delete is
         new Swagger.Servers.Operation
            (Handler => Business_Members_Asset_Access_Delete,
             Method  => Swagger.Servers.DELETE,
             URI     => URI_Prefix & "/businesses/{business_id}/members/assets/access",
             Mimes   => Media_List_1'Access);

      --  Delete member access to asset
      procedure Business_Members_Asset_Access_Delete
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         Business_Id : Swagger.UString;
         Business_Members_Asset_Access_Delete_Request_Type : BusinessMembersAssetAccessDeleteRequest_Type;
         Result : .Models.DeleteMemberAccessResultsResponseArray_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Biz_Access_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         
         Business_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Swagger.Servers.Read (Req, Media_List_1, Input);
         if Swagger.Is_Null (Input) then
            Context.Set_Error (415, "Invalid content");
            return;
         end if;

         .Models.Deserialize (Input, "BusinessMembersAssetAccessDeleteRequest_Type", Business_Members_Asset_Access_Delete_Request_Type);
         Impl.Business_Members_Asset_Access_Delete
            (Business_Id,
             Business_Members_Asset_Access_Delete_Request_Type, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("response");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Business_Members_Asset_Access_Delete;

      package API_Business_Members_Asset_Access_Update is
         new Swagger.Servers.Operation
            (Handler => Business_Members_Asset_Access_Update,
             Method  => Swagger.Servers.PATCH,
             URI     => URI_Prefix & "/businesses/{business_id}/members/assets/access",
             Mimes   => Media_List_1'Access);

      --  Assign/Update member asset permissions
      procedure Business_Members_Asset_Access_Update
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         Business_Id : Swagger.UString;
         Update_Member_Asset_Access_Body_Type : UpdateMemberAssetAccessBody_Type;
         Result : .Models.UpdateMemberAssetsResultsResponseArray_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Biz_Access_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         
         Business_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Swagger.Servers.Read (Req, Media_List_1, Input);
         if Swagger.Is_Null (Input) then
            Context.Set_Error (415, "Invalid content");
            return;
         end if;

         .Models.Deserialize (Input, "UpdateMemberAssetAccessBody_Type", Update_Member_Asset_Access_Body_Type);
         Impl.Business_Members_Asset_Access_Update
            (Business_Id,
             Update_Member_Asset_Access_Body_Type, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("response");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Business_Members_Asset_Access_Update;

      package API_Business_Partner_Asset_Access_Get is
         new Swagger.Servers.Operation
            (Handler => Business_Partner_Asset_Access_Get,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/businesses/{business_id}/partners/{partner_id}/assets",
             Mimes   => Media_List_1'Access);

      --  Get assets assigned to a partner or assets assigned by a partner
      procedure Business_Partner_Asset_Access_Get
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Business_Id : Swagger.UString;
         Partner_Id : Swagger.UString;
         Partner_Type : .Models.PartnerType_Type;
         Asset_Type : Swagger.Nullable_UString;
         Start_Index : Swagger.Nullable_Integer;
         Page_Size : Swagger.Nullable_Integer;
         Bookmark : Swagger.Nullable_UString;
         Result : .Models.BusinessPartnerAssetAccessGet200Response_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Biz_Access_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         Partner_Type := To_.Models.PartnerType_Type (Swagger.Servers.Get_Query_Parameter (Req, "partner_type"));

         Asset_Type := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "asset_type"));

         Start_Index := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "start_index"));

         Page_Size := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "page_size"));

         Bookmark := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "bookmark"));

         
         Business_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Partner_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 2));

         Impl.Business_Partner_Asset_Access_Get
            (Business_Id,
             Partner_Id,
             Partner_Type,
             Asset_Type,
             Start_Index,
             Page_Size,
             Bookmark, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Business_Partner_Asset_Access_Get;

      package API_Delete_Partner_Asset_Access_Handler_Impl is
         new Swagger.Servers.Operation
            (Handler => Delete_Partner_Asset_Access_Handler_Impl,
             Method  => Swagger.Servers.DELETE,
             URI     => URI_Prefix & "/businesses/{business_id}/partners/assets",
             Mimes   => Media_List_1'Access);

      --  Delete partner access to asset
      procedure Delete_Partner_Asset_Access_Handler_Impl
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         Business_Id : Swagger.UString;
         Delete_Partner_Asset_Access_Body_Type : DeletePartnerAssetAccessBody_Type;
         Result : .Models.DeletePartnerAssetsResultsResponseArray_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Biz_Access_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         
         Business_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Swagger.Servers.Read (Req, Media_List_1, Input);
         if Swagger.Is_Null (Input) then
            Context.Set_Error (415, "Invalid content");
            return;
         end if;

         .Models.Deserialize (Input, "DeletePartnerAssetAccessBody_Type", Delete_Partner_Asset_Access_Body_Type);
         Impl.Delete_Partner_Asset_Access_Handler_Impl
            (Business_Id,
             Delete_Partner_Asset_Access_Body_Type, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Delete_Partner_Asset_Access_Handler_Impl;

      package API_Update_Partner_Asset_Access_Handler_Impl is
         new Swagger.Servers.Operation
            (Handler => Update_Partner_Asset_Access_Handler_Impl,
             Method  => Swagger.Servers.PATCH,
             URI     => URI_Prefix & "/businesses/{business_id}/partners/assets",
             Mimes   => Media_List_1'Access);

      --  Assign/Update partner asset permissions
      procedure Update_Partner_Asset_Access_Handler_Impl
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         Business_Id : Swagger.UString;
         Update_Partner_Asset_Access_Body_Type : UpdatePartnerAssetAccessBody_Type;
         Result : .Models.UpdatePartnerAssetsResultsResponseArray_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Biz_Access_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         
         Business_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Swagger.Servers.Read (Req, Media_List_1, Input);
         if Swagger.Is_Null (Input) then
            Context.Set_Error (415, "Invalid content");
            return;
         end if;

         .Models.Deserialize (Input, "UpdatePartnerAssetAccessBody_Type", Update_Partner_Asset_Access_Body_Type);
         Impl.Update_Partner_Asset_Access_Handler_Impl
            (Business_Id,
             Update_Partner_Asset_Access_Body_Type, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Update_Partner_Asset_Access_Handler_Impl;

      package API_Asset_Access_Requests_Create is
         new Swagger.Servers.Operation
            (Handler => Asset_Access_Requests_Create,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/businesses/{business_id}/requests/assets/access",
             Mimes   => Media_List_1'Access);

      --  Create a request to access an existing partner's assets.
      procedure Asset_Access_Requests_Create
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         Business_Id : Swagger.UString;
         Create_Asset_Access_Request_Body_Type : CreateAssetAccessRequestBody_Type;
         Result : .Models.CreateAssetAccessRequestResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Biz_Access_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Biz_Access_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         
         Business_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Swagger.Servers.Read (Req, Media_List_1, Input);
         if Swagger.Is_Null (Input) then
            Context.Set_Error (415, "Invalid content");
            return;
         end if;

         .Models.Deserialize (Input, "CreateAssetAccessRequestBody_Type", Create_Asset_Access_Request_Body_Type);
         Impl.Asset_Access_Requests_Create
            (Business_Id,
             Create_Asset_Access_Request_Body_Type, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Asset_Access_Requests_Create;

      package API_Cancel_Invites_Or_Requests is
         new Swagger.Servers.Operation
            (Handler => Cancel_Invites_Or_Requests,
             Method  => Swagger.Servers.DELETE,
             URI     => URI_Prefix & "/businesses/{business_id}/invites",
             Mimes   => Media_List_1'Access);

      --  Cancel invites/requests
      procedure Cancel_Invites_Or_Requests
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         Business_Id : Swagger.UString;
         Cancel_Invites_Body_Type : CancelInvitesBody_Type;
         Result : .Models.DeleteInvitesResultsResponseArray_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Biz_Access_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         
         Business_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Swagger.Servers.Read (Req, Media_List_1, Input);
         if Swagger.Is_Null (Input) then
            Context.Set_Error (415, "Invalid content");
            return;
         end if;

         .Models.Deserialize (Input, "CancelInvitesBody_Type", Cancel_Invites_Body_Type);
         Impl.Cancel_Invites_Or_Requests
            (Business_Id,
             Cancel_Invites_Body_Type, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Cancel_Invites_Or_Requests;

      package API_Create_Asset_Invites is
         new Swagger.Servers.Operation
            (Handler => Create_Asset_Invites,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/businesses/{business_id}/invites/assets/access",
             Mimes   => Media_List_1'Access);

      --  Update invite/request with an asset permission
      procedure Create_Asset_Invites
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         Business_Id : Swagger.UString;
         Create_Asset_Invites_Request_Type : CreateAssetInvitesRequest_Type;
         Result : .Models.UpdateInvitesResultsResponseArray_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Biz_Access_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Biz_Access_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         
         Business_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Swagger.Servers.Read (Req, Media_List_1, Input);
         if Swagger.Is_Null (Input) then
            Context.Set_Error (415, "Invalid content");
            return;
         end if;

         .Models.Deserialize (Input, "CreateAssetInvitesRequest_Type", Create_Asset_Invites_Request_Type);
         Impl.Create_Asset_Invites
            (Business_Id,
             Create_Asset_Invites_Request_Type, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Create_Asset_Invites;

      package API_Create_Membership_Or_Partnership_Invites is
         new Swagger.Servers.Operation
            (Handler => Create_Membership_Or_Partnership_Invites,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/businesses/{business_id}/invites",
             Mimes   => Media_List_1'Access);

      --  Create invites or requests
      procedure Create_Membership_Or_Partnership_Invites
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         Business_Id : Swagger.UString;
         Create_Membership_Or_Partnership_Invites_Body_Type : CreateMembershipOrPartnershipInvitesBody_Type;
         Result : .Models.CreateInvitesResultsResponseArray_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Biz_Access_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         
         Business_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Swagger.Servers.Read (Req, Media_List_1, Input);
         if Swagger.Is_Null (Input) then
            Context.Set_Error (415, "Invalid content");
            return;
         end if;

         .Models.Deserialize (Input, "CreateMembershipOrPartnershipInvitesBody_Type", Create_Membership_Or_Partnership_Invites_Body_Type);
         Impl.Create_Membership_Or_Partnership_Invites
            (Business_Id,
             Create_Membership_Or_Partnership_Invites_Body_Type, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Create_Membership_Or_Partnership_Invites;

      package API_Get_Invites is
         new Swagger.Servers.Operation
            (Handler => Get_Invites,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/businesses/{business_id}/invites",
             Mimes   => Media_List_1'Access);

      --  Get invites/requests
      procedure Get_Invites
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Business_Id : Swagger.UString;
         Is_Member : Swagger.Nullable_Boolean;
         Invite_Status : Swagger.UString_Vectors.Vector;
         Invite_Type : InviteType_Type;
         Bookmark : Swagger.Nullable_UString;
         Page_Size : Swagger.Nullable_Integer;
         Result : .Models.GetInvites200Response_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Biz_Access_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         Is_Member := To_Boolean (Swagger.Servers.Get_Query_Parameter (Req, "is_member"));

         Invite_Status := To_Swagger.UString_Vectors.Vector (Swagger.Servers.Get_Query_Parameter (Req, "invite_status"));

         Invite_Type := To_InviteType_Type (Swagger.Servers.Get_Query_Parameter (Req, "invite_type"));

         Bookmark := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "bookmark"));

         Page_Size := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "page_size"));

         
         Business_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Get_Invites
            (Business_Id,
             Is_Member,
             Invite_Status,
             Invite_Type,
             Bookmark,
             Page_Size, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Get_Invites;

      package API_Respond_Business_Access_Invites is
         new Swagger.Servers.Operation
            (Handler => Respond_Business_Access_Invites,
             Method  => Swagger.Servers.PATCH,
             URI     => URI_Prefix & "/businesses/invites",
             Mimes   => Media_List_1'Access);

      --  Accept or decline an invite/request
      procedure Respond_Business_Access_Invites
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         Auth_Respond_Invites_Body_Type : AuthRespondInvitesBody_Type;
         Result : .Models.RespondToInvitesResponseArray_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Biz_Access_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Biz_Access_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         
         Swagger.Servers.Read (Req, Media_List_1, Input);
         if Swagger.Is_Null (Input) then
            Context.Set_Error (415, "Invalid content");
            return;
         end if;

         .Models.Deserialize (Input, "AuthRespondInvitesBody_Type", Auth_Respond_Invites_Body_Type);
         Impl.Respond_Business_Access_Invites
            (Auth_Respond_Invites_Body_Type, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Respond_Business_Access_Invites;

      package API_Delete_Business_Membership is
         new Swagger.Servers.Operation
            (Handler => Delete_Business_Membership,
             Method  => Swagger.Servers.DELETE,
             URI     => URI_Prefix & "/businesses/{business_id}/members",
             Mimes   => Media_List_1'Access);

      --  Terminate business memberships
      procedure Delete_Business_Membership
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         Business_Id : Swagger.UString;
         Members_To_Delete_Body_Type : MembersToDeleteBody_Type;
         Result : .Models.DeletedMembersResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Biz_Access_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Biz_Access_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         
         Business_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Swagger.Servers.Read (Req, Media_List_1, Input);
         if Swagger.Is_Null (Input) then
            Context.Set_Error (415, "Invalid content");
            return;
         end if;

         .Models.Deserialize (Input, "MembersToDeleteBody_Type", Members_To_Delete_Body_Type);
         Impl.Delete_Business_Membership
            (Business_Id,
             Members_To_Delete_Body_Type, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Delete_Business_Membership;

      package API_Delete_Business_Partners is
         new Swagger.Servers.Operation
            (Handler => Delete_Business_Partners,
             Method  => Swagger.Servers.DELETE,
             URI     => URI_Prefix & "/businesses/{business_id}/partners",
             Mimes   => Media_List_1'Access);

      --  Terminate business partnerships
      procedure Delete_Business_Partners
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         Business_Id : Swagger.UString;
         Delete_Partners_Request_Type : DeletePartnersRequest_Type;
         Result : .Models.DeletePartnersResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Biz_Access_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         
         Business_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Swagger.Servers.Read (Req, Media_List_1, Input);
         if Swagger.Is_Null (Input) then
            Context.Set_Error (415, "Invalid content");
            return;
         end if;

         .Models.Deserialize (Input, "DeletePartnersRequest_Type", Delete_Partners_Request_Type);
         Impl.Delete_Business_Partners
            (Business_Id,
             Delete_Partners_Request_Type, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 404 then
            Context.Set_Description ("A supplied partner id doesn't exist");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Delete_Business_Partners;

      package API_Get_Business_Employers is
         new Swagger.Servers.Operation
            (Handler => Get_Business_Employers,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/businesses/employers",
             Mimes   => Media_List_1'Access);

      --  List business employers for user
      procedure Get_Business_Employers
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Page_Size : Swagger.Nullable_Integer;
         Bookmark : Swagger.Nullable_UString;
         Result : .Models.GetBusinessEmployers200Response_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Biz_Access_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         Page_Size := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "page_size"));

         Bookmark := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "bookmark"));

         
         Impl.Get_Business_Employers
            (Page_Size,
             Bookmark, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Get_Business_Employers;

      package API_Get_Business_Members is
         new Swagger.Servers.Operation
            (Handler => Get_Business_Members,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/businesses/{business_id}/members",
             Mimes   => Media_List_1'Access);

      --  Get business members
      procedure Get_Business_Members
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Business_Id : Swagger.UString;
         Assets_Summary : Swagger.Nullable_Boolean;
         Business_Roles : .Models.MemberBusinessRole_Type_Vectors.Vector;
         Member_Ids : Swagger.Nullable_UString;
         Start_Index : Swagger.Nullable_Integer;
         Bookmark : Swagger.Nullable_UString;
         Page_Size : Swagger.Nullable_Integer;
         Result : .Models.GetBusinessMembers200Response_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Biz_Access_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         Assets_Summary := To_Boolean (Swagger.Servers.Get_Query_Parameter (Req, "assets_summary"));

         Business_Roles := To_.Models.MemberBusinessRole_Type_Vectors.Vector (Swagger.Servers.Get_Query_Parameter (Req, "business_roles"));

         Member_Ids := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "member_ids"));

         Start_Index := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "start_index"));

         Bookmark := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "bookmark"));

         Page_Size := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "page_size"));

         
         Business_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Get_Business_Members
            (Business_Id,
             Assets_Summary,
             Business_Roles,
             Member_Ids,
             Start_Index,
             Bookmark,
             Page_Size, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Get_Business_Members;

      package API_Get_Business_Partners is
         new Swagger.Servers.Operation
            (Handler => Get_Business_Partners,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/businesses/{business_id}/partners",
             Mimes   => Media_List_1'Access);

      --  Get business partners
      procedure Get_Business_Partners
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Business_Id : Swagger.UString;
         Assets_Summary : Swagger.Nullable_Boolean;
         Partner_Type : PartnerType_Type;
         Partner_Ids : Swagger.Nullable_UString;
         Start_Index : Swagger.Nullable_Integer;
         Page_Size : Swagger.Nullable_Integer;
         Bookmark : Swagger.Nullable_UString;
         Result : .Models.GetBusinessPartners200Response_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Biz_Access_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         Assets_Summary := To_Boolean (Swagger.Servers.Get_Query_Parameter (Req, "assets_summary"));

         Partner_Type := To_PartnerType_Type (Swagger.Servers.Get_Query_Parameter (Req, "partner_type"));

         Partner_Ids := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "partner_ids"));

         Start_Index := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "start_index"));

         Page_Size := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "page_size"));

         Bookmark := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "bookmark"));

         
         Business_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Get_Business_Partners
            (Business_Id,
             Assets_Summary,
             Partner_Type,
             Partner_Ids,
             Start_Index,
             Page_Size,
             Bookmark, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Get_Business_Partners;

      package API_Update_Business_Memberships is
         new Swagger.Servers.Operation
            (Handler => Update_Business_Memberships,
             Method  => Swagger.Servers.PATCH,
             URI     => URI_Prefix & "/businesses/{business_id}/members",
             Mimes   => Media_List_1'Access);

      --  Update member's business role
      procedure Update_Business_Memberships
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         Business_Id : Swagger.UString;
         Update_Member_Business_Role_Body : .Models.UpdateMemberBusinessRoleBody_Type_Vectors.Vector;
         Result : .Models.UpdateMemberResultsResponseArray_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Biz_Access_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         
         Business_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Swagger.Servers.Read (Req, Media_List_1, Input);
         if Swagger.Is_Null (Input) then
            Context.Set_Error (415, "Invalid content");
            return;
         end if;

         .Models.Deserialize (Input, "UpdateMemberBusinessRoleBody", Update_Member_Business_Role_Body);
         Impl.Update_Business_Memberships
            (Business_Id,
             Update_Member_Business_Role_Body, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("response");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Update_Business_Memberships;

      package API_Campaign_Targeting_Analytics_Get is
         new Swagger.Servers.Operation
            (Handler => Campaign_Targeting_Analytics_Get,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/campaigns/targeting_analytics",
             Mimes   => Media_List_1'Access);

      --  Get targeting analytics for campaigns
      procedure Campaign_Targeting_Analytics_Get
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Ad_Account_Id : Swagger.UString;
         Campaign_Ids : Swagger.UString_Vectors.Vector;
         Start_Date : Swagger.Date;
         End_Date : Swagger.Date;
         Targeting_Types : .Models.AdsAnalyticsCampaignTargetingType_Type_Vectors.Vector;
         Columns : Swagger.UString_Vectors.Vector;
         Granularity : Granularity_Type;
         Click_Window_Days : Swagger.Nullable_Integer;
         Engagement_Window_Days : Swagger.Nullable_Integer;
         View_Window_Days : Swagger.Nullable_Integer;
         Conversion_Report_Time : Swagger.Nullable_UString;
         Attribution_Types : ConversionReportAttributionType_Type;
         Result : .Models.MetricsResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         Campaign_Ids := To_Swagger.UString_Vectors.Vector (Swagger.Servers.Get_Query_Parameter (Req, "campaign_ids"));

         Start_Date := To_Swagger.Date (Swagger.Servers.Get_Query_Parameter (Req, "start_date"));

         End_Date := To_Swagger.Date (Swagger.Servers.Get_Query_Parameter (Req, "end_date"));

         Targeting_Types := To_.Models.AdsAnalyticsCampaignTargetingType_Type_Vectors.Vector (Swagger.Servers.Get_Query_Parameter (Req, "targeting_types"));

         Columns := To_Swagger.UString_Vectors.Vector (Swagger.Servers.Get_Query_Parameter (Req, "columns"));

         Granularity := To_Granularity_Type (Swagger.Servers.Get_Query_Parameter (Req, "granularity"));

         Click_Window_Days := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "click_window_days"));

         Engagement_Window_Days := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "engagement_window_days"));

         View_Window_Days := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "view_window_days"));

         Conversion_Report_Time := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "conversion_report_time"));

         Attribution_Types := To_ConversionReportAttributionType_Type (Swagger.Servers.Get_Query_Parameter (Req, "attribution_types"));

         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Campaign_Targeting_Analytics_Get
            (Ad_Account_Id,
             Campaign_Ids,
             Start_Date,
             End_Date,
             Targeting_Types,
             Columns,
             Granularity,
             Click_Window_Days,
             Engagement_Window_Days,
             View_Window_Days,
             Conversion_Report_Time,
             Attribution_Types, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Campaign_Targeting_Analytics_Get;

      package API_Campaigns_Analytics is
         new Swagger.Servers.Operation
            (Handler => Campaigns_Analytics,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/campaigns/analytics",
             Mimes   => Media_List_1'Access);

      --  Get campaign analytics
      procedure Campaigns_Analytics
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Ad_Account_Id : Swagger.UString;
         Start_Date : Swagger.Date;
         End_Date : Swagger.Date;
         Campaign_Ids : Swagger.UString_Vectors.Vector;
         Columns : Swagger.UString_Vectors.Vector;
         Granularity : Granularity_Type;
         Click_Window_Days : Swagger.Nullable_Integer;
         Engagement_Window_Days : Swagger.Nullable_Integer;
         View_Window_Days : Swagger.Nullable_Integer;
         Conversion_Report_Time : Swagger.Nullable_UString;
         Result : .Models.CampaignsAnalyticsResponseInner_Type_Vectors.Vector;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         Start_Date := To_Swagger.Date (Swagger.Servers.Get_Query_Parameter (Req, "start_date"));

         End_Date := To_Swagger.Date (Swagger.Servers.Get_Query_Parameter (Req, "end_date"));

         Campaign_Ids := To_Swagger.UString_Vectors.Vector (Swagger.Servers.Get_Query_Parameter (Req, "campaign_ids"));

         Columns := To_Swagger.UString_Vectors.Vector (Swagger.Servers.Get_Query_Parameter (Req, "columns"));

         Granularity := To_Granularity_Type (Swagger.Servers.Get_Query_Parameter (Req, "granularity"));

         Click_Window_Days := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "click_window_days"));

         Engagement_Window_Days := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "engagement_window_days"));

         View_Window_Days := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "view_window_days"));

         Conversion_Report_Time := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "conversion_report_time"));

         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Campaigns_Analytics
            (Ad_Account_Id,
             Start_Date,
             End_Date,
             Campaign_Ids,
             Columns,
             Granularity,
             Click_Window_Days,
             Engagement_Window_Days,
             View_Window_Days,
             Conversion_Report_Time, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid ad account campaign analytics parameters.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Campaigns_Analytics;

      package API_Campaigns_Create is
         new Swagger.Servers.Operation
            (Handler => Campaigns_Create,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/campaigns",
             Mimes   => Media_List_1'Access);

      --  Create campaigns
      procedure Campaigns_Create
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         Ad_Account_Id : Swagger.UString;
         Campaign_Create_Request : .Models.CampaignCreateRequest_Type_Vectors.Vector;
         Result : .Models.CampaignCreateResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Swagger.Servers.Read (Req, Media_List_1, Input);
         if Swagger.Is_Null (Input) then
            Context.Set_Error (415, "Invalid content");
            return;
         end if;

         .Models.Deserialize (Input, "CampaignCreateRequest", Campaign_Create_Request);
         Impl.Campaigns_Create
            (Ad_Account_Id,
             Campaign_Create_Request, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("response");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Campaigns_Create;

      package API_Campaigns_Get is
         new Swagger.Servers.Operation
            (Handler => Campaigns_Get,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/campaigns/{campaign_id}",
             Mimes   => Media_List_1'Access);

      --  Get campaign
      procedure Campaigns_Get
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Ad_Account_Id : Swagger.UString;
         Campaign_Id : Swagger.UString;
         Result : .Models.CampaignResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Campaign_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 2));

         Impl.Campaigns_Get
            (Ad_Account_Id,
             Campaign_Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Campaigns_Get;

      package API_Campaigns_List is
         new Swagger.Servers.Operation
            (Handler => Campaigns_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/campaigns",
             Mimes   => Media_List_1'Access);

      --  List campaigns
      procedure Campaigns_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Ad_Account_Id : Swagger.UString;
         Campaign_Ids : Swagger.UString_Vectors.Vector;
         Entity_Statuses : Swagger.UString_Vectors.Vector;
         Page_Size : Swagger.Nullable_Integer;
         Order : Swagger.Nullable_UString;
         Bookmark : Swagger.Nullable_UString;
         Result : .Models.CampaignsList200Response_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         Campaign_Ids := To_Swagger.UString_Vectors.Vector (Swagger.Servers.Get_Query_Parameter (Req, "campaign_ids"));

         Entity_Statuses := To_Swagger.UString_Vectors.Vector (Swagger.Servers.Get_Query_Parameter (Req, "entity_statuses"));

         Page_Size := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "page_size"));

         Order := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "order"));

         Bookmark := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "bookmark"));

         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Campaigns_List
            (Ad_Account_Id,
             Campaign_Ids,
             Entity_Statuses,
             Page_Size,
             Order,
             Bookmark, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid ad account campaign parameters.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Campaigns_List;

      package API_Campaigns_Update is
         new Swagger.Servers.Operation
            (Handler => Campaigns_Update,
             Method  => Swagger.Servers.PATCH,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/campaigns",
             Mimes   => Media_List_1'Access);

      --  Update campaigns
      procedure Campaigns_Update
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         Ad_Account_Id : Swagger.UString;
         Campaign_Update_Request : .Models.CampaignUpdateRequest_Type_Vectors.Vector;
         Result : .Models.CampaignUpdateResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Swagger.Servers.Read (Req, Media_List_1, Input);
         if Swagger.Is_Null (Input) then
            Context.Set_Error (415, "Invalid content");
            return;
         end if;

         .Models.Deserialize (Input, "CampaignUpdateRequest", Campaign_Update_Request);
         Impl.Campaigns_Update
            (Ad_Account_Id,
             Campaign_Update_Request, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("response");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Campaigns_Update;

      package API_Catalogs_Create is
         new Swagger.Servers.Operation
            (Handler => Catalogs_Create,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/catalogs",
             Mimes   => Media_List_1'Access);

      --  Create catalog
      procedure Catalogs_Create
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         Catalogs_Create_Request_Type : CatalogsCreateRequest_Type;
         Ad_Account_Id : Swagger.Nullable_UString;
         Result : .Models.Catalog_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Catalogs_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "ad_account_id"));

         
         Swagger.Servers.Read (Req, Media_List_1, Input);
         if Swagger.Is_Null (Input) then
            Context.Set_Error (415, "Invalid content");
            return;
         end if;

         .Models.Deserialize (Input, "CatalogsCreateRequest_Type", Catalogs_Create_Request_Type);
         Impl.Catalogs_Create
            (Catalogs_Create_Request_Type,
             Ad_Account_Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid parameters.");
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Unauthorized access.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error.");
            return;
         end if;

      end Catalogs_Create;

      package API_Catalogs_List is
         new Swagger.Servers.Operation
            (Handler => Catalogs_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/catalogs",
             Mimes   => Media_List_1'Access);

      --  List catalogs
      procedure Catalogs_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Bookmark : Swagger.Nullable_UString;
         Page_Size : Swagger.Nullable_Integer;
         Ad_Account_Id : Swagger.Nullable_UString;
         Result : .Models.CatalogsList200Response_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Catalogs_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         Bookmark := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "bookmark"));

         Page_Size := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "page_size"));

         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "ad_account_id"));

         
         Impl.Catalogs_List
            (Bookmark,
             Page_Size,
             Ad_Account_Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid parameters.");
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Unauthorized access.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error.");
            return;
         end if;

      end Catalogs_List;

      package API_Catalogs_Product_Group_Pins_List is
         new Swagger.Servers.Operation
            (Handler => Catalogs_Product_Group_Pins_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/catalogs/product_groups/{product_group_id}/products",
             Mimes   => Media_List_1'Access);

      --  List products by product group
      procedure Catalogs_Product_Group_Pins_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Product_Group_Id : Swagger.UString;
         Bookmark : Swagger.Nullable_UString;
         Page_Size : Swagger.Nullable_Integer;
         Ad_Account_Id : Swagger.Nullable_UString;
         Pin_Metrics : Swagger.Nullable_Boolean;
         Result : .Models.CatalogsProductGroupPinsList200Response_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Catalogs_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Pins_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         Bookmark := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "bookmark"));

         Page_Size := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "page_size"));

         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "ad_account_id"));

         Pin_Metrics := To_Boolean (Swagger.Servers.Get_Query_Parameter (Req, "pin_metrics"));

         
         Product_Group_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Catalogs_Product_Group_Pins_List
            (Product_Group_Id,
             Bookmark,
             Page_Size,
             Ad_Account_Id,
             Pin_Metrics, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid parameters.");
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Unauthorized access.");
            return;
         end if;
         if Context.Get_Status = 404 then
            Context.Set_Description ("Catalogs product group not found.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error.");
            return;
         end if;

      end Catalogs_Product_Group_Pins_List;

      package API_Catalogs_Product_Groups_Create is
         new Swagger.Servers.Operation
            (Handler => Catalogs_Product_Groups_Create,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/catalogs/product_groups",
             Mimes   => Media_List_1'Access);

      --  Create product group
      procedure Catalogs_Product_Groups_Create
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         Multiple_Product_Groups_Inner_Type : MultipleProductGroupsInner_Type;
         Ad_Account_Id : Swagger.Nullable_UString;
         Result : .Models.CatalogsVerticalProductGroup_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Catalogs_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "ad_account_id"));

         
         Swagger.Servers.Read (Req, Media_List_1, Input);
         if Swagger.Is_Null (Input) then
            Context.Set_Error (415, "Invalid content");
            return;
         end if;

         .Models.Deserialize (Input, "MultipleProductGroupsInner_Type", Multiple_Product_Groups_Inner_Type);
         Impl.Catalogs_Product_Groups_Create
            (Multiple_Product_Groups_Inner_Type,
             Ad_Account_Id, Result, Context);
         if Context.Get_Status = 201 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid body.");
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Unauthorized access.");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Forbidden. Account not approved for catalog product group mutations yet.");
            return;
         end if;
         if Context.Get_Status = 409 then
            Context.Set_Description ("Conflict. Can't create this catalogs product group with this value.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error.");
            return;
         end if;

      end Catalogs_Product_Groups_Create;

      package API_Catalogs_Product_Groups_Create_Many is
         new Swagger.Servers.Operation
            (Handler => Catalogs_Product_Groups_Create_Many,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/catalogs/product_groups/multiple",
             Mimes   => Media_List_1'Access);

      --  Create product groups
      procedure Catalogs_Product_Groups_Create_Many
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         Multiple_Product_Groups_Inner : .Models.MultipleProductGroupsInner_Type_Vectors.Vector;
         Ad_Account_Id : Swagger.Nullable_UString;
         Result : Swagger.UString_Vectors.Vector;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Catalogs_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "ad_account_id"));

         
         Swagger.Servers.Read (Req, Media_List_1, Input);
         if Swagger.Is_Null (Input) then
            Context.Set_Error (415, "Invalid content");
            return;
         end if;

         .Models.Deserialize (Input, "multiple_product_groups_inner", Multiple_Product_Groups_Inner);
         Impl.Catalogs_Product_Groups_Create_Many
            (Multiple_Product_Groups_Inner,
             Ad_Account_Id, Result, Context);
         if Context.Get_Status = 201 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Stream.Write_Entity ("", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid body.");
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Unauthorized access.");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Forbidden. Account not approved for catalog product group mutations yet.");
            return;
         end if;
         if Context.Get_Status = 409 then
            Context.Set_Description ("Conflict. Can't create this catalogs product group with this value.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error.");
            return;
         end if;

      end Catalogs_Product_Groups_Create_Many;

      package API_Catalogs_Product_Groups_Delete is
         new Swagger.Servers.Operation
            (Handler => Catalogs_Product_Groups_Delete,
             Method  => Swagger.Servers.DELETE,
             URI     => URI_Prefix & "/catalogs/product_groups/{product_group_id}",
             Mimes   => Media_List_1'Access);

      --  Delete product group
      procedure Catalogs_Product_Groups_Delete
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Product_Group_Id : Swagger.UString;
         Ad_Account_Id : Swagger.Nullable_UString;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Catalogs_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "ad_account_id"));

         
         Product_Group_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Catalogs_Product_Groups_Delete
            (Product_Group_Id,
             Ad_Account_Id, Context);

      end Catalogs_Product_Groups_Delete;

      package API_Catalogs_Product_Groups_Delete_Many is
         new Swagger.Servers.Operation
            (Handler => Catalogs_Product_Groups_Delete_Many,
             Method  => Swagger.Servers.DELETE,
             URI     => URI_Prefix & "/catalogs/product_groups/multiple",
             Mimes   => Media_List_1'Access);

      --  Delete product groups
      procedure Catalogs_Product_Groups_Delete_Many
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Id : Integer_Vectors.Vector;
         Ad_Account_Id : Swagger.Nullable_UString;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Catalogs_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         Id := To_Integer_Vectors.Vector (Swagger.Servers.Get_Query_Parameter (Req, "id"));

         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "ad_account_id"));

         
         Impl.Catalogs_Product_Groups_Delete_Many
            (Id,
             Ad_Account_Id, Context);

      end Catalogs_Product_Groups_Delete_Many;

      package API_Catalogs_Product_Groups_Get is
         new Swagger.Servers.Operation
            (Handler => Catalogs_Product_Groups_Get,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/catalogs/product_groups/{product_group_id}",
             Mimes   => Media_List_1'Access);

      --  Get product group
      procedure Catalogs_Product_Groups_Get
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Product_Group_Id : Swagger.UString;
         Ad_Account_Id : Swagger.Nullable_UString;
         Result : .Models.CatalogsVerticalProductGroup_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Catalogs_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "ad_account_id"));

         
         Product_Group_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Catalogs_Product_Groups_Get
            (Product_Group_Id,
             Ad_Account_Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid catalogs product group id parameters.");
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Unauthorized access.");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Forbidden. Account not approved for catalog product group mutations yet.");
            return;
         end if;
         if Context.Get_Status = 404 then
            Context.Set_Description ("Catalogs product group not found.");
            return;
         end if;
         if Context.Get_Status = 409 then
            Context.Set_Description ("Conflict. Can't get a catalogs product group without an existing catalog.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error.");
            return;
         end if;

      end Catalogs_Product_Groups_Get;

      package API_Catalogs_Product_Groups_List is
         new Swagger.Servers.Operation
            (Handler => Catalogs_Product_Groups_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/catalogs/product_groups",
             Mimes   => Media_List_1'Access);

      --  List product groups
      procedure Catalogs_Product_Groups_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Id : Integer_Vectors.Vector;
         Feed_Id : Swagger.Nullable_UString;
         Catalog_Id : Swagger.Nullable_UString;
         Bookmark : Swagger.Nullable_UString;
         Page_Size : Swagger.Nullable_Integer;
         Ad_Account_Id : Swagger.Nullable_UString;
         Result : .Models.CatalogsProductGroupsList200Response_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Catalogs_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         Id := To_Integer_Vectors.Vector (Swagger.Servers.Get_Query_Parameter (Req, "id"));

         Feed_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "feed_id"));

         Catalog_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "catalog_id"));

         Bookmark := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "bookmark"));

         Page_Size := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "page_size"));

         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "ad_account_id"));

         
         Impl.Catalogs_Product_Groups_List
            (Id,
             Feed_Id,
             Catalog_Id,
             Bookmark,
             Page_Size,
             Ad_Account_Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid feed parameters.");
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Unauthorized access.");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Forbidden. Account not approved for catalog product group mutations yet.");
            return;
         end if;
         if Context.Get_Status = 404 then
            Context.Set_Description ("Data feed not found.");
            return;
         end if;
         if Context.Get_Status = 409 then
            Context.Set_Description ("Conflict. Can't create this catalogs product group with this value.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error.");
            return;
         end if;

      end Catalogs_Product_Groups_List;

      package API_Catalogs_Product_Groups_Product_Counts_Get is
         new Swagger.Servers.Operation
            (Handler => Catalogs_Product_Groups_Product_Counts_Get,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/catalogs/product_groups/{product_group_id}/product_counts",
             Mimes   => Media_List_1'Access);

      --  Get product counts
      procedure Catalogs_Product_Groups_Product_Counts_Get
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Product_Group_Id : Swagger.UString;
         Ad_Account_Id : Swagger.Nullable_UString;
         Result : .Models.CatalogsProductGroupProductCountsVertical_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Catalogs_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "ad_account_id"));

         
         Product_Group_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Catalogs_Product_Groups_Product_Counts_Get
            (Product_Group_Id,
             Ad_Account_Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 404 then
            Context.Set_Description ("Product Group Not Found.");
            return;
         end if;
         if Context.Get_Status = 409 then
            Context.Set_Description ("Can't access this feature without an existing catalog.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error.");
            return;
         end if;

      end Catalogs_Product_Groups_Product_Counts_Get;

      package API_Catalogs_Product_Groups_Update is
         new Swagger.Servers.Operation
            (Handler => Catalogs_Product_Groups_Update,
             Method  => Swagger.Servers.PATCH,
             URI     => URI_Prefix & "/catalogs/product_groups/{product_group_id}",
             Mimes   => Media_List_1'Access);

      --  Update single product group
      procedure Catalogs_Product_Groups_Update
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         Product_Group_Id : Swagger.UString;
         Catalogs_Product_Groups_Update_Request_Type : CatalogsProductGroupsUpdateRequest_Type;
         Ad_Account_Id : Swagger.Nullable_UString;
         Result : .Models.CatalogsVerticalProductGroup_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Catalogs_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "ad_account_id"));

         
         Product_Group_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Swagger.Servers.Read (Req, Media_List_1, Input);
         if Swagger.Is_Null (Input) then
            Context.Set_Error (415, "Invalid content");
            return;
         end if;

         .Models.Deserialize (Input, "CatalogsProductGroupsUpdateRequest_Type", Catalogs_Product_Groups_Update_Request_Type);
         Impl.Catalogs_Product_Groups_Update
            (Product_Group_Id,
             Catalogs_Product_Groups_Update_Request_Type,
             Ad_Account_Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid parameters.");
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Unauthorized access.");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Forbidden. Account not approved for catalog product group mutations yet.");
            return;
         end if;
         if Context.Get_Status = 404 then
            Context.Set_Description ("Catalogs product group not found.");
            return;
         end if;
         if Context.Get_Status = 409 then
            Context.Set_Description ("Conflict. Can't update this catalogs product group to this value.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error.");
            return;
         end if;

      end Catalogs_Product_Groups_Update;

      package API_Feed_Processing_Results_List is
         new Swagger.Servers.Operation
            (Handler => Feed_Processing_Results_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/catalogs/feeds/{feed_id}/processing_results",
             Mimes   => Media_List_1'Access);

      --  List feed processing results
      procedure Feed_Processing_Results_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Feed_Id : Swagger.UString;
         Bookmark : Swagger.Nullable_UString;
         Page_Size : Swagger.Nullable_Integer;
         Ad_Account_Id : Swagger.Nullable_UString;
         Result : .Models.FeedProcessingResultsList200Response_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Catalogs_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         Bookmark := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "bookmark"));

         Page_Size := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "page_size"));

         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "ad_account_id"));

         
         Feed_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Feed_Processing_Results_List
            (Feed_Id,
             Bookmark,
             Page_Size,
             Ad_Account_Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid parameters.");
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Unauthorized access.");
            return;
         end if;
         if Context.Get_Status = 404 then
            Context.Set_Description ("Feed not found.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error.");
            return;
         end if;

      end Feed_Processing_Results_List;

      package API_Feeds_Create is
         new Swagger.Servers.Operation
            (Handler => Feeds_Create,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/catalogs/feeds",
             Mimes   => Media_List_1'Access);

      --  Create feed
      procedure Feeds_Create
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         Feeds_Create_Request_Type : FeedsCreateRequest_Type;
         Ad_Account_Id : Swagger.Nullable_UString;
         Result : .Models.CatalogsFeed_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Catalogs_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Catalogs_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Catalogs_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Catalogs_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "ad_account_id"));

         
         Swagger.Servers.Read (Req, Media_List_1, Input);
         if Swagger.Is_Null (Input) then
            Context.Set_Error (415, "Invalid content");
            return;
         end if;

         .Models.Deserialize (Input, "FeedsCreateRequest_Type", Feeds_Create_Request_Type);
         Impl.Feeds_Create
            (Feeds_Create_Request_Type,
             Ad_Account_Id, Result, Context);
         if Context.Get_Status = 201 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid feed parameters.");
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Unauthorized access.");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Business account required.");
            return;
         end if;
         if Context.Get_Status = 409 then
            Context.Set_Description ("User website required.");
            return;
         end if;
         if Context.Get_Status = 422 then
            Context.Set_Description ("Unique feed name is required.");
            return;
         end if;
         if Context.Get_Status = 501 then
            Context.Set_Description ("Not implemented (absent \"default_country\" or \"default_locale\").");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Feeds_Create;

      package API_Feeds_Delete is
         new Swagger.Servers.Operation
            (Handler => Feeds_Delete,
             Method  => Swagger.Servers.DELETE,
             URI     => URI_Prefix & "/catalogs/feeds/{feed_id}",
             Mimes   => Media_List_1'Access);

      --  Delete feed
      procedure Feeds_Delete
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Feed_Id : Swagger.UString;
         Ad_Account_Id : Swagger.Nullable_UString;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Catalogs_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Catalogs_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Catalogs_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Catalogs_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "ad_account_id"));

         
         Feed_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Feeds_Delete
            (Feed_Id,
             Ad_Account_Id, Context);

      end Feeds_Delete;

      package API_Feeds_Get is
         new Swagger.Servers.Operation
            (Handler => Feeds_Get,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/catalogs/feeds/{feed_id}",
             Mimes   => Media_List_1'Access);

      --  Get feed
      procedure Feeds_Get
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Feed_Id : Swagger.UString;
         Ad_Account_Id : Swagger.Nullable_UString;
         Result : .Models.CatalogsFeed_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Catalogs_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Catalogs_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "ad_account_id"));

         
         Feed_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Feeds_Get
            (Feed_Id,
             Ad_Account_Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid feed parameters.");
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Unauthorized access.");
            return;
         end if;
         if Context.Get_Status = 404 then
            Context.Set_Description ("Data feed not found.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error.");
            return;
         end if;

      end Feeds_Get;

      package API_Feeds_Ingest is
         new Swagger.Servers.Operation
            (Handler => Feeds_Ingest,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/catalogs/feeds/{feed_id}/ingest",
             Mimes   => Media_List_1'Access);

      --  Ingest feed items
      procedure Feeds_Ingest
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Feed_Id : Swagger.UString;
         Ad_Account_Id : Swagger.Nullable_UString;
         Result : .Models.CatalogsFeedIngestion_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Catalogs_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "ad_account_id"));

         
         Feed_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Feeds_Ingest
            (Feed_Id,
             Ad_Account_Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("The ingestion process was successfully started.");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid feed parameters.");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Forbidden. Account not approved for feed mutations yet.");
            return;
         end if;
         if Context.Get_Status = 404 then
            Context.Set_Description ("Data feed not found.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Feeds_Ingest;

      package API_Feeds_List is
         new Swagger.Servers.Operation
            (Handler => Feeds_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/catalogs/feeds",
             Mimes   => Media_List_1'Access);

      --  List feeds
      procedure Feeds_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Bookmark : Swagger.Nullable_UString;
         Page_Size : Swagger.Nullable_Integer;
         Catalog_Id : Swagger.Nullable_UString;
         Ad_Account_Id : Swagger.Nullable_UString;
         Result : .Models.FeedsList200Response_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Catalogs_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Catalogs_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         Bookmark := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "bookmark"));

         Page_Size := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "page_size"));

         Catalog_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "catalog_id"));

         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "ad_account_id"));

         
         Impl.Feeds_List
            (Bookmark,
             Page_Size,
             Catalog_Id,
             Ad_Account_Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid parameters.");
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Unauthorized access.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error.");
            return;
         end if;

      end Feeds_List;

      package API_Feeds_Update is
         new Swagger.Servers.Operation
            (Handler => Feeds_Update,
             Method  => Swagger.Servers.PATCH,
             URI     => URI_Prefix & "/catalogs/feeds/{feed_id}",
             Mimes   => Media_List_1'Access);

      --  Update feed
      procedure Feeds_Update
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         Feed_Id : Swagger.UString;
         Feeds_Update_Request_Type : FeedsUpdateRequest_Type;
         Ad_Account_Id : Swagger.Nullable_UString;
         Result : .Models.CatalogsFeed_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Catalogs_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Catalogs_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Catalogs_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Catalogs_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "ad_account_id"));

         
         Feed_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Swagger.Servers.Read (Req, Media_List_1, Input);
         if Swagger.Is_Null (Input) then
            Context.Set_Error (415, "Invalid content");
            return;
         end if;

         .Models.Deserialize (Input, "FeedsUpdateRequest_Type", Feeds_Update_Request_Type);
         Impl.Feeds_Update
            (Feed_Id,
             Feeds_Update_Request_Type,
             Ad_Account_Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid feed parameters.");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Forbidden. Account not approved for feed mutations yet.");
            return;
         end if;
         if Context.Get_Status = 404 then
            Context.Set_Description ("Data feed not found.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Feeds_Update;

      package API_Items_Batch_Get is
         new Swagger.Servers.Operation
            (Handler => Items_Batch_Get,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/catalogs/items/batch/{batch_id}",
             Mimes   => Media_List_1'Access);

      --  Get item batch status
      procedure Items_Batch_Get
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Batch_Id : Swagger.UString;
         Ad_Account_Id : Swagger.Nullable_UString;
         Result : .Models.CatalogsItemsBatch_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Catalogs_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Catalogs_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "ad_account_id"));

         
         Batch_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Items_Batch_Get
            (Batch_Id,
             Ad_Account_Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Response containing the requested catalogs items batch");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Not authenticated to access catalogs items batch");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Not authorized to access catalogs items batch");
            return;
         end if;
         if Context.Get_Status = 404 then
            Context.Set_Description ("Catalogs items batch not found");
            return;
         end if;
         if Context.Get_Status = 405 then
            Context.Set_Description ("Method Not Allowed.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Items_Batch_Get;

      package API_Items_Batch_Post is
         new Swagger.Servers.Operation
            (Handler => Items_Batch_Post,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/catalogs/items/batch",
             Mimes   => Media_List_1'Access);

      --  Operate on item batch
      procedure Items_Batch_Post
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         Items_Batch_Post_Request_Type : ItemsBatchPostRequest_Type;
         Ad_Account_Id : Swagger.Nullable_UString;
         Result : .Models.CatalogsItemsBatch_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Catalogs_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Catalogs_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Catalogs_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Catalogs_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "ad_account_id"));

         
         Swagger.Servers.Read (Req, Media_List_1, Input);
         if Swagger.Is_Null (Input) then
            Context.Set_Error (415, "Invalid content");
            return;
         end if;

         .Models.Deserialize (Input, "ItemsBatchPostRequest_Type", Items_Batch_Post_Request_Type);
         Impl.Items_Batch_Post
            (Items_Batch_Post_Request_Type,
             Ad_Account_Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Response containing the requested catalogs items batch");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid request parameters.");
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Not authenticated to post catalogs items");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Not authorized to post catalogs items");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Items_Batch_Post;

      package API_Items_Get is
         new Swagger.Servers.Operation
            (Handler => Items_Get,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/catalogs/items",
             Mimes   => Media_List_1'Access);

      --  Get catalogs items
      procedure Items_Get
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Country : Swagger.UString;
         Language : Swagger.UString;
         Ad_Account_Id : Swagger.Nullable_UString;
         Item_Ids : Swagger.UString_Vectors.Vector;
         Filters : CatalogsItemsFilters_Type;
         Result : .Models.CatalogsItems_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Catalogs_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "ad_account_id"));

         Country := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "country"));

         Language := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "language"));

         Item_Ids := To_Swagger.UString_Vectors.Vector (Swagger.Servers.Get_Query_Parameter (Req, "item_ids"));

         Filters := To_CatalogsItemsFilters_Type (Swagger.Servers.Get_Query_Parameter (Req, "filters"));

         
         Impl.Items_Get
            (Country,
             Language,
             Ad_Account_Id,
             Item_Ids,
             Filters, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Response containing the requested catalogs items");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid request parameters.");
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Not authorized to access catalogs items");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Not authorized to access catalogs items");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Items_Get;

      package API_Items_Issues_List is
         new Swagger.Servers.Operation
            (Handler => Items_Issues_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/catalogs/processing_results/{processing_result_id}/item_issues",
             Mimes   => Media_List_1'Access);

      --  List item issues
      procedure Items_Issues_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Processing_Result_Id : Swagger.UString;
         Bookmark : Swagger.Nullable_UString;
         Page_Size : Swagger.Nullable_Integer;
         Item_Numbers : Integer_Vectors.Vector;
         Item_Validation_Issue : CatalogsItemValidationIssue_Type;
         Ad_Account_Id : Swagger.Nullable_UString;
         Result : .Models.ItemsIssuesList200Response_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Catalogs_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         Bookmark := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "bookmark"));

         Page_Size := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "page_size"));

         Item_Numbers := To_Integer_Vectors.Vector (Swagger.Servers.Get_Query_Parameter (Req, "item_numbers"));

         Item_Validation_Issue := To_CatalogsItemValidationIssue_Type (Swagger.Servers.Get_Query_Parameter (Req, "item_validation_issue"));

         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "ad_account_id"));

         
         Processing_Result_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Items_Issues_List
            (Processing_Result_Id,
             Bookmark,
             Page_Size,
             Item_Numbers,
             Item_Validation_Issue,
             Ad_Account_Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Unauthorized access.");
            return;
         end if;
         if Context.Get_Status = 404 then
            Context.Set_Description ("Processing Result not found.");
            return;
         end if;
         if Context.Get_Status = 501 then
            Context.Set_Description ("Not implemented.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error.");
            return;
         end if;

      end Items_Issues_List;

      package API_Items_Post is
         new Swagger.Servers.Operation
            (Handler => Items_Post,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/catalogs/items",
             Mimes   => Media_List_1'Access);

      --  Get catalogs items (POST)
      procedure Items_Post
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         Catalogs_Items_Request_Type : CatalogsItemsRequest_Type;
         Ad_Account_Id : Swagger.Nullable_UString;
         Result : .Models.CatalogsItems_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Catalogs_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "ad_account_id"));

         
         Swagger.Servers.Read (Req, Media_List_1, Input);
         if Swagger.Is_Null (Input) then
            Context.Set_Error (415, "Invalid content");
            return;
         end if;

         .Models.Deserialize (Input, "CatalogsItemsRequest_Type", Catalogs_Items_Request_Type);
         Impl.Items_Post
            (Catalogs_Items_Request_Type,
             Ad_Account_Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Response containing the requested catalogs items");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid request");
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Not authorized to access catalogs items");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Not authorized to access catalogs items");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Items_Post;

      package API_Products_By_Product_Group_Filter_List is
         new Swagger.Servers.Operation
            (Handler => Products_By_Product_Group_Filter_List,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/catalogs/products/get_by_product_group_filters",
             Mimes   => Media_List_1'Access);

      --  List products by filter
      procedure Products_By_Product_Group_Filter_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         Catalogs_List_Products_By_Filter_Request_Type : CatalogsListProductsByFilterRequest_Type;
         Bookmark : Swagger.Nullable_UString;
         Page_Size : Swagger.Nullable_Integer;
         Ad_Account_Id : Swagger.Nullable_UString;
         Pin_Metrics : Swagger.Nullable_Boolean;
         Result : .Models.CatalogsProductGroupPinsList200Response_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Catalogs_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Pins_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         Bookmark := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "bookmark"));

         Page_Size := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "page_size"));

         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "ad_account_id"));

         Pin_Metrics := To_Boolean (Swagger.Servers.Get_Query_Parameter (Req, "pin_metrics"));

         
         Swagger.Servers.Read (Req, Media_List_1, Input);
         if Swagger.Is_Null (Input) then
            Context.Set_Error (415, "Invalid content");
            return;
         end if;

         .Models.Deserialize (Input, "CatalogsListProductsByFilterRequest_Type", Catalogs_List_Products_By_Filter_Request_Type);
         Impl.Products_By_Product_Group_Filter_List
            (Catalogs_List_Products_By_Filter_Request_Type,
             Bookmark,
             Page_Size,
             Ad_Account_Id,
             Pin_Metrics, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Unauthorized access.");
            return;
         end if;
         if Context.Get_Status = 409 then
            Context.Set_Description ("Conflict. Can't get products.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error.");
            return;
         end if;

      end Products_By_Product_Group_Filter_List;

      package API_Reports_Create is
         new Swagger.Servers.Operation
            (Handler => Reports_Create,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/catalogs/reports",
             Mimes   => Media_List_1'Access);

      --  Build catalogs report
      procedure Reports_Create
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         Catalogs_Report_Parameters_Type : CatalogsReportParameters_Type;
         Ad_Account_Id : Swagger.Nullable_UString;
         Result : .Models.CatalogsCreateReportResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Catalogs_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "ad_account_id"));

         
         Swagger.Servers.Read (Req, Media_List_1, Input);
         if Swagger.Is_Null (Input) then
            Context.Set_Error (415, "Invalid content");
            return;
         end if;

         .Models.Deserialize (Input, "CatalogsReportParameters_Type", Catalogs_Report_Parameters_Type);
         Impl.Reports_Create
            (Catalogs_Report_Parameters_Type,
             Ad_Account_Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Response containing the report token");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 404 then
            Context.Set_Description ("Entity (e.g., catalog, feed or processing_result) not found");
            return;
         end if;
         if Context.Get_Status = 409 then
            Context.Set_Description ("Can't access this feature without an existing catalog.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Reports_Create;

      package API_Reports_Get is
         new Swagger.Servers.Operation
            (Handler => Reports_Get,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/catalogs/reports",
             Mimes   => Media_List_1'Access);

      --  Get catalogs report
      procedure Reports_Get
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Token : Swagger.UString;
         Ad_Account_Id : Swagger.Nullable_UString;
         Result : .Models.CatalogsReport_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Catalogs_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "ad_account_id"));

         Token := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "token"));

         
         Impl.Reports_Get
            (Token,
             Ad_Account_Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Response that contains a link to download the report");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("The token you provided is not valid or has expired.");
            return;
         end if;
         if Context.Get_Status = 409 then
            Context.Set_Description ("Can't access this feature without an existing catalog.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Reports_Get;

      package API_Reports_Stats is
         new Swagger.Servers.Operation
            (Handler => Reports_Stats,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/catalogs/reports/stats",
             Mimes   => Media_List_1'Access);

      --  List report stats
      procedure Reports_Stats
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Parameters : CatalogsReportParameters_Type;
         Ad_Account_Id : Swagger.Nullable_UString;
         Page_Size : Swagger.Nullable_Integer;
         Bookmark : Swagger.Nullable_UString;
         Result : .Models.ReportsStats200Response_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Catalogs_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "ad_account_id"));

         Page_Size := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "page_size"));

         Bookmark := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "bookmark"));

         Parameters := To_CatalogsReportParameters_Type (Swagger.Servers.Get_Query_Parameter (Req, "parameters"));

         
         Impl.Reports_Stats
            (Parameters,
             Ad_Account_Id,
             Page_Size,
             Bookmark, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Response containing the diagnostics aggregated counters");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Not authorized to access catalogs");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Reports_Stats;

      package API_Events_Create is
         new Swagger.Servers.Operation
            (Handler => Events_Create,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/events",
             Mimes   => Media_List_1'Access);

      --  Send conversions
      procedure Events_Create
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         Ad_Account_Id : Swagger.UString;
         Conversion_Events_Type : ConversionEvents_Type;
         Test : Swagger.Nullable_Boolean;
         Result : .Models.ConversionApiResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         
         Test := To_Boolean (Swagger.Servers.Get_Query_Parameter (Req, "test"));

         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Swagger.Servers.Read (Req, Media_List_1, Input);
         if Swagger.Is_Null (Input) then
            Context.Set_Error (415, "Invalid content");
            return;
         end if;

         .Models.Deserialize (Input, "ConversionEvents_Type", Conversion_Events_Type);
         Impl.Events_Create
            (Ad_Account_Id,
             Conversion_Events_Type,
             Test, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("The request was invalid.");
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Not authorized to send conversion events");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Unauthorized access.");
            return;
         end if;
         if Context.Get_Status = 422 then
            Context.Set_Description ("Not all events were successfully processed.");
            return;
         end if;
         if Context.Get_Status = 429 then
            Context.Set_Description ("This request exceeded a rate limit. This can happen if the client exceeds one of the published rate limits within a short time window.");
            return;
         end if;
         if Context.Get_Status = 503 then
            Context.Set_Description ("The endpoint has been ramped down and is currently not accepting any traffic.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected errors");
            return;
         end if;

      end Events_Create;

      package API_Conversion_Tags_Create is
         new Swagger.Servers.Operation
            (Handler => Conversion_Tags_Create,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/conversion_tags",
             Mimes   => Media_List_1'Access);

      --  Create conversion tag
      procedure Conversion_Tags_Create
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         Ad_Account_Id : Swagger.UString;
         Conversion_Tag_Create_Type : ConversionTagCreate_Type;
         Result : .Models.ConversionTagResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Swagger.Servers.Read (Req, Media_List_1, Input);
         if Swagger.Is_Null (Input) then
            Context.Set_Error (415, "Invalid content");
            return;
         end if;

         .Models.Deserialize (Input, "ConversionTagCreate_Type", Conversion_Tag_Create_Type);
         Impl.Conversion_Tags_Create
            (Ad_Account_Id,
             Conversion_Tag_Create_Type, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Conversion_Tags_Create;

      package API_Conversion_Tags_Get is
         new Swagger.Servers.Operation
            (Handler => Conversion_Tags_Get,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/conversion_tags/{conversion_tag_id}",
             Mimes   => Media_List_1'Access);

      --  Get conversion tag
      procedure Conversion_Tags_Get
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Ad_Account_Id : Swagger.UString;
         Conversion_Tag_Id : Swagger.UString;
         Result : .Models.ConversionTagResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Conversion_Tag_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 2));

         Impl.Conversion_Tags_Get
            (Ad_Account_Id,
             Conversion_Tag_Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Conversion_Tags_Get;

      package API_Conversion_Tags_List is
         new Swagger.Servers.Operation
            (Handler => Conversion_Tags_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/conversion_tags",
             Mimes   => Media_List_1'Access);

      --  Get conversion tags
      procedure Conversion_Tags_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Ad_Account_Id : Swagger.UString;
         Filter_Deleted : Swagger.Nullable_Boolean;
         Result : .Models.ConversionTagListResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         Filter_Deleted := To_Boolean (Swagger.Servers.Get_Query_Parameter (Req, "filter_deleted"));

         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Conversion_Tags_List
            (Ad_Account_Id,
             Filter_Deleted, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Conversion_Tags_List;

      package API_Ocpm_Eligible_Conversion_Tags_Get is
         new Swagger.Servers.Operation
            (Handler => Ocpm_Eligible_Conversion_Tags_Get,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/conversion_tags/ocpm_eligible",
             Mimes   => Media_List_1'Access);

      --  Get Ocpm eligible conversion tags
      procedure Ocpm_Eligible_Conversion_Tags_Get
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Ad_Account_Id : Swagger.UString;
         Result : Swagger..Models.ConversionEventResponse_Type_Vectors.Vector_Map;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Ocpm_Eligible_Conversion_Tags_Get
            (Ad_Account_Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected errors");
            return;
         end if;

      end Ocpm_Eligible_Conversion_Tags_Get;

      package API_Page_Visit_Conversion_Tags_Get is
         new Swagger.Servers.Operation
            (Handler => Page_Visit_Conversion_Tags_Get,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/conversion_tags/page_visit",
             Mimes   => Media_List_1'Access);

      --  Get page visit conversion tags
      procedure Page_Visit_Conversion_Tags_Get
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Ad_Account_Id : Swagger.UString;
         Page_Size : Swagger.Nullable_Integer;
         Order : Swagger.Nullable_UString;
         Bookmark : Swagger.Nullable_UString;
         Result : .Models.PageVisitConversionTagsGet200Response_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         Page_Size := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "page_size"));

         Order := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "order"));

         Bookmark := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "bookmark"));

         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Page_Visit_Conversion_Tags_Get
            (Ad_Account_Id,
             Page_Size,
             Order,
             Bookmark, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Page_Visit_Conversion_Tags_Get;

      package API_Customer_Lists_Create is
         new Swagger.Servers.Operation
            (Handler => Customer_Lists_Create,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/customer_lists",
             Mimes   => Media_List_1'Access);

      --  Create customer lists
      procedure Customer_Lists_Create
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         Ad_Account_Id : Swagger.UString;
         Customer_List_Request_Type : CustomerListRequest_Type;
         Result : .Models.CustomerList_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Swagger.Servers.Read (Req, Media_List_1, Input);
         if Swagger.Is_Null (Input) then
            Context.Set_Error (415, "Invalid content");
            return;
         end if;

         .Models.Deserialize (Input, "CustomerListRequest_Type", Customer_List_Request_Type);
         Impl.Customer_Lists_Create
            (Ad_Account_Id,
             Customer_List_Request_Type, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Customer_Lists_Create;

      package API_Customer_Lists_Get is
         new Swagger.Servers.Operation
            (Handler => Customer_Lists_Get,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/customer_lists/{customer_list_id}",
             Mimes   => Media_List_1'Access);

      --  Get customer list
      procedure Customer_Lists_Get
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Ad_Account_Id : Swagger.UString;
         Customer_List_Id : Swagger.UString;
         Result : .Models.CustomerList_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Customer_List_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 2));

         Impl.Customer_Lists_Get
            (Ad_Account_Id,
             Customer_List_Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Customer_Lists_Get;

      package API_Customer_Lists_List is
         new Swagger.Servers.Operation
            (Handler => Customer_Lists_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/customer_lists",
             Mimes   => Media_List_1'Access);

      --  Get customer lists
      procedure Customer_Lists_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Ad_Account_Id : Swagger.UString;
         Page_Size : Swagger.Nullable_Integer;
         Order : Swagger.Nullable_UString;
         Bookmark : Swagger.Nullable_UString;
         Result : .Models.CustomerListsList200Response_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         Page_Size := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "page_size"));

         Order := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "order"));

         Bookmark := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "bookmark"));

         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Customer_Lists_List
            (Ad_Account_Id,
             Page_Size,
             Order,
             Bookmark, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Customer_Lists_List;

      package API_Customer_Lists_Update is
         new Swagger.Servers.Operation
            (Handler => Customer_Lists_Update,
             Method  => Swagger.Servers.PATCH,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/customer_lists/{customer_list_id}",
             Mimes   => Media_List_1'Access);

      --  Update customer list
      procedure Customer_Lists_Update
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         Ad_Account_Id : Swagger.UString;
         Customer_List_Id : Swagger.UString;
         Customer_List_Update_Request_Type : CustomerListUpdateRequest_Type;
         Result : .Models.CustomerList_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Customer_List_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 2));

         Swagger.Servers.Read (Req, Media_List_1, Input);
         if Swagger.Is_Null (Input) then
            Context.Set_Error (415, "Invalid content");
            return;
         end if;

         .Models.Deserialize (Input, "CustomerListUpdateRequest_Type", Customer_List_Update_Request_Type);
         Impl.Customer_Lists_Update
            (Ad_Account_Id,
             Customer_List_Id,
             Customer_List_Update_Request_Type, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Customer_Lists_Update;

      package API_Integrations_Commerce_Del is
         new Swagger.Servers.Operation
            (Handler => Integrations_Commerce_Del,
             Method  => Swagger.Servers.DELETE,
             URI     => URI_Prefix & "/integrations/commerce/{external_business_id}",
             Mimes   => Media_List_1'Access);

      --  Delete commerce integration
      procedure Integrations_Commerce_Del
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         External_Business_Id : Swagger.UString;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         
         External_Business_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Integrations_Commerce_Del
            (External_Business_Id, Context);

      end Integrations_Commerce_Del;

      package API_Integrations_Commerce_Get is
         new Swagger.Servers.Operation
            (Handler => Integrations_Commerce_Get,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/integrations/commerce/{external_business_id}",
             Mimes   => Media_List_1'Access);

      --  Get commerce integration
      procedure Integrations_Commerce_Get
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         External_Business_Id : Swagger.UString;
         Result : .Models.IntegrationMetadata_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         
         External_Business_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Integrations_Commerce_Get
            (External_Business_Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 404 then
            Context.Set_Description ("Integration not found.");
            return;
         end if;
         if Context.Get_Status = 409 then
            Context.Set_Description ("Can't access this integration metadata.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error.");
            return;
         end if;

      end Integrations_Commerce_Get;

      package API_Integrations_Commerce_Patch is
         new Swagger.Servers.Operation
            (Handler => Integrations_Commerce_Patch,
             Method  => Swagger.Servers.PATCH,
             URI     => URI_Prefix & "/integrations/commerce/{external_business_id}",
             Mimes   => Media_List_1'Access);

      --  Update commerce integration
      procedure Integrations_Commerce_Patch
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         External_Business_Id : Swagger.UString;
         Integration_Request_Patch_Type : IntegrationRequestPatch_Type;
         Result : .Models.IntegrationMetadata_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         
         External_Business_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Swagger.Servers.Read (Req, Media_List_1, Input);
         if Swagger.Is_Null (Input) then
            Context.Set_Error (415, "Invalid content");
            return;
         end if;

         .Models.Deserialize (Input, "IntegrationRequestPatch_Type", Integration_Request_Patch_Type);
         Impl.Integrations_Commerce_Patch
            (External_Business_Id,
             Integration_Request_Patch_Type, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 404 then
            Context.Set_Description ("Integration not found.");
            return;
         end if;
         if Context.Get_Status = 409 then
            Context.Set_Description ("Can't access this integration metadata.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error.");
            return;
         end if;

      end Integrations_Commerce_Patch;

      package API_Integrations_Commerce_Post is
         new Swagger.Servers.Operation
            (Handler => Integrations_Commerce_Post,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/integrations/commerce",
             Mimes   => Media_List_1'Access);

      --  Create commerce integration
      procedure Integrations_Commerce_Post
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         Integration_Request_Type : IntegrationRequest_Type;
         Result : .Models.IntegrationMetadata_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         
         Swagger.Servers.Read (Req, Media_List_1, Input);
         if Swagger.Is_Null (Input) then
            Context.Set_Error (415, "Invalid content");
            return;
         end if;

         .Models.Deserialize (Input, "IntegrationRequest_Type", Integration_Request_Type);
         Impl.Integrations_Commerce_Post
            (Integration_Request_Type, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 404 then
            Context.Set_Description ("Integration not found.");
            return;
         end if;
         if Context.Get_Status = 409 then
            Context.Set_Description ("Can't access this integration metadata.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error.");
            return;
         end if;

      end Integrations_Commerce_Post;

      package API_Integrations_Get_By_Id is
         new Swagger.Servers.Operation
            (Handler => Integrations_Get_By_Id,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/integrations/{id}",
             Mimes   => Media_List_1'Access);

      --  Get integration metadata
      procedure Integrations_Get_By_Id
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Id : Swagger.UString;
         Result : .Models.IntegrationRecord_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         
         Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Integrations_Get_By_Id
            (Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 404 then
            Context.Set_Description ("Integration not found.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error.");
            return;
         end if;

      end Integrations_Get_By_Id;

      package API_Integrations_Get_List is
         new Swagger.Servers.Operation
            (Handler => Integrations_Get_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/integrations",
             Mimes   => Media_List_1'Access);

      --  Get integration metadata list
      procedure Integrations_Get_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Bookmark : Swagger.Nullable_UString;
         Page_Size : Swagger.Nullable_Integer;
         Result : .Models.IntegrationsGetList200Response_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         Bookmark := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "bookmark"));

         Page_Size := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "page_size"));

         
         Impl.Integrations_Get_List
            (Bookmark,
             Page_Size, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error.");
            return;
         end if;

      end Integrations_Get_List;

      package API_Integrations_Logs_Post is
         new Swagger.Servers.Operation
            (Handler => Integrations_Logs_Post,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/integrations/logs",
             Mimes   => Media_List_1'Access);

      --  Receives batched logs from integration applications.
      procedure Integrations_Logs_Post
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         Integration_Logs_Request_Type : IntegrationLogsRequest_Type;
         Result : .Models.IntegrationLogsSuccessResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         
         Swagger.Servers.Read (Req, Media_List_1, Input);
         if Swagger.Is_Null (Input) then
            Context.Set_Error (415, "Invalid content");
            return;
         end if;

         .Models.Deserialize (Input, "IntegrationLogsRequest_Type", Integration_Logs_Request_Type);
         Impl.Integrations_Logs_Post
            (Integration_Logs_Request_Type, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success.");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Bad request.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Integrations_Logs_Post;

      package API_Country_Keywords_Metrics_Get is
         new Swagger.Servers.Operation
            (Handler => Country_Keywords_Metrics_Get,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/keywords/metrics",
             Mimes   => Media_List_1'Access);

      --  Get country's keyword metrics
      procedure Country_Keywords_Metrics_Get
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Ad_Account_Id : Swagger.UString;
         Country_Code : Swagger.UString;
         Keywords : Swagger.UString_Vectors.Vector;
         Result : .Models.KeywordsMetricsArrayResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         Country_Code := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "country_code"));

         Keywords := To_Swagger.UString_Vectors.Vector (Swagger.Servers.Get_Query_Parameter (Req, "keywords"));

         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Country_Keywords_Metrics_Get
            (Ad_Account_Id,
             Country_Code,
             Keywords, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Country_Keywords_Metrics_Get;

      package API_Keywords_Create is
         new Swagger.Servers.Operation
            (Handler => Keywords_Create,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/keywords",
             Mimes   => Media_List_1'Access);

      --  Create keywords
      procedure Keywords_Create
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         Ad_Account_Id : Swagger.UString;
         Keywords_Request_Type : KeywordsRequest_Type;
         Result : .Models.KeywordsResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Swagger.Servers.Read (Req, Media_List_1, Input);
         if Swagger.Is_Null (Input) then
            Context.Set_Error (415, "Invalid content");
            return;
         end if;

         .Models.Deserialize (Input, "KeywordsRequest_Type", Keywords_Request_Type);
         Impl.Keywords_Create
            (Ad_Account_Id,
             Keywords_Request_Type, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Keywords_Create;

      package API_Keywords_Get is
         new Swagger.Servers.Operation
            (Handler => Keywords_Get,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/keywords",
             Mimes   => Media_List_1'Access);

      --  Get keywords
      procedure Keywords_Get
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Ad_Account_Id : Swagger.UString;
         Campaign_Id : Swagger.Nullable_UString;
         Ad_Group_Id : Swagger.Nullable_UString;
         Match_Types : .Models.MatchType_Type_Vectors.Vector;
         Page_Size : Swagger.Nullable_Integer;
         Bookmark : Swagger.Nullable_UString;
         Result : .Models.KeywordsGet200Response_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         Campaign_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "campaign_id"));

         Ad_Group_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "ad_group_id"));

         Match_Types := To_.Models.MatchType_Type_Vectors.Vector (Swagger.Servers.Get_Query_Parameter (Req, "match_types"));

         Page_Size := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "page_size"));

         Bookmark := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "bookmark"));

         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Keywords_Get
            (Ad_Account_Id,
             Campaign_Id,
             Ad_Group_Id,
             Match_Types,
             Page_Size,
             Bookmark, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Keywords_Get;

      package API_Keywords_Update is
         new Swagger.Servers.Operation
            (Handler => Keywords_Update,
             Method  => Swagger.Servers.PATCH,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/keywords",
             Mimes   => Media_List_1'Access);

      --  Update keywords
      procedure Keywords_Update
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         Ad_Account_Id : Swagger.UString;
         Keyword_Update_Body_Type : KeywordUpdateBody_Type;
         Result : .Models.KeywordsResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Swagger.Servers.Read (Req, Media_List_1, Input);
         if Swagger.Is_Null (Input) then
            Context.Set_Error (415, "Invalid content");
            return;
         end if;

         .Models.Deserialize (Input, "KeywordUpdateBody_Type", Keyword_Update_Body_Type);
         Impl.Keywords_Update
            (Ad_Account_Id,
             Keyword_Update_Body_Type, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Keywords_Update;

      package API_Trending_Keywords_List is
         new Swagger.Servers.Operation
            (Handler => Trending_Keywords_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/trends/keywords/{region}/top/{trend_type}",
             Mimes   => Media_List_1'Access);

      --  List trending keywords
      procedure Trending_Keywords_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Region : TrendsSupportedRegion_Type;
         Trend_Type : TrendType_Type;
         Interests : Swagger.UString_Vectors.Vector;
         Genders : Swagger.UString_Vectors.Vector;
         Ages : Swagger.UString_Vectors.Vector;
         Include_Keywords : Swagger.UString_Vectors.Vector;
         Normalize_Against_Group : Swagger.Nullable_Boolean;
         Limit : Swagger.Nullable_Integer;
         Result : .Models.TrendingKeywordsResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_User_Accounts_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         Interests := To_Swagger.UString_Vectors.Vector (Swagger.Servers.Get_Query_Parameter (Req, "interests"));

         Genders := To_Swagger.UString_Vectors.Vector (Swagger.Servers.Get_Query_Parameter (Req, "genders"));

         Ages := To_Swagger.UString_Vectors.Vector (Swagger.Servers.Get_Query_Parameter (Req, "ages"));

         Include_Keywords := To_Swagger.UString_Vectors.Vector (Swagger.Servers.Get_Query_Parameter (Req, "include_keywords"));

         Normalize_Against_Group := To_Boolean (Swagger.Servers.Get_Query_Parameter (Req, "normalize_against_group"));

         Limit := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "limit"));

         
         Region := To_TrendsSupportedRegion_Type (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Trend_Type := To_TrendType_Type (Swagger.Servers.Get_Path_Parameter (Req, 2));

         Impl.Trending_Keywords_List
            (Region,
             Trend_Type,
             Interests,
             Genders,
             Ages,
             Include_Keywords,
             Normalize_Against_Group,
             Limit, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid trending keywords request parameters");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Trending_Keywords_List;

      package API_Ad_Accounts_Subscriptions_Del_By_Id is
         new Swagger.Servers.Operation
            (Handler => Ad_Accounts_Subscriptions_Del_By_Id,
             Method  => Swagger.Servers.DELETE,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/leads/subscriptions/{subscription_id}",
             Mimes   => Media_List_1'Access);

      --  Delete lead ads subscription
      procedure Ad_Accounts_Subscriptions_Del_By_Id
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Ad_Account_Id : Swagger.UString;
         Subscription_Id : Swagger.UString;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Subscription_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 2));

         Impl.Ad_Accounts_Subscriptions_Del_By_Id
            (Ad_Account_Id,
             Subscription_Id, Context);

      end Ad_Accounts_Subscriptions_Del_By_Id;

      package API_Ad_Accounts_Subscriptions_Get_By_Id is
         new Swagger.Servers.Operation
            (Handler => Ad_Accounts_Subscriptions_Get_By_Id,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/leads/subscriptions/{subscription_id}",
             Mimes   => Media_List_1'Access);

      --  Get lead ads subscription
      procedure Ad_Accounts_Subscriptions_Get_By_Id
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Ad_Account_Id : Swagger.UString;
         Subscription_Id : Swagger.UString;
         Result : .Models.AdAccountGetSubscriptionResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Subscription_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 2));

         Impl.Ad_Accounts_Subscriptions_Get_By_Id
            (Ad_Account_Id,
             Subscription_Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid input parameters.");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Can't access this subscription.");
            return;
         end if;
         if Context.Get_Status = 404 then
            Context.Set_Description ("Subscription not found.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error.");
            return;
         end if;

      end Ad_Accounts_Subscriptions_Get_By_Id;

      package API_Ad_Accounts_Subscriptions_Get_List is
         new Swagger.Servers.Operation
            (Handler => Ad_Accounts_Subscriptions_Get_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/leads/subscriptions",
             Mimes   => Media_List_1'Access);

      --  Get lead ads subscriptions
      procedure Ad_Accounts_Subscriptions_Get_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Ad_Account_Id : Swagger.UString;
         Page_Size : Swagger.Nullable_Integer;
         Bookmark : Swagger.Nullable_UString;
         Result : .Models.AdAccountsSubscriptionsGetList200Response_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         Page_Size := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "page_size"));

         Bookmark := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "bookmark"));

         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Ad_Accounts_Subscriptions_Get_List
            (Ad_Account_Id,
             Page_Size,
             Bookmark, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Can't access this subscription.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error.");
            return;
         end if;

      end Ad_Accounts_Subscriptions_Get_List;

      package API_Ad_Accounts_Subscriptions_Post is
         new Swagger.Servers.Operation
            (Handler => Ad_Accounts_Subscriptions_Post,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/leads/subscriptions",
             Mimes   => Media_List_1'Access);

      --  Create lead ads subscription
      procedure Ad_Accounts_Subscriptions_Post
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         Ad_Account_Id : Swagger.UString;
         Ad_Account_Create_Subscription_Request_Type : AdAccountCreateSubscriptionRequest_Type;
         Result : .Models.AdAccountCreateSubscriptionResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Swagger.Servers.Read (Req, Media_List_1, Input);
         if Swagger.Is_Null (Input) then
            Context.Set_Error (415, "Invalid content");
            return;
         end if;

         .Models.Deserialize (Input, "AdAccountCreateSubscriptionRequest_Type", Ad_Account_Create_Subscription_Request_Type);
         Impl.Ad_Accounts_Subscriptions_Post
            (Ad_Account_Id,
             Ad_Account_Create_Subscription_Request_Type, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid input parameters.");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Can't access this subscription.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error.");
            return;
         end if;

      end Ad_Accounts_Subscriptions_Post;

      package API_Lead_Form_Get is
         new Swagger.Servers.Operation
            (Handler => Lead_Form_Get,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/lead_forms/{lead_form_id}",
             Mimes   => Media_List_1'Access);

      --  Get lead form by id
      procedure Lead_Form_Get
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Ad_Account_Id : Swagger.UString;
         Lead_Form_Id : Swagger.UString;
         Result : .Models.LeadFormResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Lead_Form_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 2));

         Impl.Lead_Form_Get
            (Ad_Account_Id,
             Lead_Form_Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid ad account lead forms parameters.");
            return;
         end if;
         if Context.Get_Status = 404 then
            Context.Set_Description ("The lead form ID for the given ad account ID does not exist.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Lead_Form_Get;

      package API_Lead_Form_Test_Create is
         new Swagger.Servers.Operation
            (Handler => Lead_Form_Test_Create,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/lead_forms/{lead_form_id}/test",
             Mimes   => Media_List_1'Access);

      --  Create lead form test data
      procedure Lead_Form_Test_Create
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         Ad_Account_Id : Swagger.UString;
         Lead_Form_Id : Swagger.UString;
         Lead_Form_Test_Request_Type : LeadFormTestRequest_Type;
         Result : .Models.LeadFormTestResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Lead_Form_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 2));

         Swagger.Servers.Read (Req, Media_List_1, Input);
         if Swagger.Is_Null (Input) then
            Context.Set_Error (415, "Invalid content");
            return;
         end if;

         .Models.Deserialize (Input, "LeadFormTestRequest_Type", Lead_Form_Test_Request_Type);
         Impl.Lead_Form_Test_Create
            (Ad_Account_Id,
             Lead_Form_Id,
             Lead_Form_Test_Request_Type, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid parameters.");
            return;
         end if;
         if Context.Get_Status = 404 then
            Context.Set_Description ("Lead not found.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Lead_Form_Test_Create;

      package API_Lead_Forms_Create is
         new Swagger.Servers.Operation
            (Handler => Lead_Forms_Create,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/lead_forms",
             Mimes   => Media_List_1'Access);

      --  Create lead forms
      procedure Lead_Forms_Create
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         Ad_Account_Id : Swagger.UString;
         Lead_Form_Create_Request : .Models.LeadFormCreateRequest_Type_Vectors.Vector;
         Result : .Models.LeadFormArrayResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Swagger.Servers.Read (Req, Media_List_1, Input);
         if Swagger.Is_Null (Input) then
            Context.Set_Error (415, "Invalid content");
            return;
         end if;

         .Models.Deserialize (Input, "LeadFormCreateRequest", Lead_Form_Create_Request);
         Impl.Lead_Forms_Create
            (Ad_Account_Id,
             Lead_Form_Create_Request, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid ad account lead forms parameters.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Lead_Forms_Create;

      package API_Lead_Forms_List is
         new Swagger.Servers.Operation
            (Handler => Lead_Forms_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/lead_forms",
             Mimes   => Media_List_1'Access);

      --  List lead forms
      procedure Lead_Forms_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Ad_Account_Id : Swagger.UString;
         Page_Size : Swagger.Nullable_Integer;
         Order : Swagger.Nullable_UString;
         Bookmark : Swagger.Nullable_UString;
         Result : .Models.LeadFormsList200Response_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         Page_Size := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "page_size"));

         Order := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "order"));

         Bookmark := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "bookmark"));

         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Lead_Forms_List
            (Ad_Account_Id,
             Page_Size,
             Order,
             Bookmark, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid ad account lead forms parameters.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Lead_Forms_List;

      package API_Lead_Forms_Update is
         new Swagger.Servers.Operation
            (Handler => Lead_Forms_Update,
             Method  => Swagger.Servers.PATCH,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/lead_forms",
             Mimes   => Media_List_1'Access);

      --  Update lead forms
      procedure Lead_Forms_Update
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         Ad_Account_Id : Swagger.UString;
         Lead_Form_Update_Request : .Models.LeadFormUpdateRequest_Type_Vectors.Vector;
         Result : .Models.LeadFormArrayResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Swagger.Servers.Read (Req, Media_List_1, Input);
         if Swagger.Is_Null (Input) then
            Context.Set_Error (415, "Invalid content");
            return;
         end if;

         .Models.Deserialize (Input, "LeadFormUpdateRequest", Lead_Form_Update_Request);
         Impl.Lead_Forms_Update
            (Ad_Account_Id,
             Lead_Form_Update_Request, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid ad account lead forms parameters.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Lead_Forms_Update;

      package API_Leads_Export_Create is
         new Swagger.Servers.Operation
            (Handler => Leads_Export_Create,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/leads_export",
             Mimes   => Media_List_1'Access);

      --  Create a request to export leads collected from a lead ad
      procedure Leads_Export_Create
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         Ad_Account_Id : Swagger.UString;
         Leads_Export_Create_Request_Type : LeadsExportCreateRequest_Type;
         Result : .Models.LeadsExportCreateResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Swagger.Servers.Read (Req, Media_List_1, Input);
         if Swagger.Is_Null (Input) then
            Context.Set_Error (415, "Invalid content");
            return;
         end if;

         .Models.Deserialize (Input, "LeadsExportCreateRequest_Type", Leads_Export_Create_Request_Type);
         Impl.Leads_Export_Create
            (Ad_Account_Id,
             Leads_Export_Create_Request_Type, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid ad account parameter.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Leads_Export_Create;

      package API_Leads_Export_Get is
         new Swagger.Servers.Operation
            (Handler => Leads_Export_Get,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/leads_export/{leads_export_id}",
             Mimes   => Media_List_1'Access);

      --  Get the lead export from the lead export create call
      procedure Leads_Export_Get
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Ad_Account_Id : Swagger.UString;
         Leads_Export_Id : Swagger.UString;
         Result : .Models.LeadsExportResponseData_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Leads_Export_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 2));

         Impl.Leads_Export_Get
            (Ad_Account_Id,
             Leads_Export_Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid ad account parameter.");
            return;
         end if;
         if Context.Get_Status = 404 then
            Context.Set_Description ("Invalid leads export id parameter.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Leads_Export_Get;

      package API_Media_Create is
         new Swagger.Servers.Operation
            (Handler => Media_Create,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/media",
             Mimes   => Media_List_1'Access);

      --  Register media upload
      procedure Media_Create
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         Media_Upload_Request_Type : MediaUploadRequest_Type;
         Result : .Models.MediaUpload_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Pins_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Pins_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         
         Swagger.Servers.Read (Req, Media_List_1, Input);
         if Swagger.Is_Null (Input) then
            Context.Set_Error (415, "Invalid content");
            return;
         end if;

         .Models.Deserialize (Input, "MediaUploadRequest_Type", Media_Upload_Request_Type);
         Impl.Media_Create
            (Media_Upload_Request_Type, Result, Context);
         if Context.Get_Status = 201 then
            Context.Set_Description ("response");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Media_Create;

      package API_Media_Get is
         new Swagger.Servers.Operation
            (Handler => Media_Get,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/media/{media_id}",
             Mimes   => Media_List_1'Access);

      --  Get media upload details
      procedure Media_Get
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Media_Id : Swagger.UString;
         Result : .Models.MediaUploadDetails_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Pins_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         
         Media_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Media_Get
            (Media_Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("response");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 404 then
            Context.Set_Description ("Media upload not found");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Media_Get;

      package API_Media_List is
         new Swagger.Servers.Operation
            (Handler => Media_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/media",
             Mimes   => Media_List_1'Access);

      --  List media uploads
      procedure Media_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Bookmark : Swagger.Nullable_UString;
         Page_Size : Swagger.Nullable_Integer;
         Result : .Models.MediaList200Response_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Pins_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         Bookmark := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "bookmark"));

         Page_Size := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "page_size"));

         
         Impl.Media_List
            (Bookmark,
             Page_Size, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("response");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Media_List;

      package API_Oauth_Token is
         new Swagger.Servers.Operation
            (Handler => Oauth_Token,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/oauth/token",
             Mimes   => Media_List_1'Access);

      --  Generate OAuth access token
      procedure Oauth_Token
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Grant_Type : Swagger.UString;
         Result : .Models.OauthAccessTokenResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         
         
         Swagger.Servers.Get_Parameter (Context, "grant_type", Grant_Type);
         Impl.Oauth_Token
            (Grant_Type, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("response");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Oauth_Token;

      package API_Order_Lines_Get is
         new Swagger.Servers.Operation
            (Handler => Order_Lines_Get,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/order_lines/{order_line_id}",
             Mimes   => Media_List_1'Access);

      --  Get order line
      procedure Order_Lines_Get
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Ad_Account_Id : Swagger.UString;
         Order_Line_Id : Swagger.UString;
         Result : .Models.OrderLine_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Order_Line_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 2));

         Impl.Order_Lines_Get
            (Ad_Account_Id,
             Order_Line_Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Order_Lines_Get;

      package API_Order_Lines_List is
         new Swagger.Servers.Operation
            (Handler => Order_Lines_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/order_lines",
             Mimes   => Media_List_1'Access);

      --  Get order lines
      procedure Order_Lines_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Ad_Account_Id : Swagger.UString;
         Page_Size : Swagger.Nullable_Integer;
         Order : Swagger.Nullable_UString;
         Bookmark : Swagger.Nullable_UString;
         Result : .Models.OrderLinesList200Response_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         Page_Size := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "page_size"));

         Order := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "order"));

         Bookmark := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "bookmark"));

         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Order_Lines_List
            (Ad_Account_Id,
             Page_Size,
             Order,
             Bookmark, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Order_Lines_List;

      package API_Multi_Pins_Analytics is
         new Swagger.Servers.Operation
            (Handler => Multi_Pins_Analytics,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/pins/analytics",
             Mimes   => Media_List_1'Access);

      --  Get multiple Pin analytics
      procedure Multi_Pins_Analytics
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Pin_Ids : Swagger.UString_Vectors.Vector;
         Start_Date : Swagger.Date;
         End_Date : Swagger.Date;
         Metric_Types : .Models.PinsAnalyticsMetricTypesParameterInner_Type_Vectors.Vector;
         App_Types : Swagger.Nullable_UString;
         Ad_Account_Id : Swagger.Nullable_UString;
         Result : Swagger.Map_Map;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Pins_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Pins_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         Pin_Ids := To_Swagger.UString_Vectors.Vector (Swagger.Servers.Get_Query_Parameter (Req, "pin_ids"));

         Start_Date := To_Swagger.Date (Swagger.Servers.Get_Query_Parameter (Req, "start_date"));

         End_Date := To_Swagger.Date (Swagger.Servers.Get_Query_Parameter (Req, "end_date"));

         App_Types := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "app_types"));

         Metric_Types := To_.Models.PinsAnalyticsMetricTypesParameterInner_Type_Vectors.Vector (Swagger.Servers.Get_Query_Parameter (Req, "metric_types"));

         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "ad_account_id"));

         
         Impl.Multi_Pins_Analytics
            (Pin_Ids,
             Start_Date,
             End_Date,
             Metric_Types,
             App_Types,
             Ad_Account_Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("response");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid pins analytics parameters.");
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Not authorized to access board or Pin.");
            return;
         end if;
         if Context.Get_Status = 404 then
            Context.Set_Description ("Pin not found.");
            return;
         end if;
         if Context.Get_Status = 429 then
            Context.Set_Description ("This request exceeded a rate limit. This can happen if the client exceeds one of the published rate limits or if multiple write operations are applied to an object within a short time window.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Multi_Pins_Analytics;

      package API_Pins_Analytics is
         new Swagger.Servers.Operation
            (Handler => Pins_Analytics,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/pins/{pin_id}/analytics",
             Mimes   => Media_List_1'Access);

      --  Get Pin analytics
      procedure Pins_Analytics
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Pin_Id : Swagger.UString;
         Start_Date : Swagger.Date;
         End_Date : Swagger.Date;
         Metric_Types : .Models.PinsAnalyticsMetricTypesParameterInner_Type_Vectors.Vector;
         App_Types : Swagger.Nullable_UString;
         Split_Field : Swagger.Nullable_UString;
         Ad_Account_Id : Swagger.Nullable_UString;
         Result : Swagger..Models.PinAnalyticsMetricsResponse_Type_Map;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Pins_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Pins_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         Start_Date := To_Swagger.Date (Swagger.Servers.Get_Query_Parameter (Req, "start_date"));

         End_Date := To_Swagger.Date (Swagger.Servers.Get_Query_Parameter (Req, "end_date"));

         App_Types := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "app_types"));

         Metric_Types := To_.Models.PinsAnalyticsMetricTypesParameterInner_Type_Vectors.Vector (Swagger.Servers.Get_Query_Parameter (Req, "metric_types"));

         Split_Field := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "split_field"));

         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "ad_account_id"));

         
         Pin_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Pins_Analytics
            (Pin_Id,
             Start_Date,
             End_Date,
             Metric_Types,
             App_Types,
             Split_Field,
             Ad_Account_Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("response");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid pins analytics parameters.");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Not authorized to access board or Pin.");
            return;
         end if;
         if Context.Get_Status = 404 then
            Context.Set_Description ("Pin not found.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Pins_Analytics;

      package API_Pins_Create is
         new Swagger.Servers.Operation
            (Handler => Pins_Create,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/pins",
             Mimes   => Media_List_1'Access);

      --  Create Pin
      procedure Pins_Create
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         Pin_Create_Type : PinCreate_Type;
         Ad_Account_Id : Swagger.Nullable_UString;
         Result : .Models.Pin_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Pins_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Pins_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "ad_account_id"));

         
         Swagger.Servers.Read (Req, Media_List_1, Input);
         if Swagger.Is_Null (Input) then
            Context.Set_Error (415, "Invalid content");
            return;
         end if;

         .Models.Deserialize (Input, "PinCreate_Type", Pin_Create_Type);
         Impl.Pins_Create
            (Pin_Create_Type,
             Ad_Account_Id, Result, Context);
         if Context.Get_Status = 201 then
            Context.Set_Description ("Successful pin creation.");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid Pin parameters response");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("The Pin's image is too small, too large or is broken");
            return;
         end if;
         if Context.Get_Status = 404 then
            Context.Set_Description ("Board or section not found");
            return;
         end if;
         if Context.Get_Status = 429 then
            Context.Set_Description ("This request exceeded a rate limit. This can happen if the client exceeds one of the published rate limits or if multiple write operations are applied to an object within a short time window.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Pins_Create;

      package API_Pins_Delete is
         new Swagger.Servers.Operation
            (Handler => Pins_Delete,
             Method  => Swagger.Servers.DELETE,
             URI     => URI_Prefix & "/pins/{pin_id}",
             Mimes   => Media_List_1'Access);

      --  Delete Pin
      procedure Pins_Delete
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Pin_Id : Swagger.UString;
         Ad_Account_Id : Swagger.Nullable_UString;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Pins_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Pins_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "ad_account_id"));

         
         Pin_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Pins_Delete
            (Pin_Id,
             Ad_Account_Id, Context);

      end Pins_Delete;

      package API_Pins_Get is
         new Swagger.Servers.Operation
            (Handler => Pins_Get,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/pins/{pin_id}",
             Mimes   => Media_List_1'Access);

      --  Get Pin
      procedure Pins_Get
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Pin_Id : Swagger.UString;
         Pin_Metrics : Swagger.Nullable_Boolean;
         Ad_Account_Id : Swagger.Nullable_UString;
         Result : .Models.Pin_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Pins_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Pins_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         Pin_Metrics := To_Boolean (Swagger.Servers.Get_Query_Parameter (Req, "pin_metrics"));

         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "ad_account_id"));

         
         Pin_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Pins_Get
            (Pin_Id,
             Pin_Metrics,
             Ad_Account_Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("response");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Not authorized to access board or Pin.");
            return;
         end if;
         if Context.Get_Status = 404 then
            Context.Set_Description ("Pin not found.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Pins_Get;

      package API_Pins_List is
         new Swagger.Servers.Operation
            (Handler => Pins_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/pins",
             Mimes   => Media_List_1'Access);

      --  List Pins
      procedure Pins_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Bookmark : Swagger.Nullable_UString;
         Page_Size : Swagger.Nullable_Integer;
         Pin_Filter : Swagger.Nullable_UString;
         Include_Protected_Pins : Swagger.Nullable_Boolean;
         Pin_Type : Swagger.Nullable_UString;
         Creative_Types : Swagger.UString_Vectors.Vector;
         Ad_Account_Id : Swagger.Nullable_UString;
         Pin_Metrics : Swagger.Nullable_Boolean;
         Result : .Models.PinsList200Response_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Pins_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Pins_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         Bookmark := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "bookmark"));

         Page_Size := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "page_size"));

         Pin_Filter := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "pin_filter"));

         Include_Protected_Pins := To_Boolean (Swagger.Servers.Get_Query_Parameter (Req, "include_protected_pins"));

         Pin_Type := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "pin_type"));

         Creative_Types := To_Swagger.UString_Vectors.Vector (Swagger.Servers.Get_Query_Parameter (Req, "creative_types"));

         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "ad_account_id"));

         Pin_Metrics := To_Boolean (Swagger.Servers.Get_Query_Parameter (Req, "pin_metrics"));

         
         Impl.Pins_List
            (Bookmark,
             Page_Size,
             Pin_Filter,
             Include_Protected_Pins,
             Pin_Type,
             Creative_Types,
             Ad_Account_Id,
             Pin_Metrics, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid pin filter value");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Pins_List;

      package API_Pins_Save is
         new Swagger.Servers.Operation
            (Handler => Pins_Save,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/pins/{pin_id}/save",
             Mimes   => Media_List_1'Access);

      --  Save Pin
      procedure Pins_Save
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         Pin_Id : Swagger.UString;
         Pins_Save_Request_Type : PinsSaveRequest_Type;
         Ad_Account_Id : Swagger.Nullable_UString;
         Result : .Models.Pin_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Pins_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Pins_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "ad_account_id"));

         
         Pin_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Swagger.Servers.Read (Req, Media_List_1, Input);
         if Swagger.Is_Null (Input) then
            Context.Set_Error (415, "Invalid content");
            return;
         end if;

         .Models.Deserialize (Input, "PinsSaveRequest_Type", Pins_Save_Request_Type);
         Impl.Pins_Save
            (Pin_Id,
             Pins_Save_Request_Type,
             Ad_Account_Id, Result, Context);
         if Context.Get_Status = 201 then
            Context.Set_Description ("Successfully saved pin.");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Not authorized to access Board or Pin.");
            return;
         end if;
         if Context.Get_Status = 404 then
            Context.Set_Description ("Board or Pin not found.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Pins_Save;

      package API_Pins_Update is
         new Swagger.Servers.Operation
            (Handler => Pins_Update,
             Method  => Swagger.Servers.PATCH,
             URI     => URI_Prefix & "/pins/{pin_id}",
             Mimes   => Media_List_1'Access);

      --  Update Pin
      procedure Pins_Update
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         Pin_Id : Swagger.UString;
         Pin_Update_Type : PinUpdate_Type;
         Ad_Account_Id : Swagger.Nullable_UString;
         Result : .Models.Pin_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Pins_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Pins_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "ad_account_id"));

         
         Pin_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Swagger.Servers.Read (Req, Media_List_1, Input);
         if Swagger.Is_Null (Input) then
            Context.Set_Error (415, "Invalid content");
            return;
         end if;

         .Models.Deserialize (Input, "PinUpdate_Type", Pin_Update_Type);
         Impl.Pins_Update
            (Pin_Id,
             Pin_Update_Type,
             Ad_Account_Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("response");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Not authorized to update Pin.");
            return;
         end if;
         if Context.Get_Status = 404 then
            Context.Set_Description ("Pin not found.");
            return;
         end if;
         if Context.Get_Status = 429 then
            Context.Set_Description ("This request exceeded a rate limit. This can happen if the client exceeds one of the published rate limits or if multiple write operations are applied to an object within a short time window.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Pins_Update;

      package API_Product_Group_Promotions_Create is
         new Swagger.Servers.Operation
            (Handler => Product_Group_Promotions_Create,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/product_group_promotions",
             Mimes   => Media_List_1'Access);

      --  Create product group promotions
      procedure Product_Group_Promotions_Create
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         Ad_Account_Id : Swagger.UString;
         Product_Group_Promotion_Create_Request_Type : ProductGroupPromotionCreateRequest_Type;
         Result : .Models.ProductGroupPromotionResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Swagger.Servers.Read (Req, Media_List_1, Input);
         if Swagger.Is_Null (Input) then
            Context.Set_Error (415, "Invalid content");
            return;
         end if;

         .Models.Deserialize (Input, "ProductGroupPromotionCreateRequest_Type", Product_Group_Promotion_Create_Request_Type);
         Impl.Product_Group_Promotions_Create
            (Ad_Account_Id,
             Product_Group_Promotion_Create_Request_Type, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Product_Group_Promotions_Create;

      package API_Product_Group_Promotions_Get is
         new Swagger.Servers.Operation
            (Handler => Product_Group_Promotions_Get,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/product_group_promotions/{product_group_promotion_id}",
             Mimes   => Media_List_1'Access);

      --  Get a product group promotion by id
      procedure Product_Group_Promotions_Get
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Ad_Account_Id : Swagger.UString;
         Product_Group_Promotion_Id : Swagger.UString;
         Result : .Models.ProductGroupPromotionResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Product_Group_Promotion_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 2));

         Impl.Product_Group_Promotions_Get
            (Ad_Account_Id,
             Product_Group_Promotion_Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Product_Group_Promotions_Get;

      package API_Product_Group_Promotions_List is
         new Swagger.Servers.Operation
            (Handler => Product_Group_Promotions_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/product_group_promotions",
             Mimes   => Media_List_1'Access);

      --  Get product group promotions
      procedure Product_Group_Promotions_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Ad_Account_Id : Swagger.UString;
         Product_Group_Promotion_Ids : Swagger.UString_Vectors.Vector;
         Entity_Statuses : Swagger.UString_Vectors.Vector;
         Ad_Group_Id : Swagger.Nullable_UString;
         Page_Size : Swagger.Nullable_Integer;
         Order : Swagger.Nullable_UString;
         Bookmark : Swagger.Nullable_UString;
         Result : .Models.ProductGroupPromotionsList200Response_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         Product_Group_Promotion_Ids := To_Swagger.UString_Vectors.Vector (Swagger.Servers.Get_Query_Parameter (Req, "product_group_promotion_ids"));

         Entity_Statuses := To_Swagger.UString_Vectors.Vector (Swagger.Servers.Get_Query_Parameter (Req, "entity_statuses"));

         Ad_Group_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "ad_group_id"));

         Page_Size := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "page_size"));

         Order := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "order"));

         Bookmark := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "bookmark"));

         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Product_Group_Promotions_List
            (Ad_Account_Id,
             Product_Group_Promotion_Ids,
             Entity_Statuses,
             Ad_Group_Id,
             Page_Size,
             Order,
             Bookmark, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Product_Group_Promotions_List;

      package API_Product_Group_Promotions_Update is
         new Swagger.Servers.Operation
            (Handler => Product_Group_Promotions_Update,
             Method  => Swagger.Servers.PATCH,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/product_group_promotions",
             Mimes   => Media_List_1'Access);

      --  Update product group promotions
      procedure Product_Group_Promotions_Update
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         Ad_Account_Id : Swagger.UString;
         Product_Group_Promotion_Update_Request_Type : ProductGroupPromotionUpdateRequest_Type;
         Result : .Models.ProductGroupPromotionResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Swagger.Servers.Read (Req, Media_List_1, Input);
         if Swagger.Is_Null (Input) then
            Context.Set_Error (415, "Invalid content");
            return;
         end if;

         .Models.Deserialize (Input, "ProductGroupPromotionUpdateRequest_Type", Product_Group_Promotion_Update_Request_Type);
         Impl.Product_Group_Promotions_Update
            (Ad_Account_Id,
             Product_Group_Promotion_Update_Request_Type, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Product_Group_Promotions_Update;

      package API_Product_Groups_Analytics is
         new Swagger.Servers.Operation
            (Handler => Product_Groups_Analytics,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/product_groups/analytics",
             Mimes   => Media_List_1'Access);

      --  Get product group analytics
      procedure Product_Groups_Analytics
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Ad_Account_Id : Swagger.UString;
         Start_Date : Swagger.Date;
         End_Date : Swagger.Date;
         Product_Group_Ids : Swagger.UString_Vectors.Vector;
         Columns : Swagger.UString_Vectors.Vector;
         Granularity : Granularity_Type;
         Click_Window_Days : Swagger.Nullable_Integer;
         Engagement_Window_Days : Swagger.Nullable_Integer;
         View_Window_Days : Swagger.Nullable_Integer;
         Conversion_Report_Time : Swagger.Nullable_UString;
         Result : .Models.ProductGroupAnalyticsResponseInner_Type_Vectors.Vector;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         Start_Date := To_Swagger.Date (Swagger.Servers.Get_Query_Parameter (Req, "start_date"));

         End_Date := To_Swagger.Date (Swagger.Servers.Get_Query_Parameter (Req, "end_date"));

         Product_Group_Ids := To_Swagger.UString_Vectors.Vector (Swagger.Servers.Get_Query_Parameter (Req, "product_group_ids"));

         Columns := To_Swagger.UString_Vectors.Vector (Swagger.Servers.Get_Query_Parameter (Req, "columns"));

         Granularity := To_Granularity_Type (Swagger.Servers.Get_Query_Parameter (Req, "granularity"));

         Click_Window_Days := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "click_window_days"));

         Engagement_Window_Days := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "engagement_window_days"));

         View_Window_Days := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "view_window_days"));

         Conversion_Report_Time := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "conversion_report_time"));

         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Product_Groups_Analytics
            (Ad_Account_Id,
             Start_Date,
             End_Date,
             Product_Group_Ids,
             Columns,
             Granularity,
             Click_Window_Days,
             Engagement_Window_Days,
             View_Window_Days,
             Conversion_Report_Time, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid ad account ads analytics parameters.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Product_Groups_Analytics;

      package API_Ad_Account_Countries_Get is
         new Swagger.Servers.Operation
            (Handler => Ad_Account_Countries_Get,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/resources/ad_account_countries",
             Mimes   => Media_List_1'Access);

      --  Get ad accounts countries
      procedure Ad_Account_Countries_Get
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Result : .Models.AdAccountsCountryResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         
         Impl.Ad_Account_Countries_Get (Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Ad_Account_Countries_Get;

      package API_Delivery_Metrics_Get is
         new Swagger.Servers.Operation
            (Handler => Delivery_Metrics_Get,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/resources/delivery_metrics",
             Mimes   => Media_List_1'Access);

      --  Get available metrics' definitions
      procedure Delivery_Metrics_Get
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Report_Type : Swagger.Nullable_UString;
         Result : .Models.DeliveryMetricsResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Pins_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_User_Accounts_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         Report_Type := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "report_type"));

         
         Impl.Delivery_Metrics_Get
            (Report_Type, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Delivery_Metrics_Get;

      package API_Interest_Targeting_Options_Get is
         new Swagger.Servers.Operation
            (Handler => Interest_Targeting_Options_Get,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/resources/targeting/interests/{interest_id}",
             Mimes   => Media_List_1'Access);

      --  Get interest details
      procedure Interest_Targeting_Options_Get
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Interest_Id : Swagger.UString;
         Result : .Models.SingleInterestTargetingOptionResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         
         Interest_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Interest_Targeting_Options_Get
            (Interest_Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Interest_Targeting_Options_Get;

      package API_Lead_Form_Questions_Get is
         new Swagger.Servers.Operation
            (Handler => Lead_Form_Questions_Get,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/resources/lead_form_questions",
             Mimes   => Media_List_1'Access);

      --  Get lead form questions
      procedure Lead_Form_Questions_Get
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         
         Impl.Lead_Form_Questions_Get (Context);

      end Lead_Form_Questions_Get;

      package API_Metrics_Ready_State_Get is
         new Swagger.Servers.Operation
            (Handler => Metrics_Ready_State_Get,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/resources/metrics_ready_state",
             Mimes   => Media_List_1'Access);

      --  Get metrics ready state
      procedure Metrics_Ready_State_Get
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Date : Swagger.UString;
         Result : .Models.BookClosedResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         Date := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "date"));

         
         Impl.Metrics_Ready_State_Get
            (Date, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Metrics_Ready_State_Get;

      package API_Targeting_Options_Get is
         new Swagger.Servers.Operation
            (Handler => Targeting_Options_Get,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/resources/targeting/{targeting_type}",
             Mimes   => Media_List_1'Access);

      --  Get targeting options
      procedure Targeting_Options_Get
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Targeting_Type : Swagger.UString;
         Client_Id : Swagger.Nullable_UString;
         Oauth_Signature : Swagger.Nullable_UString;
         Timestamp : Swagger.Nullable_UString;
         Ad_Account_Id : Swagger.Nullable_UString;
         Result : Swagger.Object_Vectors.Vector;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         Client_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "client_id"));

         Oauth_Signature := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "oauth_signature"));

         Timestamp := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "timestamp"));

         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "ad_account_id"));

         
         Targeting_Type := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Targeting_Options_Get
            (Targeting_Type,
             Client_Id,
             Oauth_Signature,
             Timestamp,
             Ad_Account_Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Stream.Write_Entity ("", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Targeting_Options_Get;

      package API_Search_Partner_Pins is
         new Swagger.Servers.Operation
            (Handler => Search_Partner_Pins,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/search/partner/pins",
             Mimes   => Media_List_1'Access);

      --  Search pins by a given search term
      procedure Search_Partner_Pins
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Term : Swagger.UString;
         Country_Code : Swagger.UString;
         Bookmark : Swagger.Nullable_UString;
         Locale : Swagger.Nullable_UString;
         Limit : Swagger.Nullable_Integer;
         Result : .Models.SearchPartnerPins200Response_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Pins_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         Term := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "term"));

         Country_Code := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "country_code"));

         Bookmark := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "bookmark"));

         Locale := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "locale"));

         Limit := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "limit"));

         
         Impl.Search_Partner_Pins
            (Term,
             Country_Code,
             Bookmark,
             Locale,
             Limit, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid pins");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Search_Partner_Pins;

      package API_Search_User_Boards_Get is
         new Swagger.Servers.Operation
            (Handler => Search_User_Boards_Get,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/search/boards",
             Mimes   => Media_List_1'Access);

      --  Search user's boards
      procedure Search_User_Boards_Get
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Ad_Account_Id : Swagger.Nullable_UString;
         Bookmark : Swagger.Nullable_UString;
         Page_Size : Swagger.Nullable_Integer;
         Query : Swagger.Nullable_UString;
         Result : .Models.SearchUserBoardsGet200Response_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Read_Secret.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Read_Secret.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "ad_account_id"));

         Bookmark := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "bookmark"));

         Page_Size := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "page_size"));

         Query := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "query"));

         
         Impl.Search_User_Boards_Get
            (Ad_Account_Id,
             Bookmark,
             Page_Size,
             Query, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("response");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Search_User_Boards_Get;

      package API_Search_User_Pins_List is
         new Swagger.Servers.Operation
            (Handler => Search_User_Pins_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/search/pins",
             Mimes   => Media_List_1'Access);

      --  Search user's Pins
      procedure Search_User_Pins_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Query : Swagger.UString;
         Ad_Account_Id : Swagger.Nullable_UString;
         Bookmark : Swagger.Nullable_UString;
         Result : .Models.PinsList200Response_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Read_Secret.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Pins_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Pins_Read_Secret.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "ad_account_id"));

         Query := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "query"));

         Bookmark := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "bookmark"));

         
         Impl.Search_User_Pins_List
            (Query,
             Ad_Account_Id,
             Bookmark, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 404 then
            Context.Set_Description ("User not found");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Search_User_Pins_List;

      package API_Targeting_Template_Create is
         new Swagger.Servers.Operation
            (Handler => Targeting_Template_Create,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/targeting_templates",
             Mimes   => Media_List_1'Access);

      --  Create targeting templates
      procedure Targeting_Template_Create
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         Ad_Account_Id : Swagger.UString;
         Targeting_Template_Create_Type : TargetingTemplateCreate_Type;
         Result : .Models.TargetingTemplateGetResponseData_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Swagger.Servers.Read (Req, Media_List_1, Input);
         if Swagger.Is_Null (Input) then
            Context.Set_Error (415, "Invalid content");
            return;
         end if;

         .Models.Deserialize (Input, "TargetingTemplateCreate_Type", Targeting_Template_Create_Type);
         Impl.Targeting_Template_Create
            (Ad_Account_Id,
             Targeting_Template_Create_Type, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid ad account id.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Targeting_Template_Create;

      package API_Targeting_Template_List is
         new Swagger.Servers.Operation
            (Handler => Targeting_Template_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/targeting_templates",
             Mimes   => Media_List_1'Access);

      --  List targeting templates
      procedure Targeting_Template_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Ad_Account_Id : Swagger.UString;
         Order : Swagger.Nullable_UString;
         Include_Sizing : Swagger.Nullable_Boolean;
         Search_Query : Swagger.Nullable_UString;
         Page_Size : Swagger.Nullable_Integer;
         Bookmark : Swagger.Nullable_UString;
         Result : .Models.TargetingTemplateList200Response_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         Order := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "order"));

         Include_Sizing := To_Boolean (Swagger.Servers.Get_Query_Parameter (Req, "include_sizing"));

         Search_Query := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "search_query"));

         Page_Size := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "page_size"));

         Bookmark := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "bookmark"));

         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Targeting_Template_List
            (Ad_Account_Id,
             Order,
             Include_Sizing,
             Search_Query,
             Page_Size,
             Bookmark, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid ad account id.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Targeting_Template_List;

      package API_Targeting_Template_Update is
         new Swagger.Servers.Operation
            (Handler => Targeting_Template_Update,
             Method  => Swagger.Servers.PATCH,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/targeting_templates",
             Mimes   => Media_List_1'Access);

      --  Update targeting templates
      procedure Targeting_Template_Update
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         Ad_Account_Id : Swagger.UString;
         Targeting_Template_Update_Request_Type : TargetingTemplateUpdateRequest_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Swagger.Servers.Read (Req, Media_List_1, Input);
         if Swagger.Is_Null (Input) then
            Context.Set_Error (415, "Invalid content");
            return;
         end if;

         .Models.Deserialize (Input, "TargetingTemplateUpdateRequest_Type", Targeting_Template_Update_Request_Type);
         Impl.Targeting_Template_Update
            (Ad_Account_Id,
             Targeting_Template_Update_Request_Type, Context);

      end Targeting_Template_Update;

      package API_Terms_Related_List is
         new Swagger.Servers.Operation
            (Handler => Terms_Related_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/terms/related",
             Mimes   => Media_List_1'Access);

      --  List related terms
      procedure Terms_Related_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Terms : Swagger.UString_Vectors.Vector;
         Result : .Models.RelatedTerms_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         Terms := To_Swagger.UString_Vectors.Vector (Swagger.Servers.Get_Query_Parameter (Req, "terms"));

         
         Impl.Terms_Related_List
            (Terms, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid terms related parameters.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Terms_Related_List;

      package API_Terms_Suggested_List is
         new Swagger.Servers.Operation
            (Handler => Terms_Suggested_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/terms/suggested",
             Mimes   => Media_List_1'Access);

      --  List suggested terms
      procedure Terms_Suggested_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Term : Swagger.UString;
         Limit : Swagger.Nullable_Integer;
         Result : Swagger.UString_Vectors.Vector;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         Term := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "term"));

         Limit := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "limit"));

         
         Impl.Terms_Suggested_List
            (Term,
             Limit, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Stream.Write_Entity ("", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid terms suggested parameters.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Terms_Suggested_List;

      package API_Terms_Of_Service_Get is
         new Swagger.Servers.Operation
            (Handler => Terms_Of_Service_Get,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/terms_of_service",
             Mimes   => Media_List_1'Access);

      --  Get terms of service
      procedure Terms_Of_Service_Get
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Ad_Account_Id : Swagger.UString;
         Include_Html : Swagger.Nullable_Boolean;
         Tos_Type : Swagger.Nullable_UString;
         Result : .Models.TermsOfService_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         Include_Html := To_Boolean (Swagger.Servers.Get_Query_Parameter (Req, "include_html"));

         Tos_Type := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "tos_type"));

         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Terms_Of_Service_Get
            (Ad_Account_Id,
             Include_Html,
             Tos_Type, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Terms_Of_Service_Get;

      package API_Boards_User_Follows_List is
         new Swagger.Servers.Operation
            (Handler => Boards_User_Follows_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/user_account/following/boards",
             Mimes   => Media_List_1'Access);

      --  List following boards
      procedure Boards_User_Follows_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Bookmark : Swagger.Nullable_UString;
         Page_Size : Swagger.Nullable_Integer;
         Explicit_Following : Swagger.Nullable_Boolean;
         Ad_Account_Id : Swagger.Nullable_UString;
         Result : .Models.BoardsUserFollowsList200Response_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_User_Accounts_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_User_Accounts_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         Bookmark := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "bookmark"));

         Page_Size := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "page_size"));

         Explicit_Following := To_Boolean (Swagger.Servers.Get_Query_Parameter (Req, "explicit_following"));

         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "ad_account_id"));

         
         Impl.Boards_User_Follows_List
            (Bookmark,
             Page_Size,
             Explicit_Following,
             Ad_Account_Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid user id");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Boards_User_Follows_List;

      package API_Follow_User_Update is
         new Swagger.Servers.Operation
            (Handler => Follow_User_Update,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/user_account/following/{username}",
             Mimes   => Media_List_1'Access);

      --  Follow user
      procedure Follow_User_Update
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         Username : Swagger.UString;
         Follow_User_Request_Type : FollowUserRequest_Type;
         Result : .Models.UserSummary_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_User_Accounts_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         
         Username := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Swagger.Servers.Read (Req, Media_List_1, Input);
         if Swagger.Is_Null (Input) then
            Context.Set_Error (415, "Invalid content");
            return;
         end if;

         .Models.Deserialize (Input, "FollowUserRequest_Type", Follow_User_Request_Type);
         Impl.Follow_User_Update
            (Username,
             Follow_User_Request_Type, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 404 then
            Context.Set_Description ("User not found");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Follow_User_Update;

      package API_Followers_List is
         new Swagger.Servers.Operation
            (Handler => Followers_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/user_account/followers",
             Mimes   => Media_List_1'Access);

      --  List followers
      procedure Followers_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Bookmark : Swagger.Nullable_UString;
         Page_Size : Swagger.Nullable_Integer;
         Result : .Models.FollowersList200Response_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_User_Accounts_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_User_Accounts_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         Bookmark := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "bookmark"));

         Page_Size := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "page_size"));

         
         Impl.Followers_List
            (Bookmark,
             Page_Size, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid user id");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Followers_List;

      package API_Linked_Business_Accounts_Get is
         new Swagger.Servers.Operation
            (Handler => Linked_Business_Accounts_Get,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/user_account/businesses",
             Mimes   => Media_List_1'Access);

      --  List linked businesses
      procedure Linked_Business_Accounts_Get
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Result : .Models.LinkedBusiness_Type_Vectors.Vector;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_User_Accounts_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_User_Accounts_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         
         Impl.Linked_Business_Accounts_Get (Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Linked_Business_Accounts_Get;

      package API_Unverify_Website_Delete is
         new Swagger.Servers.Operation
            (Handler => Unverify_Website_Delete,
             Method  => Swagger.Servers.DELETE,
             URI     => URI_Prefix & "/user_account/websites",
             Mimes   => Media_List_1'Access);

      --  Unverify website
      procedure Unverify_Website_Delete
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Website : Swagger.UString;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_User_Accounts_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         Website := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "website"));

         
         Impl.Unverify_Website_Delete
            (Website, Context);

      end Unverify_Website_Delete;

      package API_User_Account_Analytics is
         new Swagger.Servers.Operation
            (Handler => User_Account_Analytics,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/user_account/analytics",
             Mimes   => Media_List_1'Access);

      --  Get user account analytics
      procedure User_Account_Analytics
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Start_Date : Swagger.Date;
         End_Date : Swagger.Date;
         From_Claimed_Content : Swagger.Nullable_UString;
         Pin_Format : Swagger.Nullable_UString;
         App_Types : Swagger.Nullable_UString;
         Content_Type : Swagger.Nullable_UString;
         Source : Swagger.Nullable_UString;
         Metric_Types : Swagger.UString_Vectors.Vector;
         Split_Field : Swagger.Nullable_UString;
         Ad_Account_Id : Swagger.Nullable_UString;
         Result : Swagger..Models.AnalyticsMetricsResponse_Type_Map;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_User_Accounts_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         Start_Date := To_Swagger.Date (Swagger.Servers.Get_Query_Parameter (Req, "start_date"));

         End_Date := To_Swagger.Date (Swagger.Servers.Get_Query_Parameter (Req, "end_date"));

         From_Claimed_Content := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "from_claimed_content"));

         Pin_Format := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "pin_format"));

         App_Types := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "app_types"));

         Content_Type := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "content_type"));

         Source := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "source"));

         Metric_Types := To_Swagger.UString_Vectors.Vector (Swagger.Servers.Get_Query_Parameter (Req, "metric_types"));

         Split_Field := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "split_field"));

         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "ad_account_id"));

         
         Impl.User_Account_Analytics
            (Start_Date,
             End_Date,
             From_Claimed_Content,
             Pin_Format,
             App_Types,
             Content_Type,
             Source,
             Metric_Types,
             Split_Field,
             Ad_Account_Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid user accounts analytics parameters.");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Not authorized to access the user account analytics.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end User_Account_Analytics;

      package API_User_Account_Analytics_Top_Pins is
         new Swagger.Servers.Operation
            (Handler => User_Account_Analytics_Top_Pins,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/user_account/analytics/top_pins",
             Mimes   => Media_List_1'Access);

      --  Get user account top pins analytics
      procedure User_Account_Analytics_Top_Pins
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Start_Date : Swagger.Date;
         End_Date : Swagger.Date;
         Sort_By : Swagger.UString;
         From_Claimed_Content : Swagger.Nullable_UString;
         Pin_Format : Swagger.Nullable_UString;
         App_Types : Swagger.Nullable_UString;
         Content_Type : Swagger.Nullable_UString;
         Source : Swagger.Nullable_UString;
         Metric_Types : Swagger.UString_Vectors.Vector;
         Num_Of_Pins : Swagger.Nullable_Integer;
         Created_In_Last_NDays : Swagger.Nullable_Integer;
         Ad_Account_Id : Swagger.Nullable_UString;
         Result : .Models.TopPinsAnalyticsResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Pins_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_User_Accounts_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Pins_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_User_Accounts_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         Start_Date := To_Swagger.Date (Swagger.Servers.Get_Query_Parameter (Req, "start_date"));

         End_Date := To_Swagger.Date (Swagger.Servers.Get_Query_Parameter (Req, "end_date"));

         Sort_By := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "sort_by"));

         From_Claimed_Content := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "from_claimed_content"));

         Pin_Format := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "pin_format"));

         App_Types := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "app_types"));

         Content_Type := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "content_type"));

         Source := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "source"));

         Metric_Types := To_Swagger.UString_Vectors.Vector (Swagger.Servers.Get_Query_Parameter (Req, "metric_types"));

         Num_Of_Pins := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "num_of_pins"));

         Created_In_Last_NDays := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "created_in_last_n_days"));

         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "ad_account_id"));

         
         Impl.User_Account_Analytics_Top_Pins
            (Start_Date,
             End_Date,
             Sort_By,
             From_Claimed_Content,
             Pin_Format,
             App_Types,
             Content_Type,
             Source,
             Metric_Types,
             Num_Of_Pins,
             Created_In_Last_NDays,
             Ad_Account_Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Not authorized to access the user account analytics.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end User_Account_Analytics_Top_Pins;

      package API_User_Account_Analytics_Top_Video_Pins is
         new Swagger.Servers.Operation
            (Handler => User_Account_Analytics_Top_Video_Pins,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/user_account/analytics/top_video_pins",
             Mimes   => Media_List_1'Access);

      --  Get user account top video pins analytics
      procedure User_Account_Analytics_Top_Video_Pins
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Start_Date : Swagger.Date;
         End_Date : Swagger.Date;
         Sort_By : Swagger.UString;
         From_Claimed_Content : Swagger.Nullable_UString;
         Pin_Format : Swagger.Nullable_UString;
         App_Types : Swagger.Nullable_UString;
         Content_Type : Swagger.Nullable_UString;
         Source : Swagger.Nullable_UString;
         Metric_Types : Swagger.UString_Vectors.Vector;
         Num_Of_Pins : Swagger.Nullable_Integer;
         Created_In_Last_NDays : Swagger.Nullable_Integer;
         Ad_Account_Id : Swagger.Nullable_UString;
         Result : .Models.TopVideoPinsAnalyticsResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Pins_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_User_Accounts_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Pins_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_User_Accounts_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         Start_Date := To_Swagger.Date (Swagger.Servers.Get_Query_Parameter (Req, "start_date"));

         End_Date := To_Swagger.Date (Swagger.Servers.Get_Query_Parameter (Req, "end_date"));

         Sort_By := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "sort_by"));

         From_Claimed_Content := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "from_claimed_content"));

         Pin_Format := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "pin_format"));

         App_Types := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "app_types"));

         Content_Type := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "content_type"));

         Source := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "source"));

         Metric_Types := To_Swagger.UString_Vectors.Vector (Swagger.Servers.Get_Query_Parameter (Req, "metric_types"));

         Num_Of_Pins := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "num_of_pins"));

         Created_In_Last_NDays := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "created_in_last_n_days"));

         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "ad_account_id"));

         
         Impl.User_Account_Analytics_Top_Video_Pins
            (Start_Date,
             End_Date,
             Sort_By,
             From_Claimed_Content,
             Pin_Format,
             App_Types,
             Content_Type,
             Source,
             Metric_Types,
             Num_Of_Pins,
             Created_In_Last_NDays,
             Ad_Account_Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Not authorized to access the user account analytics.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end User_Account_Analytics_Top_Video_Pins;

      package API_User_Account_Followed_Interests is
         new Swagger.Servers.Operation
            (Handler => User_Account_Followed_Interests,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/users/{username}/interests/follow",
             Mimes   => Media_List_1'Access);

      --  List following interests
      procedure User_Account_Followed_Interests
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Username : Swagger.UString;
         Bookmark : Swagger.Nullable_UString;
         Page_Size : Swagger.Nullable_Integer;
         Result : .Models.UserAccountFollowedInterests200Response_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_User_Accounts_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_User_Accounts_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         Bookmark := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "bookmark"));

         Page_Size := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "page_size"));

         
         Username := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.User_Account_Followed_Interests
            (Username,
             Bookmark,
             Page_Size, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid parameters");
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Authorization failed");
            return;
         end if;
         if Context.Get_Status = 404 then
            Context.Set_Description ("User not found");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end User_Account_Followed_Interests;

      package API_User_Account_Get is
         new Swagger.Servers.Operation
            (Handler => User_Account_Get,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/user_account",
             Mimes   => Media_List_1'Access);

      --  Get user account
      procedure User_Account_Get
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Ad_Account_Id : Swagger.Nullable_UString;
         Result : .Models.Account_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_User_Accounts_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_User_Accounts_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "ad_account_id"));

         
         Impl.User_Account_Get
            (Ad_Account_Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("response");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Not authorized to access the user account.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end User_Account_Get;

      package API_User_Following_Get is
         new Swagger.Servers.Operation
            (Handler => User_Following_Get,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/user_account/following",
             Mimes   => Media_List_1'Access);

      --  List following
      procedure User_Following_Get
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Bookmark : Swagger.Nullable_UString;
         Page_Size : Swagger.Nullable_Integer;
         Feed_Type : UserFollowingFeedType_Type;
         Explicit_Following : Swagger.Nullable_Boolean;
         Ad_Account_Id : Swagger.Nullable_UString;
         Result : .Models.UserFollowingGet200Response_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_User_Accounts_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_User_Accounts_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         Bookmark := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "bookmark"));

         Page_Size := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "page_size"));

         Feed_Type := To_UserFollowingFeedType_Type (Swagger.Servers.Get_Query_Parameter (Req, "feed_type"));

         Explicit_Following := To_Boolean (Swagger.Servers.Get_Query_Parameter (Req, "explicit_following"));

         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "ad_account_id"));

         
         Impl.User_Following_Get
            (Bookmark,
             Page_Size,
             Feed_Type,
             Explicit_Following,
             Ad_Account_Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("response");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end User_Following_Get;

      package API_User_Websites_Get is
         new Swagger.Servers.Operation
            (Handler => User_Websites_Get,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/user_account/websites",
             Mimes   => Media_List_1'Access);

      --  Get user websites
      procedure User_Websites_Get
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Bookmark : Swagger.Nullable_UString;
         Page_Size : Swagger.Nullable_Integer;
         Result : .Models.UserWebsitesGet200Response_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_User_Accounts_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         Bookmark := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "bookmark"));

         Page_Size := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "page_size"));

         
         Impl.User_Websites_Get
            (Bookmark,
             Page_Size, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Not authorized to access the user website list.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end User_Websites_Get;

      package API_Verify_Website_Update is
         new Swagger.Servers.Operation
            (Handler => Verify_Website_Update,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/user_account/websites",
             Mimes   => Media_List_1'Access);

      --  Verify website
      procedure Verify_Website_Update
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         User_Website_Verify_Request_Type : UserWebsiteVerifyRequest_Type;
         Ad_Account_Id : Swagger.Nullable_UString;
         Result : .Models.UserWebsiteSummary_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_User_Accounts_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "ad_account_id"));

         
         Swagger.Servers.Read (Req, Media_List_1, Input);
         if Swagger.Is_Null (Input) then
            Context.Set_Error (415, "Invalid content");
            return;
         end if;

         .Models.Deserialize (Input, "UserWebsiteVerifyRequest_Type", User_Website_Verify_Request_Type);
         Impl.Verify_Website_Update
            (User_Website_Verify_Request_Type,
             Ad_Account_Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Verify_Website_Update;

      package API_Website_Verification_Get is
         new Swagger.Servers.Operation
            (Handler => Website_Verification_Get,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/user_account/websites/verification",
             Mimes   => Media_List_1'Access);

      --  Get user verification code for website claiming
      procedure Website_Verification_Get
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Ad_Account_Id : Swagger.Nullable_UString;
         Result : .Models.UserWebsiteVerificationCode_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_User_Accounts_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_User_Accounts_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "ad_account_id"));

         
         Impl.Website_Verification_Get
            (Ad_Account_Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Not authorized to access the user verification code for website claiming.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Website_Verification_Get;

      procedure Register (Server : in out Swagger.Servers.Application_Type'Class) is
      begin
         Swagger.Servers.Register (Server, API_Ad_Account_Analytics.Definition);
         Swagger.Servers.Register (Server, API_Ad_Account_Targeting_Analytics_Get.Definition);
         Swagger.Servers.Register (Server, API_Ad_Accounts_Create.Definition);
         Swagger.Servers.Register (Server, API_Ad_Accounts_Get.Definition);
         Swagger.Servers.Register (Server, API_Ad_Accounts_List.Definition);
         Swagger.Servers.Register (Server, API_Analytics_Create_Mmm_Report.Definition);
         Swagger.Servers.Register (Server, API_Analytics_Create_Report.Definition);
         Swagger.Servers.Register (Server, API_Analytics_Create_Template_Report.Definition);
         Swagger.Servers.Register (Server, API_Analytics_Get_Mmm_Report.Definition);
         Swagger.Servers.Register (Server, API_Analytics_Get_Report.Definition);
         Swagger.Servers.Register (Server, API_Sandbox_Delete.Definition);
         Swagger.Servers.Register (Server, API_Templates_List.Definition);
         Swagger.Servers.Register (Server, API_Ad_Groups_Analytics.Definition);
         Swagger.Servers.Register (Server, API_Ad_Groups_Audience_Sizing.Definition);
         Swagger.Servers.Register (Server, API_Ad_Groups_Bid_Floor_Get.Definition);
         Swagger.Servers.Register (Server, API_Ad_Groups_Create.Definition);
         Swagger.Servers.Register (Server, API_Ad_Groups_Get.Definition);
         Swagger.Servers.Register (Server, API_Ad_Groups_List.Definition);
         Swagger.Servers.Register (Server, API_Ad_Groups_Targeting_Analytics_Get.Definition);
         Swagger.Servers.Register (Server, API_Ad_Groups_Update.Definition);
         Swagger.Servers.Register (Server, API_Ad_Previews_Create.Definition);
         Swagger.Servers.Register (Server, API_Ad_Targeting_Analytics_Get.Definition);
         Swagger.Servers.Register (Server, API_Ads_Analytics.Definition);
         Swagger.Servers.Register (Server, API_Ads_Create.Definition);
         Swagger.Servers.Register (Server, API_Ads_Get.Definition);
         Swagger.Servers.Register (Server, API_Ads_List.Definition);
         Swagger.Servers.Register (Server, API_Ads_Update.Definition);
         Swagger.Servers.Register (Server, API_Advanced_Auction_Items_Get_Post.Definition);
         Swagger.Servers.Register (Server, API_Advanced_Auction_Items_Submit_Post.Definition);
         Swagger.Servers.Register (Server, API_Audience_Insights_Get.Definition);
         Swagger.Servers.Register (Server, API_Audience_Insights_Scope_And_Type_Get.Definition);
         Swagger.Servers.Register (Server, API_Ad_Accounts_Audiences_Shared_Accounts_List.Definition);
         Swagger.Servers.Register (Server, API_Business_Account_Audiences_Shared_Accounts_List.Definition);
         Swagger.Servers.Register (Server, API_Shared_Audiences_For_Business_List.Definition);
         Swagger.Servers.Register (Server, API_Update_Ad_Account_To_Ad_Account_Shared_Audience.Definition);
         Swagger.Servers.Register (Server, API_Update_Ad_Account_To_Business_Shared_Audience.Definition);
         Swagger.Servers.Register (Server, API_Update_Business_To_Ad_Account_Shared_Audience.Definition);
         Swagger.Servers.Register (Server, API_Update_Business_To_Business_Shared_Audience.Definition);
         Swagger.Servers.Register (Server, API_Audiences_Create.Definition);
         Swagger.Servers.Register (Server, API_Audiences_Create_Custom.Definition);
         Swagger.Servers.Register (Server, API_Audiences_Get.Definition);
         Swagger.Servers.Register (Server, API_Audiences_List.Definition);
         Swagger.Servers.Register (Server, API_Audiences_Update.Definition);
         Swagger.Servers.Register (Server, API_Ads_Credit_Redeem.Definition);
         Swagger.Servers.Register (Server, API_Ads_Credits_Discounts_Get.Definition);
         Swagger.Servers.Register (Server, API_Billing_Profiles_Get.Definition);
         Swagger.Servers.Register (Server, API_Ssio_Accounts_Get.Definition);
         Swagger.Servers.Register (Server, API_Ssio_Insertion_Order_Create.Definition);
         Swagger.Servers.Register (Server, API_Ssio_Insertion_Order_Edit.Definition);
         Swagger.Servers.Register (Server, API_Ssio_Insertion_Orders_Status_Get_By_Ad_Account.Definition);
         Swagger.Servers.Register (Server, API_Ssio_Insertion_Orders_Status_Get_By_Pin_Order_Id.Definition);
         Swagger.Servers.Register (Server, API_Ssio_Order_Lines_Get_By_Ad_Account.Definition);
         Swagger.Servers.Register (Server, API_Board_Sections_Create.Definition);
         Swagger.Servers.Register (Server, API_Board_Sections_Delete.Definition);
         Swagger.Servers.Register (Server, API_Board_Sections_List.Definition);
         Swagger.Servers.Register (Server, API_Board_Sections_List_Pins.Definition);
         Swagger.Servers.Register (Server, API_Board_Sections_Update.Definition);
         Swagger.Servers.Register (Server, API_Boards_Create.Definition);
         Swagger.Servers.Register (Server, API_Boards_Delete.Definition);
         Swagger.Servers.Register (Server, API_Boards_Get.Definition);
         Swagger.Servers.Register (Server, API_Boards_List.Definition);
         Swagger.Servers.Register (Server, API_Boards_List_Pins.Definition);
         Swagger.Servers.Register (Server, API_Boards_Update.Definition);
         Swagger.Servers.Register (Server, API_Bulk_Download_Create.Definition);
         Swagger.Servers.Register (Server, API_Bulk_Request_Get.Definition);
         Swagger.Servers.Register (Server, API_Bulk_Upsert_Create.Definition);
         Swagger.Servers.Register (Server, API_Asset_Group_Create.Definition);
         Swagger.Servers.Register (Server, API_Asset_Group_Delete.Definition);
         Swagger.Servers.Register (Server, API_Asset_Group_Update.Definition);
         Swagger.Servers.Register (Server, API_Business_Asset_Members_Get.Definition);
         Swagger.Servers.Register (Server, API_Business_Asset_Partners_Get.Definition);
         Swagger.Servers.Register (Server, API_Business_Assets_Get.Definition);
         Swagger.Servers.Register (Server, API_Business_Member_Assets_Get.Definition);
         Swagger.Servers.Register (Server, API_Business_Members_Asset_Access_Delete.Definition);
         Swagger.Servers.Register (Server, API_Business_Members_Asset_Access_Update.Definition);
         Swagger.Servers.Register (Server, API_Business_Partner_Asset_Access_Get.Definition);
         Swagger.Servers.Register (Server, API_Delete_Partner_Asset_Access_Handler_Impl.Definition);
         Swagger.Servers.Register (Server, API_Update_Partner_Asset_Access_Handler_Impl.Definition);
         Swagger.Servers.Register (Server, API_Asset_Access_Requests_Create.Definition);
         Swagger.Servers.Register (Server, API_Cancel_Invites_Or_Requests.Definition);
         Swagger.Servers.Register (Server, API_Create_Asset_Invites.Definition);
         Swagger.Servers.Register (Server, API_Create_Membership_Or_Partnership_Invites.Definition);
         Swagger.Servers.Register (Server, API_Get_Invites.Definition);
         Swagger.Servers.Register (Server, API_Respond_Business_Access_Invites.Definition);
         Swagger.Servers.Register (Server, API_Delete_Business_Membership.Definition);
         Swagger.Servers.Register (Server, API_Delete_Business_Partners.Definition);
         Swagger.Servers.Register (Server, API_Get_Business_Employers.Definition);
         Swagger.Servers.Register (Server, API_Get_Business_Members.Definition);
         Swagger.Servers.Register (Server, API_Get_Business_Partners.Definition);
         Swagger.Servers.Register (Server, API_Update_Business_Memberships.Definition);
         Swagger.Servers.Register (Server, API_Campaign_Targeting_Analytics_Get.Definition);
         Swagger.Servers.Register (Server, API_Campaigns_Analytics.Definition);
         Swagger.Servers.Register (Server, API_Campaigns_Create.Definition);
         Swagger.Servers.Register (Server, API_Campaigns_Get.Definition);
         Swagger.Servers.Register (Server, API_Campaigns_List.Definition);
         Swagger.Servers.Register (Server, API_Campaigns_Update.Definition);
         Swagger.Servers.Register (Server, API_Catalogs_Create.Definition);
         Swagger.Servers.Register (Server, API_Catalogs_List.Definition);
         Swagger.Servers.Register (Server, API_Catalogs_Product_Group_Pins_List.Definition);
         Swagger.Servers.Register (Server, API_Catalogs_Product_Groups_Create.Definition);
         Swagger.Servers.Register (Server, API_Catalogs_Product_Groups_Create_Many.Definition);
         Swagger.Servers.Register (Server, API_Catalogs_Product_Groups_Delete.Definition);
         Swagger.Servers.Register (Server, API_Catalogs_Product_Groups_Delete_Many.Definition);
         Swagger.Servers.Register (Server, API_Catalogs_Product_Groups_Get.Definition);
         Swagger.Servers.Register (Server, API_Catalogs_Product_Groups_List.Definition);
         Swagger.Servers.Register (Server, API_Catalogs_Product_Groups_Product_Counts_Get.Definition);
         Swagger.Servers.Register (Server, API_Catalogs_Product_Groups_Update.Definition);
         Swagger.Servers.Register (Server, API_Feed_Processing_Results_List.Definition);
         Swagger.Servers.Register (Server, API_Feeds_Create.Definition);
         Swagger.Servers.Register (Server, API_Feeds_Delete.Definition);
         Swagger.Servers.Register (Server, API_Feeds_Get.Definition);
         Swagger.Servers.Register (Server, API_Feeds_Ingest.Definition);
         Swagger.Servers.Register (Server, API_Feeds_List.Definition);
         Swagger.Servers.Register (Server, API_Feeds_Update.Definition);
         Swagger.Servers.Register (Server, API_Items_Batch_Get.Definition);
         Swagger.Servers.Register (Server, API_Items_Batch_Post.Definition);
         Swagger.Servers.Register (Server, API_Items_Get.Definition);
         Swagger.Servers.Register (Server, API_Items_Issues_List.Definition);
         Swagger.Servers.Register (Server, API_Items_Post.Definition);
         Swagger.Servers.Register (Server, API_Products_By_Product_Group_Filter_List.Definition);
         Swagger.Servers.Register (Server, API_Reports_Create.Definition);
         Swagger.Servers.Register (Server, API_Reports_Get.Definition);
         Swagger.Servers.Register (Server, API_Reports_Stats.Definition);
         Swagger.Servers.Register (Server, API_Events_Create.Definition);
         Swagger.Servers.Register (Server, API_Conversion_Tags_Create.Definition);
         Swagger.Servers.Register (Server, API_Conversion_Tags_Get.Definition);
         Swagger.Servers.Register (Server, API_Conversion_Tags_List.Definition);
         Swagger.Servers.Register (Server, API_Ocpm_Eligible_Conversion_Tags_Get.Definition);
         Swagger.Servers.Register (Server, API_Page_Visit_Conversion_Tags_Get.Definition);
         Swagger.Servers.Register (Server, API_Customer_Lists_Create.Definition);
         Swagger.Servers.Register (Server, API_Customer_Lists_Get.Definition);
         Swagger.Servers.Register (Server, API_Customer_Lists_List.Definition);
         Swagger.Servers.Register (Server, API_Customer_Lists_Update.Definition);
         Swagger.Servers.Register (Server, API_Integrations_Commerce_Del.Definition);
         Swagger.Servers.Register (Server, API_Integrations_Commerce_Get.Definition);
         Swagger.Servers.Register (Server, API_Integrations_Commerce_Patch.Definition);
         Swagger.Servers.Register (Server, API_Integrations_Commerce_Post.Definition);
         Swagger.Servers.Register (Server, API_Integrations_Get_By_Id.Definition);
         Swagger.Servers.Register (Server, API_Integrations_Get_List.Definition);
         Swagger.Servers.Register (Server, API_Integrations_Logs_Post.Definition);
         Swagger.Servers.Register (Server, API_Country_Keywords_Metrics_Get.Definition);
         Swagger.Servers.Register (Server, API_Keywords_Create.Definition);
         Swagger.Servers.Register (Server, API_Keywords_Get.Definition);
         Swagger.Servers.Register (Server, API_Keywords_Update.Definition);
         Swagger.Servers.Register (Server, API_Trending_Keywords_List.Definition);
         Swagger.Servers.Register (Server, API_Ad_Accounts_Subscriptions_Del_By_Id.Definition);
         Swagger.Servers.Register (Server, API_Ad_Accounts_Subscriptions_Get_By_Id.Definition);
         Swagger.Servers.Register (Server, API_Ad_Accounts_Subscriptions_Get_List.Definition);
         Swagger.Servers.Register (Server, API_Ad_Accounts_Subscriptions_Post.Definition);
         Swagger.Servers.Register (Server, API_Lead_Form_Get.Definition);
         Swagger.Servers.Register (Server, API_Lead_Form_Test_Create.Definition);
         Swagger.Servers.Register (Server, API_Lead_Forms_Create.Definition);
         Swagger.Servers.Register (Server, API_Lead_Forms_List.Definition);
         Swagger.Servers.Register (Server, API_Lead_Forms_Update.Definition);
         Swagger.Servers.Register (Server, API_Leads_Export_Create.Definition);
         Swagger.Servers.Register (Server, API_Leads_Export_Get.Definition);
         Swagger.Servers.Register (Server, API_Media_Create.Definition);
         Swagger.Servers.Register (Server, API_Media_Get.Definition);
         Swagger.Servers.Register (Server, API_Media_List.Definition);
         Swagger.Servers.Register (Server, API_Oauth_Token.Definition);
         Swagger.Servers.Register (Server, API_Order_Lines_Get.Definition);
         Swagger.Servers.Register (Server, API_Order_Lines_List.Definition);
         Swagger.Servers.Register (Server, API_Multi_Pins_Analytics.Definition);
         Swagger.Servers.Register (Server, API_Pins_Analytics.Definition);
         Swagger.Servers.Register (Server, API_Pins_Create.Definition);
         Swagger.Servers.Register (Server, API_Pins_Delete.Definition);
         Swagger.Servers.Register (Server, API_Pins_Get.Definition);
         Swagger.Servers.Register (Server, API_Pins_List.Definition);
         Swagger.Servers.Register (Server, API_Pins_Save.Definition);
         Swagger.Servers.Register (Server, API_Pins_Update.Definition);
         Swagger.Servers.Register (Server, API_Product_Group_Promotions_Create.Definition);
         Swagger.Servers.Register (Server, API_Product_Group_Promotions_Get.Definition);
         Swagger.Servers.Register (Server, API_Product_Group_Promotions_List.Definition);
         Swagger.Servers.Register (Server, API_Product_Group_Promotions_Update.Definition);
         Swagger.Servers.Register (Server, API_Product_Groups_Analytics.Definition);
         Swagger.Servers.Register (Server, API_Ad_Account_Countries_Get.Definition);
         Swagger.Servers.Register (Server, API_Delivery_Metrics_Get.Definition);
         Swagger.Servers.Register (Server, API_Interest_Targeting_Options_Get.Definition);
         Swagger.Servers.Register (Server, API_Lead_Form_Questions_Get.Definition);
         Swagger.Servers.Register (Server, API_Metrics_Ready_State_Get.Definition);
         Swagger.Servers.Register (Server, API_Targeting_Options_Get.Definition);
         Swagger.Servers.Register (Server, API_Search_Partner_Pins.Definition);
         Swagger.Servers.Register (Server, API_Search_User_Boards_Get.Definition);
         Swagger.Servers.Register (Server, API_Search_User_Pins_List.Definition);
         Swagger.Servers.Register (Server, API_Targeting_Template_Create.Definition);
         Swagger.Servers.Register (Server, API_Targeting_Template_List.Definition);
         Swagger.Servers.Register (Server, API_Targeting_Template_Update.Definition);
         Swagger.Servers.Register (Server, API_Terms_Related_List.Definition);
         Swagger.Servers.Register (Server, API_Terms_Suggested_List.Definition);
         Swagger.Servers.Register (Server, API_Terms_Of_Service_Get.Definition);
         Swagger.Servers.Register (Server, API_Boards_User_Follows_List.Definition);
         Swagger.Servers.Register (Server, API_Follow_User_Update.Definition);
         Swagger.Servers.Register (Server, API_Followers_List.Definition);
         Swagger.Servers.Register (Server, API_Linked_Business_Accounts_Get.Definition);
         Swagger.Servers.Register (Server, API_Unverify_Website_Delete.Definition);
         Swagger.Servers.Register (Server, API_User_Account_Analytics.Definition);
         Swagger.Servers.Register (Server, API_User_Account_Analytics_Top_Pins.Definition);
         Swagger.Servers.Register (Server, API_User_Account_Analytics_Top_Video_Pins.Definition);
         Swagger.Servers.Register (Server, API_User_Account_Followed_Interests.Definition);
         Swagger.Servers.Register (Server, API_User_Account_Get.Definition);
         Swagger.Servers.Register (Server, API_User_Following_Get.Definition);
         Swagger.Servers.Register (Server, API_User_Websites_Get.Definition);
         Swagger.Servers.Register (Server, API_Verify_Website_Update.Definition);
         Swagger.Servers.Register (Server, API_Website_Verification_Get.Definition);
      end Register;

   end Skeleton;

   package body Shared_Instance is


      --  Get ad account analytics
      procedure Ad_Account_Analytics
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Ad_Account_Id : Swagger.UString;
         Start_Date : Swagger.Date;
         End_Date : Swagger.Date;
         Columns : Swagger.UString_Vectors.Vector;
         Granularity : Granularity_Type;
         Click_Window_Days : Swagger.Nullable_Integer;
         Engagement_Window_Days : Swagger.Nullable_Integer;
         View_Window_Days : Swagger.Nullable_Integer;
         Conversion_Report_Time : Swagger.Nullable_UString;
         Result : .Models.AdAccountAnalyticsResponseInner_Type_Vectors.Vector;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Start_Date := To_Swagger.Date (Swagger.Servers.Get_Query_Parameter (Req, "start_date"));
         End_Date := To_Swagger.Date (Swagger.Servers.Get_Query_Parameter (Req, "end_date"));
         Columns := To_Swagger.UString_Vectors.Vector (Swagger.Servers.Get_Query_Parameter (Req, "columns"));
         Granularity := To_Granularity_Type (Swagger.Servers.Get_Query_Parameter (Req, "granularity"));
         Click_Window_Days := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "click_window_days"));
         Engagement_Window_Days := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "engagement_window_days"));
         View_Window_Days := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "view_window_days"));
         Conversion_Report_Time := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "conversion_report_time"));

         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Ad_Account_Analytics
            (Ad_Account_Id,
             Start_Date,
             End_Date,
             Columns,
             Granularity,
             Click_Window_Days,
             Engagement_Window_Days,
             View_Window_Days,
             Conversion_Report_Time, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid ad account analytics parameters.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Ad_Account_Analytics;

      package API_Ad_Account_Analytics is
         new Swagger.Servers.Operation
            (Handler => Ad_Account_Analytics,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/analytics",
             Mimes   => Media_List_1'Access);


      --  Get targeting analytics for an ad account
      procedure Ad_Account_Targeting_Analytics_Get
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Ad_Account_Id : Swagger.UString;
         Start_Date : Swagger.Date;
         End_Date : Swagger.Date;
         Targeting_Types : .Models.AdsAnalyticsTargetingType_Type_Vectors.Vector;
         Columns : Swagger.UString_Vectors.Vector;
         Granularity : Granularity_Type;
         Click_Window_Days : Swagger.Nullable_Integer;
         Engagement_Window_Days : Swagger.Nullable_Integer;
         View_Window_Days : Swagger.Nullable_Integer;
         Conversion_Report_Time : Swagger.Nullable_UString;
         Attribution_Types : ConversionReportAttributionType_Type;
         Result : .Models.MetricsResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Start_Date := To_Swagger.Date (Swagger.Servers.Get_Query_Parameter (Req, "start_date"));
         End_Date := To_Swagger.Date (Swagger.Servers.Get_Query_Parameter (Req, "end_date"));
         Targeting_Types := To_.Models.AdsAnalyticsTargetingType_Type_Vectors.Vector (Swagger.Servers.Get_Query_Parameter (Req, "targeting_types"));
         Columns := To_Swagger.UString_Vectors.Vector (Swagger.Servers.Get_Query_Parameter (Req, "columns"));
         Granularity := To_Granularity_Type (Swagger.Servers.Get_Query_Parameter (Req, "granularity"));
         Click_Window_Days := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "click_window_days"));
         Engagement_Window_Days := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "engagement_window_days"));
         View_Window_Days := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "view_window_days"));
         Conversion_Report_Time := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "conversion_report_time"));
         Attribution_Types := To_ConversionReportAttributionType_Type (Swagger.Servers.Get_Query_Parameter (Req, "attribution_types"));

         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Ad_Account_Targeting_Analytics_Get
            (Ad_Account_Id,
             Start_Date,
             End_Date,
             Targeting_Types,
             Columns,
             Granularity,
             Click_Window_Days,
             Engagement_Window_Days,
             View_Window_Days,
             Conversion_Report_Time,
             Attribution_Types, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Ad_Account_Targeting_Analytics_Get;

      package API_Ad_Account_Targeting_Analytics_Get is
         new Swagger.Servers.Operation
            (Handler => Ad_Account_Targeting_Analytics_Get,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/targeting_analytics",
             Mimes   => Media_List_1'Access);


      --  Create ad account
      procedure Ad_Accounts_Create
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Ad_Account_Create_Request_Type : AdAccountCreateRequest_Type;
         Result : .Models.AdAccount_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;

         
         Swagger.Servers.Read (Req, Media_List_1, Input);
         
         .Models.Deserialize (Input, "AdAccountCreateRequest_Type", Ad_Account_Create_Request_Type);
         Server.Ad_Accounts_Create
            (Ad_Account_Create_Request_Type, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Ad_Accounts_Create;

      package API_Ad_Accounts_Create is
         new Swagger.Servers.Operation
            (Handler => Ad_Accounts_Create,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/ad_accounts",
             Mimes   => Media_List_1'Access);


      --  Get ad account
      procedure Ad_Accounts_Get
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Ad_Account_Id : Swagger.UString;
         Result : .Models.AdAccount_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;

         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Ad_Accounts_Get
            (Ad_Account_Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Ad_Accounts_Get;

      package API_Ad_Accounts_Get is
         new Swagger.Servers.Operation
            (Handler => Ad_Accounts_Get,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}",
             Mimes   => Media_List_1'Access);


      --  List ad accounts
      procedure Ad_Accounts_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Bookmark : Swagger.Nullable_UString;
         Page_Size : Swagger.Nullable_Integer;
         Include_Shared_Accounts : Swagger.Nullable_Boolean;
         Result : .Models.AdAccountsList200Response_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Bookmark := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "bookmark"));
         Page_Size := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "page_size"));
         Include_Shared_Accounts := To_Boolean (Swagger.Servers.Get_Query_Parameter (Req, "include_shared_accounts"));

         
         Server.Ad_Accounts_List
            (Bookmark,
             Page_Size,
             Include_Shared_Accounts, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("response");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Ad_Accounts_List;

      package API_Ad_Accounts_List is
         new Swagger.Servers.Operation
            (Handler => Ad_Accounts_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/ad_accounts",
             Mimes   => Media_List_1'Access);


      --  Create a request for a Marketing Mix Modeling (MMM) report
      procedure Analytics_Create_Mmm_Report
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Ad_Account_Id : Swagger.UString;
         Create_MMMReport_Request_Type : CreateMMMReportRequest_Type;
         Result : .Models.CreateMMMReportResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;

         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Swagger.Servers.Read (Req, Media_List_1, Input);
         
         .Models.Deserialize (Input, "CreateMMMReportRequest_Type", Create_MMMReport_Request_Type);
         Server.Analytics_Create_Mmm_Report
            (Ad_Account_Id,
             Create_MMMReport_Request_Type, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid ad account ads analytics mmm parameters");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Analytics_Create_Mmm_Report;

      package API_Analytics_Create_Mmm_Report is
         new Swagger.Servers.Operation
            (Handler => Analytics_Create_Mmm_Report,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/mmm_reports",
             Mimes   => Media_List_1'Access);


      --  Create async request for an account analytics report
      procedure Analytics_Create_Report
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Ad_Account_Id : Swagger.UString;
         Ads_Analytics_Create_Async_Request_Type : AdsAnalyticsCreateAsyncRequest_Type;
         Result : .Models.AdsAnalyticsCreateAsyncResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;

         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Swagger.Servers.Read (Req, Media_List_1, Input);
         
         .Models.Deserialize (Input, "AdsAnalyticsCreateAsyncRequest_Type", Ads_Analytics_Create_Async_Request_Type);
         Server.Analytics_Create_Report
            (Ad_Account_Id,
             Ads_Analytics_Create_Async_Request_Type, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid ad account ads analytics parameters.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Analytics_Create_Report;

      package API_Analytics_Create_Report is
         new Swagger.Servers.Operation
            (Handler => Analytics_Create_Report,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/reports",
             Mimes   => Media_List_1'Access);


      --  Create async request for an analytics report using a template
      procedure Analytics_Create_Template_Report
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Ad_Account_Id : Swagger.UString;
         Template_Id : Swagger.UString;
         Start_Date : Swagger.Nullable_Date;
         End_Date : Swagger.Nullable_Date;
         Granularity : Granularity_Type;
         Result : .Models.AdsAnalyticsCreateAsyncResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Start_Date := To_Swagger.Date (Swagger.Servers.Get_Query_Parameter (Req, "start_date"));
         End_Date := To_Swagger.Date (Swagger.Servers.Get_Query_Parameter (Req, "end_date"));
         Granularity := To_Granularity_Type (Swagger.Servers.Get_Query_Parameter (Req, "granularity"));

         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Template_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 2));

         Server.Analytics_Create_Template_Report
            (Ad_Account_Id,
             Template_Id,
             Start_Date,
             End_Date,
             Granularity, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid ad account ads analytics template parameters.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Analytics_Create_Template_Report;

      package API_Analytics_Create_Template_Report is
         new Swagger.Servers.Operation
            (Handler => Analytics_Create_Template_Report,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/templates/{template_id}/reports",
             Mimes   => Media_List_1'Access);


      --  Get advertiser Marketing Mix Modeling (MMM) report.
      procedure Analytics_Get_Mmm_Report
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Ad_Account_Id : Swagger.UString;
         Token : Swagger.UString;
         Result : .Models.GetMMMReportResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Token := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "token"));

         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Analytics_Get_Mmm_Report
            (Ad_Account_Id,
             Token, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid ad account ads analytics parameters.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Analytics_Get_Mmm_Report;

      package API_Analytics_Get_Mmm_Report is
         new Swagger.Servers.Operation
            (Handler => Analytics_Get_Mmm_Report,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/mmm_reports",
             Mimes   => Media_List_1'Access);


      --  Get the account analytics report created by the async call
      procedure Analytics_Get_Report
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Ad_Account_Id : Swagger.UString;
         Token : Swagger.UString;
         Result : .Models.AdsAnalyticsGetAsyncResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Token := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "token"));

         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Analytics_Get_Report
            (Ad_Account_Id,
             Token, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid ad account ads analytics parameters.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Analytics_Get_Report;

      package API_Analytics_Get_Report is
         new Swagger.Servers.Operation
            (Handler => Analytics_Get_Report,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/reports",
             Mimes   => Media_List_1'Access);


      --  Delete ads data for ad account in API Sandbox
      procedure Sandbox_Delete
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Ad_Account_Id : Swagger.UString;
         Result : Swagger.UString;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;

         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Sandbox_Delete
            (Ad_Account_Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("OK");

            Stream.Start_Document;
            if not Value..Is_Null then
               Stream.Write_Entity ("", Result);
            end if;
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid ad account id.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Sandbox_Delete;

      package API_Sandbox_Delete is
         new Swagger.Servers.Operation
            (Handler => Sandbox_Delete,
             Method  => Swagger.Servers.DELETE,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/sandbox",
             Mimes   => Media_List_1'Access);


      --  List templates
      procedure Templates_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Ad_Account_Id : Swagger.UString;
         Page_Size : Swagger.Nullable_Integer;
         Order : Swagger.Nullable_UString;
         Bookmark : Swagger.Nullable_UString;
         Result : .Models.TemplatesList200Response_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Page_Size := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "page_size"));
         Order := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "order"));
         Bookmark := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "bookmark"));

         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Templates_List
            (Ad_Account_Id,
             Page_Size,
             Order,
             Bookmark, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid ad account template parameters.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Templates_List;

      package API_Templates_List is
         new Swagger.Servers.Operation
            (Handler => Templates_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/templates",
             Mimes   => Media_List_1'Access);


      --  Get ad group analytics
      procedure Ad_Groups_Analytics
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Ad_Account_Id : Swagger.UString;
         Start_Date : Swagger.Date;
         End_Date : Swagger.Date;
         Ad_Group_Ids : Swagger.UString_Vectors.Vector;
         Columns : Swagger.UString_Vectors.Vector;
         Granularity : Granularity_Type;
         Click_Window_Days : Swagger.Nullable_Integer;
         Engagement_Window_Days : Swagger.Nullable_Integer;
         View_Window_Days : Swagger.Nullable_Integer;
         Conversion_Report_Time : Swagger.Nullable_UString;
         Result : .Models.AdGroupsAnalyticsResponseInner_Type_Vectors.Vector;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Start_Date := To_Swagger.Date (Swagger.Servers.Get_Query_Parameter (Req, "start_date"));
         End_Date := To_Swagger.Date (Swagger.Servers.Get_Query_Parameter (Req, "end_date"));
         Ad_Group_Ids := To_Swagger.UString_Vectors.Vector (Swagger.Servers.Get_Query_Parameter (Req, "ad_group_ids"));
         Columns := To_Swagger.UString_Vectors.Vector (Swagger.Servers.Get_Query_Parameter (Req, "columns"));
         Granularity := To_Granularity_Type (Swagger.Servers.Get_Query_Parameter (Req, "granularity"));
         Click_Window_Days := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "click_window_days"));
         Engagement_Window_Days := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "engagement_window_days"));
         View_Window_Days := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "view_window_days"));
         Conversion_Report_Time := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "conversion_report_time"));

         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Ad_Groups_Analytics
            (Ad_Account_Id,
             Start_Date,
             End_Date,
             Ad_Group_Ids,
             Columns,
             Granularity,
             Click_Window_Days,
             Engagement_Window_Days,
             View_Window_Days,
             Conversion_Report_Time, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid ad account group analytics parameters.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Ad_Groups_Analytics;

      package API_Ad_Groups_Analytics is
         new Swagger.Servers.Operation
            (Handler => Ad_Groups_Analytics,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/ad_groups/analytics",
             Mimes   => Media_List_1'Access);


      --  Get audience sizing
      procedure Ad_Groups_Audience_Sizing
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Ad_Account_Id : Swagger.UString;
         Ad_Group_Audience_Sizing_Request_Type : AdGroupAudienceSizingRequest_Type;
         Result : .Models.AdGroupAudienceSizingResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;

         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Swagger.Servers.Read (Req, Media_List_1, Input);
         
         .Models.Deserialize (Input, "AdGroupAudienceSizingRequest_Type", Ad_Group_Audience_Sizing_Request_Type);
         Server.Ad_Groups_Audience_Sizing
            (Ad_Account_Id,
             Ad_Group_Audience_Sizing_Request_Type, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid ad group audience sizing parameters.");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("No access to requested audience list or product group.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Ad_Groups_Audience_Sizing;

      package API_Ad_Groups_Audience_Sizing is
         new Swagger.Servers.Operation
            (Handler => Ad_Groups_Audience_Sizing,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/ad_groups/audience_sizing",
             Mimes   => Media_List_1'Access);


      --  Get bid floors
      procedure Ad_Groups_Bid_Floor_Get
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Ad_Account_Id : Swagger.UString;
         Bid_Floor_Request_Type : BidFloorRequest_Type;
         Result : .Models.BidFloor_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;

         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Swagger.Servers.Read (Req, Media_List_1, Input);
         
         .Models.Deserialize (Input, "BidFloorRequest_Type", Bid_Floor_Request_Type);
         Server.Ad_Groups_Bid_Floor_Get
            (Ad_Account_Id,
             Bid_Floor_Request_Type, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Ad_Groups_Bid_Floor_Get;

      package API_Ad_Groups_Bid_Floor_Get is
         new Swagger.Servers.Operation
            (Handler => Ad_Groups_Bid_Floor_Get,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/bid_floor",
             Mimes   => Media_List_1'Access);


      --  Create ad groups
      procedure Ad_Groups_Create
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Ad_Account_Id : Swagger.UString;
         Ad_Group_Create_Request : .Models.AdGroupCreateRequest_Type_Vectors.Vector;
         Result : .Models.AdGroupArrayResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;

         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Swagger.Servers.Read (Req, Media_List_1, Input);
         
         .Models.Deserialize (Input, "AdGroupCreateRequest", Ad_Group_Create_Request);
         Server.Ad_Groups_Create
            (Ad_Account_Id,
             Ad_Group_Create_Request, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Ad_Groups_Create;

      package API_Ad_Groups_Create is
         new Swagger.Servers.Operation
            (Handler => Ad_Groups_Create,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/ad_groups",
             Mimes   => Media_List_1'Access);


      --  Get ad group
      procedure Ad_Groups_Get
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Ad_Account_Id : Swagger.UString;
         Ad_Group_Id : Swagger.UString;
         Result : .Models.AdGroupResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;

         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Ad_Group_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 2));

         Server.Ad_Groups_Get
            (Ad_Account_Id,
             Ad_Group_Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Ad_Groups_Get;

      package API_Ad_Groups_Get is
         new Swagger.Servers.Operation
            (Handler => Ad_Groups_Get,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/ad_groups/{ad_group_id}",
             Mimes   => Media_List_1'Access);


      --  List ad groups
      procedure Ad_Groups_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Ad_Account_Id : Swagger.UString;
         Campaign_Ids : Swagger.UString_Vectors.Vector;
         Ad_Group_Ids : Swagger.UString_Vectors.Vector;
         Entity_Statuses : Swagger.UString_Vectors.Vector;
         Page_Size : Swagger.Nullable_Integer;
         Order : Swagger.Nullable_UString;
         Bookmark : Swagger.Nullable_UString;
         Translate_Interests_To_Names : Swagger.Nullable_Boolean;
         Result : .Models.AdGroupsList200Response_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Campaign_Ids := To_Swagger.UString_Vectors.Vector (Swagger.Servers.Get_Query_Parameter (Req, "campaign_ids"));
         Ad_Group_Ids := To_Swagger.UString_Vectors.Vector (Swagger.Servers.Get_Query_Parameter (Req, "ad_group_ids"));
         Entity_Statuses := To_Swagger.UString_Vectors.Vector (Swagger.Servers.Get_Query_Parameter (Req, "entity_statuses"));
         Page_Size := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "page_size"));
         Order := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "order"));
         Bookmark := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "bookmark"));
         Translate_Interests_To_Names := To_Boolean (Swagger.Servers.Get_Query_Parameter (Req, "translate_interests_to_names"));

         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Ad_Groups_List
            (Ad_Account_Id,
             Campaign_Ids,
             Ad_Group_Ids,
             Entity_Statuses,
             Page_Size,
             Order,
             Bookmark,
             Translate_Interests_To_Names, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid ad account group parameters.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Ad_Groups_List;

      package API_Ad_Groups_List is
         new Swagger.Servers.Operation
            (Handler => Ad_Groups_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/ad_groups",
             Mimes   => Media_List_1'Access);


      --  Get targeting analytics for ad groups
      procedure Ad_Groups_Targeting_Analytics_Get
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Ad_Account_Id : Swagger.UString;
         Ad_Group_Ids : Swagger.UString_Vectors.Vector;
         Start_Date : Swagger.Date;
         End_Date : Swagger.Date;
         Targeting_Types : .Models.AdsAnalyticsTargetingType_Type_Vectors.Vector;
         Columns : Swagger.UString_Vectors.Vector;
         Granularity : Granularity_Type;
         Click_Window_Days : Swagger.Nullable_Integer;
         Engagement_Window_Days : Swagger.Nullable_Integer;
         View_Window_Days : Swagger.Nullable_Integer;
         Conversion_Report_Time : Swagger.Nullable_UString;
         Attribution_Types : ConversionReportAttributionType_Type;
         Result : .Models.MetricsResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Ad_Group_Ids := To_Swagger.UString_Vectors.Vector (Swagger.Servers.Get_Query_Parameter (Req, "ad_group_ids"));
         Start_Date := To_Swagger.Date (Swagger.Servers.Get_Query_Parameter (Req, "start_date"));
         End_Date := To_Swagger.Date (Swagger.Servers.Get_Query_Parameter (Req, "end_date"));
         Targeting_Types := To_.Models.AdsAnalyticsTargetingType_Type_Vectors.Vector (Swagger.Servers.Get_Query_Parameter (Req, "targeting_types"));
         Columns := To_Swagger.UString_Vectors.Vector (Swagger.Servers.Get_Query_Parameter (Req, "columns"));
         Granularity := To_Granularity_Type (Swagger.Servers.Get_Query_Parameter (Req, "granularity"));
         Click_Window_Days := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "click_window_days"));
         Engagement_Window_Days := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "engagement_window_days"));
         View_Window_Days := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "view_window_days"));
         Conversion_Report_Time := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "conversion_report_time"));
         Attribution_Types := To_ConversionReportAttributionType_Type (Swagger.Servers.Get_Query_Parameter (Req, "attribution_types"));

         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Ad_Groups_Targeting_Analytics_Get
            (Ad_Account_Id,
             Ad_Group_Ids,
             Start_Date,
             End_Date,
             Targeting_Types,
             Columns,
             Granularity,
             Click_Window_Days,
             Engagement_Window_Days,
             View_Window_Days,
             Conversion_Report_Time,
             Attribution_Types, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Ad_Groups_Targeting_Analytics_Get;

      package API_Ad_Groups_Targeting_Analytics_Get is
         new Swagger.Servers.Operation
            (Handler => Ad_Groups_Targeting_Analytics_Get,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/ad_groups/targeting_analytics",
             Mimes   => Media_List_1'Access);


      --  Update ad groups
      procedure Ad_Groups_Update
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Ad_Account_Id : Swagger.UString;
         Ad_Group_Update_Request : .Models.AdGroupUpdateRequest_Type_Vectors.Vector;
         Result : .Models.AdGroupArrayResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;

         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Swagger.Servers.Read (Req, Media_List_1, Input);
         
         .Models.Deserialize (Input, "AdGroupUpdateRequest", Ad_Group_Update_Request);
         Server.Ad_Groups_Update
            (Ad_Account_Id,
             Ad_Group_Update_Request, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Ad_Groups_Update;

      package API_Ad_Groups_Update is
         new Swagger.Servers.Operation
            (Handler => Ad_Groups_Update,
             Method  => Swagger.Servers.PATCH,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/ad_groups",
             Mimes   => Media_List_1'Access);


      --  Create ad preview with pin or image
      procedure Ad_Previews_Create
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Ad_Account_Id : Swagger.UString;
         Ad_Preview_Request_Type : AdPreviewRequest_Type;
         Result : .Models.AdPreviewURLResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;

         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Swagger.Servers.Read (Req, Media_List_1, Input);
         
         .Models.Deserialize (Input, "AdPreviewRequest_Type", Ad_Preview_Request_Type);
         Server.Ad_Previews_Create
            (Ad_Account_Id,
             Ad_Preview_Request_Type, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Successful ad preview creation.");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid Pin parameters response");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Ad_Previews_Create;

      package API_Ad_Previews_Create is
         new Swagger.Servers.Operation
            (Handler => Ad_Previews_Create,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/ad_previews",
             Mimes   => Media_List_1'Access);


      --  Get targeting analytics for ads
      procedure Ad_Targeting_Analytics_Get
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Ad_Account_Id : Swagger.UString;
         Ad_Ids : Swagger.UString_Vectors.Vector;
         Start_Date : Swagger.Date;
         End_Date : Swagger.Date;
         Targeting_Types : .Models.AdsAnalyticsAdTargetingType_Type_Vectors.Vector;
         Columns : Swagger.UString_Vectors.Vector;
         Granularity : Granularity_Type;
         Click_Window_Days : Swagger.Nullable_Integer;
         Engagement_Window_Days : Swagger.Nullable_Integer;
         View_Window_Days : Swagger.Nullable_Integer;
         Conversion_Report_Time : Swagger.Nullable_UString;
         Attribution_Types : ConversionReportAttributionType_Type;
         Result : .Models.MetricsResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Ad_Ids := To_Swagger.UString_Vectors.Vector (Swagger.Servers.Get_Query_Parameter (Req, "ad_ids"));
         Start_Date := To_Swagger.Date (Swagger.Servers.Get_Query_Parameter (Req, "start_date"));
         End_Date := To_Swagger.Date (Swagger.Servers.Get_Query_Parameter (Req, "end_date"));
         Targeting_Types := To_.Models.AdsAnalyticsAdTargetingType_Type_Vectors.Vector (Swagger.Servers.Get_Query_Parameter (Req, "targeting_types"));
         Columns := To_Swagger.UString_Vectors.Vector (Swagger.Servers.Get_Query_Parameter (Req, "columns"));
         Granularity := To_Granularity_Type (Swagger.Servers.Get_Query_Parameter (Req, "granularity"));
         Click_Window_Days := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "click_window_days"));
         Engagement_Window_Days := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "engagement_window_days"));
         View_Window_Days := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "view_window_days"));
         Conversion_Report_Time := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "conversion_report_time"));
         Attribution_Types := To_ConversionReportAttributionType_Type (Swagger.Servers.Get_Query_Parameter (Req, "attribution_types"));

         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Ad_Targeting_Analytics_Get
            (Ad_Account_Id,
             Ad_Ids,
             Start_Date,
             End_Date,
             Targeting_Types,
             Columns,
             Granularity,
             Click_Window_Days,
             Engagement_Window_Days,
             View_Window_Days,
             Conversion_Report_Time,
             Attribution_Types, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Ad_Targeting_Analytics_Get;

      package API_Ad_Targeting_Analytics_Get is
         new Swagger.Servers.Operation
            (Handler => Ad_Targeting_Analytics_Get,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/ads/targeting_analytics",
             Mimes   => Media_List_1'Access);


      --  Get ad analytics
      procedure Ads_Analytics
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Ad_Account_Id : Swagger.UString;
         Start_Date : Swagger.Date;
         End_Date : Swagger.Date;
         Columns : Swagger.UString_Vectors.Vector;
         Granularity : Granularity_Type;
         Ad_Ids : Swagger.UString_Vectors.Vector;
         Click_Window_Days : Swagger.Nullable_Integer;
         Engagement_Window_Days : Swagger.Nullable_Integer;
         View_Window_Days : Swagger.Nullable_Integer;
         Conversion_Report_Time : Swagger.Nullable_UString;
         Pin_Ids : Swagger.UString_Vectors.Vector;
         Campaign_Ids : Swagger.UString_Vectors.Vector;
         Result : .Models.AdsAnalyticsResponseInner_Type_Vectors.Vector;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Start_Date := To_Swagger.Date (Swagger.Servers.Get_Query_Parameter (Req, "start_date"));
         End_Date := To_Swagger.Date (Swagger.Servers.Get_Query_Parameter (Req, "end_date"));
         Ad_Ids := To_Swagger.UString_Vectors.Vector (Swagger.Servers.Get_Query_Parameter (Req, "ad_ids"));
         Columns := To_Swagger.UString_Vectors.Vector (Swagger.Servers.Get_Query_Parameter (Req, "columns"));
         Granularity := To_Granularity_Type (Swagger.Servers.Get_Query_Parameter (Req, "granularity"));
         Click_Window_Days := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "click_window_days"));
         Engagement_Window_Days := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "engagement_window_days"));
         View_Window_Days := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "view_window_days"));
         Conversion_Report_Time := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "conversion_report_time"));
         Pin_Ids := To_Swagger.UString_Vectors.Vector (Swagger.Servers.Get_Query_Parameter (Req, "pin_ids"));
         Campaign_Ids := To_Swagger.UString_Vectors.Vector (Swagger.Servers.Get_Query_Parameter (Req, "campaign_ids"));

         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Ads_Analytics
            (Ad_Account_Id,
             Start_Date,
             End_Date,
             Columns,
             Granularity,
             Ad_Ids,
             Click_Window_Days,
             Engagement_Window_Days,
             View_Window_Days,
             Conversion_Report_Time,
             Pin_Ids,
             Campaign_Ids, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid ad account ads analytics parameters.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Ads_Analytics;

      package API_Ads_Analytics is
         new Swagger.Servers.Operation
            (Handler => Ads_Analytics,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/ads/analytics",
             Mimes   => Media_List_1'Access);


      --  Create ads
      procedure Ads_Create
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Ad_Account_Id : Swagger.UString;
         Ad_Create_Request : .Models.AdCreateRequest_Type_Vectors.Vector;
         Result : .Models.AdArrayResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;

         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Swagger.Servers.Read (Req, Media_List_1, Input);
         
         .Models.Deserialize (Input, "AdCreateRequest", Ad_Create_Request);
         Server.Ads_Create
            (Ad_Account_Id,
             Ad_Create_Request, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Ads_Create;

      package API_Ads_Create is
         new Swagger.Servers.Operation
            (Handler => Ads_Create,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/ads",
             Mimes   => Media_List_1'Access);


      --  Get ad
      procedure Ads_Get
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Ad_Account_Id : Swagger.UString;
         Ad_Id : Swagger.UString;
         Result : .Models.AdResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;

         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Ad_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 2));

         Server.Ads_Get
            (Ad_Account_Id,
             Ad_Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Ads_Get;

      package API_Ads_Get is
         new Swagger.Servers.Operation
            (Handler => Ads_Get,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/ads/{ad_id}",
             Mimes   => Media_List_1'Access);


      --  List ads
      procedure Ads_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Ad_Account_Id : Swagger.UString;
         Campaign_Ids : Swagger.UString_Vectors.Vector;
         Ad_Group_Ids : Swagger.UString_Vectors.Vector;
         Ad_Ids : Swagger.UString_Vectors.Vector;
         Entity_Statuses : Swagger.UString_Vectors.Vector;
         Page_Size : Swagger.Nullable_Integer;
         Order : Swagger.Nullable_UString;
         Bookmark : Swagger.Nullable_UString;
         Result : .Models.AdsList200Response_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Campaign_Ids := To_Swagger.UString_Vectors.Vector (Swagger.Servers.Get_Query_Parameter (Req, "campaign_ids"));
         Ad_Group_Ids := To_Swagger.UString_Vectors.Vector (Swagger.Servers.Get_Query_Parameter (Req, "ad_group_ids"));
         Ad_Ids := To_Swagger.UString_Vectors.Vector (Swagger.Servers.Get_Query_Parameter (Req, "ad_ids"));
         Entity_Statuses := To_Swagger.UString_Vectors.Vector (Swagger.Servers.Get_Query_Parameter (Req, "entity_statuses"));
         Page_Size := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "page_size"));
         Order := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "order"));
         Bookmark := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "bookmark"));

         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Ads_List
            (Ad_Account_Id,
             Campaign_Ids,
             Ad_Group_Ids,
             Ad_Ids,
             Entity_Statuses,
             Page_Size,
             Order,
             Bookmark, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid ad account ads parameters.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Ads_List;

      package API_Ads_List is
         new Swagger.Servers.Operation
            (Handler => Ads_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/ads",
             Mimes   => Media_List_1'Access);


      --  Update ads
      procedure Ads_Update
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Ad_Account_Id : Swagger.UString;
         Ad_Update_Request : .Models.AdUpdateRequest_Type_Vectors.Vector;
         Result : .Models.AdArrayResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;

         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Swagger.Servers.Read (Req, Media_List_1, Input);
         
         .Models.Deserialize (Input, "AdUpdateRequest", Ad_Update_Request);
         Server.Ads_Update
            (Ad_Account_Id,
             Ad_Update_Request, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Ads_Update;

      package API_Ads_Update is
         new Swagger.Servers.Operation
            (Handler => Ads_Update,
             Method  => Swagger.Servers.PATCH,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/ads",
             Mimes   => Media_List_1'Access);


      --  Get item bid options (POST)
      procedure Advanced_Auction_Items_Get_Post
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Advanced_Auction_Items_Get_Request_Type : AdvancedAuctionItemsGetRequest_Type;
         Ad_Account_Id : Swagger.Nullable_UString;
         Result : .Models.AdvancedAuctionItems_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Catalogs_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "ad_account_id"));

         
         Swagger.Servers.Read (Req, Media_List_1, Input);
         
         .Models.Deserialize (Input, "AdvancedAuctionItemsGetRequest_Type", Advanced_Auction_Items_Get_Request_Type);
         Server.Advanced_Auction_Items_Get_Post
            (Advanced_Auction_Items_Get_Request_Type,
             Ad_Account_Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Response containing the bid option values for the requested retail catalog items. Items that don't exist or do not have bid options set won't be present in the response.");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid request parameters.");
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Not authenticated to get item bid options");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Not authorized to get item bid options");
            return;
         end if;
         if Context.Get_Status = 500 then
            Context.Set_Description ("Internal error");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Advanced_Auction_Items_Get_Post;

      package API_Advanced_Auction_Items_Get_Post is
         new Swagger.Servers.Operation
            (Handler => Advanced_Auction_Items_Get_Post,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/advanced_auction/items/get",
             Mimes   => Media_List_1'Access);


      --  Operate on item level bid options
      procedure Advanced_Auction_Items_Submit_Post
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Advanced_Auction_Items_Submit_Request_Type : AdvancedAuctionItemsSubmitRequest_Type;
         Ad_Account_Id : Swagger.Nullable_UString;
         Result : .Models.AdvancedAuctionProcessedItems_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Catalogs_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "ad_account_id"));

         
         Swagger.Servers.Read (Req, Media_List_1, Input);
         
         .Models.Deserialize (Input, "AdvancedAuctionItemsSubmitRequest_Type", Advanced_Auction_Items_Submit_Request_Type);
         Server.Advanced_Auction_Items_Submit_Post
            (Advanced_Auction_Items_Submit_Request_Type,
             Ad_Account_Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Response containing the results of the item bid options operations");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid request parameters.");
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Not authenticated to post item bid options");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Not authorized to post item bid options");
            return;
         end if;
         if Context.Get_Status = 500 then
            Context.Set_Description ("Internal error");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Advanced_Auction_Items_Submit_Post;

      package API_Advanced_Auction_Items_Submit_Post is
         new Swagger.Servers.Operation
            (Handler => Advanced_Auction_Items_Submit_Post,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/advanced_auction/items/submit",
             Mimes   => Media_List_1'Access);


      --  Get audience insights
      procedure Audience_Insights_Get
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Ad_Account_Id : Swagger.UString;
         Audience_Insight_Type : AudienceInsightType_Type;
         Result : .Models.AudienceInsightsResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Audience_Insight_Type := To_AudienceInsightType_Type (Swagger.Servers.Get_Query_Parameter (Req, "audience_insight_type"));

         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Audience_Insights_Get
            (Ad_Account_Id,
             Audience_Insight_Type, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Audience_Insights_Get;

      package API_Audience_Insights_Get is
         new Swagger.Servers.Operation
            (Handler => Audience_Insights_Get,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/audience_insights",
             Mimes   => Media_List_1'Access);


      --  Get audience insights scope and type
      procedure Audience_Insights_Scope_And_Type_Get
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Ad_Account_Id : Swagger.UString;
         Result : .Models.AudienceDefinitionResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;

         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Audience_Insights_Scope_And_Type_Get
            (Ad_Account_Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Audience_Insights_Scope_And_Type_Get;

      package API_Audience_Insights_Scope_And_Type_Get is
         new Swagger.Servers.Operation
            (Handler => Audience_Insights_Scope_And_Type_Get,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/insights/audiences",
             Mimes   => Media_List_1'Access);


      --  List accounts with access to an audience owned by an ad account
      procedure Ad_Accounts_Audiences_Shared_Accounts_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Ad_Account_Id : Swagger.UString;
         Audience_Id : Swagger.UString;
         Account_Type : AudienceAccountType_Type;
         Page_Size : Swagger.Nullable_Integer;
         Bookmark : Swagger.Nullable_UString;
         Result : .Models.AdAccountsAudiencesSharedAccountsList200Response_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Audience_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "audience_id"));
         Account_Type := To_AudienceAccountType_Type (Swagger.Servers.Get_Query_Parameter (Req, "account_type"));
         Page_Size := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "page_size"));
         Bookmark := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "bookmark"));

         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Ad_Accounts_Audiences_Shared_Accounts_List
            (Ad_Account_Id,
             Audience_Id,
             Account_Type,
             Page_Size,
             Bookmark, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid ad account audiences shared accounts parameters.");
            return;
         end if;
         if Context.Get_Status = 404 then
            Context.Set_Description ("Shared accounts not found.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error.");
            return;
         end if;

      end Ad_Accounts_Audiences_Shared_Accounts_List;

      package API_Ad_Accounts_Audiences_Shared_Accounts_List is
         new Swagger.Servers.Operation
            (Handler => Ad_Accounts_Audiences_Shared_Accounts_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/audiences/shared/accounts",
             Mimes   => Media_List_1'Access);


      --  List accounts with access to an audience owned by a business
      procedure Business_Account_Audiences_Shared_Accounts_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Business_Id : Swagger.UString;
         Audience_Id : Swagger.UString;
         Account_Type : AudienceAccountType_Type;
         Page_Size : Swagger.Nullable_Integer;
         Bookmark : Swagger.Nullable_UString;
         Result : .Models.AdAccountsAudiencesSharedAccountsList200Response_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Biz_Access_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Audience_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "audience_id"));
         Account_Type := To_AudienceAccountType_Type (Swagger.Servers.Get_Query_Parameter (Req, "account_type"));
         Page_Size := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "page_size"));
         Bookmark := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "bookmark"));

         
         Business_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Business_Account_Audiences_Shared_Accounts_List
            (Business_Id,
             Audience_Id,
             Account_Type,
             Page_Size,
             Bookmark, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid business audiences shared accounts parameters.");
            return;
         end if;
         if Context.Get_Status = 404 then
            Context.Set_Description ("Shared accounts not found.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error.");
            return;
         end if;

      end Business_Account_Audiences_Shared_Accounts_List;

      package API_Business_Account_Audiences_Shared_Accounts_List is
         new Swagger.Servers.Operation
            (Handler => Business_Account_Audiences_Shared_Accounts_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/businesses/{business_id}/audiences/shared/accounts",
             Mimes   => Media_List_1'Access);


      --  List received audiences for a business
      procedure Shared_Audiences_For_Business_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Business_Id : Swagger.UString;
         Bookmark : Swagger.Nullable_UString;
         Order : Swagger.Nullable_UString;
         Page_Size : Swagger.Nullable_Integer;
         Result : .Models.AudiencesList200Response_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Biz_Access_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Bookmark := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "bookmark"));
         Order := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "order"));
         Page_Size := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "page_size"));

         
         Business_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Shared_Audiences_For_Business_List
            (Business_Id,
             Bookmark,
             Order,
             Page_Size, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid parameters.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Shared_Audiences_For_Business_List;

      package API_Shared_Audiences_For_Business_List is
         new Swagger.Servers.Operation
            (Handler => Shared_Audiences_For_Business_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/businesses/{business_id}/audiences",
             Mimes   => Media_List_1'Access);


      --  Update audience sharing between ad accounts
      procedure Update_Ad_Account_To_Ad_Account_Shared_Audience
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Ad_Account_Id : Swagger.UString;
         Shared_Audience_Type : SharedAudience_Type;
         Result : .Models.SharedAudienceResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;

         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Swagger.Servers.Read (Req, Media_List_1, Input);
         
         .Models.Deserialize (Input, "SharedAudience_Type", Shared_Audience_Type);
         Server.Update_Ad_Account_To_Ad_Account_Shared_Audience
            (Ad_Account_Id,
             Shared_Audience_Type, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid ad account id.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Update_Ad_Account_To_Ad_Account_Shared_Audience;

      package API_Update_Ad_Account_To_Ad_Account_Shared_Audience is
         new Swagger.Servers.Operation
            (Handler => Update_Ad_Account_To_Ad_Account_Shared_Audience,
             Method  => Swagger.Servers.PATCH,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/audiences/ad_accounts/shared",
             Mimes   => Media_List_1'Access);


      --  Update audience sharing from an ad account to businesses
      procedure Update_Ad_Account_To_Business_Shared_Audience
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Ad_Account_Id : Swagger.UString;
         Business_Shared_Audience_Type : BusinessSharedAudience_Type;
         Result : .Models.BusinessSharedAudienceResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;

         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Swagger.Servers.Read (Req, Media_List_1, Input);
         
         .Models.Deserialize (Input, "BusinessSharedAudience_Type", Business_Shared_Audience_Type);
         Server.Update_Ad_Account_To_Business_Shared_Audience
            (Ad_Account_Id,
             Business_Shared_Audience_Type, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid ad account id.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Update_Ad_Account_To_Business_Shared_Audience;

      package API_Update_Ad_Account_To_Business_Shared_Audience is
         new Swagger.Servers.Operation
            (Handler => Update_Ad_Account_To_Business_Shared_Audience,
             Method  => Swagger.Servers.PATCH,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/audiences/businesses/shared",
             Mimes   => Media_List_1'Access);


      --  Update audience sharing from a business to ad accounts
      procedure Update_Business_To_Ad_Account_Shared_Audience
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Business_Id : Swagger.UString;
         Shared_Audience_Type : SharedAudience_Type;
         Result : .Models.SharedAudienceResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Biz_Access_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;

         
         Business_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Swagger.Servers.Read (Req, Media_List_1, Input);
         
         .Models.Deserialize (Input, "SharedAudience_Type", Shared_Audience_Type);
         Server.Update_Business_To_Ad_Account_Shared_Audience
            (Business_Id,
             Shared_Audience_Type, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid parameters.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Update_Business_To_Ad_Account_Shared_Audience;

      package API_Update_Business_To_Ad_Account_Shared_Audience is
         new Swagger.Servers.Operation
            (Handler => Update_Business_To_Ad_Account_Shared_Audience,
             Method  => Swagger.Servers.PATCH,
             URI     => URI_Prefix & "/businesses/{business_id}/audiences/ad_accounts/shared",
             Mimes   => Media_List_1'Access);


      --  Update audience sharing between businesses
      procedure Update_Business_To_Business_Shared_Audience
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Business_Id : Swagger.UString;
         Business_Shared_Audience_Type : BusinessSharedAudience_Type;
         Result : .Models.BusinessSharedAudienceResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Biz_Access_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;

         
         Business_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Swagger.Servers.Read (Req, Media_List_1, Input);
         
         .Models.Deserialize (Input, "BusinessSharedAudience_Type", Business_Shared_Audience_Type);
         Server.Update_Business_To_Business_Shared_Audience
            (Business_Id,
             Business_Shared_Audience_Type, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid parameters.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Update_Business_To_Business_Shared_Audience;

      package API_Update_Business_To_Business_Shared_Audience is
         new Swagger.Servers.Operation
            (Handler => Update_Business_To_Business_Shared_Audience,
             Method  => Swagger.Servers.PATCH,
             URI     => URI_Prefix & "/businesses/{business_id}/audiences/businesses/shared",
             Mimes   => Media_List_1'Access);


      --  Create audience
      procedure Audiences_Create
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Ad_Account_Id : Swagger.UString;
         Audience_Create_Request_Type : AudienceCreateRequest_Type;
         Result : .Models.Audience_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;

         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Swagger.Servers.Read (Req, Media_List_1, Input);
         
         .Models.Deserialize (Input, "AudienceCreateRequest_Type", Audience_Create_Request_Type);
         Server.Audiences_Create
            (Ad_Account_Id,
             Audience_Create_Request_Type, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Audiences_Create;

      package API_Audiences_Create is
         new Swagger.Servers.Operation
            (Handler => Audiences_Create,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/audiences",
             Mimes   => Media_List_1'Access);


      --  Create custom audience
      procedure Audiences_Create_Custom
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Ad_Account_Id : Swagger.UString;
         Audience_Create_Custom_Request_Type : AudienceCreateCustomRequest_Type;
         Result : .Models.Audience_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;

         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Swagger.Servers.Read (Req, Media_List_1, Input);
         
         .Models.Deserialize (Input, "AudienceCreateCustomRequest_Type", Audience_Create_Custom_Request_Type);
         Server.Audiences_Create_Custom
            (Ad_Account_Id,
             Audience_Create_Custom_Request_Type, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Audiences_Create_Custom;

      package API_Audiences_Create_Custom is
         new Swagger.Servers.Operation
            (Handler => Audiences_Create_Custom,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/audiences/custom",
             Mimes   => Media_List_1'Access);


      --  Get audience
      procedure Audiences_Get
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Ad_Account_Id : Swagger.UString;
         Audience_Id : Swagger.UString;
         Result : .Models.Audience_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;

         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Audience_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 2));

         Server.Audiences_Get
            (Ad_Account_Id,
             Audience_Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 404 then
            Context.Set_Description ("Audience not found.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error.");
            return;
         end if;

      end Audiences_Get;

      package API_Audiences_Get is
         new Swagger.Servers.Operation
            (Handler => Audiences_Get,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/audiences/{audience_id}",
             Mimes   => Media_List_1'Access);


      --  List audiences
      procedure Audiences_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Ad_Account_Id : Swagger.UString;
         Bookmark : Swagger.Nullable_UString;
         Order : Swagger.Nullable_UString;
         Page_Size : Swagger.Nullable_Integer;
         Ownership_Type : Swagger.Nullable_UString;
         Result : .Models.AudiencesList200Response_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Bookmark := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "bookmark"));
         Order := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "order"));
         Page_Size := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "page_size"));
         Ownership_Type := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "ownership_type"));

         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Audiences_List
            (Ad_Account_Id,
             Bookmark,
             Order,
             Page_Size,
             Ownership_Type, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid ad account audience parameters.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Audiences_List;

      package API_Audiences_List is
         new Swagger.Servers.Operation
            (Handler => Audiences_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/audiences",
             Mimes   => Media_List_1'Access);


      --  Update audience
      procedure Audiences_Update
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Ad_Account_Id : Swagger.UString;
         Audience_Id : Swagger.UString;
         Audience_Update_Request_Type : AudienceUpdateRequest_Type;
         Result : .Models.Audience_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;

         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Audience_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 2));

         Swagger.Servers.Read (Req, Media_List_1, Input);
         
         .Models.Deserialize (Input, "AudienceUpdateRequest_Type", Audience_Update_Request_Type);
         Server.Audiences_Update
            (Ad_Account_Id,
             Audience_Id,
             Audience_Update_Request_Type, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Audiences_Update;

      package API_Audiences_Update is
         new Swagger.Servers.Operation
            (Handler => Audiences_Update,
             Method  => Swagger.Servers.PATCH,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/audiences/{audience_id}",
             Mimes   => Media_List_1'Access);


      --  Redeem ad credits
      procedure Ads_Credit_Redeem
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Ad_Account_Id : Swagger.UString;
         Ads_Credit_Redeem_Request_Type : AdsCreditRedeemRequest_Type;
         Result : .Models.AdsCreditRedeemResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Billing_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;

         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Swagger.Servers.Read (Req, Media_List_1, Input);
         
         .Models.Deserialize (Input, "AdsCreditRedeemRequest_Type", Ads_Credit_Redeem_Request_Type);
         Server.Ads_Credit_Redeem
            (Ad_Account_Id,
             Ads_Credit_Redeem_Request_Type, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Successfully redeemed ad credits.");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Error thrown when unable to redeem offer code.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Ads_Credit_Redeem;

      package API_Ads_Credit_Redeem is
         new Swagger.Servers.Operation
            (Handler => Ads_Credit_Redeem,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/ads_credit/redeem",
             Mimes   => Media_List_1'Access);


      --  Get ads credit discounts
      procedure Ads_Credits_Discounts_Get
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Ad_Account_Id : Swagger.UString;
         Bookmark : Swagger.Nullable_UString;
         Page_Size : Swagger.Nullable_Integer;
         Result : .Models.AdsCreditsDiscountsGet200Response_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Billing_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Bookmark := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "bookmark"));
         Page_Size := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "page_size"));

         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Ads_Credits_Discounts_Get
            (Ad_Account_Id,
             Bookmark,
             Page_Size, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error.");
            return;
         end if;

      end Ads_Credits_Discounts_Get;

      package API_Ads_Credits_Discounts_Get is
         new Swagger.Servers.Operation
            (Handler => Ads_Credits_Discounts_Get,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/ads_credit/discounts",
             Mimes   => Media_List_1'Access);


      --  Get billing profiles
      procedure Billing_Profiles_Get
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Ad_Account_Id : Swagger.UString;
         Is_Active : Boolean;
         Bookmark : Swagger.Nullable_UString;
         Page_Size : Swagger.Nullable_Integer;
         Result : .Models.BillingProfilesGet200Response_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Billing_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Is_Active := To_Boolean (Swagger.Servers.Get_Query_Parameter (Req, "is_active"));
         Bookmark := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "bookmark"));
         Page_Size := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "page_size"));

         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Billing_Profiles_Get
            (Ad_Account_Id,
             Is_Active,
             Bookmark,
             Page_Size, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error.");
            return;
         end if;

      end Billing_Profiles_Get;

      package API_Billing_Profiles_Get is
         new Swagger.Servers.Operation
            (Handler => Billing_Profiles_Get,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/billing_profiles",
             Mimes   => Media_List_1'Access);


      --  Get Salesforce account details including bill_to information.
      procedure Ssio_Accounts_Get
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Ad_Account_Id : Swagger.UString;
         Result : .Models.SSIOAccountResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;

         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Ssio_Accounts_Get
            (Ad_Account_Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid request parameter.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Ssio_Accounts_Get;

      package API_Ssio_Accounts_Get is
         new Swagger.Servers.Operation
            (Handler => Ssio_Accounts_Get,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/ssio/accounts",
             Mimes   => Media_List_1'Access);


      --  Create insertion order through SSIO.
      procedure Ssio_Insertion_Order_Create
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Ad_Account_Id : Swagger.UString;
         S_SIOCreate_Insertion_Order_Request_Type : SSIOCreateInsertionOrderRequest_Type;
         Result : .Models.SSIOCreateInsertionOrderResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;

         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Swagger.Servers.Read (Req, Media_List_1, Input);
         
         .Models.Deserialize (Input, "SSIOCreateInsertionOrderRequest_Type", S_SIOCreate_Insertion_Order_Request_Type);
         Server.Ssio_Insertion_Order_Create
            (Ad_Account_Id,
             S_SIOCreate_Insertion_Order_Request_Type, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid request.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Ssio_Insertion_Order_Create;

      package API_Ssio_Insertion_Order_Create is
         new Swagger.Servers.Operation
            (Handler => Ssio_Insertion_Order_Create,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/ssio/insertion_orders",
             Mimes   => Media_List_1'Access);


      --  Edit insertion order through SSIO.
      procedure Ssio_Insertion_Order_Edit
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Ad_Account_Id : Swagger.UString;
         S_SIOEdit_Insertion_Order_Request_Type : SSIOEditInsertionOrderRequest_Type;
         Result : .Models.SSIOEditInsertionOrderResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;

         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Swagger.Servers.Read (Req, Media_List_1, Input);
         
         .Models.Deserialize (Input, "SSIOEditInsertionOrderRequest_Type", S_SIOEdit_Insertion_Order_Request_Type);
         Server.Ssio_Insertion_Order_Edit
            (Ad_Account_Id,
             S_SIOEdit_Insertion_Order_Request_Type, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid request.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Ssio_Insertion_Order_Edit;

      package API_Ssio_Insertion_Order_Edit is
         new Swagger.Servers.Operation
            (Handler => Ssio_Insertion_Order_Edit,
             Method  => Swagger.Servers.PATCH,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/ssio/insertion_orders",
             Mimes   => Media_List_1'Access);


      --  Get insertion order status by ad account id.
      procedure Ssio_Insertion_Orders_Status_Get_By_Ad_Account
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Ad_Account_Id : Swagger.UString;
         Bookmark : Swagger.Nullable_UString;
         Page_Size : Swagger.Nullable_Integer;
         Result : .Models.SsioInsertionOrdersStatusGetByAdAccount200Response_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Bookmark := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "bookmark"));
         Page_Size := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "page_size"));

         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Ssio_Insertion_Orders_Status_Get_By_Ad_Account
            (Ad_Account_Id,
             Bookmark,
             Page_Size, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid request parameter.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Ssio_Insertion_Orders_Status_Get_By_Ad_Account;

      package API_Ssio_Insertion_Orders_Status_Get_By_Ad_Account is
         new Swagger.Servers.Operation
            (Handler => Ssio_Insertion_Orders_Status_Get_By_Ad_Account,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/ssio/insertion_orders/status",
             Mimes   => Media_List_1'Access);


      --  Get insertion order status by pin order id.
      procedure Ssio_Insertion_Orders_Status_Get_By_Pin_Order_Id
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Ad_Account_Id : Swagger.UString;
         Pin_Order_Id : Swagger.UString;
         Result : .Models.SSIOInsertionOrderStatusResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;

         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Pin_Order_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 2));

         Server.Ssio_Insertion_Orders_Status_Get_By_Pin_Order_Id
            (Ad_Account_Id,
             Pin_Order_Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid request parameter.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Ssio_Insertion_Orders_Status_Get_By_Pin_Order_Id;

      package API_Ssio_Insertion_Orders_Status_Get_By_Pin_Order_Id is
         new Swagger.Servers.Operation
            (Handler => Ssio_Insertion_Orders_Status_Get_By_Pin_Order_Id,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/ssio/insertion_orders/{pin_order_id}/status",
             Mimes   => Media_List_1'Access);


      --  Get Salesforce order lines by ad account id.
      procedure Ssio_Order_Lines_Get_By_Ad_Account
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Ad_Account_Id : Swagger.UString;
         Bookmark : Swagger.Nullable_UString;
         Page_Size : Swagger.Nullable_Integer;
         Pin_Order_Id : Swagger.Nullable_UString;
         Result : .Models.SsioOrderLinesGetByAdAccount200Response_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Bookmark := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "bookmark"));
         Page_Size := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "page_size"));
         Pin_Order_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "pin_order_id"));

         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Ssio_Order_Lines_Get_By_Ad_Account
            (Ad_Account_Id,
             Bookmark,
             Page_Size,
             Pin_Order_Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid request parameter.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Ssio_Order_Lines_Get_By_Ad_Account;

      package API_Ssio_Order_Lines_Get_By_Ad_Account is
         new Swagger.Servers.Operation
            (Handler => Ssio_Order_Lines_Get_By_Ad_Account,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/ssio/order_lines",
             Mimes   => Media_List_1'Access);


      --  Create board section
      procedure Board_Sections_Create
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Board_Id : Swagger.UString;
         Board_Section_Type : BoardSection_Type;
         Ad_Account_Id : Swagger.Nullable_UString;
         Result : .Models.BoardSection_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "ad_account_id"));

         
         Board_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Swagger.Servers.Read (Req, Media_List_1, Input);
         
         .Models.Deserialize (Input, "BoardSection_Type", Board_Section_Type);
         Server.Board_Sections_Create
            (Board_Id,
             Board_Section_Type,
             Ad_Account_Id, Result, Context);
         if Context.Get_Status = 201 then
            Context.Set_Description ("response");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid board section parameters.");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Not authorized to create board sections.");
            return;
         end if;
         if Context.Get_Status = 409 then
            Context.Set_Description ("Could not get exclusive access to the board to create a new section.");
            return;
         end if;
         if Context.Get_Status = 500 then
            Context.Set_Description ("Could not create a new board section.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Board_Sections_Create;

      package API_Board_Sections_Create is
         new Swagger.Servers.Operation
            (Handler => Board_Sections_Create,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/boards/{board_id}/sections",
             Mimes   => Media_List_1'Access);


      --  Delete board section
      procedure Board_Sections_Delete
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Board_Id : Swagger.UString;
         Section_Id : Swagger.UString;
         Ad_Account_Id : Swagger.Nullable_UString;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "ad_account_id"));

         
         Board_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Section_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 2));

         Server.Board_Sections_Delete
            (Board_Id,
             Section_Id,
             Ad_Account_Id, Context);

      end Board_Sections_Delete;

      package API_Board_Sections_Delete is
         new Swagger.Servers.Operation
            (Handler => Board_Sections_Delete,
             Method  => Swagger.Servers.DELETE,
             URI     => URI_Prefix & "/boards/{board_id}/sections/{section_id}",
             Mimes   => Media_List_1'Access);


      --  List board sections
      procedure Board_Sections_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Board_Id : Swagger.UString;
         Ad_Account_Id : Swagger.Nullable_UString;
         Bookmark : Swagger.Nullable_UString;
         Page_Size : Swagger.Nullable_Integer;
         Result : .Models.BoardSectionsList200Response_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "ad_account_id"));
         Bookmark := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "bookmark"));
         Page_Size := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "page_size"));

         
         Board_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Board_Sections_List
            (Board_Id,
             Ad_Account_Id,
             Bookmark,
             Page_Size, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("response");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Board_Sections_List;

      package API_Board_Sections_List is
         new Swagger.Servers.Operation
            (Handler => Board_Sections_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/boards/{board_id}/sections",
             Mimes   => Media_List_1'Access);


      --  List Pins on board section
      procedure Board_Sections_List_Pins
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Board_Id : Swagger.UString;
         Section_Id : Swagger.UString;
         Ad_Account_Id : Swagger.Nullable_UString;
         Bookmark : Swagger.Nullable_UString;
         Page_Size : Swagger.Nullable_Integer;
         Result : .Models.BoardsListPins200Response_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Pins_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Pins_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "ad_account_id"));
         Bookmark := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "bookmark"));
         Page_Size := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "page_size"));

         
         Board_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Section_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 2));

         Server.Board_Sections_List_Pins
            (Board_Id,
             Section_Id,
             Ad_Account_Id,
             Bookmark,
             Page_Size, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("response");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Not authorized to access Pins on board section.");
            return;
         end if;
         if Context.Get_Status = 404 then
            Context.Set_Description ("Board or section not found.");
            return;
         end if;
         if Context.Get_Status = 409 then
            Context.Set_Description ("Board section conflict.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Board_Sections_List_Pins;

      package API_Board_Sections_List_Pins is
         new Swagger.Servers.Operation
            (Handler => Board_Sections_List_Pins,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/boards/{board_id}/sections/{section_id}/pins",
             Mimes   => Media_List_1'Access);


      --  Update board section
      procedure Board_Sections_Update
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Board_Id : Swagger.UString;
         Section_Id : Swagger.UString;
         Board_Section_Type : BoardSection_Type;
         Ad_Account_Id : Swagger.Nullable_UString;
         Result : .Models.BoardSection_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "ad_account_id"));

         
         Board_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Section_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 2));

         Swagger.Servers.Read (Req, Media_List_1, Input);
         
         .Models.Deserialize (Input, "BoardSection_Type", Board_Section_Type);
         Server.Board_Sections_Update
            (Board_Id,
             Section_Id,
             Board_Section_Type,
             Ad_Account_Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("response");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid board section parameters.");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Not authorized to update board section.");
            return;
         end if;
         if Context.Get_Status = 409 then
            Context.Set_Description ("Board section conflict.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Board_Sections_Update;

      package API_Board_Sections_Update is
         new Swagger.Servers.Operation
            (Handler => Board_Sections_Update,
             Method  => Swagger.Servers.PATCH,
             URI     => URI_Prefix & "/boards/{board_id}/sections/{section_id}",
             Mimes   => Media_List_1'Access);


      --  Create board
      procedure Boards_Create
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Board_Type : Board_Type;
         Ad_Account_Id : Swagger.Nullable_UString;
         Result : .Models.Board_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "ad_account_id"));

         
         Swagger.Servers.Read (Req, Media_List_1, Input);
         
         .Models.Deserialize (Input, "Board_Type", Board_Type);
         Server.Boards_Create
            (Board_Type,
             Ad_Account_Id, Result, Context);
         if Context.Get_Status = 201 then
            Context.Set_Description ("response");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("The board name is invalid or duplicated.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Boards_Create;

      package API_Boards_Create is
         new Swagger.Servers.Operation
            (Handler => Boards_Create,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/boards",
             Mimes   => Media_List_1'Access);


      --  Delete board
      procedure Boards_Delete
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Board_Id : Swagger.UString;
         Ad_Account_Id : Swagger.Nullable_UString;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "ad_account_id"));

         
         Board_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Boards_Delete
            (Board_Id,
             Ad_Account_Id, Context);

      end Boards_Delete;

      package API_Boards_Delete is
         new Swagger.Servers.Operation
            (Handler => Boards_Delete,
             Method  => Swagger.Servers.DELETE,
             URI     => URI_Prefix & "/boards/{board_id}",
             Mimes   => Media_List_1'Access);


      --  Get board
      procedure Boards_Get
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Board_Id : Swagger.UString;
         Ad_Account_Id : Swagger.Nullable_UString;
         Result : .Models.Board_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "ad_account_id"));

         
         Board_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Boards_Get
            (Board_Id,
             Ad_Account_Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("response");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 404 then
            Context.Set_Description ("Board not found.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Boards_Get;

      package API_Boards_Get is
         new Swagger.Servers.Operation
            (Handler => Boards_Get,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/boards/{board_id}",
             Mimes   => Media_List_1'Access);


      --  List boards
      procedure Boards_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Ad_Account_Id : Swagger.Nullable_UString;
         Bookmark : Swagger.Nullable_UString;
         Page_Size : Swagger.Nullable_Integer;
         Privacy : Swagger.Nullable_UString;
         Result : .Models.BoardsList200Response_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "ad_account_id"));
         Bookmark := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "bookmark"));
         Page_Size := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "page_size"));
         Privacy := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "privacy"));

         
         Server.Boards_List
            (Ad_Account_Id,
             Bookmark,
             Page_Size,
             Privacy, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("response");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Boards_List;

      package API_Boards_List is
         new Swagger.Servers.Operation
            (Handler => Boards_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/boards",
             Mimes   => Media_List_1'Access);


      --  List Pins on board
      procedure Boards_List_Pins
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Board_Id : Swagger.UString;
         Bookmark : Swagger.Nullable_UString;
         Page_Size : Swagger.Nullable_Integer;
         Creative_Types : Swagger.UString_Vectors.Vector;
         Ad_Account_Id : Swagger.Nullable_UString;
         Pin_Metrics : Swagger.Nullable_Boolean;
         Result : .Models.BoardsListPins200Response_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Pins_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Pins_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Bookmark := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "bookmark"));
         Page_Size := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "page_size"));
         Creative_Types := To_Swagger.UString_Vectors.Vector (Swagger.Servers.Get_Query_Parameter (Req, "creative_types"));
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "ad_account_id"));
         Pin_Metrics := To_Boolean (Swagger.Servers.Get_Query_Parameter (Req, "pin_metrics"));

         
         Board_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Boards_List_Pins
            (Board_Id,
             Bookmark,
             Page_Size,
             Creative_Types,
             Ad_Account_Id,
             Pin_Metrics, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("response");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 404 then
            Context.Set_Description ("Board not found.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Boards_List_Pins;

      package API_Boards_List_Pins is
         new Swagger.Servers.Operation
            (Handler => Boards_List_Pins,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/boards/{board_id}/pins",
             Mimes   => Media_List_1'Access);


      --  Update board
      procedure Boards_Update
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Board_Id : Swagger.UString;
         Board_Update_Type : BoardUpdate_Type;
         Ad_Account_Id : Swagger.Nullable_UString;
         Result : .Models.Board_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "ad_account_id"));

         
         Board_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Swagger.Servers.Read (Req, Media_List_1, Input);
         
         .Models.Deserialize (Input, "BoardUpdate_Type", Board_Update_Type);
         Server.Boards_Update
            (Board_Id,
             Board_Update_Type,
             Ad_Account_Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("response");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid board parameters.");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Not authorized to update the board.");
            return;
         end if;
         if Context.Get_Status = 429 then
            Context.Set_Description ("This request exceeded a rate limit. This can happen if the client exceeds one of the published rate limits or if multiple write operations are applied to an object within a short time window.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Boards_Update;

      package API_Boards_Update is
         new Swagger.Servers.Operation
            (Handler => Boards_Update,
             Method  => Swagger.Servers.PATCH,
             URI     => URI_Prefix & "/boards/{board_id}",
             Mimes   => Media_List_1'Access);


      --  Get advertiser entities in bulk
      procedure Bulk_Download_Create
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Ad_Account_Id : Swagger.UString;
         Bulk_Download_Request_Type : BulkDownloadRequest_Type;
         Result : .Models.BulkDownloadResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;

         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Swagger.Servers.Read (Req, Media_List_1, Input);
         
         .Models.Deserialize (Input, "BulkDownloadRequest_Type", Bulk_Download_Request_Type);
         Server.Bulk_Download_Create
            (Ad_Account_Id,
             Bulk_Download_Request_Type, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Bulk_Download_Create;

      package API_Bulk_Download_Create is
         new Swagger.Servers.Operation
            (Handler => Bulk_Download_Create,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/bulk/download",
             Mimes   => Media_List_1'Access);


      --  Download advertiser entities in bulk
      procedure Bulk_Request_Get
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Ad_Account_Id : Swagger.UString;
         Bulk_Request_Id : Swagger.UString;
         Include_Details : Swagger.Nullable_Boolean;
         Result : .Models.BulkUpsertStatusResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Include_Details := To_Boolean (Swagger.Servers.Get_Query_Parameter (Req, "include_details"));

         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Bulk_Request_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 2));

         Server.Bulk_Request_Get
            (Ad_Account_Id,
             Bulk_Request_Id,
             Include_Details, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Bulk_Request_Get;

      package API_Bulk_Request_Get is
         new Swagger.Servers.Operation
            (Handler => Bulk_Request_Get,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/bulk/{bulk_request_id}",
             Mimes   => Media_List_1'Access);


      --  Create/update ad entities in bulk
      procedure Bulk_Upsert_Create
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Ad_Account_Id : Swagger.UString;
         Bulk_Upsert_Request_Type : BulkUpsertRequest_Type;
         Result : .Models.BulkUpsertResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;

         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Swagger.Servers.Read (Req, Media_List_1, Input);
         
         .Models.Deserialize (Input, "BulkUpsertRequest_Type", Bulk_Upsert_Request_Type);
         Server.Bulk_Upsert_Create
            (Ad_Account_Id,
             Bulk_Upsert_Request_Type, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Bulk_Upsert_Create;

      package API_Bulk_Upsert_Create is
         new Swagger.Servers.Operation
            (Handler => Bulk_Upsert_Create,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/bulk/upsert",
             Mimes   => Media_List_1'Access);


      --  Create a new asset group.
      procedure Asset_Group_Create
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Business_Id : Swagger.UString;
         Create_Asset_Group_Body_Type : CreateAssetGroupBody_Type;
         Result : .Models.CreateAssetGroupResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Biz_Access_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Biz_Access_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;

         
         Business_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Swagger.Servers.Read (Req, Media_List_1, Input);
         
         .Models.Deserialize (Input, "CreateAssetGroupBody_Type", Create_Asset_Group_Body_Type);
         Server.Asset_Group_Create
            (Business_Id,
             Create_Asset_Group_Body_Type, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid parameters.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Asset_Group_Create;

      package API_Asset_Group_Create is
         new Swagger.Servers.Operation
            (Handler => Asset_Group_Create,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/businesses/{business_id}/asset_groups",
             Mimes   => Media_List_1'Access);


      --  Delete asset groups.
      procedure Asset_Group_Delete
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Business_Id : Swagger.UString;
         Delete_Asset_Group_Body_Type : DeleteAssetGroupBody_Type;
         Result : .Models.DeleteAssetGroupResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Biz_Access_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Biz_Access_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;

         
         Business_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Swagger.Servers.Read (Req, Media_List_1, Input);
         
         .Models.Deserialize (Input, "DeleteAssetGroupBody_Type", Delete_Asset_Group_Body_Type);
         Server.Asset_Group_Delete
            (Business_Id,
             Delete_Asset_Group_Body_Type, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid parameters.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Asset_Group_Delete;

      package API_Asset_Group_Delete is
         new Swagger.Servers.Operation
            (Handler => Asset_Group_Delete,
             Method  => Swagger.Servers.DELETE,
             URI     => URI_Prefix & "/businesses/{business_id}/asset_groups",
             Mimes   => Media_List_1'Access);


      --  Update asset groups.
      procedure Asset_Group_Update
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Business_Id : Swagger.UString;
         Update_Asset_Group_Body_Type : UpdateAssetGroupBody_Type;
         Result : .Models.UpdateAssetGroupResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Biz_Access_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Biz_Access_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;

         
         Business_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Swagger.Servers.Read (Req, Media_List_1, Input);
         
         .Models.Deserialize (Input, "UpdateAssetGroupBody_Type", Update_Asset_Group_Body_Type);
         Server.Asset_Group_Update
            (Business_Id,
             Update_Asset_Group_Body_Type, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid parameters.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Asset_Group_Update;

      package API_Asset_Group_Update is
         new Swagger.Servers.Operation
            (Handler => Asset_Group_Update,
             Method  => Swagger.Servers.PATCH,
             URI     => URI_Prefix & "/businesses/{business_id}/asset_groups",
             Mimes   => Media_List_1'Access);


      --  Get members with access to asset
      procedure Business_Asset_Members_Get
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Business_Id : Swagger.UString;
         Asset_Id : Swagger.UString;
         Bookmark : Swagger.Nullable_UString;
         Page_Size : Swagger.Nullable_Integer;
         Start_Index : Swagger.Nullable_Integer;
         Result : .Models.BusinessAssetMembersGet200Response_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Biz_Access_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Bookmark := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "bookmark"));
         Page_Size := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "page_size"));
         Start_Index := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "start_index"));

         
         Business_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Asset_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 2));

         Server.Business_Asset_Members_Get
            (Business_Id,
             Asset_Id,
             Bookmark,
             Page_Size,
             Start_Index, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Sucess");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Business_Asset_Members_Get;

      package API_Business_Asset_Members_Get is
         new Swagger.Servers.Operation
            (Handler => Business_Asset_Members_Get,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/businesses/{business_id}/assets/{asset_id}/members",
             Mimes   => Media_List_1'Access);


      --  Get partners with access to asset
      procedure Business_Asset_Partners_Get
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Business_Id : Swagger.UString;
         Asset_Id : Swagger.UString;
         Start_Index : Swagger.Nullable_Integer;
         Bookmark : Swagger.Nullable_UString;
         Page_Size : Swagger.Nullable_Integer;
         Result : .Models.BusinessAssetPartnersGet200Response_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Biz_Access_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Start_Index := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "start_index"));
         Bookmark := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "bookmark"));
         Page_Size := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "page_size"));

         
         Business_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Asset_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 2));

         Server.Business_Asset_Partners_Get
            (Business_Id,
             Asset_Id,
             Start_Index,
             Bookmark,
             Page_Size, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Sucess");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Business_Asset_Partners_Get;

      package API_Business_Asset_Partners_Get is
         new Swagger.Servers.Operation
            (Handler => Business_Asset_Partners_Get,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/businesses/{business_id}/assets/{asset_id}/partners",
             Mimes   => Media_List_1'Access);


      --  List business assets
      procedure Business_Assets_Get
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Business_Id : Swagger.UString;
         Permissions : .Models.PermissionsWithOwner_Type_Vectors.Vector;
         Child_Asset_Id : Swagger.Nullable_UString;
         Asset_Group_Id : Swagger.Nullable_UString;
         Asset_Type : Swagger.Nullable_UString;
         Start_Index : Swagger.Nullable_Integer;
         Bookmark : Swagger.Nullable_UString;
         Page_Size : Swagger.Nullable_Integer;
         Result : .Models.BusinessAssetsGet200Response_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Biz_Access_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Permissions := To_.Models.PermissionsWithOwner_Type_Vectors.Vector (Swagger.Servers.Get_Query_Parameter (Req, "permissions"));
         Child_Asset_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "child_asset_id"));
         Asset_Group_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "asset_group_id"));
         Asset_Type := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "asset_type"));
         Start_Index := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "start_index"));
         Bookmark := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "bookmark"));
         Page_Size := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "page_size"));

         
         Business_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Business_Assets_Get
            (Business_Id,
             Permissions,
             Child_Asset_Id,
             Asset_Group_Id,
             Asset_Type,
             Start_Index,
             Bookmark,
             Page_Size, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Business_Assets_Get;

      package API_Business_Assets_Get is
         new Swagger.Servers.Operation
            (Handler => Business_Assets_Get,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/businesses/{business_id}/assets",
             Mimes   => Media_List_1'Access);


      --  Get assets assigned to a member
      procedure Business_Member_Assets_Get
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Business_Id : Swagger.UString;
         Member_Id : Swagger.UString;
         Asset_Type : Swagger.Nullable_UString;
         Start_Index : Swagger.Nullable_Integer;
         Bookmark : Swagger.Nullable_UString;
         Page_Size : Swagger.Nullable_Integer;
         Result : .Models.BusinessMemberAssetsGet200Response_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Biz_Access_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Asset_Type := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "asset_type"));
         Start_Index := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "start_index"));
         Bookmark := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "bookmark"));
         Page_Size := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "page_size"));

         
         Business_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Member_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 2));

         Server.Business_Member_Assets_Get
            (Business_Id,
             Member_Id,
             Asset_Type,
             Start_Index,
             Bookmark,
             Page_Size, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Business_Member_Assets_Get;

      package API_Business_Member_Assets_Get is
         new Swagger.Servers.Operation
            (Handler => Business_Member_Assets_Get,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/businesses/{business_id}/members/{member_id}/assets",
             Mimes   => Media_List_1'Access);


      --  Delete member access to asset
      procedure Business_Members_Asset_Access_Delete
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Business_Id : Swagger.UString;
         Business_Members_Asset_Access_Delete_Request_Type : BusinessMembersAssetAccessDeleteRequest_Type;
         Result : .Models.DeleteMemberAccessResultsResponseArray_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Biz_Access_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;

         
         Business_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Swagger.Servers.Read (Req, Media_List_1, Input);
         
         .Models.Deserialize (Input, "BusinessMembersAssetAccessDeleteRequest_Type", Business_Members_Asset_Access_Delete_Request_Type);
         Server.Business_Members_Asset_Access_Delete
            (Business_Id,
             Business_Members_Asset_Access_Delete_Request_Type, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("response");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Business_Members_Asset_Access_Delete;

      package API_Business_Members_Asset_Access_Delete is
         new Swagger.Servers.Operation
            (Handler => Business_Members_Asset_Access_Delete,
             Method  => Swagger.Servers.DELETE,
             URI     => URI_Prefix & "/businesses/{business_id}/members/assets/access",
             Mimes   => Media_List_1'Access);


      --  Assign/Update member asset permissions
      procedure Business_Members_Asset_Access_Update
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Business_Id : Swagger.UString;
         Update_Member_Asset_Access_Body_Type : UpdateMemberAssetAccessBody_Type;
         Result : .Models.UpdateMemberAssetsResultsResponseArray_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Biz_Access_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;

         
         Business_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Swagger.Servers.Read (Req, Media_List_1, Input);
         
         .Models.Deserialize (Input, "UpdateMemberAssetAccessBody_Type", Update_Member_Asset_Access_Body_Type);
         Server.Business_Members_Asset_Access_Update
            (Business_Id,
             Update_Member_Asset_Access_Body_Type, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("response");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Business_Members_Asset_Access_Update;

      package API_Business_Members_Asset_Access_Update is
         new Swagger.Servers.Operation
            (Handler => Business_Members_Asset_Access_Update,
             Method  => Swagger.Servers.PATCH,
             URI     => URI_Prefix & "/businesses/{business_id}/members/assets/access",
             Mimes   => Media_List_1'Access);


      --  Get assets assigned to a partner or assets assigned by a partner
      procedure Business_Partner_Asset_Access_Get
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Business_Id : Swagger.UString;
         Partner_Id : Swagger.UString;
         Partner_Type : .Models.PartnerType_Type;
         Asset_Type : Swagger.Nullable_UString;
         Start_Index : Swagger.Nullable_Integer;
         Page_Size : Swagger.Nullable_Integer;
         Bookmark : Swagger.Nullable_UString;
         Result : .Models.BusinessPartnerAssetAccessGet200Response_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Biz_Access_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Partner_Type := To_.Models.PartnerType_Type (Swagger.Servers.Get_Query_Parameter (Req, "partner_type"));
         Asset_Type := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "asset_type"));
         Start_Index := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "start_index"));
         Page_Size := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "page_size"));
         Bookmark := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "bookmark"));

         
         Business_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Partner_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 2));

         Server.Business_Partner_Asset_Access_Get
            (Business_Id,
             Partner_Id,
             Partner_Type,
             Asset_Type,
             Start_Index,
             Page_Size,
             Bookmark, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Business_Partner_Asset_Access_Get;

      package API_Business_Partner_Asset_Access_Get is
         new Swagger.Servers.Operation
            (Handler => Business_Partner_Asset_Access_Get,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/businesses/{business_id}/partners/{partner_id}/assets",
             Mimes   => Media_List_1'Access);


      --  Delete partner access to asset
      procedure Delete_Partner_Asset_Access_Handler_Impl
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Business_Id : Swagger.UString;
         Delete_Partner_Asset_Access_Body_Type : DeletePartnerAssetAccessBody_Type;
         Result : .Models.DeletePartnerAssetsResultsResponseArray_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Biz_Access_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;

         
         Business_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Swagger.Servers.Read (Req, Media_List_1, Input);
         
         .Models.Deserialize (Input, "DeletePartnerAssetAccessBody_Type", Delete_Partner_Asset_Access_Body_Type);
         Server.Delete_Partner_Asset_Access_Handler_Impl
            (Business_Id,
             Delete_Partner_Asset_Access_Body_Type, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Delete_Partner_Asset_Access_Handler_Impl;

      package API_Delete_Partner_Asset_Access_Handler_Impl is
         new Swagger.Servers.Operation
            (Handler => Delete_Partner_Asset_Access_Handler_Impl,
             Method  => Swagger.Servers.DELETE,
             URI     => URI_Prefix & "/businesses/{business_id}/partners/assets",
             Mimes   => Media_List_1'Access);


      --  Assign/Update partner asset permissions
      procedure Update_Partner_Asset_Access_Handler_Impl
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Business_Id : Swagger.UString;
         Update_Partner_Asset_Access_Body_Type : UpdatePartnerAssetAccessBody_Type;
         Result : .Models.UpdatePartnerAssetsResultsResponseArray_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Biz_Access_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;

         
         Business_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Swagger.Servers.Read (Req, Media_List_1, Input);
         
         .Models.Deserialize (Input, "UpdatePartnerAssetAccessBody_Type", Update_Partner_Asset_Access_Body_Type);
         Server.Update_Partner_Asset_Access_Handler_Impl
            (Business_Id,
             Update_Partner_Asset_Access_Body_Type, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Update_Partner_Asset_Access_Handler_Impl;

      package API_Update_Partner_Asset_Access_Handler_Impl is
         new Swagger.Servers.Operation
            (Handler => Update_Partner_Asset_Access_Handler_Impl,
             Method  => Swagger.Servers.PATCH,
             URI     => URI_Prefix & "/businesses/{business_id}/partners/assets",
             Mimes   => Media_List_1'Access);


      --  Create a request to access an existing partner's assets.
      procedure Asset_Access_Requests_Create
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Business_Id : Swagger.UString;
         Create_Asset_Access_Request_Body_Type : CreateAssetAccessRequestBody_Type;
         Result : .Models.CreateAssetAccessRequestResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Biz_Access_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Biz_Access_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;

         
         Business_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Swagger.Servers.Read (Req, Media_List_1, Input);
         
         .Models.Deserialize (Input, "CreateAssetAccessRequestBody_Type", Create_Asset_Access_Request_Body_Type);
         Server.Asset_Access_Requests_Create
            (Business_Id,
             Create_Asset_Access_Request_Body_Type, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Asset_Access_Requests_Create;

      package API_Asset_Access_Requests_Create is
         new Swagger.Servers.Operation
            (Handler => Asset_Access_Requests_Create,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/businesses/{business_id}/requests/assets/access",
             Mimes   => Media_List_1'Access);


      --  Cancel invites/requests
      procedure Cancel_Invites_Or_Requests
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Business_Id : Swagger.UString;
         Cancel_Invites_Body_Type : CancelInvitesBody_Type;
         Result : .Models.DeleteInvitesResultsResponseArray_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Biz_Access_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;

         
         Business_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Swagger.Servers.Read (Req, Media_List_1, Input);
         
         .Models.Deserialize (Input, "CancelInvitesBody_Type", Cancel_Invites_Body_Type);
         Server.Cancel_Invites_Or_Requests
            (Business_Id,
             Cancel_Invites_Body_Type, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Cancel_Invites_Or_Requests;

      package API_Cancel_Invites_Or_Requests is
         new Swagger.Servers.Operation
            (Handler => Cancel_Invites_Or_Requests,
             Method  => Swagger.Servers.DELETE,
             URI     => URI_Prefix & "/businesses/{business_id}/invites",
             Mimes   => Media_List_1'Access);


      --  Update invite/request with an asset permission
      procedure Create_Asset_Invites
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Business_Id : Swagger.UString;
         Create_Asset_Invites_Request_Type : CreateAssetInvitesRequest_Type;
         Result : .Models.UpdateInvitesResultsResponseArray_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Biz_Access_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Biz_Access_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;

         
         Business_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Swagger.Servers.Read (Req, Media_List_1, Input);
         
         .Models.Deserialize (Input, "CreateAssetInvitesRequest_Type", Create_Asset_Invites_Request_Type);
         Server.Create_Asset_Invites
            (Business_Id,
             Create_Asset_Invites_Request_Type, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Create_Asset_Invites;

      package API_Create_Asset_Invites is
         new Swagger.Servers.Operation
            (Handler => Create_Asset_Invites,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/businesses/{business_id}/invites/assets/access",
             Mimes   => Media_List_1'Access);


      --  Create invites or requests
      procedure Create_Membership_Or_Partnership_Invites
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Business_Id : Swagger.UString;
         Create_Membership_Or_Partnership_Invites_Body_Type : CreateMembershipOrPartnershipInvitesBody_Type;
         Result : .Models.CreateInvitesResultsResponseArray_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Biz_Access_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;

         
         Business_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Swagger.Servers.Read (Req, Media_List_1, Input);
         
         .Models.Deserialize (Input, "CreateMembershipOrPartnershipInvitesBody_Type", Create_Membership_Or_Partnership_Invites_Body_Type);
         Server.Create_Membership_Or_Partnership_Invites
            (Business_Id,
             Create_Membership_Or_Partnership_Invites_Body_Type, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Create_Membership_Or_Partnership_Invites;

      package API_Create_Membership_Or_Partnership_Invites is
         new Swagger.Servers.Operation
            (Handler => Create_Membership_Or_Partnership_Invites,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/businesses/{business_id}/invites",
             Mimes   => Media_List_1'Access);


      --  Get invites/requests
      procedure Get_Invites
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Business_Id : Swagger.UString;
         Is_Member : Swagger.Nullable_Boolean;
         Invite_Status : Swagger.UString_Vectors.Vector;
         Invite_Type : InviteType_Type;
         Bookmark : Swagger.Nullable_UString;
         Page_Size : Swagger.Nullable_Integer;
         Result : .Models.GetInvites200Response_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Biz_Access_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Is_Member := To_Boolean (Swagger.Servers.Get_Query_Parameter (Req, "is_member"));
         Invite_Status := To_Swagger.UString_Vectors.Vector (Swagger.Servers.Get_Query_Parameter (Req, "invite_status"));
         Invite_Type := To_InviteType_Type (Swagger.Servers.Get_Query_Parameter (Req, "invite_type"));
         Bookmark := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "bookmark"));
         Page_Size := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "page_size"));

         
         Business_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Get_Invites
            (Business_Id,
             Is_Member,
             Invite_Status,
             Invite_Type,
             Bookmark,
             Page_Size, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Get_Invites;

      package API_Get_Invites is
         new Swagger.Servers.Operation
            (Handler => Get_Invites,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/businesses/{business_id}/invites",
             Mimes   => Media_List_1'Access);


      --  Accept or decline an invite/request
      procedure Respond_Business_Access_Invites
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Auth_Respond_Invites_Body_Type : AuthRespondInvitesBody_Type;
         Result : .Models.RespondToInvitesResponseArray_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Biz_Access_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Biz_Access_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;

         
         Swagger.Servers.Read (Req, Media_List_1, Input);
         
         .Models.Deserialize (Input, "AuthRespondInvitesBody_Type", Auth_Respond_Invites_Body_Type);
         Server.Respond_Business_Access_Invites
            (Auth_Respond_Invites_Body_Type, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Respond_Business_Access_Invites;

      package API_Respond_Business_Access_Invites is
         new Swagger.Servers.Operation
            (Handler => Respond_Business_Access_Invites,
             Method  => Swagger.Servers.PATCH,
             URI     => URI_Prefix & "/businesses/invites",
             Mimes   => Media_List_1'Access);


      --  Terminate business memberships
      procedure Delete_Business_Membership
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Business_Id : Swagger.UString;
         Members_To_Delete_Body_Type : MembersToDeleteBody_Type;
         Result : .Models.DeletedMembersResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Biz_Access_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Biz_Access_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;

         
         Business_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Swagger.Servers.Read (Req, Media_List_1, Input);
         
         .Models.Deserialize (Input, "MembersToDeleteBody_Type", Members_To_Delete_Body_Type);
         Server.Delete_Business_Membership
            (Business_Id,
             Members_To_Delete_Body_Type, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Delete_Business_Membership;

      package API_Delete_Business_Membership is
         new Swagger.Servers.Operation
            (Handler => Delete_Business_Membership,
             Method  => Swagger.Servers.DELETE,
             URI     => URI_Prefix & "/businesses/{business_id}/members",
             Mimes   => Media_List_1'Access);


      --  Terminate business partnerships
      procedure Delete_Business_Partners
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Business_Id : Swagger.UString;
         Delete_Partners_Request_Type : DeletePartnersRequest_Type;
         Result : .Models.DeletePartnersResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Biz_Access_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;

         
         Business_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Swagger.Servers.Read (Req, Media_List_1, Input);
         
         .Models.Deserialize (Input, "DeletePartnersRequest_Type", Delete_Partners_Request_Type);
         Server.Delete_Business_Partners
            (Business_Id,
             Delete_Partners_Request_Type, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 404 then
            Context.Set_Description ("A supplied partner id doesn't exist");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Delete_Business_Partners;

      package API_Delete_Business_Partners is
         new Swagger.Servers.Operation
            (Handler => Delete_Business_Partners,
             Method  => Swagger.Servers.DELETE,
             URI     => URI_Prefix & "/businesses/{business_id}/partners",
             Mimes   => Media_List_1'Access);


      --  List business employers for user
      procedure Get_Business_Employers
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Page_Size : Swagger.Nullable_Integer;
         Bookmark : Swagger.Nullable_UString;
         Result : .Models.GetBusinessEmployers200Response_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Biz_Access_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Page_Size := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "page_size"));
         Bookmark := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "bookmark"));

         
         Server.Get_Business_Employers
            (Page_Size,
             Bookmark, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Get_Business_Employers;

      package API_Get_Business_Employers is
         new Swagger.Servers.Operation
            (Handler => Get_Business_Employers,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/businesses/employers",
             Mimes   => Media_List_1'Access);


      --  Get business members
      procedure Get_Business_Members
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Business_Id : Swagger.UString;
         Assets_Summary : Swagger.Nullable_Boolean;
         Business_Roles : .Models.MemberBusinessRole_Type_Vectors.Vector;
         Member_Ids : Swagger.Nullable_UString;
         Start_Index : Swagger.Nullable_Integer;
         Bookmark : Swagger.Nullable_UString;
         Page_Size : Swagger.Nullable_Integer;
         Result : .Models.GetBusinessMembers200Response_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Biz_Access_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Assets_Summary := To_Boolean (Swagger.Servers.Get_Query_Parameter (Req, "assets_summary"));
         Business_Roles := To_.Models.MemberBusinessRole_Type_Vectors.Vector (Swagger.Servers.Get_Query_Parameter (Req, "business_roles"));
         Member_Ids := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "member_ids"));
         Start_Index := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "start_index"));
         Bookmark := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "bookmark"));
         Page_Size := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "page_size"));

         
         Business_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Get_Business_Members
            (Business_Id,
             Assets_Summary,
             Business_Roles,
             Member_Ids,
             Start_Index,
             Bookmark,
             Page_Size, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Get_Business_Members;

      package API_Get_Business_Members is
         new Swagger.Servers.Operation
            (Handler => Get_Business_Members,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/businesses/{business_id}/members",
             Mimes   => Media_List_1'Access);


      --  Get business partners
      procedure Get_Business_Partners
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Business_Id : Swagger.UString;
         Assets_Summary : Swagger.Nullable_Boolean;
         Partner_Type : PartnerType_Type;
         Partner_Ids : Swagger.Nullable_UString;
         Start_Index : Swagger.Nullable_Integer;
         Page_Size : Swagger.Nullable_Integer;
         Bookmark : Swagger.Nullable_UString;
         Result : .Models.GetBusinessPartners200Response_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Biz_Access_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Assets_Summary := To_Boolean (Swagger.Servers.Get_Query_Parameter (Req, "assets_summary"));
         Partner_Type := To_PartnerType_Type (Swagger.Servers.Get_Query_Parameter (Req, "partner_type"));
         Partner_Ids := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "partner_ids"));
         Start_Index := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "start_index"));
         Page_Size := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "page_size"));
         Bookmark := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "bookmark"));

         
         Business_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Get_Business_Partners
            (Business_Id,
             Assets_Summary,
             Partner_Type,
             Partner_Ids,
             Start_Index,
             Page_Size,
             Bookmark, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Get_Business_Partners;

      package API_Get_Business_Partners is
         new Swagger.Servers.Operation
            (Handler => Get_Business_Partners,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/businesses/{business_id}/partners",
             Mimes   => Media_List_1'Access);


      --  Update member's business role
      procedure Update_Business_Memberships
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Business_Id : Swagger.UString;
         Update_Member_Business_Role_Body : .Models.UpdateMemberBusinessRoleBody_Type_Vectors.Vector;
         Result : .Models.UpdateMemberResultsResponseArray_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Biz_Access_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;

         
         Business_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Swagger.Servers.Read (Req, Media_List_1, Input);
         
         .Models.Deserialize (Input, "UpdateMemberBusinessRoleBody", Update_Member_Business_Role_Body);
         Server.Update_Business_Memberships
            (Business_Id,
             Update_Member_Business_Role_Body, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("response");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Update_Business_Memberships;

      package API_Update_Business_Memberships is
         new Swagger.Servers.Operation
            (Handler => Update_Business_Memberships,
             Method  => Swagger.Servers.PATCH,
             URI     => URI_Prefix & "/businesses/{business_id}/members",
             Mimes   => Media_List_1'Access);


      --  Get targeting analytics for campaigns
      procedure Campaign_Targeting_Analytics_Get
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Ad_Account_Id : Swagger.UString;
         Campaign_Ids : Swagger.UString_Vectors.Vector;
         Start_Date : Swagger.Date;
         End_Date : Swagger.Date;
         Targeting_Types : .Models.AdsAnalyticsCampaignTargetingType_Type_Vectors.Vector;
         Columns : Swagger.UString_Vectors.Vector;
         Granularity : Granularity_Type;
         Click_Window_Days : Swagger.Nullable_Integer;
         Engagement_Window_Days : Swagger.Nullable_Integer;
         View_Window_Days : Swagger.Nullable_Integer;
         Conversion_Report_Time : Swagger.Nullable_UString;
         Attribution_Types : ConversionReportAttributionType_Type;
         Result : .Models.MetricsResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Campaign_Ids := To_Swagger.UString_Vectors.Vector (Swagger.Servers.Get_Query_Parameter (Req, "campaign_ids"));
         Start_Date := To_Swagger.Date (Swagger.Servers.Get_Query_Parameter (Req, "start_date"));
         End_Date := To_Swagger.Date (Swagger.Servers.Get_Query_Parameter (Req, "end_date"));
         Targeting_Types := To_.Models.AdsAnalyticsCampaignTargetingType_Type_Vectors.Vector (Swagger.Servers.Get_Query_Parameter (Req, "targeting_types"));
         Columns := To_Swagger.UString_Vectors.Vector (Swagger.Servers.Get_Query_Parameter (Req, "columns"));
         Granularity := To_Granularity_Type (Swagger.Servers.Get_Query_Parameter (Req, "granularity"));
         Click_Window_Days := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "click_window_days"));
         Engagement_Window_Days := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "engagement_window_days"));
         View_Window_Days := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "view_window_days"));
         Conversion_Report_Time := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "conversion_report_time"));
         Attribution_Types := To_ConversionReportAttributionType_Type (Swagger.Servers.Get_Query_Parameter (Req, "attribution_types"));

         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Campaign_Targeting_Analytics_Get
            (Ad_Account_Id,
             Campaign_Ids,
             Start_Date,
             End_Date,
             Targeting_Types,
             Columns,
             Granularity,
             Click_Window_Days,
             Engagement_Window_Days,
             View_Window_Days,
             Conversion_Report_Time,
             Attribution_Types, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Campaign_Targeting_Analytics_Get;

      package API_Campaign_Targeting_Analytics_Get is
         new Swagger.Servers.Operation
            (Handler => Campaign_Targeting_Analytics_Get,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/campaigns/targeting_analytics",
             Mimes   => Media_List_1'Access);


      --  Get campaign analytics
      procedure Campaigns_Analytics
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Ad_Account_Id : Swagger.UString;
         Start_Date : Swagger.Date;
         End_Date : Swagger.Date;
         Campaign_Ids : Swagger.UString_Vectors.Vector;
         Columns : Swagger.UString_Vectors.Vector;
         Granularity : Granularity_Type;
         Click_Window_Days : Swagger.Nullable_Integer;
         Engagement_Window_Days : Swagger.Nullable_Integer;
         View_Window_Days : Swagger.Nullable_Integer;
         Conversion_Report_Time : Swagger.Nullable_UString;
         Result : .Models.CampaignsAnalyticsResponseInner_Type_Vectors.Vector;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Start_Date := To_Swagger.Date (Swagger.Servers.Get_Query_Parameter (Req, "start_date"));
         End_Date := To_Swagger.Date (Swagger.Servers.Get_Query_Parameter (Req, "end_date"));
         Campaign_Ids := To_Swagger.UString_Vectors.Vector (Swagger.Servers.Get_Query_Parameter (Req, "campaign_ids"));
         Columns := To_Swagger.UString_Vectors.Vector (Swagger.Servers.Get_Query_Parameter (Req, "columns"));
         Granularity := To_Granularity_Type (Swagger.Servers.Get_Query_Parameter (Req, "granularity"));
         Click_Window_Days := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "click_window_days"));
         Engagement_Window_Days := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "engagement_window_days"));
         View_Window_Days := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "view_window_days"));
         Conversion_Report_Time := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "conversion_report_time"));

         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Campaigns_Analytics
            (Ad_Account_Id,
             Start_Date,
             End_Date,
             Campaign_Ids,
             Columns,
             Granularity,
             Click_Window_Days,
             Engagement_Window_Days,
             View_Window_Days,
             Conversion_Report_Time, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid ad account campaign analytics parameters.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Campaigns_Analytics;

      package API_Campaigns_Analytics is
         new Swagger.Servers.Operation
            (Handler => Campaigns_Analytics,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/campaigns/analytics",
             Mimes   => Media_List_1'Access);


      --  Create campaigns
      procedure Campaigns_Create
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Ad_Account_Id : Swagger.UString;
         Campaign_Create_Request : .Models.CampaignCreateRequest_Type_Vectors.Vector;
         Result : .Models.CampaignCreateResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;

         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Swagger.Servers.Read (Req, Media_List_1, Input);
         
         .Models.Deserialize (Input, "CampaignCreateRequest", Campaign_Create_Request);
         Server.Campaigns_Create
            (Ad_Account_Id,
             Campaign_Create_Request, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("response");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Campaigns_Create;

      package API_Campaigns_Create is
         new Swagger.Servers.Operation
            (Handler => Campaigns_Create,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/campaigns",
             Mimes   => Media_List_1'Access);


      --  Get campaign
      procedure Campaigns_Get
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Ad_Account_Id : Swagger.UString;
         Campaign_Id : Swagger.UString;
         Result : .Models.CampaignResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;

         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Campaign_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 2));

         Server.Campaigns_Get
            (Ad_Account_Id,
             Campaign_Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Campaigns_Get;

      package API_Campaigns_Get is
         new Swagger.Servers.Operation
            (Handler => Campaigns_Get,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/campaigns/{campaign_id}",
             Mimes   => Media_List_1'Access);


      --  List campaigns
      procedure Campaigns_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Ad_Account_Id : Swagger.UString;
         Campaign_Ids : Swagger.UString_Vectors.Vector;
         Entity_Statuses : Swagger.UString_Vectors.Vector;
         Page_Size : Swagger.Nullable_Integer;
         Order : Swagger.Nullable_UString;
         Bookmark : Swagger.Nullable_UString;
         Result : .Models.CampaignsList200Response_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Campaign_Ids := To_Swagger.UString_Vectors.Vector (Swagger.Servers.Get_Query_Parameter (Req, "campaign_ids"));
         Entity_Statuses := To_Swagger.UString_Vectors.Vector (Swagger.Servers.Get_Query_Parameter (Req, "entity_statuses"));
         Page_Size := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "page_size"));
         Order := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "order"));
         Bookmark := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "bookmark"));

         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Campaigns_List
            (Ad_Account_Id,
             Campaign_Ids,
             Entity_Statuses,
             Page_Size,
             Order,
             Bookmark, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid ad account campaign parameters.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Campaigns_List;

      package API_Campaigns_List is
         new Swagger.Servers.Operation
            (Handler => Campaigns_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/campaigns",
             Mimes   => Media_List_1'Access);


      --  Update campaigns
      procedure Campaigns_Update
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Ad_Account_Id : Swagger.UString;
         Campaign_Update_Request : .Models.CampaignUpdateRequest_Type_Vectors.Vector;
         Result : .Models.CampaignUpdateResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;

         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Swagger.Servers.Read (Req, Media_List_1, Input);
         
         .Models.Deserialize (Input, "CampaignUpdateRequest", Campaign_Update_Request);
         Server.Campaigns_Update
            (Ad_Account_Id,
             Campaign_Update_Request, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("response");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Campaigns_Update;

      package API_Campaigns_Update is
         new Swagger.Servers.Operation
            (Handler => Campaigns_Update,
             Method  => Swagger.Servers.PATCH,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/campaigns",
             Mimes   => Media_List_1'Access);


      --  Create catalog
      procedure Catalogs_Create
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Catalogs_Create_Request_Type : CatalogsCreateRequest_Type;
         Ad_Account_Id : Swagger.Nullable_UString;
         Result : .Models.Catalog_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Catalogs_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "ad_account_id"));

         
         Swagger.Servers.Read (Req, Media_List_1, Input);
         
         .Models.Deserialize (Input, "CatalogsCreateRequest_Type", Catalogs_Create_Request_Type);
         Server.Catalogs_Create
            (Catalogs_Create_Request_Type,
             Ad_Account_Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid parameters.");
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Unauthorized access.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error.");
            return;
         end if;

      end Catalogs_Create;

      package API_Catalogs_Create is
         new Swagger.Servers.Operation
            (Handler => Catalogs_Create,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/catalogs",
             Mimes   => Media_List_1'Access);


      --  List catalogs
      procedure Catalogs_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Bookmark : Swagger.Nullable_UString;
         Page_Size : Swagger.Nullable_Integer;
         Ad_Account_Id : Swagger.Nullable_UString;
         Result : .Models.CatalogsList200Response_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Catalogs_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Bookmark := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "bookmark"));
         Page_Size := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "page_size"));
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "ad_account_id"));

         
         Server.Catalogs_List
            (Bookmark,
             Page_Size,
             Ad_Account_Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid parameters.");
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Unauthorized access.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error.");
            return;
         end if;

      end Catalogs_List;

      package API_Catalogs_List is
         new Swagger.Servers.Operation
            (Handler => Catalogs_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/catalogs",
             Mimes   => Media_List_1'Access);


      --  List products by product group
      procedure Catalogs_Product_Group_Pins_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Product_Group_Id : Swagger.UString;
         Bookmark : Swagger.Nullable_UString;
         Page_Size : Swagger.Nullable_Integer;
         Ad_Account_Id : Swagger.Nullable_UString;
         Pin_Metrics : Swagger.Nullable_Boolean;
         Result : .Models.CatalogsProductGroupPinsList200Response_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Catalogs_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Pins_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Bookmark := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "bookmark"));
         Page_Size := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "page_size"));
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "ad_account_id"));
         Pin_Metrics := To_Boolean (Swagger.Servers.Get_Query_Parameter (Req, "pin_metrics"));

         
         Product_Group_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Catalogs_Product_Group_Pins_List
            (Product_Group_Id,
             Bookmark,
             Page_Size,
             Ad_Account_Id,
             Pin_Metrics, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid parameters.");
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Unauthorized access.");
            return;
         end if;
         if Context.Get_Status = 404 then
            Context.Set_Description ("Catalogs product group not found.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error.");
            return;
         end if;

      end Catalogs_Product_Group_Pins_List;

      package API_Catalogs_Product_Group_Pins_List is
         new Swagger.Servers.Operation
            (Handler => Catalogs_Product_Group_Pins_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/catalogs/product_groups/{product_group_id}/products",
             Mimes   => Media_List_1'Access);


      --  Create product group
      procedure Catalogs_Product_Groups_Create
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Multiple_Product_Groups_Inner_Type : MultipleProductGroupsInner_Type;
         Ad_Account_Id : Swagger.Nullable_UString;
         Result : .Models.CatalogsVerticalProductGroup_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Catalogs_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "ad_account_id"));

         
         Swagger.Servers.Read (Req, Media_List_1, Input);
         
         .Models.Deserialize (Input, "MultipleProductGroupsInner_Type", Multiple_Product_Groups_Inner_Type);
         Server.Catalogs_Product_Groups_Create
            (Multiple_Product_Groups_Inner_Type,
             Ad_Account_Id, Result, Context);
         if Context.Get_Status = 201 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid body.");
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Unauthorized access.");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Forbidden. Account not approved for catalog product group mutations yet.");
            return;
         end if;
         if Context.Get_Status = 409 then
            Context.Set_Description ("Conflict. Can't create this catalogs product group with this value.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error.");
            return;
         end if;

      end Catalogs_Product_Groups_Create;

      package API_Catalogs_Product_Groups_Create is
         new Swagger.Servers.Operation
            (Handler => Catalogs_Product_Groups_Create,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/catalogs/product_groups",
             Mimes   => Media_List_1'Access);


      --  Create product groups
      procedure Catalogs_Product_Groups_Create_Many
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Multiple_Product_Groups_Inner : .Models.MultipleProductGroupsInner_Type_Vectors.Vector;
         Ad_Account_Id : Swagger.Nullable_UString;
         Result : Swagger.UString_Vectors.Vector;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Catalogs_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "ad_account_id"));

         
         Swagger.Servers.Read (Req, Media_List_1, Input);
         
         .Models.Deserialize (Input, "multiple_product_groups_inner", Multiple_Product_Groups_Inner);
         Server.Catalogs_Product_Groups_Create_Many
            (Multiple_Product_Groups_Inner,
             Ad_Account_Id, Result, Context);
         if Context.Get_Status = 201 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Stream.Write_Entity ("", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid body.");
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Unauthorized access.");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Forbidden. Account not approved for catalog product group mutations yet.");
            return;
         end if;
         if Context.Get_Status = 409 then
            Context.Set_Description ("Conflict. Can't create this catalogs product group with this value.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error.");
            return;
         end if;

      end Catalogs_Product_Groups_Create_Many;

      package API_Catalogs_Product_Groups_Create_Many is
         new Swagger.Servers.Operation
            (Handler => Catalogs_Product_Groups_Create_Many,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/catalogs/product_groups/multiple",
             Mimes   => Media_List_1'Access);


      --  Delete product group
      procedure Catalogs_Product_Groups_Delete
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Product_Group_Id : Swagger.UString;
         Ad_Account_Id : Swagger.Nullable_UString;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Catalogs_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "ad_account_id"));

         
         Product_Group_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Catalogs_Product_Groups_Delete
            (Product_Group_Id,
             Ad_Account_Id, Context);

      end Catalogs_Product_Groups_Delete;

      package API_Catalogs_Product_Groups_Delete is
         new Swagger.Servers.Operation
            (Handler => Catalogs_Product_Groups_Delete,
             Method  => Swagger.Servers.DELETE,
             URI     => URI_Prefix & "/catalogs/product_groups/{product_group_id}",
             Mimes   => Media_List_1'Access);


      --  Delete product groups
      procedure Catalogs_Product_Groups_Delete_Many
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Id : Integer_Vectors.Vector;
         Ad_Account_Id : Swagger.Nullable_UString;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Catalogs_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Id := To_Integer_Vectors.Vector (Swagger.Servers.Get_Query_Parameter (Req, "id"));
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "ad_account_id"));

         
         Server.Catalogs_Product_Groups_Delete_Many
            (Id,
             Ad_Account_Id, Context);

      end Catalogs_Product_Groups_Delete_Many;

      package API_Catalogs_Product_Groups_Delete_Many is
         new Swagger.Servers.Operation
            (Handler => Catalogs_Product_Groups_Delete_Many,
             Method  => Swagger.Servers.DELETE,
             URI     => URI_Prefix & "/catalogs/product_groups/multiple",
             Mimes   => Media_List_1'Access);


      --  Get product group
      procedure Catalogs_Product_Groups_Get
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Product_Group_Id : Swagger.UString;
         Ad_Account_Id : Swagger.Nullable_UString;
         Result : .Models.CatalogsVerticalProductGroup_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Catalogs_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "ad_account_id"));

         
         Product_Group_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Catalogs_Product_Groups_Get
            (Product_Group_Id,
             Ad_Account_Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid catalogs product group id parameters.");
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Unauthorized access.");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Forbidden. Account not approved for catalog product group mutations yet.");
            return;
         end if;
         if Context.Get_Status = 404 then
            Context.Set_Description ("Catalogs product group not found.");
            return;
         end if;
         if Context.Get_Status = 409 then
            Context.Set_Description ("Conflict. Can't get a catalogs product group without an existing catalog.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error.");
            return;
         end if;

      end Catalogs_Product_Groups_Get;

      package API_Catalogs_Product_Groups_Get is
         new Swagger.Servers.Operation
            (Handler => Catalogs_Product_Groups_Get,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/catalogs/product_groups/{product_group_id}",
             Mimes   => Media_List_1'Access);


      --  List product groups
      procedure Catalogs_Product_Groups_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Id : Integer_Vectors.Vector;
         Feed_Id : Swagger.Nullable_UString;
         Catalog_Id : Swagger.Nullable_UString;
         Bookmark : Swagger.Nullable_UString;
         Page_Size : Swagger.Nullable_Integer;
         Ad_Account_Id : Swagger.Nullable_UString;
         Result : .Models.CatalogsProductGroupsList200Response_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Catalogs_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Id := To_Integer_Vectors.Vector (Swagger.Servers.Get_Query_Parameter (Req, "id"));
         Feed_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "feed_id"));
         Catalog_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "catalog_id"));
         Bookmark := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "bookmark"));
         Page_Size := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "page_size"));
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "ad_account_id"));

         
         Server.Catalogs_Product_Groups_List
            (Id,
             Feed_Id,
             Catalog_Id,
             Bookmark,
             Page_Size,
             Ad_Account_Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid feed parameters.");
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Unauthorized access.");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Forbidden. Account not approved for catalog product group mutations yet.");
            return;
         end if;
         if Context.Get_Status = 404 then
            Context.Set_Description ("Data feed not found.");
            return;
         end if;
         if Context.Get_Status = 409 then
            Context.Set_Description ("Conflict. Can't create this catalogs product group with this value.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error.");
            return;
         end if;

      end Catalogs_Product_Groups_List;

      package API_Catalogs_Product_Groups_List is
         new Swagger.Servers.Operation
            (Handler => Catalogs_Product_Groups_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/catalogs/product_groups",
             Mimes   => Media_List_1'Access);


      --  Get product counts
      procedure Catalogs_Product_Groups_Product_Counts_Get
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Product_Group_Id : Swagger.UString;
         Ad_Account_Id : Swagger.Nullable_UString;
         Result : .Models.CatalogsProductGroupProductCountsVertical_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Catalogs_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "ad_account_id"));

         
         Product_Group_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Catalogs_Product_Groups_Product_Counts_Get
            (Product_Group_Id,
             Ad_Account_Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 404 then
            Context.Set_Description ("Product Group Not Found.");
            return;
         end if;
         if Context.Get_Status = 409 then
            Context.Set_Description ("Can't access this feature without an existing catalog.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error.");
            return;
         end if;

      end Catalogs_Product_Groups_Product_Counts_Get;

      package API_Catalogs_Product_Groups_Product_Counts_Get is
         new Swagger.Servers.Operation
            (Handler => Catalogs_Product_Groups_Product_Counts_Get,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/catalogs/product_groups/{product_group_id}/product_counts",
             Mimes   => Media_List_1'Access);


      --  Update single product group
      procedure Catalogs_Product_Groups_Update
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Product_Group_Id : Swagger.UString;
         Catalogs_Product_Groups_Update_Request_Type : CatalogsProductGroupsUpdateRequest_Type;
         Ad_Account_Id : Swagger.Nullable_UString;
         Result : .Models.CatalogsVerticalProductGroup_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Catalogs_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "ad_account_id"));

         
         Product_Group_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Swagger.Servers.Read (Req, Media_List_1, Input);
         
         .Models.Deserialize (Input, "CatalogsProductGroupsUpdateRequest_Type", Catalogs_Product_Groups_Update_Request_Type);
         Server.Catalogs_Product_Groups_Update
            (Product_Group_Id,
             Catalogs_Product_Groups_Update_Request_Type,
             Ad_Account_Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid parameters.");
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Unauthorized access.");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Forbidden. Account not approved for catalog product group mutations yet.");
            return;
         end if;
         if Context.Get_Status = 404 then
            Context.Set_Description ("Catalogs product group not found.");
            return;
         end if;
         if Context.Get_Status = 409 then
            Context.Set_Description ("Conflict. Can't update this catalogs product group to this value.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error.");
            return;
         end if;

      end Catalogs_Product_Groups_Update;

      package API_Catalogs_Product_Groups_Update is
         new Swagger.Servers.Operation
            (Handler => Catalogs_Product_Groups_Update,
             Method  => Swagger.Servers.PATCH,
             URI     => URI_Prefix & "/catalogs/product_groups/{product_group_id}",
             Mimes   => Media_List_1'Access);


      --  List feed processing results
      procedure Feed_Processing_Results_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Feed_Id : Swagger.UString;
         Bookmark : Swagger.Nullable_UString;
         Page_Size : Swagger.Nullable_Integer;
         Ad_Account_Id : Swagger.Nullable_UString;
         Result : .Models.FeedProcessingResultsList200Response_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Catalogs_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Bookmark := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "bookmark"));
         Page_Size := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "page_size"));
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "ad_account_id"));

         
         Feed_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Feed_Processing_Results_List
            (Feed_Id,
             Bookmark,
             Page_Size,
             Ad_Account_Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid parameters.");
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Unauthorized access.");
            return;
         end if;
         if Context.Get_Status = 404 then
            Context.Set_Description ("Feed not found.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error.");
            return;
         end if;

      end Feed_Processing_Results_List;

      package API_Feed_Processing_Results_List is
         new Swagger.Servers.Operation
            (Handler => Feed_Processing_Results_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/catalogs/feeds/{feed_id}/processing_results",
             Mimes   => Media_List_1'Access);


      --  Create feed
      procedure Feeds_Create
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Feeds_Create_Request_Type : FeedsCreateRequest_Type;
         Ad_Account_Id : Swagger.Nullable_UString;
         Result : .Models.CatalogsFeed_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Catalogs_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Catalogs_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Catalogs_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Catalogs_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "ad_account_id"));

         
         Swagger.Servers.Read (Req, Media_List_1, Input);
         
         .Models.Deserialize (Input, "FeedsCreateRequest_Type", Feeds_Create_Request_Type);
         Server.Feeds_Create
            (Feeds_Create_Request_Type,
             Ad_Account_Id, Result, Context);
         if Context.Get_Status = 201 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid feed parameters.");
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Unauthorized access.");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Business account required.");
            return;
         end if;
         if Context.Get_Status = 409 then
            Context.Set_Description ("User website required.");
            return;
         end if;
         if Context.Get_Status = 422 then
            Context.Set_Description ("Unique feed name is required.");
            return;
         end if;
         if Context.Get_Status = 501 then
            Context.Set_Description ("Not implemented (absent \"default_country\" or \"default_locale\").");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Feeds_Create;

      package API_Feeds_Create is
         new Swagger.Servers.Operation
            (Handler => Feeds_Create,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/catalogs/feeds",
             Mimes   => Media_List_1'Access);


      --  Delete feed
      procedure Feeds_Delete
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Feed_Id : Swagger.UString;
         Ad_Account_Id : Swagger.Nullable_UString;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Catalogs_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Catalogs_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Catalogs_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Catalogs_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "ad_account_id"));

         
         Feed_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Feeds_Delete
            (Feed_Id,
             Ad_Account_Id, Context);

      end Feeds_Delete;

      package API_Feeds_Delete is
         new Swagger.Servers.Operation
            (Handler => Feeds_Delete,
             Method  => Swagger.Servers.DELETE,
             URI     => URI_Prefix & "/catalogs/feeds/{feed_id}",
             Mimes   => Media_List_1'Access);


      --  Get feed
      procedure Feeds_Get
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Feed_Id : Swagger.UString;
         Ad_Account_Id : Swagger.Nullable_UString;
         Result : .Models.CatalogsFeed_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Catalogs_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Catalogs_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "ad_account_id"));

         
         Feed_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Feeds_Get
            (Feed_Id,
             Ad_Account_Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid feed parameters.");
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Unauthorized access.");
            return;
         end if;
         if Context.Get_Status = 404 then
            Context.Set_Description ("Data feed not found.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error.");
            return;
         end if;

      end Feeds_Get;

      package API_Feeds_Get is
         new Swagger.Servers.Operation
            (Handler => Feeds_Get,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/catalogs/feeds/{feed_id}",
             Mimes   => Media_List_1'Access);


      --  Ingest feed items
      procedure Feeds_Ingest
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Feed_Id : Swagger.UString;
         Ad_Account_Id : Swagger.Nullable_UString;
         Result : .Models.CatalogsFeedIngestion_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Catalogs_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "ad_account_id"));

         
         Feed_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Feeds_Ingest
            (Feed_Id,
             Ad_Account_Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("The ingestion process was successfully started.");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid feed parameters.");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Forbidden. Account not approved for feed mutations yet.");
            return;
         end if;
         if Context.Get_Status = 404 then
            Context.Set_Description ("Data feed not found.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Feeds_Ingest;

      package API_Feeds_Ingest is
         new Swagger.Servers.Operation
            (Handler => Feeds_Ingest,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/catalogs/feeds/{feed_id}/ingest",
             Mimes   => Media_List_1'Access);


      --  List feeds
      procedure Feeds_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Bookmark : Swagger.Nullable_UString;
         Page_Size : Swagger.Nullable_Integer;
         Catalog_Id : Swagger.Nullable_UString;
         Ad_Account_Id : Swagger.Nullable_UString;
         Result : .Models.FeedsList200Response_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Catalogs_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Catalogs_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Bookmark := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "bookmark"));
         Page_Size := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "page_size"));
         Catalog_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "catalog_id"));
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "ad_account_id"));

         
         Server.Feeds_List
            (Bookmark,
             Page_Size,
             Catalog_Id,
             Ad_Account_Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid parameters.");
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Unauthorized access.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error.");
            return;
         end if;

      end Feeds_List;

      package API_Feeds_List is
         new Swagger.Servers.Operation
            (Handler => Feeds_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/catalogs/feeds",
             Mimes   => Media_List_1'Access);


      --  Update feed
      procedure Feeds_Update
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Feed_Id : Swagger.UString;
         Feeds_Update_Request_Type : FeedsUpdateRequest_Type;
         Ad_Account_Id : Swagger.Nullable_UString;
         Result : .Models.CatalogsFeed_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Catalogs_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Catalogs_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Catalogs_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Catalogs_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "ad_account_id"));

         
         Feed_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Swagger.Servers.Read (Req, Media_List_1, Input);
         
         .Models.Deserialize (Input, "FeedsUpdateRequest_Type", Feeds_Update_Request_Type);
         Server.Feeds_Update
            (Feed_Id,
             Feeds_Update_Request_Type,
             Ad_Account_Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid feed parameters.");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Forbidden. Account not approved for feed mutations yet.");
            return;
         end if;
         if Context.Get_Status = 404 then
            Context.Set_Description ("Data feed not found.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Feeds_Update;

      package API_Feeds_Update is
         new Swagger.Servers.Operation
            (Handler => Feeds_Update,
             Method  => Swagger.Servers.PATCH,
             URI     => URI_Prefix & "/catalogs/feeds/{feed_id}",
             Mimes   => Media_List_1'Access);


      --  Get item batch status
      procedure Items_Batch_Get
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Batch_Id : Swagger.UString;
         Ad_Account_Id : Swagger.Nullable_UString;
         Result : .Models.CatalogsItemsBatch_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Catalogs_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Catalogs_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "ad_account_id"));

         
         Batch_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Items_Batch_Get
            (Batch_Id,
             Ad_Account_Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Response containing the requested catalogs items batch");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Not authenticated to access catalogs items batch");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Not authorized to access catalogs items batch");
            return;
         end if;
         if Context.Get_Status = 404 then
            Context.Set_Description ("Catalogs items batch not found");
            return;
         end if;
         if Context.Get_Status = 405 then
            Context.Set_Description ("Method Not Allowed.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Items_Batch_Get;

      package API_Items_Batch_Get is
         new Swagger.Servers.Operation
            (Handler => Items_Batch_Get,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/catalogs/items/batch/{batch_id}",
             Mimes   => Media_List_1'Access);


      --  Operate on item batch
      procedure Items_Batch_Post
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Items_Batch_Post_Request_Type : ItemsBatchPostRequest_Type;
         Ad_Account_Id : Swagger.Nullable_UString;
         Result : .Models.CatalogsItemsBatch_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Catalogs_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Catalogs_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Catalogs_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Catalogs_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "ad_account_id"));

         
         Swagger.Servers.Read (Req, Media_List_1, Input);
         
         .Models.Deserialize (Input, "ItemsBatchPostRequest_Type", Items_Batch_Post_Request_Type);
         Server.Items_Batch_Post
            (Items_Batch_Post_Request_Type,
             Ad_Account_Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Response containing the requested catalogs items batch");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid request parameters.");
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Not authenticated to post catalogs items");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Not authorized to post catalogs items");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Items_Batch_Post;

      package API_Items_Batch_Post is
         new Swagger.Servers.Operation
            (Handler => Items_Batch_Post,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/catalogs/items/batch",
             Mimes   => Media_List_1'Access);


      --  Get catalogs items
      procedure Items_Get
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Country : Swagger.UString;
         Language : Swagger.UString;
         Ad_Account_Id : Swagger.Nullable_UString;
         Item_Ids : Swagger.UString_Vectors.Vector;
         Filters : CatalogsItemsFilters_Type;
         Result : .Models.CatalogsItems_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Catalogs_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "ad_account_id"));
         Country := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "country"));
         Language := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "language"));
         Item_Ids := To_Swagger.UString_Vectors.Vector (Swagger.Servers.Get_Query_Parameter (Req, "item_ids"));
         Filters := To_CatalogsItemsFilters_Type (Swagger.Servers.Get_Query_Parameter (Req, "filters"));

         
         Server.Items_Get
            (Country,
             Language,
             Ad_Account_Id,
             Item_Ids,
             Filters, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Response containing the requested catalogs items");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid request parameters.");
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Not authorized to access catalogs items");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Not authorized to access catalogs items");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Items_Get;

      package API_Items_Get is
         new Swagger.Servers.Operation
            (Handler => Items_Get,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/catalogs/items",
             Mimes   => Media_List_1'Access);


      --  List item issues
      procedure Items_Issues_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Processing_Result_Id : Swagger.UString;
         Bookmark : Swagger.Nullable_UString;
         Page_Size : Swagger.Nullable_Integer;
         Item_Numbers : Integer_Vectors.Vector;
         Item_Validation_Issue : CatalogsItemValidationIssue_Type;
         Ad_Account_Id : Swagger.Nullable_UString;
         Result : .Models.ItemsIssuesList200Response_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Catalogs_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Bookmark := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "bookmark"));
         Page_Size := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "page_size"));
         Item_Numbers := To_Integer_Vectors.Vector (Swagger.Servers.Get_Query_Parameter (Req, "item_numbers"));
         Item_Validation_Issue := To_CatalogsItemValidationIssue_Type (Swagger.Servers.Get_Query_Parameter (Req, "item_validation_issue"));
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "ad_account_id"));

         
         Processing_Result_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Items_Issues_List
            (Processing_Result_Id,
             Bookmark,
             Page_Size,
             Item_Numbers,
             Item_Validation_Issue,
             Ad_Account_Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Unauthorized access.");
            return;
         end if;
         if Context.Get_Status = 404 then
            Context.Set_Description ("Processing Result not found.");
            return;
         end if;
         if Context.Get_Status = 501 then
            Context.Set_Description ("Not implemented.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error.");
            return;
         end if;

      end Items_Issues_List;

      package API_Items_Issues_List is
         new Swagger.Servers.Operation
            (Handler => Items_Issues_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/catalogs/processing_results/{processing_result_id}/item_issues",
             Mimes   => Media_List_1'Access);


      --  Get catalogs items (POST)
      procedure Items_Post
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Catalogs_Items_Request_Type : CatalogsItemsRequest_Type;
         Ad_Account_Id : Swagger.Nullable_UString;
         Result : .Models.CatalogsItems_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Catalogs_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "ad_account_id"));

         
         Swagger.Servers.Read (Req, Media_List_1, Input);
         
         .Models.Deserialize (Input, "CatalogsItemsRequest_Type", Catalogs_Items_Request_Type);
         Server.Items_Post
            (Catalogs_Items_Request_Type,
             Ad_Account_Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Response containing the requested catalogs items");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid request");
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Not authorized to access catalogs items");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Not authorized to access catalogs items");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Items_Post;

      package API_Items_Post is
         new Swagger.Servers.Operation
            (Handler => Items_Post,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/catalogs/items",
             Mimes   => Media_List_1'Access);


      --  List products by filter
      procedure Products_By_Product_Group_Filter_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Catalogs_List_Products_By_Filter_Request_Type : CatalogsListProductsByFilterRequest_Type;
         Bookmark : Swagger.Nullable_UString;
         Page_Size : Swagger.Nullable_Integer;
         Ad_Account_Id : Swagger.Nullable_UString;
         Pin_Metrics : Swagger.Nullable_Boolean;
         Result : .Models.CatalogsProductGroupPinsList200Response_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Catalogs_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Pins_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Bookmark := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "bookmark"));
         Page_Size := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "page_size"));
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "ad_account_id"));
         Pin_Metrics := To_Boolean (Swagger.Servers.Get_Query_Parameter (Req, "pin_metrics"));

         
         Swagger.Servers.Read (Req, Media_List_1, Input);
         
         .Models.Deserialize (Input, "CatalogsListProductsByFilterRequest_Type", Catalogs_List_Products_By_Filter_Request_Type);
         Server.Products_By_Product_Group_Filter_List
            (Catalogs_List_Products_By_Filter_Request_Type,
             Bookmark,
             Page_Size,
             Ad_Account_Id,
             Pin_Metrics, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Unauthorized access.");
            return;
         end if;
         if Context.Get_Status = 409 then
            Context.Set_Description ("Conflict. Can't get products.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error.");
            return;
         end if;

      end Products_By_Product_Group_Filter_List;

      package API_Products_By_Product_Group_Filter_List is
         new Swagger.Servers.Operation
            (Handler => Products_By_Product_Group_Filter_List,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/catalogs/products/get_by_product_group_filters",
             Mimes   => Media_List_1'Access);


      --  Build catalogs report
      procedure Reports_Create
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Catalogs_Report_Parameters_Type : CatalogsReportParameters_Type;
         Ad_Account_Id : Swagger.Nullable_UString;
         Result : .Models.CatalogsCreateReportResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Catalogs_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "ad_account_id"));

         
         Swagger.Servers.Read (Req, Media_List_1, Input);
         
         .Models.Deserialize (Input, "CatalogsReportParameters_Type", Catalogs_Report_Parameters_Type);
         Server.Reports_Create
            (Catalogs_Report_Parameters_Type,
             Ad_Account_Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Response containing the report token");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 404 then
            Context.Set_Description ("Entity (e.g., catalog, feed or processing_result) not found");
            return;
         end if;
         if Context.Get_Status = 409 then
            Context.Set_Description ("Can't access this feature without an existing catalog.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Reports_Create;

      package API_Reports_Create is
         new Swagger.Servers.Operation
            (Handler => Reports_Create,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/catalogs/reports",
             Mimes   => Media_List_1'Access);


      --  Get catalogs report
      procedure Reports_Get
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Token : Swagger.UString;
         Ad_Account_Id : Swagger.Nullable_UString;
         Result : .Models.CatalogsReport_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Catalogs_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "ad_account_id"));
         Token := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "token"));

         
         Server.Reports_Get
            (Token,
             Ad_Account_Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Response that contains a link to download the report");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("The token you provided is not valid or has expired.");
            return;
         end if;
         if Context.Get_Status = 409 then
            Context.Set_Description ("Can't access this feature without an existing catalog.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Reports_Get;

      package API_Reports_Get is
         new Swagger.Servers.Operation
            (Handler => Reports_Get,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/catalogs/reports",
             Mimes   => Media_List_1'Access);


      --  List report stats
      procedure Reports_Stats
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Parameters : CatalogsReportParameters_Type;
         Ad_Account_Id : Swagger.Nullable_UString;
         Page_Size : Swagger.Nullable_Integer;
         Bookmark : Swagger.Nullable_UString;
         Result : .Models.ReportsStats200Response_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Catalogs_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "ad_account_id"));
         Page_Size := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "page_size"));
         Bookmark := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "bookmark"));
         Parameters := To_CatalogsReportParameters_Type (Swagger.Servers.Get_Query_Parameter (Req, "parameters"));

         
         Server.Reports_Stats
            (Parameters,
             Ad_Account_Id,
             Page_Size,
             Bookmark, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Response containing the diagnostics aggregated counters");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Not authorized to access catalogs");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Reports_Stats;

      package API_Reports_Stats is
         new Swagger.Servers.Operation
            (Handler => Reports_Stats,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/catalogs/reports/stats",
             Mimes   => Media_List_1'Access);


      --  Send conversions
      procedure Events_Create
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Ad_Account_Id : Swagger.UString;
         Conversion_Events_Type : ConversionEvents_Type;
         Test : Swagger.Nullable_Boolean;
         Result : .Models.ConversionApiResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         Test := To_Boolean (Swagger.Servers.Get_Query_Parameter (Req, "test"));

         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Swagger.Servers.Read (Req, Media_List_1, Input);
         
         .Models.Deserialize (Input, "ConversionEvents_Type", Conversion_Events_Type);
         Server.Events_Create
            (Ad_Account_Id,
             Conversion_Events_Type,
             Test, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("The request was invalid.");
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Not authorized to send conversion events");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Unauthorized access.");
            return;
         end if;
         if Context.Get_Status = 422 then
            Context.Set_Description ("Not all events were successfully processed.");
            return;
         end if;
         if Context.Get_Status = 429 then
            Context.Set_Description ("This request exceeded a rate limit. This can happen if the client exceeds one of the published rate limits within a short time window.");
            return;
         end if;
         if Context.Get_Status = 503 then
            Context.Set_Description ("The endpoint has been ramped down and is currently not accepting any traffic.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected errors");
            return;
         end if;

      end Events_Create;

      package API_Events_Create is
         new Swagger.Servers.Operation
            (Handler => Events_Create,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/events",
             Mimes   => Media_List_1'Access);


      --  Create conversion tag
      procedure Conversion_Tags_Create
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Ad_Account_Id : Swagger.UString;
         Conversion_Tag_Create_Type : ConversionTagCreate_Type;
         Result : .Models.ConversionTagResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;

         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Swagger.Servers.Read (Req, Media_List_1, Input);
         
         .Models.Deserialize (Input, "ConversionTagCreate_Type", Conversion_Tag_Create_Type);
         Server.Conversion_Tags_Create
            (Ad_Account_Id,
             Conversion_Tag_Create_Type, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Conversion_Tags_Create;

      package API_Conversion_Tags_Create is
         new Swagger.Servers.Operation
            (Handler => Conversion_Tags_Create,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/conversion_tags",
             Mimes   => Media_List_1'Access);


      --  Get conversion tag
      procedure Conversion_Tags_Get
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Ad_Account_Id : Swagger.UString;
         Conversion_Tag_Id : Swagger.UString;
         Result : .Models.ConversionTagResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;

         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Conversion_Tag_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 2));

         Server.Conversion_Tags_Get
            (Ad_Account_Id,
             Conversion_Tag_Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Conversion_Tags_Get;

      package API_Conversion_Tags_Get is
         new Swagger.Servers.Operation
            (Handler => Conversion_Tags_Get,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/conversion_tags/{conversion_tag_id}",
             Mimes   => Media_List_1'Access);


      --  Get conversion tags
      procedure Conversion_Tags_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Ad_Account_Id : Swagger.UString;
         Filter_Deleted : Swagger.Nullable_Boolean;
         Result : .Models.ConversionTagListResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Filter_Deleted := To_Boolean (Swagger.Servers.Get_Query_Parameter (Req, "filter_deleted"));

         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Conversion_Tags_List
            (Ad_Account_Id,
             Filter_Deleted, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Conversion_Tags_List;

      package API_Conversion_Tags_List is
         new Swagger.Servers.Operation
            (Handler => Conversion_Tags_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/conversion_tags",
             Mimes   => Media_List_1'Access);


      --  Get Ocpm eligible conversion tags
      procedure Ocpm_Eligible_Conversion_Tags_Get
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Ad_Account_Id : Swagger.UString;
         Result : Swagger..Models.ConversionEventResponse_Type_Vectors.Vector_Map;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;

         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Ocpm_Eligible_Conversion_Tags_Get
            (Ad_Account_Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected errors");
            return;
         end if;

      end Ocpm_Eligible_Conversion_Tags_Get;

      package API_Ocpm_Eligible_Conversion_Tags_Get is
         new Swagger.Servers.Operation
            (Handler => Ocpm_Eligible_Conversion_Tags_Get,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/conversion_tags/ocpm_eligible",
             Mimes   => Media_List_1'Access);


      --  Get page visit conversion tags
      procedure Page_Visit_Conversion_Tags_Get
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Ad_Account_Id : Swagger.UString;
         Page_Size : Swagger.Nullable_Integer;
         Order : Swagger.Nullable_UString;
         Bookmark : Swagger.Nullable_UString;
         Result : .Models.PageVisitConversionTagsGet200Response_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Page_Size := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "page_size"));
         Order := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "order"));
         Bookmark := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "bookmark"));

         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Page_Visit_Conversion_Tags_Get
            (Ad_Account_Id,
             Page_Size,
             Order,
             Bookmark, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Page_Visit_Conversion_Tags_Get;

      package API_Page_Visit_Conversion_Tags_Get is
         new Swagger.Servers.Operation
            (Handler => Page_Visit_Conversion_Tags_Get,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/conversion_tags/page_visit",
             Mimes   => Media_List_1'Access);


      --  Create customer lists
      procedure Customer_Lists_Create
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Ad_Account_Id : Swagger.UString;
         Customer_List_Request_Type : CustomerListRequest_Type;
         Result : .Models.CustomerList_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;

         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Swagger.Servers.Read (Req, Media_List_1, Input);
         
         .Models.Deserialize (Input, "CustomerListRequest_Type", Customer_List_Request_Type);
         Server.Customer_Lists_Create
            (Ad_Account_Id,
             Customer_List_Request_Type, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Customer_Lists_Create;

      package API_Customer_Lists_Create is
         new Swagger.Servers.Operation
            (Handler => Customer_Lists_Create,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/customer_lists",
             Mimes   => Media_List_1'Access);


      --  Get customer list
      procedure Customer_Lists_Get
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Ad_Account_Id : Swagger.UString;
         Customer_List_Id : Swagger.UString;
         Result : .Models.CustomerList_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;

         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Customer_List_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 2));

         Server.Customer_Lists_Get
            (Ad_Account_Id,
             Customer_List_Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Customer_Lists_Get;

      package API_Customer_Lists_Get is
         new Swagger.Servers.Operation
            (Handler => Customer_Lists_Get,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/customer_lists/{customer_list_id}",
             Mimes   => Media_List_1'Access);


      --  Get customer lists
      procedure Customer_Lists_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Ad_Account_Id : Swagger.UString;
         Page_Size : Swagger.Nullable_Integer;
         Order : Swagger.Nullable_UString;
         Bookmark : Swagger.Nullable_UString;
         Result : .Models.CustomerListsList200Response_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Page_Size := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "page_size"));
         Order := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "order"));
         Bookmark := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "bookmark"));

         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Customer_Lists_List
            (Ad_Account_Id,
             Page_Size,
             Order,
             Bookmark, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Customer_Lists_List;

      package API_Customer_Lists_List is
         new Swagger.Servers.Operation
            (Handler => Customer_Lists_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/customer_lists",
             Mimes   => Media_List_1'Access);


      --  Update customer list
      procedure Customer_Lists_Update
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Ad_Account_Id : Swagger.UString;
         Customer_List_Id : Swagger.UString;
         Customer_List_Update_Request_Type : CustomerListUpdateRequest_Type;
         Result : .Models.CustomerList_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;

         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Customer_List_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 2));

         Swagger.Servers.Read (Req, Media_List_1, Input);
         
         .Models.Deserialize (Input, "CustomerListUpdateRequest_Type", Customer_List_Update_Request_Type);
         Server.Customer_Lists_Update
            (Ad_Account_Id,
             Customer_List_Id,
             Customer_List_Update_Request_Type, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Customer_Lists_Update;

      package API_Customer_Lists_Update is
         new Swagger.Servers.Operation
            (Handler => Customer_Lists_Update,
             Method  => Swagger.Servers.PATCH,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/customer_lists/{customer_list_id}",
             Mimes   => Media_List_1'Access);


      --  Delete commerce integration
      procedure Integrations_Commerce_Del
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         External_Business_Id : Swagger.UString;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;

         
         External_Business_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Integrations_Commerce_Del
            (External_Business_Id, Context);

      end Integrations_Commerce_Del;

      package API_Integrations_Commerce_Del is
         new Swagger.Servers.Operation
            (Handler => Integrations_Commerce_Del,
             Method  => Swagger.Servers.DELETE,
             URI     => URI_Prefix & "/integrations/commerce/{external_business_id}",
             Mimes   => Media_List_1'Access);


      --  Get commerce integration
      procedure Integrations_Commerce_Get
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         External_Business_Id : Swagger.UString;
         Result : .Models.IntegrationMetadata_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;

         
         External_Business_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Integrations_Commerce_Get
            (External_Business_Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 404 then
            Context.Set_Description ("Integration not found.");
            return;
         end if;
         if Context.Get_Status = 409 then
            Context.Set_Description ("Can't access this integration metadata.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error.");
            return;
         end if;

      end Integrations_Commerce_Get;

      package API_Integrations_Commerce_Get is
         new Swagger.Servers.Operation
            (Handler => Integrations_Commerce_Get,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/integrations/commerce/{external_business_id}",
             Mimes   => Media_List_1'Access);


      --  Update commerce integration
      procedure Integrations_Commerce_Patch
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         External_Business_Id : Swagger.UString;
         Integration_Request_Patch_Type : IntegrationRequestPatch_Type;
         Result : .Models.IntegrationMetadata_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;

         
         External_Business_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Swagger.Servers.Read (Req, Media_List_1, Input);
         
         .Models.Deserialize (Input, "IntegrationRequestPatch_Type", Integration_Request_Patch_Type);
         Server.Integrations_Commerce_Patch
            (External_Business_Id,
             Integration_Request_Patch_Type, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 404 then
            Context.Set_Description ("Integration not found.");
            return;
         end if;
         if Context.Get_Status = 409 then
            Context.Set_Description ("Can't access this integration metadata.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error.");
            return;
         end if;

      end Integrations_Commerce_Patch;

      package API_Integrations_Commerce_Patch is
         new Swagger.Servers.Operation
            (Handler => Integrations_Commerce_Patch,
             Method  => Swagger.Servers.PATCH,
             URI     => URI_Prefix & "/integrations/commerce/{external_business_id}",
             Mimes   => Media_List_1'Access);


      --  Create commerce integration
      procedure Integrations_Commerce_Post
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Integration_Request_Type : IntegrationRequest_Type;
         Result : .Models.IntegrationMetadata_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;

         
         Swagger.Servers.Read (Req, Media_List_1, Input);
         
         .Models.Deserialize (Input, "IntegrationRequest_Type", Integration_Request_Type);
         Server.Integrations_Commerce_Post
            (Integration_Request_Type, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 404 then
            Context.Set_Description ("Integration not found.");
            return;
         end if;
         if Context.Get_Status = 409 then
            Context.Set_Description ("Can't access this integration metadata.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error.");
            return;
         end if;

      end Integrations_Commerce_Post;

      package API_Integrations_Commerce_Post is
         new Swagger.Servers.Operation
            (Handler => Integrations_Commerce_Post,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/integrations/commerce",
             Mimes   => Media_List_1'Access);


      --  Get integration metadata
      procedure Integrations_Get_By_Id
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Id : Swagger.UString;
         Result : .Models.IntegrationRecord_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;

         
         Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Integrations_Get_By_Id
            (Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 404 then
            Context.Set_Description ("Integration not found.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error.");
            return;
         end if;

      end Integrations_Get_By_Id;

      package API_Integrations_Get_By_Id is
         new Swagger.Servers.Operation
            (Handler => Integrations_Get_By_Id,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/integrations/{id}",
             Mimes   => Media_List_1'Access);


      --  Get integration metadata list
      procedure Integrations_Get_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Bookmark : Swagger.Nullable_UString;
         Page_Size : Swagger.Nullable_Integer;
         Result : .Models.IntegrationsGetList200Response_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Bookmark := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "bookmark"));
         Page_Size := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "page_size"));

         
         Server.Integrations_Get_List
            (Bookmark,
             Page_Size, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error.");
            return;
         end if;

      end Integrations_Get_List;

      package API_Integrations_Get_List is
         new Swagger.Servers.Operation
            (Handler => Integrations_Get_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/integrations",
             Mimes   => Media_List_1'Access);


      --  Receives batched logs from integration applications.
      procedure Integrations_Logs_Post
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Integration_Logs_Request_Type : IntegrationLogsRequest_Type;
         Result : .Models.IntegrationLogsSuccessResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;

         
         Swagger.Servers.Read (Req, Media_List_1, Input);
         
         .Models.Deserialize (Input, "IntegrationLogsRequest_Type", Integration_Logs_Request_Type);
         Server.Integrations_Logs_Post
            (Integration_Logs_Request_Type, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success.");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Bad request.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Integrations_Logs_Post;

      package API_Integrations_Logs_Post is
         new Swagger.Servers.Operation
            (Handler => Integrations_Logs_Post,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/integrations/logs",
             Mimes   => Media_List_1'Access);


      --  Get country's keyword metrics
      procedure Country_Keywords_Metrics_Get
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Ad_Account_Id : Swagger.UString;
         Country_Code : Swagger.UString;
         Keywords : Swagger.UString_Vectors.Vector;
         Result : .Models.KeywordsMetricsArrayResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Country_Code := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "country_code"));
         Keywords := To_Swagger.UString_Vectors.Vector (Swagger.Servers.Get_Query_Parameter (Req, "keywords"));

         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Country_Keywords_Metrics_Get
            (Ad_Account_Id,
             Country_Code,
             Keywords, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Country_Keywords_Metrics_Get;

      package API_Country_Keywords_Metrics_Get is
         new Swagger.Servers.Operation
            (Handler => Country_Keywords_Metrics_Get,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/keywords/metrics",
             Mimes   => Media_List_1'Access);


      --  Create keywords
      procedure Keywords_Create
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Ad_Account_Id : Swagger.UString;
         Keywords_Request_Type : KeywordsRequest_Type;
         Result : .Models.KeywordsResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;

         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Swagger.Servers.Read (Req, Media_List_1, Input);
         
         .Models.Deserialize (Input, "KeywordsRequest_Type", Keywords_Request_Type);
         Server.Keywords_Create
            (Ad_Account_Id,
             Keywords_Request_Type, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Keywords_Create;

      package API_Keywords_Create is
         new Swagger.Servers.Operation
            (Handler => Keywords_Create,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/keywords",
             Mimes   => Media_List_1'Access);


      --  Get keywords
      procedure Keywords_Get
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Ad_Account_Id : Swagger.UString;
         Campaign_Id : Swagger.Nullable_UString;
         Ad_Group_Id : Swagger.Nullable_UString;
         Match_Types : .Models.MatchType_Type_Vectors.Vector;
         Page_Size : Swagger.Nullable_Integer;
         Bookmark : Swagger.Nullable_UString;
         Result : .Models.KeywordsGet200Response_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Campaign_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "campaign_id"));
         Ad_Group_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "ad_group_id"));
         Match_Types := To_.Models.MatchType_Type_Vectors.Vector (Swagger.Servers.Get_Query_Parameter (Req, "match_types"));
         Page_Size := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "page_size"));
         Bookmark := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "bookmark"));

         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Keywords_Get
            (Ad_Account_Id,
             Campaign_Id,
             Ad_Group_Id,
             Match_Types,
             Page_Size,
             Bookmark, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Keywords_Get;

      package API_Keywords_Get is
         new Swagger.Servers.Operation
            (Handler => Keywords_Get,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/keywords",
             Mimes   => Media_List_1'Access);


      --  Update keywords
      procedure Keywords_Update
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Ad_Account_Id : Swagger.UString;
         Keyword_Update_Body_Type : KeywordUpdateBody_Type;
         Result : .Models.KeywordsResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;

         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Swagger.Servers.Read (Req, Media_List_1, Input);
         
         .Models.Deserialize (Input, "KeywordUpdateBody_Type", Keyword_Update_Body_Type);
         Server.Keywords_Update
            (Ad_Account_Id,
             Keyword_Update_Body_Type, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Keywords_Update;

      package API_Keywords_Update is
         new Swagger.Servers.Operation
            (Handler => Keywords_Update,
             Method  => Swagger.Servers.PATCH,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/keywords",
             Mimes   => Media_List_1'Access);


      --  List trending keywords
      procedure Trending_Keywords_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Region : TrendsSupportedRegion_Type;
         Trend_Type : TrendType_Type;
         Interests : Swagger.UString_Vectors.Vector;
         Genders : Swagger.UString_Vectors.Vector;
         Ages : Swagger.UString_Vectors.Vector;
         Include_Keywords : Swagger.UString_Vectors.Vector;
         Normalize_Against_Group : Swagger.Nullable_Boolean;
         Limit : Swagger.Nullable_Integer;
         Result : .Models.TrendingKeywordsResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_User_Accounts_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Interests := To_Swagger.UString_Vectors.Vector (Swagger.Servers.Get_Query_Parameter (Req, "interests"));
         Genders := To_Swagger.UString_Vectors.Vector (Swagger.Servers.Get_Query_Parameter (Req, "genders"));
         Ages := To_Swagger.UString_Vectors.Vector (Swagger.Servers.Get_Query_Parameter (Req, "ages"));
         Include_Keywords := To_Swagger.UString_Vectors.Vector (Swagger.Servers.Get_Query_Parameter (Req, "include_keywords"));
         Normalize_Against_Group := To_Boolean (Swagger.Servers.Get_Query_Parameter (Req, "normalize_against_group"));
         Limit := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "limit"));

         
         Region := To_TrendsSupportedRegion_Type (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Trend_Type := To_TrendType_Type (Swagger.Servers.Get_Path_Parameter (Req, 2));

         Server.Trending_Keywords_List
            (Region,
             Trend_Type,
             Interests,
             Genders,
             Ages,
             Include_Keywords,
             Normalize_Against_Group,
             Limit, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid trending keywords request parameters");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Trending_Keywords_List;

      package API_Trending_Keywords_List is
         new Swagger.Servers.Operation
            (Handler => Trending_Keywords_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/trends/keywords/{region}/top/{trend_type}",
             Mimes   => Media_List_1'Access);


      --  Delete lead ads subscription
      procedure Ad_Accounts_Subscriptions_Del_By_Id
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Ad_Account_Id : Swagger.UString;
         Subscription_Id : Swagger.UString;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;

         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Subscription_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 2));

         Server.Ad_Accounts_Subscriptions_Del_By_Id
            (Ad_Account_Id,
             Subscription_Id, Context);

      end Ad_Accounts_Subscriptions_Del_By_Id;

      package API_Ad_Accounts_Subscriptions_Del_By_Id is
         new Swagger.Servers.Operation
            (Handler => Ad_Accounts_Subscriptions_Del_By_Id,
             Method  => Swagger.Servers.DELETE,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/leads/subscriptions/{subscription_id}",
             Mimes   => Media_List_1'Access);


      --  Get lead ads subscription
      procedure Ad_Accounts_Subscriptions_Get_By_Id
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Ad_Account_Id : Swagger.UString;
         Subscription_Id : Swagger.UString;
         Result : .Models.AdAccountGetSubscriptionResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;

         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Subscription_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 2));

         Server.Ad_Accounts_Subscriptions_Get_By_Id
            (Ad_Account_Id,
             Subscription_Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid input parameters.");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Can't access this subscription.");
            return;
         end if;
         if Context.Get_Status = 404 then
            Context.Set_Description ("Subscription not found.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error.");
            return;
         end if;

      end Ad_Accounts_Subscriptions_Get_By_Id;

      package API_Ad_Accounts_Subscriptions_Get_By_Id is
         new Swagger.Servers.Operation
            (Handler => Ad_Accounts_Subscriptions_Get_By_Id,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/leads/subscriptions/{subscription_id}",
             Mimes   => Media_List_1'Access);


      --  Get lead ads subscriptions
      procedure Ad_Accounts_Subscriptions_Get_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Ad_Account_Id : Swagger.UString;
         Page_Size : Swagger.Nullable_Integer;
         Bookmark : Swagger.Nullable_UString;
         Result : .Models.AdAccountsSubscriptionsGetList200Response_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Page_Size := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "page_size"));
         Bookmark := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "bookmark"));

         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Ad_Accounts_Subscriptions_Get_List
            (Ad_Account_Id,
             Page_Size,
             Bookmark, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Can't access this subscription.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error.");
            return;
         end if;

      end Ad_Accounts_Subscriptions_Get_List;

      package API_Ad_Accounts_Subscriptions_Get_List is
         new Swagger.Servers.Operation
            (Handler => Ad_Accounts_Subscriptions_Get_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/leads/subscriptions",
             Mimes   => Media_List_1'Access);


      --  Create lead ads subscription
      procedure Ad_Accounts_Subscriptions_Post
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Ad_Account_Id : Swagger.UString;
         Ad_Account_Create_Subscription_Request_Type : AdAccountCreateSubscriptionRequest_Type;
         Result : .Models.AdAccountCreateSubscriptionResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;

         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Swagger.Servers.Read (Req, Media_List_1, Input);
         
         .Models.Deserialize (Input, "AdAccountCreateSubscriptionRequest_Type", Ad_Account_Create_Subscription_Request_Type);
         Server.Ad_Accounts_Subscriptions_Post
            (Ad_Account_Id,
             Ad_Account_Create_Subscription_Request_Type, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid input parameters.");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Can't access this subscription.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error.");
            return;
         end if;

      end Ad_Accounts_Subscriptions_Post;

      package API_Ad_Accounts_Subscriptions_Post is
         new Swagger.Servers.Operation
            (Handler => Ad_Accounts_Subscriptions_Post,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/leads/subscriptions",
             Mimes   => Media_List_1'Access);


      --  Get lead form by id
      procedure Lead_Form_Get
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Ad_Account_Id : Swagger.UString;
         Lead_Form_Id : Swagger.UString;
         Result : .Models.LeadFormResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;

         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Lead_Form_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 2));

         Server.Lead_Form_Get
            (Ad_Account_Id,
             Lead_Form_Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid ad account lead forms parameters.");
            return;
         end if;
         if Context.Get_Status = 404 then
            Context.Set_Description ("The lead form ID for the given ad account ID does not exist.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Lead_Form_Get;

      package API_Lead_Form_Get is
         new Swagger.Servers.Operation
            (Handler => Lead_Form_Get,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/lead_forms/{lead_form_id}",
             Mimes   => Media_List_1'Access);


      --  Create lead form test data
      procedure Lead_Form_Test_Create
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Ad_Account_Id : Swagger.UString;
         Lead_Form_Id : Swagger.UString;
         Lead_Form_Test_Request_Type : LeadFormTestRequest_Type;
         Result : .Models.LeadFormTestResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;

         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Lead_Form_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 2));

         Swagger.Servers.Read (Req, Media_List_1, Input);
         
         .Models.Deserialize (Input, "LeadFormTestRequest_Type", Lead_Form_Test_Request_Type);
         Server.Lead_Form_Test_Create
            (Ad_Account_Id,
             Lead_Form_Id,
             Lead_Form_Test_Request_Type, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid parameters.");
            return;
         end if;
         if Context.Get_Status = 404 then
            Context.Set_Description ("Lead not found.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Lead_Form_Test_Create;

      package API_Lead_Form_Test_Create is
         new Swagger.Servers.Operation
            (Handler => Lead_Form_Test_Create,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/lead_forms/{lead_form_id}/test",
             Mimes   => Media_List_1'Access);


      --  Create lead forms
      procedure Lead_Forms_Create
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Ad_Account_Id : Swagger.UString;
         Lead_Form_Create_Request : .Models.LeadFormCreateRequest_Type_Vectors.Vector;
         Result : .Models.LeadFormArrayResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;

         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Swagger.Servers.Read (Req, Media_List_1, Input);
         
         .Models.Deserialize (Input, "LeadFormCreateRequest", Lead_Form_Create_Request);
         Server.Lead_Forms_Create
            (Ad_Account_Id,
             Lead_Form_Create_Request, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid ad account lead forms parameters.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Lead_Forms_Create;

      package API_Lead_Forms_Create is
         new Swagger.Servers.Operation
            (Handler => Lead_Forms_Create,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/lead_forms",
             Mimes   => Media_List_1'Access);


      --  List lead forms
      procedure Lead_Forms_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Ad_Account_Id : Swagger.UString;
         Page_Size : Swagger.Nullable_Integer;
         Order : Swagger.Nullable_UString;
         Bookmark : Swagger.Nullable_UString;
         Result : .Models.LeadFormsList200Response_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Page_Size := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "page_size"));
         Order := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "order"));
         Bookmark := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "bookmark"));

         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Lead_Forms_List
            (Ad_Account_Id,
             Page_Size,
             Order,
             Bookmark, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid ad account lead forms parameters.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Lead_Forms_List;

      package API_Lead_Forms_List is
         new Swagger.Servers.Operation
            (Handler => Lead_Forms_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/lead_forms",
             Mimes   => Media_List_1'Access);


      --  Update lead forms
      procedure Lead_Forms_Update
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Ad_Account_Id : Swagger.UString;
         Lead_Form_Update_Request : .Models.LeadFormUpdateRequest_Type_Vectors.Vector;
         Result : .Models.LeadFormArrayResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;

         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Swagger.Servers.Read (Req, Media_List_1, Input);
         
         .Models.Deserialize (Input, "LeadFormUpdateRequest", Lead_Form_Update_Request);
         Server.Lead_Forms_Update
            (Ad_Account_Id,
             Lead_Form_Update_Request, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid ad account lead forms parameters.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Lead_Forms_Update;

      package API_Lead_Forms_Update is
         new Swagger.Servers.Operation
            (Handler => Lead_Forms_Update,
             Method  => Swagger.Servers.PATCH,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/lead_forms",
             Mimes   => Media_List_1'Access);


      --  Create a request to export leads collected from a lead ad
      procedure Leads_Export_Create
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Ad_Account_Id : Swagger.UString;
         Leads_Export_Create_Request_Type : LeadsExportCreateRequest_Type;
         Result : .Models.LeadsExportCreateResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;

         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Swagger.Servers.Read (Req, Media_List_1, Input);
         
         .Models.Deserialize (Input, "LeadsExportCreateRequest_Type", Leads_Export_Create_Request_Type);
         Server.Leads_Export_Create
            (Ad_Account_Id,
             Leads_Export_Create_Request_Type, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid ad account parameter.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Leads_Export_Create;

      package API_Leads_Export_Create is
         new Swagger.Servers.Operation
            (Handler => Leads_Export_Create,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/leads_export",
             Mimes   => Media_List_1'Access);


      --  Get the lead export from the lead export create call
      procedure Leads_Export_Get
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Ad_Account_Id : Swagger.UString;
         Leads_Export_Id : Swagger.UString;
         Result : .Models.LeadsExportResponseData_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;

         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Leads_Export_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 2));

         Server.Leads_Export_Get
            (Ad_Account_Id,
             Leads_Export_Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid ad account parameter.");
            return;
         end if;
         if Context.Get_Status = 404 then
            Context.Set_Description ("Invalid leads export id parameter.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Leads_Export_Get;

      package API_Leads_Export_Get is
         new Swagger.Servers.Operation
            (Handler => Leads_Export_Get,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/leads_export/{leads_export_id}",
             Mimes   => Media_List_1'Access);


      --  Register media upload
      procedure Media_Create
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Media_Upload_Request_Type : MediaUploadRequest_Type;
         Result : .Models.MediaUpload_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Pins_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Pins_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;

         
         Swagger.Servers.Read (Req, Media_List_1, Input);
         
         .Models.Deserialize (Input, "MediaUploadRequest_Type", Media_Upload_Request_Type);
         Server.Media_Create
            (Media_Upload_Request_Type, Result, Context);
         if Context.Get_Status = 201 then
            Context.Set_Description ("response");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Media_Create;

      package API_Media_Create is
         new Swagger.Servers.Operation
            (Handler => Media_Create,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/media",
             Mimes   => Media_List_1'Access);


      --  Get media upload details
      procedure Media_Get
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Media_Id : Swagger.UString;
         Result : .Models.MediaUploadDetails_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Pins_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;

         
         Media_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Media_Get
            (Media_Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("response");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 404 then
            Context.Set_Description ("Media upload not found");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Media_Get;

      package API_Media_Get is
         new Swagger.Servers.Operation
            (Handler => Media_Get,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/media/{media_id}",
             Mimes   => Media_List_1'Access);


      --  List media uploads
      procedure Media_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Bookmark : Swagger.Nullable_UString;
         Page_Size : Swagger.Nullable_Integer;
         Result : .Models.MediaList200Response_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Pins_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Bookmark := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "bookmark"));
         Page_Size := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "page_size"));

         
         Server.Media_List
            (Bookmark,
             Page_Size, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("response");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Media_List;

      package API_Media_List is
         new Swagger.Servers.Operation
            (Handler => Media_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/media",
             Mimes   => Media_List_1'Access);


      --  Generate OAuth access token
      procedure Oauth_Token
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Grant_Type : Swagger.UString;
         Result : .Models.OauthAccessTokenResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;

         
         Swagger.Servers.Get_Parameter (Context, "grant_type", Grant_Type);
         Server.Oauth_Token
            (Grant_Type, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("response");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Oauth_Token;

      package API_Oauth_Token is
         new Swagger.Servers.Operation
            (Handler => Oauth_Token,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/oauth/token",
             Mimes   => Media_List_1'Access);


      --  Get order line
      procedure Order_Lines_Get
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Ad_Account_Id : Swagger.UString;
         Order_Line_Id : Swagger.UString;
         Result : .Models.OrderLine_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;

         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Order_Line_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 2));

         Server.Order_Lines_Get
            (Ad_Account_Id,
             Order_Line_Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Order_Lines_Get;

      package API_Order_Lines_Get is
         new Swagger.Servers.Operation
            (Handler => Order_Lines_Get,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/order_lines/{order_line_id}",
             Mimes   => Media_List_1'Access);


      --  Get order lines
      procedure Order_Lines_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Ad_Account_Id : Swagger.UString;
         Page_Size : Swagger.Nullable_Integer;
         Order : Swagger.Nullable_UString;
         Bookmark : Swagger.Nullable_UString;
         Result : .Models.OrderLinesList200Response_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Page_Size := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "page_size"));
         Order := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "order"));
         Bookmark := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "bookmark"));

         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Order_Lines_List
            (Ad_Account_Id,
             Page_Size,
             Order,
             Bookmark, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Order_Lines_List;

      package API_Order_Lines_List is
         new Swagger.Servers.Operation
            (Handler => Order_Lines_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/order_lines",
             Mimes   => Media_List_1'Access);


      --  Get multiple Pin analytics
      procedure Multi_Pins_Analytics
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Pin_Ids : Swagger.UString_Vectors.Vector;
         Start_Date : Swagger.Date;
         End_Date : Swagger.Date;
         Metric_Types : .Models.PinsAnalyticsMetricTypesParameterInner_Type_Vectors.Vector;
         App_Types : Swagger.Nullable_UString;
         Ad_Account_Id : Swagger.Nullable_UString;
         Result : Swagger.Map_Map;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Pins_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Pins_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Pin_Ids := To_Swagger.UString_Vectors.Vector (Swagger.Servers.Get_Query_Parameter (Req, "pin_ids"));
         Start_Date := To_Swagger.Date (Swagger.Servers.Get_Query_Parameter (Req, "start_date"));
         End_Date := To_Swagger.Date (Swagger.Servers.Get_Query_Parameter (Req, "end_date"));
         App_Types := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "app_types"));
         Metric_Types := To_.Models.PinsAnalyticsMetricTypesParameterInner_Type_Vectors.Vector (Swagger.Servers.Get_Query_Parameter (Req, "metric_types"));
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "ad_account_id"));

         
         Server.Multi_Pins_Analytics
            (Pin_Ids,
             Start_Date,
             End_Date,
             Metric_Types,
             App_Types,
             Ad_Account_Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("response");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid pins analytics parameters.");
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Not authorized to access board or Pin.");
            return;
         end if;
         if Context.Get_Status = 404 then
            Context.Set_Description ("Pin not found.");
            return;
         end if;
         if Context.Get_Status = 429 then
            Context.Set_Description ("This request exceeded a rate limit. This can happen if the client exceeds one of the published rate limits or if multiple write operations are applied to an object within a short time window.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Multi_Pins_Analytics;

      package API_Multi_Pins_Analytics is
         new Swagger.Servers.Operation
            (Handler => Multi_Pins_Analytics,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/pins/analytics",
             Mimes   => Media_List_1'Access);


      --  Get Pin analytics
      procedure Pins_Analytics
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Pin_Id : Swagger.UString;
         Start_Date : Swagger.Date;
         End_Date : Swagger.Date;
         Metric_Types : .Models.PinsAnalyticsMetricTypesParameterInner_Type_Vectors.Vector;
         App_Types : Swagger.Nullable_UString;
         Split_Field : Swagger.Nullable_UString;
         Ad_Account_Id : Swagger.Nullable_UString;
         Result : Swagger..Models.PinAnalyticsMetricsResponse_Type_Map;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Pins_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Pins_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Start_Date := To_Swagger.Date (Swagger.Servers.Get_Query_Parameter (Req, "start_date"));
         End_Date := To_Swagger.Date (Swagger.Servers.Get_Query_Parameter (Req, "end_date"));
         App_Types := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "app_types"));
         Metric_Types := To_.Models.PinsAnalyticsMetricTypesParameterInner_Type_Vectors.Vector (Swagger.Servers.Get_Query_Parameter (Req, "metric_types"));
         Split_Field := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "split_field"));
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "ad_account_id"));

         
         Pin_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Pins_Analytics
            (Pin_Id,
             Start_Date,
             End_Date,
             Metric_Types,
             App_Types,
             Split_Field,
             Ad_Account_Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("response");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid pins analytics parameters.");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Not authorized to access board or Pin.");
            return;
         end if;
         if Context.Get_Status = 404 then
            Context.Set_Description ("Pin not found.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Pins_Analytics;

      package API_Pins_Analytics is
         new Swagger.Servers.Operation
            (Handler => Pins_Analytics,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/pins/{pin_id}/analytics",
             Mimes   => Media_List_1'Access);


      --  Create Pin
      procedure Pins_Create
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Pin_Create_Type : PinCreate_Type;
         Ad_Account_Id : Swagger.Nullable_UString;
         Result : .Models.Pin_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Pins_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Pins_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "ad_account_id"));

         
         Swagger.Servers.Read (Req, Media_List_1, Input);
         
         .Models.Deserialize (Input, "PinCreate_Type", Pin_Create_Type);
         Server.Pins_Create
            (Pin_Create_Type,
             Ad_Account_Id, Result, Context);
         if Context.Get_Status = 201 then
            Context.Set_Description ("Successful pin creation.");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid Pin parameters response");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("The Pin's image is too small, too large or is broken");
            return;
         end if;
         if Context.Get_Status = 404 then
            Context.Set_Description ("Board or section not found");
            return;
         end if;
         if Context.Get_Status = 429 then
            Context.Set_Description ("This request exceeded a rate limit. This can happen if the client exceeds one of the published rate limits or if multiple write operations are applied to an object within a short time window.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Pins_Create;

      package API_Pins_Create is
         new Swagger.Servers.Operation
            (Handler => Pins_Create,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/pins",
             Mimes   => Media_List_1'Access);


      --  Delete Pin
      procedure Pins_Delete
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Pin_Id : Swagger.UString;
         Ad_Account_Id : Swagger.Nullable_UString;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Pins_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Pins_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "ad_account_id"));

         
         Pin_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Pins_Delete
            (Pin_Id,
             Ad_Account_Id, Context);

      end Pins_Delete;

      package API_Pins_Delete is
         new Swagger.Servers.Operation
            (Handler => Pins_Delete,
             Method  => Swagger.Servers.DELETE,
             URI     => URI_Prefix & "/pins/{pin_id}",
             Mimes   => Media_List_1'Access);


      --  Get Pin
      procedure Pins_Get
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Pin_Id : Swagger.UString;
         Pin_Metrics : Swagger.Nullable_Boolean;
         Ad_Account_Id : Swagger.Nullable_UString;
         Result : .Models.Pin_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Pins_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Pins_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Pin_Metrics := To_Boolean (Swagger.Servers.Get_Query_Parameter (Req, "pin_metrics"));
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "ad_account_id"));

         
         Pin_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Pins_Get
            (Pin_Id,
             Pin_Metrics,
             Ad_Account_Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("response");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Not authorized to access board or Pin.");
            return;
         end if;
         if Context.Get_Status = 404 then
            Context.Set_Description ("Pin not found.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Pins_Get;

      package API_Pins_Get is
         new Swagger.Servers.Operation
            (Handler => Pins_Get,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/pins/{pin_id}",
             Mimes   => Media_List_1'Access);


      --  List Pins
      procedure Pins_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Bookmark : Swagger.Nullable_UString;
         Page_Size : Swagger.Nullable_Integer;
         Pin_Filter : Swagger.Nullable_UString;
         Include_Protected_Pins : Swagger.Nullable_Boolean;
         Pin_Type : Swagger.Nullable_UString;
         Creative_Types : Swagger.UString_Vectors.Vector;
         Ad_Account_Id : Swagger.Nullable_UString;
         Pin_Metrics : Swagger.Nullable_Boolean;
         Result : .Models.PinsList200Response_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Pins_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Pins_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Bookmark := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "bookmark"));
         Page_Size := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "page_size"));
         Pin_Filter := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "pin_filter"));
         Include_Protected_Pins := To_Boolean (Swagger.Servers.Get_Query_Parameter (Req, "include_protected_pins"));
         Pin_Type := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "pin_type"));
         Creative_Types := To_Swagger.UString_Vectors.Vector (Swagger.Servers.Get_Query_Parameter (Req, "creative_types"));
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "ad_account_id"));
         Pin_Metrics := To_Boolean (Swagger.Servers.Get_Query_Parameter (Req, "pin_metrics"));

         
         Server.Pins_List
            (Bookmark,
             Page_Size,
             Pin_Filter,
             Include_Protected_Pins,
             Pin_Type,
             Creative_Types,
             Ad_Account_Id,
             Pin_Metrics, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid pin filter value");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Pins_List;

      package API_Pins_List is
         new Swagger.Servers.Operation
            (Handler => Pins_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/pins",
             Mimes   => Media_List_1'Access);


      --  Save Pin
      procedure Pins_Save
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Pin_Id : Swagger.UString;
         Pins_Save_Request_Type : PinsSaveRequest_Type;
         Ad_Account_Id : Swagger.Nullable_UString;
         Result : .Models.Pin_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Pins_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Pins_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "ad_account_id"));

         
         Pin_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Swagger.Servers.Read (Req, Media_List_1, Input);
         
         .Models.Deserialize (Input, "PinsSaveRequest_Type", Pins_Save_Request_Type);
         Server.Pins_Save
            (Pin_Id,
             Pins_Save_Request_Type,
             Ad_Account_Id, Result, Context);
         if Context.Get_Status = 201 then
            Context.Set_Description ("Successfully saved pin.");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Not authorized to access Board or Pin.");
            return;
         end if;
         if Context.Get_Status = 404 then
            Context.Set_Description ("Board or Pin not found.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Pins_Save;

      package API_Pins_Save is
         new Swagger.Servers.Operation
            (Handler => Pins_Save,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/pins/{pin_id}/save",
             Mimes   => Media_List_1'Access);


      --  Update Pin
      procedure Pins_Update
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Pin_Id : Swagger.UString;
         Pin_Update_Type : PinUpdate_Type;
         Ad_Account_Id : Swagger.Nullable_UString;
         Result : .Models.Pin_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Pins_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Pins_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "ad_account_id"));

         
         Pin_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Swagger.Servers.Read (Req, Media_List_1, Input);
         
         .Models.Deserialize (Input, "PinUpdate_Type", Pin_Update_Type);
         Server.Pins_Update
            (Pin_Id,
             Pin_Update_Type,
             Ad_Account_Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("response");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Not authorized to update Pin.");
            return;
         end if;
         if Context.Get_Status = 404 then
            Context.Set_Description ("Pin not found.");
            return;
         end if;
         if Context.Get_Status = 429 then
            Context.Set_Description ("This request exceeded a rate limit. This can happen if the client exceeds one of the published rate limits or if multiple write operations are applied to an object within a short time window.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Pins_Update;

      package API_Pins_Update is
         new Swagger.Servers.Operation
            (Handler => Pins_Update,
             Method  => Swagger.Servers.PATCH,
             URI     => URI_Prefix & "/pins/{pin_id}",
             Mimes   => Media_List_1'Access);


      --  Create product group promotions
      procedure Product_Group_Promotions_Create
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Ad_Account_Id : Swagger.UString;
         Product_Group_Promotion_Create_Request_Type : ProductGroupPromotionCreateRequest_Type;
         Result : .Models.ProductGroupPromotionResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;

         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Swagger.Servers.Read (Req, Media_List_1, Input);
         
         .Models.Deserialize (Input, "ProductGroupPromotionCreateRequest_Type", Product_Group_Promotion_Create_Request_Type);
         Server.Product_Group_Promotions_Create
            (Ad_Account_Id,
             Product_Group_Promotion_Create_Request_Type, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Product_Group_Promotions_Create;

      package API_Product_Group_Promotions_Create is
         new Swagger.Servers.Operation
            (Handler => Product_Group_Promotions_Create,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/product_group_promotions",
             Mimes   => Media_List_1'Access);


      --  Get a product group promotion by id
      procedure Product_Group_Promotions_Get
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Ad_Account_Id : Swagger.UString;
         Product_Group_Promotion_Id : Swagger.UString;
         Result : .Models.ProductGroupPromotionResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;

         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Product_Group_Promotion_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 2));

         Server.Product_Group_Promotions_Get
            (Ad_Account_Id,
             Product_Group_Promotion_Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Product_Group_Promotions_Get;

      package API_Product_Group_Promotions_Get is
         new Swagger.Servers.Operation
            (Handler => Product_Group_Promotions_Get,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/product_group_promotions/{product_group_promotion_id}",
             Mimes   => Media_List_1'Access);


      --  Get product group promotions
      procedure Product_Group_Promotions_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Ad_Account_Id : Swagger.UString;
         Product_Group_Promotion_Ids : Swagger.UString_Vectors.Vector;
         Entity_Statuses : Swagger.UString_Vectors.Vector;
         Ad_Group_Id : Swagger.Nullable_UString;
         Page_Size : Swagger.Nullable_Integer;
         Order : Swagger.Nullable_UString;
         Bookmark : Swagger.Nullable_UString;
         Result : .Models.ProductGroupPromotionsList200Response_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Product_Group_Promotion_Ids := To_Swagger.UString_Vectors.Vector (Swagger.Servers.Get_Query_Parameter (Req, "product_group_promotion_ids"));
         Entity_Statuses := To_Swagger.UString_Vectors.Vector (Swagger.Servers.Get_Query_Parameter (Req, "entity_statuses"));
         Ad_Group_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "ad_group_id"));
         Page_Size := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "page_size"));
         Order := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "order"));
         Bookmark := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "bookmark"));

         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Product_Group_Promotions_List
            (Ad_Account_Id,
             Product_Group_Promotion_Ids,
             Entity_Statuses,
             Ad_Group_Id,
             Page_Size,
             Order,
             Bookmark, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Product_Group_Promotions_List;

      package API_Product_Group_Promotions_List is
         new Swagger.Servers.Operation
            (Handler => Product_Group_Promotions_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/product_group_promotions",
             Mimes   => Media_List_1'Access);


      --  Update product group promotions
      procedure Product_Group_Promotions_Update
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Ad_Account_Id : Swagger.UString;
         Product_Group_Promotion_Update_Request_Type : ProductGroupPromotionUpdateRequest_Type;
         Result : .Models.ProductGroupPromotionResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;

         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Swagger.Servers.Read (Req, Media_List_1, Input);
         
         .Models.Deserialize (Input, "ProductGroupPromotionUpdateRequest_Type", Product_Group_Promotion_Update_Request_Type);
         Server.Product_Group_Promotions_Update
            (Ad_Account_Id,
             Product_Group_Promotion_Update_Request_Type, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Product_Group_Promotions_Update;

      package API_Product_Group_Promotions_Update is
         new Swagger.Servers.Operation
            (Handler => Product_Group_Promotions_Update,
             Method  => Swagger.Servers.PATCH,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/product_group_promotions",
             Mimes   => Media_List_1'Access);


      --  Get product group analytics
      procedure Product_Groups_Analytics
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Ad_Account_Id : Swagger.UString;
         Start_Date : Swagger.Date;
         End_Date : Swagger.Date;
         Product_Group_Ids : Swagger.UString_Vectors.Vector;
         Columns : Swagger.UString_Vectors.Vector;
         Granularity : Granularity_Type;
         Click_Window_Days : Swagger.Nullable_Integer;
         Engagement_Window_Days : Swagger.Nullable_Integer;
         View_Window_Days : Swagger.Nullable_Integer;
         Conversion_Report_Time : Swagger.Nullable_UString;
         Result : .Models.ProductGroupAnalyticsResponseInner_Type_Vectors.Vector;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Start_Date := To_Swagger.Date (Swagger.Servers.Get_Query_Parameter (Req, "start_date"));
         End_Date := To_Swagger.Date (Swagger.Servers.Get_Query_Parameter (Req, "end_date"));
         Product_Group_Ids := To_Swagger.UString_Vectors.Vector (Swagger.Servers.Get_Query_Parameter (Req, "product_group_ids"));
         Columns := To_Swagger.UString_Vectors.Vector (Swagger.Servers.Get_Query_Parameter (Req, "columns"));
         Granularity := To_Granularity_Type (Swagger.Servers.Get_Query_Parameter (Req, "granularity"));
         Click_Window_Days := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "click_window_days"));
         Engagement_Window_Days := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "engagement_window_days"));
         View_Window_Days := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "view_window_days"));
         Conversion_Report_Time := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "conversion_report_time"));

         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Product_Groups_Analytics
            (Ad_Account_Id,
             Start_Date,
             End_Date,
             Product_Group_Ids,
             Columns,
             Granularity,
             Click_Window_Days,
             Engagement_Window_Days,
             View_Window_Days,
             Conversion_Report_Time, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid ad account ads analytics parameters.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Product_Groups_Analytics;

      package API_Product_Groups_Analytics is
         new Swagger.Servers.Operation
            (Handler => Product_Groups_Analytics,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/product_groups/analytics",
             Mimes   => Media_List_1'Access);


      --  Get ad accounts countries
      procedure Ad_Account_Countries_Get
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Result : .Models.AdAccountsCountryResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;

         
         Server.Ad_Account_Countries_Get (Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Ad_Account_Countries_Get;

      package API_Ad_Account_Countries_Get is
         new Swagger.Servers.Operation
            (Handler => Ad_Account_Countries_Get,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/resources/ad_account_countries",
             Mimes   => Media_List_1'Access);


      --  Get available metrics' definitions
      procedure Delivery_Metrics_Get
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Report_Type : Swagger.Nullable_UString;
         Result : .Models.DeliveryMetricsResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Pins_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_User_Accounts_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Report_Type := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "report_type"));

         
         Server.Delivery_Metrics_Get
            (Report_Type, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Delivery_Metrics_Get;

      package API_Delivery_Metrics_Get is
         new Swagger.Servers.Operation
            (Handler => Delivery_Metrics_Get,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/resources/delivery_metrics",
             Mimes   => Media_List_1'Access);


      --  Get interest details
      procedure Interest_Targeting_Options_Get
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Interest_Id : Swagger.UString;
         Result : .Models.SingleInterestTargetingOptionResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;

         
         Interest_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Interest_Targeting_Options_Get
            (Interest_Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Interest_Targeting_Options_Get;

      package API_Interest_Targeting_Options_Get is
         new Swagger.Servers.Operation
            (Handler => Interest_Targeting_Options_Get,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/resources/targeting/interests/{interest_id}",
             Mimes   => Media_List_1'Access);


      --  Get lead form questions
      procedure Lead_Form_Questions_Get
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;

         
         Server.Lead_Form_Questions_Get (Context);

      end Lead_Form_Questions_Get;

      package API_Lead_Form_Questions_Get is
         new Swagger.Servers.Operation
            (Handler => Lead_Form_Questions_Get,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/resources/lead_form_questions",
             Mimes   => Media_List_1'Access);


      --  Get metrics ready state
      procedure Metrics_Ready_State_Get
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Date : Swagger.UString;
         Result : .Models.BookClosedResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Date := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "date"));

         
         Server.Metrics_Ready_State_Get
            (Date, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Metrics_Ready_State_Get;

      package API_Metrics_Ready_State_Get is
         new Swagger.Servers.Operation
            (Handler => Metrics_Ready_State_Get,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/resources/metrics_ready_state",
             Mimes   => Media_List_1'Access);


      --  Get targeting options
      procedure Targeting_Options_Get
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Targeting_Type : Swagger.UString;
         Client_Id : Swagger.Nullable_UString;
         Oauth_Signature : Swagger.Nullable_UString;
         Timestamp : Swagger.Nullable_UString;
         Ad_Account_Id : Swagger.Nullable_UString;
         Result : Swagger.Object_Vectors.Vector;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Client_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "client_id"));
         Oauth_Signature := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "oauth_signature"));
         Timestamp := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "timestamp"));
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "ad_account_id"));

         
         Targeting_Type := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Targeting_Options_Get
            (Targeting_Type,
             Client_Id,
             Oauth_Signature,
             Timestamp,
             Ad_Account_Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Stream.Write_Entity ("", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Targeting_Options_Get;

      package API_Targeting_Options_Get is
         new Swagger.Servers.Operation
            (Handler => Targeting_Options_Get,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/resources/targeting/{targeting_type}",
             Mimes   => Media_List_1'Access);


      --  Search pins by a given search term
      procedure Search_Partner_Pins
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Term : Swagger.UString;
         Country_Code : Swagger.UString;
         Bookmark : Swagger.Nullable_UString;
         Locale : Swagger.Nullable_UString;
         Limit : Swagger.Nullable_Integer;
         Result : .Models.SearchPartnerPins200Response_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Pins_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Term := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "term"));
         Country_Code := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "country_code"));
         Bookmark := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "bookmark"));
         Locale := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "locale"));
         Limit := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "limit"));

         
         Server.Search_Partner_Pins
            (Term,
             Country_Code,
             Bookmark,
             Locale,
             Limit, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid pins");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Search_Partner_Pins;

      package API_Search_Partner_Pins is
         new Swagger.Servers.Operation
            (Handler => Search_Partner_Pins,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/search/partner/pins",
             Mimes   => Media_List_1'Access);


      --  Search user's boards
      procedure Search_User_Boards_Get
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Ad_Account_Id : Swagger.Nullable_UString;
         Bookmark : Swagger.Nullable_UString;
         Page_Size : Swagger.Nullable_Integer;
         Query : Swagger.Nullable_UString;
         Result : .Models.SearchUserBoardsGet200Response_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Read_Secret.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Read_Secret.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "ad_account_id"));
         Bookmark := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "bookmark"));
         Page_Size := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "page_size"));
         Query := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "query"));

         
         Server.Search_User_Boards_Get
            (Ad_Account_Id,
             Bookmark,
             Page_Size,
             Query, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("response");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Search_User_Boards_Get;

      package API_Search_User_Boards_Get is
         new Swagger.Servers.Operation
            (Handler => Search_User_Boards_Get,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/search/boards",
             Mimes   => Media_List_1'Access);


      --  Search user's Pins
      procedure Search_User_Pins_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Query : Swagger.UString;
         Ad_Account_Id : Swagger.Nullable_UString;
         Bookmark : Swagger.Nullable_UString;
         Result : .Models.PinsList200Response_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Read_Secret.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Pins_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Pins_Read_Secret.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "ad_account_id"));
         Query := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "query"));
         Bookmark := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "bookmark"));

         
         Server.Search_User_Pins_List
            (Query,
             Ad_Account_Id,
             Bookmark, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 404 then
            Context.Set_Description ("User not found");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Search_User_Pins_List;

      package API_Search_User_Pins_List is
         new Swagger.Servers.Operation
            (Handler => Search_User_Pins_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/search/pins",
             Mimes   => Media_List_1'Access);


      --  Create targeting templates
      procedure Targeting_Template_Create
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Ad_Account_Id : Swagger.UString;
         Targeting_Template_Create_Type : TargetingTemplateCreate_Type;
         Result : .Models.TargetingTemplateGetResponseData_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;

         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Swagger.Servers.Read (Req, Media_List_1, Input);
         
         .Models.Deserialize (Input, "TargetingTemplateCreate_Type", Targeting_Template_Create_Type);
         Server.Targeting_Template_Create
            (Ad_Account_Id,
             Targeting_Template_Create_Type, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid ad account id.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Targeting_Template_Create;

      package API_Targeting_Template_Create is
         new Swagger.Servers.Operation
            (Handler => Targeting_Template_Create,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/targeting_templates",
             Mimes   => Media_List_1'Access);


      --  List targeting templates
      procedure Targeting_Template_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Ad_Account_Id : Swagger.UString;
         Order : Swagger.Nullable_UString;
         Include_Sizing : Swagger.Nullable_Boolean;
         Search_Query : Swagger.Nullable_UString;
         Page_Size : Swagger.Nullable_Integer;
         Bookmark : Swagger.Nullable_UString;
         Result : .Models.TargetingTemplateList200Response_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Order := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "order"));
         Include_Sizing := To_Boolean (Swagger.Servers.Get_Query_Parameter (Req, "include_sizing"));
         Search_Query := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "search_query"));
         Page_Size := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "page_size"));
         Bookmark := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "bookmark"));

         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Targeting_Template_List
            (Ad_Account_Id,
             Order,
             Include_Sizing,
             Search_Query,
             Page_Size,
             Bookmark, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid ad account id.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Targeting_Template_List;

      package API_Targeting_Template_List is
         new Swagger.Servers.Operation
            (Handler => Targeting_Template_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/targeting_templates",
             Mimes   => Media_List_1'Access);


      --  Update targeting templates
      procedure Targeting_Template_Update
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Ad_Account_Id : Swagger.UString;
         Targeting_Template_Update_Request_Type : TargetingTemplateUpdateRequest_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;

         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Swagger.Servers.Read (Req, Media_List_1, Input);
         
         .Models.Deserialize (Input, "TargetingTemplateUpdateRequest_Type", Targeting_Template_Update_Request_Type);
         Server.Targeting_Template_Update
            (Ad_Account_Id,
             Targeting_Template_Update_Request_Type, Context);

      end Targeting_Template_Update;

      package API_Targeting_Template_Update is
         new Swagger.Servers.Operation
            (Handler => Targeting_Template_Update,
             Method  => Swagger.Servers.PATCH,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/targeting_templates",
             Mimes   => Media_List_1'Access);


      --  List related terms
      procedure Terms_Related_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Terms : Swagger.UString_Vectors.Vector;
         Result : .Models.RelatedTerms_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Terms := To_Swagger.UString_Vectors.Vector (Swagger.Servers.Get_Query_Parameter (Req, "terms"));

         
         Server.Terms_Related_List
            (Terms, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid terms related parameters.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Terms_Related_List;

      package API_Terms_Related_List is
         new Swagger.Servers.Operation
            (Handler => Terms_Related_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/terms/related",
             Mimes   => Media_List_1'Access);


      --  List suggested terms
      procedure Terms_Suggested_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Term : Swagger.UString;
         Limit : Swagger.Nullable_Integer;
         Result : Swagger.UString_Vectors.Vector;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Term := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "term"));
         Limit := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "limit"));

         
         Server.Terms_Suggested_List
            (Term,
             Limit, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Stream.Write_Entity ("", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid terms suggested parameters.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Terms_Suggested_List;

      package API_Terms_Suggested_List is
         new Swagger.Servers.Operation
            (Handler => Terms_Suggested_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/terms/suggested",
             Mimes   => Media_List_1'Access);


      --  Get terms of service
      procedure Terms_Of_Service_Get
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Ad_Account_Id : Swagger.UString;
         Include_Html : Swagger.Nullable_Boolean;
         Tos_Type : Swagger.Nullable_UString;
         Result : .Models.TermsOfService_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Include_Html := To_Boolean (Swagger.Servers.Get_Query_Parameter (Req, "include_html"));
         Tos_Type := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "tos_type"));

         
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Terms_Of_Service_Get
            (Ad_Account_Id,
             Include_Html,
             Tos_Type, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Terms_Of_Service_Get;

      package API_Terms_Of_Service_Get is
         new Swagger.Servers.Operation
            (Handler => Terms_Of_Service_Get,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/terms_of_service",
             Mimes   => Media_List_1'Access);


      --  List following boards
      procedure Boards_User_Follows_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Bookmark : Swagger.Nullable_UString;
         Page_Size : Swagger.Nullable_Integer;
         Explicit_Following : Swagger.Nullable_Boolean;
         Ad_Account_Id : Swagger.Nullable_UString;
         Result : .Models.BoardsUserFollowsList200Response_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_User_Accounts_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_User_Accounts_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Bookmark := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "bookmark"));
         Page_Size := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "page_size"));
         Explicit_Following := To_Boolean (Swagger.Servers.Get_Query_Parameter (Req, "explicit_following"));
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "ad_account_id"));

         
         Server.Boards_User_Follows_List
            (Bookmark,
             Page_Size,
             Explicit_Following,
             Ad_Account_Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid user id");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Boards_User_Follows_List;

      package API_Boards_User_Follows_List is
         new Swagger.Servers.Operation
            (Handler => Boards_User_Follows_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/user_account/following/boards",
             Mimes   => Media_List_1'Access);


      --  Follow user
      procedure Follow_User_Update
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Username : Swagger.UString;
         Follow_User_Request_Type : FollowUserRequest_Type;
         Result : .Models.UserSummary_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_User_Accounts_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;

         
         Username := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Swagger.Servers.Read (Req, Media_List_1, Input);
         
         .Models.Deserialize (Input, "FollowUserRequest_Type", Follow_User_Request_Type);
         Server.Follow_User_Update
            (Username,
             Follow_User_Request_Type, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 404 then
            Context.Set_Description ("User not found");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Follow_User_Update;

      package API_Follow_User_Update is
         new Swagger.Servers.Operation
            (Handler => Follow_User_Update,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/user_account/following/{username}",
             Mimes   => Media_List_1'Access);


      --  List followers
      procedure Followers_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Bookmark : Swagger.Nullable_UString;
         Page_Size : Swagger.Nullable_Integer;
         Result : .Models.FollowersList200Response_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_User_Accounts_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_User_Accounts_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Bookmark := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "bookmark"));
         Page_Size := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "page_size"));

         
         Server.Followers_List
            (Bookmark,
             Page_Size, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid user id");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Followers_List;

      package API_Followers_List is
         new Swagger.Servers.Operation
            (Handler => Followers_List,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/user_account/followers",
             Mimes   => Media_List_1'Access);


      --  List linked businesses
      procedure Linked_Business_Accounts_Get
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Result : .Models.LinkedBusiness_Type_Vectors.Vector;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_User_Accounts_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_User_Accounts_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;

         
         Server.Linked_Business_Accounts_Get (Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Linked_Business_Accounts_Get;

      package API_Linked_Business_Accounts_Get is
         new Swagger.Servers.Operation
            (Handler => Linked_Business_Accounts_Get,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/user_account/businesses",
             Mimes   => Media_List_1'Access);


      --  Unverify website
      procedure Unverify_Website_Delete
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Website : Swagger.UString;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_User_Accounts_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Website := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "website"));

         
         Server.Unverify_Website_Delete
            (Website, Context);

      end Unverify_Website_Delete;

      package API_Unverify_Website_Delete is
         new Swagger.Servers.Operation
            (Handler => Unverify_Website_Delete,
             Method  => Swagger.Servers.DELETE,
             URI     => URI_Prefix & "/user_account/websites",
             Mimes   => Media_List_1'Access);


      --  Get user account analytics
      procedure User_Account_Analytics
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Start_Date : Swagger.Date;
         End_Date : Swagger.Date;
         From_Claimed_Content : Swagger.Nullable_UString;
         Pin_Format : Swagger.Nullable_UString;
         App_Types : Swagger.Nullable_UString;
         Content_Type : Swagger.Nullable_UString;
         Source : Swagger.Nullable_UString;
         Metric_Types : Swagger.UString_Vectors.Vector;
         Split_Field : Swagger.Nullable_UString;
         Ad_Account_Id : Swagger.Nullable_UString;
         Result : Swagger..Models.AnalyticsMetricsResponse_Type_Map;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_User_Accounts_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Start_Date := To_Swagger.Date (Swagger.Servers.Get_Query_Parameter (Req, "start_date"));
         End_Date := To_Swagger.Date (Swagger.Servers.Get_Query_Parameter (Req, "end_date"));
         From_Claimed_Content := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "from_claimed_content"));
         Pin_Format := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "pin_format"));
         App_Types := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "app_types"));
         Content_Type := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "content_type"));
         Source := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "source"));
         Metric_Types := To_Swagger.UString_Vectors.Vector (Swagger.Servers.Get_Query_Parameter (Req, "metric_types"));
         Split_Field := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "split_field"));
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "ad_account_id"));

         
         Server.User_Account_Analytics
            (Start_Date,
             End_Date,
             From_Claimed_Content,
             Pin_Format,
             App_Types,
             Content_Type,
             Source,
             Metric_Types,
             Split_Field,
             Ad_Account_Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid user accounts analytics parameters.");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Not authorized to access the user account analytics.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end User_Account_Analytics;

      package API_User_Account_Analytics is
         new Swagger.Servers.Operation
            (Handler => User_Account_Analytics,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/user_account/analytics",
             Mimes   => Media_List_1'Access);


      --  Get user account top pins analytics
      procedure User_Account_Analytics_Top_Pins
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Start_Date : Swagger.Date;
         End_Date : Swagger.Date;
         Sort_By : Swagger.UString;
         From_Claimed_Content : Swagger.Nullable_UString;
         Pin_Format : Swagger.Nullable_UString;
         App_Types : Swagger.Nullable_UString;
         Content_Type : Swagger.Nullable_UString;
         Source : Swagger.Nullable_UString;
         Metric_Types : Swagger.UString_Vectors.Vector;
         Num_Of_Pins : Swagger.Nullable_Integer;
         Created_In_Last_NDays : Swagger.Nullable_Integer;
         Ad_Account_Id : Swagger.Nullable_UString;
         Result : .Models.TopPinsAnalyticsResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Pins_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_User_Accounts_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Pins_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_User_Accounts_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Start_Date := To_Swagger.Date (Swagger.Servers.Get_Query_Parameter (Req, "start_date"));
         End_Date := To_Swagger.Date (Swagger.Servers.Get_Query_Parameter (Req, "end_date"));
         Sort_By := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "sort_by"));
         From_Claimed_Content := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "from_claimed_content"));
         Pin_Format := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "pin_format"));
         App_Types := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "app_types"));
         Content_Type := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "content_type"));
         Source := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "source"));
         Metric_Types := To_Swagger.UString_Vectors.Vector (Swagger.Servers.Get_Query_Parameter (Req, "metric_types"));
         Num_Of_Pins := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "num_of_pins"));
         Created_In_Last_NDays := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "created_in_last_n_days"));
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "ad_account_id"));

         
         Server.User_Account_Analytics_Top_Pins
            (Start_Date,
             End_Date,
             Sort_By,
             From_Claimed_Content,
             Pin_Format,
             App_Types,
             Content_Type,
             Source,
             Metric_Types,
             Num_Of_Pins,
             Created_In_Last_NDays,
             Ad_Account_Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Not authorized to access the user account analytics.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end User_Account_Analytics_Top_Pins;

      package API_User_Account_Analytics_Top_Pins is
         new Swagger.Servers.Operation
            (Handler => User_Account_Analytics_Top_Pins,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/user_account/analytics/top_pins",
             Mimes   => Media_List_1'Access);


      --  Get user account top video pins analytics
      procedure User_Account_Analytics_Top_Video_Pins
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Start_Date : Swagger.Date;
         End_Date : Swagger.Date;
         Sort_By : Swagger.UString;
         From_Claimed_Content : Swagger.Nullable_UString;
         Pin_Format : Swagger.Nullable_UString;
         App_Types : Swagger.Nullable_UString;
         Content_Type : Swagger.Nullable_UString;
         Source : Swagger.Nullable_UString;
         Metric_Types : Swagger.UString_Vectors.Vector;
         Num_Of_Pins : Swagger.Nullable_Integer;
         Created_In_Last_NDays : Swagger.Nullable_Integer;
         Ad_Account_Id : Swagger.Nullable_UString;
         Result : .Models.TopVideoPinsAnalyticsResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Pins_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_User_Accounts_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Pins_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_User_Accounts_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Start_Date := To_Swagger.Date (Swagger.Servers.Get_Query_Parameter (Req, "start_date"));
         End_Date := To_Swagger.Date (Swagger.Servers.Get_Query_Parameter (Req, "end_date"));
         Sort_By := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "sort_by"));
         From_Claimed_Content := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "from_claimed_content"));
         Pin_Format := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "pin_format"));
         App_Types := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "app_types"));
         Content_Type := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "content_type"));
         Source := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "source"));
         Metric_Types := To_Swagger.UString_Vectors.Vector (Swagger.Servers.Get_Query_Parameter (Req, "metric_types"));
         Num_Of_Pins := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "num_of_pins"));
         Created_In_Last_NDays := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "created_in_last_n_days"));
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "ad_account_id"));

         
         Server.User_Account_Analytics_Top_Video_Pins
            (Start_Date,
             End_Date,
             Sort_By,
             From_Claimed_Content,
             Pin_Format,
             App_Types,
             Content_Type,
             Source,
             Metric_Types,
             Num_Of_Pins,
             Created_In_Last_NDays,
             Ad_Account_Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Not authorized to access the user account analytics.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end User_Account_Analytics_Top_Video_Pins;

      package API_User_Account_Analytics_Top_Video_Pins is
         new Swagger.Servers.Operation
            (Handler => User_Account_Analytics_Top_Video_Pins,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/user_account/analytics/top_video_pins",
             Mimes   => Media_List_1'Access);


      --  List following interests
      procedure User_Account_Followed_Interests
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Username : Swagger.UString;
         Bookmark : Swagger.Nullable_UString;
         Page_Size : Swagger.Nullable_Integer;
         Result : .Models.UserAccountFollowedInterests200Response_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_User_Accounts_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_User_Accounts_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Bookmark := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "bookmark"));
         Page_Size := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "page_size"));

         
         Username := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.User_Account_Followed_Interests
            (Username,
             Bookmark,
             Page_Size, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid parameters");
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Authorization failed");
            return;
         end if;
         if Context.Get_Status = 404 then
            Context.Set_Description ("User not found");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end User_Account_Followed_Interests;

      package API_User_Account_Followed_Interests is
         new Swagger.Servers.Operation
            (Handler => User_Account_Followed_Interests,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/users/{username}/interests/follow",
             Mimes   => Media_List_1'Access);


      --  Get user account
      procedure User_Account_Get
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Ad_Account_Id : Swagger.Nullable_UString;
         Result : .Models.Account_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_User_Accounts_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_User_Accounts_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "ad_account_id"));

         
         Server.User_Account_Get
            (Ad_Account_Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("response");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Not authorized to access the user account.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end User_Account_Get;

      package API_User_Account_Get is
         new Swagger.Servers.Operation
            (Handler => User_Account_Get,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/user_account",
             Mimes   => Media_List_1'Access);


      --  List following
      procedure User_Following_Get
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Bookmark : Swagger.Nullable_UString;
         Page_Size : Swagger.Nullable_Integer;
         Feed_Type : UserFollowingFeedType_Type;
         Explicit_Following : Swagger.Nullable_Boolean;
         Ad_Account_Id : Swagger.Nullable_UString;
         Result : .Models.UserFollowingGet200Response_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_User_Accounts_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_User_Accounts_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Bookmark := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "bookmark"));
         Page_Size := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "page_size"));
         Feed_Type := To_UserFollowingFeedType_Type (Swagger.Servers.Get_Query_Parameter (Req, "feed_type"));
         Explicit_Following := To_Boolean (Swagger.Servers.Get_Query_Parameter (Req, "explicit_following"));
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "ad_account_id"));

         
         Server.User_Following_Get
            (Bookmark,
             Page_Size,
             Feed_Type,
             Explicit_Following,
             Ad_Account_Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("response");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end User_Following_Get;

      package API_User_Following_Get is
         new Swagger.Servers.Operation
            (Handler => User_Following_Get,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/user_account/following",
             Mimes   => Media_List_1'Access);


      --  Get user websites
      procedure User_Websites_Get
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Bookmark : Swagger.Nullable_UString;
         Page_Size : Swagger.Nullable_Integer;
         Result : .Models.UserWebsitesGet200Response_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_User_Accounts_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Bookmark := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "bookmark"));
         Page_Size := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "page_size"));

         
         Server.User_Websites_Get
            (Bookmark,
             Page_Size, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Not authorized to access the user website list.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end User_Websites_Get;

      package API_User_Websites_Get is
         new Swagger.Servers.Operation
            (Handler => User_Websites_Get,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/user_account/websites",
             Mimes   => Media_List_1'Access);


      --  Verify website
      procedure Verify_Website_Update
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         User_Website_Verify_Request_Type : UserWebsiteVerifyRequest_Type;
         Ad_Account_Id : Swagger.Nullable_UString;
         Result : .Models.UserWebsiteSummary_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_User_Accounts_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "ad_account_id"));

         
         Swagger.Servers.Read (Req, Media_List_1, Input);
         
         .Models.Deserialize (Input, "UserWebsiteVerifyRequest_Type", User_Website_Verify_Request_Type);
         Server.Verify_Website_Update
            (User_Website_Verify_Request_Type,
             Ad_Account_Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Verify_Website_Update;

      package API_Verify_Website_Update is
         new Swagger.Servers.Operation
            (Handler => Verify_Website_Update,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/user_account/websites",
             Mimes   => Media_List_1'Access);


      --  Get user verification code for website claiming
      procedure Website_Verification_Get
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Ad_Account_Id : Swagger.Nullable_UString;
         Result : .Models.UserWebsiteVerificationCode_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_User_Accounts_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_User_Accounts_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Ad_Account_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "ad_account_id"));

         
         Server.Website_Verification_Get
            (Ad_Account_Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Success");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Not authorized to access the user verification code for website claiming.");
            return;
         end if;
         if Context.Get_Status = 0 then
            Context.Set_Description ("Unexpected error");
            return;
         end if;

      end Website_Verification_Get;

      package API_Website_Verification_Get is
         new Swagger.Servers.Operation
            (Handler => Website_Verification_Get,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/user_account/websites/verification",
             Mimes   => Media_List_1'Access);


      procedure Register (Server : in out Swagger.Servers.Application_Type'Class) is
      begin
         Swagger.Servers.Register (Server, API_Ad_Account_Analytics.Definition);
         Swagger.Servers.Register (Server, API_Ad_Account_Targeting_Analytics_Get.Definition);
         Swagger.Servers.Register (Server, API_Ad_Accounts_Create.Definition);
         Swagger.Servers.Register (Server, API_Ad_Accounts_Get.Definition);
         Swagger.Servers.Register (Server, API_Ad_Accounts_List.Definition);
         Swagger.Servers.Register (Server, API_Analytics_Create_Mmm_Report.Definition);
         Swagger.Servers.Register (Server, API_Analytics_Create_Report.Definition);
         Swagger.Servers.Register (Server, API_Analytics_Create_Template_Report.Definition);
         Swagger.Servers.Register (Server, API_Analytics_Get_Mmm_Report.Definition);
         Swagger.Servers.Register (Server, API_Analytics_Get_Report.Definition);
         Swagger.Servers.Register (Server, API_Sandbox_Delete.Definition);
         Swagger.Servers.Register (Server, API_Templates_List.Definition);
         Swagger.Servers.Register (Server, API_Ad_Groups_Analytics.Definition);
         Swagger.Servers.Register (Server, API_Ad_Groups_Audience_Sizing.Definition);
         Swagger.Servers.Register (Server, API_Ad_Groups_Bid_Floor_Get.Definition);
         Swagger.Servers.Register (Server, API_Ad_Groups_Create.Definition);
         Swagger.Servers.Register (Server, API_Ad_Groups_Get.Definition);
         Swagger.Servers.Register (Server, API_Ad_Groups_List.Definition);
         Swagger.Servers.Register (Server, API_Ad_Groups_Targeting_Analytics_Get.Definition);
         Swagger.Servers.Register (Server, API_Ad_Groups_Update.Definition);
         Swagger.Servers.Register (Server, API_Ad_Previews_Create.Definition);
         Swagger.Servers.Register (Server, API_Ad_Targeting_Analytics_Get.Definition);
         Swagger.Servers.Register (Server, API_Ads_Analytics.Definition);
         Swagger.Servers.Register (Server, API_Ads_Create.Definition);
         Swagger.Servers.Register (Server, API_Ads_Get.Definition);
         Swagger.Servers.Register (Server, API_Ads_List.Definition);
         Swagger.Servers.Register (Server, API_Ads_Update.Definition);
         Swagger.Servers.Register (Server, API_Advanced_Auction_Items_Get_Post.Definition);
         Swagger.Servers.Register (Server, API_Advanced_Auction_Items_Submit_Post.Definition);
         Swagger.Servers.Register (Server, API_Audience_Insights_Get.Definition);
         Swagger.Servers.Register (Server, API_Audience_Insights_Scope_And_Type_Get.Definition);
         Swagger.Servers.Register (Server, API_Ad_Accounts_Audiences_Shared_Accounts_List.Definition);
         Swagger.Servers.Register (Server, API_Business_Account_Audiences_Shared_Accounts_List.Definition);
         Swagger.Servers.Register (Server, API_Shared_Audiences_For_Business_List.Definition);
         Swagger.Servers.Register (Server, API_Update_Ad_Account_To_Ad_Account_Shared_Audience.Definition);
         Swagger.Servers.Register (Server, API_Update_Ad_Account_To_Business_Shared_Audience.Definition);
         Swagger.Servers.Register (Server, API_Update_Business_To_Ad_Account_Shared_Audience.Definition);
         Swagger.Servers.Register (Server, API_Update_Business_To_Business_Shared_Audience.Definition);
         Swagger.Servers.Register (Server, API_Audiences_Create.Definition);
         Swagger.Servers.Register (Server, API_Audiences_Create_Custom.Definition);
         Swagger.Servers.Register (Server, API_Audiences_Get.Definition);
         Swagger.Servers.Register (Server, API_Audiences_List.Definition);
         Swagger.Servers.Register (Server, API_Audiences_Update.Definition);
         Swagger.Servers.Register (Server, API_Ads_Credit_Redeem.Definition);
         Swagger.Servers.Register (Server, API_Ads_Credits_Discounts_Get.Definition);
         Swagger.Servers.Register (Server, API_Billing_Profiles_Get.Definition);
         Swagger.Servers.Register (Server, API_Ssio_Accounts_Get.Definition);
         Swagger.Servers.Register (Server, API_Ssio_Insertion_Order_Create.Definition);
         Swagger.Servers.Register (Server, API_Ssio_Insertion_Order_Edit.Definition);
         Swagger.Servers.Register (Server, API_Ssio_Insertion_Orders_Status_Get_By_Ad_Account.Definition);
         Swagger.Servers.Register (Server, API_Ssio_Insertion_Orders_Status_Get_By_Pin_Order_Id.Definition);
         Swagger.Servers.Register (Server, API_Ssio_Order_Lines_Get_By_Ad_Account.Definition);
         Swagger.Servers.Register (Server, API_Board_Sections_Create.Definition);
         Swagger.Servers.Register (Server, API_Board_Sections_Delete.Definition);
         Swagger.Servers.Register (Server, API_Board_Sections_List.Definition);
         Swagger.Servers.Register (Server, API_Board_Sections_List_Pins.Definition);
         Swagger.Servers.Register (Server, API_Board_Sections_Update.Definition);
         Swagger.Servers.Register (Server, API_Boards_Create.Definition);
         Swagger.Servers.Register (Server, API_Boards_Delete.Definition);
         Swagger.Servers.Register (Server, API_Boards_Get.Definition);
         Swagger.Servers.Register (Server, API_Boards_List.Definition);
         Swagger.Servers.Register (Server, API_Boards_List_Pins.Definition);
         Swagger.Servers.Register (Server, API_Boards_Update.Definition);
         Swagger.Servers.Register (Server, API_Bulk_Download_Create.Definition);
         Swagger.Servers.Register (Server, API_Bulk_Request_Get.Definition);
         Swagger.Servers.Register (Server, API_Bulk_Upsert_Create.Definition);
         Swagger.Servers.Register (Server, API_Asset_Group_Create.Definition);
         Swagger.Servers.Register (Server, API_Asset_Group_Delete.Definition);
         Swagger.Servers.Register (Server, API_Asset_Group_Update.Definition);
         Swagger.Servers.Register (Server, API_Business_Asset_Members_Get.Definition);
         Swagger.Servers.Register (Server, API_Business_Asset_Partners_Get.Definition);
         Swagger.Servers.Register (Server, API_Business_Assets_Get.Definition);
         Swagger.Servers.Register (Server, API_Business_Member_Assets_Get.Definition);
         Swagger.Servers.Register (Server, API_Business_Members_Asset_Access_Delete.Definition);
         Swagger.Servers.Register (Server, API_Business_Members_Asset_Access_Update.Definition);
         Swagger.Servers.Register (Server, API_Business_Partner_Asset_Access_Get.Definition);
         Swagger.Servers.Register (Server, API_Delete_Partner_Asset_Access_Handler_Impl.Definition);
         Swagger.Servers.Register (Server, API_Update_Partner_Asset_Access_Handler_Impl.Definition);
         Swagger.Servers.Register (Server, API_Asset_Access_Requests_Create.Definition);
         Swagger.Servers.Register (Server, API_Cancel_Invites_Or_Requests.Definition);
         Swagger.Servers.Register (Server, API_Create_Asset_Invites.Definition);
         Swagger.Servers.Register (Server, API_Create_Membership_Or_Partnership_Invites.Definition);
         Swagger.Servers.Register (Server, API_Get_Invites.Definition);
         Swagger.Servers.Register (Server, API_Respond_Business_Access_Invites.Definition);
         Swagger.Servers.Register (Server, API_Delete_Business_Membership.Definition);
         Swagger.Servers.Register (Server, API_Delete_Business_Partners.Definition);
         Swagger.Servers.Register (Server, API_Get_Business_Employers.Definition);
         Swagger.Servers.Register (Server, API_Get_Business_Members.Definition);
         Swagger.Servers.Register (Server, API_Get_Business_Partners.Definition);
         Swagger.Servers.Register (Server, API_Update_Business_Memberships.Definition);
         Swagger.Servers.Register (Server, API_Campaign_Targeting_Analytics_Get.Definition);
         Swagger.Servers.Register (Server, API_Campaigns_Analytics.Definition);
         Swagger.Servers.Register (Server, API_Campaigns_Create.Definition);
         Swagger.Servers.Register (Server, API_Campaigns_Get.Definition);
         Swagger.Servers.Register (Server, API_Campaigns_List.Definition);
         Swagger.Servers.Register (Server, API_Campaigns_Update.Definition);
         Swagger.Servers.Register (Server, API_Catalogs_Create.Definition);
         Swagger.Servers.Register (Server, API_Catalogs_List.Definition);
         Swagger.Servers.Register (Server, API_Catalogs_Product_Group_Pins_List.Definition);
         Swagger.Servers.Register (Server, API_Catalogs_Product_Groups_Create.Definition);
         Swagger.Servers.Register (Server, API_Catalogs_Product_Groups_Create_Many.Definition);
         Swagger.Servers.Register (Server, API_Catalogs_Product_Groups_Delete.Definition);
         Swagger.Servers.Register (Server, API_Catalogs_Product_Groups_Delete_Many.Definition);
         Swagger.Servers.Register (Server, API_Catalogs_Product_Groups_Get.Definition);
         Swagger.Servers.Register (Server, API_Catalogs_Product_Groups_List.Definition);
         Swagger.Servers.Register (Server, API_Catalogs_Product_Groups_Product_Counts_Get.Definition);
         Swagger.Servers.Register (Server, API_Catalogs_Product_Groups_Update.Definition);
         Swagger.Servers.Register (Server, API_Feed_Processing_Results_List.Definition);
         Swagger.Servers.Register (Server, API_Feeds_Create.Definition);
         Swagger.Servers.Register (Server, API_Feeds_Delete.Definition);
         Swagger.Servers.Register (Server, API_Feeds_Get.Definition);
         Swagger.Servers.Register (Server, API_Feeds_Ingest.Definition);
         Swagger.Servers.Register (Server, API_Feeds_List.Definition);
         Swagger.Servers.Register (Server, API_Feeds_Update.Definition);
         Swagger.Servers.Register (Server, API_Items_Batch_Get.Definition);
         Swagger.Servers.Register (Server, API_Items_Batch_Post.Definition);
         Swagger.Servers.Register (Server, API_Items_Get.Definition);
         Swagger.Servers.Register (Server, API_Items_Issues_List.Definition);
         Swagger.Servers.Register (Server, API_Items_Post.Definition);
         Swagger.Servers.Register (Server, API_Products_By_Product_Group_Filter_List.Definition);
         Swagger.Servers.Register (Server, API_Reports_Create.Definition);
         Swagger.Servers.Register (Server, API_Reports_Get.Definition);
         Swagger.Servers.Register (Server, API_Reports_Stats.Definition);
         Swagger.Servers.Register (Server, API_Events_Create.Definition);
         Swagger.Servers.Register (Server, API_Conversion_Tags_Create.Definition);
         Swagger.Servers.Register (Server, API_Conversion_Tags_Get.Definition);
         Swagger.Servers.Register (Server, API_Conversion_Tags_List.Definition);
         Swagger.Servers.Register (Server, API_Ocpm_Eligible_Conversion_Tags_Get.Definition);
         Swagger.Servers.Register (Server, API_Page_Visit_Conversion_Tags_Get.Definition);
         Swagger.Servers.Register (Server, API_Customer_Lists_Create.Definition);
         Swagger.Servers.Register (Server, API_Customer_Lists_Get.Definition);
         Swagger.Servers.Register (Server, API_Customer_Lists_List.Definition);
         Swagger.Servers.Register (Server, API_Customer_Lists_Update.Definition);
         Swagger.Servers.Register (Server, API_Integrations_Commerce_Del.Definition);
         Swagger.Servers.Register (Server, API_Integrations_Commerce_Get.Definition);
         Swagger.Servers.Register (Server, API_Integrations_Commerce_Patch.Definition);
         Swagger.Servers.Register (Server, API_Integrations_Commerce_Post.Definition);
         Swagger.Servers.Register (Server, API_Integrations_Get_By_Id.Definition);
         Swagger.Servers.Register (Server, API_Integrations_Get_List.Definition);
         Swagger.Servers.Register (Server, API_Integrations_Logs_Post.Definition);
         Swagger.Servers.Register (Server, API_Country_Keywords_Metrics_Get.Definition);
         Swagger.Servers.Register (Server, API_Keywords_Create.Definition);
         Swagger.Servers.Register (Server, API_Keywords_Get.Definition);
         Swagger.Servers.Register (Server, API_Keywords_Update.Definition);
         Swagger.Servers.Register (Server, API_Trending_Keywords_List.Definition);
         Swagger.Servers.Register (Server, API_Ad_Accounts_Subscriptions_Del_By_Id.Definition);
         Swagger.Servers.Register (Server, API_Ad_Accounts_Subscriptions_Get_By_Id.Definition);
         Swagger.Servers.Register (Server, API_Ad_Accounts_Subscriptions_Get_List.Definition);
         Swagger.Servers.Register (Server, API_Ad_Accounts_Subscriptions_Post.Definition);
         Swagger.Servers.Register (Server, API_Lead_Form_Get.Definition);
         Swagger.Servers.Register (Server, API_Lead_Form_Test_Create.Definition);
         Swagger.Servers.Register (Server, API_Lead_Forms_Create.Definition);
         Swagger.Servers.Register (Server, API_Lead_Forms_List.Definition);
         Swagger.Servers.Register (Server, API_Lead_Forms_Update.Definition);
         Swagger.Servers.Register (Server, API_Leads_Export_Create.Definition);
         Swagger.Servers.Register (Server, API_Leads_Export_Get.Definition);
         Swagger.Servers.Register (Server, API_Media_Create.Definition);
         Swagger.Servers.Register (Server, API_Media_Get.Definition);
         Swagger.Servers.Register (Server, API_Media_List.Definition);
         Swagger.Servers.Register (Server, API_Oauth_Token.Definition);
         Swagger.Servers.Register (Server, API_Order_Lines_Get.Definition);
         Swagger.Servers.Register (Server, API_Order_Lines_List.Definition);
         Swagger.Servers.Register (Server, API_Multi_Pins_Analytics.Definition);
         Swagger.Servers.Register (Server, API_Pins_Analytics.Definition);
         Swagger.Servers.Register (Server, API_Pins_Create.Definition);
         Swagger.Servers.Register (Server, API_Pins_Delete.Definition);
         Swagger.Servers.Register (Server, API_Pins_Get.Definition);
         Swagger.Servers.Register (Server, API_Pins_List.Definition);
         Swagger.Servers.Register (Server, API_Pins_Save.Definition);
         Swagger.Servers.Register (Server, API_Pins_Update.Definition);
         Swagger.Servers.Register (Server, API_Product_Group_Promotions_Create.Definition);
         Swagger.Servers.Register (Server, API_Product_Group_Promotions_Get.Definition);
         Swagger.Servers.Register (Server, API_Product_Group_Promotions_List.Definition);
         Swagger.Servers.Register (Server, API_Product_Group_Promotions_Update.Definition);
         Swagger.Servers.Register (Server, API_Product_Groups_Analytics.Definition);
         Swagger.Servers.Register (Server, API_Ad_Account_Countries_Get.Definition);
         Swagger.Servers.Register (Server, API_Delivery_Metrics_Get.Definition);
         Swagger.Servers.Register (Server, API_Interest_Targeting_Options_Get.Definition);
         Swagger.Servers.Register (Server, API_Lead_Form_Questions_Get.Definition);
         Swagger.Servers.Register (Server, API_Metrics_Ready_State_Get.Definition);
         Swagger.Servers.Register (Server, API_Targeting_Options_Get.Definition);
         Swagger.Servers.Register (Server, API_Search_Partner_Pins.Definition);
         Swagger.Servers.Register (Server, API_Search_User_Boards_Get.Definition);
         Swagger.Servers.Register (Server, API_Search_User_Pins_List.Definition);
         Swagger.Servers.Register (Server, API_Targeting_Template_Create.Definition);
         Swagger.Servers.Register (Server, API_Targeting_Template_List.Definition);
         Swagger.Servers.Register (Server, API_Targeting_Template_Update.Definition);
         Swagger.Servers.Register (Server, API_Terms_Related_List.Definition);
         Swagger.Servers.Register (Server, API_Terms_Suggested_List.Definition);
         Swagger.Servers.Register (Server, API_Terms_Of_Service_Get.Definition);
         Swagger.Servers.Register (Server, API_Boards_User_Follows_List.Definition);
         Swagger.Servers.Register (Server, API_Follow_User_Update.Definition);
         Swagger.Servers.Register (Server, API_Followers_List.Definition);
         Swagger.Servers.Register (Server, API_Linked_Business_Accounts_Get.Definition);
         Swagger.Servers.Register (Server, API_Unverify_Website_Delete.Definition);
         Swagger.Servers.Register (Server, API_User_Account_Analytics.Definition);
         Swagger.Servers.Register (Server, API_User_Account_Analytics_Top_Pins.Definition);
         Swagger.Servers.Register (Server, API_User_Account_Analytics_Top_Video_Pins.Definition);
         Swagger.Servers.Register (Server, API_User_Account_Followed_Interests.Definition);
         Swagger.Servers.Register (Server, API_User_Account_Get.Definition);
         Swagger.Servers.Register (Server, API_User_Following_Get.Definition);
         Swagger.Servers.Register (Server, API_User_Websites_Get.Definition);
         Swagger.Servers.Register (Server, API_Verify_Website_Update.Definition);
         Swagger.Servers.Register (Server, API_Website_Verification_Get.Definition);
      end Register;

      protected body Server is
         --  Get ad account analytics
         procedure Ad_Account_Analytics
            (Ad_Account_Id : in Swagger.UString;
             Start_Date : in Swagger.Date;
             End_Date : in Swagger.Date;
             Columns : in Swagger.UString_Vectors.Vector;
             Granularity : in Granularity_Type;
             Click_Window_Days : in Swagger.Nullable_Integer;
             Engagement_Window_Days : in Swagger.Nullable_Integer;
             View_Window_Days : in Swagger.Nullable_Integer;
             Conversion_Report_Time : in Swagger.Nullable_UString;
             Result : out .Models.AdAccountAnalyticsResponseInner_Type_Vectors.Vector;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Ad_Account_Analytics
               (Ad_Account_Id,
                Start_Date,
                End_Date,
                Columns,
                Granularity,
                Click_Window_Days,
                Engagement_Window_Days,
                View_Window_Days,
                Conversion_Report_Time,
                Result,
                Context);
         end Ad_Account_Analytics;

         --  Get targeting analytics for an ad account
         procedure Ad_Account_Targeting_Analytics_Get
            (Ad_Account_Id : in Swagger.UString;
             Start_Date : in Swagger.Date;
             End_Date : in Swagger.Date;
             Targeting_Types : in .Models.AdsAnalyticsTargetingType_Type_Vectors.Vector;
             Columns : in Swagger.UString_Vectors.Vector;
             Granularity : in Granularity_Type;
             Click_Window_Days : in Swagger.Nullable_Integer;
             Engagement_Window_Days : in Swagger.Nullable_Integer;
             View_Window_Days : in Swagger.Nullable_Integer;
             Conversion_Report_Time : in Swagger.Nullable_UString;
             Attribution_Types : in ConversionReportAttributionType_Type;
             Result : out .Models.MetricsResponse_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Ad_Account_Targeting_Analytics_Get
               (Ad_Account_Id,
                Start_Date,
                End_Date,
                Targeting_Types,
                Columns,
                Granularity,
                Click_Window_Days,
                Engagement_Window_Days,
                View_Window_Days,
                Conversion_Report_Time,
                Attribution_Types,
                Result,
                Context);
         end Ad_Account_Targeting_Analytics_Get;

         --  Create ad account
         procedure Ad_Accounts_Create
            (Ad_Account_Create_Request_Type : in AdAccountCreateRequest_Type;
             Result : out .Models.AdAccount_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Ad_Accounts_Create
               (Ad_Account_Create_Request_Type,
                Result,
                Context);
         end Ad_Accounts_Create;

         --  Get ad account
         procedure Ad_Accounts_Get
            (Ad_Account_Id : in Swagger.UString;
             Result : out .Models.AdAccount_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Ad_Accounts_Get
               (Ad_Account_Id,
                Result,
                Context);
         end Ad_Accounts_Get;

         --  List ad accounts
         procedure Ad_Accounts_List
            (Bookmark : in Swagger.Nullable_UString;
             Page_Size : in Swagger.Nullable_Integer;
             Include_Shared_Accounts : in Swagger.Nullable_Boolean;
             Result : out .Models.AdAccountsList200Response_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Ad_Accounts_List
               (Bookmark,
                Page_Size,
                Include_Shared_Accounts,
                Result,
                Context);
         end Ad_Accounts_List;

         --  Create a request for a Marketing Mix Modeling (MMM) report
         procedure Analytics_Create_Mmm_Report
            (Ad_Account_Id : in Swagger.UString;
             Create_MMMReport_Request_Type : in CreateMMMReportRequest_Type;
             Result : out .Models.CreateMMMReportResponse_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Analytics_Create_Mmm_Report
               (Ad_Account_Id,
                Create_MMMReport_Request_Type,
                Result,
                Context);
         end Analytics_Create_Mmm_Report;

         --  Create async request for an account analytics report
         procedure Analytics_Create_Report
            (Ad_Account_Id : in Swagger.UString;
             Ads_Analytics_Create_Async_Request_Type : in AdsAnalyticsCreateAsyncRequest_Type;
             Result : out .Models.AdsAnalyticsCreateAsyncResponse_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Analytics_Create_Report
               (Ad_Account_Id,
                Ads_Analytics_Create_Async_Request_Type,
                Result,
                Context);
         end Analytics_Create_Report;

         --  Create async request for an analytics report using a template
         procedure Analytics_Create_Template_Report
            (Ad_Account_Id : in Swagger.UString;
             Template_Id : in Swagger.UString;
             Start_Date : in Swagger.Nullable_Date;
             End_Date : in Swagger.Nullable_Date;
             Granularity : in Granularity_Type;
             Result : out .Models.AdsAnalyticsCreateAsyncResponse_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Analytics_Create_Template_Report
               (Ad_Account_Id,
                Template_Id,
                Start_Date,
                End_Date,
                Granularity,
                Result,
                Context);
         end Analytics_Create_Template_Report;

         --  Get advertiser Marketing Mix Modeling (MMM) report.
         procedure Analytics_Get_Mmm_Report
            (Ad_Account_Id : in Swagger.UString;
             Token : in Swagger.UString;
             Result : out .Models.GetMMMReportResponse_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Analytics_Get_Mmm_Report
               (Ad_Account_Id,
                Token,
                Result,
                Context);
         end Analytics_Get_Mmm_Report;

         --  Get the account analytics report created by the async call
         procedure Analytics_Get_Report
            (Ad_Account_Id : in Swagger.UString;
             Token : in Swagger.UString;
             Result : out .Models.AdsAnalyticsGetAsyncResponse_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Analytics_Get_Report
               (Ad_Account_Id,
                Token,
                Result,
                Context);
         end Analytics_Get_Report;

         --  Delete ads data for ad account in API Sandbox
         procedure Sandbox_Delete
            (Ad_Account_Id : in Swagger.UString;
             Result : out Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Sandbox_Delete
               (Ad_Account_Id,
                Result,
                Context);
         end Sandbox_Delete;

         --  List templates
         procedure Templates_List
            (Ad_Account_Id : in Swagger.UString;
             Page_Size : in Swagger.Nullable_Integer;
             Order : in Swagger.Nullable_UString;
             Bookmark : in Swagger.Nullable_UString;
             Result : out .Models.TemplatesList200Response_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Templates_List
               (Ad_Account_Id,
                Page_Size,
                Order,
                Bookmark,
                Result,
                Context);
         end Templates_List;

         --  Get ad group analytics
         procedure Ad_Groups_Analytics
            (Ad_Account_Id : in Swagger.UString;
             Start_Date : in Swagger.Date;
             End_Date : in Swagger.Date;
             Ad_Group_Ids : in Swagger.UString_Vectors.Vector;
             Columns : in Swagger.UString_Vectors.Vector;
             Granularity : in Granularity_Type;
             Click_Window_Days : in Swagger.Nullable_Integer;
             Engagement_Window_Days : in Swagger.Nullable_Integer;
             View_Window_Days : in Swagger.Nullable_Integer;
             Conversion_Report_Time : in Swagger.Nullable_UString;
             Result : out .Models.AdGroupsAnalyticsResponseInner_Type_Vectors.Vector;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Ad_Groups_Analytics
               (Ad_Account_Id,
                Start_Date,
                End_Date,
                Ad_Group_Ids,
                Columns,
                Granularity,
                Click_Window_Days,
                Engagement_Window_Days,
                View_Window_Days,
                Conversion_Report_Time,
                Result,
                Context);
         end Ad_Groups_Analytics;

         --  Get audience sizing
         procedure Ad_Groups_Audience_Sizing
            (Ad_Account_Id : in Swagger.UString;
             Ad_Group_Audience_Sizing_Request_Type : in AdGroupAudienceSizingRequest_Type;
             Result : out .Models.AdGroupAudienceSizingResponse_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Ad_Groups_Audience_Sizing
               (Ad_Account_Id,
                Ad_Group_Audience_Sizing_Request_Type,
                Result,
                Context);
         end Ad_Groups_Audience_Sizing;

         --  Get bid floors
         procedure Ad_Groups_Bid_Floor_Get
            (Ad_Account_Id : in Swagger.UString;
             Bid_Floor_Request_Type : in BidFloorRequest_Type;
             Result : out .Models.BidFloor_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Ad_Groups_Bid_Floor_Get
               (Ad_Account_Id,
                Bid_Floor_Request_Type,
                Result,
                Context);
         end Ad_Groups_Bid_Floor_Get;

         --  Create ad groups
         procedure Ad_Groups_Create
            (Ad_Account_Id : in Swagger.UString;
             Ad_Group_Create_Request : in .Models.AdGroupCreateRequest_Type_Vectors.Vector;
             Result : out .Models.AdGroupArrayResponse_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Ad_Groups_Create
               (Ad_Account_Id,
                Ad_Group_Create_Request,
                Result,
                Context);
         end Ad_Groups_Create;

         --  Get ad group
         procedure Ad_Groups_Get
            (Ad_Account_Id : in Swagger.UString;
             Ad_Group_Id : in Swagger.UString;
             Result : out .Models.AdGroupResponse_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Ad_Groups_Get
               (Ad_Account_Id,
                Ad_Group_Id,
                Result,
                Context);
         end Ad_Groups_Get;

         --  List ad groups
         procedure Ad_Groups_List
            (Ad_Account_Id : in Swagger.UString;
             Campaign_Ids : in Swagger.UString_Vectors.Vector;
             Ad_Group_Ids : in Swagger.UString_Vectors.Vector;
             Entity_Statuses : in Swagger.UString_Vectors.Vector;
             Page_Size : in Swagger.Nullable_Integer;
             Order : in Swagger.Nullable_UString;
             Bookmark : in Swagger.Nullable_UString;
             Translate_Interests_To_Names : in Swagger.Nullable_Boolean;
             Result : out .Models.AdGroupsList200Response_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Ad_Groups_List
               (Ad_Account_Id,
                Campaign_Ids,
                Ad_Group_Ids,
                Entity_Statuses,
                Page_Size,
                Order,
                Bookmark,
                Translate_Interests_To_Names,
                Result,
                Context);
         end Ad_Groups_List;

         --  Get targeting analytics for ad groups
         procedure Ad_Groups_Targeting_Analytics_Get
            (Ad_Account_Id : in Swagger.UString;
             Ad_Group_Ids : in Swagger.UString_Vectors.Vector;
             Start_Date : in Swagger.Date;
             End_Date : in Swagger.Date;
             Targeting_Types : in .Models.AdsAnalyticsTargetingType_Type_Vectors.Vector;
             Columns : in Swagger.UString_Vectors.Vector;
             Granularity : in Granularity_Type;
             Click_Window_Days : in Swagger.Nullable_Integer;
             Engagement_Window_Days : in Swagger.Nullable_Integer;
             View_Window_Days : in Swagger.Nullable_Integer;
             Conversion_Report_Time : in Swagger.Nullable_UString;
             Attribution_Types : in ConversionReportAttributionType_Type;
             Result : out .Models.MetricsResponse_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Ad_Groups_Targeting_Analytics_Get
               (Ad_Account_Id,
                Ad_Group_Ids,
                Start_Date,
                End_Date,
                Targeting_Types,
                Columns,
                Granularity,
                Click_Window_Days,
                Engagement_Window_Days,
                View_Window_Days,
                Conversion_Report_Time,
                Attribution_Types,
                Result,
                Context);
         end Ad_Groups_Targeting_Analytics_Get;

         --  Update ad groups
         procedure Ad_Groups_Update
            (Ad_Account_Id : in Swagger.UString;
             Ad_Group_Update_Request : in .Models.AdGroupUpdateRequest_Type_Vectors.Vector;
             Result : out .Models.AdGroupArrayResponse_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Ad_Groups_Update
               (Ad_Account_Id,
                Ad_Group_Update_Request,
                Result,
                Context);
         end Ad_Groups_Update;

         --  Create ad preview with pin or image
         procedure Ad_Previews_Create
            (Ad_Account_Id : in Swagger.UString;
             Ad_Preview_Request_Type : in AdPreviewRequest_Type;
             Result : out .Models.AdPreviewURLResponse_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Ad_Previews_Create
               (Ad_Account_Id,
                Ad_Preview_Request_Type,
                Result,
                Context);
         end Ad_Previews_Create;

         --  Get targeting analytics for ads
         procedure Ad_Targeting_Analytics_Get
            (Ad_Account_Id : in Swagger.UString;
             Ad_Ids : in Swagger.UString_Vectors.Vector;
             Start_Date : in Swagger.Date;
             End_Date : in Swagger.Date;
             Targeting_Types : in .Models.AdsAnalyticsAdTargetingType_Type_Vectors.Vector;
             Columns : in Swagger.UString_Vectors.Vector;
             Granularity : in Granularity_Type;
             Click_Window_Days : in Swagger.Nullable_Integer;
             Engagement_Window_Days : in Swagger.Nullable_Integer;
             View_Window_Days : in Swagger.Nullable_Integer;
             Conversion_Report_Time : in Swagger.Nullable_UString;
             Attribution_Types : in ConversionReportAttributionType_Type;
             Result : out .Models.MetricsResponse_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Ad_Targeting_Analytics_Get
               (Ad_Account_Id,
                Ad_Ids,
                Start_Date,
                End_Date,
                Targeting_Types,
                Columns,
                Granularity,
                Click_Window_Days,
                Engagement_Window_Days,
                View_Window_Days,
                Conversion_Report_Time,
                Attribution_Types,
                Result,
                Context);
         end Ad_Targeting_Analytics_Get;

         --  Get ad analytics
         procedure Ads_Analytics
            (Ad_Account_Id : in Swagger.UString;
             Start_Date : in Swagger.Date;
             End_Date : in Swagger.Date;
             Columns : in Swagger.UString_Vectors.Vector;
             Granularity : in Granularity_Type;
             Ad_Ids : in Swagger.UString_Vectors.Vector;
             Click_Window_Days : in Swagger.Nullable_Integer;
             Engagement_Window_Days : in Swagger.Nullable_Integer;
             View_Window_Days : in Swagger.Nullable_Integer;
             Conversion_Report_Time : in Swagger.Nullable_UString;
             Pin_Ids : in Swagger.UString_Vectors.Vector;
             Campaign_Ids : in Swagger.UString_Vectors.Vector;
             Result : out .Models.AdsAnalyticsResponseInner_Type_Vectors.Vector;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Ads_Analytics
               (Ad_Account_Id,
                Start_Date,
                End_Date,
                Columns,
                Granularity,
                Ad_Ids,
                Click_Window_Days,
                Engagement_Window_Days,
                View_Window_Days,
                Conversion_Report_Time,
                Pin_Ids,
                Campaign_Ids,
                Result,
                Context);
         end Ads_Analytics;

         --  Create ads
         procedure Ads_Create
            (Ad_Account_Id : in Swagger.UString;
             Ad_Create_Request : in .Models.AdCreateRequest_Type_Vectors.Vector;
             Result : out .Models.AdArrayResponse_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Ads_Create
               (Ad_Account_Id,
                Ad_Create_Request,
                Result,
                Context);
         end Ads_Create;

         --  Get ad
         procedure Ads_Get
            (Ad_Account_Id : in Swagger.UString;
             Ad_Id : in Swagger.UString;
             Result : out .Models.AdResponse_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Ads_Get
               (Ad_Account_Id,
                Ad_Id,
                Result,
                Context);
         end Ads_Get;

         --  List ads
         procedure Ads_List
            (Ad_Account_Id : in Swagger.UString;
             Campaign_Ids : in Swagger.UString_Vectors.Vector;
             Ad_Group_Ids : in Swagger.UString_Vectors.Vector;
             Ad_Ids : in Swagger.UString_Vectors.Vector;
             Entity_Statuses : in Swagger.UString_Vectors.Vector;
             Page_Size : in Swagger.Nullable_Integer;
             Order : in Swagger.Nullable_UString;
             Bookmark : in Swagger.Nullable_UString;
             Result : out .Models.AdsList200Response_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Ads_List
               (Ad_Account_Id,
                Campaign_Ids,
                Ad_Group_Ids,
                Ad_Ids,
                Entity_Statuses,
                Page_Size,
                Order,
                Bookmark,
                Result,
                Context);
         end Ads_List;

         --  Update ads
         procedure Ads_Update
            (Ad_Account_Id : in Swagger.UString;
             Ad_Update_Request : in .Models.AdUpdateRequest_Type_Vectors.Vector;
             Result : out .Models.AdArrayResponse_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Ads_Update
               (Ad_Account_Id,
                Ad_Update_Request,
                Result,
                Context);
         end Ads_Update;

         --  Get item bid options (POST)
         procedure Advanced_Auction_Items_Get_Post
            (Advanced_Auction_Items_Get_Request_Type : in AdvancedAuctionItemsGetRequest_Type;
             Ad_Account_Id : in Swagger.Nullable_UString;
             Result : out .Models.AdvancedAuctionItems_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Advanced_Auction_Items_Get_Post
               (Advanced_Auction_Items_Get_Request_Type,
                Ad_Account_Id,
                Result,
                Context);
         end Advanced_Auction_Items_Get_Post;

         --  Operate on item level bid options
         procedure Advanced_Auction_Items_Submit_Post
            (Advanced_Auction_Items_Submit_Request_Type : in AdvancedAuctionItemsSubmitRequest_Type;
             Ad_Account_Id : in Swagger.Nullable_UString;
             Result : out .Models.AdvancedAuctionProcessedItems_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Advanced_Auction_Items_Submit_Post
               (Advanced_Auction_Items_Submit_Request_Type,
                Ad_Account_Id,
                Result,
                Context);
         end Advanced_Auction_Items_Submit_Post;

         --  Get audience insights
         procedure Audience_Insights_Get
            (Ad_Account_Id : in Swagger.UString;
             Audience_Insight_Type : in AudienceInsightType_Type;
             Result : out .Models.AudienceInsightsResponse_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Audience_Insights_Get
               (Ad_Account_Id,
                Audience_Insight_Type,
                Result,
                Context);
         end Audience_Insights_Get;

         --  Get audience insights scope and type
         procedure Audience_Insights_Scope_And_Type_Get
            (Ad_Account_Id : in Swagger.UString;
             Result : out .Models.AudienceDefinitionResponse_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Audience_Insights_Scope_And_Type_Get
               (Ad_Account_Id,
                Result,
                Context);
         end Audience_Insights_Scope_And_Type_Get;

         --  List accounts with access to an audience owned by an ad account
         procedure Ad_Accounts_Audiences_Shared_Accounts_List
            (Ad_Account_Id : in Swagger.UString;
             Audience_Id : in Swagger.UString;
             Account_Type : in AudienceAccountType_Type;
             Page_Size : in Swagger.Nullable_Integer;
             Bookmark : in Swagger.Nullable_UString;
             Result : out .Models.AdAccountsAudiencesSharedAccountsList200Response_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Ad_Accounts_Audiences_Shared_Accounts_List
               (Ad_Account_Id,
                Audience_Id,
                Account_Type,
                Page_Size,
                Bookmark,
                Result,
                Context);
         end Ad_Accounts_Audiences_Shared_Accounts_List;

         --  List accounts with access to an audience owned by a business
         procedure Business_Account_Audiences_Shared_Accounts_List
            (Business_Id : in Swagger.UString;
             Audience_Id : in Swagger.UString;
             Account_Type : in AudienceAccountType_Type;
             Page_Size : in Swagger.Nullable_Integer;
             Bookmark : in Swagger.Nullable_UString;
             Result : out .Models.AdAccountsAudiencesSharedAccountsList200Response_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Business_Account_Audiences_Shared_Accounts_List
               (Business_Id,
                Audience_Id,
                Account_Type,
                Page_Size,
                Bookmark,
                Result,
                Context);
         end Business_Account_Audiences_Shared_Accounts_List;

         --  List received audiences for a business
         procedure Shared_Audiences_For_Business_List
            (Business_Id : in Swagger.UString;
             Bookmark : in Swagger.Nullable_UString;
             Order : in Swagger.Nullable_UString;
             Page_Size : in Swagger.Nullable_Integer;
             Result : out .Models.AudiencesList200Response_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Shared_Audiences_For_Business_List
               (Business_Id,
                Bookmark,
                Order,
                Page_Size,
                Result,
                Context);
         end Shared_Audiences_For_Business_List;

         --  Update audience sharing between ad accounts
         procedure Update_Ad_Account_To_Ad_Account_Shared_Audience
            (Ad_Account_Id : in Swagger.UString;
             Shared_Audience_Type : in SharedAudience_Type;
             Result : out .Models.SharedAudienceResponse_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Update_Ad_Account_To_Ad_Account_Shared_Audience
               (Ad_Account_Id,
                Shared_Audience_Type,
                Result,
                Context);
         end Update_Ad_Account_To_Ad_Account_Shared_Audience;

         --  Update audience sharing from an ad account to businesses
         procedure Update_Ad_Account_To_Business_Shared_Audience
            (Ad_Account_Id : in Swagger.UString;
             Business_Shared_Audience_Type : in BusinessSharedAudience_Type;
             Result : out .Models.BusinessSharedAudienceResponse_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Update_Ad_Account_To_Business_Shared_Audience
               (Ad_Account_Id,
                Business_Shared_Audience_Type,
                Result,
                Context);
         end Update_Ad_Account_To_Business_Shared_Audience;

         --  Update audience sharing from a business to ad accounts
         procedure Update_Business_To_Ad_Account_Shared_Audience
            (Business_Id : in Swagger.UString;
             Shared_Audience_Type : in SharedAudience_Type;
             Result : out .Models.SharedAudienceResponse_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Update_Business_To_Ad_Account_Shared_Audience
               (Business_Id,
                Shared_Audience_Type,
                Result,
                Context);
         end Update_Business_To_Ad_Account_Shared_Audience;

         --  Update audience sharing between businesses
         procedure Update_Business_To_Business_Shared_Audience
            (Business_Id : in Swagger.UString;
             Business_Shared_Audience_Type : in BusinessSharedAudience_Type;
             Result : out .Models.BusinessSharedAudienceResponse_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Update_Business_To_Business_Shared_Audience
               (Business_Id,
                Business_Shared_Audience_Type,
                Result,
                Context);
         end Update_Business_To_Business_Shared_Audience;

         --  Create audience
         procedure Audiences_Create
            (Ad_Account_Id : in Swagger.UString;
             Audience_Create_Request_Type : in AudienceCreateRequest_Type;
             Result : out .Models.Audience_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Audiences_Create
               (Ad_Account_Id,
                Audience_Create_Request_Type,
                Result,
                Context);
         end Audiences_Create;

         --  Create custom audience
         procedure Audiences_Create_Custom
            (Ad_Account_Id : in Swagger.UString;
             Audience_Create_Custom_Request_Type : in AudienceCreateCustomRequest_Type;
             Result : out .Models.Audience_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Audiences_Create_Custom
               (Ad_Account_Id,
                Audience_Create_Custom_Request_Type,
                Result,
                Context);
         end Audiences_Create_Custom;

         --  Get audience
         procedure Audiences_Get
            (Ad_Account_Id : in Swagger.UString;
             Audience_Id : in Swagger.UString;
             Result : out .Models.Audience_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Audiences_Get
               (Ad_Account_Id,
                Audience_Id,
                Result,
                Context);
         end Audiences_Get;

         --  List audiences
         procedure Audiences_List
            (Ad_Account_Id : in Swagger.UString;
             Bookmark : in Swagger.Nullable_UString;
             Order : in Swagger.Nullable_UString;
             Page_Size : in Swagger.Nullable_Integer;
             Ownership_Type : in Swagger.Nullable_UString;
             Result : out .Models.AudiencesList200Response_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Audiences_List
               (Ad_Account_Id,
                Bookmark,
                Order,
                Page_Size,
                Ownership_Type,
                Result,
                Context);
         end Audiences_List;

         --  Update audience
         procedure Audiences_Update
            (Ad_Account_Id : in Swagger.UString;
             Audience_Id : in Swagger.UString;
             Audience_Update_Request_Type : in AudienceUpdateRequest_Type;
             Result : out .Models.Audience_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Audiences_Update
               (Ad_Account_Id,
                Audience_Id,
                Audience_Update_Request_Type,
                Result,
                Context);
         end Audiences_Update;

         --  Redeem ad credits
         procedure Ads_Credit_Redeem
            (Ad_Account_Id : in Swagger.UString;
             Ads_Credit_Redeem_Request_Type : in AdsCreditRedeemRequest_Type;
             Result : out .Models.AdsCreditRedeemResponse_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Ads_Credit_Redeem
               (Ad_Account_Id,
                Ads_Credit_Redeem_Request_Type,
                Result,
                Context);
         end Ads_Credit_Redeem;

         --  Get ads credit discounts
         procedure Ads_Credits_Discounts_Get
            (Ad_Account_Id : in Swagger.UString;
             Bookmark : in Swagger.Nullable_UString;
             Page_Size : in Swagger.Nullable_Integer;
             Result : out .Models.AdsCreditsDiscountsGet200Response_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Ads_Credits_Discounts_Get
               (Ad_Account_Id,
                Bookmark,
                Page_Size,
                Result,
                Context);
         end Ads_Credits_Discounts_Get;

         --  Get billing profiles
         procedure Billing_Profiles_Get
            (Ad_Account_Id : in Swagger.UString;
             Is_Active : in Boolean;
             Bookmark : in Swagger.Nullable_UString;
             Page_Size : in Swagger.Nullable_Integer;
             Result : out .Models.BillingProfilesGet200Response_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Billing_Profiles_Get
               (Ad_Account_Id,
                Is_Active,
                Bookmark,
                Page_Size,
                Result,
                Context);
         end Billing_Profiles_Get;

         --  Get Salesforce account details including bill_to information.
         procedure Ssio_Accounts_Get
            (Ad_Account_Id : in Swagger.UString;
             Result : out .Models.SSIOAccountResponse_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Ssio_Accounts_Get
               (Ad_Account_Id,
                Result,
                Context);
         end Ssio_Accounts_Get;

         --  Create insertion order through SSIO.
         procedure Ssio_Insertion_Order_Create
            (Ad_Account_Id : in Swagger.UString;
             S_SIOCreate_Insertion_Order_Request_Type : in SSIOCreateInsertionOrderRequest_Type;
             Result : out .Models.SSIOCreateInsertionOrderResponse_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Ssio_Insertion_Order_Create
               (Ad_Account_Id,
                S_SIOCreate_Insertion_Order_Request_Type,
                Result,
                Context);
         end Ssio_Insertion_Order_Create;

         --  Edit insertion order through SSIO.
         procedure Ssio_Insertion_Order_Edit
            (Ad_Account_Id : in Swagger.UString;
             S_SIOEdit_Insertion_Order_Request_Type : in SSIOEditInsertionOrderRequest_Type;
             Result : out .Models.SSIOEditInsertionOrderResponse_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Ssio_Insertion_Order_Edit
               (Ad_Account_Id,
                S_SIOEdit_Insertion_Order_Request_Type,
                Result,
                Context);
         end Ssio_Insertion_Order_Edit;

         --  Get insertion order status by ad account id.
         procedure Ssio_Insertion_Orders_Status_Get_By_Ad_Account
            (Ad_Account_Id : in Swagger.UString;
             Bookmark : in Swagger.Nullable_UString;
             Page_Size : in Swagger.Nullable_Integer;
             Result : out .Models.SsioInsertionOrdersStatusGetByAdAccount200Response_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Ssio_Insertion_Orders_Status_Get_By_Ad_Account
               (Ad_Account_Id,
                Bookmark,
                Page_Size,
                Result,
                Context);
         end Ssio_Insertion_Orders_Status_Get_By_Ad_Account;

         --  Get insertion order status by pin order id.
         procedure Ssio_Insertion_Orders_Status_Get_By_Pin_Order_Id
            (Ad_Account_Id : in Swagger.UString;
             Pin_Order_Id : in Swagger.UString;
             Result : out .Models.SSIOInsertionOrderStatusResponse_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Ssio_Insertion_Orders_Status_Get_By_Pin_Order_Id
               (Ad_Account_Id,
                Pin_Order_Id,
                Result,
                Context);
         end Ssio_Insertion_Orders_Status_Get_By_Pin_Order_Id;

         --  Get Salesforce order lines by ad account id.
         procedure Ssio_Order_Lines_Get_By_Ad_Account
            (Ad_Account_Id : in Swagger.UString;
             Bookmark : in Swagger.Nullable_UString;
             Page_Size : in Swagger.Nullable_Integer;
             Pin_Order_Id : in Swagger.Nullable_UString;
             Result : out .Models.SsioOrderLinesGetByAdAccount200Response_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Ssio_Order_Lines_Get_By_Ad_Account
               (Ad_Account_Id,
                Bookmark,
                Page_Size,
                Pin_Order_Id,
                Result,
                Context);
         end Ssio_Order_Lines_Get_By_Ad_Account;

         --  Create board section
         procedure Board_Sections_Create
            (Board_Id : in Swagger.UString;
             Board_Section_Type : in BoardSection_Type;
             Ad_Account_Id : in Swagger.Nullable_UString;
             Result : out .Models.BoardSection_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Board_Sections_Create
               (Board_Id,
                Board_Section_Type,
                Ad_Account_Id,
                Result,
                Context);
         end Board_Sections_Create;

         --  Delete board section
         procedure Board_Sections_Delete
            (Board_Id : in Swagger.UString;
             Section_Id : in Swagger.UString;
             Ad_Account_Id : in Swagger.Nullable_UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Board_Sections_Delete
               (Board_Id,
                Section_Id,
                Ad_Account_Id,
                Context);
         end Board_Sections_Delete;

         --  List board sections
         procedure Board_Sections_List
            (Board_Id : in Swagger.UString;
             Ad_Account_Id : in Swagger.Nullable_UString;
             Bookmark : in Swagger.Nullable_UString;
             Page_Size : in Swagger.Nullable_Integer;
             Result : out .Models.BoardSectionsList200Response_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Board_Sections_List
               (Board_Id,
                Ad_Account_Id,
                Bookmark,
                Page_Size,
                Result,
                Context);
         end Board_Sections_List;

         --  List Pins on board section
         procedure Board_Sections_List_Pins
            (Board_Id : in Swagger.UString;
             Section_Id : in Swagger.UString;
             Ad_Account_Id : in Swagger.Nullable_UString;
             Bookmark : in Swagger.Nullable_UString;
             Page_Size : in Swagger.Nullable_Integer;
             Result : out .Models.BoardsListPins200Response_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Board_Sections_List_Pins
               (Board_Id,
                Section_Id,
                Ad_Account_Id,
                Bookmark,
                Page_Size,
                Result,
                Context);
         end Board_Sections_List_Pins;

         --  Update board section
         procedure Board_Sections_Update
            (Board_Id : in Swagger.UString;
             Section_Id : in Swagger.UString;
             Board_Section_Type : in BoardSection_Type;
             Ad_Account_Id : in Swagger.Nullable_UString;
             Result : out .Models.BoardSection_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Board_Sections_Update
               (Board_Id,
                Section_Id,
                Board_Section_Type,
                Ad_Account_Id,
                Result,
                Context);
         end Board_Sections_Update;

         --  Create board
         procedure Boards_Create
            (Board_Type : in Board_Type;
             Ad_Account_Id : in Swagger.Nullable_UString;
             Result : out .Models.Board_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Boards_Create
               (Board_Type,
                Ad_Account_Id,
                Result,
                Context);
         end Boards_Create;

         --  Delete board
         procedure Boards_Delete
            (Board_Id : in Swagger.UString;
             Ad_Account_Id : in Swagger.Nullable_UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Boards_Delete
               (Board_Id,
                Ad_Account_Id,
                Context);
         end Boards_Delete;

         --  Get board
         procedure Boards_Get
            (Board_Id : in Swagger.UString;
             Ad_Account_Id : in Swagger.Nullable_UString;
             Result : out .Models.Board_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Boards_Get
               (Board_Id,
                Ad_Account_Id,
                Result,
                Context);
         end Boards_Get;

         --  List boards
         procedure Boards_List
            (Ad_Account_Id : in Swagger.Nullable_UString;
             Bookmark : in Swagger.Nullable_UString;
             Page_Size : in Swagger.Nullable_Integer;
             Privacy : in Swagger.Nullable_UString;
             Result : out .Models.BoardsList200Response_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Boards_List
               (Ad_Account_Id,
                Bookmark,
                Page_Size,
                Privacy,
                Result,
                Context);
         end Boards_List;

         --  List Pins on board
         procedure Boards_List_Pins
            (Board_Id : in Swagger.UString;
             Bookmark : in Swagger.Nullable_UString;
             Page_Size : in Swagger.Nullable_Integer;
             Creative_Types : in Swagger.UString_Vectors.Vector;
             Ad_Account_Id : in Swagger.Nullable_UString;
             Pin_Metrics : in Swagger.Nullable_Boolean;
             Result : out .Models.BoardsListPins200Response_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Boards_List_Pins
               (Board_Id,
                Bookmark,
                Page_Size,
                Creative_Types,
                Ad_Account_Id,
                Pin_Metrics,
                Result,
                Context);
         end Boards_List_Pins;

         --  Update board
         procedure Boards_Update
            (Board_Id : in Swagger.UString;
             Board_Update_Type : in BoardUpdate_Type;
             Ad_Account_Id : in Swagger.Nullable_UString;
             Result : out .Models.Board_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Boards_Update
               (Board_Id,
                Board_Update_Type,
                Ad_Account_Id,
                Result,
                Context);
         end Boards_Update;

         --  Get advertiser entities in bulk
         procedure Bulk_Download_Create
            (Ad_Account_Id : in Swagger.UString;
             Bulk_Download_Request_Type : in BulkDownloadRequest_Type;
             Result : out .Models.BulkDownloadResponse_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Bulk_Download_Create
               (Ad_Account_Id,
                Bulk_Download_Request_Type,
                Result,
                Context);
         end Bulk_Download_Create;

         --  Download advertiser entities in bulk
         procedure Bulk_Request_Get
            (Ad_Account_Id : in Swagger.UString;
             Bulk_Request_Id : in Swagger.UString;
             Include_Details : in Swagger.Nullable_Boolean;
             Result : out .Models.BulkUpsertStatusResponse_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Bulk_Request_Get
               (Ad_Account_Id,
                Bulk_Request_Id,
                Include_Details,
                Result,
                Context);
         end Bulk_Request_Get;

         --  Create/update ad entities in bulk
         procedure Bulk_Upsert_Create
            (Ad_Account_Id : in Swagger.UString;
             Bulk_Upsert_Request_Type : in BulkUpsertRequest_Type;
             Result : out .Models.BulkUpsertResponse_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Bulk_Upsert_Create
               (Ad_Account_Id,
                Bulk_Upsert_Request_Type,
                Result,
                Context);
         end Bulk_Upsert_Create;

         --  Create a new asset group.
         procedure Asset_Group_Create
            (Business_Id : in Swagger.UString;
             Create_Asset_Group_Body_Type : in CreateAssetGroupBody_Type;
             Result : out .Models.CreateAssetGroupResponse_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Asset_Group_Create
               (Business_Id,
                Create_Asset_Group_Body_Type,
                Result,
                Context);
         end Asset_Group_Create;

         --  Delete asset groups.
         procedure Asset_Group_Delete
            (Business_Id : in Swagger.UString;
             Delete_Asset_Group_Body_Type : in DeleteAssetGroupBody_Type;
             Result : out .Models.DeleteAssetGroupResponse_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Asset_Group_Delete
               (Business_Id,
                Delete_Asset_Group_Body_Type,
                Result,
                Context);
         end Asset_Group_Delete;

         --  Update asset groups.
         procedure Asset_Group_Update
            (Business_Id : in Swagger.UString;
             Update_Asset_Group_Body_Type : in UpdateAssetGroupBody_Type;
             Result : out .Models.UpdateAssetGroupResponse_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Asset_Group_Update
               (Business_Id,
                Update_Asset_Group_Body_Type,
                Result,
                Context);
         end Asset_Group_Update;

         --  Get members with access to asset
         procedure Business_Asset_Members_Get
            (Business_Id : in Swagger.UString;
             Asset_Id : in Swagger.UString;
             Bookmark : in Swagger.Nullable_UString;
             Page_Size : in Swagger.Nullable_Integer;
             Start_Index : in Swagger.Nullable_Integer;
             Result : out .Models.BusinessAssetMembersGet200Response_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Business_Asset_Members_Get
               (Business_Id,
                Asset_Id,
                Bookmark,
                Page_Size,
                Start_Index,
                Result,
                Context);
         end Business_Asset_Members_Get;

         --  Get partners with access to asset
         procedure Business_Asset_Partners_Get
            (Business_Id : in Swagger.UString;
             Asset_Id : in Swagger.UString;
             Start_Index : in Swagger.Nullable_Integer;
             Bookmark : in Swagger.Nullable_UString;
             Page_Size : in Swagger.Nullable_Integer;
             Result : out .Models.BusinessAssetPartnersGet200Response_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Business_Asset_Partners_Get
               (Business_Id,
                Asset_Id,
                Start_Index,
                Bookmark,
                Page_Size,
                Result,
                Context);
         end Business_Asset_Partners_Get;

         --  List business assets
         procedure Business_Assets_Get
            (Business_Id : in Swagger.UString;
             Permissions : in .Models.PermissionsWithOwner_Type_Vectors.Vector;
             Child_Asset_Id : in Swagger.Nullable_UString;
             Asset_Group_Id : in Swagger.Nullable_UString;
             Asset_Type : in Swagger.Nullable_UString;
             Start_Index : in Swagger.Nullable_Integer;
             Bookmark : in Swagger.Nullable_UString;
             Page_Size : in Swagger.Nullable_Integer;
             Result : out .Models.BusinessAssetsGet200Response_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Business_Assets_Get
               (Business_Id,
                Permissions,
                Child_Asset_Id,
                Asset_Group_Id,
                Asset_Type,
                Start_Index,
                Bookmark,
                Page_Size,
                Result,
                Context);
         end Business_Assets_Get;

         --  Get assets assigned to a member
         procedure Business_Member_Assets_Get
            (Business_Id : in Swagger.UString;
             Member_Id : in Swagger.UString;
             Asset_Type : in Swagger.Nullable_UString;
             Start_Index : in Swagger.Nullable_Integer;
             Bookmark : in Swagger.Nullable_UString;
             Page_Size : in Swagger.Nullable_Integer;
             Result : out .Models.BusinessMemberAssetsGet200Response_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Business_Member_Assets_Get
               (Business_Id,
                Member_Id,
                Asset_Type,
                Start_Index,
                Bookmark,
                Page_Size,
                Result,
                Context);
         end Business_Member_Assets_Get;

         --  Delete member access to asset
         procedure Business_Members_Asset_Access_Delete
            (Business_Id : in Swagger.UString;
             Business_Members_Asset_Access_Delete_Request_Type : in BusinessMembersAssetAccessDeleteRequest_Type;
             Result : out .Models.DeleteMemberAccessResultsResponseArray_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Business_Members_Asset_Access_Delete
               (Business_Id,
                Business_Members_Asset_Access_Delete_Request_Type,
                Result,
                Context);
         end Business_Members_Asset_Access_Delete;

         --  Assign/Update member asset permissions
         procedure Business_Members_Asset_Access_Update
            (Business_Id : in Swagger.UString;
             Update_Member_Asset_Access_Body_Type : in UpdateMemberAssetAccessBody_Type;
             Result : out .Models.UpdateMemberAssetsResultsResponseArray_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Business_Members_Asset_Access_Update
               (Business_Id,
                Update_Member_Asset_Access_Body_Type,
                Result,
                Context);
         end Business_Members_Asset_Access_Update;

         --  Get assets assigned to a partner or assets assigned by a partner
         procedure Business_Partner_Asset_Access_Get
            (Business_Id : in Swagger.UString;
             Partner_Id : in Swagger.UString;
             Partner_Type : in .Models.PartnerType_Type;
             Asset_Type : in Swagger.Nullable_UString;
             Start_Index : in Swagger.Nullable_Integer;
             Page_Size : in Swagger.Nullable_Integer;
             Bookmark : in Swagger.Nullable_UString;
             Result : out .Models.BusinessPartnerAssetAccessGet200Response_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Business_Partner_Asset_Access_Get
               (Business_Id,
                Partner_Id,
                Partner_Type,
                Asset_Type,
                Start_Index,
                Page_Size,
                Bookmark,
                Result,
                Context);
         end Business_Partner_Asset_Access_Get;

         --  Delete partner access to asset
         procedure Delete_Partner_Asset_Access_Handler_Impl
            (Business_Id : in Swagger.UString;
             Delete_Partner_Asset_Access_Body_Type : in DeletePartnerAssetAccessBody_Type;
             Result : out .Models.DeletePartnerAssetsResultsResponseArray_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Delete_Partner_Asset_Access_Handler_Impl
               (Business_Id,
                Delete_Partner_Asset_Access_Body_Type,
                Result,
                Context);
         end Delete_Partner_Asset_Access_Handler_Impl;

         --  Assign/Update partner asset permissions
         procedure Update_Partner_Asset_Access_Handler_Impl
            (Business_Id : in Swagger.UString;
             Update_Partner_Asset_Access_Body_Type : in UpdatePartnerAssetAccessBody_Type;
             Result : out .Models.UpdatePartnerAssetsResultsResponseArray_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Update_Partner_Asset_Access_Handler_Impl
               (Business_Id,
                Update_Partner_Asset_Access_Body_Type,
                Result,
                Context);
         end Update_Partner_Asset_Access_Handler_Impl;

         --  Create a request to access an existing partner's assets.
         procedure Asset_Access_Requests_Create
            (Business_Id : in Swagger.UString;
             Create_Asset_Access_Request_Body_Type : in CreateAssetAccessRequestBody_Type;
             Result : out .Models.CreateAssetAccessRequestResponse_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Asset_Access_Requests_Create
               (Business_Id,
                Create_Asset_Access_Request_Body_Type,
                Result,
                Context);
         end Asset_Access_Requests_Create;

         --  Cancel invites/requests
         procedure Cancel_Invites_Or_Requests
            (Business_Id : in Swagger.UString;
             Cancel_Invites_Body_Type : in CancelInvitesBody_Type;
             Result : out .Models.DeleteInvitesResultsResponseArray_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Cancel_Invites_Or_Requests
               (Business_Id,
                Cancel_Invites_Body_Type,
                Result,
                Context);
         end Cancel_Invites_Or_Requests;

         --  Update invite/request with an asset permission
         procedure Create_Asset_Invites
            (Business_Id : in Swagger.UString;
             Create_Asset_Invites_Request_Type : in CreateAssetInvitesRequest_Type;
             Result : out .Models.UpdateInvitesResultsResponseArray_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Create_Asset_Invites
               (Business_Id,
                Create_Asset_Invites_Request_Type,
                Result,
                Context);
         end Create_Asset_Invites;

         --  Create invites or requests
         procedure Create_Membership_Or_Partnership_Invites
            (Business_Id : in Swagger.UString;
             Create_Membership_Or_Partnership_Invites_Body_Type : in CreateMembershipOrPartnershipInvitesBody_Type;
             Result : out .Models.CreateInvitesResultsResponseArray_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Create_Membership_Or_Partnership_Invites
               (Business_Id,
                Create_Membership_Or_Partnership_Invites_Body_Type,
                Result,
                Context);
         end Create_Membership_Or_Partnership_Invites;

         --  Get invites/requests
         procedure Get_Invites
            (Business_Id : in Swagger.UString;
             Is_Member : in Swagger.Nullable_Boolean;
             Invite_Status : in Swagger.UString_Vectors.Vector;
             Invite_Type : in InviteType_Type;
             Bookmark : in Swagger.Nullable_UString;
             Page_Size : in Swagger.Nullable_Integer;
             Result : out .Models.GetInvites200Response_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Get_Invites
               (Business_Id,
                Is_Member,
                Invite_Status,
                Invite_Type,
                Bookmark,
                Page_Size,
                Result,
                Context);
         end Get_Invites;

         --  Accept or decline an invite/request
         procedure Respond_Business_Access_Invites
            (Auth_Respond_Invites_Body_Type : in AuthRespondInvitesBody_Type;
             Result : out .Models.RespondToInvitesResponseArray_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Respond_Business_Access_Invites
               (Auth_Respond_Invites_Body_Type,
                Result,
                Context);
         end Respond_Business_Access_Invites;

         --  Terminate business memberships
         procedure Delete_Business_Membership
            (Business_Id : in Swagger.UString;
             Members_To_Delete_Body_Type : in MembersToDeleteBody_Type;
             Result : out .Models.DeletedMembersResponse_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Delete_Business_Membership
               (Business_Id,
                Members_To_Delete_Body_Type,
                Result,
                Context);
         end Delete_Business_Membership;

         --  Terminate business partnerships
         procedure Delete_Business_Partners
            (Business_Id : in Swagger.UString;
             Delete_Partners_Request_Type : in DeletePartnersRequest_Type;
             Result : out .Models.DeletePartnersResponse_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Delete_Business_Partners
               (Business_Id,
                Delete_Partners_Request_Type,
                Result,
                Context);
         end Delete_Business_Partners;

         --  List business employers for user
         procedure Get_Business_Employers
            (Page_Size : in Swagger.Nullable_Integer;
             Bookmark : in Swagger.Nullable_UString;
             Result : out .Models.GetBusinessEmployers200Response_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Get_Business_Employers
               (Page_Size,
                Bookmark,
                Result,
                Context);
         end Get_Business_Employers;

         --  Get business members
         procedure Get_Business_Members
            (Business_Id : in Swagger.UString;
             Assets_Summary : in Swagger.Nullable_Boolean;
             Business_Roles : in .Models.MemberBusinessRole_Type_Vectors.Vector;
             Member_Ids : in Swagger.Nullable_UString;
             Start_Index : in Swagger.Nullable_Integer;
             Bookmark : in Swagger.Nullable_UString;
             Page_Size : in Swagger.Nullable_Integer;
             Result : out .Models.GetBusinessMembers200Response_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Get_Business_Members
               (Business_Id,
                Assets_Summary,
                Business_Roles,
                Member_Ids,
                Start_Index,
                Bookmark,
                Page_Size,
                Result,
                Context);
         end Get_Business_Members;

         --  Get business partners
         procedure Get_Business_Partners
            (Business_Id : in Swagger.UString;
             Assets_Summary : in Swagger.Nullable_Boolean;
             Partner_Type : in PartnerType_Type;
             Partner_Ids : in Swagger.Nullable_UString;
             Start_Index : in Swagger.Nullable_Integer;
             Page_Size : in Swagger.Nullable_Integer;
             Bookmark : in Swagger.Nullable_UString;
             Result : out .Models.GetBusinessPartners200Response_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Get_Business_Partners
               (Business_Id,
                Assets_Summary,
                Partner_Type,
                Partner_Ids,
                Start_Index,
                Page_Size,
                Bookmark,
                Result,
                Context);
         end Get_Business_Partners;

         --  Update member's business role
         procedure Update_Business_Memberships
            (Business_Id : in Swagger.UString;
             Update_Member_Business_Role_Body : in .Models.UpdateMemberBusinessRoleBody_Type_Vectors.Vector;
             Result : out .Models.UpdateMemberResultsResponseArray_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Update_Business_Memberships
               (Business_Id,
                Update_Member_Business_Role_Body,
                Result,
                Context);
         end Update_Business_Memberships;

         --  Get targeting analytics for campaigns
         procedure Campaign_Targeting_Analytics_Get
            (Ad_Account_Id : in Swagger.UString;
             Campaign_Ids : in Swagger.UString_Vectors.Vector;
             Start_Date : in Swagger.Date;
             End_Date : in Swagger.Date;
             Targeting_Types : in .Models.AdsAnalyticsCampaignTargetingType_Type_Vectors.Vector;
             Columns : in Swagger.UString_Vectors.Vector;
             Granularity : in Granularity_Type;
             Click_Window_Days : in Swagger.Nullable_Integer;
             Engagement_Window_Days : in Swagger.Nullable_Integer;
             View_Window_Days : in Swagger.Nullable_Integer;
             Conversion_Report_Time : in Swagger.Nullable_UString;
             Attribution_Types : in ConversionReportAttributionType_Type;
             Result : out .Models.MetricsResponse_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Campaign_Targeting_Analytics_Get
               (Ad_Account_Id,
                Campaign_Ids,
                Start_Date,
                End_Date,
                Targeting_Types,
                Columns,
                Granularity,
                Click_Window_Days,
                Engagement_Window_Days,
                View_Window_Days,
                Conversion_Report_Time,
                Attribution_Types,
                Result,
                Context);
         end Campaign_Targeting_Analytics_Get;

         --  Get campaign analytics
         procedure Campaigns_Analytics
            (Ad_Account_Id : in Swagger.UString;
             Start_Date : in Swagger.Date;
             End_Date : in Swagger.Date;
             Campaign_Ids : in Swagger.UString_Vectors.Vector;
             Columns : in Swagger.UString_Vectors.Vector;
             Granularity : in Granularity_Type;
             Click_Window_Days : in Swagger.Nullable_Integer;
             Engagement_Window_Days : in Swagger.Nullable_Integer;
             View_Window_Days : in Swagger.Nullable_Integer;
             Conversion_Report_Time : in Swagger.Nullable_UString;
             Result : out .Models.CampaignsAnalyticsResponseInner_Type_Vectors.Vector;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Campaigns_Analytics
               (Ad_Account_Id,
                Start_Date,
                End_Date,
                Campaign_Ids,
                Columns,
                Granularity,
                Click_Window_Days,
                Engagement_Window_Days,
                View_Window_Days,
                Conversion_Report_Time,
                Result,
                Context);
         end Campaigns_Analytics;

         --  Create campaigns
         procedure Campaigns_Create
            (Ad_Account_Id : in Swagger.UString;
             Campaign_Create_Request : in .Models.CampaignCreateRequest_Type_Vectors.Vector;
             Result : out .Models.CampaignCreateResponse_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Campaigns_Create
               (Ad_Account_Id,
                Campaign_Create_Request,
                Result,
                Context);
         end Campaigns_Create;

         --  Get campaign
         procedure Campaigns_Get
            (Ad_Account_Id : in Swagger.UString;
             Campaign_Id : in Swagger.UString;
             Result : out .Models.CampaignResponse_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Campaigns_Get
               (Ad_Account_Id,
                Campaign_Id,
                Result,
                Context);
         end Campaigns_Get;

         --  List campaigns
         procedure Campaigns_List
            (Ad_Account_Id : in Swagger.UString;
             Campaign_Ids : in Swagger.UString_Vectors.Vector;
             Entity_Statuses : in Swagger.UString_Vectors.Vector;
             Page_Size : in Swagger.Nullable_Integer;
             Order : in Swagger.Nullable_UString;
             Bookmark : in Swagger.Nullable_UString;
             Result : out .Models.CampaignsList200Response_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Campaigns_List
               (Ad_Account_Id,
                Campaign_Ids,
                Entity_Statuses,
                Page_Size,
                Order,
                Bookmark,
                Result,
                Context);
         end Campaigns_List;

         --  Update campaigns
         procedure Campaigns_Update
            (Ad_Account_Id : in Swagger.UString;
             Campaign_Update_Request : in .Models.CampaignUpdateRequest_Type_Vectors.Vector;
             Result : out .Models.CampaignUpdateResponse_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Campaigns_Update
               (Ad_Account_Id,
                Campaign_Update_Request,
                Result,
                Context);
         end Campaigns_Update;

         --  Create catalog
         procedure Catalogs_Create
            (Catalogs_Create_Request_Type : in CatalogsCreateRequest_Type;
             Ad_Account_Id : in Swagger.Nullable_UString;
             Result : out .Models.Catalog_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Catalogs_Create
               (Catalogs_Create_Request_Type,
                Ad_Account_Id,
                Result,
                Context);
         end Catalogs_Create;

         --  List catalogs
         procedure Catalogs_List
            (Bookmark : in Swagger.Nullable_UString;
             Page_Size : in Swagger.Nullable_Integer;
             Ad_Account_Id : in Swagger.Nullable_UString;
             Result : out .Models.CatalogsList200Response_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Catalogs_List
               (Bookmark,
                Page_Size,
                Ad_Account_Id,
                Result,
                Context);
         end Catalogs_List;

         --  List products by product group
         procedure Catalogs_Product_Group_Pins_List
            (Product_Group_Id : in Swagger.UString;
             Bookmark : in Swagger.Nullable_UString;
             Page_Size : in Swagger.Nullable_Integer;
             Ad_Account_Id : in Swagger.Nullable_UString;
             Pin_Metrics : in Swagger.Nullable_Boolean;
             Result : out .Models.CatalogsProductGroupPinsList200Response_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Catalogs_Product_Group_Pins_List
               (Product_Group_Id,
                Bookmark,
                Page_Size,
                Ad_Account_Id,
                Pin_Metrics,
                Result,
                Context);
         end Catalogs_Product_Group_Pins_List;

         --  Create product group
         procedure Catalogs_Product_Groups_Create
            (Multiple_Product_Groups_Inner_Type : in MultipleProductGroupsInner_Type;
             Ad_Account_Id : in Swagger.Nullable_UString;
             Result : out .Models.CatalogsVerticalProductGroup_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Catalogs_Product_Groups_Create
               (Multiple_Product_Groups_Inner_Type,
                Ad_Account_Id,
                Result,
                Context);
         end Catalogs_Product_Groups_Create;

         --  Create product groups
         procedure Catalogs_Product_Groups_Create_Many
            (Multiple_Product_Groups_Inner : in .Models.MultipleProductGroupsInner_Type_Vectors.Vector;
             Ad_Account_Id : in Swagger.Nullable_UString;
             Result : out Swagger.UString_Vectors.Vector;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Catalogs_Product_Groups_Create_Many
               (Multiple_Product_Groups_Inner,
                Ad_Account_Id,
                Result,
                Context);
         end Catalogs_Product_Groups_Create_Many;

         --  Delete product group
         procedure Catalogs_Product_Groups_Delete
            (Product_Group_Id : in Swagger.UString;
             Ad_Account_Id : in Swagger.Nullable_UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Catalogs_Product_Groups_Delete
               (Product_Group_Id,
                Ad_Account_Id,
                Context);
         end Catalogs_Product_Groups_Delete;

         --  Delete product groups
         procedure Catalogs_Product_Groups_Delete_Many
            (Id : in Integer_Vectors.Vector;
             Ad_Account_Id : in Swagger.Nullable_UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Catalogs_Product_Groups_Delete_Many
               (Id,
                Ad_Account_Id,
                Context);
         end Catalogs_Product_Groups_Delete_Many;

         --  Get product group
         procedure Catalogs_Product_Groups_Get
            (Product_Group_Id : in Swagger.UString;
             Ad_Account_Id : in Swagger.Nullable_UString;
             Result : out .Models.CatalogsVerticalProductGroup_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Catalogs_Product_Groups_Get
               (Product_Group_Id,
                Ad_Account_Id,
                Result,
                Context);
         end Catalogs_Product_Groups_Get;

         --  List product groups
         procedure Catalogs_Product_Groups_List
            (Id : in Integer_Vectors.Vector;
             Feed_Id : in Swagger.Nullable_UString;
             Catalog_Id : in Swagger.Nullable_UString;
             Bookmark : in Swagger.Nullable_UString;
             Page_Size : in Swagger.Nullable_Integer;
             Ad_Account_Id : in Swagger.Nullable_UString;
             Result : out .Models.CatalogsProductGroupsList200Response_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Catalogs_Product_Groups_List
               (Id,
                Feed_Id,
                Catalog_Id,
                Bookmark,
                Page_Size,
                Ad_Account_Id,
                Result,
                Context);
         end Catalogs_Product_Groups_List;

         --  Get product counts
         procedure Catalogs_Product_Groups_Product_Counts_Get
            (Product_Group_Id : in Swagger.UString;
             Ad_Account_Id : in Swagger.Nullable_UString;
             Result : out .Models.CatalogsProductGroupProductCountsVertical_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Catalogs_Product_Groups_Product_Counts_Get
               (Product_Group_Id,
                Ad_Account_Id,
                Result,
                Context);
         end Catalogs_Product_Groups_Product_Counts_Get;

         --  Update single product group
         procedure Catalogs_Product_Groups_Update
            (Product_Group_Id : in Swagger.UString;
             Catalogs_Product_Groups_Update_Request_Type : in CatalogsProductGroupsUpdateRequest_Type;
             Ad_Account_Id : in Swagger.Nullable_UString;
             Result : out .Models.CatalogsVerticalProductGroup_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Catalogs_Product_Groups_Update
               (Product_Group_Id,
                Catalogs_Product_Groups_Update_Request_Type,
                Ad_Account_Id,
                Result,
                Context);
         end Catalogs_Product_Groups_Update;

         --  List feed processing results
         procedure Feed_Processing_Results_List
            (Feed_Id : in Swagger.UString;
             Bookmark : in Swagger.Nullable_UString;
             Page_Size : in Swagger.Nullable_Integer;
             Ad_Account_Id : in Swagger.Nullable_UString;
             Result : out .Models.FeedProcessingResultsList200Response_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Feed_Processing_Results_List
               (Feed_Id,
                Bookmark,
                Page_Size,
                Ad_Account_Id,
                Result,
                Context);
         end Feed_Processing_Results_List;

         --  Create feed
         procedure Feeds_Create
            (Feeds_Create_Request_Type : in FeedsCreateRequest_Type;
             Ad_Account_Id : in Swagger.Nullable_UString;
             Result : out .Models.CatalogsFeed_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Feeds_Create
               (Feeds_Create_Request_Type,
                Ad_Account_Id,
                Result,
                Context);
         end Feeds_Create;

         --  Delete feed
         procedure Feeds_Delete
            (Feed_Id : in Swagger.UString;
             Ad_Account_Id : in Swagger.Nullable_UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Feeds_Delete
               (Feed_Id,
                Ad_Account_Id,
                Context);
         end Feeds_Delete;

         --  Get feed
         procedure Feeds_Get
            (Feed_Id : in Swagger.UString;
             Ad_Account_Id : in Swagger.Nullable_UString;
             Result : out .Models.CatalogsFeed_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Feeds_Get
               (Feed_Id,
                Ad_Account_Id,
                Result,
                Context);
         end Feeds_Get;

         --  Ingest feed items
         procedure Feeds_Ingest
            (Feed_Id : in Swagger.UString;
             Ad_Account_Id : in Swagger.Nullable_UString;
             Result : out .Models.CatalogsFeedIngestion_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Feeds_Ingest
               (Feed_Id,
                Ad_Account_Id,
                Result,
                Context);
         end Feeds_Ingest;

         --  List feeds
         procedure Feeds_List
            (Bookmark : in Swagger.Nullable_UString;
             Page_Size : in Swagger.Nullable_Integer;
             Catalog_Id : in Swagger.Nullable_UString;
             Ad_Account_Id : in Swagger.Nullable_UString;
             Result : out .Models.FeedsList200Response_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Feeds_List
               (Bookmark,
                Page_Size,
                Catalog_Id,
                Ad_Account_Id,
                Result,
                Context);
         end Feeds_List;

         --  Update feed
         procedure Feeds_Update
            (Feed_Id : in Swagger.UString;
             Feeds_Update_Request_Type : in FeedsUpdateRequest_Type;
             Ad_Account_Id : in Swagger.Nullable_UString;
             Result : out .Models.CatalogsFeed_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Feeds_Update
               (Feed_Id,
                Feeds_Update_Request_Type,
                Ad_Account_Id,
                Result,
                Context);
         end Feeds_Update;

         --  Get item batch status
         procedure Items_Batch_Get
            (Batch_Id : in Swagger.UString;
             Ad_Account_Id : in Swagger.Nullable_UString;
             Result : out .Models.CatalogsItemsBatch_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Items_Batch_Get
               (Batch_Id,
                Ad_Account_Id,
                Result,
                Context);
         end Items_Batch_Get;

         --  Operate on item batch
         procedure Items_Batch_Post
            (Items_Batch_Post_Request_Type : in ItemsBatchPostRequest_Type;
             Ad_Account_Id : in Swagger.Nullable_UString;
             Result : out .Models.CatalogsItemsBatch_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Items_Batch_Post
               (Items_Batch_Post_Request_Type,
                Ad_Account_Id,
                Result,
                Context);
         end Items_Batch_Post;

         --  Get catalogs items
         procedure Items_Get
            (Country : in Swagger.UString;
             Language : in Swagger.UString;
             Ad_Account_Id : in Swagger.Nullable_UString;
             Item_Ids : in Swagger.UString_Vectors.Vector;
             Filters : in CatalogsItemsFilters_Type;
             Result : out .Models.CatalogsItems_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Items_Get
               (Country,
                Language,
                Ad_Account_Id,
                Item_Ids,
                Filters,
                Result,
                Context);
         end Items_Get;

         --  List item issues
         procedure Items_Issues_List
            (Processing_Result_Id : in Swagger.UString;
             Bookmark : in Swagger.Nullable_UString;
             Page_Size : in Swagger.Nullable_Integer;
             Item_Numbers : in Integer_Vectors.Vector;
             Item_Validation_Issue : in CatalogsItemValidationIssue_Type;
             Ad_Account_Id : in Swagger.Nullable_UString;
             Result : out .Models.ItemsIssuesList200Response_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Items_Issues_List
               (Processing_Result_Id,
                Bookmark,
                Page_Size,
                Item_Numbers,
                Item_Validation_Issue,
                Ad_Account_Id,
                Result,
                Context);
         end Items_Issues_List;

         --  Get catalogs items (POST)
         procedure Items_Post
            (Catalogs_Items_Request_Type : in CatalogsItemsRequest_Type;
             Ad_Account_Id : in Swagger.Nullable_UString;
             Result : out .Models.CatalogsItems_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Items_Post
               (Catalogs_Items_Request_Type,
                Ad_Account_Id,
                Result,
                Context);
         end Items_Post;

         --  List products by filter
         procedure Products_By_Product_Group_Filter_List
            (Catalogs_List_Products_By_Filter_Request_Type : in CatalogsListProductsByFilterRequest_Type;
             Bookmark : in Swagger.Nullable_UString;
             Page_Size : in Swagger.Nullable_Integer;
             Ad_Account_Id : in Swagger.Nullable_UString;
             Pin_Metrics : in Swagger.Nullable_Boolean;
             Result : out .Models.CatalogsProductGroupPinsList200Response_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Products_By_Product_Group_Filter_List
               (Catalogs_List_Products_By_Filter_Request_Type,
                Bookmark,
                Page_Size,
                Ad_Account_Id,
                Pin_Metrics,
                Result,
                Context);
         end Products_By_Product_Group_Filter_List;

         --  Build catalogs report
         procedure Reports_Create
            (Catalogs_Report_Parameters_Type : in CatalogsReportParameters_Type;
             Ad_Account_Id : in Swagger.Nullable_UString;
             Result : out .Models.CatalogsCreateReportResponse_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Reports_Create
               (Catalogs_Report_Parameters_Type,
                Ad_Account_Id,
                Result,
                Context);
         end Reports_Create;

         --  Get catalogs report
         procedure Reports_Get
            (Token : in Swagger.UString;
             Ad_Account_Id : in Swagger.Nullable_UString;
             Result : out .Models.CatalogsReport_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Reports_Get
               (Token,
                Ad_Account_Id,
                Result,
                Context);
         end Reports_Get;

         --  List report stats
         procedure Reports_Stats
            (Parameters : in CatalogsReportParameters_Type;
             Ad_Account_Id : in Swagger.Nullable_UString;
             Page_Size : in Swagger.Nullable_Integer;
             Bookmark : in Swagger.Nullable_UString;
             Result : out .Models.ReportsStats200Response_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Reports_Stats
               (Parameters,
                Ad_Account_Id,
                Page_Size,
                Bookmark,
                Result,
                Context);
         end Reports_Stats;

         --  Send conversions
         procedure Events_Create
            (Ad_Account_Id : in Swagger.UString;
             Conversion_Events_Type : in ConversionEvents_Type;
             Test : in Swagger.Nullable_Boolean;
             Result : out .Models.ConversionApiResponse_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Events_Create
               (Ad_Account_Id,
                Conversion_Events_Type,
                Test,
                Result,
                Context);
         end Events_Create;

         --  Create conversion tag
         procedure Conversion_Tags_Create
            (Ad_Account_Id : in Swagger.UString;
             Conversion_Tag_Create_Type : in ConversionTagCreate_Type;
             Result : out .Models.ConversionTagResponse_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Conversion_Tags_Create
               (Ad_Account_Id,
                Conversion_Tag_Create_Type,
                Result,
                Context);
         end Conversion_Tags_Create;

         --  Get conversion tag
         procedure Conversion_Tags_Get
            (Ad_Account_Id : in Swagger.UString;
             Conversion_Tag_Id : in Swagger.UString;
             Result : out .Models.ConversionTagResponse_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Conversion_Tags_Get
               (Ad_Account_Id,
                Conversion_Tag_Id,
                Result,
                Context);
         end Conversion_Tags_Get;

         --  Get conversion tags
         procedure Conversion_Tags_List
            (Ad_Account_Id : in Swagger.UString;
             Filter_Deleted : in Swagger.Nullable_Boolean;
             Result : out .Models.ConversionTagListResponse_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Conversion_Tags_List
               (Ad_Account_Id,
                Filter_Deleted,
                Result,
                Context);
         end Conversion_Tags_List;

         --  Get Ocpm eligible conversion tags
         procedure Ocpm_Eligible_Conversion_Tags_Get
            (Ad_Account_Id : in Swagger.UString;
             Result : out Swagger..Models.ConversionEventResponse_Type_Vectors.Vector_Map;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Ocpm_Eligible_Conversion_Tags_Get
               (Ad_Account_Id,
                Result,
                Context);
         end Ocpm_Eligible_Conversion_Tags_Get;

         --  Get page visit conversion tags
         procedure Page_Visit_Conversion_Tags_Get
            (Ad_Account_Id : in Swagger.UString;
             Page_Size : in Swagger.Nullable_Integer;
             Order : in Swagger.Nullable_UString;
             Bookmark : in Swagger.Nullable_UString;
             Result : out .Models.PageVisitConversionTagsGet200Response_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Page_Visit_Conversion_Tags_Get
               (Ad_Account_Id,
                Page_Size,
                Order,
                Bookmark,
                Result,
                Context);
         end Page_Visit_Conversion_Tags_Get;

         --  Create customer lists
         procedure Customer_Lists_Create
            (Ad_Account_Id : in Swagger.UString;
             Customer_List_Request_Type : in CustomerListRequest_Type;
             Result : out .Models.CustomerList_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Customer_Lists_Create
               (Ad_Account_Id,
                Customer_List_Request_Type,
                Result,
                Context);
         end Customer_Lists_Create;

         --  Get customer list
         procedure Customer_Lists_Get
            (Ad_Account_Id : in Swagger.UString;
             Customer_List_Id : in Swagger.UString;
             Result : out .Models.CustomerList_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Customer_Lists_Get
               (Ad_Account_Id,
                Customer_List_Id,
                Result,
                Context);
         end Customer_Lists_Get;

         --  Get customer lists
         procedure Customer_Lists_List
            (Ad_Account_Id : in Swagger.UString;
             Page_Size : in Swagger.Nullable_Integer;
             Order : in Swagger.Nullable_UString;
             Bookmark : in Swagger.Nullable_UString;
             Result : out .Models.CustomerListsList200Response_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Customer_Lists_List
               (Ad_Account_Id,
                Page_Size,
                Order,
                Bookmark,
                Result,
                Context);
         end Customer_Lists_List;

         --  Update customer list
         procedure Customer_Lists_Update
            (Ad_Account_Id : in Swagger.UString;
             Customer_List_Id : in Swagger.UString;
             Customer_List_Update_Request_Type : in CustomerListUpdateRequest_Type;
             Result : out .Models.CustomerList_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Customer_Lists_Update
               (Ad_Account_Id,
                Customer_List_Id,
                Customer_List_Update_Request_Type,
                Result,
                Context);
         end Customer_Lists_Update;

         --  Delete commerce integration
         procedure Integrations_Commerce_Del
            (External_Business_Id : in Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Integrations_Commerce_Del
               (External_Business_Id,
                Context);
         end Integrations_Commerce_Del;

         --  Get commerce integration
         procedure Integrations_Commerce_Get
            (External_Business_Id : in Swagger.UString;
             Result : out .Models.IntegrationMetadata_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Integrations_Commerce_Get
               (External_Business_Id,
                Result,
                Context);
         end Integrations_Commerce_Get;

         --  Update commerce integration
         procedure Integrations_Commerce_Patch
            (External_Business_Id : in Swagger.UString;
             Integration_Request_Patch_Type : in IntegrationRequestPatch_Type;
             Result : out .Models.IntegrationMetadata_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Integrations_Commerce_Patch
               (External_Business_Id,
                Integration_Request_Patch_Type,
                Result,
                Context);
         end Integrations_Commerce_Patch;

         --  Create commerce integration
         procedure Integrations_Commerce_Post
            (Integration_Request_Type : in IntegrationRequest_Type;
             Result : out .Models.IntegrationMetadata_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Integrations_Commerce_Post
               (Integration_Request_Type,
                Result,
                Context);
         end Integrations_Commerce_Post;

         --  Get integration metadata
         procedure Integrations_Get_By_Id
            (Id : in Swagger.UString;
             Result : out .Models.IntegrationRecord_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Integrations_Get_By_Id
               (Id,
                Result,
                Context);
         end Integrations_Get_By_Id;

         --  Get integration metadata list
         procedure Integrations_Get_List
            (Bookmark : in Swagger.Nullable_UString;
             Page_Size : in Swagger.Nullable_Integer;
             Result : out .Models.IntegrationsGetList200Response_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Integrations_Get_List
               (Bookmark,
                Page_Size,
                Result,
                Context);
         end Integrations_Get_List;

         --  Receives batched logs from integration applications.
         procedure Integrations_Logs_Post
            (Integration_Logs_Request_Type : in IntegrationLogsRequest_Type;
             Result : out .Models.IntegrationLogsSuccessResponse_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Integrations_Logs_Post
               (Integration_Logs_Request_Type,
                Result,
                Context);
         end Integrations_Logs_Post;

         --  Get country's keyword metrics
         procedure Country_Keywords_Metrics_Get
            (Ad_Account_Id : in Swagger.UString;
             Country_Code : in Swagger.UString;
             Keywords : in Swagger.UString_Vectors.Vector;
             Result : out .Models.KeywordsMetricsArrayResponse_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Country_Keywords_Metrics_Get
               (Ad_Account_Id,
                Country_Code,
                Keywords,
                Result,
                Context);
         end Country_Keywords_Metrics_Get;

         --  Create keywords
         procedure Keywords_Create
            (Ad_Account_Id : in Swagger.UString;
             Keywords_Request_Type : in KeywordsRequest_Type;
             Result : out .Models.KeywordsResponse_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Keywords_Create
               (Ad_Account_Id,
                Keywords_Request_Type,
                Result,
                Context);
         end Keywords_Create;

         --  Get keywords
         procedure Keywords_Get
            (Ad_Account_Id : in Swagger.UString;
             Campaign_Id : in Swagger.Nullable_UString;
             Ad_Group_Id : in Swagger.Nullable_UString;
             Match_Types : in .Models.MatchType_Type_Vectors.Vector;
             Page_Size : in Swagger.Nullable_Integer;
             Bookmark : in Swagger.Nullable_UString;
             Result : out .Models.KeywordsGet200Response_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Keywords_Get
               (Ad_Account_Id,
                Campaign_Id,
                Ad_Group_Id,
                Match_Types,
                Page_Size,
                Bookmark,
                Result,
                Context);
         end Keywords_Get;

         --  Update keywords
         procedure Keywords_Update
            (Ad_Account_Id : in Swagger.UString;
             Keyword_Update_Body_Type : in KeywordUpdateBody_Type;
             Result : out .Models.KeywordsResponse_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Keywords_Update
               (Ad_Account_Id,
                Keyword_Update_Body_Type,
                Result,
                Context);
         end Keywords_Update;

         --  List trending keywords
         procedure Trending_Keywords_List
            (Region : in TrendsSupportedRegion_Type;
             Trend_Type : in TrendType_Type;
             Interests : in Swagger.UString_Vectors.Vector;
             Genders : in Swagger.UString_Vectors.Vector;
             Ages : in Swagger.UString_Vectors.Vector;
             Include_Keywords : in Swagger.UString_Vectors.Vector;
             Normalize_Against_Group : in Swagger.Nullable_Boolean;
             Limit : in Swagger.Nullable_Integer;
             Result : out .Models.TrendingKeywordsResponse_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Trending_Keywords_List
               (Region,
                Trend_Type,
                Interests,
                Genders,
                Ages,
                Include_Keywords,
                Normalize_Against_Group,
                Limit,
                Result,
                Context);
         end Trending_Keywords_List;

         --  Delete lead ads subscription
         procedure Ad_Accounts_Subscriptions_Del_By_Id
            (Ad_Account_Id : in Swagger.UString;
             Subscription_Id : in Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Ad_Accounts_Subscriptions_Del_By_Id
               (Ad_Account_Id,
                Subscription_Id,
                Context);
         end Ad_Accounts_Subscriptions_Del_By_Id;

         --  Get lead ads subscription
         procedure Ad_Accounts_Subscriptions_Get_By_Id
            (Ad_Account_Id : in Swagger.UString;
             Subscription_Id : in Swagger.UString;
             Result : out .Models.AdAccountGetSubscriptionResponse_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Ad_Accounts_Subscriptions_Get_By_Id
               (Ad_Account_Id,
                Subscription_Id,
                Result,
                Context);
         end Ad_Accounts_Subscriptions_Get_By_Id;

         --  Get lead ads subscriptions
         procedure Ad_Accounts_Subscriptions_Get_List
            (Ad_Account_Id : in Swagger.UString;
             Page_Size : in Swagger.Nullable_Integer;
             Bookmark : in Swagger.Nullable_UString;
             Result : out .Models.AdAccountsSubscriptionsGetList200Response_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Ad_Accounts_Subscriptions_Get_List
               (Ad_Account_Id,
                Page_Size,
                Bookmark,
                Result,
                Context);
         end Ad_Accounts_Subscriptions_Get_List;

         --  Create lead ads subscription
         procedure Ad_Accounts_Subscriptions_Post
            (Ad_Account_Id : in Swagger.UString;
             Ad_Account_Create_Subscription_Request_Type : in AdAccountCreateSubscriptionRequest_Type;
             Result : out .Models.AdAccountCreateSubscriptionResponse_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Ad_Accounts_Subscriptions_Post
               (Ad_Account_Id,
                Ad_Account_Create_Subscription_Request_Type,
                Result,
                Context);
         end Ad_Accounts_Subscriptions_Post;

         --  Get lead form by id
         procedure Lead_Form_Get
            (Ad_Account_Id : in Swagger.UString;
             Lead_Form_Id : in Swagger.UString;
             Result : out .Models.LeadFormResponse_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Lead_Form_Get
               (Ad_Account_Id,
                Lead_Form_Id,
                Result,
                Context);
         end Lead_Form_Get;

         --  Create lead form test data
         procedure Lead_Form_Test_Create
            (Ad_Account_Id : in Swagger.UString;
             Lead_Form_Id : in Swagger.UString;
             Lead_Form_Test_Request_Type : in LeadFormTestRequest_Type;
             Result : out .Models.LeadFormTestResponse_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Lead_Form_Test_Create
               (Ad_Account_Id,
                Lead_Form_Id,
                Lead_Form_Test_Request_Type,
                Result,
                Context);
         end Lead_Form_Test_Create;

         --  Create lead forms
         procedure Lead_Forms_Create
            (Ad_Account_Id : in Swagger.UString;
             Lead_Form_Create_Request : in .Models.LeadFormCreateRequest_Type_Vectors.Vector;
             Result : out .Models.LeadFormArrayResponse_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Lead_Forms_Create
               (Ad_Account_Id,
                Lead_Form_Create_Request,
                Result,
                Context);
         end Lead_Forms_Create;

         --  List lead forms
         procedure Lead_Forms_List
            (Ad_Account_Id : in Swagger.UString;
             Page_Size : in Swagger.Nullable_Integer;
             Order : in Swagger.Nullable_UString;
             Bookmark : in Swagger.Nullable_UString;
             Result : out .Models.LeadFormsList200Response_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Lead_Forms_List
               (Ad_Account_Id,
                Page_Size,
                Order,
                Bookmark,
                Result,
                Context);
         end Lead_Forms_List;

         --  Update lead forms
         procedure Lead_Forms_Update
            (Ad_Account_Id : in Swagger.UString;
             Lead_Form_Update_Request : in .Models.LeadFormUpdateRequest_Type_Vectors.Vector;
             Result : out .Models.LeadFormArrayResponse_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Lead_Forms_Update
               (Ad_Account_Id,
                Lead_Form_Update_Request,
                Result,
                Context);
         end Lead_Forms_Update;

         --  Create a request to export leads collected from a lead ad
         procedure Leads_Export_Create
            (Ad_Account_Id : in Swagger.UString;
             Leads_Export_Create_Request_Type : in LeadsExportCreateRequest_Type;
             Result : out .Models.LeadsExportCreateResponse_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Leads_Export_Create
               (Ad_Account_Id,
                Leads_Export_Create_Request_Type,
                Result,
                Context);
         end Leads_Export_Create;

         --  Get the lead export from the lead export create call
         procedure Leads_Export_Get
            (Ad_Account_Id : in Swagger.UString;
             Leads_Export_Id : in Swagger.UString;
             Result : out .Models.LeadsExportResponseData_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Leads_Export_Get
               (Ad_Account_Id,
                Leads_Export_Id,
                Result,
                Context);
         end Leads_Export_Get;

         --  Register media upload
         procedure Media_Create
            (Media_Upload_Request_Type : in MediaUploadRequest_Type;
             Result : out .Models.MediaUpload_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Media_Create
               (Media_Upload_Request_Type,
                Result,
                Context);
         end Media_Create;

         --  Get media upload details
         procedure Media_Get
            (Media_Id : in Swagger.UString;
             Result : out .Models.MediaUploadDetails_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Media_Get
               (Media_Id,
                Result,
                Context);
         end Media_Get;

         --  List media uploads
         procedure Media_List
            (Bookmark : in Swagger.Nullable_UString;
             Page_Size : in Swagger.Nullable_Integer;
             Result : out .Models.MediaList200Response_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Media_List
               (Bookmark,
                Page_Size,
                Result,
                Context);
         end Media_List;

         --  Generate OAuth access token
         procedure Oauth_Token
            (Grant_Type : in Swagger.UString;
             Result : out .Models.OauthAccessTokenResponse_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Oauth_Token
               (Grant_Type,
                Result,
                Context);
         end Oauth_Token;

         --  Get order line
         procedure Order_Lines_Get
            (Ad_Account_Id : in Swagger.UString;
             Order_Line_Id : in Swagger.UString;
             Result : out .Models.OrderLine_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Order_Lines_Get
               (Ad_Account_Id,
                Order_Line_Id,
                Result,
                Context);
         end Order_Lines_Get;

         --  Get order lines
         procedure Order_Lines_List
            (Ad_Account_Id : in Swagger.UString;
             Page_Size : in Swagger.Nullable_Integer;
             Order : in Swagger.Nullable_UString;
             Bookmark : in Swagger.Nullable_UString;
             Result : out .Models.OrderLinesList200Response_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Order_Lines_List
               (Ad_Account_Id,
                Page_Size,
                Order,
                Bookmark,
                Result,
                Context);
         end Order_Lines_List;

         --  Get multiple Pin analytics
         procedure Multi_Pins_Analytics
            (Pin_Ids : in Swagger.UString_Vectors.Vector;
             Start_Date : in Swagger.Date;
             End_Date : in Swagger.Date;
             Metric_Types : in .Models.PinsAnalyticsMetricTypesParameterInner_Type_Vectors.Vector;
             App_Types : in Swagger.Nullable_UString;
             Ad_Account_Id : in Swagger.Nullable_UString;
             Result : out Swagger.Map_Map;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Multi_Pins_Analytics
               (Pin_Ids,
                Start_Date,
                End_Date,
                Metric_Types,
                App_Types,
                Ad_Account_Id,
                Result,
                Context);
         end Multi_Pins_Analytics;

         --  Get Pin analytics
         procedure Pins_Analytics
            (Pin_Id : in Swagger.UString;
             Start_Date : in Swagger.Date;
             End_Date : in Swagger.Date;
             Metric_Types : in .Models.PinsAnalyticsMetricTypesParameterInner_Type_Vectors.Vector;
             App_Types : in Swagger.Nullable_UString;
             Split_Field : in Swagger.Nullable_UString;
             Ad_Account_Id : in Swagger.Nullable_UString;
             Result : out Swagger..Models.PinAnalyticsMetricsResponse_Type_Map;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Pins_Analytics
               (Pin_Id,
                Start_Date,
                End_Date,
                Metric_Types,
                App_Types,
                Split_Field,
                Ad_Account_Id,
                Result,
                Context);
         end Pins_Analytics;

         --  Create Pin
         procedure Pins_Create
            (Pin_Create_Type : in PinCreate_Type;
             Ad_Account_Id : in Swagger.Nullable_UString;
             Result : out .Models.Pin_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Pins_Create
               (Pin_Create_Type,
                Ad_Account_Id,
                Result,
                Context);
         end Pins_Create;

         --  Delete Pin
         procedure Pins_Delete
            (Pin_Id : in Swagger.UString;
             Ad_Account_Id : in Swagger.Nullable_UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Pins_Delete
               (Pin_Id,
                Ad_Account_Id,
                Context);
         end Pins_Delete;

         --  Get Pin
         procedure Pins_Get
            (Pin_Id : in Swagger.UString;
             Pin_Metrics : in Swagger.Nullable_Boolean;
             Ad_Account_Id : in Swagger.Nullable_UString;
             Result : out .Models.Pin_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Pins_Get
               (Pin_Id,
                Pin_Metrics,
                Ad_Account_Id,
                Result,
                Context);
         end Pins_Get;

         --  List Pins
         procedure Pins_List
            (Bookmark : in Swagger.Nullable_UString;
             Page_Size : in Swagger.Nullable_Integer;
             Pin_Filter : in Swagger.Nullable_UString;
             Include_Protected_Pins : in Swagger.Nullable_Boolean;
             Pin_Type : in Swagger.Nullable_UString;
             Creative_Types : in Swagger.UString_Vectors.Vector;
             Ad_Account_Id : in Swagger.Nullable_UString;
             Pin_Metrics : in Swagger.Nullable_Boolean;
             Result : out .Models.PinsList200Response_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Pins_List
               (Bookmark,
                Page_Size,
                Pin_Filter,
                Include_Protected_Pins,
                Pin_Type,
                Creative_Types,
                Ad_Account_Id,
                Pin_Metrics,
                Result,
                Context);
         end Pins_List;

         --  Save Pin
         procedure Pins_Save
            (Pin_Id : in Swagger.UString;
             Pins_Save_Request_Type : in PinsSaveRequest_Type;
             Ad_Account_Id : in Swagger.Nullable_UString;
             Result : out .Models.Pin_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Pins_Save
               (Pin_Id,
                Pins_Save_Request_Type,
                Ad_Account_Id,
                Result,
                Context);
         end Pins_Save;

         --  Update Pin
         procedure Pins_Update
            (Pin_Id : in Swagger.UString;
             Pin_Update_Type : in PinUpdate_Type;
             Ad_Account_Id : in Swagger.Nullable_UString;
             Result : out .Models.Pin_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Pins_Update
               (Pin_Id,
                Pin_Update_Type,
                Ad_Account_Id,
                Result,
                Context);
         end Pins_Update;

         --  Create product group promotions
         procedure Product_Group_Promotions_Create
            (Ad_Account_Id : in Swagger.UString;
             Product_Group_Promotion_Create_Request_Type : in ProductGroupPromotionCreateRequest_Type;
             Result : out .Models.ProductGroupPromotionResponse_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Product_Group_Promotions_Create
               (Ad_Account_Id,
                Product_Group_Promotion_Create_Request_Type,
                Result,
                Context);
         end Product_Group_Promotions_Create;

         --  Get a product group promotion by id
         procedure Product_Group_Promotions_Get
            (Ad_Account_Id : in Swagger.UString;
             Product_Group_Promotion_Id : in Swagger.UString;
             Result : out .Models.ProductGroupPromotionResponse_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Product_Group_Promotions_Get
               (Ad_Account_Id,
                Product_Group_Promotion_Id,
                Result,
                Context);
         end Product_Group_Promotions_Get;

         --  Get product group promotions
         procedure Product_Group_Promotions_List
            (Ad_Account_Id : in Swagger.UString;
             Product_Group_Promotion_Ids : in Swagger.UString_Vectors.Vector;
             Entity_Statuses : in Swagger.UString_Vectors.Vector;
             Ad_Group_Id : in Swagger.Nullable_UString;
             Page_Size : in Swagger.Nullable_Integer;
             Order : in Swagger.Nullable_UString;
             Bookmark : in Swagger.Nullable_UString;
             Result : out .Models.ProductGroupPromotionsList200Response_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Product_Group_Promotions_List
               (Ad_Account_Id,
                Product_Group_Promotion_Ids,
                Entity_Statuses,
                Ad_Group_Id,
                Page_Size,
                Order,
                Bookmark,
                Result,
                Context);
         end Product_Group_Promotions_List;

         --  Update product group promotions
         procedure Product_Group_Promotions_Update
            (Ad_Account_Id : in Swagger.UString;
             Product_Group_Promotion_Update_Request_Type : in ProductGroupPromotionUpdateRequest_Type;
             Result : out .Models.ProductGroupPromotionResponse_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Product_Group_Promotions_Update
               (Ad_Account_Id,
                Product_Group_Promotion_Update_Request_Type,
                Result,
                Context);
         end Product_Group_Promotions_Update;

         --  Get product group analytics
         procedure Product_Groups_Analytics
            (Ad_Account_Id : in Swagger.UString;
             Start_Date : in Swagger.Date;
             End_Date : in Swagger.Date;
             Product_Group_Ids : in Swagger.UString_Vectors.Vector;
             Columns : in Swagger.UString_Vectors.Vector;
             Granularity : in Granularity_Type;
             Click_Window_Days : in Swagger.Nullable_Integer;
             Engagement_Window_Days : in Swagger.Nullable_Integer;
             View_Window_Days : in Swagger.Nullable_Integer;
             Conversion_Report_Time : in Swagger.Nullable_UString;
             Result : out .Models.ProductGroupAnalyticsResponseInner_Type_Vectors.Vector;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Product_Groups_Analytics
               (Ad_Account_Id,
                Start_Date,
                End_Date,
                Product_Group_Ids,
                Columns,
                Granularity,
                Click_Window_Days,
                Engagement_Window_Days,
                View_Window_Days,
                Conversion_Report_Time,
                Result,
                Context);
         end Product_Groups_Analytics;

         --  Get ad accounts countries
         procedure Ad_Account_Countries_Get (Result : out .Models.AdAccountsCountryResponse_Type;
         Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Ad_Account_Countries_Get (Result, Context);
         end Ad_Account_Countries_Get;

         --  Get available metrics' definitions
         procedure Delivery_Metrics_Get
            (Report_Type : in Swagger.Nullable_UString;
             Result : out .Models.DeliveryMetricsResponse_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Delivery_Metrics_Get
               (Report_Type,
                Result,
                Context);
         end Delivery_Metrics_Get;

         --  Get interest details
         procedure Interest_Targeting_Options_Get
            (Interest_Id : in Swagger.UString;
             Result : out .Models.SingleInterestTargetingOptionResponse_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Interest_Targeting_Options_Get
               (Interest_Id,
                Result,
                Context);
         end Interest_Targeting_Options_Get;

         --  Get lead form questions
         procedure Lead_Form_Questions_Get (Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Lead_Form_Questions_Get (Context);
         end Lead_Form_Questions_Get;

         --  Get metrics ready state
         procedure Metrics_Ready_State_Get
            (Date : in Swagger.UString;
             Result : out .Models.BookClosedResponse_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Metrics_Ready_State_Get
               (Date,
                Result,
                Context);
         end Metrics_Ready_State_Get;

         --  Get targeting options
         procedure Targeting_Options_Get
            (Targeting_Type : in Swagger.UString;
             Client_Id : in Swagger.Nullable_UString;
             Oauth_Signature : in Swagger.Nullable_UString;
             Timestamp : in Swagger.Nullable_UString;
             Ad_Account_Id : in Swagger.Nullable_UString;
             Result : out Swagger.Object_Vectors.Vector;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Targeting_Options_Get
               (Targeting_Type,
                Client_Id,
                Oauth_Signature,
                Timestamp,
                Ad_Account_Id,
                Result,
                Context);
         end Targeting_Options_Get;

         --  Search pins by a given search term
         procedure Search_Partner_Pins
            (Term : in Swagger.UString;
             Country_Code : in Swagger.UString;
             Bookmark : in Swagger.Nullable_UString;
             Locale : in Swagger.Nullable_UString;
             Limit : in Swagger.Nullable_Integer;
             Result : out .Models.SearchPartnerPins200Response_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Search_Partner_Pins
               (Term,
                Country_Code,
                Bookmark,
                Locale,
                Limit,
                Result,
                Context);
         end Search_Partner_Pins;

         --  Search user's boards
         procedure Search_User_Boards_Get
            (Ad_Account_Id : in Swagger.Nullable_UString;
             Bookmark : in Swagger.Nullable_UString;
             Page_Size : in Swagger.Nullable_Integer;
             Query : in Swagger.Nullable_UString;
             Result : out .Models.SearchUserBoardsGet200Response_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Search_User_Boards_Get
               (Ad_Account_Id,
                Bookmark,
                Page_Size,
                Query,
                Result,
                Context);
         end Search_User_Boards_Get;

         --  Search user's Pins
         procedure Search_User_Pins_List
            (Query : in Swagger.UString;
             Ad_Account_Id : in Swagger.Nullable_UString;
             Bookmark : in Swagger.Nullable_UString;
             Result : out .Models.PinsList200Response_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Search_User_Pins_List
               (Query,
                Ad_Account_Id,
                Bookmark,
                Result,
                Context);
         end Search_User_Pins_List;

         --  Create targeting templates
         procedure Targeting_Template_Create
            (Ad_Account_Id : in Swagger.UString;
             Targeting_Template_Create_Type : in TargetingTemplateCreate_Type;
             Result : out .Models.TargetingTemplateGetResponseData_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Targeting_Template_Create
               (Ad_Account_Id,
                Targeting_Template_Create_Type,
                Result,
                Context);
         end Targeting_Template_Create;

         --  List targeting templates
         procedure Targeting_Template_List
            (Ad_Account_Id : in Swagger.UString;
             Order : in Swagger.Nullable_UString;
             Include_Sizing : in Swagger.Nullable_Boolean;
             Search_Query : in Swagger.Nullable_UString;
             Page_Size : in Swagger.Nullable_Integer;
             Bookmark : in Swagger.Nullable_UString;
             Result : out .Models.TargetingTemplateList200Response_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Targeting_Template_List
               (Ad_Account_Id,
                Order,
                Include_Sizing,
                Search_Query,
                Page_Size,
                Bookmark,
                Result,
                Context);
         end Targeting_Template_List;

         --  Update targeting templates
         procedure Targeting_Template_Update
            (Ad_Account_Id : in Swagger.UString;
             Targeting_Template_Update_Request_Type : in TargetingTemplateUpdateRequest_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Targeting_Template_Update
               (Ad_Account_Id,
                Targeting_Template_Update_Request_Type,
                Context);
         end Targeting_Template_Update;

         --  List related terms
         procedure Terms_Related_List
            (Terms : in Swagger.UString_Vectors.Vector;
             Result : out .Models.RelatedTerms_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Terms_Related_List
               (Terms,
                Result,
                Context);
         end Terms_Related_List;

         --  List suggested terms
         procedure Terms_Suggested_List
            (Term : in Swagger.UString;
             Limit : in Swagger.Nullable_Integer;
             Result : out Swagger.UString_Vectors.Vector;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Terms_Suggested_List
               (Term,
                Limit,
                Result,
                Context);
         end Terms_Suggested_List;

         --  Get terms of service
         procedure Terms_Of_Service_Get
            (Ad_Account_Id : in Swagger.UString;
             Include_Html : in Swagger.Nullable_Boolean;
             Tos_Type : in Swagger.Nullable_UString;
             Result : out .Models.TermsOfService_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Terms_Of_Service_Get
               (Ad_Account_Id,
                Include_Html,
                Tos_Type,
                Result,
                Context);
         end Terms_Of_Service_Get;

         --  List following boards
         procedure Boards_User_Follows_List
            (Bookmark : in Swagger.Nullable_UString;
             Page_Size : in Swagger.Nullable_Integer;
             Explicit_Following : in Swagger.Nullable_Boolean;
             Ad_Account_Id : in Swagger.Nullable_UString;
             Result : out .Models.BoardsUserFollowsList200Response_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Boards_User_Follows_List
               (Bookmark,
                Page_Size,
                Explicit_Following,
                Ad_Account_Id,
                Result,
                Context);
         end Boards_User_Follows_List;

         --  Follow user
         procedure Follow_User_Update
            (Username : in Swagger.UString;
             Follow_User_Request_Type : in FollowUserRequest_Type;
             Result : out .Models.UserSummary_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Follow_User_Update
               (Username,
                Follow_User_Request_Type,
                Result,
                Context);
         end Follow_User_Update;

         --  List followers
         procedure Followers_List
            (Bookmark : in Swagger.Nullable_UString;
             Page_Size : in Swagger.Nullable_Integer;
             Result : out .Models.FollowersList200Response_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Followers_List
               (Bookmark,
                Page_Size,
                Result,
                Context);
         end Followers_List;

         --  List linked businesses
         procedure Linked_Business_Accounts_Get (Result : out ;
         Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Linked_Business_Accounts_Get (Result, Context);
         end Linked_Business_Accounts_Get;

         --  Unverify website
         procedure Unverify_Website_Delete
            (Website : in Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Unverify_Website_Delete
               (Website,
                Context);
         end Unverify_Website_Delete;

         --  Get user account analytics
         procedure User_Account_Analytics
            (Start_Date : in Swagger.Date;
             End_Date : in Swagger.Date;
             From_Claimed_Content : in Swagger.Nullable_UString;
             Pin_Format : in Swagger.Nullable_UString;
             App_Types : in Swagger.Nullable_UString;
             Content_Type : in Swagger.Nullable_UString;
             Source : in Swagger.Nullable_UString;
             Metric_Types : in Swagger.UString_Vectors.Vector;
             Split_Field : in Swagger.Nullable_UString;
             Ad_Account_Id : in Swagger.Nullable_UString;
             Result : out Swagger..Models.AnalyticsMetricsResponse_Type_Map;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.User_Account_Analytics
               (Start_Date,
                End_Date,
                From_Claimed_Content,
                Pin_Format,
                App_Types,
                Content_Type,
                Source,
                Metric_Types,
                Split_Field,
                Ad_Account_Id,
                Result,
                Context);
         end User_Account_Analytics;

         --  Get user account top pins analytics
         procedure User_Account_Analytics_Top_Pins
            (Start_Date : in Swagger.Date;
             End_Date : in Swagger.Date;
             Sort_By : in Swagger.UString;
             From_Claimed_Content : in Swagger.Nullable_UString;
             Pin_Format : in Swagger.Nullable_UString;
             App_Types : in Swagger.Nullable_UString;
             Content_Type : in Swagger.Nullable_UString;
             Source : in Swagger.Nullable_UString;
             Metric_Types : in Swagger.UString_Vectors.Vector;
             Num_Of_Pins : in Swagger.Nullable_Integer;
             Created_In_Last_NDays : in Swagger.Nullable_Integer;
             Ad_Account_Id : in Swagger.Nullable_UString;
             Result : out .Models.TopPinsAnalyticsResponse_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.User_Account_Analytics_Top_Pins
               (Start_Date,
                End_Date,
                Sort_By,
                From_Claimed_Content,
                Pin_Format,
                App_Types,
                Content_Type,
                Source,
                Metric_Types,
                Num_Of_Pins,
                Created_In_Last_NDays,
                Ad_Account_Id,
                Result,
                Context);
         end User_Account_Analytics_Top_Pins;

         --  Get user account top video pins analytics
         procedure User_Account_Analytics_Top_Video_Pins
            (Start_Date : in Swagger.Date;
             End_Date : in Swagger.Date;
             Sort_By : in Swagger.UString;
             From_Claimed_Content : in Swagger.Nullable_UString;
             Pin_Format : in Swagger.Nullable_UString;
             App_Types : in Swagger.Nullable_UString;
             Content_Type : in Swagger.Nullable_UString;
             Source : in Swagger.Nullable_UString;
             Metric_Types : in Swagger.UString_Vectors.Vector;
             Num_Of_Pins : in Swagger.Nullable_Integer;
             Created_In_Last_NDays : in Swagger.Nullable_Integer;
             Ad_Account_Id : in Swagger.Nullable_UString;
             Result : out .Models.TopVideoPinsAnalyticsResponse_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.User_Account_Analytics_Top_Video_Pins
               (Start_Date,
                End_Date,
                Sort_By,
                From_Claimed_Content,
                Pin_Format,
                App_Types,
                Content_Type,
                Source,
                Metric_Types,
                Num_Of_Pins,
                Created_In_Last_NDays,
                Ad_Account_Id,
                Result,
                Context);
         end User_Account_Analytics_Top_Video_Pins;

         --  List following interests
         procedure User_Account_Followed_Interests
            (Username : in Swagger.UString;
             Bookmark : in Swagger.Nullable_UString;
             Page_Size : in Swagger.Nullable_Integer;
             Result : out .Models.UserAccountFollowedInterests200Response_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.User_Account_Followed_Interests
               (Username,
                Bookmark,
                Page_Size,
                Result,
                Context);
         end User_Account_Followed_Interests;

         --  Get user account
         procedure User_Account_Get
            (Ad_Account_Id : in Swagger.Nullable_UString;
             Result : out .Models.Account_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.User_Account_Get
               (Ad_Account_Id,
                Result,
                Context);
         end User_Account_Get;

         --  List following
         procedure User_Following_Get
            (Bookmark : in Swagger.Nullable_UString;
             Page_Size : in Swagger.Nullable_Integer;
             Feed_Type : in UserFollowingFeedType_Type;
             Explicit_Following : in Swagger.Nullable_Boolean;
             Ad_Account_Id : in Swagger.Nullable_UString;
             Result : out .Models.UserFollowingGet200Response_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.User_Following_Get
               (Bookmark,
                Page_Size,
                Feed_Type,
                Explicit_Following,
                Ad_Account_Id,
                Result,
                Context);
         end User_Following_Get;

         --  Get user websites
         procedure User_Websites_Get
            (Bookmark : in Swagger.Nullable_UString;
             Page_Size : in Swagger.Nullable_Integer;
             Result : out .Models.UserWebsitesGet200Response_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.User_Websites_Get
               (Bookmark,
                Page_Size,
                Result,
                Context);
         end User_Websites_Get;

         --  Verify website
         procedure Verify_Website_Update
            (User_Website_Verify_Request_Type : in UserWebsiteVerifyRequest_Type;
             Ad_Account_Id : in Swagger.Nullable_UString;
             Result : out .Models.UserWebsiteSummary_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Verify_Website_Update
               (User_Website_Verify_Request_Type,
                Ad_Account_Id,
                Result,
                Context);
         end Verify_Website_Update;

         --  Get user verification code for website claiming
         procedure Website_Verification_Get
            (Ad_Account_Id : in Swagger.Nullable_UString;
             Result : out .Models.UserWebsiteVerificationCode_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Website_Verification_Get
               (Ad_Account_Id,
                Result,
                Context);
         end Website_Verification_Get;

      end Server;

   end Shared_Instance;

end .Skeletons;
